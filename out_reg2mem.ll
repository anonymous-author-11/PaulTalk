; ModuleID = '<stdin>'
source_filename = "llvm-link"

@_parameterization_Nothing = linkonce_odr constant [2 x ptr] [ptr @nothing_typ, ptr null]
@_parameterization_Nil = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr null]
@_parameterization_FunctionPtri32_to_Ptri1 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri1, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_Ptri32_or_Nil = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Nil, ptr null]
@fralm_bigtingstxt = internal constant [12 x i8] c"bigtings.txt"
@ooxqh_thisnis_hownwe_donit = internal constant [20 x i8] c"this\0Ais how\0Awe do\0Ait"
@bdwic_bigtingstxt = internal constant [12 x i8] c"bigtings.txt"
@_parameterization_FunctionPtri32_to_Nothing = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Nothing, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_FunctionPtri32._Ptri32_to_Ptri32 = linkonce_odr constant [5 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_FunctionPtri32_to_Ptri32 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_Integer2 = linkonce_odr constant [2 x ptr] [ptr @Integer2, ptr null]
@tuyik_boom = internal constant [5 x i8] c"boom!"
@icnqd_so_it_is_true = internal constant [14 x i8] c"so it is true!"
@_parameterization_ArrayPtri32 = linkonce_odr constant [3 x ptr] [ptr @Array, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_BufferPtri32 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@tvzvu_barrys_color_is = internal constant [16 x i8] c"barry's color is"
@_parameterization_Beaver = linkonce_odr constant [2 x ptr] [ptr @Beaver, ptr null]
@_parameterization_Animal = linkonce_odr constant [2 x ptr] [ptr @Animal, ptr null]
@yrfxg_did_get_here = internal constant [13 x i8] c"did get here!"
@drbvc_start = internal constant [5 x i8] c"start"
@_parameterization_Ptri32_or_Ptrf64 = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptrf64, ptr null]
@_parameterization_Ptri64 = linkonce_odr constant [2 x ptr] [ptr @i64_typ, ptr null]
@ipwrw_one = internal constant [3 x i8] c"one"
@zpixf_sourcemini = internal constant [11 x i8] c"source.mini"
@royyp_beaver = internal constant [7 x i8] c"beaver!"
@qwqtj_animal = internal constant [7 x i8] c"animal!"
@_parameterization_ListNode = linkonce_odr constant [2 x ptr] [ptr @ListNode, ptr null]
@_parameterization_Ptrf64 = linkonce_odr constant [2 x ptr] [ptr @f64_typ, ptr null]
@fmzfd_Integer = internal constant [8 x i8] c"Integer2"
@yqbex_Here_I_am = internal constant [10 x i8] c"Here I am!"
@igxjg_number = internal constant [6 x i8] c"number"
@Integer_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Integer]
@Integer_offset_tbl = constant [4 x i32] [i32 23, i32 10, i32 0, i32 10]
@Integer = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 -735147942809078232, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Integer_hashtbl, ptr @Integer_offset_tbl, ptr @_data_size_Integer, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Integer_field_value, ptr @Integer_B_init_valuePtri32, ptr @Integer_B__ADD_otherPtri32, ptr @Integer_B__SUB_otherPtri32, ptr @Integer_B__MUL_otherPtri32, ptr @Integer_B__DIV_otherPtri32, ptr @Integer_B_print_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_] }
@BigBoy_hashtbl = constant [4 x ptr] [ptr @Representable, ptr @Object, ptr @any_typ, ptr @BigBoy]
@BigBoy_offset_tbl = constant [4 x i32] [i32 14, i32 16, i32 10, i32 10]
@BigBoy = constant { [3 x i64], [7 x ptr], [6 x ptr] } { [3 x i64] [i64 3069357308562348185, i64 4611686018427388361, i64 3], [7 x ptr] [ptr @subtype_test, ptr @BigBoy_hashtbl, ptr @BigBoy_offset_tbl, ptr @_data_size_BigBoy, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [6 x ptr] [ptr @BigBoy_B_introduce_, ptr @BigBoy_B_repr_, ptr @BigBoy_introduce_, ptr @Representable_repr_, ptr @BigBoy_B_repr_, ptr @Representable_repr_] }
@Integer2_hashtbl = constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Integer2, ptr @Integer, ptr @Representable, ptr null, ptr @BigBoy]
@Integer2_offset_tbl = constant [8 x i32] [i32 0, i32 42, i32 10, i32 10, i32 29, i32 48, i32 0, i32 42]
@Integer2 = constant { [3 x i64], [7 x ptr], [40 x ptr] } { [3 x i64] [i64 1844024195090879880, i64 4611686018427388181, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Integer2_hashtbl, ptr @Integer2_offset_tbl, ptr @_data_size_Integer2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [40 x ptr] [ptr @Integer2_field_value, ptr @Integer2_B_value_, ptr @Integer2_B_init_valuePtri32, ptr @Integer2_B__ADD_otherPtri32, ptr @Integer2_B__SUB_otherPtri32, ptr @Integer2_B__MUL_otherPtri32, ptr @Integer2_B__DIV_otherPtri32, ptr @Integer2_B_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @Integer2_value_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_field_value, ptr @Integer2_B_init_valuePtri32, ptr @Integer2_B__ADD_otherPtri32, ptr @Integer2_B__SUB_otherPtri32, ptr @Integer2_B__MUL_otherPtri32, ptr @Integer2_B__DIV_otherPtri32, ptr @Integer2_B_print_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_] }
@Animal_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Animal]
@Animal_offset_tbl = constant [4 x i32] [i32 23, i32 0, i32 10, i32 10]
@Animal = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 1075018126824711487, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Animal_hashtbl, ptr @Animal_offset_tbl, ptr @_data_size_Animal, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Animal_field_age, ptr @Animal_field_hp, ptr @Animal_field_skill, ptr @Animal_B_init_agePtri32_hpPtrf64_skillPtri32, ptr @Animal_B_say_age_, ptr @Animal_B_say_skill_, ptr @Animal_B_say_messagePtri32, ptr @Animal_B_do_nothing_, ptr @Animal_init_agePtri32_hpPtrf64_skillPtri32, ptr @Animal_say_age_, ptr @Animal_say_skill_, ptr @Animal_say_messagePtri32, ptr @Animal_do_nothing_] }
@Beaver_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Beaver]
@Beaver_offset_tbl = constant [4 x i32] [i32 0, i32 18, i32 10, i32 10]
@Beaver = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 -6124772949900838462, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Beaver_hashtbl, ptr @Beaver_offset_tbl, ptr @_data_size_Beaver, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @Beaver_field_color, ptr @Beaver_field_name, ptr @Beaver_B_init_colorPtri32_namePtrf64, ptr @Beaver_B__ADD_xPtri32, ptr @Beaver_B_say_color_, ptr @Beaver_init_colorPtri32_namePtrf64, ptr @Beaver__ADD_xPtri32, ptr @Beaver_say_color_] }
@ListNode_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @ListNode]
@ListNode_offset_tbl = constant [4 x i32] [i32 22, i32 10, i32 0, i32 10]
@ListNode = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 -1756024950533091476, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ListNode_hashtbl, ptr @ListNode_offset_tbl, ptr @_data_size_ListNode, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ListNode_field_data, ptr @ListNode_field_next, ptr @ListNode_B_init_dataPtri32, ptr @ListNode_B_push_nextListNode, ptr @ListNode_B_next_, ptr @ListNode_B_data_, ptr @ListNode_B_iterator_, ptr @ListNode_init_dataPtri32, ptr @ListNode_push_nextListNode, ptr @ListNode_next_, ptr @ListNode_data_, ptr @ListNode_iterator_] }
@ListIterator_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @ListIterator, ptr null]
@ListIterator_offset_tbl = constant [4 x i32] [i32 15, i32 10, i32 10, i32 0]
@ListIterator = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 -5838699946612561379, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ListIterator_hashtbl, ptr @ListIterator_offset_tbl, ptr @_data_size_ListIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @ListIterator_field_node, ptr @ListIterator_B_init_nodeListNode, ptr @ListIterator_B_next_, ptr @ListIterator_init_nodeListNode, ptr @ListIterator_next_] }
@Bard_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Bard, ptr null]
@Bard_offset_tbl = constant [4 x i32] [i32 17, i32 10, i32 10, i32 0]
@Bard = constant { [3 x i64], [7 x ptr], [7 x ptr] } { [3 x i64] [i64 -7979915337087193093, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Bard_hashtbl, ptr @Bard_offset_tbl, ptr @_data_size_Bard, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [7 x ptr] [ptr @Bard_B_init_, ptr @Bard_B_take_aPtri32_bPtrf64_take_aAnimal_bBeaver_take_aPtrf64_bPtrf64_take_aPtri32_bPtri32, ptr @Bard_init_, ptr @Bard_take_aPtri32_bPtrf64, ptr @Bard_take_aAnimal_bBeaver, ptr @Bard_take_aPtrf64_bPtrf64, ptr @Bard_take_aPtri32_bPtri32] }
@Integer_field_value = internal constant { ptr, ptr } { ptr @Integer_getter_value, ptr @Integer_setter_value }
@Integer2_field_value = internal constant { ptr, ptr } { ptr @Integer2_getter_value, ptr @Integer2_setter_value }
@Animal_field_age = internal constant { ptr, ptr } { ptr @Animal_getter_age, ptr @Animal_setter_age }
@Animal_field_hp = internal constant { ptr, ptr } { ptr @Animal_getter_hp, ptr @Animal_setter_hp }
@Animal_field_skill = internal constant { ptr, ptr } { ptr @Animal_getter_skill, ptr @Animal_setter_skill }
@Beaver_field_color = internal constant { ptr, ptr } { ptr @Beaver_getter_color, ptr @Beaver_setter_color }
@Beaver_field_name = internal constant { ptr, ptr } { ptr @Beaver_getter_name, ptr @Beaver_setter_name }
@ListNode_field_data = internal constant { ptr, ptr } { ptr @ListNode_getter_data, ptr @ListNode_setter_data }
@ListNode_field_next = internal constant { ptr, ptr } { ptr @ListNode_getter_next, ptr @ListNode_setter_next }
@ListIterator_field_node = internal constant { ptr, ptr } { ptr @ListIterator_getter_node, ptr @ListIterator_setter_node }
@bool_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i8_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i32_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@i64_typ_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @i64_typ, ptr null]
@i64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@i128_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @i128_typ, ptr @any_typ, ptr null]
@i128_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@f64_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@nil_typ_hashtbl = constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@any_typ_hashtbl = constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = constant [1 x i32] [i32 10]
@nothing_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @nothing_typ]
@nothing_typ_offset_tbl = constant [4 x i32] [i32 0, i32 10, i32 10, i32 10]
@coroutine_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @coroutine_typ]
@coroutine_typ_offset_tbl = constant [4 x i32] [i32 0, i32 10, i32 10, i32 10]
@function_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@buffer_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @buffer_typ, ptr @any_typ, ptr null]
@buffer_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@tuple_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @tuple_typ]
@tuple_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@union_typ_hashtbl = constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 10]
@Object_hashtbl = constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@_parameterization_Character = linkonce_odr constant [2 x ptr] [ptr @Character, ptr null]
@dkdyx_ = internal constant [9 x i8] c"---------"
@tyuxh_With_message = internal constant [12 x i8] c"With message"
@cyjud_At_line = internal constant [7 x i8] c"At line"
@uhgrx_Exception_thrown_from_file = internal constant [26 x i8] c"Exception thrown from file"
@eyary_ = internal constant [9 x i8] c"---------"
@jvhnd_None = internal constant [6 x i8] c"<None>"
@xqgco_Object = internal constant [6 x i8] c"Object"
@Representable_hashtbl = constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 12]
@String_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr @Representable, ptr @Container, ptr @Object, ptr null, ptr null, ptr @String]
@String_offset_tbl = constant [8 x i32] [i32 10, i32 62, i32 85, i32 85, i32 85, i32 0, i32 0, i32 10]
@Character_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = constant [4 x i32] [i32 15, i32 0, i32 10, i32 10]
@StringIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @StringIterator, ptr null]
@StringIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@Exception_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = constant [4 x i32] [i32 23, i32 0, i32 10, i32 10]
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@_parameterization_Ptri1 = linkonce_odr constant [2 x ptr] [ptr @bool_typ, ptr null]
@Pair_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
@Pair_offset_tbl = constant [4 x i32] [i32 20, i32 10, i32 10, i32 0]
@Container_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container]
@Container_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@Iterator_hashtbl = constant [4 x ptr] [ptr @Iterator, ptr @any_typ, ptr @Container, ptr @Object]
@Iterator_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 13, i32 13]
@Iterable_hashtbl = constant [4 x ptr] [ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Object]
@Iterable_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 33, i32 33]
@MapIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Container, ptr @MapIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@MapIterable_offset_tbl = constant [8 x i32] [i32 0, i32 61, i32 10, i32 38, i32 61, i32 0, i32 0, i32 10]
@MapIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterator, ptr @Container, ptr null, ptr @Iterator, ptr null, ptr null]
@MapIterator_offset_tbl = constant [8 x i32] [i32 21, i32 10, i32 10, i32 21, i32 0, i32 18, i32 0, i32 0]
@FilterIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @FilterIterable, ptr null, ptr @Container, ptr @Iterable, ptr null]
@FilterIterable_offset_tbl = constant [8 x i32] [i32 0, i32 60, i32 10, i32 10, i32 0, i32 60, i32 37, i32 0]
@FilterIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @FilterIterator, ptr null]
@FilterIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@ChainIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr @ChainIterable, ptr @Container, ptr null, ptr null, ptr @Object]
@ChainIterable_offset_tbl = constant [8 x i32] [i32 10, i32 37, i32 0, i32 10, i32 60, i32 0, i32 0, i32 60]
@ChainIterator_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ChainIterator]
@ChainIterator_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 21, i32 18, i32 21, i32 0, i32 10, i32 10]
@InterleaveIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Container, ptr @InterleaveIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@InterleaveIterable_offset_tbl = constant [8 x i32] [i32 0, i32 60, i32 10, i32 37, i32 60, i32 0, i32 0, i32 10]
@InterleaveIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @InterleaveIterator, ptr @Iterator, ptr null, ptr null]
@InterleaveIterator_offset_tbl = constant [8 x i32] [i32 21, i32 10, i32 0, i32 21, i32 10, i32 18, i32 0, i32 0]
@ZipIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr null, ptr @Container, ptr null, ptr @ZipIterable, ptr @Object]
@ZipIterable_offset_tbl = constant [8 x i32] [i32 10, i32 39, i32 0, i32 0, i32 62, i32 0, i32 10, i32 62]
@ZipIterator_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ZipIterator]
@ZipIterator_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 22, i32 19, i32 22, i32 0, i32 10, i32 10]
@ProductIterable_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @ProductIterable, ptr @Container, ptr null, ptr @Iterable, ptr null, ptr null]
@ProductIterable_offset_tbl = constant [8 x i32] [i32 62, i32 10, i32 10, i32 62, i32 0, i32 39, i32 0, i32 0]
@ProductIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @Iterator, ptr null, ptr @Container, ptr @Object, ptr null, ptr @ProductIterator]
@ProductIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 21, i32 0, i32 24, i32 24, i32 0, i32 10]
@Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
@Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
@MapIterable_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable_getter_iterable, ptr @MapIterable_setter_iterable }
@MapIterable_field_f = internal constant { ptr, ptr } { ptr @MapIterable_getter_f, ptr @MapIterable_setter_f }
@MapIterator_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator_getter_iterator, ptr @MapIterator_setter_iterator }
@MapIterator_field_f = internal constant { ptr, ptr } { ptr @MapIterator_getter_f, ptr @MapIterator_setter_f }
@FilterIterable_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable_getter_iterable, ptr @FilterIterable_setter_iterable }
@FilterIterable_field_f = internal constant { ptr, ptr } { ptr @FilterIterable_getter_f, ptr @FilterIterable_setter_f }
@FilterIterator_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator_getter_iterator, ptr @FilterIterator_setter_iterator }
@FilterIterator_field_f = internal constant { ptr, ptr } { ptr @FilterIterator_getter_f, ptr @FilterIterator_setter_f }
@ChainIterable_field_first = internal constant { ptr, ptr } { ptr @ChainIterable_getter_first, ptr @ChainIterable_setter_first }
@ChainIterable_field_second = internal constant { ptr, ptr } { ptr @ChainIterable_getter_second, ptr @ChainIterable_setter_second }
@ChainIterator_field_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_first, ptr @ChainIterator_setter_first }
@ChainIterator_field_second = internal constant { ptr, ptr } { ptr @ChainIterator_getter_second, ptr @ChainIterator_setter_second }
@ChainIterator_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_on_first, ptr @ChainIterator_setter_on_first }
@InterleaveIterable_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_first, ptr @InterleaveIterable_setter_first }
@InterleaveIterable_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_second, ptr @InterleaveIterable_setter_second }
@InterleaveIterator_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_first, ptr @InterleaveIterator_setter_first }
@InterleaveIterator_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_second, ptr @InterleaveIterator_setter_second }
@InterleaveIterator_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_on_first, ptr @InterleaveIterator_setter_on_first }
@ZipIterable_field_first = internal constant { ptr, ptr } { ptr @ZipIterable_getter_first, ptr @ZipIterable_setter_first }
@ZipIterable_field_second = internal constant { ptr, ptr } { ptr @ZipIterable_getter_second, ptr @ZipIterable_setter_second }
@ZipIterator_field_first = internal constant { ptr, ptr } { ptr @ZipIterator_getter_first, ptr @ZipIterator_setter_first }
@ZipIterator_field_second = internal constant { ptr, ptr } { ptr @ZipIterator_getter_second, ptr @ZipIterator_setter_second }
@ProductIterable_field_first = internal constant { ptr, ptr } { ptr @ProductIterable_getter_first, ptr @ProductIterable_setter_first }
@ProductIterable_field_second = internal constant { ptr, ptr } { ptr @ProductIterable_getter_second, ptr @ProductIterable_setter_second }
@ProductIterator_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_first_iterator, ptr @ProductIterator_setter_first_iterator }
@ProductIterator_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterator, ptr @ProductIterator_setter_second_iterator }
@ProductIterator_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterable, ptr @ProductIterator_setter_second_iterable }
@ProductIterator_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator_getter_current_first, ptr @ProductIterator_setter_current_first }
@Math_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Math]
@Math_offset_tbl = constant [4 x i32] [i32 27, i32 0, i32 10, i32 10]
@Math = constant { [3 x i64], [7 x ptr], [17 x ptr] } { [3 x i64] [i64 8094150130346788308, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Math_hashtbl, ptr @Math_offset_tbl, ptr @_data_size_Math, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [17 x ptr] [ptr @Math_B__Self_sqrt_xPtrf64, ptr @Math_B__Self_abs_xPtrf64__Self_abs_xPtri32, ptr @Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32, ptr @Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64, ptr @Math_B__Self_round_xPtrf64, ptr @Math_B__Self_floor_xPtrf64, ptr @Math_B__Self_ceiling_xPtrf64, ptr @Math__Self_sqrt_xPtrf64, ptr @Math__Self_abs_xPtrf64, ptr @Math__Self_abs_xPtri32, ptr @Math__Self_max_aPtrf64_bPtrf64, ptr @Math__Self_max_aPtri32_bPtri32, ptr @Math__Self_min_aPtri32_bPtri32, ptr @Math__Self_min_aPtrf64_bPtrf64, ptr @Math__Self_round_xPtrf64, ptr @Math__Self_floor_xPtrf64, ptr @Math__Self_ceiling_xPtrf64] }
@Range_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable, ptr null, ptr @Range]
@Range_offset_tbl = constant [8 x i32] [i32 65, i32 10, i32 0, i32 65, i32 0, i32 42, i32 0, i32 10]
@Range = constant { [3 x i64], [7 x ptr], [55 x ptr] } { [3 x i64] [i64 5490049236840671069, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Range_hashtbl, ptr @Range_offset_tbl, ptr @_data_size_Range, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [55 x ptr] [ptr @Range_field_start, ptr @Range_field_end, ptr @Range_field_step, ptr @Range_field_Range_0, ptr @Range_B_init_endPtri32, ptr @Range_B_init_startPtri32_endPtri32, ptr @Range_B_step_stepPtri32, ptr @Range_B_iterator_, ptr @Range_B_each_fFunctionT_to_Nothing, ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Range_B_all_fFunctionT_to_Ptri1, ptr @Range_B_any_fFunctionT_to_Ptri1, ptr @Range_B_map_fFunctionT_to_U, ptr @Range_B_filter_fFunctionT_to_Ptri1, ptr @Range_B_chain_otherIterableT, ptr @Range_B_interleave_otherIterableT, ptr @Range_B_zip_otherIterableU, ptr @Range_B_product_otherIterableU, ptr @Range_init_endPtri32, ptr @Range_init_startPtri32_endPtri32, ptr @Range_step_stepPtri32, ptr @Range_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Range_field_Range_0, ptr @Range_B_iterator_, ptr @Range_B_each_fFunctionT_to_Nothing, ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Range_B_all_fFunctionT_to_Ptri1, ptr @Range_B_any_fFunctionT_to_Ptri1, ptr @Range_B_map_fFunctionT_to_U, ptr @Range_B_filter_fFunctionT_to_Ptri1, ptr @Range_B_chain_otherIterableT, ptr @Range_B_interleave_otherIterableT, ptr @Range_B_zip_otherIterableU, ptr @Range_B_product_otherIterableU, ptr @Range_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@RangeIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @Iterator, ptr @RangeIterator, ptr @Container, ptr @Object, ptr null, ptr null]
@RangeIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 18, i32 10, i32 21, i32 21, i32 0, i32 0]
@RangeIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -913562485944406675, i64 4611686018427388157, i64 7], [7 x ptr] [ptr @subtype_test, ptr @RangeIterator_hashtbl, ptr @RangeIterator_offset_tbl, ptr @_data_size_RangeIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @RangeIterator_field_counter, ptr @RangeIterator_field_end, ptr @RangeIterator_field_step, ptr @RangeIterator_field_RangeIterator_0, ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_B_next_, ptr @RangeIterator_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_next_, ptr @RangeIterator_field_RangeIterator_0, ptr @RangeIterator_B_next_, ptr @RangeIterator_next_] }
@Range_field_start = internal constant { ptr, ptr } { ptr @Range_getter_start, ptr @Range_setter_start }
@Range_field_end = internal constant { ptr, ptr } { ptr @Range_getter_end, ptr @Range_setter_end }
@Range_field_step = internal constant { ptr, ptr } { ptr @Range_getter_step, ptr @Range_setter_step }
@RangeIterator_field_counter = internal constant { ptr, ptr } { ptr @RangeIterator_getter_counter, ptr @RangeIterator_setter_counter }
@RangeIterator_field_end = internal constant { ptr, ptr } { ptr @RangeIterator_getter_end, ptr @RangeIterator_setter_end }
@RangeIterator_field_step = internal constant { ptr, ptr } { ptr @RangeIterator_getter_step, ptr @RangeIterator_setter_step }
@cfedv_false = internal constant [5 x i8] c"false"
@hjayz_true = internal constant [4 x i8] c"true"
@nvcyd_nil = internal constant [3 x i8] c"nil"
@IO_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 20]
@Blocking_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Blocking, ptr null]
@Blocking_offset_tbl = constant [4 x i32] [i32 12, i32 10, i32 10, i32 0]
@Blocking = constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 847773162914674935, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Blocking_hashtbl, ptr @Blocking_offset_tbl, ptr @_data_size_Blocking, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Blocking_B_init_, ptr @Blocking_init_] }
@Channel_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Channel]
@Channel_offset_tbl = constant [4 x i32] [i32 18, i32 10, i32 0, i32 10]
@Channel = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 -3668118116639750450, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Channel_hashtbl, ptr @Channel_offset_tbl, ptr @_data_size_Channel, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @Channel_field_Channel_0, ptr @Channel_field_value, ptr @Channel_B_init_, ptr @Channel_B_get_, ptr @Channel_B_put_new_valueT, ptr @Channel_init_, ptr @Channel_get_, ptr @Channel_put_new_valueT] }
@Channel_field_value = internal constant { ptr, ptr } { ptr @Channel_getter_value, ptr @Channel_setter_value }
@ujhot_Array = internal constant [5 x i8] c"Array"
@khhpi_arraymini = internal constant [10 x i8] c"array.mini"
@Array_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Array, ptr @Representable, ptr @Object]
@Array_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 68, i32 10, i32 91, i32 10, i32 91, i32 91]
@Array = constant { [3 x i64], [7 x ptr], [83 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr @_data_size_Array, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [83 x ptr] [ptr @Array_field_Array_0, ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_B__Self_from_iterable_iterableIterableT, ptr @Array_B_init_, ptr @Array_B_init_capacityPtri32, ptr @Array_B_init_lengthPtri32_capacityPtri32, ptr @Array_B_init_bufferBufferT_lengthPtri32_capacityPtri32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_extend_otherArrayT, ptr @Array_B_reserve_new_capacityPtri32, ptr @Array_B__index_xPtri32, ptr @Array_B__set_index_xPtri32_valueT, ptr @Array_B_throw_oob_xPtri32, ptr @Array_B_unchecked_index_xPtri32, ptr @Array_B_unchecked_insert_xPtri32_valueT, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_B_repr_, ptr @Array__Self_from_iterable_iterableIterableT, ptr @Array_init_, ptr @Array_init_capacityPtri32, ptr @Array_init_lengthPtri32_capacityPtri32, ptr @Array_init_bufferBufferT_lengthPtri32_capacityPtri32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_extend_otherArrayT, ptr @Array_reserve_new_capacityPtri32, ptr @Array__index_xPtri32, ptr @Array__set_index_xPtri32_valueT, ptr @Array_throw_oob_xPtri32, ptr @Array_unchecked_index_xPtri32, ptr @Array_unchecked_insert_xPtri32_valueT, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_repr_, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_B_repr_, ptr @Array_repr_] }
@ArrayIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @ArrayIterator, ptr @Iterator, ptr null, ptr null]
@ArrayIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 10, i32 17, i32 0, i32 0]
@ArrayIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr @_data_size_ArrayIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
@Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
@Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
@ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
@ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
@_parameterization_FileWriter = linkonce_odr constant [2 x ptr] [ptr @FileWriter, ptr null]
@vohfk_w = internal constant [1 x i8] c"w"
@_parameterization_FileReader = linkonce_odr constant [2 x ptr] [ptr @FileReader, ptr null]
@gshfn_r = internal constant [1 x i8] c"r"
@_parameterization_File = linkonce_odr constant [2 x ptr] [ptr @File, ptr null]
@_parameterization_Ptri8 = linkonce_odr constant [2 x ptr] [ptr @i8_typ, ptr null]
@xcidy_filesmini = internal constant [10 x i8] c"files.mini"
@coiwt_filesmini = internal constant [10 x i8] c"files.mini"
@_parameterization_String = linkonce_odr constant [2 x ptr] [ptr @String, ptr null]
@_parameterization_Ptri32 = linkonce_odr constant [2 x ptr] [ptr @i32_typ, ptr null]
@_parameterization_BufferPtri8 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@uysps_filesmini = internal constant [10 x i8] c"files.mini"
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@string_string = linkonce_odr constant [4 x i8] c"%s\0A\00"
@bool_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr @_data_size_bool_typ, ptr @_box_bool_typ, ptr @_unbox_bool_typ, ptr @_data_size_bool_typ], [0 x ptr] undef }
@i8_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr @_data_size_i8_typ, ptr @_box_i8_typ, ptr @_unbox_i8_typ, ptr @_data_size_i8_typ], [0 x ptr] undef }
@i32_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr @_data_size_i32_typ, ptr @_box_i32_typ, ptr @_unbox_i32_typ, ptr @_data_size_i32_typ], [0 x ptr] undef }
@i64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388157, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr @_data_size_i64_typ, ptr @_box_i64_typ, ptr @_unbox_i64_typ, ptr @_data_size_i64_typ], [0 x ptr] undef }
@i128_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -8755878215469463641, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i128_typ_hashtbl, ptr @i128_typ_offset_tbl, ptr @_data_size_i128_typ, ptr @_box_i128_typ, ptr @_unbox_i128_typ, ptr @_data_size_i128_typ], [0 x ptr] undef }
@f64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr @_data_size_f64_typ, ptr @_box_f64_typ, ptr @_unbox_f64_typ, ptr @_data_size_f64_typ], [0 x ptr] undef }
@nil_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr @_data_size_nil_typ, ptr @_box_nil_typ, ptr @_unbox_nil_typ, ptr @_data_size_nil_typ], [0 x ptr] undef }
@any_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [7 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr @_data_size_any_typ, ptr @_box_Default, ptr @_unbox_Default, ptr @_data_size_any_typ], [0 x ptr] undef }
@nothing_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -3334456163433371378, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @nothing_typ_hashtbl, ptr @nothing_typ_offset_tbl, ptr @_data_size_nothing_typ, ptr @_box_nothing_typ, ptr @_unbox_nothing_typ, ptr @_data_size_nothing_typ], [0 x ptr] undef }
@coroutine_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 7194361020959218064, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @coroutine_typ_hashtbl, ptr @coroutine_typ_offset_tbl, ptr @_data_size_coroutine_typ, ptr @_box_coroutine_typ, ptr @_unbox_coroutine_typ, ptr @_data_size_coroutine_typ], [0 x ptr] undef }
@function_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr @_data_size_function_typ, ptr @_box_function_typ, ptr @_unbox_function_typ, ptr @_data_size_function_typ], [0 x ptr] undef }
@buffer_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -318192747195410237, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @buffer_typ_hashtbl, ptr @buffer_typ_offset_tbl, ptr @_data_size_buffer_typ, ptr @_box_buffer_typ, ptr @_unbox_buffer_typ, ptr @_data_size_buffer_typ], [0 x ptr] undef }
@tuple_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3422634369532007740, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @tuple_typ_hashtbl, ptr @tuple_typ_offset_tbl, ptr @_data_size_tuple_typ, ptr @_box_tuple_typ, ptr @_unbox_tuple_typ, ptr @_data_size_tuple_typ], [0 x ptr] undef }
@union_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr @_data_size_union_typ, ptr @_box_union_typ, ptr @_unbox_union_typ, ptr @_data_size_union_typ], [0 x ptr] undef }
@Object = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr @_data_size_Object, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Pair = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr @_data_size_Pair, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Container = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 9056556090793359372, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Container_hashtbl, ptr @Container_offset_tbl, ptr @_data_size_Container, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterator = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388349, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr @_data_size_Iterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterable = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388477, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr @_data_size_Iterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@MapIterable = constant { [3 x i64], [7 x ptr], [51 x ptr] } { [3 x i64] [i64 -7488770571603291722, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterable_hashtbl, ptr @MapIterable_offset_tbl, ptr @_data_size_MapIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [51 x ptr] [ptr @MapIterable_field_MapIterable_0, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_field_iterable, ptr @MapIterable_field_f, ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_Ptri1, ptr @MapIterable_B_any_fFunctionT_to_Ptri1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_Ptri1, ptr @MapIterable_B_any_fFunctionT_to_Ptri1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@MapIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -146553482626734782, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterator_hashtbl, ptr @MapIterator_offset_tbl, ptr @_data_size_MapIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @MapIterator_field_MapIterator_0, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_field_iterator, ptr @MapIterator_field_f, ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_B_next_, ptr @MapIterator_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_next_, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_B_next_, ptr @MapIterator_next_] }
@FilterIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 8498466713076104350, i64 4611686018427388319, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterable_hashtbl, ptr @FilterIterable_offset_tbl, ptr @_data_size_FilterIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_field_iterable, ptr @FilterIterable_field_f, ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_Ptri1, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_init_iterableIterableT_fFunctionT_to_Ptri1, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@FilterIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -1221365496900303883, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterator_hashtbl, ptr @FilterIterator_offset_tbl, ptr @_data_size_FilterIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_field_iterator, ptr @FilterIterator_field_f, ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_Ptri1, ptr @FilterIterator_B_next_, ptr @FilterIterator_init_iteratorIteratorT_fFunctionT_to_Ptri1, ptr @FilterIterator_next_, ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_B_next_, ptr @FilterIterator_next_] }
@ChainIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 -2370247058431047815, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterable_hashtbl, ptr @ChainIterable_offset_tbl, ptr @_data_size_ChainIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_field_first, ptr @ChainIterable_field_second, ptr @ChainIterable_B_init_firstIterableT_secondIterableT, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_init_firstIterableT_secondIterableT, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ChainIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 6043157723929225452, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterator_hashtbl, ptr @ChainIterator_offset_tbl, ptr @_data_size_ChainIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_field_first, ptr @ChainIterator_field_second, ptr @ChainIterator_field_on_first, ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_B_next_, ptr @ChainIterator_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_next_, ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_B_next_, ptr @ChainIterator_next_] }
@InterleaveIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 4936782714255954462, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterable_hashtbl, ptr @InterleaveIterable_offset_tbl, ptr @_data_size_InterleaveIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_field_first, ptr @InterleaveIterable_field_second, ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@InterleaveIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -3924664358248524505, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterator_hashtbl, ptr @InterleaveIterator_offset_tbl, ptr @_data_size_InterleaveIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_field_first, ptr @InterleaveIterator_field_second, ptr @InterleaveIterator_field_on_first, ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_next_, ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_next_] }
@ZipIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 35232740166152944, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterable_hashtbl, ptr @ZipIterable_offset_tbl, ptr @_data_size_ZipIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ZipIterable_field_ZipIterable_0, ptr @ZipIterable_field_ZipIterable_1, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_field_first, ptr @ZipIterable_field_second, ptr @ZipIterable_B_init_firstIterableT_secondIterableU, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_init_firstIterableT_secondIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ZipIterator = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 -2141114445739585318, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterator_hashtbl, ptr @ZipIterator_offset_tbl, ptr @_data_size_ZipIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ZipIterator_field_ZipIterator_0, ptr @ZipIterator_field_ZipIterator_1, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_field_first, ptr @ZipIterator_field_second, ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_B_next_, ptr @ZipIterator_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_next_, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_B_next_, ptr @ZipIterator_next_] }
@ProductIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 4128338911757318636, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterable_hashtbl, ptr @ProductIterable_offset_tbl, ptr @_data_size_ProductIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ProductIterable_field_ProductIterable_0, ptr @ProductIterable_field_ProductIterable_1, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_field_first, ptr @ProductIterable_field_second, ptr @ProductIterable_B_init_firstIterableT_secondIterableU, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_init_firstIterableT_secondIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ProductIterator = constant { [3 x i64], [7 x ptr], [14 x ptr] } { [3 x i64] [i64 1697250377212095568, i64 4611686018427388157, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterator_hashtbl, ptr @ProductIterator_offset_tbl, ptr @_data_size_ProductIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [14 x ptr] [ptr @ProductIterator_field_ProductIterator_0, ptr @ProductIterator_field_ProductIterator_1, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_field_first_iterator, ptr @ProductIterator_field_second_iterator, ptr @ProductIterator_field_second_iterable, ptr @ProductIterator_field_current_first, ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_B_next_, ptr @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_next_, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_B_next_, ptr @ProductIterator_next_] }
@Representable = constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr @_data_size_Representable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@String = constant { [3 x i64], [7 x ptr], [77 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388601, i64 7], [7 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr @_data_size_String, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [77 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_field_String_0, ptr @String_B_init_, ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_append_xPtri8, ptr @String_B_extend_strString, ptr @String_B__index_xPtri32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_c_string_, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_Ptri1, ptr @String_B_any_fFunctionT_to_Ptri1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_Ptri1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_B_repr_, ptr @String_init_, ptr @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_append_xPtri8, ptr @String_extend_strString, ptr @String__index_xPtri32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_c_string_, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_repr_, ptr @String_field_String_0, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_Ptri1, ptr @String_B_any_fFunctionT_to_Ptri1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_Ptri1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_B_repr_, ptr @String_repr_] }
@Character = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr @_data_size_Character, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytePtri8, ptr @Character_byte_, ptr @Character_init_bytePtri8] }
@StringIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr @_data_size_StringIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_next_, ptr @StringIterator_next_] }
@Exception = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr @_data_size_Exception, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberPtri32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@IO = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [7 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr @_data_size_IO, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @IO_B__Self_print_xNil__Self_print_xPtri1__Self_print_xPtrf64__Self_print_xString__Self_print_xCharacter__Self_print_xPtri8__Self_print_xPtri32__Self_print_xRepresentable__Self_print_xPtri64, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xPtri1, ptr @IO__Self_print_xPtrf64, ptr @IO__Self_print_xString, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xPtri8, ptr @IO__Self_print_xPtri32, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xPtri64] }
@FileSystemError_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @FileSystemError, ptr @Object, ptr @Exception]
@FileSystemError_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 36, i32 23]
@FileSystemError = constant { [3 x i64], [7 x ptr], [26 x ptr] } { [3 x i64] [i64 -4504708879057548074, i64 4611686018427388291, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileSystemError_hashtbl, ptr @FileSystemError_offset_tbl, ptr @_data_size_FileSystemError, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [26 x ptr] [ptr @FileSystemError_field_line_number, ptr @FileSystemError_field_file_name, ptr @FileSystemError_field_message, ptr @FileSystemError_B_init_messageString, ptr @FileSystemError_B_init_, ptr @FileSystemError_B_set_info_line_numberPtri32_file_nameString, ptr @FileSystemError_B_report_, ptr @FileSystemError_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_, ptr @FileSystemError_field_line_number, ptr @FileSystemError_field_file_name, ptr @FileSystemError_field_message, ptr @FileSystemError_B_init_messageString, ptr @FileSystemError_B_init_, ptr @FileSystemError_B_set_info_line_numberPtri32_file_nameString, ptr @FileSystemError_B_report_, ptr @FileSystemError_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@File_hashtbl = constant [4 x ptr] [ptr @File, ptr null, ptr @any_typ, ptr @Object]
@File_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 26]
@File = constant { [3 x i64], [7 x ptr], [16 x ptr] } { [3 x i64] [i64 -2227788838181535664, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @File_hashtbl, ptr @File_offset_tbl, ptr @_data_size_File, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [16 x ptr] [ptr @File_field_name, ptr @File_field_mode, ptr @File_field_handle, ptr @File_field_open, ptr @File_B_init_nameString_modeString, ptr @File_B__set_mode_modeString, ptr @File_B_reopen_, ptr @File_B_close_, ptr @File_B_get_byte_, ptr @File_B_write_textString, ptr @File_init_nameString_modeString, ptr @File__set_mode_modeString, ptr @File_reopen_, ptr @File_close_, ptr @File_get_byte_, ptr @File_write_textString] }
@FileProcessor_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr null]
@FileProcessor_offset_tbl = constant [4 x i32] [i32 13, i32 10, i32 10, i32 0]
@FileProcessor = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 4146660827496349788, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileProcessor_hashtbl, ptr @FileProcessor_offset_tbl, ptr @_data_size_FileProcessor, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@FileReader_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr @FileReader]
@FileReader_offset_tbl = constant [4 x i32] [i32 18, i32 10, i32 15, i32 10]
@FileReader = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 5641023583277533454, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileReader_hashtbl, ptr @FileReader_offset_tbl, ptr @_data_size_FileReader, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @FileReader_field_FileReader_0, ptr @FileReader_B_init_, ptr @FileReader_B_process_fileFile, ptr @FileReader_init_, ptr @FileReader_process_fileFile, ptr @FileReader_field_FileReader_0, ptr @FileReader_B_process_fileFile, ptr @FileReader_process_fileFile] }
@FileWriter_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr @FileWriter]
@FileWriter_offset_tbl = constant [4 x i32] [i32 19, i32 10, i32 16, i32 10]
@FileWriter = constant { [3 x i64], [7 x ptr], [9 x ptr] } { [3 x i64] [i64 2522433070607690589, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileWriter_hashtbl, ptr @FileWriter_offset_tbl, ptr @_data_size_FileWriter, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [9 x ptr] [ptr @FileWriter_field_text, ptr @FileWriter_field_FileWriter_0, ptr @FileWriter_B_init_textString, ptr @FileWriter_B_process_fileFile, ptr @FileWriter_init_textString, ptr @FileWriter_process_fileFile, ptr @FileWriter_field_FileWriter_0, ptr @FileWriter_B_process_fileFile, ptr @FileWriter_process_fileFile] }
@FileSystem_hashtbl = constant [4 x ptr] [ptr @Object, ptr @FileSystem, ptr @any_typ, ptr null]
@FileSystem_offset_tbl = constant [4 x i32] [i32 17, i32 10, i32 10, i32 0]
@FileSystem = constant { [3 x i64], [7 x ptr], [7 x ptr] } { [3 x i64] [i64 5344209596779946859, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileSystem_hashtbl, ptr @FileSystem_offset_tbl, ptr @_data_size_FileSystem, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [7 x ptr] [ptr @FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT, ptr @FileSystem_B__Self_read_file_file_nameString, ptr @FileSystem_B__Self_write_file_file_nameString_textString, ptr @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T, ptr @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT, ptr @FileSystem__Self_read_file_file_nameString, ptr @FileSystem__Self_write_file_file_nameString_textString] }
@FileSystemError_field_line_number = internal constant { ptr, ptr } { ptr @FileSystemError_getter_line_number, ptr @FileSystemError_setter_line_number }
@FileSystemError_field_file_name = internal constant { ptr, ptr } { ptr @FileSystemError_getter_file_name, ptr @FileSystemError_setter_file_name }
@FileSystemError_field_message = internal constant { ptr, ptr } { ptr @FileSystemError_getter_message, ptr @FileSystemError_setter_message }
@File_field_name = internal constant { ptr, ptr } { ptr @File_getter_name, ptr @File_setter_name }
@File_field_mode = internal constant { ptr, ptr } { ptr @File_getter_mode, ptr @File_setter_mode }
@File_field_handle = internal constant { ptr, ptr } { ptr @File_getter_handle, ptr @File_setter_handle }
@File_field_open = internal constant { ptr, ptr } { ptr @File_getter_open, ptr @File_setter_open }
@FileWriter_field_text = internal constant { ptr, ptr } { ptr @FileWriter_getter_text, ptr @FileWriter_setter_text }
@string_string.119 = internal constant [4 x i8] c"%s\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = linkonce_odr thread_local global [3 x ptr] zeroinitializer
@current_coroutine = linkonce_odr thread_local global ptr null
@always_one = linkonce thread_local global i1 true
@current_ptr = internal thread_local global ptr null

define { i64, i64 } @_data_size_Integer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Integer_B_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 7, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer_B__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 8, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer_B__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 9, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer_B__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 10, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer_B__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 11, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer_B_print_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Integer_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = load i32, ptr %19, align 4
  call void %27(ptr %20, i32 %28) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @Integer__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %20) #16
  %29 = alloca i32, align 4
  store i32 %28, ptr %29, align 4
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %19, align 4
  %32 = add i32 %30, %31
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %34, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr ptr, ptr %35, i32 6
  %37 = load ptr, ptr %36, align 8
  %38 = call { i64, i64 } @size_wrapper(ptr %37, ptr %34)
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = call ptr @bump_malloc(i64 %39)
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  store ptr @Integer, ptr %44, align 8
  store ptr %40, ptr %43, align 8
  store i32 10, ptr %41, align 4
  %45 = load ptr, ptr %11, align 8
  %46 = load ptr, ptr %6, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 104, ptr %46)
  %48 = load i32, ptr %17, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %45) #16
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %55 = load i32, ptr %54, align 4
  %56 = load i32, ptr %19, align 4
  %57 = add i32 %55, %56
  %58 = alloca i32, align 4
  store i32 %57, ptr %58, align 4
  %59 = load i32, ptr %58, align 4
  %60 = load ptr, ptr %44, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %43, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %42, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %41, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca [1 x ptr], align 8
  %69 = getelementptr [1 x ptr], ptr %68, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 1, ptr %68)
  %71 = call ptr @llvm.invariant.start.p0(i64 104, ptr %60)
  %72 = getelementptr ptr, ptr %60, i32 %66
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = alloca { ptr }, align 8
  %76 = getelementptr { ptr }, ptr %75, i32 0, i32 0
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %67, ptr %75)
  call void %77({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %68, i32 %59) #17
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %44, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %82 = load ptr, ptr %43, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %84 = load ptr, ptr %42, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %86 = load i32, ptr %41, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %78, ptr @Integer)
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %81, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %85, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define { ptr, ptr, ptr, i32 } @Integer__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %20) #16
  %29 = alloca i32, align 4
  store i32 %28, ptr %29, align 4
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %19, align 4
  %32 = sub i32 %30, %31
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %34, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr ptr, ptr %35, i32 6
  %37 = load ptr, ptr %36, align 8
  %38 = call { i64, i64 } @size_wrapper(ptr %37, ptr %34)
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = call ptr @bump_malloc(i64 %39)
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  store ptr @Integer, ptr %44, align 8
  store ptr %40, ptr %43, align 8
  store i32 10, ptr %41, align 4
  %45 = load ptr, ptr %11, align 8
  %46 = load ptr, ptr %6, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 104, ptr %46)
  %48 = load i32, ptr %17, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %45) #16
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %55 = load i32, ptr %54, align 4
  %56 = load i32, ptr %19, align 4
  %57 = sub i32 %55, %56
  %58 = alloca i32, align 4
  store i32 %57, ptr %58, align 4
  %59 = load i32, ptr %58, align 4
  %60 = load ptr, ptr %44, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %43, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %42, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %41, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca [1 x ptr], align 8
  %69 = getelementptr [1 x ptr], ptr %68, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 1, ptr %68)
  %71 = call ptr @llvm.invariant.start.p0(i64 104, ptr %60)
  %72 = getelementptr ptr, ptr %60, i32 %66
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = alloca { ptr }, align 8
  %76 = getelementptr { ptr }, ptr %75, i32 0, i32 0
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %67, ptr %75)
  call void %77({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %68, i32 %59) #17
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %44, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %82 = load ptr, ptr %43, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %84 = load ptr, ptr %42, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %86 = load i32, ptr %41, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %78, ptr @Integer)
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %81, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %85, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define { ptr, ptr, ptr, i32 } @Integer__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %20) #16
  %29 = alloca i32, align 4
  store i32 %28, ptr %29, align 4
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %19, align 4
  %32 = mul i32 %30, %31
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %34, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr ptr, ptr %35, i32 6
  %37 = load ptr, ptr %36, align 8
  %38 = call { i64, i64 } @size_wrapper(ptr %37, ptr %34)
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = call ptr @bump_malloc(i64 %39)
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  store ptr @Integer, ptr %44, align 8
  store ptr %40, ptr %43, align 8
  store i32 10, ptr %41, align 4
  %45 = load ptr, ptr %11, align 8
  %46 = load ptr, ptr %6, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 104, ptr %46)
  %48 = load i32, ptr %17, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %45) #16
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %55 = load i32, ptr %54, align 4
  %56 = load i32, ptr %19, align 4
  %57 = mul i32 %55, %56
  %58 = alloca i32, align 4
  store i32 %57, ptr %58, align 4
  %59 = load i32, ptr %58, align 4
  %60 = load ptr, ptr %44, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %43, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %42, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %41, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca [1 x ptr], align 8
  %69 = getelementptr [1 x ptr], ptr %68, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 1, ptr %68)
  %71 = call ptr @llvm.invariant.start.p0(i64 104, ptr %60)
  %72 = getelementptr ptr, ptr %60, i32 %66
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = alloca { ptr }, align 8
  %76 = getelementptr { ptr }, ptr %75, i32 0, i32 0
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %67, ptr %75)
  call void %77({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %68, i32 %59) #17
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %44, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %82 = load ptr, ptr %43, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %84 = load ptr, ptr %42, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %86 = load i32, ptr %41, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %78, ptr @Integer)
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %81, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %85, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define { ptr, ptr, ptr, i32 } @Integer__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %20) #16
  %29 = alloca i32, align 4
  store i32 %28, ptr %29, align 4
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %19, align 4
  %32 = sdiv i32 %30, %31
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %34, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr ptr, ptr %35, i32 6
  %37 = load ptr, ptr %36, align 8
  %38 = call { i64, i64 } @size_wrapper(ptr %37, ptr %34)
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = call ptr @bump_malloc(i64 %39)
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  store ptr @Integer, ptr %44, align 8
  store ptr %40, ptr %43, align 8
  store i32 10, ptr %41, align 4
  %45 = load ptr, ptr %11, align 8
  %46 = load ptr, ptr %6, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 104, ptr %46)
  %48 = load i32, ptr %17, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %45) #16
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %55 = load i32, ptr %54, align 4
  %56 = load i32, ptr %19, align 4
  %57 = sdiv i32 %55, %56
  %58 = alloca i32, align 4
  store i32 %57, ptr %58, align 4
  %59 = load i32, ptr %58, align 4
  %60 = load ptr, ptr %44, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %43, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %42, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %41, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca [1 x ptr], align 8
  %69 = getelementptr [1 x ptr], ptr %68, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 1, ptr %68)
  %71 = call ptr @llvm.invariant.start.p0(i64 104, ptr %60)
  %72 = getelementptr ptr, ptr %60, i32 %66
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = alloca { ptr }, align 8
  %76 = getelementptr { ptr }, ptr %75, i32 0, i32 0
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %67, ptr %75)
  call void %77({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %68, i32 %59) #17
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %44, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %82 = load ptr, ptr %43, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %84 = load ptr, ptr %42, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %86 = load i32, ptr %41, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %78, ptr @Integer)
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %81, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %85, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define void @Integer_print_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Integer)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 104, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #16
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load i32, ptr %27, align 4
  store i32 %30, ptr %28, align 4
  store ptr @i32_typ, ptr %29, align 8
  %31 = load ptr, ptr %29, align 8
  %32 = insertvalue { ptr, i160 } undef, ptr %31, 0
  %33 = load i160, ptr %28, align 4
  %34 = insertvalue { ptr, i160 } %32, i160 %33, 1
  %35 = alloca [1 x ptr], align 8
  %36 = getelementptr [1 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 1, ptr %35)
  %38 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %39 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %40 = alloca { ptr }, align 8
  %41 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  store ptr %31, ptr %41, align 8
  %42 = call ptr @class_behavior_wrapper(ptr %39, ptr %40)
  call void %42(ptr %35, { ptr, i160 } %34) #17
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #0

define i32 @Integer_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Integer_setter_value(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_BigBoy(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @BigBoy_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 2, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [6 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @BigBoy_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 3, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [6 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @BigBoy_introduce_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @BigBoy)
  %18 = alloca i32, align 4
  store i32 11, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <10 x i8>, ptr @yqbex_Here_I_am, align 16
  store <10 x i8> %33, ptr %32, align 16
  %34 = alloca i32, align 4
  store i32 10, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 11, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  store ptr @String, ptr %43, align 8
  store ptr %42, ptr %44, align 8
  store i32 10, ptr %45, align 4
  %46 = alloca i32, align 4
  store i32 10, ptr %46, align 4
  %47 = alloca i32, align 4
  store i32 11, ptr %47, align 4
  %48 = load ptr, ptr %24, align 8
  %49 = insertvalue { ptr } undef, ptr %48, 0
  %50 = load i32, ptr %46, align 4
  %51 = load i32, ptr %47, align 4
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %44, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 2
  %60 = load i32, ptr %45, align 4
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %60, 3
  %62 = alloca [3 x ptr], align 8
  %63 = getelementptr [3 x ptr], ptr %62, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %62, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = getelementptr [3 x ptr], ptr %62, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 9, ptr %62)
  %67 = call ptr @llvm.invariant.start.p0(i64 616, ptr %53)
  %68 = getelementptr ptr, ptr %53, i32 %60
  %69 = getelementptr ptr, ptr %68, i32 5
  %70 = load ptr, ptr %69, align 8
  %71 = alloca { ptr, ptr, ptr }, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 0
  store ptr @buffer_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 1
  store ptr @i32_typ, ptr %73, align 8
  %74 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 2
  store ptr @i32_typ, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr %70, { ptr, ptr, ptr, i32 } %61, ptr %71)
  call void %75({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr %62, { ptr } %49, i32 %50, i32 %51) #17
  %76 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, i160 } undef, ptr %77, 0
  %79 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 1
  %80 = load i160, ptr %79, align 4
  %81 = insertvalue { ptr, i160 } %78, i160 %80, 1
  %82 = alloca [1 x ptr], align 8
  %83 = getelementptr [1 x ptr], ptr %82, i32 0, i32 0
  store ptr @_parameterization_String, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 1, ptr %82)
  %85 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %86 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %87 = alloca { ptr }, align 8
  %88 = getelementptr { ptr }, ptr %87, i32 0, i32 0
  store ptr %77, ptr %88, align 8
  %89 = call ptr @class_behavior_wrapper(ptr %86, ptr %87)
  call void %89(ptr %82, { ptr, i160 } %81) #17
  ret void
}

define { i64, i64 } @_data_size_Integer2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Integer2_B_value_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 10, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [40 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Integer2_B_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 11, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [40 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer2_B__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 12, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [40 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer2_B__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 13, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [40 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer2_B__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 14, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [40 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer2_B__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 15, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [40 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer2_B_print_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [40 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Integer2_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 17, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [40 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Integer2_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 18, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [40 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i32 @Integer2_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Integer2)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 320, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #16
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = load i32, ptr %27, align 4
  ret i32 %28
}

define { ptr, ptr, ptr, i32 } @Integer2_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Integer2)
  %18 = alloca i32, align 4
  store i32 9, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([8 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <8 x i8>, ptr @fmzfd_Integer, align 8
  store <8 x i8> %33, ptr %32, align 8
  %34 = alloca i32, align 4
  store i32 8, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 9, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca i32, align 4
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  store ptr @String, ptr %46, align 8
  store ptr %42, ptr %45, align 8
  store i32 10, ptr %43, align 4
  %47 = alloca i32, align 4
  store i32 8, ptr %47, align 4
  %48 = alloca i32, align 4
  store i32 9, ptr %48, align 4
  %49 = load ptr, ptr %24, align 8
  %50 = insertvalue { ptr } undef, ptr %49, 0
  %51 = load i32, ptr %47, align 4
  %52 = load i32, ptr %48, align 4
  %53 = load ptr, ptr %46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %45, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %44, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %43, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca [3 x ptr], align 8
  %62 = getelementptr [3 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %61, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %61, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr %61)
  %66 = call ptr @llvm.invariant.start.p0(i64 616, ptr %53)
  %67 = getelementptr ptr, ptr %53, i32 %59
  %68 = getelementptr ptr, ptr %67, i32 5
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr, ptr, ptr }, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 2
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %60, ptr %70)
  call void %74({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr } %50, i32 %51, i32 %52) #17
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %77 = load ptr, ptr %46, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %79 = load ptr, ptr %45, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %81 = load ptr, ptr %44, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %83 = load i32, ptr %43, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %75, ptr @String)
  %84 = load ptr, ptr %76, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %78, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %80, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %82, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  ret { ptr, ptr, ptr, i32 } %91
}

define i32 @Integer2_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Integer2_setter_value(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_Animal(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Animal_B_init_agePtri32_hpPtrf64_skillPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @i32_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @f64_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 8, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [13 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @Animal_B_say_age_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Animal_B_say_skill_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 10, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Animal_B_say_messagePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 11, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Animal_B_do_nothing_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Animal_init_agePtri32_hpPtrf64_skillPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, double %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Animal)
  %21 = alloca i32, align 4
  store i32 %3, ptr %21, align 4
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load i32, ptr %21, align 4
  call void %29(ptr %22, i32 %30) #15
  %31 = alloca double, align 8
  store double %4, ptr %31, align 8
  %32 = load ptr, ptr %13, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 104, ptr %33)
  %35 = load i32, ptr %19, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = load double, ptr %31, align 8
  call void %40(ptr %32, double %41) #15
  %42 = alloca i32, align 4
  store i32 %5, ptr %42, align 4
  %43 = load ptr, ptr %13, align 8
  %44 = load ptr, ptr %8, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 104, ptr %44)
  %46 = load i32, ptr %19, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load i32, ptr %42, align 4
  call void %51(ptr %43, i32 %52) #15
  ret void
}

define void @Animal_say_age_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Animal)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 104, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #16
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = load i32, ptr %27, align 4
  %29 = load ptr, ptr %7, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = load ptr, ptr %10, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 1
  %33 = load ptr, ptr %13, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = load i32, ptr %16, align 4
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %35, 3
  %37 = alloca [1 x ptr], align 8
  %38 = getelementptr [1 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 1, ptr %37)
  %40 = call ptr @llvm.invariant.start.p0(i64 104, ptr %29)
  %41 = getelementptr ptr, ptr %29, i32 %35
  %42 = getelementptr ptr, ptr %41, i32 6
  %43 = load ptr, ptr %42, align 8
  %44 = alloca { ptr }, align 8
  %45 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  store ptr @i32_typ, ptr %45, align 8
  %46 = call ptr @behavior_wrapper(ptr %43, { ptr, ptr, ptr, i32 } %36, ptr %44)
  call void %46({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr %37, i32 %28) #17
  %47 = load ptr, ptr %10, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 104, ptr %48)
  %50 = load i32, ptr %16, align 4
  %51 = getelementptr ptr, ptr %48, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = call i32 %54(ptr %47) #16
  %56 = alloca i32, align 4
  store i32 %55, ptr %56, align 4
  %57 = load i32, ptr %56, align 4
  %58 = load ptr, ptr %7, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %58, 0
  %60 = load ptr, ptr %10, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %60, 1
  %62 = load ptr, ptr %13, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 2
  %64 = load i32, ptr %16, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %64, 3
  %66 = alloca [1 x ptr], align 8
  %67 = getelementptr [1 x ptr], ptr %66, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 1, ptr %66)
  %69 = call ptr @llvm.invariant.start.p0(i64 104, ptr %58)
  %70 = getelementptr ptr, ptr %58, i32 %64
  %71 = getelementptr ptr, ptr %70, i32 6
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr }, align 8
  %74 = getelementptr { ptr }, ptr %73, i32 0, i32 0
  store ptr @i32_typ, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %65, ptr %73)
  call void %75({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %66, i32 %57) #17
  ret void
}

define void @Animal_say_skill_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %8, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @Animal)
  %22 = load ptr, ptr %14, align 8
  %23 = load ptr, ptr %9, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = load i32, ptr %20, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = call i32 %30(ptr %22) #16
  %32 = alloca i32, align 4
  store i32 %31, ptr %32, align 4
  %33 = alloca i1, align 1
  store i1 true, ptr %33, align 1
  %34 = load i1, ptr %33, align 1
  br i1 %34, label %35, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %48

35:                                               ; preds = %3
  %36 = load i32, ptr %32, align 4
  store i32 %36, ptr %4, align 4
  store ptr @i32_typ, ptr %5, align 8
  %37 = load ptr, ptr %5, align 8
  %38 = insertvalue { ptr, i160 } undef, ptr %37, 0
  %39 = load i160, ptr %4, align 4
  %40 = insertvalue { ptr, i160 } %38, i160 %39, 1
  %41 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %41, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %43 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %44 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %45 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr %37, ptr %45, align 8
  %46 = call ptr @class_behavior_wrapper(ptr %44, ptr %7)
  call void %46(ptr %6, { ptr, i160 } %40) #17
  %47 = load i32, ptr %32, align 4
  store i32 %47, ptr %32, align 4
  br label %48

48:                                               ; preds = %._crit_edge, %35
  ret void
}

define void @Animal_say_messagePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Animal)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = alloca i160, align 8
  %21 = alloca ptr, align 8
  %22 = load i32, ptr %19, align 4
  store i32 %22, ptr %20, align 4
  store ptr @i32_typ, ptr %21, align 8
  %23 = load ptr, ptr %21, align 8
  %24 = insertvalue { ptr, i160 } undef, ptr %23, 0
  %25 = load i160, ptr %20, align 4
  %26 = insertvalue { ptr, i160 } %24, i160 %25, 1
  %27 = alloca [1 x ptr], align 8
  %28 = getelementptr [1 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %28, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 1, ptr %27)
  %30 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %31 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %32 = alloca { ptr }, align 8
  %33 = getelementptr { ptr }, ptr %32, i32 0, i32 0
  store ptr %23, ptr %33, align 8
  %34 = call ptr @class_behavior_wrapper(ptr %31, ptr %32)
  call void %34(ptr %27, { ptr, i160 } %26) #17
  ret void
}

define { ptr, i160 } @Animal_do_nothing_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Animal)
  %18 = alloca i32, align 4
  store i32 5, ptr %18, align 4
  %19 = alloca double, align 8
  store double 5.000000e+00, ptr %19, align 8
  %20 = alloca i32, align 4
  store i32 5, ptr %20, align 4
  %21 = alloca [1 x ptr], align 8
  store ptr @Animal, ptr %21, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 6
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = call ptr @bump_malloc(i64 %26)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr @Animal, ptr %28, align 8
  store ptr %27, ptr %29, align 8
  store i32 10, ptr %30, align 4
  %31 = alloca i32, align 4
  store i32 5, ptr %31, align 4
  %32 = alloca double, align 8
  store double 5.000000e+00, ptr %32, align 8
  %33 = alloca i32, align 4
  store i32 5, ptr %33, align 4
  %34 = load i32, ptr %31, align 4
  %35 = load double, ptr %32, align 8
  %36 = load i32, ptr %33, align 4
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = load ptr, ptr %29, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %43, 2
  %45 = load i32, ptr %30, align 4
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %45, 3
  %47 = alloca [3 x ptr], align 8
  %48 = getelementptr [3 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %48, align 8
  %49 = getelementptr [3 x ptr], ptr %47, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %49, align 8
  %50 = getelementptr [3 x ptr], ptr %47, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 9, ptr %47)
  %52 = call ptr @llvm.invariant.start.p0(i64 104, ptr %38)
  %53 = getelementptr ptr, ptr %38, i32 %45
  %54 = getelementptr ptr, ptr %53, i32 3
  %55 = load ptr, ptr %54, align 8
  %56 = alloca { ptr, ptr, ptr }, align 8
  %57 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 0
  store ptr @i32_typ, ptr %57, align 8
  %58 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 1
  store ptr @f64_typ, ptr %58, align 8
  %59 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 2
  store ptr @i32_typ, ptr %59, align 8
  %60 = call ptr @behavior_wrapper(ptr %55, { ptr, ptr, ptr, i32 } %46, ptr %56)
  call void %60({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr %47, i32 %34, double %35, i32 %36) #17
  %61 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, i160 } undef, ptr %62, 0
  %64 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %65 = load i160, ptr %64, align 4
  %66 = insertvalue { ptr, i160 } %63, i160 %65, 1
  ret { ptr, i160 } %66
}

define i32 @Animal_getter_skill(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Animal_setter_skill(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define double @Animal_getter_hp(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load double, ptr %7, align 8
  ret double %8
}

define void @Animal_setter_hp(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca double, align 8
  store double %1, ptr %9, align 8
  %10 = load double, ptr %9, align 8
  store double %10, ptr %8, align 8
  ret void
}

define i32 @Animal_getter_age(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Animal_setter_age(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_Beaver(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @Beaver_B_init_colorPtri32_namePtrf64({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @f64_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 5, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [8 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Beaver_B__ADD_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 6, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [8 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Beaver_B_say_color_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Beaver_init_colorPtri32_namePtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, double %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Beaver)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 64, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %20, align 4
  call void %28(ptr %21, i32 %29) #15
  %30 = alloca double, align 8
  store double %4, ptr %30, align 8
  %31 = load ptr, ptr %12, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 64, ptr %32)
  %34 = load i32, ptr %18, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = load double, ptr %30, align 8
  call void %39(ptr %31, double %40) #15
  ret void
}

define void @Beaver__ADD_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Beaver)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %20) #16
  %29 = alloca i32, align 4
  store i32 %28, ptr %29, align 4
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %19, align 4
  %32 = add i32 %30, %31
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = load ptr, ptr %11, align 8
  %35 = load ptr, ptr %6, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 64, ptr %35)
  %37 = load i32, ptr %17, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load i32, ptr %33, align 4
  call void %41(ptr %34, i32 %42) #15
  ret void
}

define void @Beaver_say_color_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Beaver)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 64, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #16
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load i32, ptr %27, align 4
  store i32 %30, ptr %28, align 4
  store ptr @i32_typ, ptr %29, align 8
  %31 = load ptr, ptr %29, align 8
  %32 = insertvalue { ptr, i160 } undef, ptr %31, 0
  %33 = load i160, ptr %28, align 4
  %34 = insertvalue { ptr, i160 } %32, i160 %33, 1
  %35 = alloca [1 x ptr], align 8
  %36 = getelementptr [1 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 1, ptr %35)
  %38 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %39 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %40 = alloca { ptr }, align 8
  %41 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  store ptr %31, ptr %41, align 8
  %42 = call ptr @class_behavior_wrapper(ptr %39, ptr %40)
  call void %42(ptr %35, { ptr, i160 } %34) #17
  ret void
}

define double @Beaver_getter_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load double, ptr %7, align 8
  ret double %8
}

define void @Beaver_setter_name(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca double, align 8
  store double %1, ptr %9, align 8
  %10 = load double, ptr %9, align 8
  store double %10, ptr %8, align 8
  ret void
}

define i32 @Beaver_getter_color(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Beaver_setter_color(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_ListNode(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @ListNode_B_init_dataPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 7, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [12 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ListNode_B_push_nextListNode({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @ListNode, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @ListNode to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 8, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [12 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ListNode_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [12 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ListNode_B_data_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 10, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [12 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ListNode_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 11, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [12 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ListNode_init_dataPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = load i32, ptr %19, align 4
  call void %27(ptr %20, i32 %28) #15
  %29 = alloca [0 x i8], align 1
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  %32 = load [0 x i8], ptr %29, align 1
  store [0 x i8] %32, ptr %30, align 1
  store ptr @nil_typ, ptr %31, align 8
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 96, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %31, align 8
  %43 = insertvalue { ptr, i160 } undef, ptr %42, 0
  %44 = load i160, ptr %30, align 4
  %45 = insertvalue { ptr, i160 } %43, i160 %44, 1
  call void %41(ptr %33, { ptr, i160 } %45) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ListNode_push_nextListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @ListNode)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 96, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %46 = load i160, ptr %45, align 4
  %47 = insertvalue { ptr, i160 } %44, i160 %46, 1
  call void %41(ptr %33, { ptr, i160 } %47) #15
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %22, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %52 = load ptr, ptr %25, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %54 = load ptr, ptr %28, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %56 = load i32, ptr %31, align 4
  store i32 %56, ptr %55, align 4
  call void @set_offset(ptr %48, ptr @ListNode)
  %57 = load ptr, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = load ptr, ptr %51, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 1
  %61 = load ptr, ptr %53, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 2
  %63 = load i32, ptr %55, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %63, 3
  ret { ptr, ptr, ptr, i32 } %64
}

define { ptr, i160 } @ListNode_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ListNode)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 96, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, i160 } %26(ptr %18) #16
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %27, ptr %28, align 8
  %29 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, i160 } undef, ptr %30, 0
  %32 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %33 = load i160, ptr %32, align 4
  %34 = insertvalue { ptr, i160 } %31, i160 %33, 1
  ret { ptr, i160 } %34
}

define i32 @ListNode_data_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ListNode)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 96, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #16
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = load i32, ptr %27, align 4
  ret i32 %28
}

define { ptr, ptr, ptr, i32 } @ListNode_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ListNode)
  %18 = alloca i32, align 4
  store i32 0, ptr %18, align 4
  %19 = alloca [1 x ptr], align 8
  store ptr @ListNode, ptr %19, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr ptr, ptr %20, i32 6
  %22 = load ptr, ptr %21, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr %22, ptr %19)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  %26 = alloca i32, align 4
  %27 = alloca ptr, align 8
  %28 = alloca ptr, align 8
  %29 = alloca ptr, align 8
  store ptr @ListNode, ptr %29, align 8
  store ptr %25, ptr %28, align 8
  store i32 10, ptr %26, align 4
  %30 = alloca i32, align 4
  store i32 0, ptr %30, align 4
  %31 = load i32, ptr %30, align 4
  %32 = load ptr, ptr %29, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %28, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %27, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %26, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  %40 = alloca [1 x ptr], align 8
  %41 = getelementptr [1 x ptr], ptr %40, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %41, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 1, ptr %40)
  %43 = call ptr @llvm.invariant.start.p0(i64 96, ptr %32)
  %44 = getelementptr ptr, ptr %32, i32 %38
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = alloca { ptr }, align 8
  %48 = getelementptr { ptr }, ptr %47, i32 0, i32 0
  store ptr @i32_typ, ptr %48, align 8
  %49 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %39, ptr %47)
  call void %49({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40, i32 %31) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %29, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %54 = load ptr, ptr %28, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %56 = load ptr, ptr %27, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %58 = load i32, ptr %26, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %50, ptr @ListNode)
  %59 = alloca i32, align 4
  %60 = alloca ptr, align 8
  %61 = alloca ptr, align 8
  %62 = alloca ptr, align 8
  %63 = load ptr, ptr %51, align 8
  store ptr %63, ptr %62, align 8
  %64 = load ptr, ptr %53, align 8
  store ptr %64, ptr %61, align 8
  %65 = load ptr, ptr %55, align 8
  store ptr %65, ptr %60, align 8
  %66 = load i32, ptr %57, align 4
  store i32 %66, ptr %59, align 4
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %69 = load ptr, ptr %7, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %71 = load ptr, ptr %10, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %73 = load ptr, ptr %13, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %75 = load i32, ptr %16, align 4
  store i32 %75, ptr %74, align 4
  call void @set_offset(ptr %67, ptr @ListNode)
  %76 = load ptr, ptr %68, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = load ptr, ptr %70, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %80 = load ptr, ptr %72, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %82 = load i32, ptr %74, align 4
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = load ptr, ptr %62, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %61, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %60, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %59, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  %92 = alloca [1 x ptr], align 8
  %93 = getelementptr [1 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %93, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 1, ptr %92)
  %95 = call ptr @llvm.invariant.start.p0(i64 96, ptr %84)
  %96 = getelementptr ptr, ptr %84, i32 %90
  %97 = getelementptr ptr, ptr %96, i32 3
  %98 = load ptr, ptr %97, align 8
  %99 = alloca { ptr }, align 8
  %100 = getelementptr { ptr }, ptr %99, i32 0, i32 0
  store ptr %76, ptr %100, align 8
  %101 = call ptr @behavior_wrapper(ptr %98, { ptr, ptr, ptr, i32 } %91, ptr %99)
  %102 = call { ptr, ptr, ptr, i32 } %101({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr %92, { ptr, ptr, ptr, i32 } %83) #17
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %102, ptr %103, align 8
  %104 = alloca { ptr, ptr, ptr, i32 }, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 0
  %107 = load ptr, ptr %105, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 1
  %110 = load ptr, ptr %108, align 8
  store ptr %110, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 2
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 3
  %116 = load i32, ptr %114, align 4
  store i32 %116, ptr %115, align 4
  call void @set_offset(ptr %104, ptr @ListNode)
  %117 = alloca [1 x ptr], align 8
  store ptr @ListIterator, ptr %117, align 8
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr ptr, ptr %118, i32 6
  %120 = load ptr, ptr %119, align 8
  %121 = call { i64, i64 } @size_wrapper(ptr %120, ptr %117)
  %122 = extractvalue { i64, i64 } %121, 0
  %123 = call ptr @bump_malloc(i64 %122)
  %124 = alloca i32, align 4
  %125 = alloca ptr, align 8
  %126 = alloca ptr, align 8
  %127 = alloca ptr, align 8
  store ptr @ListIterator, ptr %127, align 8
  store ptr %123, ptr %126, align 8
  store i32 10, ptr %124, align 4
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 0
  %130 = load ptr, ptr %62, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %132 = load ptr, ptr %61, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 2
  %134 = load ptr, ptr %60, align 8
  store ptr %134, ptr %133, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %136 = load i32, ptr %59, align 4
  store i32 %136, ptr %135, align 4
  call void @set_offset(ptr %128, ptr @ListNode)
  %137 = load ptr, ptr %129, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %137, 0
  %139 = load ptr, ptr %131, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %139, 1
  %141 = load ptr, ptr %133, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %140, ptr %141, 2
  %143 = load i32, ptr %135, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %142, i32 %143, 3
  %145 = load ptr, ptr %127, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %145, 0
  %147 = load ptr, ptr %126, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %147, 1
  %149 = load ptr, ptr %125, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %149, 2
  %151 = load i32, ptr %124, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %151, 3
  %153 = alloca [1 x ptr], align 8
  %154 = getelementptr [1 x ptr], ptr %153, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %154, align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 1, ptr %153)
  %156 = call ptr @llvm.invariant.start.p0(i64 40, ptr %145)
  %157 = getelementptr ptr, ptr %145, i32 %151
  %158 = getelementptr ptr, ptr %157, i32 1
  %159 = load ptr, ptr %158, align 8
  %160 = alloca { ptr }, align 8
  %161 = getelementptr { ptr }, ptr %160, i32 0, i32 0
  store ptr %137, ptr %161, align 8
  %162 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %152, ptr %160)
  call void %162({ ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %152, ptr %153, { ptr, ptr, ptr, i32 } %144) #17
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %165 = load ptr, ptr %127, align 8
  store ptr %165, ptr %164, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %167 = load ptr, ptr %126, align 8
  store ptr %167, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %169 = load ptr, ptr %125, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %171 = load i32, ptr %124, align 4
  store i32 %171, ptr %170, align 4
  call void @set_offset(ptr %163, ptr @ListIterator)
  %172 = load ptr, ptr %164, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %172, 0
  %174 = load ptr, ptr %166, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } %173, ptr %174, 1
  %176 = load ptr, ptr %168, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %176, 2
  %178 = load i32, ptr %170, align 4
  %179 = insertvalue { ptr, ptr, ptr, i32 } %177, i32 %178, 3
  ret { ptr, ptr, ptr, i32 } %179
}

define { i64, i64 } @_data_size_ListIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @ListIterator_B_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @ListNode, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @ListNode to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 3, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [5 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ListIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 4, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [5 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ListIterator_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListIterator)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @ListNode)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @ListNode)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 40, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %34, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %36, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %38, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %40, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  call void %49(ptr %42, { ptr, ptr, ptr, i32 } %57) #15
  ret void
}

define { ptr, i160 } @ListIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [0 x i8], align 1
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %10, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  store ptr %16, ptr %.reg2mem10, align 8
  %17 = load ptr, ptr %15, align 8
  %.reload14 = load ptr, ptr %.reg2mem10, align 8
  store ptr %17, ptr %.reload14, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  store ptr %22, ptr %.reg2mem5, align 8
  %23 = load i32, ptr %21, align 4
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  store i32 %23, ptr %.reload9, align 4
  call void @set_offset(ptr %11, ptr @ListIterator)
  %.reload13 = load ptr, ptr %.reg2mem10, align 8
  %24 = load ptr, ptr %.reload13, align 8
  %25 = load ptr, ptr %11, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 40, ptr %25)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %27 = load i32, ptr %.reload8, align 4
  %28 = getelementptr ptr, ptr %25, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = call { ptr, ptr, ptr, i32 } %31(ptr %24) #16
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %32, ptr %33, align 8
  call void @assume_offset(ptr %33, ptr @ListNode)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %38, 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %44 = load i32, ptr %43, align 4
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %44, 3
  %46 = alloca [0 x ptr], align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 0, ptr %46)
  %48 = call ptr @llvm.invariant.start.p0(i64 96, ptr %35)
  %49 = getelementptr ptr, ptr %35, i32 %44
  %50 = getelementptr ptr, ptr %49, i32 4
  %51 = load ptr, ptr %50, align 8
  %52 = alloca {}, align 8
  %53 = call ptr @behavior_wrapper(ptr %51, { ptr, ptr, ptr, i32 } %45, ptr %52)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr %46) #17
  %55 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %54, ptr %55, align 8
  %56 = load ptr, ptr %55, align 8
  %57 = ptrtoint ptr %56 to i64
  %58 = icmp eq i64 %57, ptrtoint (ptr @nil_typ to i64)
  %59 = icmp eq i64 %57, 0
  %60 = or i1 %58, %59
  %61 = icmp eq i1 %60, false
  %62 = alloca i1, align 1
  store i1 %61, ptr %62, align 1
  %63 = load i1, ptr %62, align 1
  br i1 %63, label %64, label %114

64:                                               ; preds = %3
  %65 = getelementptr { ptr, i160 }, ptr %55, i32 0, i32 0
  %66 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, i160 }, ptr %55, i32 0, i32 1
  %69 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %70 = load i160, ptr %68, align 4
  store i160 %70, ptr %69, align 4
  call void @set_offset(ptr %4, ptr @ListNode)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %82 = load i32, ptr %80, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %5, ptr @ListNode)
  %.reload12 = load ptr, ptr %.reg2mem10, align 8
  %83 = load ptr, ptr %.reload12, align 8
  %84 = load ptr, ptr %11, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 40, ptr %84)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %86 = load i32, ptr %.reload7, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %72, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %75, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %81, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  call void %90(ptr %83, { ptr, ptr, ptr, i32 } %98) #15
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %99 = load ptr, ptr %.reload11, align 8
  %100 = load ptr, ptr %11, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 40, ptr %100)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %102 = load i32, ptr %.reload6, align 4
  %103 = getelementptr ptr, ptr %100, i32 %102
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = call { ptr, ptr, ptr, i32 } %106(ptr %99) #16
  store { ptr, ptr, ptr, i32 } %107, ptr %6, align 8
  call void @assume_offset(ptr %6, ptr @ListNode)
  %108 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, i160 } undef, ptr %109, 0
  %111 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 1
  %112 = load i160, ptr %111, align 4
  %113 = insertvalue { ptr, i160 } %110, i160 %112, 1
  store { ptr, i160 } %113, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem15, align 8
  br label %120

114:                                              ; preds = %3
  %115 = load [0 x i8], ptr %7, align 1
  store [0 x i8] %115, ptr %8, align 1
  store ptr @nil_typ, ptr %9, align 8
  %116 = load ptr, ptr %9, align 8
  %117 = insertvalue { ptr, i160 } undef, ptr %116, 0
  %118 = load i160, ptr %8, align 4
  %119 = insertvalue { ptr, i160 } %117, i160 %118, 1
  store { ptr, i160 } %119, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem15, align 8
  br label %120

120:                                              ; preds = %114, %64
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  store { ptr, i160 } %.reload16, ptr %.reg2mem, align 8
  br label %121

121:                                              ; preds = %120
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr, ptr, ptr, i32 } @ListIterator_getter_node(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ListIterator_setter_node(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { ptr, i160 } @ListNode_getter_next(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, i160 } undef, ptr %9, 0
  %11 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %12 = load i160, ptr %11, align 4
  %13 = insertvalue { ptr, i160 } %10, i160 %12, 1
  ret { ptr, i160 } %13
}

define void @ListNode_setter_next(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %15 = load i160, ptr %13, align 4
  store i160 %15, ptr %14, align 4
  ret void
}

define i32 @ListNode_getter_data(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @ListNode_setter_data(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_Bard(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Bard_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 2, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [7 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Bard_B_take_aPtri32_bPtrf64_take_aAnimal_bBeaver_take_aPtrf64_bPtrf64_take_aPtri32_bPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i1, align 1
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %11 = alloca ptr, align 8
  %12 = load ptr, ptr %1, align 8
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %12, i32 0, i32 0, i32 1
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %12, i32 0, i32 0, i32 2
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %12, i32 0, i32 1, i32 0
  %16 = getelementptr { [3 x i64], [3 x ptr] }, ptr %12, i32 0, i32 1, i32 1
  %17 = load i64, ptr %13, align 4
  %18 = load i64, ptr %14, align 4
  %19 = load ptr, ptr %15, align 8
  %20 = load ptr, ptr %16, align 8
  %21 = load i64, ptr @Animal, align 4
  %22 = call i1 @subtype_test_wrapper(ptr %19, i64 %18, i64 %17, i64 %21, i64 ptrtoint (ptr @Animal to i64), ptr %20)
  store i1 %22, ptr %7, align 1
  %23 = load i1, ptr %7, align 1
  br i1 %23, label %24, label %37

24:                                               ; preds = %2
  %25 = getelementptr ptr, ptr %1, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { [3 x i64], [3 x ptr] }, ptr %26, i32 0, i32 0, i32 1
  %28 = getelementptr { [3 x i64], [3 x ptr] }, ptr %26, i32 0, i32 0, i32 2
  %29 = getelementptr { [3 x i64], [3 x ptr] }, ptr %26, i32 0, i32 1, i32 0
  %30 = getelementptr { [3 x i64], [3 x ptr] }, ptr %26, i32 0, i32 1, i32 1
  %31 = load i64, ptr %27, align 4
  %32 = load i64, ptr %28, align 4
  %33 = load ptr, ptr %29, align 8
  %34 = load ptr, ptr %30, align 8
  %35 = load i64, ptr @Beaver, align 4
  %36 = call i1 @subtype_test_wrapper(ptr %33, i64 %32, i64 %31, i64 %35, i64 ptrtoint (ptr @Beaver to i64), ptr %34)
  store i1 %36, ptr %3, align 1
  store i32 4, ptr %.reg2mem13, align 4
  br label %66

37:                                               ; preds = %2
  %38 = load ptr, ptr %1, align 8
  %39 = ptrtoint ptr %38 to i64
  %40 = icmp eq i64 %39, ptrtoint (ptr @f64_typ to i64)
  store i1 %40, ptr %8, align 1
  %41 = load i1, ptr %8, align 1
  store i1 %41, ptr %.reg2mem9, align 1
  %.reload12 = load i1, ptr %.reg2mem9, align 1
  br i1 %.reload12, label %42, label %43

42:                                               ; preds = %37
  store i32 0, ptr %.reg2mem17, align 4
  br label %53

43:                                               ; preds = %37
  %44 = load ptr, ptr %1, align 8
  %45 = ptrtoint ptr %44 to i64
  %46 = icmp eq i64 %45, ptrtoint (ptr @i32_typ to i64)
  store i1 %46, ptr %9, align 1
  %47 = getelementptr ptr, ptr %1, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = ptrtoint ptr %48 to i64
  %50 = icmp eq i64 %49, ptrtoint (ptr @i32_typ to i64)
  store i1 %50, ptr %5, align 1
  %51 = load i1, ptr %5, align 1
  %52 = zext i1 %51 to i32
  store i32 %52, ptr %.reg2mem7, align 4
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem17, align 4
  br label %53

53:                                               ; preds = %43, %42
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem5, align 4
  br label %54

54:                                               ; preds = %53
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %55 = zext i32 %.reload6 to i64
  %56 = trunc i64 %55 to i32
  switch i32 %56, label %64 [
    i32 0, label %57
  ]

57:                                               ; preds = %54
  %.reload11 = load i1, ptr %.reg2mem9, align 1
  %58 = select i1 %.reload11, ptr %4, ptr %6
  %.reload10 = load i1, ptr %.reg2mem9, align 1
  %59 = select i1 %.reload10, i32 5, i32 3
  store i32 %59, ptr %.reg2mem3, align 4
  %60 = getelementptr ptr, ptr %1, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = ptrtoint ptr %61 to i64
  %63 = icmp eq i64 %62, ptrtoint (ptr @f64_typ to i64)
  store i1 %63, ptr %58, align 1
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem15, align 4
  br label %65

64:                                               ; preds = %54
  store i32 6, ptr %.reg2mem15, align 4
  br label %65

65:                                               ; preds = %64, %57
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem13, align 4
  br label %66

66:                                               ; preds = %65, %24
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem, align 4
  br label %67

67:                                               ; preds = %66
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %11, align 4
  %68 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %69 = load i32, ptr %11, align 4
  %70 = getelementptr [7 x ptr], ptr %68, i32 0, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 10
  %72 = load ptr, ptr %71, align 8
  ret ptr %72
}

define void @Bard_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Bard)
  ret void
}

define void @Bard_take_aPtri32_bPtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Bard)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca i32, align 4
  %22 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %23 = load i32, ptr %22, align 4
  store i32 %23, ptr %21, align 4
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = alloca double, align 8
  %26 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %27 = load double, ptr %26, align 8
  store double %27, ptr %25, align 8
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load i32, ptr %21, align 4
  store i32 %30, ptr %28, align 4
  store ptr @i32_typ, ptr %29, align 8
  %31 = load ptr, ptr %29, align 8
  %32 = insertvalue { ptr, i160 } undef, ptr %31, 0
  %33 = load i160, ptr %28, align 4
  %34 = insertvalue { ptr, i160 } %32, i160 %33, 1
  %35 = alloca [1 x ptr], align 8
  %36 = getelementptr [1 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 1, ptr %35)
  %38 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %39 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %40 = alloca { ptr }, align 8
  %41 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  store ptr %31, ptr %41, align 8
  %42 = call ptr @class_behavior_wrapper(ptr %39, ptr %40)
  call void %42(ptr %35, { ptr, i160 } %34) #17
  %43 = alloca i160, align 8
  %44 = alloca ptr, align 8
  %45 = load double, ptr %25, align 8
  store double %45, ptr %43, align 8
  store ptr @f64_typ, ptr %44, align 8
  %46 = load ptr, ptr %44, align 8
  %47 = insertvalue { ptr, i160 } undef, ptr %46, 0
  %48 = load i160, ptr %43, align 4
  %49 = insertvalue { ptr, i160 } %47, i160 %48, 1
  %50 = alloca [1 x ptr], align 8
  %51 = getelementptr [1 x ptr], ptr %50, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 1, ptr %50)
  %53 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %54 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %55 = alloca { ptr }, align 8
  %56 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  store ptr %46, ptr %56, align 8
  %57 = call ptr @class_behavior_wrapper(ptr %54, ptr %55)
  call void %57(ptr %50, { ptr, i160 } %49) #17
  ret void
}

define void @Bard_take_aAnimal_bBeaver({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Bard)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %27 = load i160, ptr %25, align 4
  store i160 %27, ptr %26, align 4
  call void @set_offset(ptr %21, ptr @Animal)
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %28, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %31 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 0
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 1
  %35 = load i160, ptr %33, align 4
  store i160 %35, ptr %34, align 4
  call void @set_offset(ptr %29, ptr @Beaver)
  %36 = alloca i32, align 4
  store i32 8, ptr %36, align 4
  %37 = load i32, ptr %36, align 4
  %38 = sext i32 %37 to i64
  %39 = alloca ptr, align 8
  %40 = mul i64 %38, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %41 = call ptr @bump_malloc(i64 %40)
  store ptr %41, ptr %39, align 8
  %42 = alloca ptr, align 8
  %43 = getelementptr { ptr }, ptr %39, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  store ptr %44, ptr %42, align 8
  %45 = alloca i32, align 4
  store i32 0, ptr %45, align 4
  %46 = load ptr, ptr %42, align 8
  %47 = load i32, ptr %45, align 4
  %48 = sext i32 %47 to i64
  %49 = mul i64 ptrtoint (ptr getelementptr ([7 x i8], ptr null, i32 1) to i64), %48
  %50 = getelementptr i8, ptr %46, i64 %49
  %51 = load <7 x i8>, ptr @qwqtj_animal, align 8
  store <7 x i8> %51, ptr %50, align 8
  %52 = alloca i32, align 4
  store i32 7, ptr %52, align 4
  %53 = alloca i32, align 4
  store i32 8, ptr %53, align 4
  %54 = alloca [1 x ptr], align 8
  store ptr @String, ptr %54, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr ptr, ptr %55, i32 6
  %57 = load ptr, ptr %56, align 8
  %58 = call { i64, i64 } @size_wrapper(ptr %57, ptr %54)
  %59 = extractvalue { i64, i64 } %58, 0
  %60 = call ptr @bump_malloc(i64 %59)
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  store ptr @String, ptr %61, align 8
  store ptr %60, ptr %62, align 8
  store i32 10, ptr %63, align 4
  %64 = alloca i32, align 4
  store i32 7, ptr %64, align 4
  %65 = alloca i32, align 4
  store i32 8, ptr %65, align 4
  %66 = load ptr, ptr %42, align 8
  %67 = insertvalue { ptr } undef, ptr %66, 0
  %68 = load i32, ptr %64, align 4
  %69 = load i32, ptr %65, align 4
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = load ptr, ptr %62, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %73, 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %76, 2
  %78 = load i32, ptr %63, align 4
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, i32 %78, 3
  %80 = alloca [3 x ptr], align 8
  %81 = getelementptr [3 x ptr], ptr %80, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %81, align 8
  %82 = getelementptr [3 x ptr], ptr %80, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %82, align 8
  %83 = getelementptr [3 x ptr], ptr %80, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 9, ptr %80)
  %85 = call ptr @llvm.invariant.start.p0(i64 616, ptr %71)
  %86 = getelementptr ptr, ptr %71, i32 %78
  %87 = getelementptr ptr, ptr %86, i32 5
  %88 = load ptr, ptr %87, align 8
  %89 = alloca { ptr, ptr, ptr }, align 8
  %90 = getelementptr { ptr, ptr, ptr }, ptr %89, i32 0, i32 0
  store ptr @buffer_typ, ptr %90, align 8
  %91 = getelementptr { ptr, ptr, ptr }, ptr %89, i32 0, i32 1
  store ptr @i32_typ, ptr %91, align 8
  %92 = getelementptr { ptr, ptr, ptr }, ptr %89, i32 0, i32 2
  store ptr @i32_typ, ptr %92, align 8
  %93 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %79, ptr %89)
  call void %93({ ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %79, ptr %80, { ptr } %67, i32 %68, i32 %69) #17
  %94 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, i160 } undef, ptr %95, 0
  %97 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 1
  %98 = load i160, ptr %97, align 4
  %99 = insertvalue { ptr, i160 } %96, i160 %98, 1
  %100 = alloca [1 x ptr], align 8
  %101 = getelementptr [1 x ptr], ptr %100, i32 0, i32 0
  store ptr @_parameterization_String, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 1, ptr %100)
  %103 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %104 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %105 = alloca { ptr }, align 8
  %106 = getelementptr { ptr }, ptr %105, i32 0, i32 0
  store ptr %95, ptr %106, align 8
  %107 = call ptr @class_behavior_wrapper(ptr %104, ptr %105)
  call void %107(ptr %100, { ptr, i160 } %99) #17
  %108 = alloca i32, align 4
  store i32 8, ptr %108, align 4
  %109 = load i32, ptr %108, align 4
  %110 = sext i32 %109 to i64
  %111 = alloca ptr, align 8
  %112 = mul i64 %110, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %113 = call ptr @bump_malloc(i64 %112)
  store ptr %113, ptr %111, align 8
  %114 = alloca ptr, align 8
  %115 = getelementptr { ptr }, ptr %111, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  store ptr %116, ptr %114, align 8
  %117 = alloca i32, align 4
  store i32 0, ptr %117, align 4
  %118 = load ptr, ptr %114, align 8
  %119 = load i32, ptr %117, align 4
  %120 = sext i32 %119 to i64
  %121 = mul i64 ptrtoint (ptr getelementptr ([7 x i8], ptr null, i32 1) to i64), %120
  %122 = getelementptr i8, ptr %118, i64 %121
  %123 = load <7 x i8>, ptr @royyp_beaver, align 8
  store <7 x i8> %123, ptr %122, align 8
  %124 = alloca i32, align 4
  store i32 7, ptr %124, align 4
  %125 = alloca i32, align 4
  store i32 8, ptr %125, align 4
  %126 = alloca [1 x ptr], align 8
  store ptr @String, ptr %126, align 8
  %127 = load ptr, ptr %126, align 8
  %128 = getelementptr ptr, ptr %127, i32 6
  %129 = load ptr, ptr %128, align 8
  %130 = call { i64, i64 } @size_wrapper(ptr %129, ptr %126)
  %131 = extractvalue { i64, i64 } %130, 0
  %132 = call ptr @bump_malloc(i64 %131)
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  store ptr @String, ptr %133, align 8
  store ptr %132, ptr %134, align 8
  store i32 10, ptr %135, align 4
  %136 = alloca i32, align 4
  store i32 7, ptr %136, align 4
  %137 = alloca i32, align 4
  store i32 8, ptr %137, align 4
  %138 = load ptr, ptr %114, align 8
  %139 = insertvalue { ptr } undef, ptr %138, 0
  %140 = load i32, ptr %136, align 4
  %141 = load i32, ptr %137, align 4
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %143, 0
  %145 = load ptr, ptr %134, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %145, 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %148, 2
  %150 = load i32, ptr %135, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %150, 3
  %152 = alloca [3 x ptr], align 8
  %153 = getelementptr [3 x ptr], ptr %152, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %153, align 8
  %154 = getelementptr [3 x ptr], ptr %152, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %154, align 8
  %155 = getelementptr [3 x ptr], ptr %152, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %155, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 9, ptr %152)
  %157 = call ptr @llvm.invariant.start.p0(i64 616, ptr %143)
  %158 = getelementptr ptr, ptr %143, i32 %150
  %159 = getelementptr ptr, ptr %158, i32 5
  %160 = load ptr, ptr %159, align 8
  %161 = alloca { ptr, ptr, ptr }, align 8
  %162 = getelementptr { ptr, ptr, ptr }, ptr %161, i32 0, i32 0
  store ptr @buffer_typ, ptr %162, align 8
  %163 = getelementptr { ptr, ptr, ptr }, ptr %161, i32 0, i32 1
  store ptr @i32_typ, ptr %163, align 8
  %164 = getelementptr { ptr, ptr, ptr }, ptr %161, i32 0, i32 2
  store ptr @i32_typ, ptr %164, align 8
  %165 = call ptr @behavior_wrapper(ptr %160, { ptr, ptr, ptr, i32 } %151, ptr %161)
  call void %165({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %152, { ptr } %139, i32 %140, i32 %141) #17
  %166 = getelementptr { ptr, i160 }, ptr %133, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, i160 } undef, ptr %167, 0
  %169 = getelementptr { ptr, i160 }, ptr %133, i32 0, i32 1
  %170 = load i160, ptr %169, align 4
  %171 = insertvalue { ptr, i160 } %168, i160 %170, 1
  %172 = alloca [1 x ptr], align 8
  %173 = getelementptr [1 x ptr], ptr %172, i32 0, i32 0
  store ptr @_parameterization_String, ptr %173, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 1, ptr %172)
  %175 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %176 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %177 = alloca { ptr }, align 8
  %178 = getelementptr { ptr }, ptr %177, i32 0, i32 0
  store ptr %167, ptr %178, align 8
  %179 = call ptr @class_behavior_wrapper(ptr %176, ptr %177)
  call void %179(ptr %172, { ptr, i160 } %171) #17
  ret void
}

define void @Bard_take_aPtrf64_bPtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Bard)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca double, align 8
  %22 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %23 = load double, ptr %22, align 8
  store double %23, ptr %21, align 8
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = alloca double, align 8
  %26 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %27 = load double, ptr %26, align 8
  store double %27, ptr %25, align 8
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load double, ptr %21, align 8
  store double %30, ptr %28, align 8
  store ptr @f64_typ, ptr %29, align 8
  %31 = load ptr, ptr %29, align 8
  %32 = insertvalue { ptr, i160 } undef, ptr %31, 0
  %33 = load i160, ptr %28, align 4
  %34 = insertvalue { ptr, i160 } %32, i160 %33, 1
  %35 = alloca [1 x ptr], align 8
  %36 = getelementptr [1 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 1, ptr %35)
  %38 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %39 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %40 = alloca { ptr }, align 8
  %41 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  store ptr %31, ptr %41, align 8
  %42 = call ptr @class_behavior_wrapper(ptr %39, ptr %40)
  call void %42(ptr %35, { ptr, i160 } %34) #17
  %43 = alloca i160, align 8
  %44 = alloca ptr, align 8
  %45 = load double, ptr %25, align 8
  store double %45, ptr %43, align 8
  store ptr @f64_typ, ptr %44, align 8
  %46 = load ptr, ptr %44, align 8
  %47 = insertvalue { ptr, i160 } undef, ptr %46, 0
  %48 = load i160, ptr %43, align 4
  %49 = insertvalue { ptr, i160 } %47, i160 %48, 1
  %50 = alloca [1 x ptr], align 8
  %51 = getelementptr [1 x ptr], ptr %50, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 1, ptr %50)
  %53 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %54 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %55 = alloca { ptr }, align 8
  %56 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  store ptr %46, ptr %56, align 8
  %57 = call ptr @class_behavior_wrapper(ptr %54, ptr %55)
  call void %57(ptr %50, { ptr, i160 } %49) #17
  ret void
}

define void @Bard_take_aPtri32_bPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Bard)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca i32, align 4
  %22 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %23 = load i32, ptr %22, align 4
  store i32 %23, ptr %21, align 4
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = alloca i32, align 4
  %26 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %27 = load i32, ptr %26, align 4
  store i32 %27, ptr %25, align 4
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load i32, ptr %21, align 4
  store i32 %30, ptr %28, align 4
  store ptr @i32_typ, ptr %29, align 8
  %31 = load ptr, ptr %29, align 8
  %32 = insertvalue { ptr, i160 } undef, ptr %31, 0
  %33 = load i160, ptr %28, align 4
  %34 = insertvalue { ptr, i160 } %32, i160 %33, 1
  %35 = alloca [1 x ptr], align 8
  %36 = getelementptr [1 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 1, ptr %35)
  %38 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %39 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %40 = alloca { ptr }, align 8
  %41 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  store ptr %31, ptr %41, align 8
  %42 = call ptr @class_behavior_wrapper(ptr %39, ptr %40)
  call void %42(ptr %35, { ptr, i160 } %34) #17
  %43 = alloca i160, align 8
  %44 = alloca ptr, align 8
  %45 = load i32, ptr %25, align 4
  store i32 %45, ptr %43, align 4
  store ptr @i32_typ, ptr %44, align 8
  %46 = load ptr, ptr %44, align 8
  %47 = insertvalue { ptr, i160 } undef, ptr %46, 0
  %48 = load i160, ptr %43, align 4
  %49 = insertvalue { ptr, i160 } %47, i160 %48, 1
  %50 = alloca [1 x ptr], align 8
  %51 = getelementptr [1 x ptr], ptr %50, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 1, ptr %50)
  %53 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %54 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %55 = alloca { ptr }, align 8
  %56 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  store ptr %46, ptr %56, align 8
  %57 = call ptr @class_behavior_wrapper(ptr %54, ptr %55)
  call void %57(ptr %50, { ptr, i160 } %49) #17
  ret void
}

define { ptr, i160 } @phfxvzvziu(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  store ptr @i32_typ, ptr %11, align 8
  %12 = load i32, ptr %9, align 4
  store i32 %12, ptr %10, align 4
  %13 = load ptr, ptr %11, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = load i160, ptr %10, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define i1 @xyfgcdkiut(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i1 %0(i32 %7)
  %9 = alloca i1, align 1
  store i1 %8, ptr %9, align 1
  %10 = load i1, ptr %9, align 1
  ret i1 %10
}

define { ptr, i160 } @mxxmveicjx(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i32 %0(i32 %12, i32 %13)
  %15 = alloca i32, align 4
  store i32 %14, ptr %15, align 4
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  store ptr @i32_typ, ptr %17, align 8
  %18 = load i32, ptr %15, align 4
  store i32 %18, ptr %16, align 4
  %19 = load ptr, ptr %17, align 8
  %20 = insertvalue { ptr, i160 } undef, ptr %19, 0
  %21 = load i160, ptr %16, align 4
  %22 = insertvalue { ptr, i160 } %20, i160 %21, 1
  ret { ptr, i160 } %22
}

define void @yxbqnucngh(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  call void %0(i32 %7)
  ret void
}

define void @xiprjjcnyd(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  call void %0(i32 %7)
  ret void
}

define { ptr, i160 } @tdrrecbgaa(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  store ptr @i32_typ, ptr %11, align 8
  %12 = load i32, ptr %9, align 4
  store i32 %12, ptr %10, align 4
  %13 = load ptr, ptr %11, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = load i160, ptr %10, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define { ptr, i160 } @qbvmigpxki(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i32 %0(i32 %12, i32 %13)
  %15 = alloca i32, align 4
  store i32 %14, ptr %15, align 4
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  store ptr @i32_typ, ptr %17, align 8
  %18 = load i32, ptr %15, align 4
  store i32 %18, ptr %16, align 4
  %19 = load ptr, ptr %17, align 8
  %20 = insertvalue { ptr, i160 } undef, ptr %19, 0
  %21 = load i160, ptr %16, align 4
  %22 = insertvalue { ptr, i160 } %20, i160 %21, 1
  ret { ptr, i160 } %22
}

define void @number_taker({ ptr, i64 } %0) {
  %2 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %0, ptr %2, align 8
  %3 = alloca i32, align 4
  store i32 7, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = sext i32 %4 to i64
  %6 = alloca ptr, align 8
  %7 = mul i64 %5, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %8 = call ptr @bump_malloc(i64 %7)
  store ptr %8, ptr %6, align 8
  %9 = alloca ptr, align 8
  %10 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  store ptr %11, ptr %9, align 8
  %12 = alloca i32, align 4
  store i32 0, ptr %12, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load i32, ptr %12, align 4
  %15 = sext i32 %14 to i64
  %16 = mul i64 ptrtoint (ptr getelementptr ([6 x i8], ptr null, i32 1) to i64), %15
  %17 = getelementptr i8, ptr %13, i64 %16
  %18 = load <6 x i8>, ptr @igxjg_number, align 8
  store <6 x i8> %18, ptr %17, align 8
  %19 = alloca i32, align 4
  store i32 6, ptr %19, align 4
  %20 = alloca i32, align 4
  store i32 7, ptr %20, align 4
  %21 = alloca [1 x ptr], align 8
  store ptr @String, ptr %21, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 6
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = call ptr @bump_malloc(i64 %26)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr @String, ptr %28, align 8
  store ptr %27, ptr %29, align 8
  store i32 10, ptr %30, align 4
  %31 = alloca i32, align 4
  store i32 6, ptr %31, align 4
  %32 = alloca i32, align 4
  store i32 7, ptr %32, align 4
  %33 = load ptr, ptr %9, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  %35 = load i32, ptr %31, align 4
  %36 = load i32, ptr %32, align 4
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = load ptr, ptr %29, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %43, 2
  %45 = load i32, ptr %30, align 4
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %45, 3
  %47 = alloca [3 x ptr], align 8
  %48 = getelementptr [3 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %48, align 8
  %49 = getelementptr [3 x ptr], ptr %47, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %49, align 8
  %50 = getelementptr [3 x ptr], ptr %47, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 9, ptr %47)
  %52 = call ptr @llvm.invariant.start.p0(i64 616, ptr %38)
  %53 = getelementptr ptr, ptr %38, i32 %45
  %54 = getelementptr ptr, ptr %53, i32 5
  %55 = load ptr, ptr %54, align 8
  %56 = alloca { ptr, ptr, ptr }, align 8
  %57 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 0
  store ptr @buffer_typ, ptr %57, align 8
  %58 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 1
  store ptr @i32_typ, ptr %58, align 8
  %59 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 2
  store ptr @i32_typ, ptr %59, align 8
  %60 = call ptr @behavior_wrapper(ptr %55, { ptr, ptr, ptr, i32 } %46, ptr %56)
  call void %60({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr %47, { ptr } %34, i32 %35, i32 %36) #17
  %61 = load { ptr, ptr, ptr, i32 }, ptr %28, align 8
  %62 = call i32 (ptr, ...) @printf(ptr @i32_string, { ptr, ptr, ptr, i32 } %61)
  ret void
}

declare i32 @printf(ptr, ...)

define i32 @early_return_in_else() {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 5, ptr %3, align 4
  %4 = alloca i32, align 4
  store i32 3, ptr %4, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load i32, ptr %4, align 4
  %7 = icmp sgt i32 %5, %6
  %8 = alloca i1, align 1
  store i1 %7, ptr %8, align 1
  %9 = load i1, ptr %8, align 1
  %10 = select i1 %9, i32 1, i32 2
  %11 = select i1 %9, ptr %1, ptr %2
  store i32 %10, ptr %11, align 4
  %12 = load i32, ptr %11, align 4
  ret i32 %12
}

define void @make_em_speak({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %4 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %15 = load i32, ptr %13, align 4
  store i32 %15, ptr %14, align 4
  call void @set_offset(ptr %3, ptr @Animal)
  %16 = load ptr, ptr %5, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %16, 0
  %18 = load ptr, ptr %8, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %18, 1
  %20 = load ptr, ptr %11, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %20, 2
  %22 = load i32, ptr %14, align 4
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %22, 3
  %24 = alloca [0 x ptr], align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 0, ptr %24)
  %26 = call ptr @llvm.invariant.start.p0(i64 104, ptr %16)
  %27 = getelementptr ptr, ptr %16, i32 %22
  %28 = getelementptr ptr, ptr %27, i32 4
  %29 = load ptr, ptr %28, align 8
  %30 = alloca {}, align 8
  %31 = call ptr @behavior_wrapper(ptr %29, { ptr, ptr, ptr, i32 } %23, ptr %30)
  call void %31({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr %24) #17
  ret void
}

define i32 @fibonacci(i32 %0) {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %9, align 4
  %10 = alloca i32, align 4
  store i32 2, ptr %10, align 4
  %11 = load i32, ptr %9, align 4
  %12 = load i32, ptr %10, align 4
  %13 = icmp slt i32 %11, %12
  %14 = alloca i1, align 1
  store i1 %13, ptr %14, align 1
  %15 = load i1, ptr %14, align 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %1
  %17 = load i32, ptr %9, align 4
  store i32 %17, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem5, align 4
  br label %33

18:                                               ; preds = %1
  store i32 2, ptr %2, align 4
  %19 = load i32, ptr %9, align 4
  %20 = load i32, ptr %2, align 4
  %21 = sub i32 %19, %20
  store i32 %21, ptr %3, align 4
  %22 = load i32, ptr %3, align 4
  %23 = call i32 @fibonacci(i32 %22)
  store i32 %23, ptr %4, align 4
  store i32 1, ptr %5, align 4
  %24 = load i32, ptr %9, align 4
  %25 = load i32, ptr %5, align 4
  %26 = sub i32 %24, %25
  store i32 %26, ptr %6, align 4
  %27 = load i32, ptr %6, align 4
  %28 = call i32 @fibonacci(i32 %27)
  store i32 %28, ptr %7, align 4
  %29 = load i32, ptr %4, align 4
  %30 = load i32, ptr %7, align 4
  %31 = add i32 %29, %30
  store i32 %31, ptr %8, align 4
  %32 = load i32, ptr %8, align 4
  store i32 %32, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem5, align 4
  br label %33

33:                                               ; preds = %18, %16
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem, align 4
  br label %34

34:                                               ; preds = %33
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define i32 @factorial(i32 %0) {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %7, align 4
  %8 = alloca i32, align 4
  store i32 2, ptr %8, align 4
  %9 = load i32, ptr %7, align 4
  %10 = load i32, ptr %8, align 4
  %11 = icmp slt i32 %9, %10
  %12 = alloca i1, align 1
  store i1 %11, ptr %12, align 1
  %13 = load i1, ptr %12, align 1
  br i1 %13, label %14, label %16

14:                                               ; preds = %1
  store i32 1, ptr %2, align 4
  %15 = load i32, ptr %2, align 4
  store i32 %15, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem5, align 4
  br label %26

16:                                               ; preds = %1
  store i32 1, ptr %3, align 4
  %17 = load i32, ptr %7, align 4
  %18 = load i32, ptr %3, align 4
  %19 = sub i32 %17, %18
  store i32 %19, ptr %4, align 4
  %20 = load i32, ptr %4, align 4
  %21 = call i32 @factorial(i32 %20)
  store i32 %21, ptr %5, align 4
  %22 = load i32, ptr %7, align 4
  %23 = load i32, ptr %5, align 4
  %24 = mul i32 %22, %23
  store i32 %24, ptr %6, align 4
  %25 = load i32, ptr %6, align 4
  store i32 %25, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem5, align 4
  br label %26

26:                                               ; preds = %16, %14
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem, align 4
  br label %27

27:                                               ; preds = %26
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define void @throw() {
  %1 = alloca [1 x ptr], align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store ptr @Exception, ptr %1, align 8
  %2 = load ptr, ptr %1, align 8
  %3 = getelementptr ptr, ptr %2, i32 6
  %4 = load ptr, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr %4, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  %7 = call ptr @bump_malloc(i64 %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  store ptr @Exception, ptr %8, align 8
  store ptr %7, ptr %9, align 8
  store i32 10, ptr %10, align 4
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = load ptr, ptr %9, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %16, align 8
  %18 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %17, 2
  %19 = load i32, ptr %10, align 4
  %20 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 %19, 3
  %21 = alloca [0 x ptr], align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 0, ptr %21)
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %12)
  %24 = getelementptr ptr, ptr %12, i32 %19
  %25 = getelementptr ptr, ptr %24, i32 4
  %26 = load ptr, ptr %25, align 8
  %27 = alloca {}, align 8
  %28 = call ptr @behavior_wrapper(ptr %26, { ptr, ptr, ptr, i32 } %20, ptr %27)
  call void %28({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr %21) #17
  %29 = alloca i32, align 4
  store i32 197, ptr %29, align 4
  %30 = alloca i32, align 4
  store i32 12, ptr %30, align 4
  %31 = load i32, ptr %30, align 4
  %32 = sext i32 %31 to i64
  %33 = alloca ptr, align 8
  %34 = mul i64 %32, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %35 = call ptr @bump_malloc(i64 %34)
  store ptr %35, ptr %33, align 8
  %36 = alloca ptr, align 8
  %37 = getelementptr { ptr }, ptr %33, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  store ptr %38, ptr %36, align 8
  %39 = alloca i32, align 4
  store i32 0, ptr %39, align 4
  %40 = load ptr, ptr %36, align 8
  %41 = load i32, ptr %39, align 4
  %42 = sext i32 %41 to i64
  %43 = mul i64 ptrtoint (ptr getelementptr ([11 x i8], ptr null, i32 1) to i64), %42
  %44 = getelementptr i8, ptr %40, i64 %43
  %45 = load <11 x i8>, ptr @zpixf_sourcemini, align 16
  store <11 x i8> %45, ptr %44, align 16
  %46 = alloca i32, align 4
  store i32 11, ptr %46, align 4
  %47 = alloca i32, align 4
  store i32 12, ptr %47, align 4
  %48 = alloca [1 x ptr], align 8
  store ptr @String, ptr %48, align 8
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr ptr, ptr %49, i32 6
  %51 = load ptr, ptr %50, align 8
  %52 = call { i64, i64 } @size_wrapper(ptr %51, ptr %48)
  %53 = extractvalue { i64, i64 } %52, 0
  %54 = call ptr @bump_malloc(i64 %53)
  %55 = alloca i32, align 4
  %56 = alloca ptr, align 8
  %57 = alloca ptr, align 8
  %58 = alloca ptr, align 8
  store ptr @String, ptr %58, align 8
  store ptr %54, ptr %57, align 8
  store i32 10, ptr %55, align 4
  %59 = alloca i32, align 4
  store i32 11, ptr %59, align 4
  %60 = alloca i32, align 4
  store i32 12, ptr %60, align 4
  %61 = load ptr, ptr %36, align 8
  %62 = insertvalue { ptr } undef, ptr %61, 0
  %63 = load i32, ptr %59, align 4
  %64 = load i32, ptr %60, align 4
  %65 = load ptr, ptr %58, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %67 = load ptr, ptr %57, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %67, 1
  %69 = load ptr, ptr %56, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %69, 2
  %71 = load i32, ptr %55, align 4
  %72 = insertvalue { ptr, ptr, ptr, i32 } %70, i32 %71, 3
  %73 = alloca [3 x ptr], align 8
  %74 = getelementptr [3 x ptr], ptr %73, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %74, align 8
  %75 = getelementptr [3 x ptr], ptr %73, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %75, align 8
  %76 = getelementptr [3 x ptr], ptr %73, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 9, ptr %73)
  %78 = call ptr @llvm.invariant.start.p0(i64 616, ptr %65)
  %79 = getelementptr ptr, ptr %65, i32 %71
  %80 = getelementptr ptr, ptr %79, i32 5
  %81 = load ptr, ptr %80, align 8
  %82 = alloca { ptr, ptr, ptr }, align 8
  %83 = getelementptr { ptr, ptr, ptr }, ptr %82, i32 0, i32 0
  store ptr @buffer_typ, ptr %83, align 8
  %84 = getelementptr { ptr, ptr, ptr }, ptr %82, i32 0, i32 1
  store ptr @i32_typ, ptr %84, align 8
  %85 = getelementptr { ptr, ptr, ptr }, ptr %82, i32 0, i32 2
  store ptr @i32_typ, ptr %85, align 8
  %86 = call ptr @behavior_wrapper(ptr %81, { ptr, ptr, ptr, i32 } %72, ptr %82)
  call void %86({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr %73, { ptr } %62, i32 %63, i32 %64) #17
  %87 = load i32, ptr %29, align 4
  %88 = alloca { ptr, ptr, ptr, i32 }, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  %90 = load ptr, ptr %58, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  %92 = load ptr, ptr %57, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  %94 = load ptr, ptr %56, align 8
  store ptr %94, ptr %93, align 8
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  %96 = load i32, ptr %55, align 4
  store i32 %96, ptr %95, align 4
  call void @set_offset(ptr %88, ptr @String)
  %97 = load ptr, ptr %89, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = load ptr, ptr %91, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %101 = load ptr, ptr %93, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %103 = load i32, ptr %95, align 4
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  %105 = load ptr, ptr %11, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = load ptr, ptr %9, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %107, 1
  %109 = load ptr, ptr %16, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 2
  %111 = load i32, ptr %10, align 4
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %111, 3
  %113 = alloca [2 x ptr], align 8
  %114 = getelementptr [2 x ptr], ptr %113, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %114, align 8
  %115 = getelementptr [2 x ptr], ptr %113, i32 0, i32 1
  store ptr @_parameterization_String, ptr %115, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 4, ptr %113)
  %117 = call ptr @llvm.invariant.start.p0(i64 104, ptr %105)
  %118 = getelementptr ptr, ptr %105, i32 %111
  %119 = getelementptr ptr, ptr %118, i32 5
  %120 = load ptr, ptr %119, align 8
  %121 = alloca { ptr, ptr }, align 8
  %122 = getelementptr { ptr, ptr }, ptr %121, i32 0, i32 0
  store ptr @i32_typ, ptr %122, align 8
  %123 = getelementptr { ptr, ptr }, ptr %121, i32 0, i32 1
  store ptr %97, ptr %123, align 8
  %124 = call ptr @behavior_wrapper(ptr %120, { ptr, ptr, ptr, i32 } %112, ptr %121)
  call void %124({ ptr, ptr, ptr, i32 } %112, { ptr, ptr, ptr, i32 } %112, ptr %113, i32 %87, { ptr, ptr, ptr, i32 } %104) #17
  %125 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, i160 } undef, ptr %126, 0
  %128 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %129 = load i160, ptr %128, align 4
  %130 = insertvalue { ptr, i160 } %127, i160 %129, 1
  %131 = call ptr @get_current_coroutine()
  %132 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %131, i32 0, i32 4
  store { ptr, i160 } %130, ptr %132, align 8
  call void @coroutine_yield(ptr %131)
  %133 = load { ptr, i160 }, ptr %132, align 8
  %134 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %133, ptr %134, align 8
  ret void
}

define void @print88() {
  %1 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 88, ptr %1, align 4
  %2 = alloca i160, align 8
  %3 = alloca ptr, align 8
  %4 = load i32, ptr %1, align 4
  store i32 %4, ptr %2, align 4
  store ptr @i32_typ, ptr %3, align 8
  %5 = load ptr, ptr %3, align 8
  %6 = insertvalue { ptr, i160 } undef, ptr %5, 0
  %7 = load i160, ptr %2, align 4
  %8 = insertvalue { ptr, i160 } %6, i160 %7, 1
  %9 = alloca [1 x ptr], align 8
  %10 = getelementptr [1 x ptr], ptr %9, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %10, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 1, ptr %9)
  %12 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %13 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %14 = alloca { ptr }, align 8
  %15 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  store ptr %5, ptr %15, align 8
  %16 = call ptr @class_behavior_wrapper(ptr %13, ptr %14)
  call void %16(ptr %9, { ptr, i160 } %8) #17
  %17 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %17)
  %18 = alloca i32, align 4
  store i32 90, ptr %18, align 4
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = load i32, ptr %18, align 4
  store i32 %21, ptr %19, align 4
  store ptr @i32_typ, ptr %20, align 8
  %22 = load ptr, ptr %20, align 8
  %23 = insertvalue { ptr, i160 } undef, ptr %22, 0
  %24 = load i160, ptr %19, align 4
  %25 = insertvalue { ptr, i160 } %23, i160 %24, 1
  %26 = alloca [1 x ptr], align 8
  %27 = getelementptr [1 x ptr], ptr %26, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 1, ptr %26)
  %29 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %30 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %31 = alloca { ptr }, align 8
  %32 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  store ptr %22, ptr %32, align 8
  %33 = call ptr @class_behavior_wrapper(ptr %30, ptr %31)
  call void %33(ptr %26, { ptr, i160 } %25) #17
  ret void
}

define void @coroutine_wgooowaeyq_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  call void %2()
  ret void
}

define void @coroutine_wgooowaeyq_buffer_filler(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define void @grabo() {
  %1 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 4, ptr %1, align 4
  %2 = load i32, ptr %1, align 4
  %3 = sext i32 %2 to i64
  %4 = alloca ptr, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %6 = call ptr @bump_malloc(i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = alloca ptr, align 8
  %8 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %7, align 8
  %10 = alloca i32, align 4
  store i32 0, ptr %10, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load i32, ptr %10, align 4
  %13 = sext i32 %12 to i64
  %14 = mul i64 ptrtoint (ptr getelementptr ([3 x i8], ptr null, i32 1) to i64), %13
  %15 = getelementptr i8, ptr %11, i64 %14
  %16 = load <3 x i8>, ptr @ipwrw_one, align 4
  store <3 x i8> %16, ptr %15, align 4
  %17 = alloca i32, align 4
  store i32 3, ptr %17, align 4
  %18 = alloca i32, align 4
  store i32 4, ptr %18, align 4
  %19 = alloca [1 x ptr], align 8
  store ptr @String, ptr %19, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr ptr, ptr %20, i32 6
  %22 = load ptr, ptr %21, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr %22, ptr %19)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @String, ptr %26, align 8
  store ptr %25, ptr %27, align 8
  store i32 10, ptr %28, align 4
  %29 = alloca i32, align 4
  store i32 3, ptr %29, align 4
  %30 = alloca i32, align 4
  store i32 4, ptr %30, align 4
  %31 = load ptr, ptr %7, align 8
  %32 = insertvalue { ptr } undef, ptr %31, 0
  %33 = load i32, ptr %29, align 4
  %34 = load i32, ptr %30, align 4
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = load ptr, ptr %27, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 2
  %43 = load i32, ptr %28, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %43, 3
  %45 = alloca [3 x ptr], align 8
  %46 = getelementptr [3 x ptr], ptr %45, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %46, align 8
  %47 = getelementptr [3 x ptr], ptr %45, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %47, align 8
  %48 = getelementptr [3 x ptr], ptr %45, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 9, ptr %45)
  %50 = call ptr @llvm.invariant.start.p0(i64 616, ptr %36)
  %51 = getelementptr ptr, ptr %36, i32 %43
  %52 = getelementptr ptr, ptr %51, i32 5
  %53 = load ptr, ptr %52, align 8
  %54 = alloca { ptr, ptr, ptr }, align 8
  %55 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 0
  store ptr @buffer_typ, ptr %55, align 8
  %56 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 1
  store ptr @i32_typ, ptr %56, align 8
  %57 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 2
  store ptr @i32_typ, ptr %57, align 8
  %58 = call ptr @behavior_wrapper(ptr %53, { ptr, ptr, ptr, i32 } %44, ptr %54)
  call void %58({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %45, { ptr } %32, i32 %33, i32 %34) #17
  %59 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, i160 } undef, ptr %60, 0
  %62 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 1
  %63 = load i160, ptr %62, align 4
  %64 = insertvalue { ptr, i160 } %61, i160 %63, 1
  %65 = alloca [1 x ptr], align 8
  %66 = getelementptr [1 x ptr], ptr %65, i32 0, i32 0
  store ptr @_parameterization_String, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 1, ptr %65)
  %68 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %69 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %70 = alloca { ptr }, align 8
  %71 = getelementptr { ptr }, ptr %70, i32 0, i32 0
  store ptr %60, ptr %71, align 8
  %72 = call ptr @class_behavior_wrapper(ptr %69, ptr %70)
  call void %72(ptr %65, { ptr, i160 } %64) #17
  ret void
}

define i32 @_functionliteral_mhtgabwkij(i32 %0, i32 %1) {
  %3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %3, align 4
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load i32, ptr %4, align 4
  %7 = add i32 %5, %6
  %8 = alloca i32, align 4
  store i32 %7, ptr %8, align 4
  %9 = load i32, ptr %8, align 4
  ret i32 %9
}

define i32 @_functionliteral_fglekynkfk(i32 %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  %3 = alloca i32, align 4
  store i32 2, ptr %3, align 4
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = mul i32 %4, %5
  %7 = alloca i32, align 4
  store i32 %6, ptr %7, align 4
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define i32 @_functionliteral_ayevdkrfrq() {
  %1 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 5, ptr %1, align 4
  %2 = load i32, ptr %1, align 4
  ret i32 %2
}

define void @_functionliteral_fftpjzhzhp(i32 %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  %3 = alloca i160, align 8
  %4 = alloca ptr, align 8
  %5 = load i32, ptr %2, align 4
  store i32 %5, ptr %3, align 4
  store ptr @i32_typ, ptr %4, align 8
  %6 = load ptr, ptr %4, align 8
  %7 = insertvalue { ptr, i160 } undef, ptr %6, 0
  %8 = load i160, ptr %3, align 4
  %9 = insertvalue { ptr, i160 } %7, i160 %8, 1
  %10 = alloca [1 x ptr], align 8
  %11 = getelementptr [1 x ptr], ptr %10, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 1, ptr %10)
  %13 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %14 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %15 = alloca { ptr }, align 8
  %16 = getelementptr { ptr }, ptr %15, i32 0, i32 0
  store ptr %6, ptr %16, align 8
  %17 = call ptr @class_behavior_wrapper(ptr %14, ptr %15)
  call void %17(ptr %10, { ptr, i160 } %9) #17
  ret void
}

define void @_functionliteral_oziycckder(i32 %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = mul i32 %3, %3
  %5 = alloca i32, align 4
  store i32 %4, ptr %5, align 4
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = load i32, ptr %5, align 4
  store i32 %8, ptr %6, align 4
  store ptr @i32_typ, ptr %7, align 8
  %9 = load ptr, ptr %7, align 8
  %10 = insertvalue { ptr, i160 } undef, ptr %9, 0
  %11 = load i160, ptr %6, align 4
  %12 = insertvalue { ptr, i160 } %10, i160 %11, 1
  %13 = alloca [1 x ptr], align 8
  %14 = getelementptr [1 x ptr], ptr %13, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %14, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 1, ptr %13)
  %16 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %17 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %18 = alloca { ptr }, align 8
  %19 = getelementptr { ptr }, ptr %18, i32 0, i32 0
  store ptr %9, ptr %19, align 8
  %20 = call ptr @class_behavior_wrapper(ptr %17, ptr %18)
  call void %20(ptr %13, { ptr, i160 } %12) #17
  ret void
}

define i32 @_functionliteral_zjoxmddohi(i32 %0, i32 %1) {
  %3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %3, align 4
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load i32, ptr %4, align 4
  %7 = add i32 %5, %6
  %8 = alloca i32, align 4
  store i32 %7, ptr %8, align 4
  %9 = load i32, ptr %8, align 4
  ret i32 %9
}

define void @_functionliteral_zaeoiiempm(i32 %0, i32 %1) {
  %3 = alloca i1, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca { ptr, i32 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %.reg2mem = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %14, align 4
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = alloca i32, align 4
  store i32 7, ptr %16, align 4
  %17 = alloca ptr, align 8
  store ptr @_functionliteral_zjoxmddohi, ptr %17, align 8
  br label %18

18:                                               ; preds = %._crit_edge2, %2
  store i1 true, ptr %3, align 1
  %19 = load i1, ptr %3, align 1
  store i1 %19, ptr %.reg2mem, align 1
  %.reload3 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload3, label %20, label %._crit_edge

._crit_edge:                                      ; preds = %18
  br label %55

20:                                               ; preds = %18
  %21 = load i32, ptr %14, align 4
  %22 = load i32, ptr %15, align 4
  %23 = load ptr, ptr %17, align 8
  %24 = call i32 %23(i32 %21, i32 %22)
  store i32 %24, ptr %4, align 4
  %25 = load i32, ptr %4, align 4
  %26 = load i32, ptr %16, align 4
  %27 = add i32 %25, %26
  store i32 %27, ptr %5, align 4
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %6, align 4
  store ptr @i32_typ, ptr %7, align 8
  %29 = load ptr, ptr %7, align 8
  %30 = insertvalue { ptr, i32 } undef, ptr %29, 0
  %31 = load i32, ptr %6, align 4
  %32 = insertvalue { ptr, i32 } %30, i32 %31, 1
  %33 = call ptr @get_current_coroutine()
  %34 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %33, i32 0, i32 4
  store { ptr, i32 } %32, ptr %34, align 8
  call void @coroutine_yield(ptr %33)
  %35 = load { ptr, i32 }, ptr %34, align 8
  store { ptr, i32 } %35, ptr %8, align 8
  %36 = load ptr, ptr %8, align 8
  %37 = ptrtoint ptr %36 to i64
  %38 = icmp eq i64 %37, ptrtoint (ptr @nil_typ to i64)
  %39 = icmp eq i64 %37, 0
  %40 = or i1 %38, %39
  %41 = icmp eq i1 %40, false
  store i1 %41, ptr %9, align 1
  %42 = load i1, ptr %9, align 1
  br i1 %42, label %43, label %._crit_edge1

._crit_edge1:                                     ; preds = %20
  br label %54

43:                                               ; preds = %20
  %44 = getelementptr { ptr, i32 }, ptr %8, i32 0, i32 1
  %45 = load i32, ptr %44, align 4
  store i32 %45, ptr %10, align 4
  %46 = load i32, ptr %16, align 4
  %47 = load i32, ptr %10, align 4
  %48 = add i32 %46, %47
  store i32 %48, ptr %11, align 4
  %49 = load i32, ptr %11, align 4
  store i32 %49, ptr %16, align 4
  %50 = load i32, ptr %10, align 4
  store i32 %50, ptr %12, align 4
  store ptr @i32_typ, ptr %13, align 8
  %51 = getelementptr { ptr, i32 }, ptr %8, i32 0, i32 0
  %52 = load ptr, ptr %13, align 8
  store ptr %52, ptr %51, align 8
  %53 = load i32, ptr %12, align 4
  store i32 %53, ptr %44, align 4
  br label %54

54:                                               ; preds = %._crit_edge1, %43
  br label %55

55:                                               ; preds = %._crit_edge, %54
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge2, label %56

._crit_edge2:                                     ; preds = %55
  br label %18

56:                                               ; preds = %55
  ret void
}

define void @coroutine_pwqblnbngv_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 1
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 2
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load ptr, ptr %0, align 8
  call void %6(i32 %4, i32 %5)
  ret void
}

define void @coroutine_pwqblnbngv_buffer_filler(ptr %0, i32 %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 1
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 2
  store i32 %1, ptr %4, align 4
  store i32 %2, ptr %5, align 4
  ret void
}

define void @coroutine_ufzezkjkco_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  %3 = call i32 %2()
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %0, i32 0, i32 4, i32 1
  store i32 %3, ptr %4, align 4
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %0, i32 0, i32 4, i32 0
  store ptr @i32_typ, ptr %5, align 8
  ret void
}

define void @coroutine_ufzezkjkco_buffer_filler(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define void @coroutine_vrzowkgdyk_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  %3 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %4 = load ptr, ptr %0, align 8
  call void %4({ ptr, ptr, ptr, i32 } %3)
  ret void
}

define void @coroutine_vrzowkgdyk_buffer_filler(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  ret void
}

define void @_functionliteral_qwmccfjvej({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = alloca i32, align 4
  store i32 88, ptr %3, align 4
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  store ptr @i32_typ, ptr %5, align 8
  %6 = load i32, ptr %3, align 4
  store i32 %6, ptr %4, align 4
  %7 = load ptr, ptr %5, align 8
  %8 = insertvalue { ptr, i160 } undef, ptr %7, 0
  %9 = load i160, ptr %4, align 4
  %10 = insertvalue { ptr, i160 } %8, i160 %9, 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [1 x ptr], align 8
  %24 = getelementptr [1 x ptr], ptr %23, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 1, ptr %23)
  %26 = call ptr @llvm.invariant.start.p0(i64 64, ptr %12)
  %27 = getelementptr ptr, ptr %12, i32 %21
  %28 = getelementptr ptr, ptr %27, i32 4
  %29 = load ptr, ptr %28, align 8
  %30 = alloca { ptr }, align 8
  %31 = getelementptr { ptr }, ptr %30, i32 0, i32 0
  store ptr %7, ptr %31, align 8
  %32 = call ptr @behavior_wrapper(ptr %29, { ptr, ptr, ptr, i32 } %22, ptr %30)
  call void %32({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23, { ptr, i160 } %10) #17
  ret void
}

define i1 @_functionliteral_mswknesszw(i32 %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  %3 = alloca i32, align 4
  store i32 2, ptr %3, align 4
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = srem i32 %4, %5
  %7 = alloca i32, align 4
  store i32 %6, ptr %7, align 4
  %8 = alloca i32, align 4
  store i32 0, ptr %8, align 4
  %9 = load i32, ptr %7, align 4
  %10 = load i32, ptr %8, align 4
  %11 = icmp eq i32 %9, %10
  %12 = alloca i1, align 1
  store i1 %11, ptr %12, align 1
  %13 = load i1, ptr %12, align 1
  ret i1 %13
}

define i32 @_functionliteral_rdeiqxonoi(i32 %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = mul i32 %3, %3
  %5 = alloca i32, align 4
  store i32 %4, ptr %5, align 4
  %6 = load i32, ptr %5, align 4
  ret i32 %6
}

define i32 @main() {
  %1 = alloca i64, align 8
  %2 = alloca i160, align 8
  %3 = alloca ptr, align 8
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca i32, align 4
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca i32, align 4
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i160, align 8
  %21 = alloca ptr, align 8
  %22 = alloca i160, align 8
  %23 = alloca ptr, align 8
  %24 = alloca [2 x ptr], align 8
  %25 = alloca { ptr, ptr }, align 8
  %26 = alloca double, align 8
  %27 = alloca i64, align 8
  %28 = alloca ptr, align 8
  %29 = alloca double, align 8
  %30 = alloca { ptr, i64 }, align 8
  %31 = alloca i160, align 8
  %32 = alloca ptr, align 8
  %33 = alloca [2 x ptr], align 8
  %34 = alloca { ptr, ptr }, align 8
  %35 = alloca i32, align 4
  %36 = alloca ptr, align 8
  %37 = alloca ptr, align 8
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca [1 x ptr], align 8
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca [3 x ptr], align 8
  %46 = alloca { ptr, ptr, ptr }, align 8
  %47 = alloca [1 x ptr], align 8
  %48 = alloca { ptr }, align 8
  %49 = alloca i32, align 4
  %50 = alloca double, align 8
  %51 = alloca i32, align 4
  %52 = alloca [1 x ptr], align 8
  %53 = alloca i32, align 4
  %54 = alloca ptr, align 8
  %55 = alloca ptr, align 8
  %56 = alloca ptr, align 8
  %57 = alloca i32, align 4
  %58 = alloca double, align 8
  %59 = alloca i32, align 4
  %60 = alloca [3 x ptr], align 8
  %61 = alloca { ptr, ptr, ptr }, align 8
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = alloca i32, align 4
  %65 = alloca ptr, align 8
  %66 = alloca ptr, align 8
  %67 = alloca i32, align 4
  %68 = alloca i32, align 4
  %69 = alloca i32, align 4
  %70 = alloca [1 x ptr], align 8
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = alloca i32, align 4
  %73 = alloca i32, align 4
  %74 = alloca [3 x ptr], align 8
  %75 = alloca { ptr, ptr, ptr }, align 8
  %76 = alloca [1 x ptr], align 8
  %77 = alloca { ptr }, align 8
  %78 = alloca i32, align 4
  %79 = alloca double, align 8
  %80 = alloca [1 x ptr], align 8
  %81 = alloca i32, align 4
  %82 = alloca ptr, align 8
  %83 = alloca ptr, align 8
  %84 = alloca ptr, align 8
  %85 = alloca i32, align 4
  %86 = alloca double, align 8
  %87 = alloca [2 x ptr], align 8
  %88 = alloca { ptr, ptr }, align 8
  %89 = alloca { ptr, ptr, ptr, i32 }, align 8
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = alloca [2 x ptr], align 8
  %92 = alloca { ptr, ptr }, align 8
  %93 = alloca i32, align 4
  %94 = alloca i160, align 8
  %95 = alloca ptr, align 8
  %96 = alloca { ptr, i64 }, align 8
  %97 = alloca [2 x ptr], align 8
  %98 = alloca { ptr, ptr }, align 8
  %99 = alloca i32, align 4
  %100 = alloca ptr, align 8
  %101 = alloca ptr, align 8
  %102 = alloca i32, align 4
  %103 = alloca i32, align 4
  %104 = alloca i32, align 4
  %105 = alloca [1 x ptr], align 8
  %106 = alloca { ptr, ptr, ptr, i32 }, align 8
  %107 = alloca i32, align 4
  %108 = alloca i32, align 4
  %109 = alloca [3 x ptr], align 8
  %110 = alloca { ptr, ptr, ptr }, align 8
  %111 = alloca [1 x ptr], align 8
  %112 = alloca { ptr }, align 8
  %113 = alloca [0 x ptr], align 8
  %114 = alloca {}, align 8
  %115 = alloca i32, align 4
  %116 = alloca [1 x ptr], align 8
  %117 = alloca { ptr }, align 8
  %118 = alloca [0 x ptr], align 8
  %119 = alloca {}, align 8
  %120 = alloca i32, align 4
  %121 = alloca [1 x ptr], align 8
  %122 = alloca i32, align 4
  %123 = alloca ptr, align 8
  %124 = alloca ptr, align 8
  %125 = alloca ptr, align 8
  %126 = alloca i32, align 4
  %127 = alloca [1 x ptr], align 8
  %128 = alloca { ptr }, align 8
  %129 = alloca { ptr, ptr, ptr, i32 }, align 8
  %130 = alloca i32, align 4
  %131 = alloca ptr, align 8
  %132 = alloca ptr, align 8
  %133 = alloca ptr, align 8
  %134 = alloca i32, align 4
  %135 = alloca [1 x ptr], align 8
  %136 = alloca { ptr }, align 8
  %137 = alloca { ptr, ptr, ptr, i32 }, align 8
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  %139 = alloca [0 x ptr], align 8
  %140 = alloca {}, align 8
  %141 = alloca double, align 8
  %142 = alloca [1 x ptr], align 8
  %143 = alloca { ptr }, align 8
  %144 = alloca double, align 8
  %145 = alloca i32, align 4
  %146 = alloca i64, align 8
  %147 = alloca ptr, align 8
  %148 = alloca [1 x ptr], align 8
  %149 = alloca { ptr }, align 8
  %150 = alloca { ptr, i64 }, align 8
  %151 = alloca i32, align 4
  %152 = alloca i160, align 8
  %153 = alloca ptr, align 8
  %154 = alloca [1 x ptr], align 8
  %155 = alloca { ptr }, align 8
  %156 = alloca i160, align 8
  %157 = alloca ptr, align 8
  %158 = alloca [1 x ptr], align 8
  %159 = alloca { ptr }, align 8
  %160 = alloca [0 x ptr], align 8
  %161 = alloca {}, align 8
  %162 = alloca { ptr, i160 }, align 8
  %163 = alloca i32, align 4
  %164 = alloca i160, align 8
  %165 = alloca ptr, align 8
  %166 = alloca i1, align 1
  %167 = alloca i32, align 4
  %168 = alloca i160, align 8
  %169 = alloca ptr, align 8
  %170 = alloca [1 x ptr], align 8
  %171 = alloca { ptr }, align 8
  %172 = alloca i32, align 4
  %173 = alloca i32, align 4
  %174 = alloca i32, align 4
  %175 = alloca i1, align 1
  %176 = alloca i160, align 8
  %177 = alloca ptr, align 8
  %178 = alloca i32, align 4
  %179 = alloca double, align 8
  %180 = alloca i32, align 4
  %181 = alloca [1 x ptr], align 8
  %182 = alloca i32, align 4
  %183 = alloca ptr, align 8
  %184 = alloca ptr, align 8
  %185 = alloca ptr, align 8
  %186 = alloca i32, align 4
  %187 = alloca double, align 8
  %188 = alloca i32, align 4
  %189 = alloca [3 x ptr], align 8
  %190 = alloca { ptr, ptr, ptr }, align 8
  %191 = alloca { ptr, ptr, ptr, i32 }, align 8
  %192 = alloca { ptr, ptr, ptr, i32 }, align 8
  %193 = alloca i1, align 1
  %194 = alloca i32, align 4
  %195 = alloca i160, align 8
  %196 = alloca ptr, align 8
  %197 = alloca [1 x ptr], align 8
  %198 = alloca { ptr }, align 8
  %199 = alloca i160, align 8
  %200 = alloca ptr, align 8
  %201 = alloca i1, align 1
  %202 = alloca { ptr, ptr, ptr, i32 }, align 8
  %203 = alloca [0 x ptr], align 8
  %204 = alloca {}, align 8
  %205 = alloca i32, align 4
  %206 = alloca [1 x ptr], align 8
  %207 = alloca i32, align 4
  %208 = alloca ptr, align 8
  %209 = alloca ptr, align 8
  %210 = alloca ptr, align 8
  %211 = alloca i32, align 4
  %212 = alloca [1 x ptr], align 8
  %213 = alloca { ptr }, align 8
  %214 = alloca { ptr, ptr, ptr, i32 }, align 8
  %215 = alloca i32, align 4
  %216 = alloca ptr, align 8
  %217 = alloca ptr, align 8
  %218 = alloca ptr, align 8
  %219 = alloca { ptr, ptr, ptr, i32 }, align 8
  %220 = alloca i32, align 4
  %221 = alloca ptr, align 8
  %222 = alloca ptr, align 8
  %223 = alloca ptr, align 8
  %224 = alloca i32, align 4
  %225 = alloca i32, align 4
  %226 = alloca [1 x ptr], align 8
  %227 = alloca i32, align 4
  %228 = alloca ptr, align 8
  %229 = alloca ptr, align 8
  %230 = alloca ptr, align 8
  %231 = alloca i32, align 4
  %232 = alloca i32, align 4
  %233 = alloca [2 x ptr], align 8
  %234 = alloca { ptr, ptr }, align 8
  %235 = alloca [0 x ptr], align 8
  %236 = alloca {}, align 8
  %237 = alloca { ptr, ptr, ptr, i32 }, align 8
  %238 = alloca { ptr, ptr, ptr, i32 }, align 8
  %239 = alloca { ptr, ptr, ptr, i32 }, align 8
  %240 = alloca i32, align 4
  %241 = alloca ptr, align 8
  %242 = alloca ptr, align 8
  %243 = alloca ptr, align 8
  %244 = alloca [0 x ptr], align 8
  %245 = alloca {}, align 8
  %246 = alloca { ptr, i160 }, align 8
  %247 = alloca ptr, align 8
  %248 = alloca i32, align 4
  %249 = alloca i1, align 1
  %250 = alloca i32, align 4
  %251 = alloca [1 x ptr], align 8
  %252 = alloca i32, align 4
  %253 = alloca ptr, align 8
  %254 = alloca ptr, align 8
  %255 = alloca ptr, align 8
  %256 = alloca [1 x ptr], align 8
  %257 = alloca { ptr }, align 8
  %258 = alloca { ptr, ptr, ptr, i32 }, align 8
  %259 = alloca [1 x ptr], align 8
  %260 = alloca { ptr }, align 8
  %261 = alloca { ptr, ptr, ptr, i32 }, align 8
  %262 = alloca { ptr, ptr, ptr, i32 }, align 8
  %263 = alloca { ptr, ptr, ptr, i32 }, align 8
  %264 = alloca [0 x ptr], align 8
  %265 = alloca {}, align 8
  %266 = alloca i32, align 4
  %267 = alloca i160, align 8
  %268 = alloca ptr, align 8
  %269 = alloca [1 x ptr], align 8
  %270 = alloca { ptr }, align 8
  %271 = alloca [0 x ptr], align 8
  %272 = alloca {}, align 8
  %273 = alloca { ptr, ptr, ptr, i32 }, align 8
  %274 = alloca { ptr, ptr, ptr, i32 }, align 8
  %275 = alloca { ptr, ptr, ptr, i32 }, align 8
  %276 = alloca i32, align 4
  %277 = alloca ptr, align 8
  %278 = alloca ptr, align 8
  %279 = alloca ptr, align 8
  %280 = alloca [0 x ptr], align 8
  %281 = alloca {}, align 8
  %282 = alloca { ptr, i160 }, align 8
  %283 = alloca i1, align 1
  %284 = alloca { ptr, ptr, ptr, i32 }, align 8
  %285 = alloca [0 x ptr], align 8
  %286 = alloca {}, align 8
  %287 = alloca i32, align 4
  %288 = alloca i160, align 8
  %289 = alloca ptr, align 8
  %290 = alloca [1 x ptr], align 8
  %291 = alloca { ptr }, align 8
  %292 = alloca { ptr, ptr, ptr, i32 }, align 8
  %293 = alloca ptr, align 8
  %294 = alloca ptr, align 8
  %295 = alloca ptr, align 8
  %296 = alloca { ptr, i160 }, align 8
  %297 = alloca i32, align 4
  %298 = alloca i160, align 8
  %299 = alloca ptr, align 8
  %300 = alloca [1 x ptr], align 8
  %301 = alloca { ptr }, align 8
  %302 = alloca { ptr, i160 }, align 8
  %303 = alloca i32, align 4
  %304 = alloca i32, align 4
  %305 = alloca [1 x ptr], align 8
  %306 = alloca i32, align 4
  %307 = alloca ptr, align 8
  %308 = alloca ptr, align 8
  %309 = alloca ptr, align 8
  %310 = alloca i32, align 4
  %311 = alloca i32, align 4
  %312 = alloca [2 x ptr], align 8
  %313 = alloca { ptr, ptr }, align 8
  %314 = alloca [0 x ptr], align 8
  %315 = alloca {}, align 8
  %316 = alloca { ptr, ptr, ptr, i32 }, align 8
  %317 = alloca { ptr, ptr, ptr, i32 }, align 8
  %318 = alloca { ptr, ptr, ptr, i32 }, align 8
  %319 = alloca i32, align 4
  %320 = alloca ptr, align 8
  %321 = alloca ptr, align 8
  %322 = alloca ptr, align 8
  %323 = alloca [0 x ptr], align 8
  %324 = alloca {}, align 8
  %325 = alloca { ptr, i160 }, align 8
  %326 = alloca ptr, align 8
  %327 = alloca i32, align 4
  %328 = alloca i1, align 1
  %329 = alloca i32, align 4
  %330 = alloca i32, align 4
  %331 = alloca i1, align 1
  %332 = alloca i160, align 8
  %333 = alloca ptr, align 8
  %334 = alloca [1 x ptr], align 8
  %335 = alloca { ptr }, align 8
  %336 = alloca i32, align 4
  %337 = alloca ptr, align 8
  %338 = alloca ptr, align 8
  %339 = alloca i32, align 4
  %340 = alloca i32, align 4
  %341 = alloca i32, align 4
  %342 = alloca i32, align 4
  %343 = alloca i32, align 4
  %344 = alloca i32, align 4
  %345 = alloca i32, align 4
  %346 = alloca i32, align 4
  %347 = alloca i32, align 4
  %348 = alloca i32, align 4
  %349 = alloca [2 x ptr], align 8
  %350 = alloca i32, align 4
  %351 = alloca ptr, align 8
  %352 = alloca ptr, align 8
  %353 = alloca ptr, align 8
  %354 = alloca i32, align 4
  %355 = alloca i32, align 4
  %356 = alloca [3 x ptr], align 8
  %357 = alloca { ptr, ptr, ptr }, align 8
  %358 = alloca { ptr, ptr, ptr, i32 }, align 8
  %359 = alloca i32, align 4
  %360 = alloca ptr, align 8
  %361 = alloca ptr, align 8
  %362 = alloca ptr, align 8
  %363 = alloca i32, align 4
  %364 = alloca ptr, align 8
  %365 = alloca ptr, align 8
  %366 = alloca i32, align 4
  %367 = alloca i32, align 4
  %368 = alloca i32, align 4
  %369 = alloca i32, align 4
  %370 = alloca i32, align 4
  %371 = alloca i32, align 4
  %372 = alloca i32, align 4
  %373 = alloca i32, align 4
  %374 = alloca i32, align 4
  %375 = alloca i32, align 4
  %376 = alloca i32, align 4
  %377 = alloca i32, align 4
  %378 = alloca i32, align 4
  %379 = alloca i32, align 4
  %380 = alloca [2 x ptr], align 8
  %381 = alloca i32, align 4
  %382 = alloca ptr, align 8
  %383 = alloca ptr, align 8
  %384 = alloca ptr, align 8
  %385 = alloca i32, align 4
  %386 = alloca i32, align 4
  %387 = alloca [3 x ptr], align 8
  %388 = alloca { ptr, ptr, ptr }, align 8
  %389 = alloca { ptr, ptr, ptr, i32 }, align 8
  %390 = alloca [1 x ptr], align 8
  %391 = alloca { ptr }, align 8
  %392 = alloca { ptr, ptr, ptr, i32 }, align 8
  %393 = alloca { ptr, ptr, ptr, i32 }, align 8
  %394 = alloca i32, align 4
  %395 = alloca [1 x ptr], align 8
  %396 = alloca { ptr }, align 8
  %397 = alloca { ptr, i160 }, align 8
  %398 = alloca i32, align 4
  %399 = alloca i160, align 8
  %400 = alloca ptr, align 8
  %401 = alloca [1 x ptr], align 8
  %402 = alloca { ptr }, align 8
  %403 = alloca i32, align 4
  %404 = alloca ptr, align 8
  %405 = alloca ptr, align 8
  %406 = alloca i32, align 4
  %407 = alloca i32, align 4
  %408 = alloca [2 x ptr], align 8
  %409 = alloca i32, align 4
  %410 = alloca ptr, align 8
  %411 = alloca ptr, align 8
  %412 = alloca ptr, align 8
  %413 = alloca i32, align 4
  %414 = alloca i32, align 4
  %415 = alloca [3 x ptr], align 8
  %416 = alloca { ptr, ptr, ptr }, align 8
  %417 = alloca { ptr, ptr, ptr, i32 }, align 8
  %418 = alloca i32, align 4
  %419 = alloca ptr, align 8
  %420 = alloca ptr, align 8
  %421 = alloca ptr, align 8
  %422 = alloca i32, align 4
  %423 = alloca ptr, align 8
  %424 = alloca ptr, align 8
  %425 = alloca i32, align 4
  %426 = alloca i32, align 4
  %427 = alloca i32, align 4
  %428 = alloca i32, align 4
  %429 = alloca i32, align 4
  %430 = alloca i32, align 4
  %431 = alloca i32, align 4
  %432 = alloca i32, align 4
  %433 = alloca i32, align 4
  %434 = alloca i32, align 4
  %435 = alloca [2 x ptr], align 8
  %436 = alloca i32, align 4
  %437 = alloca ptr, align 8
  %438 = alloca ptr, align 8
  %439 = alloca ptr, align 8
  %440 = alloca i32, align 4
  %441 = alloca i32, align 4
  %442 = alloca [3 x ptr], align 8
  %443 = alloca { ptr, ptr, ptr }, align 8
  %444 = alloca { ptr, ptr, ptr, i32 }, align 8
  %445 = alloca [1 x ptr], align 8
  %446 = alloca { ptr }, align 8
  %447 = alloca { ptr, ptr, ptr, i32 }, align 8
  %448 = alloca { ptr, ptr, ptr, i32 }, align 8
  %449 = alloca i32, align 4
  %450 = alloca [1 x ptr], align 8
  %451 = alloca { ptr }, align 8
  %452 = alloca { ptr, i160 }, align 8
  %453 = alloca i32, align 4
  %454 = alloca i160, align 8
  %455 = alloca ptr, align 8
  %456 = alloca [1 x ptr], align 8
  %457 = alloca { ptr }, align 8
  %458 = alloca i1, align 1
  %459 = alloca i1, align 1
  %460 = alloca i32, align 4
  %461 = alloca [1 x ptr], align 8
  %462 = alloca { ptr }, align 8
  %463 = alloca { ptr, i160 }, align 8
  %464 = alloca i32, align 4
  %465 = alloca i32, align 4
  %466 = alloca i1, align 1
  %467 = alloca i1, align 1
  %468 = alloca i32, align 4
  %469 = alloca ptr, align 8
  %470 = alloca ptr, align 8
  %471 = alloca i32, align 4
  %472 = alloca i32, align 4
  %473 = alloca i32, align 4
  %474 = alloca [1 x ptr], align 8
  %475 = alloca { ptr, ptr, ptr, i32 }, align 8
  %476 = alloca i32, align 4
  %477 = alloca i32, align 4
  %478 = alloca [3 x ptr], align 8
  %479 = alloca { ptr, ptr, ptr }, align 8
  %480 = alloca [1 x ptr], align 8
  %481 = alloca { ptr }, align 8
  %482 = alloca i64, align 8
  %483 = alloca i160, align 8
  %484 = alloca ptr, align 8
  %485 = alloca [1 x ptr], align 8
  %486 = alloca { ptr }, align 8
  %487 = alloca i64, align 8
  %488 = alloca i160, align 8
  %489 = alloca ptr, align 8
  %490 = alloca [1 x ptr], align 8
  %491 = alloca { ptr }, align 8
  %492 = alloca i32, align 4
  %493 = alloca double, align 8
  %494 = alloca i160, align 8
  %495 = alloca ptr, align 8
  %496 = alloca [1 x ptr], align 8
  %497 = alloca { ptr }, align 8
  %498 = alloca i32, align 4
  %499 = alloca i32, align 4
  %500 = alloca [1 x ptr], align 8
  %501 = alloca i32, align 4
  %502 = alloca ptr, align 8
  %503 = alloca ptr, align 8
  %504 = alloca ptr, align 8
  %505 = alloca i32, align 4
  %506 = alloca i32, align 4
  %507 = alloca [2 x ptr], align 8
  %508 = alloca { ptr, ptr }, align 8
  %509 = alloca [0 x ptr], align 8
  %510 = alloca {}, align 8
  %511 = alloca { ptr, ptr, ptr, i32 }, align 8
  %512 = alloca { ptr, ptr, ptr, i32 }, align 8
  %513 = alloca { ptr, ptr, ptr, i32 }, align 8
  %514 = alloca i32, align 4
  %515 = alloca ptr, align 8
  %516 = alloca ptr, align 8
  %517 = alloca ptr, align 8
  %518 = alloca [0 x ptr], align 8
  %519 = alloca {}, align 8
  %520 = alloca { ptr, i160 }, align 8
  %521 = alloca ptr, align 8
  %522 = alloca i32, align 4
  %523 = alloca i1, align 1
  %524 = alloca i32, align 4
  %525 = alloca i160, align 8
  %526 = alloca ptr, align 8
  %527 = alloca [1 x ptr], align 8
  %528 = alloca { ptr }, align 8
  %529 = alloca i32, align 4
  %530 = alloca ptr, align 8
  %531 = alloca ptr, align 8
  %532 = alloca i32, align 4
  %533 = alloca i32, align 4
  %534 = alloca i32, align 4
  %535 = alloca i32, align 4
  %536 = alloca i32, align 4
  %537 = alloca i32, align 4
  %538 = alloca i32, align 4
  %539 = alloca i32, align 4
  %540 = alloca [2 x ptr], align 8
  %541 = alloca i32, align 4
  %542 = alloca ptr, align 8
  %543 = alloca ptr, align 8
  %544 = alloca ptr, align 8
  %545 = alloca i32, align 4
  %546 = alloca i32, align 4
  %547 = alloca [3 x ptr], align 8
  %548 = alloca { ptr, ptr, ptr }, align 8
  %549 = alloca [0 x ptr], align 8
  %550 = alloca {}, align 8
  %551 = alloca { ptr, ptr, ptr, i32 }, align 8
  %552 = alloca { ptr, ptr, ptr, i32 }, align 8
  %553 = alloca { ptr, ptr, ptr, i32 }, align 8
  %554 = alloca i32, align 4
  %555 = alloca ptr, align 8
  %556 = alloca ptr, align 8
  %557 = alloca ptr, align 8
  %558 = alloca [0 x ptr], align 8
  %559 = alloca {}, align 8
  %560 = alloca { ptr, i160 }, align 8
  %561 = alloca ptr, align 8
  %562 = alloca i32, align 4
  %563 = alloca i1, align 1
  %564 = alloca i32, align 4
  %565 = alloca i160, align 8
  %566 = alloca ptr, align 8
  %567 = alloca [1 x ptr], align 8
  %568 = alloca { ptr }, align 8
  %569 = alloca i8, align 1
  %570 = alloca i160, align 8
  %571 = alloca ptr, align 8
  %572 = alloca [1 x ptr], align 8
  %573 = alloca { ptr }, align 8
  %574 = alloca i32, align 4
  %575 = alloca ptr, align 8
  %576 = alloca ptr, align 8
  %577 = alloca i32, align 4
  %578 = alloca i32, align 4
  %579 = alloca i32, align 4
  %580 = alloca [1 x ptr], align 8
  %581 = alloca i32, align 4
  %582 = alloca ptr, align 8
  %583 = alloca ptr, align 8
  %584 = alloca ptr, align 8
  %585 = alloca i32, align 4
  %586 = alloca i32, align 4
  %587 = alloca [3 x ptr], align 8
  %588 = alloca { ptr, ptr, ptr }, align 8
  %589 = alloca [0 x ptr], align 8
  %590 = alloca {}, align 8
  %591 = alloca { ptr, ptr, ptr, i32 }, align 8
  %592 = alloca { ptr, ptr, ptr, i32 }, align 8
  %593 = alloca { ptr, ptr, ptr, i32 }, align 8
  %594 = alloca i32, align 4
  %595 = alloca ptr, align 8
  %596 = alloca ptr, align 8
  %597 = alloca ptr, align 8
  %598 = alloca [0 x ptr], align 8
  %599 = alloca {}, align 8
  %600 = alloca { ptr, i160 }, align 8
  %601 = alloca i1, align 1
  %602 = alloca { ptr, ptr, ptr, i32 }, align 8
  %603 = alloca [1 x ptr], align 8
  %604 = alloca { ptr }, align 8
  %605 = alloca { ptr, ptr, ptr, i32 }, align 8
  %606 = alloca i32, align 4
  %607 = alloca ptr, align 8
  %608 = alloca ptr, align 8
  %609 = alloca i32, align 4
  %610 = alloca i32, align 4
  %611 = alloca i32, align 4
  %612 = alloca i32, align 4
  %613 = alloca i32, align 4
  %614 = alloca i32, align 4
  %615 = alloca i32, align 4
  %616 = alloca i32, align 4
  %617 = alloca [2 x ptr], align 8
  %618 = alloca i32, align 4
  %619 = alloca ptr, align 8
  %620 = alloca ptr, align 8
  %621 = alloca ptr, align 8
  %622 = alloca i32, align 4
  %623 = alloca i32, align 4
  %624 = alloca [3 x ptr], align 8
  %625 = alloca { ptr, ptr, ptr }, align 8
  %626 = alloca [0 x ptr], align 8
  %627 = alloca {}, align 8
  %628 = alloca { ptr, ptr, ptr, i32 }, align 8
  %629 = alloca { ptr, ptr, ptr, i32 }, align 8
  %630 = alloca [1 x ptr], align 8
  %631 = alloca { ptr }, align 8
  %632 = alloca i32, align 4
  %633 = alloca [1 x ptr], align 8
  %634 = alloca i32, align 4
  %635 = alloca ptr, align 8
  %636 = alloca ptr, align 8
  %637 = alloca ptr, align 8
  %638 = alloca i32, align 4
  %639 = alloca [1 x ptr], align 8
  %640 = alloca { ptr }, align 8
  %641 = alloca { ptr, ptr, ptr, i32 }, align 8
  %642 = alloca { ptr, ptr, ptr, i32 }, align 8
  %643 = alloca [0 x ptr], align 8
  %644 = alloca {}, align 8
  %645 = alloca [1 x ptr], align 8
  %646 = alloca { ptr }, align 8
  %647 = alloca [0 x ptr], align 8
  %648 = alloca {}, align 8
  %649 = alloca i32, align 4
  %650 = alloca i32, align 4
  %651 = alloca i32, align 4
  %652 = alloca [1 x ptr], align 8
  %653 = alloca i32, align 4
  %654 = alloca ptr, align 8
  %655 = alloca ptr, align 8
  %656 = alloca ptr, align 8
  %657 = alloca i32, align 4
  %658 = alloca i32, align 4
  %659 = alloca [2 x ptr], align 8
  %660 = alloca { ptr, ptr }, align 8
  %661 = alloca [1 x ptr], align 8
  %662 = alloca { ptr }, align 8
  %663 = alloca { ptr, ptr, ptr, i32 }, align 8
  %664 = alloca { ptr, ptr, ptr, i32 }, align 8
  %665 = alloca [0 x ptr], align 8
  %666 = alloca {}, align 8
  %667 = alloca { ptr, ptr, ptr, i32 }, align 8
  %668 = alloca { ptr, ptr, ptr, i32 }, align 8
  %669 = alloca { ptr, ptr, ptr, i32 }, align 8
  %670 = alloca i32, align 4
  %671 = alloca ptr, align 8
  %672 = alloca ptr, align 8
  %673 = alloca ptr, align 8
  %674 = alloca [0 x ptr], align 8
  %675 = alloca {}, align 8
  %676 = alloca { ptr, i160 }, align 8
  %677 = alloca ptr, align 8
  %678 = alloca i32, align 4
  %679 = alloca i1, align 1
  %680 = alloca i32, align 4
  %681 = alloca i160, align 8
  %682 = alloca ptr, align 8
  %683 = alloca [1 x ptr], align 8
  %684 = alloca { ptr }, align 8
  %685 = alloca ptr, align 8
  %686 = alloca ptr, align 8
  %687 = alloca ptr, align 8
  %688 = alloca i32, align 4
  %689 = alloca i160, align 8
  %690 = alloca ptr, align 8
  %691 = alloca ptr, align 8
  %692 = alloca ptr, align 8
  %693 = alloca i32, align 4
  %694 = alloca ptr, align 8
  %695 = alloca ptr, align 8
  %696 = alloca i32, align 4
  %697 = alloca i32, align 4
  %698 = alloca i32, align 4
  %699 = alloca i32, align 4
  %700 = alloca i32, align 4
  %701 = alloca i32, align 4
  %702 = alloca i32, align 4
  %703 = alloca i32, align 4
  %704 = alloca i32, align 4
  %705 = alloca i32, align 4
  %706 = alloca [2 x ptr], align 8
  %707 = alloca i32, align 4
  %708 = alloca ptr, align 8
  %709 = alloca ptr, align 8
  %710 = alloca ptr, align 8
  %711 = alloca i32, align 4
  %712 = alloca i32, align 4
  %713 = alloca [3 x ptr], align 8
  %714 = alloca { ptr, ptr, ptr }, align 8
  %715 = alloca [1 x ptr], align 8
  %716 = alloca { ptr }, align 8
  %717 = alloca { ptr, ptr, ptr, i32 }, align 8
  %718 = alloca { ptr, ptr, ptr, i32 }, align 8
  %719 = alloca [2 x ptr], align 8
  %720 = alloca { ptr, ptr }, align 8
  %721 = alloca { ptr, i160 }, align 8
  %722 = alloca i32, align 4
  %723 = alloca i160, align 8
  %724 = alloca ptr, align 8
  %725 = alloca [1 x ptr], align 8
  %726 = alloca { ptr }, align 8
  %727 = alloca ptr, align 8
  %728 = alloca ptr, align 8
  %729 = alloca i32, align 4
  %730 = alloca ptr, align 8
  %731 = alloca ptr, align 8
  %732 = alloca i32, align 4
  %733 = alloca i32, align 4
  %734 = alloca i32, align 4
  %735 = alloca i32, align 4
  %736 = alloca i32, align 4
  %737 = alloca i32, align 4
  %738 = alloca i32, align 4
  %739 = alloca i32, align 4
  %740 = alloca i32, align 4
  %741 = alloca i32, align 4
  %742 = alloca [2 x ptr], align 8
  %743 = alloca i32, align 4
  %744 = alloca ptr, align 8
  %745 = alloca ptr, align 8
  %746 = alloca ptr, align 8
  %747 = alloca i32, align 4
  %748 = alloca i32, align 4
  %749 = alloca [3 x ptr], align 8
  %750 = alloca { ptr, ptr, ptr }, align 8
  %751 = alloca [1 x ptr], align 8
  %752 = alloca { ptr }, align 8
  %753 = alloca i32, align 4
  %754 = alloca ptr, align 8
  %755 = alloca ptr, align 8
  %756 = alloca i32, align 4
  %757 = alloca i32, align 4
  %758 = alloca i32, align 4
  %759 = alloca [1 x ptr], align 8
  %760 = alloca i32, align 4
  %761 = alloca ptr, align 8
  %762 = alloca ptr, align 8
  %763 = alloca ptr, align 8
  %764 = alloca i32, align 4
  %765 = alloca i32, align 4
  %766 = alloca [3 x ptr], align 8
  %767 = alloca { ptr, ptr, ptr }, align 8
  %768 = alloca i32, align 4
  %769 = alloca ptr, align 8
  %770 = alloca ptr, align 8
  %771 = alloca i32, align 4
  %772 = alloca i32, align 4
  %773 = alloca i32, align 4
  %774 = alloca [1 x ptr], align 8
  %775 = alloca i32, align 4
  %776 = alloca ptr, align 8
  %777 = alloca ptr, align 8
  %778 = alloca ptr, align 8
  %779 = alloca i32, align 4
  %780 = alloca i32, align 4
  %781 = alloca [3 x ptr], align 8
  %782 = alloca { ptr, ptr, ptr }, align 8
  %783 = alloca { ptr, ptr, ptr, i32 }, align 8
  %784 = alloca { ptr, ptr, ptr, i32 }, align 8
  %785 = alloca [2 x ptr], align 8
  %786 = alloca { ptr, ptr }, align 8
  %787 = alloca i32, align 4
  %788 = alloca ptr, align 8
  %789 = alloca ptr, align 8
  %790 = alloca i32, align 4
  %791 = alloca i32, align 4
  %792 = alloca i32, align 4
  %793 = alloca [1 x ptr], align 8
  %794 = alloca i32, align 4
  %795 = alloca ptr, align 8
  %796 = alloca ptr, align 8
  %797 = alloca ptr, align 8
  %798 = alloca i32, align 4
  %799 = alloca i32, align 4
  %800 = alloca [3 x ptr], align 8
  %801 = alloca { ptr, ptr, ptr }, align 8
  %802 = alloca { ptr, ptr, ptr, i32 }, align 8
  %803 = alloca [1 x ptr], align 8
  %804 = alloca { ptr }, align 8
  %805 = alloca { ptr, ptr, ptr, i32 }, align 8
  %806 = alloca { ptr, ptr, ptr, i32 }, align 8
  %807 = alloca [1 x ptr], align 8
  %808 = alloca { ptr }, align 8
  %809 = alloca ptr, align 8
  %810 = alloca ptr, align 8
  %811 = alloca i32, align 4
  %812 = alloca i32, align 4
  %813 = alloca [1 x ptr], align 8
  %814 = alloca i32, align 4
  %815 = alloca ptr, align 8
  %816 = alloca ptr, align 8
  %817 = alloca ptr, align 8
  %818 = alloca i32, align 4
  %819 = alloca i32, align 4
  %820 = alloca [2 x ptr], align 8
  %821 = alloca { ptr, ptr }, align 8
  %822 = alloca [1 x ptr], align 8
  %823 = alloca { ptr }, align 8
  %824 = alloca ptr, align 8
  %825 = alloca i32, align 4
  %826 = alloca i8, align 1
  %827 = alloca i160, align 8
  %828 = alloca ptr, align 8
  %829 = alloca [1 x ptr], align 8
  %830 = alloca { ptr }, align 8
  %831 = alloca ptr, align 8
  %832 = alloca i32, align 4
  %833 = alloca i32, align 4
  %834 = alloca ptr, align 8
  %835 = alloca ptr, align 8
  %836 = alloca i32, align 4
  %837 = alloca i32, align 4
  %838 = alloca ptr, align 8
  %839 = alloca { ptr, i32 }, align 8
  %840 = alloca { ptr, i32 }, align 8
  %841 = alloca [1 x ptr], align 8
  %842 = alloca { ptr }, align 8
  %843 = alloca i32, align 4
  %844 = alloca i32, align 4
  %845 = alloca ptr, align 8
  %846 = alloca { ptr, i32 }, align 8
  %847 = alloca { ptr, i32 }, align 8
  %848 = alloca [1 x ptr], align 8
  %849 = alloca { ptr }, align 8
  %850 = alloca ptr, align 8
  %851 = alloca ptr, align 8
  %852 = alloca { ptr, i160 }, align 8
  %853 = alloca { ptr, i32 }, align 8
  %854 = alloca { ptr, i32 }, align 8
  %855 = alloca [1 x ptr], align 8
  %856 = alloca { ptr }, align 8
  %857 = alloca [2 x ptr], align 8
  %858 = alloca i32, align 4
  %859 = alloca ptr, align 8
  %860 = alloca ptr, align 8
  %861 = alloca ptr, align 8
  %862 = alloca [0 x ptr], align 8
  %863 = alloca {}, align 8
  %864 = alloca { ptr, ptr, ptr, i32 }, align 8
  %865 = alloca i32, align 4
  %866 = alloca ptr, align 8
  %867 = alloca ptr, align 8
  %868 = alloca ptr, align 8
  %869 = alloca ptr, align 8
  %870 = alloca ptr, align 8
  %871 = alloca ptr, align 8
  %872 = alloca { ptr, i160 }, align 8
  %873 = alloca [0 x ptr], align 8
  %874 = alloca {}, align 8
  %875 = alloca { ptr, i160 }, align 8
  %876 = alloca i32, align 4
  %877 = alloca i160, align 8
  %878 = alloca ptr, align 8
  %879 = alloca [1 x ptr], align 8
  %880 = alloca { ptr }, align 8
  %881 = alloca i32, align 4
  %882 = alloca i160, align 8
  %883 = alloca ptr, align 8
  %884 = alloca ptr, align 8
  %885 = alloca ptr, align 8
  %886 = alloca ptr, align 8
  %887 = alloca ptr, align 8
  %888 = alloca ptr, align 8
  %889 = alloca i32, align 4
  %890 = alloca i32, align 4
  %891 = alloca [1 x ptr], align 8
  %892 = alloca i32, align 4
  %893 = alloca ptr, align 8
  %894 = alloca ptr, align 8
  %895 = alloca ptr, align 8
  %896 = alloca i32, align 4
  %897 = alloca i32, align 4
  %898 = alloca [2 x ptr], align 8
  %899 = alloca { ptr, ptr }, align 8
  %900 = alloca [1 x ptr], align 8
  %901 = alloca { ptr }, align 8
  %902 = alloca { ptr, ptr, ptr, i32 }, align 8
  %903 = alloca { ptr, ptr, ptr, i32 }, align 8
  %904 = alloca [1 x ptr], align 8
  %905 = alloca { ptr }, align 8
  %906 = alloca { ptr, ptr, ptr, i32 }, align 8
  %907 = alloca { ptr, ptr, ptr, i32 }, align 8
  %908 = alloca [2 x ptr], align 8
  %909 = alloca { ptr, ptr }, align 8
  %910 = alloca { ptr, i160 }, align 8
  %911 = alloca i32, align 4
  %912 = alloca i160, align 8
  %913 = alloca ptr, align 8
  %914 = alloca [1 x ptr], align 8
  %915 = alloca { ptr }, align 8
  %916 = alloca i32, align 4
  %917 = alloca i160, align 8
  %918 = alloca ptr, align 8
  %919 = alloca [1 x ptr], align 8
  %920 = alloca { ptr }, align 8
  %921 = alloca i32, align 4
  %922 = alloca i32, align 4
  %923 = alloca i32, align 4
  %924 = alloca i32, align 4
  %925 = alloca i32, align 4
  %926 = alloca i32, align 4
  %927 = alloca i160, align 8
  %928 = alloca ptr, align 8
  %929 = alloca [1 x ptr], align 8
  %930 = alloca { ptr }, align 8
  %931 = alloca i32, align 4
  %932 = alloca i32, align 4
  %933 = alloca ptr, align 8
  %934 = alloca ptr, align 8
  %935 = alloca i32, align 4
  %936 = alloca i32, align 4
  %937 = alloca i32, align 4
  %938 = alloca i32, align 4
  %939 = alloca i32, align 4
  %940 = alloca i32, align 4
  %941 = alloca i32, align 4
  %942 = alloca i32, align 4
  %943 = alloca [2 x ptr], align 8
  %944 = alloca i32, align 4
  %945 = alloca ptr, align 8
  %946 = alloca ptr, align 8
  %947 = alloca ptr, align 8
  %948 = alloca i32, align 4
  %949 = alloca i32, align 4
  %950 = alloca [3 x ptr], align 8
  %951 = alloca { ptr, ptr, ptr }, align 8
  %952 = alloca [1 x ptr], align 8
  %953 = alloca { ptr }, align 8
  %954 = alloca { ptr, i160 }, align 8
  %955 = alloca i32, align 4
  %.reg2mem = alloca i1, align 1
  %.reg2mem21 = alloca ptr, align 8
  %.reg2mem23 = alloca ptr, align 8
  %.reg2mem25 = alloca i1, align 1
  %.reg2mem28 = alloca i1, align 1
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem33 = alloca ptr, align 8
  %.reg2mem35 = alloca i1, align 1
  %.reg2mem38 = alloca ptr, align 8
  %.reg2mem40 = alloca ptr, align 8
  %.reg2mem42 = alloca i32, align 4
  %.reg2mem44 = alloca i32, align 4
  %.reg2mem46 = alloca ptr, align 8
  %.reg2mem48 = alloca ptr, align 8
  %.reg2mem50 = alloca i1, align 1
  %.reg2mem53 = alloca i1, align 1
  %.reg2mem56 = alloca ptr, align 8
  %.reg2mem58 = alloca ptr, align 8
  %.reg2mem60 = alloca i1, align 1
  %.reg2mem63 = alloca ptr, align 8
  %.reg2mem68 = alloca ptr, align 8
  %.reg2mem73 = alloca ptr, align 8
  %.reg2mem78 = alloca ptr, align 8
  %.reg2mem83 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void @setup_landing_pad()
  %956 = call i64 @clock()
  store i64 %956, ptr %1, align 4
  %957 = load i64, ptr %1, align 4
  store i64 %957, ptr %2, align 4
  store ptr @i64_typ, ptr %3, align 8
  %958 = load ptr, ptr %3, align 8
  %959 = insertvalue { ptr, i160 } undef, ptr %958, 0
  %960 = load i160, ptr %2, align 4
  %961 = insertvalue { ptr, i160 } %959, i160 %960, 1
  %962 = getelementptr [1 x ptr], ptr %4, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %962, align 8
  %963 = call ptr @llvm.invariant.start.p0(i64 1, ptr %4)
  %964 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %965 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %966 = getelementptr { ptr }, ptr %5, i32 0, i32 0
  store ptr %958, ptr %966, align 8
  %967 = call ptr @class_behavior_wrapper(ptr %965, ptr %5)
  call void %967(ptr %4, { ptr, i160 } %961) #17
  store ptr @Bard, ptr %6, align 8
  %968 = load ptr, ptr %6, align 8
  %969 = getelementptr ptr, ptr %968, i32 6
  %970 = load ptr, ptr %969, align 8
  %971 = call { i64, i64 } @size_wrapper(ptr %970, ptr %6)
  %972 = extractvalue { i64, i64 } %971, 0
  %973 = call ptr @bump_malloc(i64 %972)
  store ptr @Bard, ptr %10, align 8
  store ptr %973, ptr %9, align 8
  store i32 10, ptr %7, align 4
  %974 = load ptr, ptr %10, align 8
  %975 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %974, 0
  %976 = load ptr, ptr %9, align 8
  %977 = insertvalue { ptr, ptr, ptr, i32 } %975, ptr %976, 1
  %978 = load ptr, ptr %8, align 8
  %979 = insertvalue { ptr, ptr, ptr, i32 } %977, ptr %978, 2
  %980 = load i32, ptr %7, align 4
  %981 = insertvalue { ptr, ptr, ptr, i32 } %979, i32 %980, 3
  %982 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %983 = call ptr @llvm.invariant.start.p0(i64 56, ptr %974)
  %984 = getelementptr ptr, ptr %974, i32 %980
  %985 = load ptr, ptr %984, align 8
  %986 = call ptr @behavior_wrapper(ptr %985, { ptr, ptr, ptr, i32 } %981, ptr %12)
  call void %986({ ptr, ptr, ptr, i32 } %981, { ptr, ptr, ptr, i32 } %981, ptr %11) #17
  %987 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %988 = load ptr, ptr %10, align 8
  store ptr %988, ptr %987, align 8
  %989 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %990 = load ptr, ptr %9, align 8
  store ptr %990, ptr %989, align 8
  %991 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %992 = load ptr, ptr %8, align 8
  store ptr %992, ptr %991, align 8
  %993 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %994 = load i32, ptr %7, align 4
  store i32 %994, ptr %993, align 4
  call void @set_offset(ptr %13, ptr @Bard)
  %995 = load ptr, ptr %987, align 8
  store ptr %995, ptr %17, align 8
  %996 = load ptr, ptr %989, align 8
  store ptr %996, ptr %16, align 8
  %997 = load ptr, ptr %991, align 8
  store ptr %997, ptr %15, align 8
  %998 = load i32, ptr %993, align 4
  store i32 %998, ptr %14, align 4
  store i32 5, ptr %18, align 4
  store i32 10, ptr %19, align 4
  %999 = load i32, ptr %18, align 4
  store i32 %999, ptr %20, align 4
  store ptr @i32_typ, ptr %21, align 8
  %1000 = load ptr, ptr %21, align 8
  %1001 = insertvalue { ptr, i160 } undef, ptr %1000, 0
  %1002 = load i160, ptr %20, align 4
  %1003 = insertvalue { ptr, i160 } %1001, i160 %1002, 1
  %1004 = load i32, ptr %19, align 4
  store i32 %1004, ptr %22, align 4
  store ptr @i32_typ, ptr %23, align 8
  %1005 = load ptr, ptr %23, align 8
  %1006 = insertvalue { ptr, i160 } undef, ptr %1005, 0
  %1007 = load i160, ptr %22, align 4
  %1008 = insertvalue { ptr, i160 } %1006, i160 %1007, 1
  %1009 = load ptr, ptr %17, align 8
  %1010 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1009, 0
  %1011 = load ptr, ptr %16, align 8
  %1012 = insertvalue { ptr, ptr, ptr, i32 } %1010, ptr %1011, 1
  %1013 = load ptr, ptr %15, align 8
  %1014 = insertvalue { ptr, ptr, ptr, i32 } %1012, ptr %1013, 2
  %1015 = load i32, ptr %14, align 4
  %1016 = insertvalue { ptr, ptr, ptr, i32 } %1014, i32 %1015, 3
  %1017 = getelementptr [2 x ptr], ptr %24, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1017, align 8
  %1018 = getelementptr [2 x ptr], ptr %24, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1018, align 8
  %1019 = call ptr @llvm.invariant.start.p0(i64 4, ptr %24)
  %1020 = call ptr @llvm.invariant.start.p0(i64 56, ptr %1009)
  %1021 = getelementptr ptr, ptr %1009, i32 %1015
  %1022 = getelementptr ptr, ptr %1021, i32 1
  %1023 = load ptr, ptr %1022, align 8
  %1024 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  store ptr %1000, ptr %1024, align 8
  %1025 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 1
  store ptr %1005, ptr %1025, align 8
  %1026 = call ptr @behavior_wrapper(ptr %1023, { ptr, ptr, ptr, i32 } %1016, ptr %25)
  call void %1026({ ptr, ptr, ptr, i32 } %1016, { ptr, ptr, ptr, i32 } %1016, ptr %24, { ptr, i160 } %1003, { ptr, i160 } %1008) #17
  store double 7.000000e+00, ptr %26, align 8
  %1027 = load double, ptr %26, align 8
  store double %1027, ptr %27, align 8
  store ptr @f64_typ, ptr %28, align 8
  store double 1.400000e+01, ptr %29, align 8
  %1028 = getelementptr { ptr, i64 }, ptr %30, i32 0, i32 0
  %1029 = load ptr, ptr %28, align 8
  store ptr %1029, ptr %1028, align 8
  %1030 = getelementptr { ptr, i64 }, ptr %30, i32 0, i32 1
  %1031 = load i64, ptr %27, align 4
  store i64 %1031, ptr %1030, align 4
  %1032 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 0
  %1033 = load ptr, ptr %1032, align 8
  %1034 = insertvalue { ptr, i160 } undef, ptr %1033, 0
  %1035 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 1
  %1036 = load i160, ptr %1035, align 4
  %1037 = insertvalue { ptr, i160 } %1034, i160 %1036, 1
  %1038 = load double, ptr %29, align 8
  store double %1038, ptr %31, align 8
  store ptr @f64_typ, ptr %32, align 8
  %1039 = load ptr, ptr %32, align 8
  %1040 = insertvalue { ptr, i160 } undef, ptr %1039, 0
  %1041 = load i160, ptr %31, align 4
  %1042 = insertvalue { ptr, i160 } %1040, i160 %1041, 1
  %1043 = load ptr, ptr %17, align 8
  %1044 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1043, 0
  %1045 = load ptr, ptr %16, align 8
  %1046 = insertvalue { ptr, ptr, ptr, i32 } %1044, ptr %1045, 1
  %1047 = load ptr, ptr %15, align 8
  %1048 = insertvalue { ptr, ptr, ptr, i32 } %1046, ptr %1047, 2
  %1049 = load i32, ptr %14, align 4
  %1050 = insertvalue { ptr, ptr, ptr, i32 } %1048, i32 %1049, 3
  %1051 = getelementptr [2 x ptr], ptr %33, i32 0, i32 0
  store ptr @_parameterization_Ptri32_or_Ptrf64, ptr %1051, align 8
  %1052 = getelementptr [2 x ptr], ptr %33, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %1052, align 8
  %1053 = call ptr @llvm.invariant.start.p0(i64 4, ptr %33)
  %1054 = call ptr @llvm.invariant.start.p0(i64 56, ptr %1043)
  %1055 = getelementptr ptr, ptr %1043, i32 %1049
  %1056 = getelementptr ptr, ptr %1055, i32 1
  %1057 = load ptr, ptr %1056, align 8
  %1058 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  store ptr %1033, ptr %1058, align 8
  %1059 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 1
  store ptr %1039, ptr %1059, align 8
  %1060 = call ptr @behavior_wrapper(ptr %1057, { ptr, ptr, ptr, i32 } %1050, ptr %34)
  call void %1060({ ptr, ptr, ptr, i32 } %1050, { ptr, ptr, ptr, i32 } %1050, ptr %33, { ptr, i160 } %1037, { ptr, i160 } %1042) #17
  store i32 6, ptr %35, align 4
  %1061 = load i32, ptr %35, align 4
  %1062 = sext i32 %1061 to i64
  %1063 = mul i64 %1062, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1064 = call ptr @bump_malloc(i64 %1063)
  store ptr %1064, ptr %36, align 8
  %1065 = getelementptr { ptr }, ptr %36, i32 0, i32 0
  %1066 = load ptr, ptr %1065, align 8
  store ptr %1066, ptr %37, align 8
  store i32 0, ptr %38, align 4
  %1067 = load ptr, ptr %37, align 8
  %1068 = load i32, ptr %38, align 4
  %1069 = sext i32 %1068 to i64
  %1070 = mul i64 ptrtoint (ptr getelementptr ([5 x i8], ptr null, i32 1) to i64), %1069
  %1071 = getelementptr i8, ptr %1067, i64 %1070
  %1072 = load <5 x i8>, ptr @drbvc_start, align 8
  store <5 x i8> %1072, ptr %1071, align 8
  store i32 5, ptr %39, align 4
  store i32 6, ptr %40, align 4
  store ptr @String, ptr %41, align 8
  %1073 = load ptr, ptr %41, align 8
  %1074 = getelementptr ptr, ptr %1073, i32 6
  %1075 = load ptr, ptr %1074, align 8
  %1076 = call { i64, i64 } @size_wrapper(ptr %1075, ptr %41)
  %1077 = extractvalue { i64, i64 } %1076, 0
  %1078 = call ptr @bump_malloc(i64 %1077)
  %1079 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %1080 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  store ptr @String, ptr %42, align 8
  store ptr %1078, ptr %1079, align 8
  store i32 10, ptr %1080, align 4
  store i32 5, ptr %43, align 4
  store i32 6, ptr %44, align 4
  %1081 = load ptr, ptr %37, align 8
  %1082 = insertvalue { ptr } undef, ptr %1081, 0
  %1083 = load i32, ptr %43, align 4
  %1084 = load i32, ptr %44, align 4
  %1085 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %1086 = load ptr, ptr %1085, align 8
  %1087 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1086, 0
  %1088 = load ptr, ptr %1079, align 8
  %1089 = insertvalue { ptr, ptr, ptr, i32 } %1087, ptr %1088, 1
  %1090 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %1091 = load ptr, ptr %1090, align 8
  %1092 = insertvalue { ptr, ptr, ptr, i32 } %1089, ptr %1091, 2
  %1093 = load i32, ptr %1080, align 4
  %1094 = insertvalue { ptr, ptr, ptr, i32 } %1092, i32 %1093, 3
  %1095 = getelementptr [3 x ptr], ptr %45, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1095, align 8
  %1096 = getelementptr [3 x ptr], ptr %45, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1096, align 8
  %1097 = getelementptr [3 x ptr], ptr %45, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1097, align 8
  %1098 = call ptr @llvm.invariant.start.p0(i64 9, ptr %45)
  %1099 = call ptr @llvm.invariant.start.p0(i64 616, ptr %1086)
  %1100 = getelementptr ptr, ptr %1086, i32 %1093
  %1101 = getelementptr ptr, ptr %1100, i32 5
  %1102 = load ptr, ptr %1101, align 8
  %1103 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 0
  store ptr @buffer_typ, ptr %1103, align 8
  %1104 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 1
  store ptr @i32_typ, ptr %1104, align 8
  %1105 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 2
  store ptr @i32_typ, ptr %1105, align 8
  %1106 = call ptr @behavior_wrapper(ptr %1102, { ptr, ptr, ptr, i32 } %1094, ptr %46)
  call void %1106({ ptr, ptr, ptr, i32 } %1094, { ptr, ptr, ptr, i32 } %1094, ptr %45, { ptr } %1082, i32 %1083, i32 %1084) #17
  %1107 = getelementptr { ptr, i160 }, ptr %42, i32 0, i32 0
  %1108 = load ptr, ptr %1107, align 8
  %1109 = insertvalue { ptr, i160 } undef, ptr %1108, 0
  %1110 = getelementptr { ptr, i160 }, ptr %42, i32 0, i32 1
  %1111 = load i160, ptr %1110, align 4
  %1112 = insertvalue { ptr, i160 } %1109, i160 %1111, 1
  %1113 = getelementptr [1 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1113, align 8
  %1114 = call ptr @llvm.invariant.start.p0(i64 1, ptr %47)
  %1115 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1116 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1117 = getelementptr { ptr }, ptr %48, i32 0, i32 0
  store ptr %1108, ptr %1117, align 8
  %1118 = call ptr @class_behavior_wrapper(ptr %1116, ptr %48)
  call void %1118(ptr %47, { ptr, i160 } %1112) #17
  store i32 55, ptr %49, align 4
  store double 8.000000e+00, ptr %50, align 8
  store i32 13, ptr %51, align 4
  store ptr @Animal, ptr %52, align 8
  %1119 = load ptr, ptr %52, align 8
  %1120 = getelementptr ptr, ptr %1119, i32 6
  %1121 = load ptr, ptr %1120, align 8
  %1122 = call { i64, i64 } @size_wrapper(ptr %1121, ptr %52)
  %1123 = extractvalue { i64, i64 } %1122, 0
  %1124 = call ptr @bump_malloc(i64 %1123)
  store ptr @Animal, ptr %56, align 8
  store ptr %1124, ptr %55, align 8
  store i32 10, ptr %53, align 4
  store i32 55, ptr %57, align 4
  store double 8.000000e+00, ptr %58, align 8
  store i32 13, ptr %59, align 4
  %1125 = load i32, ptr %57, align 4
  %1126 = load double, ptr %58, align 8
  %1127 = load i32, ptr %59, align 4
  %1128 = load ptr, ptr %56, align 8
  %1129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1128, 0
  %1130 = load ptr, ptr %55, align 8
  %1131 = insertvalue { ptr, ptr, ptr, i32 } %1129, ptr %1130, 1
  %1132 = load ptr, ptr %54, align 8
  %1133 = insertvalue { ptr, ptr, ptr, i32 } %1131, ptr %1132, 2
  %1134 = load i32, ptr %53, align 4
  %1135 = insertvalue { ptr, ptr, ptr, i32 } %1133, i32 %1134, 3
  %1136 = getelementptr [3 x ptr], ptr %60, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1136, align 8
  %1137 = getelementptr [3 x ptr], ptr %60, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %1137, align 8
  %1138 = getelementptr [3 x ptr], ptr %60, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1138, align 8
  %1139 = call ptr @llvm.invariant.start.p0(i64 9, ptr %60)
  %1140 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1128)
  %1141 = getelementptr ptr, ptr %1128, i32 %1134
  %1142 = getelementptr ptr, ptr %1141, i32 3
  %1143 = load ptr, ptr %1142, align 8
  %1144 = getelementptr { ptr, ptr, ptr }, ptr %61, i32 0, i32 0
  store ptr @i32_typ, ptr %1144, align 8
  %1145 = getelementptr { ptr, ptr, ptr }, ptr %61, i32 0, i32 1
  store ptr @f64_typ, ptr %1145, align 8
  %1146 = getelementptr { ptr, ptr, ptr }, ptr %61, i32 0, i32 2
  store ptr @i32_typ, ptr %1146, align 8
  %1147 = call ptr @behavior_wrapper(ptr %1143, { ptr, ptr, ptr, i32 } %1135, ptr %61)
  call void %1147({ ptr, ptr, ptr, i32 } %1135, { ptr, ptr, ptr, i32 } %1135, ptr %60, i32 %1125, double %1126, i32 %1127) #17
  %1148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %1149 = load ptr, ptr %56, align 8
  store ptr %1149, ptr %1148, align 8
  %1150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %1151 = load ptr, ptr %55, align 8
  store ptr %1151, ptr %1150, align 8
  %1152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %1153 = load ptr, ptr %54, align 8
  store ptr %1153, ptr %1152, align 8
  %1154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %1155 = load i32, ptr %53, align 4
  store i32 %1155, ptr %1154, align 4
  call void @set_offset(ptr %62, ptr @Animal)
  %1156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  store ptr %1156, ptr %.reg2mem78, align 8
  %1157 = load ptr, ptr %1148, align 8
  %.reload82 = load ptr, ptr %.reg2mem78, align 8
  store ptr %1157, ptr %.reload82, align 8
  %1158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  store ptr %1158, ptr %.reg2mem73, align 8
  %1159 = load ptr, ptr %1150, align 8
  %.reload77 = load ptr, ptr %.reg2mem73, align 8
  store ptr %1159, ptr %.reload77, align 8
  %1160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  store ptr %1160, ptr %.reg2mem68, align 8
  %1161 = load ptr, ptr %1152, align 8
  %.reload72 = load ptr, ptr %.reg2mem68, align 8
  store ptr %1161, ptr %.reload72, align 8
  %1162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  store ptr %1162, ptr %.reg2mem63, align 8
  %1163 = load i32, ptr %1154, align 4
  %.reload67 = load ptr, ptr %.reg2mem63, align 8
  store i32 %1163, ptr %.reload67, align 4
  store i32 14, ptr %64, align 4
  %1164 = load i32, ptr %64, align 4
  %1165 = sext i32 %1164 to i64
  %1166 = mul i64 %1165, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1167 = call ptr @bump_malloc(i64 %1166)
  store ptr %1167, ptr %65, align 8
  %1168 = getelementptr { ptr }, ptr %65, i32 0, i32 0
  %1169 = load ptr, ptr %1168, align 8
  store ptr %1169, ptr %66, align 8
  store i32 0, ptr %67, align 4
  %1170 = load ptr, ptr %66, align 8
  %1171 = load i32, ptr %67, align 4
  %1172 = sext i32 %1171 to i64
  %1173 = mul i64 ptrtoint (ptr getelementptr ([13 x i8], ptr null, i32 1) to i64), %1172
  %1174 = getelementptr i8, ptr %1170, i64 %1173
  %1175 = load <13 x i8>, ptr @yrfxg_did_get_here, align 16
  store <13 x i8> %1175, ptr %1174, align 16
  store i32 13, ptr %68, align 4
  store i32 14, ptr %69, align 4
  store ptr @String, ptr %70, align 8
  %1176 = load ptr, ptr %70, align 8
  %1177 = getelementptr ptr, ptr %1176, i32 6
  %1178 = load ptr, ptr %1177, align 8
  %1179 = call { i64, i64 } @size_wrapper(ptr %1178, ptr %70)
  %1180 = extractvalue { i64, i64 } %1179, 0
  %1181 = call ptr @bump_malloc(i64 %1180)
  %1182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %1183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  store ptr @String, ptr %71, align 8
  store ptr %1181, ptr %1182, align 8
  store i32 10, ptr %1183, align 4
  store i32 13, ptr %72, align 4
  store i32 14, ptr %73, align 4
  %1184 = load ptr, ptr %66, align 8
  %1185 = insertvalue { ptr } undef, ptr %1184, 0
  %1186 = load i32, ptr %72, align 4
  %1187 = load i32, ptr %73, align 4
  %1188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %1189 = load ptr, ptr %1188, align 8
  %1190 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1189, 0
  %1191 = load ptr, ptr %1182, align 8
  %1192 = insertvalue { ptr, ptr, ptr, i32 } %1190, ptr %1191, 1
  %1193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %1194 = load ptr, ptr %1193, align 8
  %1195 = insertvalue { ptr, ptr, ptr, i32 } %1192, ptr %1194, 2
  %1196 = load i32, ptr %1183, align 4
  %1197 = insertvalue { ptr, ptr, ptr, i32 } %1195, i32 %1196, 3
  %1198 = getelementptr [3 x ptr], ptr %74, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1198, align 8
  %1199 = getelementptr [3 x ptr], ptr %74, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1199, align 8
  %1200 = getelementptr [3 x ptr], ptr %74, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1200, align 8
  %1201 = call ptr @llvm.invariant.start.p0(i64 9, ptr %74)
  %1202 = call ptr @llvm.invariant.start.p0(i64 616, ptr %1189)
  %1203 = getelementptr ptr, ptr %1189, i32 %1196
  %1204 = getelementptr ptr, ptr %1203, i32 5
  %1205 = load ptr, ptr %1204, align 8
  %1206 = getelementptr { ptr, ptr, ptr }, ptr %75, i32 0, i32 0
  store ptr @buffer_typ, ptr %1206, align 8
  %1207 = getelementptr { ptr, ptr, ptr }, ptr %75, i32 0, i32 1
  store ptr @i32_typ, ptr %1207, align 8
  %1208 = getelementptr { ptr, ptr, ptr }, ptr %75, i32 0, i32 2
  store ptr @i32_typ, ptr %1208, align 8
  %1209 = call ptr @behavior_wrapper(ptr %1205, { ptr, ptr, ptr, i32 } %1197, ptr %75)
  call void %1209({ ptr, ptr, ptr, i32 } %1197, { ptr, ptr, ptr, i32 } %1197, ptr %74, { ptr } %1185, i32 %1186, i32 %1187) #17
  %1210 = getelementptr { ptr, i160 }, ptr %71, i32 0, i32 0
  %1211 = load ptr, ptr %1210, align 8
  %1212 = insertvalue { ptr, i160 } undef, ptr %1211, 0
  %1213 = getelementptr { ptr, i160 }, ptr %71, i32 0, i32 1
  %1214 = load i160, ptr %1213, align 4
  %1215 = insertvalue { ptr, i160 } %1212, i160 %1214, 1
  %1216 = getelementptr [1 x ptr], ptr %76, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1216, align 8
  %1217 = call ptr @llvm.invariant.start.p0(i64 1, ptr %76)
  %1218 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1219 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1220 = getelementptr { ptr }, ptr %77, i32 0, i32 0
  store ptr %1211, ptr %1220, align 8
  %1221 = call ptr @class_behavior_wrapper(ptr %1219, ptr %77)
  call void %1221(ptr %76, { ptr, i160 } %1215) #17
  store i32 10, ptr %78, align 4
  store double 1.000000e+01, ptr %79, align 8
  store ptr @Beaver, ptr %80, align 8
  %1222 = load ptr, ptr %80, align 8
  %1223 = getelementptr ptr, ptr %1222, i32 6
  %1224 = load ptr, ptr %1223, align 8
  %1225 = call { i64, i64 } @size_wrapper(ptr %1224, ptr %80)
  %1226 = extractvalue { i64, i64 } %1225, 0
  %1227 = call ptr @bump_malloc(i64 %1226)
  store ptr @Beaver, ptr %84, align 8
  store ptr %1227, ptr %83, align 8
  store i32 10, ptr %81, align 4
  store i32 10, ptr %85, align 4
  store double 1.000000e+01, ptr %86, align 8
  %1228 = load i32, ptr %85, align 4
  %1229 = load double, ptr %86, align 8
  %1230 = load ptr, ptr %84, align 8
  %1231 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1230, 0
  %1232 = load ptr, ptr %83, align 8
  %1233 = insertvalue { ptr, ptr, ptr, i32 } %1231, ptr %1232, 1
  %1234 = load ptr, ptr %82, align 8
  %1235 = insertvalue { ptr, ptr, ptr, i32 } %1233, ptr %1234, 2
  %1236 = load i32, ptr %81, align 4
  %1237 = insertvalue { ptr, ptr, ptr, i32 } %1235, i32 %1236, 3
  %1238 = getelementptr [2 x ptr], ptr %87, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1238, align 8
  %1239 = getelementptr [2 x ptr], ptr %87, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %1239, align 8
  %1240 = call ptr @llvm.invariant.start.p0(i64 4, ptr %87)
  %1241 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1230)
  %1242 = getelementptr ptr, ptr %1230, i32 %1236
  %1243 = getelementptr ptr, ptr %1242, i32 2
  %1244 = load ptr, ptr %1243, align 8
  %1245 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 0
  store ptr @i32_typ, ptr %1245, align 8
  %1246 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  store ptr @f64_typ, ptr %1246, align 8
  %1247 = call ptr @behavior_wrapper(ptr %1244, { ptr, ptr, ptr, i32 } %1237, ptr %88)
  call void %1247({ ptr, ptr, ptr, i32 } %1237, { ptr, ptr, ptr, i32 } %1237, ptr %87, i32 %1228, double %1229) #17
  %1248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 0
  %1249 = load ptr, ptr %84, align 8
  store ptr %1249, ptr %1248, align 8
  %1250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %1251 = load ptr, ptr %83, align 8
  store ptr %1251, ptr %1250, align 8
  %1252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 2
  %1253 = load ptr, ptr %82, align 8
  store ptr %1253, ptr %1252, align 8
  %1254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  %1255 = load i32, ptr %81, align 4
  store i32 %1255, ptr %1254, align 4
  call void @set_offset(ptr %89, ptr @Beaver)
  %1256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %1257 = load ptr, ptr %1248, align 8
  store ptr %1257, ptr %1256, align 8
  %1258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %1259 = load ptr, ptr %1250, align 8
  store ptr %1259, ptr %1258, align 8
  %1260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %1261 = load ptr, ptr %1252, align 8
  store ptr %1261, ptr %1260, align 8
  %1262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %1263 = load i32, ptr %1254, align 4
  store i32 %1263, ptr %1262, align 4
  %1264 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 0
  %1265 = load ptr, ptr %1264, align 8
  %1266 = insertvalue { ptr, i160 } undef, ptr %1265, 0
  %1267 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 1
  %1268 = load i160, ptr %1267, align 4
  %1269 = insertvalue { ptr, i160 } %1266, i160 %1268, 1
  %1270 = getelementptr { ptr, i160 }, ptr %90, i32 0, i32 0
  %1271 = load ptr, ptr %1270, align 8
  %1272 = insertvalue { ptr, i160 } undef, ptr %1271, 0
  %1273 = getelementptr { ptr, i160 }, ptr %90, i32 0, i32 1
  %1274 = load i160, ptr %1273, align 4
  %1275 = insertvalue { ptr, i160 } %1272, i160 %1274, 1
  %1276 = load ptr, ptr %17, align 8
  %1277 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1276, 0
  %1278 = load ptr, ptr %16, align 8
  %1279 = insertvalue { ptr, ptr, ptr, i32 } %1277, ptr %1278, 1
  %1280 = load ptr, ptr %15, align 8
  %1281 = insertvalue { ptr, ptr, ptr, i32 } %1279, ptr %1280, 2
  %1282 = load i32, ptr %14, align 4
  %1283 = insertvalue { ptr, ptr, ptr, i32 } %1281, i32 %1282, 3
  %1284 = getelementptr [2 x ptr], ptr %91, i32 0, i32 0
  store ptr @_parameterization_Animal, ptr %1284, align 8
  %1285 = getelementptr [2 x ptr], ptr %91, i32 0, i32 1
  store ptr @_parameterization_Beaver, ptr %1285, align 8
  %1286 = call ptr @llvm.invariant.start.p0(i64 4, ptr %91)
  %1287 = call ptr @llvm.invariant.start.p0(i64 56, ptr %1276)
  %1288 = getelementptr ptr, ptr %1276, i32 %1282
  %1289 = getelementptr ptr, ptr %1288, i32 1
  %1290 = load ptr, ptr %1289, align 8
  %1291 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 0
  store ptr %1265, ptr %1291, align 8
  %1292 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 1
  store ptr %1271, ptr %1292, align 8
  %1293 = call ptr @behavior_wrapper(ptr %1290, { ptr, ptr, ptr, i32 } %1283, ptr %92)
  call void %1293({ ptr, ptr, ptr, i32 } %1283, { ptr, ptr, ptr, i32 } %1283, ptr %91, { ptr, i160 } %1269, { ptr, i160 } %1275) #17
  store i32 7, ptr %93, align 4
  %1294 = load i32, ptr %93, align 4
  store i32 %1294, ptr %94, align 4
  store ptr @i32_typ, ptr %95, align 8
  %1295 = load ptr, ptr %95, align 8
  %1296 = insertvalue { ptr, i160 } undef, ptr %1295, 0
  %1297 = load i160, ptr %94, align 4
  %1298 = insertvalue { ptr, i160 } %1296, i160 %1297, 1
  %1299 = getelementptr { ptr, i64 }, ptr %96, i32 0, i32 0
  %1300 = load ptr, ptr %28, align 8
  store ptr %1300, ptr %1299, align 8
  %1301 = getelementptr { ptr, i64 }, ptr %96, i32 0, i32 1
  %1302 = load i64, ptr %27, align 4
  store i64 %1302, ptr %1301, align 4
  %1303 = getelementptr { ptr, i160 }, ptr %96, i32 0, i32 0
  %1304 = load ptr, ptr %1303, align 8
  %1305 = insertvalue { ptr, i160 } undef, ptr %1304, 0
  %1306 = getelementptr { ptr, i160 }, ptr %96, i32 0, i32 1
  %1307 = load i160, ptr %1306, align 4
  %1308 = insertvalue { ptr, i160 } %1305, i160 %1307, 1
  %1309 = load ptr, ptr %17, align 8
  %1310 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1309, 0
  %1311 = load ptr, ptr %16, align 8
  %1312 = insertvalue { ptr, ptr, ptr, i32 } %1310, ptr %1311, 1
  %1313 = load ptr, ptr %15, align 8
  %1314 = insertvalue { ptr, ptr, ptr, i32 } %1312, ptr %1313, 2
  %1315 = load i32, ptr %14, align 4
  %1316 = insertvalue { ptr, ptr, ptr, i32 } %1314, i32 %1315, 3
  %1317 = getelementptr [2 x ptr], ptr %97, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1317, align 8
  %1318 = getelementptr [2 x ptr], ptr %97, i32 0, i32 1
  store ptr @_parameterization_Ptri32_or_Ptrf64, ptr %1318, align 8
  %1319 = call ptr @llvm.invariant.start.p0(i64 4, ptr %97)
  %1320 = call ptr @llvm.invariant.start.p0(i64 56, ptr %1309)
  %1321 = getelementptr ptr, ptr %1309, i32 %1315
  %1322 = getelementptr ptr, ptr %1321, i32 1
  %1323 = load ptr, ptr %1322, align 8
  %1324 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 0
  store ptr %1295, ptr %1324, align 8
  %1325 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 1
  store ptr %1304, ptr %1325, align 8
  %1326 = call ptr @behavior_wrapper(ptr %1323, { ptr, ptr, ptr, i32 } %1316, ptr %98)
  call void %1326({ ptr, ptr, ptr, i32 } %1316, { ptr, ptr, ptr, i32 } %1316, ptr %97, { ptr, i160 } %1298, { ptr, i160 } %1308) #17
  store i32 17, ptr %99, align 4
  %1327 = load i32, ptr %99, align 4
  %1328 = sext i32 %1327 to i64
  %1329 = mul i64 %1328, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1330 = call ptr @bump_malloc(i64 %1329)
  store ptr %1330, ptr %100, align 8
  %1331 = getelementptr { ptr }, ptr %100, i32 0, i32 0
  %1332 = load ptr, ptr %1331, align 8
  store ptr %1332, ptr %101, align 8
  store i32 0, ptr %102, align 4
  %1333 = load ptr, ptr %101, align 8
  %1334 = load i32, ptr %102, align 4
  %1335 = sext i32 %1334 to i64
  %1336 = mul i64 ptrtoint (ptr getelementptr ([16 x i8], ptr null, i32 1) to i64), %1335
  %1337 = getelementptr i8, ptr %1333, i64 %1336
  %1338 = load <16 x i8>, ptr @tvzvu_barrys_color_is, align 16
  store <16 x i8> %1338, ptr %1337, align 16
  store i32 16, ptr %103, align 4
  store i32 17, ptr %104, align 4
  store ptr @String, ptr %105, align 8
  %1339 = load ptr, ptr %105, align 8
  %1340 = getelementptr ptr, ptr %1339, i32 6
  %1341 = load ptr, ptr %1340, align 8
  %1342 = call { i64, i64 } @size_wrapper(ptr %1341, ptr %105)
  %1343 = extractvalue { i64, i64 } %1342, 0
  %1344 = call ptr @bump_malloc(i64 %1343)
  %1345 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 1
  %1346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 3
  store ptr @String, ptr %106, align 8
  store ptr %1344, ptr %1345, align 8
  store i32 10, ptr %1346, align 4
  store i32 16, ptr %107, align 4
  store i32 17, ptr %108, align 4
  %1347 = load ptr, ptr %101, align 8
  %1348 = insertvalue { ptr } undef, ptr %1347, 0
  %1349 = load i32, ptr %107, align 4
  %1350 = load i32, ptr %108, align 4
  %1351 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 0
  %1352 = load ptr, ptr %1351, align 8
  %1353 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1352, 0
  %1354 = load ptr, ptr %1345, align 8
  %1355 = insertvalue { ptr, ptr, ptr, i32 } %1353, ptr %1354, 1
  %1356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 2
  %1357 = load ptr, ptr %1356, align 8
  %1358 = insertvalue { ptr, ptr, ptr, i32 } %1355, ptr %1357, 2
  %1359 = load i32, ptr %1346, align 4
  %1360 = insertvalue { ptr, ptr, ptr, i32 } %1358, i32 %1359, 3
  %1361 = getelementptr [3 x ptr], ptr %109, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1361, align 8
  %1362 = getelementptr [3 x ptr], ptr %109, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1362, align 8
  %1363 = getelementptr [3 x ptr], ptr %109, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1363, align 8
  %1364 = call ptr @llvm.invariant.start.p0(i64 9, ptr %109)
  %1365 = call ptr @llvm.invariant.start.p0(i64 616, ptr %1352)
  %1366 = getelementptr ptr, ptr %1352, i32 %1359
  %1367 = getelementptr ptr, ptr %1366, i32 5
  %1368 = load ptr, ptr %1367, align 8
  %1369 = getelementptr { ptr, ptr, ptr }, ptr %110, i32 0, i32 0
  store ptr @buffer_typ, ptr %1369, align 8
  %1370 = getelementptr { ptr, ptr, ptr }, ptr %110, i32 0, i32 1
  store ptr @i32_typ, ptr %1370, align 8
  %1371 = getelementptr { ptr, ptr, ptr }, ptr %110, i32 0, i32 2
  store ptr @i32_typ, ptr %1371, align 8
  %1372 = call ptr @behavior_wrapper(ptr %1368, { ptr, ptr, ptr, i32 } %1360, ptr %110)
  call void %1372({ ptr, ptr, ptr, i32 } %1360, { ptr, ptr, ptr, i32 } %1360, ptr %109, { ptr } %1348, i32 %1349, i32 %1350) #17
  %1373 = getelementptr { ptr, i160 }, ptr %106, i32 0, i32 0
  %1374 = load ptr, ptr %1373, align 8
  %1375 = insertvalue { ptr, i160 } undef, ptr %1374, 0
  %1376 = getelementptr { ptr, i160 }, ptr %106, i32 0, i32 1
  %1377 = load i160, ptr %1376, align 4
  %1378 = insertvalue { ptr, i160 } %1375, i160 %1377, 1
  %1379 = getelementptr [1 x ptr], ptr %111, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1379, align 8
  %1380 = call ptr @llvm.invariant.start.p0(i64 1, ptr %111)
  %1381 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1382 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1383 = getelementptr { ptr }, ptr %112, i32 0, i32 0
  store ptr %1374, ptr %1383, align 8
  %1384 = call ptr @class_behavior_wrapper(ptr %1382, ptr %112)
  call void %1384(ptr %111, { ptr, i160 } %1378) #17
  %1385 = load ptr, ptr %1256, align 8
  %1386 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1385, 0
  %1387 = load ptr, ptr %1258, align 8
  %1388 = insertvalue { ptr, ptr, ptr, i32 } %1386, ptr %1387, 1
  %1389 = load ptr, ptr %1260, align 8
  %1390 = insertvalue { ptr, ptr, ptr, i32 } %1388, ptr %1389, 2
  %1391 = load i32, ptr %1262, align 4
  %1392 = insertvalue { ptr, ptr, ptr, i32 } %1390, i32 %1391, 3
  %1393 = call ptr @llvm.invariant.start.p0(i64 0, ptr %113)
  %1394 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1385)
  %1395 = getelementptr ptr, ptr %1385, i32 %1391
  %1396 = getelementptr ptr, ptr %1395, i32 4
  %1397 = load ptr, ptr %1396, align 8
  %1398 = call ptr @behavior_wrapper(ptr %1397, { ptr, ptr, ptr, i32 } %1392, ptr %114)
  call void %1398({ ptr, ptr, ptr, i32 } %1392, { ptr, ptr, ptr, i32 } %1392, ptr %113) #17
  store i32 5, ptr %115, align 4
  %1399 = load i32, ptr %115, align 4
  %1400 = load ptr, ptr %1256, align 8
  %1401 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1400, 0
  %1402 = load ptr, ptr %1258, align 8
  %1403 = insertvalue { ptr, ptr, ptr, i32 } %1401, ptr %1402, 1
  %1404 = load ptr, ptr %1260, align 8
  %1405 = insertvalue { ptr, ptr, ptr, i32 } %1403, ptr %1404, 2
  %1406 = load i32, ptr %1262, align 4
  %1407 = insertvalue { ptr, ptr, ptr, i32 } %1405, i32 %1406, 3
  %1408 = getelementptr [1 x ptr], ptr %116, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1408, align 8
  %1409 = call ptr @llvm.invariant.start.p0(i64 1, ptr %116)
  %1410 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1400)
  %1411 = getelementptr ptr, ptr %1400, i32 %1406
  %1412 = getelementptr ptr, ptr %1411, i32 3
  %1413 = load ptr, ptr %1412, align 8
  %1414 = getelementptr { ptr }, ptr %117, i32 0, i32 0
  store ptr @i32_typ, ptr %1414, align 8
  %1415 = call ptr @behavior_wrapper(ptr %1413, { ptr, ptr, ptr, i32 } %1407, ptr %117)
  call void %1415({ ptr, ptr, ptr, i32 } %1407, { ptr, ptr, ptr, i32 } %1407, ptr %116, i32 %1399) #17
  %1416 = load ptr, ptr %1256, align 8
  %1417 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1416, 0
  %1418 = load ptr, ptr %1258, align 8
  %1419 = insertvalue { ptr, ptr, ptr, i32 } %1417, ptr %1418, 1
  %1420 = load ptr, ptr %1260, align 8
  %1421 = insertvalue { ptr, ptr, ptr, i32 } %1419, ptr %1420, 2
  %1422 = load i32, ptr %1262, align 4
  %1423 = insertvalue { ptr, ptr, ptr, i32 } %1421, i32 %1422, 3
  %1424 = call ptr @llvm.invariant.start.p0(i64 0, ptr %118)
  %1425 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1416)
  %1426 = getelementptr ptr, ptr %1416, i32 %1422
  %1427 = getelementptr ptr, ptr %1426, i32 4
  %1428 = load ptr, ptr %1427, align 8
  %1429 = call ptr @behavior_wrapper(ptr %1428, { ptr, ptr, ptr, i32 } %1423, ptr %119)
  call void %1429({ ptr, ptr, ptr, i32 } %1423, { ptr, ptr, ptr, i32 } %1423, ptr %118) #17
  store i32 89, ptr %120, align 4
  store ptr @Integer, ptr %121, align 8
  %1430 = load ptr, ptr %121, align 8
  %1431 = getelementptr ptr, ptr %1430, i32 6
  %1432 = load ptr, ptr %1431, align 8
  %1433 = call { i64, i64 } @size_wrapper(ptr %1432, ptr %121)
  %1434 = extractvalue { i64, i64 } %1433, 0
  %1435 = call ptr @bump_malloc(i64 %1434)
  store ptr @Integer, ptr %125, align 8
  store ptr %1435, ptr %124, align 8
  store i32 10, ptr %122, align 4
  store i32 89, ptr %126, align 4
  %1436 = load i32, ptr %126, align 4
  %1437 = load ptr, ptr %125, align 8
  %1438 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1437, 0
  %1439 = load ptr, ptr %124, align 8
  %1440 = insertvalue { ptr, ptr, ptr, i32 } %1438, ptr %1439, 1
  %1441 = load ptr, ptr %123, align 8
  %1442 = insertvalue { ptr, ptr, ptr, i32 } %1440, ptr %1441, 2
  %1443 = load i32, ptr %122, align 4
  %1444 = insertvalue { ptr, ptr, ptr, i32 } %1442, i32 %1443, 3
  %1445 = getelementptr [1 x ptr], ptr %127, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1445, align 8
  %1446 = call ptr @llvm.invariant.start.p0(i64 1, ptr %127)
  %1447 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1437)
  %1448 = getelementptr ptr, ptr %1437, i32 %1443
  %1449 = getelementptr ptr, ptr %1448, i32 1
  %1450 = load ptr, ptr %1449, align 8
  %1451 = getelementptr { ptr }, ptr %128, i32 0, i32 0
  store ptr @i32_typ, ptr %1451, align 8
  %1452 = call ptr @behavior_wrapper(ptr %1450, { ptr, ptr, ptr, i32 } %1444, ptr %128)
  call void %1452({ ptr, ptr, ptr, i32 } %1444, { ptr, ptr, ptr, i32 } %1444, ptr %127, i32 %1436) #17
  %1453 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %1454 = load ptr, ptr %125, align 8
  store ptr %1454, ptr %1453, align 8
  %1455 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %1456 = load ptr, ptr %124, align 8
  store ptr %1456, ptr %1455, align 8
  %1457 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %1458 = load ptr, ptr %123, align 8
  store ptr %1458, ptr %1457, align 8
  %1459 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %1460 = load i32, ptr %122, align 4
  store i32 %1460, ptr %1459, align 4
  call void @set_offset(ptr %129, ptr @Integer)
  %1461 = load ptr, ptr %1453, align 8
  store ptr %1461, ptr %133, align 8
  %1462 = load ptr, ptr %1455, align 8
  store ptr %1462, ptr %132, align 8
  %1463 = load ptr, ptr %1457, align 8
  store ptr %1463, ptr %131, align 8
  %1464 = load i32, ptr %1459, align 4
  store i32 %1464, ptr %130, align 4
  store i32 7, ptr %134, align 4
  %1465 = load i32, ptr %134, align 4
  %1466 = load ptr, ptr %133, align 8
  %1467 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1466, 0
  %1468 = load ptr, ptr %132, align 8
  %1469 = insertvalue { ptr, ptr, ptr, i32 } %1467, ptr %1468, 1
  %1470 = load ptr, ptr %131, align 8
  %1471 = insertvalue { ptr, ptr, ptr, i32 } %1469, ptr %1470, 2
  %1472 = load i32, ptr %130, align 4
  %1473 = insertvalue { ptr, ptr, ptr, i32 } %1471, i32 %1472, 3
  %1474 = getelementptr [1 x ptr], ptr %135, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1474, align 8
  %1475 = call ptr @llvm.invariant.start.p0(i64 1, ptr %135)
  %1476 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1466)
  %1477 = getelementptr ptr, ptr %1466, i32 %1472
  %1478 = getelementptr ptr, ptr %1477, i32 3
  %1479 = load ptr, ptr %1478, align 8
  %1480 = getelementptr { ptr }, ptr %136, i32 0, i32 0
  store ptr @i32_typ, ptr %1480, align 8
  %1481 = call ptr @behavior_wrapper(ptr %1479, { ptr, ptr, ptr, i32 } %1473, ptr %136)
  %1482 = call { ptr, ptr, ptr, i32 } %1481({ ptr, ptr, ptr, i32 } %1473, { ptr, ptr, ptr, i32 } %1473, ptr %135, i32 %1465) #17
  store { ptr, ptr, ptr, i32 } %1482, ptr %137, align 8
  %1483 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 0
  %1484 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %1485 = load ptr, ptr %1483, align 8
  store ptr %1485, ptr %1484, align 8
  %1486 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %1487 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %1488 = load ptr, ptr %1486, align 8
  store ptr %1488, ptr %1487, align 8
  %1489 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 2
  %1490 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %1491 = load ptr, ptr %1489, align 8
  store ptr %1491, ptr %1490, align 8
  %1492 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  %1493 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %1494 = load i32, ptr %1492, align 4
  store i32 %1494, ptr %1493, align 4
  call void @set_offset(ptr %138, ptr @Integer)
  %1495 = load ptr, ptr %1484, align 8
  %1496 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1495, 0
  %1497 = load ptr, ptr %1487, align 8
  %1498 = insertvalue { ptr, ptr, ptr, i32 } %1496, ptr %1497, 1
  %1499 = load ptr, ptr %1490, align 8
  %1500 = insertvalue { ptr, ptr, ptr, i32 } %1498, ptr %1499, 2
  %1501 = load i32, ptr %1493, align 4
  %1502 = insertvalue { ptr, ptr, ptr, i32 } %1500, i32 %1501, 3
  %1503 = call ptr @llvm.invariant.start.p0(i64 0, ptr %139)
  %1504 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1495)
  %1505 = getelementptr ptr, ptr %1495, i32 %1501
  %1506 = getelementptr ptr, ptr %1505, i32 6
  %1507 = load ptr, ptr %1506, align 8
  %1508 = call ptr @behavior_wrapper(ptr %1507, { ptr, ptr, ptr, i32 } %1502, ptr %140)
  call void %1508({ ptr, ptr, ptr, i32 } %1502, { ptr, ptr, ptr, i32 } %1502, ptr %139) #17
  store double 9.000000e+00, ptr %141, align 8
  %1509 = load double, ptr %141, align 8
  %1510 = getelementptr [1 x ptr], ptr %142, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %1510, align 8
  %1511 = call ptr @llvm.invariant.start.p0(i64 1, ptr %142)
  %1512 = call ptr @llvm.invariant.start.p0(i64 136, ptr @Math)
  %1513 = load ptr, ptr getelementptr (ptr, ptr @Math, i32 10), align 8
  %1514 = getelementptr { ptr }, ptr %143, i32 0, i32 0
  store ptr @f64_typ, ptr %1514, align 8
  %1515 = call ptr @class_behavior_wrapper(ptr %1513, ptr %143)
  %1516 = call double %1515(ptr %142, double %1509) #17
  store double %1516, ptr %144, align 8
  store i32 -9, ptr %145, align 4
  %1517 = load i32, ptr %145, align 4
  store i32 %1517, ptr %146, align 4
  store ptr @i32_typ, ptr %147, align 8
  %1518 = load ptr, ptr %147, align 8
  %1519 = insertvalue { ptr, i64 } undef, ptr %1518, 0
  %1520 = load i64, ptr %146, align 4
  %1521 = insertvalue { ptr, i64 } %1519, i64 %1520, 1
  %1522 = getelementptr [1 x ptr], ptr %148, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1522, align 8
  %1523 = call ptr @llvm.invariant.start.p0(i64 1, ptr %148)
  %1524 = call ptr @llvm.invariant.start.p0(i64 136, ptr @Math)
  %1525 = load ptr, ptr getelementptr (ptr, ptr getelementptr (ptr, ptr @Math, i32 10), i32 1), align 8
  %1526 = getelementptr { ptr }, ptr %149, i32 0, i32 0
  store ptr %1518, ptr %1526, align 8
  %1527 = call ptr @class_behavior_wrapper(ptr %1525, ptr %149)
  %1528 = call { ptr, i64 } %1527(ptr %148, { ptr, i64 } %1521) #17
  store { ptr, i64 } %1528, ptr %150, align 8
  %1529 = getelementptr { ptr, i64 }, ptr %150, i32 0, i32 1
  %1530 = load i32, ptr %1529, align 4
  store i32 %1530, ptr %151, align 4
  %1531 = load i32, ptr %151, align 4
  store i32 %1531, ptr %152, align 4
  store ptr @i32_typ, ptr %153, align 8
  %1532 = load ptr, ptr %153, align 8
  %1533 = insertvalue { ptr, i160 } undef, ptr %1532, 0
  %1534 = load i160, ptr %152, align 4
  %1535 = insertvalue { ptr, i160 } %1533, i160 %1534, 1
  %1536 = getelementptr [1 x ptr], ptr %154, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1536, align 8
  %1537 = call ptr @llvm.invariant.start.p0(i64 1, ptr %154)
  %1538 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1539 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1540 = getelementptr { ptr }, ptr %155, i32 0, i32 0
  store ptr %1532, ptr %1540, align 8
  %1541 = call ptr @class_behavior_wrapper(ptr %1539, ptr %155)
  call void %1541(ptr %154, { ptr, i160 } %1535) #17
  %1542 = load double, ptr %144, align 8
  store double %1542, ptr %156, align 8
  store ptr @f64_typ, ptr %157, align 8
  %1543 = load ptr, ptr %157, align 8
  %1544 = insertvalue { ptr, i160 } undef, ptr %1543, 0
  %1545 = load i160, ptr %156, align 4
  %1546 = insertvalue { ptr, i160 } %1544, i160 %1545, 1
  %1547 = getelementptr [1 x ptr], ptr %158, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %1547, align 8
  %1548 = call ptr @llvm.invariant.start.p0(i64 1, ptr %158)
  %1549 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1550 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1551 = getelementptr { ptr }, ptr %159, i32 0, i32 0
  store ptr %1543, ptr %1551, align 8
  %1552 = call ptr @class_behavior_wrapper(ptr %1550, ptr %159)
  call void %1552(ptr %158, { ptr, i160 } %1546) #17
  %.reload81 = load ptr, ptr %.reg2mem78, align 8
  %1553 = load ptr, ptr %.reload81, align 8
  %1554 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1553, 0
  %.reload76 = load ptr, ptr %.reg2mem73, align 8
  %1555 = load ptr, ptr %.reload76, align 8
  %1556 = insertvalue { ptr, ptr, ptr, i32 } %1554, ptr %1555, 1
  %.reload71 = load ptr, ptr %.reg2mem68, align 8
  %1557 = load ptr, ptr %.reload71, align 8
  %1558 = insertvalue { ptr, ptr, ptr, i32 } %1556, ptr %1557, 2
  %.reload66 = load ptr, ptr %.reg2mem63, align 8
  %1559 = load i32, ptr %.reload66, align 4
  %1560 = insertvalue { ptr, ptr, ptr, i32 } %1558, i32 %1559, 3
  call void @make_em_speak({ ptr, ptr, ptr, i32 } %1560)
  %.reload80 = load ptr, ptr %.reg2mem78, align 8
  %1561 = load ptr, ptr %.reload80, align 8
  %1562 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1561, 0
  %.reload75 = load ptr, ptr %.reg2mem73, align 8
  %1563 = load ptr, ptr %.reload75, align 8
  %1564 = insertvalue { ptr, ptr, ptr, i32 } %1562, ptr %1563, 1
  %.reload70 = load ptr, ptr %.reg2mem68, align 8
  %1565 = load ptr, ptr %.reload70, align 8
  %1566 = insertvalue { ptr, ptr, ptr, i32 } %1564, ptr %1565, 2
  %.reload65 = load ptr, ptr %.reg2mem63, align 8
  %1567 = load i32, ptr %.reload65, align 4
  %1568 = insertvalue { ptr, ptr, ptr, i32 } %1566, i32 %1567, 3
  %1569 = call ptr @llvm.invariant.start.p0(i64 0, ptr %160)
  %1570 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1561)
  %1571 = getelementptr ptr, ptr %1561, i32 %1567
  %1572 = getelementptr ptr, ptr %1571, i32 7
  %1573 = load ptr, ptr %1572, align 8
  %1574 = call ptr @behavior_wrapper(ptr %1573, { ptr, ptr, ptr, i32 } %1568, ptr %161)
  %1575 = call { ptr, i160 } %1574({ ptr, ptr, ptr, i32 } %1568, { ptr, ptr, ptr, i32 } %1568, ptr %160) #17
  store { ptr, i160 } %1575, ptr %162, align 8
  store i32 5, ptr %163, align 4
  %1576 = load i32, ptr %163, align 4
  store i32 %1576, ptr %164, align 4
  store ptr @i32_typ, ptr %165, align 8
  br label %1577

1577:                                             ; preds = %._crit_edge2, %0
  %1578 = load ptr, ptr %165, align 8
  %1579 = ptrtoint ptr %1578 to i64
  %1580 = icmp eq i64 %1579, ptrtoint (ptr @i32_typ to i64)
  store i1 %1580, ptr %166, align 1
  %1581 = load i1, ptr %166, align 1
  store i1 %1581, ptr %.reg2mem60, align 1
  %.reload62 = load i1, ptr %.reg2mem60, align 1
  br i1 %.reload62, label %1582, label %._crit_edge

._crit_edge:                                      ; preds = %1577
  br label %1657

1582:                                             ; preds = %1577
  %1583 = load i32, ptr %164, align 4
  store i32 %1583, ptr %167, align 4
  %1584 = load i32, ptr %167, align 4
  store i32 %1584, ptr %168, align 4
  store ptr @i32_typ, ptr %169, align 8
  %1585 = load ptr, ptr %169, align 8
  %1586 = insertvalue { ptr, i160 } undef, ptr %1585, 0
  %1587 = load i160, ptr %168, align 4
  %1588 = insertvalue { ptr, i160 } %1586, i160 %1587, 1
  %1589 = getelementptr [1 x ptr], ptr %170, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1589, align 8
  %1590 = call ptr @llvm.invariant.start.p0(i64 1, ptr %170)
  %1591 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1592 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1593 = getelementptr { ptr }, ptr %171, i32 0, i32 0
  store ptr %1585, ptr %1593, align 8
  %1594 = call ptr @class_behavior_wrapper(ptr %1592, ptr %171)
  call void %1594(ptr %170, { ptr, i160 } %1588) #17
  store i32 1, ptr %172, align 4
  %1595 = load i32, ptr %167, align 4
  %1596 = load i32, ptr %172, align 4
  %1597 = add i32 %1595, %1596
  store i32 %1597, ptr %173, align 4
  %1598 = load i32, ptr %173, align 4
  store i32 %1598, ptr %167, align 4
  store i32 9, ptr %174, align 4
  %1599 = load i32, ptr %167, align 4
  %1600 = load i32, ptr %174, align 4
  %1601 = icmp eq i32 %1599, %1600
  store i1 %1601, ptr %175, align 1
  %1602 = load i1, ptr %175, align 1
  %1603 = load i32, ptr %167, align 4
  store i32 %1603, ptr %176, align 4
  store ptr @i32_typ, ptr %177, align 8
  br i1 %1602, label %1604, label %._crit_edge1

._crit_edge1:                                     ; preds = %1582
  br label %1654

1604:                                             ; preds = %1582
  store i32 65, ptr %178, align 4
  store double 1.800000e+01, ptr %179, align 8
  store i32 23, ptr %180, align 4
  store ptr @Animal, ptr %181, align 8
  %1605 = load ptr, ptr %181, align 8
  %1606 = getelementptr ptr, ptr %1605, i32 6
  %1607 = load ptr, ptr %1606, align 8
  %1608 = call { i64, i64 } @size_wrapper(ptr %1607, ptr %181)
  %1609 = extractvalue { i64, i64 } %1608, 0
  %1610 = call ptr @bump_malloc(i64 %1609)
  store ptr @Animal, ptr %185, align 8
  store ptr %1610, ptr %184, align 8
  store i32 10, ptr %182, align 4
  store i32 65, ptr %186, align 4
  store double 1.800000e+01, ptr %187, align 8
  store i32 23, ptr %188, align 4
  %1611 = load i32, ptr %186, align 4
  %1612 = load double, ptr %187, align 8
  %1613 = load i32, ptr %188, align 4
  %1614 = load ptr, ptr %185, align 8
  %1615 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1614, 0
  %1616 = load ptr, ptr %184, align 8
  %1617 = insertvalue { ptr, ptr, ptr, i32 } %1615, ptr %1616, 1
  %1618 = load ptr, ptr %183, align 8
  %1619 = insertvalue { ptr, ptr, ptr, i32 } %1617, ptr %1618, 2
  %1620 = load i32, ptr %182, align 4
  %1621 = insertvalue { ptr, ptr, ptr, i32 } %1619, i32 %1620, 3
  %1622 = getelementptr [3 x ptr], ptr %189, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1622, align 8
  %1623 = getelementptr [3 x ptr], ptr %189, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %1623, align 8
  %1624 = getelementptr [3 x ptr], ptr %189, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1624, align 8
  %1625 = call ptr @llvm.invariant.start.p0(i64 9, ptr %189)
  %1626 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1614)
  %1627 = getelementptr ptr, ptr %1614, i32 %1620
  %1628 = getelementptr ptr, ptr %1627, i32 3
  %1629 = load ptr, ptr %1628, align 8
  %1630 = getelementptr { ptr, ptr, ptr }, ptr %190, i32 0, i32 0
  store ptr @i32_typ, ptr %1630, align 8
  %1631 = getelementptr { ptr, ptr, ptr }, ptr %190, i32 0, i32 1
  store ptr @f64_typ, ptr %1631, align 8
  %1632 = getelementptr { ptr, ptr, ptr }, ptr %190, i32 0, i32 2
  store ptr @i32_typ, ptr %1632, align 8
  %1633 = call ptr @behavior_wrapper(ptr %1629, { ptr, ptr, ptr, i32 } %1621, ptr %190)
  call void %1633({ ptr, ptr, ptr, i32 } %1621, { ptr, ptr, ptr, i32 } %1621, ptr %189, i32 %1611, double %1612, i32 %1613) #17
  %1634 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 0
  %1635 = load ptr, ptr %185, align 8
  store ptr %1635, ptr %1634, align 8
  %1636 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 1
  %1637 = load ptr, ptr %184, align 8
  store ptr %1637, ptr %1636, align 8
  %1638 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 2
  %1639 = load ptr, ptr %183, align 8
  store ptr %1639, ptr %1638, align 8
  %1640 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 3
  %1641 = load i32, ptr %182, align 4
  store i32 %1641, ptr %1640, align 4
  call void @set_offset(ptr %191, ptr @Animal)
  %1642 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 0
  %1643 = load ptr, ptr %1634, align 8
  store ptr %1643, ptr %1642, align 8
  %1644 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 1
  %1645 = load ptr, ptr %1636, align 8
  store ptr %1645, ptr %1644, align 8
  %1646 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 2
  %1647 = load ptr, ptr %1638, align 8
  store ptr %1647, ptr %1646, align 8
  %1648 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 3
  %1649 = load i32, ptr %1640, align 4
  store i32 %1649, ptr %1648, align 4
  %1650 = getelementptr { ptr, i160 }, ptr %192, i32 0, i32 0
  %1651 = load ptr, ptr %1650, align 8
  store ptr %1651, ptr %177, align 8
  %1652 = getelementptr { ptr, i160 }, ptr %192, i32 0, i32 1
  %1653 = load i160, ptr %1652, align 4
  store i160 %1653, ptr %176, align 4
  br label %1654

1654:                                             ; preds = %._crit_edge1, %1604
  %1655 = load ptr, ptr %177, align 8
  store ptr %1655, ptr %165, align 8
  %1656 = load i160, ptr %176, align 4
  store i160 %1656, ptr %164, align 4
  br label %1657

1657:                                             ; preds = %._crit_edge, %1654
  %.reload61 = load i1, ptr %.reg2mem60, align 1
  br i1 %.reload61, label %._crit_edge2, label %1658

._crit_edge2:                                     ; preds = %1657
  br label %1577

1658:                                             ; preds = %1657
  %1659 = load ptr, ptr %165, align 8
  %1660 = ptrtoint ptr %1659 to i64
  %1661 = icmp eq i64 %1660, ptrtoint (ptr @i32_typ to i64)
  store i1 %1661, ptr %193, align 1
  %1662 = load i1, ptr %193, align 1
  br i1 %1662, label %1663, label %._crit_edge3

._crit_edge3:                                     ; preds = %1658
  br label %1679

1663:                                             ; preds = %1658
  %1664 = load i32, ptr %164, align 4
  store i32 %1664, ptr %194, align 4
  %1665 = load i32, ptr %194, align 4
  store i32 %1665, ptr %195, align 4
  store ptr @i32_typ, ptr %196, align 8
  %1666 = load ptr, ptr %196, align 8
  %1667 = insertvalue { ptr, i160 } undef, ptr %1666, 0
  %1668 = load i160, ptr %195, align 4
  %1669 = insertvalue { ptr, i160 } %1667, i160 %1668, 1
  %1670 = getelementptr [1 x ptr], ptr %197, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1670, align 8
  %1671 = call ptr @llvm.invariant.start.p0(i64 1, ptr %197)
  %1672 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1673 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1674 = getelementptr { ptr }, ptr %198, i32 0, i32 0
  store ptr %1666, ptr %1674, align 8
  %1675 = call ptr @class_behavior_wrapper(ptr %1673, ptr %198)
  call void %1675(ptr %197, { ptr, i160 } %1669) #17
  %1676 = load i32, ptr %194, align 4
  store i32 %1676, ptr %199, align 4
  store ptr @i32_typ, ptr %200, align 8
  %1677 = load ptr, ptr %200, align 8
  store ptr %1677, ptr %165, align 8
  %1678 = load i160, ptr %199, align 4
  store i160 %1678, ptr %164, align 4
  br label %1679

1679:                                             ; preds = %._crit_edge3, %1663
  %1680 = load ptr, ptr %165, align 8
  %1681 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1680, i32 0, i32 0, i32 1
  %1682 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1680, i32 0, i32 0, i32 2
  %1683 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1680, i32 0, i32 1, i32 0
  %1684 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1680, i32 0, i32 1, i32 1
  %1685 = load i64, ptr %1681, align 4
  %1686 = load i64, ptr %1682, align 4
  %1687 = load ptr, ptr %1683, align 8
  %1688 = load ptr, ptr %1684, align 8
  %1689 = load i64, ptr @Animal, align 4
  %1690 = call i1 @subtype_test_wrapper(ptr %1687, i64 %1686, i64 %1685, i64 %1689, i64 ptrtoint (ptr @Animal to i64), ptr %1688)
  store i1 %1690, ptr %201, align 1
  %1691 = load i1, ptr %201, align 1
  br i1 %1691, label %1692, label %._crit_edge4

._crit_edge4:                                     ; preds = %1679
  br label %1711

1692:                                             ; preds = %1679
  %1693 = getelementptr { ptr, i160 }, ptr %202, i32 0, i32 0
  %1694 = load ptr, ptr %165, align 8
  store ptr %1694, ptr %1693, align 8
  %1695 = getelementptr { ptr, i160 }, ptr %202, i32 0, i32 1
  %1696 = load i160, ptr %164, align 4
  store i160 %1696, ptr %1695, align 4
  call void @set_offset(ptr %202, ptr @Animal)
  %1697 = getelementptr { ptr, ptr, ptr, i32 }, ptr %202, i32 0, i32 0
  %1698 = load ptr, ptr %1697, align 8
  %1699 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1698, 0
  %1700 = getelementptr { ptr, ptr, ptr, i32 }, ptr %202, i32 0, i32 1
  %1701 = load ptr, ptr %1700, align 8
  %1702 = insertvalue { ptr, ptr, ptr, i32 } %1699, ptr %1701, 1
  %1703 = getelementptr { ptr, ptr, ptr, i32 }, ptr %202, i32 0, i32 2
  %1704 = load ptr, ptr %1703, align 8
  %1705 = insertvalue { ptr, ptr, ptr, i32 } %1702, ptr %1704, 2
  %1706 = getelementptr { ptr, ptr, ptr, i32 }, ptr %202, i32 0, i32 3
  %1707 = load i32, ptr %1706, align 4
  %1708 = insertvalue { ptr, ptr, ptr, i32 } %1705, i32 %1707, 3
  call void @make_em_speak({ ptr, ptr, ptr, i32 } %1708)
  %1709 = load ptr, ptr %1693, align 8
  store ptr %1709, ptr %165, align 8
  %1710 = load i160, ptr %1695, align 4
  store i160 %1710, ptr %164, align 4
  br label %1711

1711:                                             ; preds = %._crit_edge4, %1692
  %.reload79 = load ptr, ptr %.reg2mem78, align 8
  %1712 = load ptr, ptr %.reload79, align 8
  %1713 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1712, 0
  %.reload74 = load ptr, ptr %.reg2mem73, align 8
  %1714 = load ptr, ptr %.reload74, align 8
  %1715 = insertvalue { ptr, ptr, ptr, i32 } %1713, ptr %1714, 1
  %.reload69 = load ptr, ptr %.reg2mem68, align 8
  %1716 = load ptr, ptr %.reload69, align 8
  %1717 = insertvalue { ptr, ptr, ptr, i32 } %1715, ptr %1716, 2
  %.reload64 = load ptr, ptr %.reg2mem63, align 8
  %1718 = load i32, ptr %.reload64, align 4
  %1719 = insertvalue { ptr, ptr, ptr, i32 } %1717, i32 %1718, 3
  %1720 = call ptr @llvm.invariant.start.p0(i64 0, ptr %203)
  %1721 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1712)
  %1722 = getelementptr ptr, ptr %1712, i32 %1718
  %1723 = getelementptr ptr, ptr %1722, i32 5
  %1724 = load ptr, ptr %1723, align 8
  %1725 = call ptr @behavior_wrapper(ptr %1724, { ptr, ptr, ptr, i32 } %1719, ptr %204)
  call void %1725({ ptr, ptr, ptr, i32 } %1719, { ptr, ptr, ptr, i32 } %1719, ptr %203) #17
  store i32 0, ptr %205, align 4
  store ptr @ListNode, ptr %206, align 8
  %1726 = load ptr, ptr %206, align 8
  %1727 = getelementptr ptr, ptr %1726, i32 6
  %1728 = load ptr, ptr %1727, align 8
  %1729 = call { i64, i64 } @size_wrapper(ptr %1728, ptr %206)
  %1730 = extractvalue { i64, i64 } %1729, 0
  %1731 = call ptr @bump_malloc(i64 %1730)
  store ptr @ListNode, ptr %210, align 8
  store ptr %1731, ptr %209, align 8
  store i32 10, ptr %207, align 4
  store i32 0, ptr %211, align 4
  %1732 = load i32, ptr %211, align 4
  %1733 = load ptr, ptr %210, align 8
  %1734 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1733, 0
  %1735 = load ptr, ptr %209, align 8
  %1736 = insertvalue { ptr, ptr, ptr, i32 } %1734, ptr %1735, 1
  %1737 = load ptr, ptr %208, align 8
  %1738 = insertvalue { ptr, ptr, ptr, i32 } %1736, ptr %1737, 2
  %1739 = load i32, ptr %207, align 4
  %1740 = insertvalue { ptr, ptr, ptr, i32 } %1738, i32 %1739, 3
  %1741 = getelementptr [1 x ptr], ptr %212, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1741, align 8
  %1742 = call ptr @llvm.invariant.start.p0(i64 1, ptr %212)
  %1743 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1733)
  %1744 = getelementptr ptr, ptr %1733, i32 %1739
  %1745 = getelementptr ptr, ptr %1744, i32 2
  %1746 = load ptr, ptr %1745, align 8
  %1747 = getelementptr { ptr }, ptr %213, i32 0, i32 0
  store ptr @i32_typ, ptr %1747, align 8
  %1748 = call ptr @behavior_wrapper(ptr %1746, { ptr, ptr, ptr, i32 } %1740, ptr %213)
  call void %1748({ ptr, ptr, ptr, i32 } %1740, { ptr, ptr, ptr, i32 } %1740, ptr %212, i32 %1732) #17
  %1749 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 0
  %1750 = load ptr, ptr %210, align 8
  store ptr %1750, ptr %1749, align 8
  %1751 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 1
  %1752 = load ptr, ptr %209, align 8
  store ptr %1752, ptr %1751, align 8
  %1753 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 2
  %1754 = load ptr, ptr %208, align 8
  store ptr %1754, ptr %1753, align 8
  %1755 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 3
  %1756 = load i32, ptr %207, align 4
  store i32 %1756, ptr %1755, align 4
  call void @set_offset(ptr %214, ptr @ListNode)
  %1757 = load ptr, ptr %1749, align 8
  store ptr %1757, ptr %218, align 8
  %1758 = load ptr, ptr %1751, align 8
  store ptr %1758, ptr %217, align 8
  %1759 = load ptr, ptr %1753, align 8
  store ptr %1759, ptr %216, align 8
  %1760 = load i32, ptr %1755, align 4
  store i32 %1760, ptr %215, align 4
  %1761 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 0
  %1762 = load ptr, ptr %218, align 8
  store ptr %1762, ptr %1761, align 8
  %1763 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %1764 = load ptr, ptr %217, align 8
  store ptr %1764, ptr %1763, align 8
  %1765 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 2
  %1766 = load ptr, ptr %216, align 8
  store ptr %1766, ptr %1765, align 8
  %1767 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  %1768 = load i32, ptr %215, align 4
  store i32 %1768, ptr %1767, align 4
  call void @set_offset(ptr %219, ptr @ListNode)
  %1769 = load ptr, ptr %1761, align 8
  store ptr %1769, ptr %223, align 8
  %1770 = load ptr, ptr %1763, align 8
  store ptr %1770, ptr %222, align 8
  %1771 = load ptr, ptr %1765, align 8
  store ptr %1771, ptr %221, align 8
  %1772 = load i32, ptr %1767, align 4
  store i32 %1772, ptr %220, align 4
  store i32 1, ptr %224, align 4
  store i32 10, ptr %225, align 4
  store ptr @Range, ptr %226, align 8
  %1773 = load ptr, ptr %226, align 8
  %1774 = getelementptr ptr, ptr %1773, i32 6
  %1775 = load ptr, ptr %1774, align 8
  %1776 = call { i64, i64 } @size_wrapper(ptr %1775, ptr %226)
  %1777 = extractvalue { i64, i64 } %1776, 0
  %1778 = call ptr @bump_malloc(i64 %1777)
  store ptr @Range, ptr %230, align 8
  store ptr %1778, ptr %229, align 8
  store i32 10, ptr %227, align 4
  store i32 1, ptr %231, align 4
  store i32 10, ptr %232, align 4
  %1779 = load i32, ptr %231, align 4
  %1780 = load i32, ptr %232, align 4
  %1781 = load ptr, ptr %230, align 8
  %1782 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1781, 0
  %1783 = load ptr, ptr %229, align 8
  %1784 = insertvalue { ptr, ptr, ptr, i32 } %1782, ptr %1783, 1
  %1785 = load ptr, ptr %228, align 8
  %1786 = insertvalue { ptr, ptr, ptr, i32 } %1784, ptr %1785, 2
  %1787 = load i32, ptr %227, align 4
  %1788 = insertvalue { ptr, ptr, ptr, i32 } %1786, i32 %1787, 3
  %1789 = getelementptr [2 x ptr], ptr %233, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1789, align 8
  %1790 = getelementptr [2 x ptr], ptr %233, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1790, align 8
  %1791 = call ptr @llvm.invariant.start.p0(i64 4, ptr %233)
  %1792 = call ptr @llvm.invariant.start.p0(i64 440, ptr %1781)
  %1793 = getelementptr ptr, ptr %1781, i32 %1787
  %1794 = getelementptr ptr, ptr %1793, i32 5
  %1795 = load ptr, ptr %1794, align 8
  %1796 = getelementptr { ptr, ptr }, ptr %234, i32 0, i32 0
  store ptr @i32_typ, ptr %1796, align 8
  %1797 = getelementptr { ptr, ptr }, ptr %234, i32 0, i32 1
  store ptr @i32_typ, ptr %1797, align 8
  %1798 = call ptr @behavior_wrapper(ptr %1795, { ptr, ptr, ptr, i32 } %1788, ptr %234)
  call void %1798({ ptr, ptr, ptr, i32 } %1788, { ptr, ptr, ptr, i32 } %1788, ptr %233, i32 %1779, i32 %1780) #17
  %1799 = load ptr, ptr %230, align 8
  %1800 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1799, 0
  %1801 = load ptr, ptr %229, align 8
  %1802 = insertvalue { ptr, ptr, ptr, i32 } %1800, ptr %1801, 1
  %1803 = load ptr, ptr %228, align 8
  %1804 = insertvalue { ptr, ptr, ptr, i32 } %1802, ptr %1803, 2
  %1805 = load i32, ptr %227, align 4
  %1806 = insertvalue { ptr, ptr, ptr, i32 } %1804, i32 %1805, 3
  %1807 = call ptr @llvm.invariant.start.p0(i64 0, ptr %235)
  %1808 = call ptr @llvm.invariant.start.p0(i64 440, ptr %1799)
  %1809 = getelementptr ptr, ptr %1799, i32 %1805
  %1810 = getelementptr ptr, ptr %1809, i32 7
  %1811 = load ptr, ptr %1810, align 8
  %1812 = call ptr @behavior_wrapper(ptr %1811, { ptr, ptr, ptr, i32 } %1806, ptr %236)
  %1813 = call { ptr, ptr, ptr, i32 } %1812({ ptr, ptr, ptr, i32 } %1806, { ptr, ptr, ptr, i32 } %1806, ptr %235) #17
  store { ptr, ptr, ptr, i32 } %1813, ptr %237, align 8
  %1814 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 0
  %1815 = getelementptr { ptr, ptr, ptr, i32 }, ptr %238, i32 0, i32 0
  %1816 = load ptr, ptr %1814, align 8
  store ptr %1816, ptr %1815, align 8
  %1817 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 1
  %1818 = getelementptr { ptr, ptr, ptr, i32 }, ptr %238, i32 0, i32 1
  %1819 = load ptr, ptr %1817, align 8
  store ptr %1819, ptr %1818, align 8
  %1820 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 2
  %1821 = getelementptr { ptr, ptr, ptr, i32 }, ptr %238, i32 0, i32 2
  %1822 = load ptr, ptr %1820, align 8
  store ptr %1822, ptr %1821, align 8
  %1823 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 3
  %1824 = getelementptr { ptr, ptr, ptr, i32 }, ptr %238, i32 0, i32 3
  %1825 = load i32, ptr %1823, align 4
  store i32 %1825, ptr %1824, align 4
  call void @set_offset(ptr %238, ptr @RangeIterator)
  %1826 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 0
  %1827 = load ptr, ptr %1815, align 8
  store ptr %1827, ptr %1826, align 8
  %1828 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 1
  %1829 = load ptr, ptr %1818, align 8
  store ptr %1829, ptr %1828, align 8
  %1830 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 2
  %1831 = load ptr, ptr %1821, align 8
  store ptr %1831, ptr %1830, align 8
  %1832 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 3
  %1833 = load i32, ptr %1824, align 4
  store i32 %1833, ptr %1832, align 4
  call void @set_offset(ptr %239, ptr @RangeIterator)
  %1834 = load ptr, ptr %1826, align 8
  store ptr %1834, ptr %243, align 8
  %1835 = load ptr, ptr %1828, align 8
  store ptr %1835, ptr %242, align 8
  %1836 = load ptr, ptr %1830, align 8
  store ptr %1836, ptr %241, align 8
  %1837 = load i32, ptr %1832, align 4
  store i32 %1837, ptr %240, align 4
  %1838 = getelementptr { ptr, i32 }, ptr %246, i32 0, i32 0
  store ptr %1838, ptr %.reg2mem58, align 8
  %1839 = getelementptr { ptr, i32 }, ptr %246, i32 0, i32 1
  store ptr %1839, ptr %.reg2mem56, align 8
  br label %1840

1840:                                             ; preds = %._crit_edge6, %1711
  %1841 = load ptr, ptr %243, align 8
  %1842 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1841, 0
  %1843 = load ptr, ptr %242, align 8
  %1844 = insertvalue { ptr, ptr, ptr, i32 } %1842, ptr %1843, 1
  %1845 = load ptr, ptr %241, align 8
  %1846 = insertvalue { ptr, ptr, ptr, i32 } %1844, ptr %1845, 2
  %1847 = load i32, ptr %240, align 4
  %1848 = insertvalue { ptr, ptr, ptr, i32 } %1846, i32 %1847, 3
  %1849 = call ptr @llvm.invariant.start.p0(i64 0, ptr %244)
  %1850 = call ptr @llvm.invariant.start.p0(i64 88, ptr %1841)
  %1851 = getelementptr ptr, ptr %1841, i32 %1847
  %1852 = getelementptr ptr, ptr %1851, i32 5
  %1853 = load ptr, ptr %1852, align 8
  %1854 = call ptr @behavior_wrapper(ptr %1853, { ptr, ptr, ptr, i32 } %1848, ptr %245)
  %1855 = call { ptr, i160 } %1854({ ptr, ptr, ptr, i32 } %1848, { ptr, ptr, ptr, i32 } %1848, ptr %244) #17
  store { ptr, i160 } %1855, ptr %246, align 8
  %.reload59 = load ptr, ptr %.reg2mem58, align 8
  %1856 = load ptr, ptr %.reload59, align 8
  store ptr %1856, ptr %247, align 8
  %.reload57 = load ptr, ptr %.reg2mem56, align 8
  %1857 = load i32, ptr %.reload57, align 4
  store i32 %1857, ptr %248, align 4
  %1858 = load ptr, ptr %247, align 8
  %1859 = ptrtoint ptr %1858 to i64
  %1860 = icmp eq i64 %1859, ptrtoint (ptr @nil_typ to i64)
  %1861 = icmp eq i64 %1859, 0
  %1862 = or i1 %1860, %1861
  %1863 = icmp eq i1 %1862, false
  store i1 %1863, ptr %249, align 1
  %1864 = load i1, ptr %249, align 1
  store i1 %1864, ptr %.reg2mem53, align 1
  %.reload55 = load i1, ptr %.reg2mem53, align 1
  br i1 %.reload55, label %1865, label %._crit_edge5

._crit_edge5:                                     ; preds = %1840
  br label %1948

1865:                                             ; preds = %1840
  %1866 = load i32, ptr %248, align 4
  store i32 %1866, ptr %250, align 4
  store ptr @ListNode, ptr %251, align 8
  %1867 = load ptr, ptr %251, align 8
  %1868 = getelementptr ptr, ptr %1867, i32 6
  %1869 = load ptr, ptr %1868, align 8
  %1870 = call { i64, i64 } @size_wrapper(ptr %1869, ptr %251)
  %1871 = extractvalue { i64, i64 } %1870, 0
  %1872 = call ptr @bump_malloc(i64 %1871)
  store ptr @ListNode, ptr %255, align 8
  store ptr %1872, ptr %254, align 8
  store i32 10, ptr %252, align 4
  %1873 = load i32, ptr %250, align 4
  %1874 = load ptr, ptr %255, align 8
  %1875 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1874, 0
  %1876 = load ptr, ptr %254, align 8
  %1877 = insertvalue { ptr, ptr, ptr, i32 } %1875, ptr %1876, 1
  %1878 = load ptr, ptr %253, align 8
  %1879 = insertvalue { ptr, ptr, ptr, i32 } %1877, ptr %1878, 2
  %1880 = load i32, ptr %252, align 4
  %1881 = insertvalue { ptr, ptr, ptr, i32 } %1879, i32 %1880, 3
  %1882 = getelementptr [1 x ptr], ptr %256, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1882, align 8
  %1883 = call ptr @llvm.invariant.start.p0(i64 1, ptr %256)
  %1884 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1874)
  %1885 = getelementptr ptr, ptr %1874, i32 %1880
  %1886 = getelementptr ptr, ptr %1885, i32 2
  %1887 = load ptr, ptr %1886, align 8
  %1888 = getelementptr { ptr }, ptr %257, i32 0, i32 0
  store ptr @i32_typ, ptr %1888, align 8
  %1889 = call ptr @behavior_wrapper(ptr %1887, { ptr, ptr, ptr, i32 } %1881, ptr %257)
  call void %1889({ ptr, ptr, ptr, i32 } %1881, { ptr, ptr, ptr, i32 } %1881, ptr %256, i32 %1873) #17
  %1890 = getelementptr { ptr, ptr, ptr, i32 }, ptr %258, i32 0, i32 0
  %1891 = load ptr, ptr %255, align 8
  store ptr %1891, ptr %1890, align 8
  %1892 = getelementptr { ptr, ptr, ptr, i32 }, ptr %258, i32 0, i32 1
  %1893 = load ptr, ptr %254, align 8
  store ptr %1893, ptr %1892, align 8
  %1894 = getelementptr { ptr, ptr, ptr, i32 }, ptr %258, i32 0, i32 2
  %1895 = load ptr, ptr %253, align 8
  store ptr %1895, ptr %1894, align 8
  %1896 = getelementptr { ptr, ptr, ptr, i32 }, ptr %258, i32 0, i32 3
  %1897 = load i32, ptr %252, align 4
  store i32 %1897, ptr %1896, align 4
  call void @set_offset(ptr %258, ptr @ListNode)
  %1898 = load ptr, ptr %1890, align 8
  %1899 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1898, 0
  %1900 = load ptr, ptr %1892, align 8
  %1901 = insertvalue { ptr, ptr, ptr, i32 } %1899, ptr %1900, 1
  %1902 = load ptr, ptr %1894, align 8
  %1903 = insertvalue { ptr, ptr, ptr, i32 } %1901, ptr %1902, 2
  %1904 = load i32, ptr %1896, align 4
  %1905 = insertvalue { ptr, ptr, ptr, i32 } %1903, i32 %1904, 3
  %1906 = load ptr, ptr %223, align 8
  %1907 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1906, 0
  %1908 = load ptr, ptr %222, align 8
  %1909 = insertvalue { ptr, ptr, ptr, i32 } %1907, ptr %1908, 1
  %1910 = load ptr, ptr %221, align 8
  %1911 = insertvalue { ptr, ptr, ptr, i32 } %1909, ptr %1910, 2
  %1912 = load i32, ptr %220, align 4
  %1913 = insertvalue { ptr, ptr, ptr, i32 } %1911, i32 %1912, 3
  %1914 = getelementptr [1 x ptr], ptr %259, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %1914, align 8
  %1915 = call ptr @llvm.invariant.start.p0(i64 1, ptr %259)
  %1916 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1906)
  %1917 = getelementptr ptr, ptr %1906, i32 %1912
  %1918 = getelementptr ptr, ptr %1917, i32 3
  %1919 = load ptr, ptr %1918, align 8
  %1920 = getelementptr { ptr }, ptr %260, i32 0, i32 0
  store ptr %1898, ptr %1920, align 8
  %1921 = call ptr @behavior_wrapper(ptr %1919, { ptr, ptr, ptr, i32 } %1913, ptr %260)
  %1922 = call { ptr, ptr, ptr, i32 } %1921({ ptr, ptr, ptr, i32 } %1913, { ptr, ptr, ptr, i32 } %1913, ptr %259, { ptr, ptr, ptr, i32 } %1905) #17
  store { ptr, ptr, ptr, i32 } %1922, ptr %261, align 8
  %1923 = getelementptr { ptr, ptr, ptr, i32 }, ptr %261, i32 0, i32 0
  %1924 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 0
  %1925 = load ptr, ptr %1923, align 8
  store ptr %1925, ptr %1924, align 8
  %1926 = getelementptr { ptr, ptr, ptr, i32 }, ptr %261, i32 0, i32 1
  %1927 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 1
  %1928 = load ptr, ptr %1926, align 8
  store ptr %1928, ptr %1927, align 8
  %1929 = getelementptr { ptr, ptr, ptr, i32 }, ptr %261, i32 0, i32 2
  %1930 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 2
  %1931 = load ptr, ptr %1929, align 8
  store ptr %1931, ptr %1930, align 8
  %1932 = getelementptr { ptr, ptr, ptr, i32 }, ptr %261, i32 0, i32 3
  %1933 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 3
  %1934 = load i32, ptr %1932, align 4
  store i32 %1934, ptr %1933, align 4
  call void @set_offset(ptr %262, ptr @ListNode)
  %1935 = getelementptr { ptr, ptr, ptr, i32 }, ptr %263, i32 0, i32 0
  %1936 = load ptr, ptr %1924, align 8
  store ptr %1936, ptr %1935, align 8
  %1937 = getelementptr { ptr, ptr, ptr, i32 }, ptr %263, i32 0, i32 1
  %1938 = load ptr, ptr %1927, align 8
  store ptr %1938, ptr %1937, align 8
  %1939 = getelementptr { ptr, ptr, ptr, i32 }, ptr %263, i32 0, i32 2
  %1940 = load ptr, ptr %1930, align 8
  store ptr %1940, ptr %1939, align 8
  %1941 = getelementptr { ptr, ptr, ptr, i32 }, ptr %263, i32 0, i32 3
  %1942 = load i32, ptr %1933, align 4
  store i32 %1942, ptr %1941, align 4
  call void @set_offset(ptr %263, ptr @ListNode)
  %1943 = load ptr, ptr %1935, align 8
  store ptr %1943, ptr %223, align 8
  %1944 = load ptr, ptr %1937, align 8
  store ptr %1944, ptr %222, align 8
  %1945 = load ptr, ptr %1939, align 8
  store ptr %1945, ptr %221, align 8
  %1946 = load i32, ptr %1941, align 4
  store i32 %1946, ptr %220, align 4
  %1947 = load i32, ptr %250, align 4
  store i32 %1947, ptr %247, align 4
  br label %1948

1948:                                             ; preds = %._crit_edge5, %1865
  %.reload54 = load i1, ptr %.reg2mem53, align 1
  br i1 %.reload54, label %._crit_edge6, label %1949

._crit_edge6:                                     ; preds = %1948
  br label %1840

1949:                                             ; preds = %1948
  %1950 = load ptr, ptr %218, align 8
  %1951 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1950, 0
  %1952 = load ptr, ptr %217, align 8
  %1953 = insertvalue { ptr, ptr, ptr, i32 } %1951, ptr %1952, 1
  %1954 = load ptr, ptr %216, align 8
  %1955 = insertvalue { ptr, ptr, ptr, i32 } %1953, ptr %1954, 2
  %1956 = load i32, ptr %215, align 4
  %1957 = insertvalue { ptr, ptr, ptr, i32 } %1955, i32 %1956, 3
  %1958 = call ptr @llvm.invariant.start.p0(i64 0, ptr %264)
  %1959 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1950)
  %1960 = getelementptr ptr, ptr %1950, i32 %1956
  %1961 = getelementptr ptr, ptr %1960, i32 5
  %1962 = load ptr, ptr %1961, align 8
  %1963 = call ptr @behavior_wrapper(ptr %1962, { ptr, ptr, ptr, i32 } %1957, ptr %265)
  %1964 = call i32 %1963({ ptr, ptr, ptr, i32 } %1957, { ptr, ptr, ptr, i32 } %1957, ptr %264) #17
  store i32 %1964, ptr %266, align 4
  %1965 = load i32, ptr %266, align 4
  store i32 %1965, ptr %267, align 4
  store ptr @i32_typ, ptr %268, align 8
  %1966 = load ptr, ptr %268, align 8
  %1967 = insertvalue { ptr, i160 } undef, ptr %1966, 0
  %1968 = load i160, ptr %267, align 4
  %1969 = insertvalue { ptr, i160 } %1967, i160 %1968, 1
  %1970 = getelementptr [1 x ptr], ptr %269, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1970, align 8
  %1971 = call ptr @llvm.invariant.start.p0(i64 1, ptr %269)
  %1972 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1973 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1974 = getelementptr { ptr }, ptr %270, i32 0, i32 0
  store ptr %1966, ptr %1974, align 8
  %1975 = call ptr @class_behavior_wrapper(ptr %1973, ptr %270)
  call void %1975(ptr %269, { ptr, i160 } %1969) #17
  %1976 = load ptr, ptr %218, align 8
  %1977 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1976, 0
  %1978 = load ptr, ptr %217, align 8
  %1979 = insertvalue { ptr, ptr, ptr, i32 } %1977, ptr %1978, 1
  %1980 = load ptr, ptr %216, align 8
  %1981 = insertvalue { ptr, ptr, ptr, i32 } %1979, ptr %1980, 2
  %1982 = load i32, ptr %215, align 4
  %1983 = insertvalue { ptr, ptr, ptr, i32 } %1981, i32 %1982, 3
  %1984 = call ptr @llvm.invariant.start.p0(i64 0, ptr %271)
  %1985 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1976)
  %1986 = getelementptr ptr, ptr %1976, i32 %1982
  %1987 = getelementptr ptr, ptr %1986, i32 6
  %1988 = load ptr, ptr %1987, align 8
  %1989 = call ptr @behavior_wrapper(ptr %1988, { ptr, ptr, ptr, i32 } %1983, ptr %272)
  %1990 = call { ptr, ptr, ptr, i32 } %1989({ ptr, ptr, ptr, i32 } %1983, { ptr, ptr, ptr, i32 } %1983, ptr %271) #17
  store { ptr, ptr, ptr, i32 } %1990, ptr %273, align 8
  %1991 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 0
  %1992 = getelementptr { ptr, ptr, ptr, i32 }, ptr %274, i32 0, i32 0
  %1993 = load ptr, ptr %1991, align 8
  store ptr %1993, ptr %1992, align 8
  %1994 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 1
  %1995 = getelementptr { ptr, ptr, ptr, i32 }, ptr %274, i32 0, i32 1
  %1996 = load ptr, ptr %1994, align 8
  store ptr %1996, ptr %1995, align 8
  %1997 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 2
  %1998 = getelementptr { ptr, ptr, ptr, i32 }, ptr %274, i32 0, i32 2
  %1999 = load ptr, ptr %1997, align 8
  store ptr %1999, ptr %1998, align 8
  %2000 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 3
  %2001 = getelementptr { ptr, ptr, ptr, i32 }, ptr %274, i32 0, i32 3
  %2002 = load i32, ptr %2000, align 4
  store i32 %2002, ptr %2001, align 4
  call void @set_offset(ptr %274, ptr @ListIterator)
  %2003 = getelementptr { ptr, ptr, ptr, i32 }, ptr %275, i32 0, i32 0
  %2004 = load ptr, ptr %1992, align 8
  store ptr %2004, ptr %2003, align 8
  %2005 = getelementptr { ptr, ptr, ptr, i32 }, ptr %275, i32 0, i32 1
  %2006 = load ptr, ptr %1995, align 8
  store ptr %2006, ptr %2005, align 8
  %2007 = getelementptr { ptr, ptr, ptr, i32 }, ptr %275, i32 0, i32 2
  %2008 = load ptr, ptr %1998, align 8
  store ptr %2008, ptr %2007, align 8
  %2009 = getelementptr { ptr, ptr, ptr, i32 }, ptr %275, i32 0, i32 3
  %2010 = load i32, ptr %2001, align 4
  store i32 %2010, ptr %2009, align 4
  call void @set_offset(ptr %275, ptr @ListIterator)
  %2011 = load ptr, ptr %2003, align 8
  store ptr %2011, ptr %279, align 8
  %2012 = load ptr, ptr %2005, align 8
  store ptr %2012, ptr %278, align 8
  %2013 = load ptr, ptr %2007, align 8
  store ptr %2013, ptr %277, align 8
  %2014 = load i32, ptr %2009, align 4
  store i32 %2014, ptr %276, align 4
  br label %2015

2015:                                             ; preds = %._crit_edge8, %1949
  %2016 = load ptr, ptr %279, align 8
  %2017 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2016, 0
  %2018 = load ptr, ptr %278, align 8
  %2019 = insertvalue { ptr, ptr, ptr, i32 } %2017, ptr %2018, 1
  %2020 = load ptr, ptr %277, align 8
  %2021 = insertvalue { ptr, ptr, ptr, i32 } %2019, ptr %2020, 2
  %2022 = load i32, ptr %276, align 4
  %2023 = insertvalue { ptr, ptr, ptr, i32 } %2021, i32 %2022, 3
  %2024 = call ptr @llvm.invariant.start.p0(i64 0, ptr %280)
  %2025 = call ptr @llvm.invariant.start.p0(i64 40, ptr %2016)
  %2026 = getelementptr ptr, ptr %2016, i32 %2022
  %2027 = getelementptr ptr, ptr %2026, i32 2
  %2028 = load ptr, ptr %2027, align 8
  %2029 = call ptr @behavior_wrapper(ptr %2028, { ptr, ptr, ptr, i32 } %2023, ptr %281)
  %2030 = call { ptr, i160 } %2029({ ptr, ptr, ptr, i32 } %2023, { ptr, ptr, ptr, i32 } %2023, ptr %280) #17
  store { ptr, i160 } %2030, ptr %282, align 8
  %2031 = load ptr, ptr %282, align 8
  %2032 = ptrtoint ptr %2031 to i64
  %2033 = icmp eq i64 %2032, ptrtoint (ptr @nil_typ to i64)
  %2034 = icmp eq i64 %2032, 0
  %2035 = or i1 %2033, %2034
  %2036 = icmp eq i1 %2035, false
  store i1 %2036, ptr %283, align 1
  %2037 = load i1, ptr %283, align 1
  store i1 %2037, ptr %.reg2mem50, align 1
  %.reload52 = load i1, ptr %.reg2mem50, align 1
  br i1 %.reload52, label %2038, label %._crit_edge7

._crit_edge7:                                     ; preds = %2015
  br label %2091

2038:                                             ; preds = %2015
  %2039 = getelementptr { ptr, i160 }, ptr %282, i32 0, i32 0
  %2040 = getelementptr { ptr, i160 }, ptr %284, i32 0, i32 0
  %2041 = load ptr, ptr %2039, align 8
  store ptr %2041, ptr %2040, align 8
  %2042 = getelementptr { ptr, i160 }, ptr %282, i32 0, i32 1
  %2043 = getelementptr { ptr, i160 }, ptr %284, i32 0, i32 1
  %2044 = load i160, ptr %2042, align 4
  store i160 %2044, ptr %2043, align 4
  call void @set_offset(ptr %284, ptr @ListNode)
  %2045 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 0
  %2046 = load ptr, ptr %2045, align 8
  %2047 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2046, 0
  %2048 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 1
  %2049 = load ptr, ptr %2048, align 8
  %2050 = insertvalue { ptr, ptr, ptr, i32 } %2047, ptr %2049, 1
  %2051 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 2
  %2052 = load ptr, ptr %2051, align 8
  %2053 = insertvalue { ptr, ptr, ptr, i32 } %2050, ptr %2052, 2
  %2054 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 3
  %2055 = load i32, ptr %2054, align 4
  %2056 = insertvalue { ptr, ptr, ptr, i32 } %2053, i32 %2055, 3
  %2057 = call ptr @llvm.invariant.start.p0(i64 0, ptr %285)
  %2058 = call ptr @llvm.invariant.start.p0(i64 96, ptr %2046)
  %2059 = getelementptr ptr, ptr %2046, i32 %2055
  %2060 = getelementptr ptr, ptr %2059, i32 5
  %2061 = load ptr, ptr %2060, align 8
  %2062 = call ptr @behavior_wrapper(ptr %2061, { ptr, ptr, ptr, i32 } %2056, ptr %286)
  %2063 = call i32 %2062({ ptr, ptr, ptr, i32 } %2056, { ptr, ptr, ptr, i32 } %2056, ptr %285) #17
  store i32 %2063, ptr %287, align 4
  %2064 = load i32, ptr %287, align 4
  store i32 %2064, ptr %288, align 4
  store ptr @i32_typ, ptr %289, align 8
  %2065 = load ptr, ptr %289, align 8
  %2066 = insertvalue { ptr, i160 } undef, ptr %2065, 0
  %2067 = load i160, ptr %288, align 4
  %2068 = insertvalue { ptr, i160 } %2066, i160 %2067, 1
  %2069 = getelementptr [1 x ptr], ptr %290, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2069, align 8
  %2070 = call ptr @llvm.invariant.start.p0(i64 1, ptr %290)
  %2071 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2072 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2073 = getelementptr { ptr }, ptr %291, i32 0, i32 0
  store ptr %2065, ptr %2073, align 8
  %2074 = call ptr @class_behavior_wrapper(ptr %2072, ptr %291)
  call void %2074(ptr %290, { ptr, i160 } %2068) #17
  %2075 = getelementptr { ptr, ptr, ptr, i32 }, ptr %292, i32 0, i32 0
  %2076 = load ptr, ptr %2045, align 8
  store ptr %2076, ptr %2075, align 8
  %2077 = getelementptr { ptr, ptr, ptr, i32 }, ptr %292, i32 0, i32 1
  %2078 = load ptr, ptr %2048, align 8
  store ptr %2078, ptr %2077, align 8
  %2079 = getelementptr { ptr, ptr, ptr, i32 }, ptr %292, i32 0, i32 2
  %2080 = load ptr, ptr %2051, align 8
  store ptr %2080, ptr %2079, align 8
  %2081 = getelementptr { ptr, ptr, ptr, i32 }, ptr %292, i32 0, i32 3
  %2082 = load i32, ptr %2054, align 4
  store i32 %2082, ptr %2081, align 4
  call void @set_offset(ptr %292, ptr @ListNode)
  %2083 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 0
  %2084 = load ptr, ptr %2075, align 8
  store ptr %2084, ptr %2083, align 8
  %2085 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 1
  %2086 = load ptr, ptr %2077, align 8
  store ptr %2086, ptr %2085, align 8
  %2087 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 2
  %2088 = load ptr, ptr %2079, align 8
  store ptr %2088, ptr %2087, align 8
  %2089 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 3
  %2090 = load i32, ptr %2081, align 4
  store i32 %2090, ptr %2089, align 4
  br label %2091

2091:                                             ; preds = %._crit_edge7, %2038
  %.reload51 = load i1, ptr %.reg2mem50, align 1
  br i1 %.reload51, label %._crit_edge8, label %2092

._crit_edge8:                                     ; preds = %2091
  br label %2015

2092:                                             ; preds = %2091
  store ptr @print88, ptr %293, align 8
  %2093 = load ptr, ptr %293, align 8
  %2094 = call ptr @coroutine_create(ptr %2093, ptr @coroutine_wgooowaeyq_passer)
  call void @coroutine_wgooowaeyq_buffer_filler(ptr %2094)
  store ptr %2094, ptr %294, align 8
  %2095 = getelementptr { ptr }, ptr %294, i32 0, i32 0
  %2096 = load ptr, ptr %2095, align 8
  store ptr %2096, ptr %295, align 8
  %2097 = load ptr, ptr %295, align 8
  call void @coroutine_call(ptr %2097)
  %2098 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %2097, i32 0, i32 4
  %2099 = load { ptr, i160 }, ptr %2098, align 8
  store { ptr, i160 } %2099, ptr %296, align 8
  store i32 89, ptr %297, align 4
  %2100 = load i32, ptr %297, align 4
  store i32 %2100, ptr %298, align 4
  store ptr @i32_typ, ptr %299, align 8
  %2101 = load ptr, ptr %299, align 8
  %2102 = insertvalue { ptr, i160 } undef, ptr %2101, 0
  %2103 = load i160, ptr %298, align 4
  %2104 = insertvalue { ptr, i160 } %2102, i160 %2103, 1
  %2105 = getelementptr [1 x ptr], ptr %300, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2105, align 8
  %2106 = call ptr @llvm.invariant.start.p0(i64 1, ptr %300)
  %2107 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2108 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2109 = getelementptr { ptr }, ptr %301, i32 0, i32 0
  store ptr %2101, ptr %2109, align 8
  %2110 = call ptr @class_behavior_wrapper(ptr %2108, ptr %301)
  call void %2110(ptr %300, { ptr, i160 } %2104) #17
  %2111 = load ptr, ptr %295, align 8
  call void @coroutine_call(ptr %2111)
  %2112 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %2111, i32 0, i32 4
  %2113 = load { ptr, i160 }, ptr %2112, align 8
  store { ptr, i160 } %2113, ptr %302, align 8
  store i32 1, ptr %303, align 4
  store i32 10, ptr %304, align 4
  store ptr @Range, ptr %305, align 8
  %2114 = load ptr, ptr %305, align 8
  %2115 = getelementptr ptr, ptr %2114, i32 6
  %2116 = load ptr, ptr %2115, align 8
  %2117 = call { i64, i64 } @size_wrapper(ptr %2116, ptr %305)
  %2118 = extractvalue { i64, i64 } %2117, 0
  %2119 = call ptr @bump_malloc(i64 %2118)
  store ptr @Range, ptr %309, align 8
  store ptr %2119, ptr %308, align 8
  store i32 10, ptr %306, align 4
  store i32 1, ptr %310, align 4
  store i32 10, ptr %311, align 4
  %2120 = load i32, ptr %310, align 4
  %2121 = load i32, ptr %311, align 4
  %2122 = load ptr, ptr %309, align 8
  %2123 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2122, 0
  %2124 = load ptr, ptr %308, align 8
  %2125 = insertvalue { ptr, ptr, ptr, i32 } %2123, ptr %2124, 1
  %2126 = load ptr, ptr %307, align 8
  %2127 = insertvalue { ptr, ptr, ptr, i32 } %2125, ptr %2126, 2
  %2128 = load i32, ptr %306, align 4
  %2129 = insertvalue { ptr, ptr, ptr, i32 } %2127, i32 %2128, 3
  %2130 = getelementptr [2 x ptr], ptr %312, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2130, align 8
  %2131 = getelementptr [2 x ptr], ptr %312, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2131, align 8
  %2132 = call ptr @llvm.invariant.start.p0(i64 4, ptr %312)
  %2133 = call ptr @llvm.invariant.start.p0(i64 440, ptr %2122)
  %2134 = getelementptr ptr, ptr %2122, i32 %2128
  %2135 = getelementptr ptr, ptr %2134, i32 5
  %2136 = load ptr, ptr %2135, align 8
  %2137 = getelementptr { ptr, ptr }, ptr %313, i32 0, i32 0
  store ptr @i32_typ, ptr %2137, align 8
  %2138 = getelementptr { ptr, ptr }, ptr %313, i32 0, i32 1
  store ptr @i32_typ, ptr %2138, align 8
  %2139 = call ptr @behavior_wrapper(ptr %2136, { ptr, ptr, ptr, i32 } %2129, ptr %313)
  call void %2139({ ptr, ptr, ptr, i32 } %2129, { ptr, ptr, ptr, i32 } %2129, ptr %312, i32 %2120, i32 %2121) #17
  %2140 = load ptr, ptr %309, align 8
  %2141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2140, 0
  %2142 = load ptr, ptr %308, align 8
  %2143 = insertvalue { ptr, ptr, ptr, i32 } %2141, ptr %2142, 1
  %2144 = load ptr, ptr %307, align 8
  %2145 = insertvalue { ptr, ptr, ptr, i32 } %2143, ptr %2144, 2
  %2146 = load i32, ptr %306, align 4
  %2147 = insertvalue { ptr, ptr, ptr, i32 } %2145, i32 %2146, 3
  %2148 = call ptr @llvm.invariant.start.p0(i64 0, ptr %314)
  %2149 = call ptr @llvm.invariant.start.p0(i64 440, ptr %2140)
  %2150 = getelementptr ptr, ptr %2140, i32 %2146
  %2151 = getelementptr ptr, ptr %2150, i32 7
  %2152 = load ptr, ptr %2151, align 8
  %2153 = call ptr @behavior_wrapper(ptr %2152, { ptr, ptr, ptr, i32 } %2147, ptr %315)
  %2154 = call { ptr, ptr, ptr, i32 } %2153({ ptr, ptr, ptr, i32 } %2147, { ptr, ptr, ptr, i32 } %2147, ptr %314) #17
  store { ptr, ptr, ptr, i32 } %2154, ptr %316, align 8
  %2155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %316, i32 0, i32 0
  %2156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %317, i32 0, i32 0
  %2157 = load ptr, ptr %2155, align 8
  store ptr %2157, ptr %2156, align 8
  %2158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %316, i32 0, i32 1
  %2159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %317, i32 0, i32 1
  %2160 = load ptr, ptr %2158, align 8
  store ptr %2160, ptr %2159, align 8
  %2161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %316, i32 0, i32 2
  %2162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %317, i32 0, i32 2
  %2163 = load ptr, ptr %2161, align 8
  store ptr %2163, ptr %2162, align 8
  %2164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %316, i32 0, i32 3
  %2165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %317, i32 0, i32 3
  %2166 = load i32, ptr %2164, align 4
  store i32 %2166, ptr %2165, align 4
  call void @set_offset(ptr %317, ptr @RangeIterator)
  %2167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %318, i32 0, i32 0
  %2168 = load ptr, ptr %2156, align 8
  store ptr %2168, ptr %2167, align 8
  %2169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %318, i32 0, i32 1
  %2170 = load ptr, ptr %2159, align 8
  store ptr %2170, ptr %2169, align 8
  %2171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %318, i32 0, i32 2
  %2172 = load ptr, ptr %2162, align 8
  store ptr %2172, ptr %2171, align 8
  %2173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %318, i32 0, i32 3
  %2174 = load i32, ptr %2165, align 4
  store i32 %2174, ptr %2173, align 4
  call void @set_offset(ptr %318, ptr @RangeIterator)
  %2175 = load ptr, ptr %2167, align 8
  store ptr %2175, ptr %322, align 8
  %2176 = load ptr, ptr %2169, align 8
  store ptr %2176, ptr %321, align 8
  %2177 = load ptr, ptr %2171, align 8
  store ptr %2177, ptr %320, align 8
  %2178 = load i32, ptr %2173, align 4
  store i32 %2178, ptr %319, align 4
  %2179 = getelementptr { ptr, i32 }, ptr %325, i32 0, i32 0
  store ptr %2179, ptr %.reg2mem48, align 8
  %2180 = getelementptr { ptr, i32 }, ptr %325, i32 0, i32 1
  store ptr %2180, ptr %.reg2mem46, align 8
  br label %2181

2181:                                             ; preds = %._crit_edge9, %2092
  %2182 = load ptr, ptr %322, align 8
  %2183 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2182, 0
  %2184 = load ptr, ptr %321, align 8
  %2185 = insertvalue { ptr, ptr, ptr, i32 } %2183, ptr %2184, 1
  %2186 = load ptr, ptr %320, align 8
  %2187 = insertvalue { ptr, ptr, ptr, i32 } %2185, ptr %2186, 2
  %2188 = load i32, ptr %319, align 4
  %2189 = insertvalue { ptr, ptr, ptr, i32 } %2187, i32 %2188, 3
  %2190 = call ptr @llvm.invariant.start.p0(i64 0, ptr %323)
  %2191 = call ptr @llvm.invariant.start.p0(i64 88, ptr %2182)
  %2192 = getelementptr ptr, ptr %2182, i32 %2188
  %2193 = getelementptr ptr, ptr %2192, i32 5
  %2194 = load ptr, ptr %2193, align 8
  %2195 = call ptr @behavior_wrapper(ptr %2194, { ptr, ptr, ptr, i32 } %2189, ptr %324)
  %2196 = call { ptr, i160 } %2195({ ptr, ptr, ptr, i32 } %2189, { ptr, ptr, ptr, i32 } %2189, ptr %323) #17
  store { ptr, i160 } %2196, ptr %325, align 8
  %.reload49 = load ptr, ptr %.reg2mem48, align 8
  %2197 = load ptr, ptr %.reload49, align 8
  store ptr %2197, ptr %326, align 8
  %.reload47 = load ptr, ptr %.reg2mem46, align 8
  %2198 = load i32, ptr %.reload47, align 4
  store i32 %2198, ptr %327, align 4
  %2199 = load ptr, ptr %326, align 8
  %2200 = ptrtoint ptr %2199 to i64
  %2201 = icmp eq i64 %2200, ptrtoint (ptr @nil_typ to i64)
  %2202 = icmp eq i64 %2200, 0
  %2203 = or i1 %2201, %2202
  %2204 = icmp eq i1 %2203, false
  store i1 %2204, ptr %328, align 1
  %2205 = load i1, ptr %328, align 1
  br i1 %2205, label %2206, label %2229

2206:                                             ; preds = %2181
  %2207 = load i32, ptr %327, align 4
  store i32 %2207, ptr %329, align 4
  store i32 5, ptr %330, align 4
  %2208 = load i32, ptr %329, align 4
  %2209 = load i32, ptr %330, align 4
  %2210 = icmp eq i32 %2208, %2209
  store i1 %2210, ptr %331, align 1
  %2211 = load i1, ptr %331, align 1
  %2212 = xor i1 %2211, true
  %2213 = zext i1 %2212 to i32
  store i32 %2213, ptr %.reg2mem44, align 4
  br i1 %2211, label %2214, label %2215

2214:                                             ; preds = %2206
  br label %2228

2215:                                             ; preds = %2206
  %2216 = load i32, ptr %329, align 4
  store i32 %2216, ptr %332, align 4
  store ptr @i32_typ, ptr %333, align 8
  %2217 = load ptr, ptr %333, align 8
  %2218 = insertvalue { ptr, i160 } undef, ptr %2217, 0
  %2219 = load i160, ptr %332, align 4
  %2220 = insertvalue { ptr, i160 } %2218, i160 %2219, 1
  %2221 = getelementptr [1 x ptr], ptr %334, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2221, align 8
  %2222 = call ptr @llvm.invariant.start.p0(i64 1, ptr %334)
  %2223 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2224 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2225 = getelementptr { ptr }, ptr %335, i32 0, i32 0
  store ptr %2217, ptr %2225, align 8
  %2226 = call ptr @class_behavior_wrapper(ptr %2224, ptr %335)
  call void %2226(ptr %334, { ptr, i160 } %2220) #17
  %2227 = load i32, ptr %329, align 4
  store i32 %2227, ptr %326, align 4
  br label %2228

2228:                                             ; preds = %2215, %2214
  %.reload45 = load i32, ptr %.reg2mem44, align 4
  store i32 %.reload45, ptr %.reg2mem83, align 4
  br label %2230

2229:                                             ; preds = %2181
  store i32 0, ptr %.reg2mem83, align 4
  br label %2230

2230:                                             ; preds = %2229, %2228
  %.reload84 = load i32, ptr %.reg2mem83, align 4
  store i32 %.reload84, ptr %.reg2mem42, align 4
  br label %2231

2231:                                             ; preds = %2230
  %.reload43 = load i32, ptr %.reg2mem42, align 4
  %2232 = trunc i32 %.reload43 to i1
  br i1 %2232, label %._crit_edge9, label %2233

._crit_edge9:                                     ; preds = %2231
  br label %2181

2233:                                             ; preds = %2231
  store i32 5, ptr %336, align 4
  %2234 = load i32, ptr %336, align 4
  %2235 = sext i32 %2234 to i64
  %2236 = mul i64 %2235, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %2237 = call ptr @bump_malloc(i64 %2236)
  store ptr %2237, ptr %337, align 8
  %2238 = getelementptr { ptr }, ptr %337, i32 0, i32 0
  %2239 = load ptr, ptr %2238, align 8
  store ptr %2239, ptr %338, align 8
  store i32 1, ptr %339, align 4
  store i32 0, ptr %340, align 4
  %2240 = load ptr, ptr %338, align 8
  %2241 = load i32, ptr %340, align 4
  %2242 = sext i32 %2241 to i64
  %2243 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2242
  %2244 = getelementptr i8, ptr %2240, i64 %2243
  %2245 = load i32, ptr %339, align 4
  store i32 %2245, ptr %2244, align 4
  store i32 2, ptr %341, align 4
  store i32 1, ptr %342, align 4
  %2246 = load ptr, ptr %338, align 8
  %2247 = load i32, ptr %342, align 4
  %2248 = sext i32 %2247 to i64
  %2249 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2248
  %2250 = getelementptr i8, ptr %2246, i64 %2249
  %2251 = load i32, ptr %341, align 4
  store i32 %2251, ptr %2250, align 4
  store i32 3, ptr %343, align 4
  store i32 2, ptr %344, align 4
  %2252 = load ptr, ptr %338, align 8
  %2253 = load i32, ptr %344, align 4
  %2254 = sext i32 %2253 to i64
  %2255 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2254
  %2256 = getelementptr i8, ptr %2252, i64 %2255
  %2257 = load i32, ptr %343, align 4
  store i32 %2257, ptr %2256, align 4
  store i32 4, ptr %345, align 4
  store i32 3, ptr %346, align 4
  %2258 = load ptr, ptr %338, align 8
  %2259 = load i32, ptr %346, align 4
  %2260 = sext i32 %2259 to i64
  %2261 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2260
  %2262 = getelementptr i8, ptr %2258, i64 %2261
  %2263 = load i32, ptr %345, align 4
  store i32 %2263, ptr %2262, align 4
  store i32 4, ptr %347, align 4
  store i32 5, ptr %348, align 4
  store ptr @Array, ptr %349, align 8
  %2264 = getelementptr ptr, ptr %349, i32 1
  store ptr @_parameterization_Ptri32, ptr %2264, align 8
  %2265 = load ptr, ptr %349, align 8
  %2266 = getelementptr ptr, ptr %2265, i32 6
  %2267 = load ptr, ptr %2266, align 8
  %2268 = call { i64, i64 } @size_wrapper(ptr %2267, ptr %349)
  %2269 = extractvalue { i64, i64 } %2268, 0
  %2270 = call ptr @bump_malloc(i64 %2269)
  store ptr @_parameterization_Ptri32, ptr %2270, align 8
  %2271 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2270)
  store ptr @Array, ptr %353, align 8
  store ptr %2270, ptr %352, align 8
  store i32 10, ptr %350, align 4
  store i32 4, ptr %354, align 4
  store i32 5, ptr %355, align 4
  %2272 = load ptr, ptr %338, align 8
  %2273 = insertvalue { ptr } undef, ptr %2272, 0
  %2274 = load i32, ptr %354, align 4
  %2275 = load i32, ptr %355, align 4
  %2276 = load ptr, ptr %353, align 8
  %2277 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2276, 0
  %2278 = load ptr, ptr %352, align 8
  %2279 = insertvalue { ptr, ptr, ptr, i32 } %2277, ptr %2278, 1
  %2280 = load ptr, ptr %351, align 8
  %2281 = insertvalue { ptr, ptr, ptr, i32 } %2279, ptr %2280, 2
  %2282 = load i32, ptr %350, align 4
  %2283 = insertvalue { ptr, ptr, ptr, i32 } %2281, i32 %2282, 3
  %2284 = getelementptr [3 x ptr], ptr %356, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2284, align 8
  %2285 = getelementptr [3 x ptr], ptr %356, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2285, align 8
  %2286 = getelementptr [3 x ptr], ptr %356, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2286, align 8
  %2287 = call ptr @llvm.invariant.start.p0(i64 9, ptr %356)
  %2288 = call ptr @llvm.invariant.start.p0(i64 664, ptr %2276)
  %2289 = getelementptr ptr, ptr %2276, i32 %2282
  %2290 = getelementptr ptr, ptr %2289, i32 8
  %2291 = load ptr, ptr %2290, align 8
  %2292 = getelementptr { ptr, ptr, ptr }, ptr %357, i32 0, i32 0
  store ptr @buffer_typ, ptr %2292, align 8
  %2293 = getelementptr { ptr, ptr, ptr }, ptr %357, i32 0, i32 1
  store ptr @i32_typ, ptr %2293, align 8
  %2294 = getelementptr { ptr, ptr, ptr }, ptr %357, i32 0, i32 2
  store ptr @i32_typ, ptr %2294, align 8
  %2295 = call ptr @behavior_wrapper(ptr %2291, { ptr, ptr, ptr, i32 } %2283, ptr %357)
  call void %2295({ ptr, ptr, ptr, i32 } %2283, { ptr, ptr, ptr, i32 } %2283, ptr %356, { ptr } %2273, i32 %2274, i32 %2275) #17
  %2296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 0
  %2297 = load ptr, ptr %353, align 8
  store ptr %2297, ptr %2296, align 8
  %2298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 1
  %2299 = load ptr, ptr %352, align 8
  store ptr %2299, ptr %2298, align 8
  %2300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 2
  %2301 = load ptr, ptr %351, align 8
  store ptr %2301, ptr %2300, align 8
  %2302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 3
  %2303 = load i32, ptr %350, align 4
  store i32 %2303, ptr %2302, align 4
  call void @set_offset(ptr %358, ptr @Array)
  %2304 = load ptr, ptr %2296, align 8
  store ptr %2304, ptr %362, align 8
  %2305 = load ptr, ptr %2298, align 8
  store ptr %2305, ptr %361, align 8
  %2306 = load ptr, ptr %2300, align 8
  store ptr %2306, ptr %360, align 8
  %2307 = load i32, ptr %2302, align 4
  store i32 %2307, ptr %359, align 4
  store i32 7, ptr %363, align 4
  %2308 = load i32, ptr %363, align 4
  %2309 = sext i32 %2308 to i64
  %2310 = mul i64 %2309, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %2311 = call ptr @bump_malloc(i64 %2310)
  store ptr %2311, ptr %364, align 8
  %2312 = getelementptr { ptr }, ptr %364, i32 0, i32 0
  %2313 = load ptr, ptr %2312, align 8
  store ptr %2313, ptr %365, align 8
  store i32 5, ptr %366, align 4
  store i32 0, ptr %367, align 4
  %2314 = load ptr, ptr %365, align 8
  %2315 = load i32, ptr %367, align 4
  %2316 = sext i32 %2315 to i64
  %2317 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2316
  %2318 = getelementptr i8, ptr %2314, i64 %2317
  %2319 = load i32, ptr %366, align 4
  store i32 %2319, ptr %2318, align 4
  store i32 6, ptr %368, align 4
  store i32 1, ptr %369, align 4
  %2320 = load ptr, ptr %365, align 8
  %2321 = load i32, ptr %369, align 4
  %2322 = sext i32 %2321 to i64
  %2323 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2322
  %2324 = getelementptr i8, ptr %2320, i64 %2323
  %2325 = load i32, ptr %368, align 4
  store i32 %2325, ptr %2324, align 4
  store i32 7, ptr %370, align 4
  store i32 2, ptr %371, align 4
  %2326 = load ptr, ptr %365, align 8
  %2327 = load i32, ptr %371, align 4
  %2328 = sext i32 %2327 to i64
  %2329 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2328
  %2330 = getelementptr i8, ptr %2326, i64 %2329
  %2331 = load i32, ptr %370, align 4
  store i32 %2331, ptr %2330, align 4
  store i32 8, ptr %372, align 4
  store i32 3, ptr %373, align 4
  %2332 = load ptr, ptr %365, align 8
  %2333 = load i32, ptr %373, align 4
  %2334 = sext i32 %2333 to i64
  %2335 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2334
  %2336 = getelementptr i8, ptr %2332, i64 %2335
  %2337 = load i32, ptr %372, align 4
  store i32 %2337, ptr %2336, align 4
  store i32 9, ptr %374, align 4
  store i32 4, ptr %375, align 4
  %2338 = load ptr, ptr %365, align 8
  %2339 = load i32, ptr %375, align 4
  %2340 = sext i32 %2339 to i64
  %2341 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2340
  %2342 = getelementptr i8, ptr %2338, i64 %2341
  %2343 = load i32, ptr %374, align 4
  store i32 %2343, ptr %2342, align 4
  store i32 10, ptr %376, align 4
  store i32 5, ptr %377, align 4
  %2344 = load ptr, ptr %365, align 8
  %2345 = load i32, ptr %377, align 4
  %2346 = sext i32 %2345 to i64
  %2347 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2346
  %2348 = getelementptr i8, ptr %2344, i64 %2347
  %2349 = load i32, ptr %376, align 4
  store i32 %2349, ptr %2348, align 4
  store i32 6, ptr %378, align 4
  store i32 7, ptr %379, align 4
  store ptr @Array, ptr %380, align 8
  %2350 = getelementptr ptr, ptr %380, i32 1
  store ptr @_parameterization_Ptri32, ptr %2350, align 8
  %2351 = load ptr, ptr %380, align 8
  %2352 = getelementptr ptr, ptr %2351, i32 6
  %2353 = load ptr, ptr %2352, align 8
  %2354 = call { i64, i64 } @size_wrapper(ptr %2353, ptr %380)
  %2355 = extractvalue { i64, i64 } %2354, 0
  %2356 = call ptr @bump_malloc(i64 %2355)
  store ptr @_parameterization_Ptri32, ptr %2356, align 8
  %2357 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2356)
  store ptr @Array, ptr %384, align 8
  store ptr %2356, ptr %383, align 8
  store i32 10, ptr %381, align 4
  store i32 6, ptr %385, align 4
  store i32 7, ptr %386, align 4
  %2358 = load ptr, ptr %365, align 8
  %2359 = insertvalue { ptr } undef, ptr %2358, 0
  %2360 = load i32, ptr %385, align 4
  %2361 = load i32, ptr %386, align 4
  %2362 = load ptr, ptr %384, align 8
  %2363 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2362, 0
  %2364 = load ptr, ptr %383, align 8
  %2365 = insertvalue { ptr, ptr, ptr, i32 } %2363, ptr %2364, 1
  %2366 = load ptr, ptr %382, align 8
  %2367 = insertvalue { ptr, ptr, ptr, i32 } %2365, ptr %2366, 2
  %2368 = load i32, ptr %381, align 4
  %2369 = insertvalue { ptr, ptr, ptr, i32 } %2367, i32 %2368, 3
  %2370 = getelementptr [3 x ptr], ptr %387, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2370, align 8
  %2371 = getelementptr [3 x ptr], ptr %387, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2371, align 8
  %2372 = getelementptr [3 x ptr], ptr %387, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2372, align 8
  %2373 = call ptr @llvm.invariant.start.p0(i64 9, ptr %387)
  %2374 = call ptr @llvm.invariant.start.p0(i64 664, ptr %2362)
  %2375 = getelementptr ptr, ptr %2362, i32 %2368
  %2376 = getelementptr ptr, ptr %2375, i32 8
  %2377 = load ptr, ptr %2376, align 8
  %2378 = getelementptr { ptr, ptr, ptr }, ptr %388, i32 0, i32 0
  store ptr @buffer_typ, ptr %2378, align 8
  %2379 = getelementptr { ptr, ptr, ptr }, ptr %388, i32 0, i32 1
  store ptr @i32_typ, ptr %2379, align 8
  %2380 = getelementptr { ptr, ptr, ptr }, ptr %388, i32 0, i32 2
  store ptr @i32_typ, ptr %2380, align 8
  %2381 = call ptr @behavior_wrapper(ptr %2377, { ptr, ptr, ptr, i32 } %2369, ptr %388)
  call void %2381({ ptr, ptr, ptr, i32 } %2369, { ptr, ptr, ptr, i32 } %2369, ptr %387, { ptr } %2359, i32 %2360, i32 %2361) #17
  %2382 = getelementptr { ptr, ptr, ptr, i32 }, ptr %389, i32 0, i32 0
  %2383 = load ptr, ptr %384, align 8
  store ptr %2383, ptr %2382, align 8
  %2384 = getelementptr { ptr, ptr, ptr, i32 }, ptr %389, i32 0, i32 1
  %2385 = load ptr, ptr %383, align 8
  store ptr %2385, ptr %2384, align 8
  %2386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %389, i32 0, i32 2
  %2387 = load ptr, ptr %382, align 8
  store ptr %2387, ptr %2386, align 8
  %2388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %389, i32 0, i32 3
  %2389 = load i32, ptr %381, align 4
  store i32 %2389, ptr %2388, align 4
  call void @set_offset(ptr %389, ptr @Array)
  %2390 = load ptr, ptr %2382, align 8
  %2391 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2390, 0
  %2392 = load ptr, ptr %2384, align 8
  %2393 = insertvalue { ptr, ptr, ptr, i32 } %2391, ptr %2392, 1
  %2394 = load ptr, ptr %2386, align 8
  %2395 = insertvalue { ptr, ptr, ptr, i32 } %2393, ptr %2394, 2
  %2396 = load i32, ptr %2388, align 4
  %2397 = insertvalue { ptr, ptr, ptr, i32 } %2395, i32 %2396, 3
  %2398 = load ptr, ptr %362, align 8
  %2399 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2398, 0
  %2400 = load ptr, ptr %361, align 8
  %2401 = insertvalue { ptr, ptr, ptr, i32 } %2399, ptr %2400, 1
  %2402 = load ptr, ptr %360, align 8
  %2403 = insertvalue { ptr, ptr, ptr, i32 } %2401, ptr %2402, 2
  %2404 = load i32, ptr %359, align 4
  %2405 = insertvalue { ptr, ptr, ptr, i32 } %2403, i32 %2404, 3
  %2406 = getelementptr [1 x ptr], ptr %390, i32 0, i32 0
  store ptr @_parameterization_ArrayPtri32, ptr %2406, align 8
  %2407 = call ptr @llvm.invariant.start.p0(i64 1, ptr %390)
  %2408 = call ptr @llvm.invariant.start.p0(i64 664, ptr %2398)
  %2409 = getelementptr ptr, ptr %2398, i32 %2404
  %2410 = getelementptr ptr, ptr %2409, i32 12
  %2411 = load ptr, ptr %2410, align 8
  %2412 = getelementptr { ptr }, ptr %391, i32 0, i32 0
  store ptr %2390, ptr %2412, align 8
  %2413 = call ptr @behavior_wrapper(ptr %2411, { ptr, ptr, ptr, i32 } %2405, ptr %391)
  %2414 = call { ptr, ptr, ptr, i32 } %2413({ ptr, ptr, ptr, i32 } %2405, { ptr, ptr, ptr, i32 } %2405, ptr %390, { ptr, ptr, ptr, i32 } %2397) #17
  store { ptr, ptr, ptr, i32 } %2414, ptr %392, align 8
  %2415 = getelementptr { ptr, ptr, ptr, i32 }, ptr %392, i32 0, i32 0
  %2416 = getelementptr { ptr, ptr, ptr, i32 }, ptr %393, i32 0, i32 0
  %2417 = load ptr, ptr %2415, align 8
  store ptr %2417, ptr %2416, align 8
  %2418 = getelementptr { ptr, ptr, ptr, i32 }, ptr %392, i32 0, i32 1
  %2419 = getelementptr { ptr, ptr, ptr, i32 }, ptr %393, i32 0, i32 1
  %2420 = load ptr, ptr %2418, align 8
  store ptr %2420, ptr %2419, align 8
  %2421 = getelementptr { ptr, ptr, ptr, i32 }, ptr %392, i32 0, i32 2
  %2422 = getelementptr { ptr, ptr, ptr, i32 }, ptr %393, i32 0, i32 2
  %2423 = load ptr, ptr %2421, align 8
  store ptr %2423, ptr %2422, align 8
  %2424 = getelementptr { ptr, ptr, ptr, i32 }, ptr %392, i32 0, i32 3
  %2425 = getelementptr { ptr, ptr, ptr, i32 }, ptr %393, i32 0, i32 3
  %2426 = load i32, ptr %2424, align 4
  store i32 %2426, ptr %2425, align 4
  call void @set_offset(ptr %393, ptr @Array)
  store i32 7, ptr %394, align 4
  %2427 = load i32, ptr %394, align 4
  %2428 = load ptr, ptr %362, align 8
  %2429 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2428, 0
  %2430 = load ptr, ptr %361, align 8
  %2431 = insertvalue { ptr, ptr, ptr, i32 } %2429, ptr %2430, 1
  %2432 = load ptr, ptr %360, align 8
  %2433 = insertvalue { ptr, ptr, ptr, i32 } %2431, ptr %2432, 2
  %2434 = load i32, ptr %359, align 4
  %2435 = insertvalue { ptr, ptr, ptr, i32 } %2433, i32 %2434, 3
  %2436 = getelementptr [1 x ptr], ptr %395, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2436, align 8
  %2437 = call ptr @llvm.invariant.start.p0(i64 1, ptr %395)
  %2438 = call ptr @llvm.invariant.start.p0(i64 664, ptr %2428)
  %2439 = getelementptr ptr, ptr %2428, i32 %2434
  %2440 = getelementptr ptr, ptr %2439, i32 14
  %2441 = load ptr, ptr %2440, align 8
  %2442 = getelementptr { ptr }, ptr %396, i32 0, i32 0
  store ptr @i32_typ, ptr %2442, align 8
  %2443 = call ptr @behavior_wrapper(ptr %2441, { ptr, ptr, ptr, i32 } %2435, ptr %396)
  %2444 = call { ptr, i160 } %2443({ ptr, ptr, ptr, i32 } %2435, { ptr, ptr, ptr, i32 } %2435, ptr %395, i32 %2427) #17
  store { ptr, i160 } %2444, ptr %397, align 8
  %2445 = getelementptr { ptr, i160 }, ptr %397, i32 0, i32 1
  %2446 = load i32, ptr %2445, align 4
  store i32 %2446, ptr %398, align 4
  %2447 = load i32, ptr %398, align 4
  store i32 %2447, ptr %399, align 4
  store ptr @i32_typ, ptr %400, align 8
  %2448 = load ptr, ptr %400, align 8
  %2449 = insertvalue { ptr, i160 } undef, ptr %2448, 0
  %2450 = load i160, ptr %399, align 4
  %2451 = insertvalue { ptr, i160 } %2449, i160 %2450, 1
  %2452 = getelementptr [1 x ptr], ptr %401, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2452, align 8
  %2453 = call ptr @llvm.invariant.start.p0(i64 1, ptr %401)
  %2454 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2455 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2456 = getelementptr { ptr }, ptr %402, i32 0, i32 0
  store ptr %2448, ptr %2456, align 8
  %2457 = call ptr @class_behavior_wrapper(ptr %2455, ptr %402)
  call void %2457(ptr %401, { ptr, i160 } %2451) #17
  store i32 1, ptr %403, align 4
  %2458 = load i32, ptr %403, align 4
  %2459 = sext i32 %2458 to i64
  %2460 = mul i64 %2459, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %2461 = call ptr @bump_malloc(i64 %2460)
  store ptr %2461, ptr %404, align 8
  %2462 = getelementptr { ptr }, ptr %404, i32 0, i32 0
  %2463 = load ptr, ptr %2462, align 8
  store ptr %2463, ptr %405, align 8
  store i32 0, ptr %406, align 4
  store i32 1, ptr %407, align 4
  store ptr @Array, ptr %408, align 8
  %2464 = getelementptr ptr, ptr %408, i32 1
  store ptr @_parameterization_Ptri32, ptr %2464, align 8
  %2465 = load ptr, ptr %408, align 8
  %2466 = getelementptr ptr, ptr %2465, i32 6
  %2467 = load ptr, ptr %2466, align 8
  %2468 = call { i64, i64 } @size_wrapper(ptr %2467, ptr %408)
  %2469 = extractvalue { i64, i64 } %2468, 0
  %2470 = call ptr @bump_malloc(i64 %2469)
  store ptr @_parameterization_Ptri32, ptr %2470, align 8
  %2471 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2470)
  store ptr @Array, ptr %412, align 8
  store ptr %2470, ptr %411, align 8
  store i32 10, ptr %409, align 4
  store i32 0, ptr %413, align 4
  store i32 1, ptr %414, align 4
  %2472 = load ptr, ptr %405, align 8
  %2473 = insertvalue { ptr } undef, ptr %2472, 0
  %2474 = load i32, ptr %413, align 4
  %2475 = load i32, ptr %414, align 4
  %2476 = load ptr, ptr %412, align 8
  %2477 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2476, 0
  %2478 = load ptr, ptr %411, align 8
  %2479 = insertvalue { ptr, ptr, ptr, i32 } %2477, ptr %2478, 1
  %2480 = load ptr, ptr %410, align 8
  %2481 = insertvalue { ptr, ptr, ptr, i32 } %2479, ptr %2480, 2
  %2482 = load i32, ptr %409, align 4
  %2483 = insertvalue { ptr, ptr, ptr, i32 } %2481, i32 %2482, 3
  %2484 = getelementptr [3 x ptr], ptr %415, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2484, align 8
  %2485 = getelementptr [3 x ptr], ptr %415, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2485, align 8
  %2486 = getelementptr [3 x ptr], ptr %415, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2486, align 8
  %2487 = call ptr @llvm.invariant.start.p0(i64 9, ptr %415)
  %2488 = call ptr @llvm.invariant.start.p0(i64 664, ptr %2476)
  %2489 = getelementptr ptr, ptr %2476, i32 %2482
  %2490 = getelementptr ptr, ptr %2489, i32 8
  %2491 = load ptr, ptr %2490, align 8
  %2492 = getelementptr { ptr, ptr, ptr }, ptr %416, i32 0, i32 0
  store ptr @buffer_typ, ptr %2492, align 8
  %2493 = getelementptr { ptr, ptr, ptr }, ptr %416, i32 0, i32 1
  store ptr @i32_typ, ptr %2493, align 8
  %2494 = getelementptr { ptr, ptr, ptr }, ptr %416, i32 0, i32 2
  store ptr @i32_typ, ptr %2494, align 8
  %2495 = call ptr @behavior_wrapper(ptr %2491, { ptr, ptr, ptr, i32 } %2483, ptr %416)
  call void %2495({ ptr, ptr, ptr, i32 } %2483, { ptr, ptr, ptr, i32 } %2483, ptr %415, { ptr } %2473, i32 %2474, i32 %2475) #17
  %2496 = getelementptr { ptr, ptr, ptr, i32 }, ptr %417, i32 0, i32 0
  %2497 = load ptr, ptr %412, align 8
  store ptr %2497, ptr %2496, align 8
  %2498 = getelementptr { ptr, ptr, ptr, i32 }, ptr %417, i32 0, i32 1
  %2499 = load ptr, ptr %411, align 8
  store ptr %2499, ptr %2498, align 8
  %2500 = getelementptr { ptr, ptr, ptr, i32 }, ptr %417, i32 0, i32 2
  %2501 = load ptr, ptr %410, align 8
  store ptr %2501, ptr %2500, align 8
  %2502 = getelementptr { ptr, ptr, ptr, i32 }, ptr %417, i32 0, i32 3
  %2503 = load i32, ptr %409, align 4
  store i32 %2503, ptr %2502, align 4
  call void @set_offset(ptr %417, ptr @Array)
  %2504 = load ptr, ptr %2496, align 8
  store ptr %2504, ptr %421, align 8
  %2505 = load ptr, ptr %2498, align 8
  store ptr %2505, ptr %420, align 8
  %2506 = load ptr, ptr %2500, align 8
  store ptr %2506, ptr %419, align 8
  %2507 = load i32, ptr %2502, align 4
  store i32 %2507, ptr %418, align 4
  store i32 5, ptr %422, align 4
  %2508 = load i32, ptr %422, align 4
  %2509 = sext i32 %2508 to i64
  %2510 = mul i64 %2509, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %2511 = call ptr @bump_malloc(i64 %2510)
  store ptr %2511, ptr %423, align 8
  %2512 = getelementptr { ptr }, ptr %423, i32 0, i32 0
  %2513 = load ptr, ptr %2512, align 8
  store ptr %2513, ptr %424, align 8
  store i32 8, ptr %425, align 4
  store i32 0, ptr %426, align 4
  %2514 = load ptr, ptr %424, align 8
  %2515 = load i32, ptr %426, align 4
  %2516 = sext i32 %2515 to i64
  %2517 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2516
  %2518 = getelementptr i8, ptr %2514, i64 %2517
  %2519 = load i32, ptr %425, align 4
  store i32 %2519, ptr %2518, align 4
  store i32 7, ptr %427, align 4
  store i32 1, ptr %428, align 4
  %2520 = load ptr, ptr %424, align 8
  %2521 = load i32, ptr %428, align 4
  %2522 = sext i32 %2521 to i64
  %2523 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2522
  %2524 = getelementptr i8, ptr %2520, i64 %2523
  %2525 = load i32, ptr %427, align 4
  store i32 %2525, ptr %2524, align 4
  store i32 6, ptr %429, align 4
  store i32 2, ptr %430, align 4
  %2526 = load ptr, ptr %424, align 8
  %2527 = load i32, ptr %430, align 4
  %2528 = sext i32 %2527 to i64
  %2529 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2528
  %2530 = getelementptr i8, ptr %2526, i64 %2529
  %2531 = load i32, ptr %429, align 4
  store i32 %2531, ptr %2530, align 4
  store i32 5, ptr %431, align 4
  store i32 3, ptr %432, align 4
  %2532 = load ptr, ptr %424, align 8
  %2533 = load i32, ptr %432, align 4
  %2534 = sext i32 %2533 to i64
  %2535 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2534
  %2536 = getelementptr i8, ptr %2532, i64 %2535
  %2537 = load i32, ptr %431, align 4
  store i32 %2537, ptr %2536, align 4
  store i32 4, ptr %433, align 4
  store i32 5, ptr %434, align 4
  store ptr @Array, ptr %435, align 8
  %2538 = getelementptr ptr, ptr %435, i32 1
  store ptr @_parameterization_Ptri32, ptr %2538, align 8
  %2539 = load ptr, ptr %435, align 8
  %2540 = getelementptr ptr, ptr %2539, i32 6
  %2541 = load ptr, ptr %2540, align 8
  %2542 = call { i64, i64 } @size_wrapper(ptr %2541, ptr %435)
  %2543 = extractvalue { i64, i64 } %2542, 0
  %2544 = call ptr @bump_malloc(i64 %2543)
  store ptr @_parameterization_Ptri32, ptr %2544, align 8
  %2545 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2544)
  store ptr @Array, ptr %439, align 8
  store ptr %2544, ptr %438, align 8
  store i32 10, ptr %436, align 4
  store i32 4, ptr %440, align 4
  store i32 5, ptr %441, align 4
  %2546 = load ptr, ptr %424, align 8
  %2547 = insertvalue { ptr } undef, ptr %2546, 0
  %2548 = load i32, ptr %440, align 4
  %2549 = load i32, ptr %441, align 4
  %2550 = load ptr, ptr %439, align 8
  %2551 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2550, 0
  %2552 = load ptr, ptr %438, align 8
  %2553 = insertvalue { ptr, ptr, ptr, i32 } %2551, ptr %2552, 1
  %2554 = load ptr, ptr %437, align 8
  %2555 = insertvalue { ptr, ptr, ptr, i32 } %2553, ptr %2554, 2
  %2556 = load i32, ptr %436, align 4
  %2557 = insertvalue { ptr, ptr, ptr, i32 } %2555, i32 %2556, 3
  %2558 = getelementptr [3 x ptr], ptr %442, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2558, align 8
  %2559 = getelementptr [3 x ptr], ptr %442, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2559, align 8
  %2560 = getelementptr [3 x ptr], ptr %442, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2560, align 8
  %2561 = call ptr @llvm.invariant.start.p0(i64 9, ptr %442)
  %2562 = call ptr @llvm.invariant.start.p0(i64 664, ptr %2550)
  %2563 = getelementptr ptr, ptr %2550, i32 %2556
  %2564 = getelementptr ptr, ptr %2563, i32 8
  %2565 = load ptr, ptr %2564, align 8
  %2566 = getelementptr { ptr, ptr, ptr }, ptr %443, i32 0, i32 0
  store ptr @buffer_typ, ptr %2566, align 8
  %2567 = getelementptr { ptr, ptr, ptr }, ptr %443, i32 0, i32 1
  store ptr @i32_typ, ptr %2567, align 8
  %2568 = getelementptr { ptr, ptr, ptr }, ptr %443, i32 0, i32 2
  store ptr @i32_typ, ptr %2568, align 8
  %2569 = call ptr @behavior_wrapper(ptr %2565, { ptr, ptr, ptr, i32 } %2557, ptr %443)
  call void %2569({ ptr, ptr, ptr, i32 } %2557, { ptr, ptr, ptr, i32 } %2557, ptr %442, { ptr } %2547, i32 %2548, i32 %2549) #17
  %2570 = getelementptr { ptr, ptr, ptr, i32 }, ptr %444, i32 0, i32 0
  %2571 = load ptr, ptr %439, align 8
  store ptr %2571, ptr %2570, align 8
  %2572 = getelementptr { ptr, ptr, ptr, i32 }, ptr %444, i32 0, i32 1
  %2573 = load ptr, ptr %438, align 8
  store ptr %2573, ptr %2572, align 8
  %2574 = getelementptr { ptr, ptr, ptr, i32 }, ptr %444, i32 0, i32 2
  %2575 = load ptr, ptr %437, align 8
  store ptr %2575, ptr %2574, align 8
  %2576 = getelementptr { ptr, ptr, ptr, i32 }, ptr %444, i32 0, i32 3
  %2577 = load i32, ptr %436, align 4
  store i32 %2577, ptr %2576, align 4
  call void @set_offset(ptr %444, ptr @Array)
  %2578 = load ptr, ptr %2570, align 8
  %2579 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2578, 0
  %2580 = load ptr, ptr %2572, align 8
  %2581 = insertvalue { ptr, ptr, ptr, i32 } %2579, ptr %2580, 1
  %2582 = load ptr, ptr %2574, align 8
  %2583 = insertvalue { ptr, ptr, ptr, i32 } %2581, ptr %2582, 2
  %2584 = load i32, ptr %2576, align 4
  %2585 = insertvalue { ptr, ptr, ptr, i32 } %2583, i32 %2584, 3
  %2586 = load ptr, ptr %421, align 8
  %2587 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2586, 0
  %2588 = load ptr, ptr %420, align 8
  %2589 = insertvalue { ptr, ptr, ptr, i32 } %2587, ptr %2588, 1
  %2590 = load ptr, ptr %419, align 8
  %2591 = insertvalue { ptr, ptr, ptr, i32 } %2589, ptr %2590, 2
  %2592 = load i32, ptr %418, align 4
  %2593 = insertvalue { ptr, ptr, ptr, i32 } %2591, i32 %2592, 3
  %2594 = getelementptr [1 x ptr], ptr %445, i32 0, i32 0
  store ptr @_parameterization_ArrayPtri32, ptr %2594, align 8
  %2595 = call ptr @llvm.invariant.start.p0(i64 1, ptr %445)
  %2596 = call ptr @llvm.invariant.start.p0(i64 664, ptr %2586)
  %2597 = getelementptr ptr, ptr %2586, i32 %2592
  %2598 = getelementptr ptr, ptr %2597, i32 12
  %2599 = load ptr, ptr %2598, align 8
  %2600 = getelementptr { ptr }, ptr %446, i32 0, i32 0
  store ptr %2578, ptr %2600, align 8
  %2601 = call ptr @behavior_wrapper(ptr %2599, { ptr, ptr, ptr, i32 } %2593, ptr %446)
  %2602 = call { ptr, ptr, ptr, i32 } %2601({ ptr, ptr, ptr, i32 } %2593, { ptr, ptr, ptr, i32 } %2593, ptr %445, { ptr, ptr, ptr, i32 } %2585) #17
  store { ptr, ptr, ptr, i32 } %2602, ptr %447, align 8
  %2603 = getelementptr { ptr, ptr, ptr, i32 }, ptr %447, i32 0, i32 0
  %2604 = getelementptr { ptr, ptr, ptr, i32 }, ptr %448, i32 0, i32 0
  %2605 = load ptr, ptr %2603, align 8
  store ptr %2605, ptr %2604, align 8
  %2606 = getelementptr { ptr, ptr, ptr, i32 }, ptr %447, i32 0, i32 1
  %2607 = getelementptr { ptr, ptr, ptr, i32 }, ptr %448, i32 0, i32 1
  %2608 = load ptr, ptr %2606, align 8
  store ptr %2608, ptr %2607, align 8
  %2609 = getelementptr { ptr, ptr, ptr, i32 }, ptr %447, i32 0, i32 2
  %2610 = getelementptr { ptr, ptr, ptr, i32 }, ptr %448, i32 0, i32 2
  %2611 = load ptr, ptr %2609, align 8
  store ptr %2611, ptr %2610, align 8
  %2612 = getelementptr { ptr, ptr, ptr, i32 }, ptr %447, i32 0, i32 3
  %2613 = getelementptr { ptr, ptr, ptr, i32 }, ptr %448, i32 0, i32 3
  %2614 = load i32, ptr %2612, align 4
  store i32 %2614, ptr %2613, align 4
  call void @set_offset(ptr %448, ptr @Array)
  store i32 3, ptr %449, align 4
  %2615 = load i32, ptr %449, align 4
  %2616 = load ptr, ptr %421, align 8
  %2617 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2616, 0
  %2618 = load ptr, ptr %420, align 8
  %2619 = insertvalue { ptr, ptr, ptr, i32 } %2617, ptr %2618, 1
  %2620 = load ptr, ptr %419, align 8
  %2621 = insertvalue { ptr, ptr, ptr, i32 } %2619, ptr %2620, 2
  %2622 = load i32, ptr %418, align 4
  %2623 = insertvalue { ptr, ptr, ptr, i32 } %2621, i32 %2622, 3
  %2624 = getelementptr [1 x ptr], ptr %450, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2624, align 8
  %2625 = call ptr @llvm.invariant.start.p0(i64 1, ptr %450)
  %2626 = call ptr @llvm.invariant.start.p0(i64 664, ptr %2616)
  %2627 = getelementptr ptr, ptr %2616, i32 %2622
  %2628 = getelementptr ptr, ptr %2627, i32 14
  %2629 = load ptr, ptr %2628, align 8
  %2630 = getelementptr { ptr }, ptr %451, i32 0, i32 0
  store ptr @i32_typ, ptr %2630, align 8
  %2631 = call ptr @behavior_wrapper(ptr %2629, { ptr, ptr, ptr, i32 } %2623, ptr %451)
  %2632 = call { ptr, i160 } %2631({ ptr, ptr, ptr, i32 } %2623, { ptr, ptr, ptr, i32 } %2623, ptr %450, i32 %2615) #17
  store { ptr, i160 } %2632, ptr %452, align 8
  %2633 = getelementptr { ptr, i160 }, ptr %452, i32 0, i32 1
  %2634 = load i32, ptr %2633, align 4
  store i32 %2634, ptr %453, align 4
  %2635 = load i32, ptr %453, align 4
  store i32 %2635, ptr %454, align 4
  store ptr @i32_typ, ptr %455, align 8
  %2636 = load ptr, ptr %455, align 8
  %2637 = insertvalue { ptr, i160 } undef, ptr %2636, 0
  %2638 = load i160, ptr %454, align 4
  %2639 = insertvalue { ptr, i160 } %2637, i160 %2638, 1
  %2640 = getelementptr [1 x ptr], ptr %456, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2640, align 8
  %2641 = call ptr @llvm.invariant.start.p0(i64 1, ptr %456)
  %2642 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2643 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2644 = getelementptr { ptr }, ptr %457, i32 0, i32 0
  store ptr %2636, ptr %2644, align 8
  %2645 = call ptr @class_behavior_wrapper(ptr %2643, ptr %457)
  call void %2645(ptr %456, { ptr, i160 } %2639) #17
  call void @grabo()
  %2646 = load ptr, ptr %362, align 8
  %2647 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2646, i32 0, i32 0, i32 1
  %2648 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2646, i32 0, i32 0, i32 2
  %2649 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2646, i32 0, i32 1, i32 0
  %2650 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2646, i32 0, i32 1, i32 1
  %2651 = load i64, ptr %2647, align 4
  %2652 = load i64, ptr %2648, align 4
  %2653 = load ptr, ptr %2649, align 8
  %2654 = load ptr, ptr %2650, align 8
  %2655 = load i64, ptr @Array, align 4
  %2656 = call i1 @subtype_test_wrapper(ptr %2653, i64 %2652, i64 %2651, i64 %2655, i64 ptrtoint (ptr @Array to i64), ptr %2654)
  store i1 %2656, ptr %458, align 1
  %2657 = load i1, ptr %458, align 1
  store i1 %2657, ptr %459, align 1
  br i1 %2657, label %2658, label %._crit_edge10

._crit_edge10:                                    ; preds = %2233
  br label %2683

2658:                                             ; preds = %2233
  store i32 0, ptr %460, align 4
  %2659 = load i32, ptr %460, align 4
  %2660 = load ptr, ptr %362, align 8
  %2661 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2660, 0
  %2662 = load ptr, ptr %361, align 8
  %2663 = insertvalue { ptr, ptr, ptr, i32 } %2661, ptr %2662, 1
  %2664 = load ptr, ptr %360, align 8
  %2665 = insertvalue { ptr, ptr, ptr, i32 } %2663, ptr %2664, 2
  %2666 = load i32, ptr %359, align 4
  %2667 = insertvalue { ptr, ptr, ptr, i32 } %2665, i32 %2666, 3
  %2668 = getelementptr [1 x ptr], ptr %461, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2668, align 8
  %2669 = call ptr @llvm.invariant.start.p0(i64 1, ptr %461)
  %2670 = call ptr @llvm.invariant.start.p0(i64 664, ptr %2660)
  %2671 = getelementptr ptr, ptr %2660, i32 %2666
  %2672 = getelementptr ptr, ptr %2671, i32 14
  %2673 = load ptr, ptr %2672, align 8
  %2674 = getelementptr { ptr }, ptr %462, i32 0, i32 0
  store ptr @i32_typ, ptr %2674, align 8
  %2675 = call ptr @behavior_wrapper(ptr %2673, { ptr, ptr, ptr, i32 } %2667, ptr %462)
  %2676 = call { ptr, i160 } %2675({ ptr, ptr, ptr, i32 } %2667, { ptr, ptr, ptr, i32 } %2667, ptr %461, i32 %2659) #17
  store { ptr, i160 } %2676, ptr %463, align 8
  %2677 = getelementptr { ptr, i160 }, ptr %463, i32 0, i32 1
  %2678 = load i32, ptr %2677, align 4
  store i32 %2678, ptr %464, align 4
  store i32 5, ptr %465, align 4
  %2679 = load i32, ptr %464, align 4
  %2680 = load i32, ptr %465, align 4
  %2681 = icmp eq i32 %2679, %2680
  store i1 %2681, ptr %466, align 1
  %2682 = load i1, ptr %466, align 1
  store i1 %2682, ptr %459, align 1
  br label %2683

2683:                                             ; preds = %._crit_edge10, %2658
  %2684 = load i1, ptr %459, align 1
  store i1 %2684, ptr %467, align 1
  %2685 = load i1, ptr %467, align 1
  br i1 %2685, label %2686, label %._crit_edge11

._crit_edge11:                                    ; preds = %2683
  br label %2745

2686:                                             ; preds = %2683
  store i32 15, ptr %468, align 4
  %2687 = load i32, ptr %468, align 4
  %2688 = sext i32 %2687 to i64
  %2689 = mul i64 %2688, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %2690 = call ptr @bump_malloc(i64 %2689)
  store ptr %2690, ptr %469, align 8
  %2691 = getelementptr { ptr }, ptr %469, i32 0, i32 0
  %2692 = load ptr, ptr %2691, align 8
  store ptr %2692, ptr %470, align 8
  store i32 0, ptr %471, align 4
  %2693 = load ptr, ptr %470, align 8
  %2694 = load i32, ptr %471, align 4
  %2695 = sext i32 %2694 to i64
  %2696 = mul i64 ptrtoint (ptr getelementptr ([14 x i8], ptr null, i32 1) to i64), %2695
  %2697 = getelementptr i8, ptr %2693, i64 %2696
  %2698 = load <14 x i8>, ptr @icnqd_so_it_is_true, align 16
  store <14 x i8> %2698, ptr %2697, align 16
  store i32 14, ptr %472, align 4
  store i32 15, ptr %473, align 4
  store ptr @String, ptr %474, align 8
  %2699 = load ptr, ptr %474, align 8
  %2700 = getelementptr ptr, ptr %2699, i32 6
  %2701 = load ptr, ptr %2700, align 8
  %2702 = call { i64, i64 } @size_wrapper(ptr %2701, ptr %474)
  %2703 = extractvalue { i64, i64 } %2702, 0
  %2704 = call ptr @bump_malloc(i64 %2703)
  %2705 = getelementptr { ptr, ptr, ptr, i32 }, ptr %475, i32 0, i32 1
  %2706 = getelementptr { ptr, ptr, ptr, i32 }, ptr %475, i32 0, i32 3
  store ptr @String, ptr %475, align 8
  store ptr %2704, ptr %2705, align 8
  store i32 10, ptr %2706, align 4
  store i32 14, ptr %476, align 4
  store i32 15, ptr %477, align 4
  %2707 = load ptr, ptr %470, align 8
  %2708 = insertvalue { ptr } undef, ptr %2707, 0
  %2709 = load i32, ptr %476, align 4
  %2710 = load i32, ptr %477, align 4
  %2711 = getelementptr { ptr, ptr, ptr, i32 }, ptr %475, i32 0, i32 0
  %2712 = load ptr, ptr %2711, align 8
  %2713 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2712, 0
  %2714 = load ptr, ptr %2705, align 8
  %2715 = insertvalue { ptr, ptr, ptr, i32 } %2713, ptr %2714, 1
  %2716 = getelementptr { ptr, ptr, ptr, i32 }, ptr %475, i32 0, i32 2
  %2717 = load ptr, ptr %2716, align 8
  %2718 = insertvalue { ptr, ptr, ptr, i32 } %2715, ptr %2717, 2
  %2719 = load i32, ptr %2706, align 4
  %2720 = insertvalue { ptr, ptr, ptr, i32 } %2718, i32 %2719, 3
  %2721 = getelementptr [3 x ptr], ptr %478, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %2721, align 8
  %2722 = getelementptr [3 x ptr], ptr %478, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2722, align 8
  %2723 = getelementptr [3 x ptr], ptr %478, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2723, align 8
  %2724 = call ptr @llvm.invariant.start.p0(i64 9, ptr %478)
  %2725 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2712)
  %2726 = getelementptr ptr, ptr %2712, i32 %2719
  %2727 = getelementptr ptr, ptr %2726, i32 5
  %2728 = load ptr, ptr %2727, align 8
  %2729 = getelementptr { ptr, ptr, ptr }, ptr %479, i32 0, i32 0
  store ptr @buffer_typ, ptr %2729, align 8
  %2730 = getelementptr { ptr, ptr, ptr }, ptr %479, i32 0, i32 1
  store ptr @i32_typ, ptr %2730, align 8
  %2731 = getelementptr { ptr, ptr, ptr }, ptr %479, i32 0, i32 2
  store ptr @i32_typ, ptr %2731, align 8
  %2732 = call ptr @behavior_wrapper(ptr %2728, { ptr, ptr, ptr, i32 } %2720, ptr %479)
  call void %2732({ ptr, ptr, ptr, i32 } %2720, { ptr, ptr, ptr, i32 } %2720, ptr %478, { ptr } %2708, i32 %2709, i32 %2710) #17
  %2733 = getelementptr { ptr, i160 }, ptr %475, i32 0, i32 0
  %2734 = load ptr, ptr %2733, align 8
  %2735 = insertvalue { ptr, i160 } undef, ptr %2734, 0
  %2736 = getelementptr { ptr, i160 }, ptr %475, i32 0, i32 1
  %2737 = load i160, ptr %2736, align 4
  %2738 = insertvalue { ptr, i160 } %2735, i160 %2737, 1
  %2739 = getelementptr [1 x ptr], ptr %480, i32 0, i32 0
  store ptr @_parameterization_String, ptr %2739, align 8
  %2740 = call ptr @llvm.invariant.start.p0(i64 1, ptr %480)
  %2741 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2742 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2743 = getelementptr { ptr }, ptr %481, i32 0, i32 0
  store ptr %2734, ptr %2743, align 8
  %2744 = call ptr @class_behavior_wrapper(ptr %2742, ptr %481)
  call void %2744(ptr %480, { ptr, i160 } %2738) #17
  br label %2745

2745:                                             ; preds = %._crit_edge11, %2686
  %2746 = call i64 @clock()
  store i64 %2746, ptr %482, align 4
  %2747 = load i64, ptr %482, align 4
  store i64 %2747, ptr %483, align 4
  store ptr @i64_typ, ptr %484, align 8
  %2748 = load ptr, ptr %484, align 8
  %2749 = insertvalue { ptr, i160 } undef, ptr %2748, 0
  %2750 = load i160, ptr %483, align 4
  %2751 = insertvalue { ptr, i160 } %2749, i160 %2750, 1
  %2752 = getelementptr [1 x ptr], ptr %485, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %2752, align 8
  %2753 = call ptr @llvm.invariant.start.p0(i64 1, ptr %485)
  %2754 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2755 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2756 = getelementptr { ptr }, ptr %486, i32 0, i32 0
  store ptr %2748, ptr %2756, align 8
  %2757 = call ptr @class_behavior_wrapper(ptr %2755, ptr %486)
  call void %2757(ptr %485, { ptr, i160 } %2751) #17
  store i64 5, ptr %487, align 4
  %2758 = load i64, ptr %487, align 4
  store i64 %2758, ptr %488, align 4
  store ptr @i64_typ, ptr %489, align 8
  %2759 = load ptr, ptr %489, align 8
  %2760 = insertvalue { ptr, i160 } undef, ptr %2759, 0
  %2761 = load i160, ptr %488, align 4
  %2762 = insertvalue { ptr, i160 } %2760, i160 %2761, 1
  %2763 = getelementptr [1 x ptr], ptr %490, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %2763, align 8
  %2764 = call ptr @llvm.invariant.start.p0(i64 1, ptr %490)
  %2765 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2766 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2767 = getelementptr { ptr }, ptr %491, i32 0, i32 0
  store ptr %2759, ptr %2767, align 8
  %2768 = call ptr @class_behavior_wrapper(ptr %2766, ptr %491)
  call void %2768(ptr %490, { ptr, i160 } %2762) #17
  store i32 5, ptr %492, align 4
  %2769 = load i32, ptr %492, align 4
  %2770 = sitofp i32 %2769 to double
  store double %2770, ptr %493, align 8
  %2771 = load double, ptr %493, align 8
  store double %2771, ptr %494, align 8
  store ptr @f64_typ, ptr %495, align 8
  %2772 = load ptr, ptr %495, align 8
  %2773 = insertvalue { ptr, i160 } undef, ptr %2772, 0
  %2774 = load i160, ptr %494, align 4
  %2775 = insertvalue { ptr, i160 } %2773, i160 %2774, 1
  %2776 = getelementptr [1 x ptr], ptr %496, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %2776, align 8
  %2777 = call ptr @llvm.invariant.start.p0(i64 1, ptr %496)
  %2778 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2779 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2780 = getelementptr { ptr }, ptr %497, i32 0, i32 0
  store ptr %2772, ptr %2780, align 8
  %2781 = call ptr @class_behavior_wrapper(ptr %2779, ptr %497)
  call void %2781(ptr %496, { ptr, i160 } %2775) #17
  store i32 11, ptr %498, align 4
  store i32 14, ptr %499, align 4
  store ptr @Range, ptr %500, align 8
  %2782 = load ptr, ptr %500, align 8
  %2783 = getelementptr ptr, ptr %2782, i32 6
  %2784 = load ptr, ptr %2783, align 8
  %2785 = call { i64, i64 } @size_wrapper(ptr %2784, ptr %500)
  %2786 = extractvalue { i64, i64 } %2785, 0
  %2787 = call ptr @bump_malloc(i64 %2786)
  store ptr @Range, ptr %504, align 8
  store ptr %2787, ptr %503, align 8
  store i32 10, ptr %501, align 4
  store i32 11, ptr %505, align 4
  store i32 14, ptr %506, align 4
  %2788 = load i32, ptr %505, align 4
  %2789 = load i32, ptr %506, align 4
  %2790 = load ptr, ptr %504, align 8
  %2791 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2790, 0
  %2792 = load ptr, ptr %503, align 8
  %2793 = insertvalue { ptr, ptr, ptr, i32 } %2791, ptr %2792, 1
  %2794 = load ptr, ptr %502, align 8
  %2795 = insertvalue { ptr, ptr, ptr, i32 } %2793, ptr %2794, 2
  %2796 = load i32, ptr %501, align 4
  %2797 = insertvalue { ptr, ptr, ptr, i32 } %2795, i32 %2796, 3
  %2798 = getelementptr [2 x ptr], ptr %507, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2798, align 8
  %2799 = getelementptr [2 x ptr], ptr %507, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2799, align 8
  %2800 = call ptr @llvm.invariant.start.p0(i64 4, ptr %507)
  %2801 = call ptr @llvm.invariant.start.p0(i64 440, ptr %2790)
  %2802 = getelementptr ptr, ptr %2790, i32 %2796
  %2803 = getelementptr ptr, ptr %2802, i32 5
  %2804 = load ptr, ptr %2803, align 8
  %2805 = getelementptr { ptr, ptr }, ptr %508, i32 0, i32 0
  store ptr @i32_typ, ptr %2805, align 8
  %2806 = getelementptr { ptr, ptr }, ptr %508, i32 0, i32 1
  store ptr @i32_typ, ptr %2806, align 8
  %2807 = call ptr @behavior_wrapper(ptr %2804, { ptr, ptr, ptr, i32 } %2797, ptr %508)
  call void %2807({ ptr, ptr, ptr, i32 } %2797, { ptr, ptr, ptr, i32 } %2797, ptr %507, i32 %2788, i32 %2789) #17
  %2808 = load ptr, ptr %504, align 8
  %2809 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2808, 0
  %2810 = load ptr, ptr %503, align 8
  %2811 = insertvalue { ptr, ptr, ptr, i32 } %2809, ptr %2810, 1
  %2812 = load ptr, ptr %502, align 8
  %2813 = insertvalue { ptr, ptr, ptr, i32 } %2811, ptr %2812, 2
  %2814 = load i32, ptr %501, align 4
  %2815 = insertvalue { ptr, ptr, ptr, i32 } %2813, i32 %2814, 3
  %2816 = call ptr @llvm.invariant.start.p0(i64 0, ptr %509)
  %2817 = call ptr @llvm.invariant.start.p0(i64 440, ptr %2808)
  %2818 = getelementptr ptr, ptr %2808, i32 %2814
  %2819 = getelementptr ptr, ptr %2818, i32 7
  %2820 = load ptr, ptr %2819, align 8
  %2821 = call ptr @behavior_wrapper(ptr %2820, { ptr, ptr, ptr, i32 } %2815, ptr %510)
  %2822 = call { ptr, ptr, ptr, i32 } %2821({ ptr, ptr, ptr, i32 } %2815, { ptr, ptr, ptr, i32 } %2815, ptr %509) #17
  store { ptr, ptr, ptr, i32 } %2822, ptr %511, align 8
  %2823 = getelementptr { ptr, ptr, ptr, i32 }, ptr %511, i32 0, i32 0
  %2824 = getelementptr { ptr, ptr, ptr, i32 }, ptr %512, i32 0, i32 0
  %2825 = load ptr, ptr %2823, align 8
  store ptr %2825, ptr %2824, align 8
  %2826 = getelementptr { ptr, ptr, ptr, i32 }, ptr %511, i32 0, i32 1
  %2827 = getelementptr { ptr, ptr, ptr, i32 }, ptr %512, i32 0, i32 1
  %2828 = load ptr, ptr %2826, align 8
  store ptr %2828, ptr %2827, align 8
  %2829 = getelementptr { ptr, ptr, ptr, i32 }, ptr %511, i32 0, i32 2
  %2830 = getelementptr { ptr, ptr, ptr, i32 }, ptr %512, i32 0, i32 2
  %2831 = load ptr, ptr %2829, align 8
  store ptr %2831, ptr %2830, align 8
  %2832 = getelementptr { ptr, ptr, ptr, i32 }, ptr %511, i32 0, i32 3
  %2833 = getelementptr { ptr, ptr, ptr, i32 }, ptr %512, i32 0, i32 3
  %2834 = load i32, ptr %2832, align 4
  store i32 %2834, ptr %2833, align 4
  call void @set_offset(ptr %512, ptr @RangeIterator)
  %2835 = getelementptr { ptr, ptr, ptr, i32 }, ptr %513, i32 0, i32 0
  %2836 = load ptr, ptr %2824, align 8
  store ptr %2836, ptr %2835, align 8
  %2837 = getelementptr { ptr, ptr, ptr, i32 }, ptr %513, i32 0, i32 1
  %2838 = load ptr, ptr %2827, align 8
  store ptr %2838, ptr %2837, align 8
  %2839 = getelementptr { ptr, ptr, ptr, i32 }, ptr %513, i32 0, i32 2
  %2840 = load ptr, ptr %2830, align 8
  store ptr %2840, ptr %2839, align 8
  %2841 = getelementptr { ptr, ptr, ptr, i32 }, ptr %513, i32 0, i32 3
  %2842 = load i32, ptr %2833, align 4
  store i32 %2842, ptr %2841, align 4
  call void @set_offset(ptr %513, ptr @RangeIterator)
  %2843 = load ptr, ptr %2835, align 8
  store ptr %2843, ptr %517, align 8
  %2844 = load ptr, ptr %2837, align 8
  store ptr %2844, ptr %516, align 8
  %2845 = load ptr, ptr %2839, align 8
  store ptr %2845, ptr %515, align 8
  %2846 = load i32, ptr %2841, align 4
  store i32 %2846, ptr %514, align 4
  %2847 = getelementptr { ptr, i32 }, ptr %520, i32 0, i32 0
  store ptr %2847, ptr %.reg2mem40, align 8
  %2848 = getelementptr { ptr, i32 }, ptr %520, i32 0, i32 1
  store ptr %2848, ptr %.reg2mem38, align 8
  br label %2849

2849:                                             ; preds = %._crit_edge13, %2745
  %2850 = load ptr, ptr %517, align 8
  %2851 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2850, 0
  %2852 = load ptr, ptr %516, align 8
  %2853 = insertvalue { ptr, ptr, ptr, i32 } %2851, ptr %2852, 1
  %2854 = load ptr, ptr %515, align 8
  %2855 = insertvalue { ptr, ptr, ptr, i32 } %2853, ptr %2854, 2
  %2856 = load i32, ptr %514, align 4
  %2857 = insertvalue { ptr, ptr, ptr, i32 } %2855, i32 %2856, 3
  %2858 = call ptr @llvm.invariant.start.p0(i64 0, ptr %518)
  %2859 = call ptr @llvm.invariant.start.p0(i64 88, ptr %2850)
  %2860 = getelementptr ptr, ptr %2850, i32 %2856
  %2861 = getelementptr ptr, ptr %2860, i32 5
  %2862 = load ptr, ptr %2861, align 8
  %2863 = call ptr @behavior_wrapper(ptr %2862, { ptr, ptr, ptr, i32 } %2857, ptr %519)
  %2864 = call { ptr, i160 } %2863({ ptr, ptr, ptr, i32 } %2857, { ptr, ptr, ptr, i32 } %2857, ptr %518) #17
  store { ptr, i160 } %2864, ptr %520, align 8
  %.reload41 = load ptr, ptr %.reg2mem40, align 8
  %2865 = load ptr, ptr %.reload41, align 8
  store ptr %2865, ptr %521, align 8
  %.reload39 = load ptr, ptr %.reg2mem38, align 8
  %2866 = load i32, ptr %.reload39, align 4
  store i32 %2866, ptr %522, align 4
  %2867 = load ptr, ptr %521, align 8
  %2868 = ptrtoint ptr %2867 to i64
  %2869 = icmp eq i64 %2868, ptrtoint (ptr @nil_typ to i64)
  %2870 = icmp eq i64 %2868, 0
  %2871 = or i1 %2869, %2870
  %2872 = icmp eq i1 %2871, false
  store i1 %2872, ptr %523, align 1
  %2873 = load i1, ptr %523, align 1
  store i1 %2873, ptr %.reg2mem35, align 1
  %.reload37 = load i1, ptr %.reg2mem35, align 1
  br i1 %.reload37, label %2874, label %._crit_edge12

._crit_edge12:                                    ; preds = %2849
  br label %2888

2874:                                             ; preds = %2849
  %2875 = load i32, ptr %522, align 4
  store i32 %2875, ptr %524, align 4
  %2876 = load i32, ptr %524, align 4
  store i32 %2876, ptr %525, align 4
  store ptr @i32_typ, ptr %526, align 8
  %2877 = load ptr, ptr %526, align 8
  %2878 = insertvalue { ptr, i160 } undef, ptr %2877, 0
  %2879 = load i160, ptr %525, align 4
  %2880 = insertvalue { ptr, i160 } %2878, i160 %2879, 1
  %2881 = getelementptr [1 x ptr], ptr %527, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2881, align 8
  %2882 = call ptr @llvm.invariant.start.p0(i64 1, ptr %527)
  %2883 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2884 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2885 = getelementptr { ptr }, ptr %528, i32 0, i32 0
  store ptr %2877, ptr %2885, align 8
  %2886 = call ptr @class_behavior_wrapper(ptr %2884, ptr %528)
  call void %2886(ptr %527, { ptr, i160 } %2880) #17
  %2887 = load i32, ptr %524, align 4
  store i32 %2887, ptr %521, align 4
  br label %2888

2888:                                             ; preds = %._crit_edge12, %2874
  %.reload36 = load i1, ptr %.reg2mem35, align 1
  br i1 %.reload36, label %._crit_edge13, label %2889

._crit_edge13:                                    ; preds = %2888
  br label %2849

2889:                                             ; preds = %2888
  store i32 4, ptr %529, align 4
  %2890 = load i32, ptr %529, align 4
  %2891 = sext i32 %2890 to i64
  %2892 = mul i64 %2891, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %2893 = call ptr @bump_malloc(i64 %2892)
  store ptr %2893, ptr %530, align 8
  %2894 = getelementptr { ptr }, ptr %530, i32 0, i32 0
  %2895 = load ptr, ptr %2894, align 8
  store ptr %2895, ptr %531, align 8
  store i32 44, ptr %532, align 4
  store i32 0, ptr %533, align 4
  %2896 = load ptr, ptr %531, align 8
  %2897 = load i32, ptr %533, align 4
  %2898 = sext i32 %2897 to i64
  %2899 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2898
  %2900 = getelementptr i8, ptr %2896, i64 %2899
  %2901 = load i32, ptr %532, align 4
  store i32 %2901, ptr %2900, align 4
  store i32 55, ptr %534, align 4
  store i32 1, ptr %535, align 4
  %2902 = load ptr, ptr %531, align 8
  %2903 = load i32, ptr %535, align 4
  %2904 = sext i32 %2903 to i64
  %2905 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2904
  %2906 = getelementptr i8, ptr %2902, i64 %2905
  %2907 = load i32, ptr %534, align 4
  store i32 %2907, ptr %2906, align 4
  store i32 66, ptr %536, align 4
  store i32 2, ptr %537, align 4
  %2908 = load ptr, ptr %531, align 8
  %2909 = load i32, ptr %537, align 4
  %2910 = sext i32 %2909 to i64
  %2911 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2910
  %2912 = getelementptr i8, ptr %2908, i64 %2911
  %2913 = load i32, ptr %536, align 4
  store i32 %2913, ptr %2912, align 4
  store i32 3, ptr %538, align 4
  store i32 4, ptr %539, align 4
  store ptr @Array, ptr %540, align 8
  %2914 = getelementptr ptr, ptr %540, i32 1
  store ptr @_parameterization_Ptri32, ptr %2914, align 8
  %2915 = load ptr, ptr %540, align 8
  %2916 = getelementptr ptr, ptr %2915, i32 6
  %2917 = load ptr, ptr %2916, align 8
  %2918 = call { i64, i64 } @size_wrapper(ptr %2917, ptr %540)
  %2919 = extractvalue { i64, i64 } %2918, 0
  %2920 = call ptr @bump_malloc(i64 %2919)
  store ptr @_parameterization_Ptri32, ptr %2920, align 8
  %2921 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2920)
  store ptr @Array, ptr %544, align 8
  store ptr %2920, ptr %543, align 8
  store i32 10, ptr %541, align 4
  store i32 3, ptr %545, align 4
  store i32 4, ptr %546, align 4
  %2922 = load ptr, ptr %531, align 8
  %2923 = insertvalue { ptr } undef, ptr %2922, 0
  %2924 = load i32, ptr %545, align 4
  %2925 = load i32, ptr %546, align 4
  %2926 = load ptr, ptr %544, align 8
  %2927 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2926, 0
  %2928 = load ptr, ptr %543, align 8
  %2929 = insertvalue { ptr, ptr, ptr, i32 } %2927, ptr %2928, 1
  %2930 = load ptr, ptr %542, align 8
  %2931 = insertvalue { ptr, ptr, ptr, i32 } %2929, ptr %2930, 2
  %2932 = load i32, ptr %541, align 4
  %2933 = insertvalue { ptr, ptr, ptr, i32 } %2931, i32 %2932, 3
  %2934 = getelementptr [3 x ptr], ptr %547, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2934, align 8
  %2935 = getelementptr [3 x ptr], ptr %547, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2935, align 8
  %2936 = getelementptr [3 x ptr], ptr %547, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2936, align 8
  %2937 = call ptr @llvm.invariant.start.p0(i64 9, ptr %547)
  %2938 = call ptr @llvm.invariant.start.p0(i64 664, ptr %2926)
  %2939 = getelementptr ptr, ptr %2926, i32 %2932
  %2940 = getelementptr ptr, ptr %2939, i32 8
  %2941 = load ptr, ptr %2940, align 8
  %2942 = getelementptr { ptr, ptr, ptr }, ptr %548, i32 0, i32 0
  store ptr @buffer_typ, ptr %2942, align 8
  %2943 = getelementptr { ptr, ptr, ptr }, ptr %548, i32 0, i32 1
  store ptr @i32_typ, ptr %2943, align 8
  %2944 = getelementptr { ptr, ptr, ptr }, ptr %548, i32 0, i32 2
  store ptr @i32_typ, ptr %2944, align 8
  %2945 = call ptr @behavior_wrapper(ptr %2941, { ptr, ptr, ptr, i32 } %2933, ptr %548)
  call void %2945({ ptr, ptr, ptr, i32 } %2933, { ptr, ptr, ptr, i32 } %2933, ptr %547, { ptr } %2923, i32 %2924, i32 %2925) #17
  %2946 = load ptr, ptr %544, align 8
  %2947 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2946, 0
  %2948 = load ptr, ptr %543, align 8
  %2949 = insertvalue { ptr, ptr, ptr, i32 } %2947, ptr %2948, 1
  %2950 = load ptr, ptr %542, align 8
  %2951 = insertvalue { ptr, ptr, ptr, i32 } %2949, ptr %2950, 2
  %2952 = load i32, ptr %541, align 4
  %2953 = insertvalue { ptr, ptr, ptr, i32 } %2951, i32 %2952, 3
  %2954 = call ptr @llvm.invariant.start.p0(i64 0, ptr %549)
  %2955 = call ptr @llvm.invariant.start.p0(i64 664, ptr %2946)
  %2956 = getelementptr ptr, ptr %2946, i32 %2952
  %2957 = getelementptr ptr, ptr %2956, i32 19
  %2958 = load ptr, ptr %2957, align 8
  %2959 = call ptr @behavior_wrapper(ptr %2958, { ptr, ptr, ptr, i32 } %2953, ptr %550)
  %2960 = call { ptr, ptr, ptr, i32 } %2959({ ptr, ptr, ptr, i32 } %2953, { ptr, ptr, ptr, i32 } %2953, ptr %549) #17
  store { ptr, ptr, ptr, i32 } %2960, ptr %551, align 8
  %2961 = getelementptr { ptr, ptr, ptr, i32 }, ptr %551, i32 0, i32 0
  %2962 = getelementptr { ptr, ptr, ptr, i32 }, ptr %552, i32 0, i32 0
  %2963 = load ptr, ptr %2961, align 8
  store ptr %2963, ptr %2962, align 8
  %2964 = getelementptr { ptr, ptr, ptr, i32 }, ptr %551, i32 0, i32 1
  %2965 = getelementptr { ptr, ptr, ptr, i32 }, ptr %552, i32 0, i32 1
  %2966 = load ptr, ptr %2964, align 8
  store ptr %2966, ptr %2965, align 8
  %2967 = getelementptr { ptr, ptr, ptr, i32 }, ptr %551, i32 0, i32 2
  %2968 = getelementptr { ptr, ptr, ptr, i32 }, ptr %552, i32 0, i32 2
  %2969 = load ptr, ptr %2967, align 8
  store ptr %2969, ptr %2968, align 8
  %2970 = getelementptr { ptr, ptr, ptr, i32 }, ptr %551, i32 0, i32 3
  %2971 = getelementptr { ptr, ptr, ptr, i32 }, ptr %552, i32 0, i32 3
  %2972 = load i32, ptr %2970, align 4
  store i32 %2972, ptr %2971, align 4
  call void @set_offset(ptr %552, ptr @ArrayIterator)
  %2973 = getelementptr { ptr, ptr, ptr, i32 }, ptr %553, i32 0, i32 0
  %2974 = load ptr, ptr %2962, align 8
  store ptr %2974, ptr %2973, align 8
  %2975 = getelementptr { ptr, ptr, ptr, i32 }, ptr %553, i32 0, i32 1
  %2976 = load ptr, ptr %2965, align 8
  store ptr %2976, ptr %2975, align 8
  %2977 = getelementptr { ptr, ptr, ptr, i32 }, ptr %553, i32 0, i32 2
  %2978 = load ptr, ptr %2968, align 8
  store ptr %2978, ptr %2977, align 8
  %2979 = getelementptr { ptr, ptr, ptr, i32 }, ptr %553, i32 0, i32 3
  %2980 = load i32, ptr %2971, align 4
  store i32 %2980, ptr %2979, align 4
  call void @set_offset(ptr %553, ptr @ArrayIterator)
  %2981 = load ptr, ptr %2973, align 8
  store ptr %2981, ptr %557, align 8
  %2982 = load ptr, ptr %2975, align 8
  store ptr %2982, ptr %556, align 8
  %2983 = load ptr, ptr %2977, align 8
  store ptr %2983, ptr %555, align 8
  %2984 = load i32, ptr %2979, align 4
  store i32 %2984, ptr %554, align 4
  %2985 = getelementptr { ptr, i32 }, ptr %560, i32 0, i32 0
  store ptr %2985, ptr %.reg2mem33, align 8
  %2986 = getelementptr { ptr, i32 }, ptr %560, i32 0, i32 1
  store ptr %2986, ptr %.reg2mem31, align 8
  br label %2987

2987:                                             ; preds = %._crit_edge15, %2889
  %2988 = load ptr, ptr %557, align 8
  %2989 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2988, 0
  %2990 = load ptr, ptr %556, align 8
  %2991 = insertvalue { ptr, ptr, ptr, i32 } %2989, ptr %2990, 1
  %2992 = load ptr, ptr %555, align 8
  %2993 = insertvalue { ptr, ptr, ptr, i32 } %2991, ptr %2992, 2
  %2994 = load i32, ptr %554, align 4
  %2995 = insertvalue { ptr, ptr, ptr, i32 } %2993, i32 %2994, 3
  %2996 = call ptr @llvm.invariant.start.p0(i64 0, ptr %558)
  %2997 = call ptr @llvm.invariant.start.p0(i64 80, ptr %2988)
  %2998 = getelementptr ptr, ptr %2988, i32 %2994
  %2999 = getelementptr ptr, ptr %2998, i32 4
  %3000 = load ptr, ptr %2999, align 8
  %3001 = call ptr @behavior_wrapper(ptr %3000, { ptr, ptr, ptr, i32 } %2995, ptr %559)
  %3002 = call { ptr, i160 } %3001({ ptr, ptr, ptr, i32 } %2995, { ptr, ptr, ptr, i32 } %2995, ptr %558) #17
  store { ptr, i160 } %3002, ptr %560, align 8
  %.reload34 = load ptr, ptr %.reg2mem33, align 8
  %3003 = load ptr, ptr %.reload34, align 8
  store ptr %3003, ptr %561, align 8
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %3004 = load i32, ptr %.reload32, align 4
  store i32 %3004, ptr %562, align 4
  %3005 = load ptr, ptr %561, align 8
  %3006 = ptrtoint ptr %3005 to i64
  %3007 = icmp eq i64 %3006, ptrtoint (ptr @nil_typ to i64)
  %3008 = icmp eq i64 %3006, 0
  %3009 = or i1 %3007, %3008
  %3010 = icmp eq i1 %3009, false
  store i1 %3010, ptr %563, align 1
  %3011 = load i1, ptr %563, align 1
  store i1 %3011, ptr %.reg2mem28, align 1
  %.reload30 = load i1, ptr %.reg2mem28, align 1
  br i1 %.reload30, label %3012, label %._crit_edge14

._crit_edge14:                                    ; preds = %2987
  br label %3026

3012:                                             ; preds = %2987
  %3013 = load i32, ptr %562, align 4
  store i32 %3013, ptr %564, align 4
  %3014 = load i32, ptr %564, align 4
  store i32 %3014, ptr %565, align 4
  store ptr @i32_typ, ptr %566, align 8
  %3015 = load ptr, ptr %566, align 8
  %3016 = insertvalue { ptr, i160 } undef, ptr %3015, 0
  %3017 = load i160, ptr %565, align 4
  %3018 = insertvalue { ptr, i160 } %3016, i160 %3017, 1
  %3019 = getelementptr [1 x ptr], ptr %567, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3019, align 8
  %3020 = call ptr @llvm.invariant.start.p0(i64 1, ptr %567)
  %3021 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3022 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3023 = getelementptr { ptr }, ptr %568, i32 0, i32 0
  store ptr %3015, ptr %3023, align 8
  %3024 = call ptr @class_behavior_wrapper(ptr %3022, ptr %568)
  call void %3024(ptr %567, { ptr, i160 } %3018) #17
  %3025 = load i32, ptr %564, align 4
  store i32 %3025, ptr %561, align 4
  br label %3026

3026:                                             ; preds = %._crit_edge14, %3012
  %.reload29 = load i1, ptr %.reg2mem28, align 1
  br i1 %.reload29, label %._crit_edge15, label %3027

._crit_edge15:                                    ; preds = %3026
  br label %2987

3027:                                             ; preds = %3026
  store i8 3, ptr %569, align 1
  %3028 = load i8, ptr %569, align 1
  store i8 %3028, ptr %570, align 1
  store ptr @i8_typ, ptr %571, align 8
  %3029 = load ptr, ptr %571, align 8
  %3030 = insertvalue { ptr, i160 } undef, ptr %3029, 0
  %3031 = load i160, ptr %570, align 4
  %3032 = insertvalue { ptr, i160 } %3030, i160 %3031, 1
  %3033 = getelementptr [1 x ptr], ptr %572, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %3033, align 8
  %3034 = call ptr @llvm.invariant.start.p0(i64 1, ptr %572)
  %3035 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3036 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3037 = getelementptr { ptr }, ptr %573, i32 0, i32 0
  store ptr %3029, ptr %3037, align 8
  %3038 = call ptr @class_behavior_wrapper(ptr %3036, ptr %573)
  call void %3038(ptr %572, { ptr, i160 } %3032) #17
  store i32 6, ptr %574, align 4
  %3039 = load i32, ptr %574, align 4
  %3040 = sext i32 %3039 to i64
  %3041 = mul i64 %3040, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %3042 = call ptr @bump_malloc(i64 %3041)
  store ptr %3042, ptr %575, align 8
  %3043 = getelementptr { ptr }, ptr %575, i32 0, i32 0
  %3044 = load ptr, ptr %3043, align 8
  store ptr %3044, ptr %576, align 8
  store i32 0, ptr %577, align 4
  %3045 = load ptr, ptr %576, align 8
  %3046 = load i32, ptr %577, align 4
  %3047 = sext i32 %3046 to i64
  %3048 = mul i64 ptrtoint (ptr getelementptr ([5 x i8], ptr null, i32 1) to i64), %3047
  %3049 = getelementptr i8, ptr %3045, i64 %3048
  %3050 = load <5 x i8>, ptr @tuyik_boom, align 8
  store <5 x i8> %3050, ptr %3049, align 8
  store i32 5, ptr %578, align 4
  store i32 6, ptr %579, align 4
  store ptr @String, ptr %580, align 8
  %3051 = load ptr, ptr %580, align 8
  %3052 = getelementptr ptr, ptr %3051, i32 6
  %3053 = load ptr, ptr %3052, align 8
  %3054 = call { i64, i64 } @size_wrapper(ptr %3053, ptr %580)
  %3055 = extractvalue { i64, i64 } %3054, 0
  %3056 = call ptr @bump_malloc(i64 %3055)
  store ptr @String, ptr %584, align 8
  store ptr %3056, ptr %583, align 8
  store i32 10, ptr %581, align 4
  store i32 5, ptr %585, align 4
  store i32 6, ptr %586, align 4
  %3057 = load ptr, ptr %576, align 8
  %3058 = insertvalue { ptr } undef, ptr %3057, 0
  %3059 = load i32, ptr %585, align 4
  %3060 = load i32, ptr %586, align 4
  %3061 = load ptr, ptr %584, align 8
  %3062 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3061, 0
  %3063 = load ptr, ptr %583, align 8
  %3064 = insertvalue { ptr, ptr, ptr, i32 } %3062, ptr %3063, 1
  %3065 = load ptr, ptr %582, align 8
  %3066 = insertvalue { ptr, ptr, ptr, i32 } %3064, ptr %3065, 2
  %3067 = load i32, ptr %581, align 4
  %3068 = insertvalue { ptr, ptr, ptr, i32 } %3066, i32 %3067, 3
  %3069 = getelementptr [3 x ptr], ptr %587, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3069, align 8
  %3070 = getelementptr [3 x ptr], ptr %587, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3070, align 8
  %3071 = getelementptr [3 x ptr], ptr %587, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3071, align 8
  %3072 = call ptr @llvm.invariant.start.p0(i64 9, ptr %587)
  %3073 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3061)
  %3074 = getelementptr ptr, ptr %3061, i32 %3067
  %3075 = getelementptr ptr, ptr %3074, i32 5
  %3076 = load ptr, ptr %3075, align 8
  %3077 = getelementptr { ptr, ptr, ptr }, ptr %588, i32 0, i32 0
  store ptr @buffer_typ, ptr %3077, align 8
  %3078 = getelementptr { ptr, ptr, ptr }, ptr %588, i32 0, i32 1
  store ptr @i32_typ, ptr %3078, align 8
  %3079 = getelementptr { ptr, ptr, ptr }, ptr %588, i32 0, i32 2
  store ptr @i32_typ, ptr %3079, align 8
  %3080 = call ptr @behavior_wrapper(ptr %3076, { ptr, ptr, ptr, i32 } %3068, ptr %588)
  call void %3080({ ptr, ptr, ptr, i32 } %3068, { ptr, ptr, ptr, i32 } %3068, ptr %587, { ptr } %3058, i32 %3059, i32 %3060) #17
  %3081 = load ptr, ptr %584, align 8
  %3082 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3081, 0
  %3083 = load ptr, ptr %583, align 8
  %3084 = insertvalue { ptr, ptr, ptr, i32 } %3082, ptr %3083, 1
  %3085 = load ptr, ptr %582, align 8
  %3086 = insertvalue { ptr, ptr, ptr, i32 } %3084, ptr %3085, 2
  %3087 = load i32, ptr %581, align 4
  %3088 = insertvalue { ptr, ptr, ptr, i32 } %3086, i32 %3087, 3
  %3089 = call ptr @llvm.invariant.start.p0(i64 0, ptr %589)
  %3090 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3081)
  %3091 = getelementptr ptr, ptr %3081, i32 %3087
  %3092 = getelementptr ptr, ptr %3091, i32 16
  %3093 = load ptr, ptr %3092, align 8
  %3094 = call ptr @behavior_wrapper(ptr %3093, { ptr, ptr, ptr, i32 } %3088, ptr %590)
  %3095 = call { ptr, ptr, ptr, i32 } %3094({ ptr, ptr, ptr, i32 } %3088, { ptr, ptr, ptr, i32 } %3088, ptr %589) #17
  store { ptr, ptr, ptr, i32 } %3095, ptr %591, align 8
  %3096 = getelementptr { ptr, ptr, ptr, i32 }, ptr %591, i32 0, i32 0
  %3097 = getelementptr { ptr, ptr, ptr, i32 }, ptr %592, i32 0, i32 0
  %3098 = load ptr, ptr %3096, align 8
  store ptr %3098, ptr %3097, align 8
  %3099 = getelementptr { ptr, ptr, ptr, i32 }, ptr %591, i32 0, i32 1
  %3100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %592, i32 0, i32 1
  %3101 = load ptr, ptr %3099, align 8
  store ptr %3101, ptr %3100, align 8
  %3102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %591, i32 0, i32 2
  %3103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %592, i32 0, i32 2
  %3104 = load ptr, ptr %3102, align 8
  store ptr %3104, ptr %3103, align 8
  %3105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %591, i32 0, i32 3
  %3106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %592, i32 0, i32 3
  %3107 = load i32, ptr %3105, align 4
  store i32 %3107, ptr %3106, align 4
  call void @set_offset(ptr %592, ptr @StringIterator)
  %3108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %593, i32 0, i32 0
  %3109 = load ptr, ptr %3097, align 8
  store ptr %3109, ptr %3108, align 8
  %3110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %593, i32 0, i32 1
  %3111 = load ptr, ptr %3100, align 8
  store ptr %3111, ptr %3110, align 8
  %3112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %593, i32 0, i32 2
  %3113 = load ptr, ptr %3103, align 8
  store ptr %3113, ptr %3112, align 8
  %3114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %593, i32 0, i32 3
  %3115 = load i32, ptr %3106, align 4
  store i32 %3115, ptr %3114, align 4
  call void @set_offset(ptr %593, ptr @StringIterator)
  %3116 = load ptr, ptr %3108, align 8
  store ptr %3116, ptr %597, align 8
  %3117 = load ptr, ptr %3110, align 8
  store ptr %3117, ptr %596, align 8
  %3118 = load ptr, ptr %3112, align 8
  store ptr %3118, ptr %595, align 8
  %3119 = load i32, ptr %3114, align 4
  store i32 %3119, ptr %594, align 4
  br label %3120

3120:                                             ; preds = %._crit_edge17, %3027
  %3121 = load ptr, ptr %597, align 8
  %3122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3121, 0
  %3123 = load ptr, ptr %596, align 8
  %3124 = insertvalue { ptr, ptr, ptr, i32 } %3122, ptr %3123, 1
  %3125 = load ptr, ptr %595, align 8
  %3126 = insertvalue { ptr, ptr, ptr, i32 } %3124, ptr %3125, 2
  %3127 = load i32, ptr %594, align 4
  %3128 = insertvalue { ptr, ptr, ptr, i32 } %3126, i32 %3127, 3
  %3129 = call ptr @llvm.invariant.start.p0(i64 0, ptr %598)
  %3130 = call ptr @llvm.invariant.start.p0(i64 80, ptr %3121)
  %3131 = getelementptr ptr, ptr %3121, i32 %3127
  %3132 = getelementptr ptr, ptr %3131, i32 4
  %3133 = load ptr, ptr %3132, align 8
  %3134 = call ptr @behavior_wrapper(ptr %3133, { ptr, ptr, ptr, i32 } %3128, ptr %599)
  %3135 = call { ptr, i160 } %3134({ ptr, ptr, ptr, i32 } %3128, { ptr, ptr, ptr, i32 } %3128, ptr %598) #17
  store { ptr, i160 } %3135, ptr %600, align 8
  %3136 = load ptr, ptr %600, align 8
  %3137 = ptrtoint ptr %3136 to i64
  %3138 = icmp eq i64 %3137, ptrtoint (ptr @nil_typ to i64)
  %3139 = icmp eq i64 %3137, 0
  %3140 = or i1 %3138, %3139
  %3141 = icmp eq i1 %3140, false
  store i1 %3141, ptr %601, align 1
  %3142 = load i1, ptr %601, align 1
  store i1 %3142, ptr %.reg2mem25, align 1
  %.reload27 = load i1, ptr %.reg2mem25, align 1
  br i1 %.reload27, label %3143, label %._crit_edge16

._crit_edge16:                                    ; preds = %3120
  br label %3180

3143:                                             ; preds = %3120
  %3144 = getelementptr { ptr, i160 }, ptr %600, i32 0, i32 0
  %3145 = getelementptr { ptr, i160 }, ptr %602, i32 0, i32 0
  %3146 = load ptr, ptr %3144, align 8
  store ptr %3146, ptr %3145, align 8
  %3147 = getelementptr { ptr, i160 }, ptr %600, i32 0, i32 1
  %3148 = getelementptr { ptr, i160 }, ptr %602, i32 0, i32 1
  %3149 = load i160, ptr %3147, align 4
  store i160 %3149, ptr %3148, align 4
  call void @set_offset(ptr %602, ptr @Character)
  %3150 = load ptr, ptr %3145, align 8
  %3151 = insertvalue { ptr, i160 } undef, ptr %3150, 0
  %3152 = load i160, ptr %3148, align 4
  %3153 = insertvalue { ptr, i160 } %3151, i160 %3152, 1
  %3154 = getelementptr [1 x ptr], ptr %603, i32 0, i32 0
  store ptr @_parameterization_Character, ptr %3154, align 8
  %3155 = call ptr @llvm.invariant.start.p0(i64 1, ptr %603)
  %3156 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3157 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3158 = getelementptr { ptr }, ptr %604, i32 0, i32 0
  store ptr %3150, ptr %3158, align 8
  %3159 = call ptr @class_behavior_wrapper(ptr %3157, ptr %604)
  call void %3159(ptr %603, { ptr, i160 } %3153) #17
  %3160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %602, i32 0, i32 0
  %3161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %605, i32 0, i32 0
  %3162 = load ptr, ptr %3160, align 8
  store ptr %3162, ptr %3161, align 8
  %3163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %602, i32 0, i32 1
  %3164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %605, i32 0, i32 1
  %3165 = load ptr, ptr %3163, align 8
  store ptr %3165, ptr %3164, align 8
  %3166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %602, i32 0, i32 2
  %3167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %605, i32 0, i32 2
  %3168 = load ptr, ptr %3166, align 8
  store ptr %3168, ptr %3167, align 8
  %3169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %602, i32 0, i32 3
  %3170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %605, i32 0, i32 3
  %3171 = load i32, ptr %3169, align 4
  store i32 %3171, ptr %3170, align 4
  call void @set_offset(ptr %605, ptr @Character)
  %3172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 0
  %3173 = load ptr, ptr %3161, align 8
  store ptr %3173, ptr %3172, align 8
  %3174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 1
  %3175 = load ptr, ptr %3164, align 8
  store ptr %3175, ptr %3174, align 8
  %3176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 2
  %3177 = load ptr, ptr %3167, align 8
  store ptr %3177, ptr %3176, align 8
  %3178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 3
  %3179 = load i32, ptr %3170, align 4
  store i32 %3179, ptr %3178, align 4
  br label %3180

3180:                                             ; preds = %._crit_edge16, %3143
  %.reload26 = load i1, ptr %.reg2mem25, align 1
  br i1 %.reload26, label %._crit_edge17, label %3181

._crit_edge17:                                    ; preds = %3180
  br label %3120

3181:                                             ; preds = %3180
  store i32 4, ptr %606, align 4
  %3182 = load i32, ptr %606, align 4
  %3183 = sext i32 %3182 to i64
  %3184 = mul i64 %3183, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %3185 = call ptr @bump_malloc(i64 %3184)
  store ptr %3185, ptr %607, align 8
  %3186 = getelementptr { ptr }, ptr %607, i32 0, i32 0
  %3187 = load ptr, ptr %3186, align 8
  store ptr %3187, ptr %608, align 8
  store i32 1, ptr %609, align 4
  store i32 0, ptr %610, align 4
  %3188 = load ptr, ptr %608, align 8
  %3189 = load i32, ptr %610, align 4
  %3190 = sext i32 %3189 to i64
  %3191 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3190
  %3192 = getelementptr i8, ptr %3188, i64 %3191
  %3193 = load i32, ptr %609, align 4
  store i32 %3193, ptr %3192, align 4
  store i32 2, ptr %611, align 4
  store i32 1, ptr %612, align 4
  %3194 = load ptr, ptr %608, align 8
  %3195 = load i32, ptr %612, align 4
  %3196 = sext i32 %3195 to i64
  %3197 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3196
  %3198 = getelementptr i8, ptr %3194, i64 %3197
  %3199 = load i32, ptr %611, align 4
  store i32 %3199, ptr %3198, align 4
  store i32 3, ptr %613, align 4
  store i32 2, ptr %614, align 4
  %3200 = load ptr, ptr %608, align 8
  %3201 = load i32, ptr %614, align 4
  %3202 = sext i32 %3201 to i64
  %3203 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3202
  %3204 = getelementptr i8, ptr %3200, i64 %3203
  %3205 = load i32, ptr %613, align 4
  store i32 %3205, ptr %3204, align 4
  store i32 3, ptr %615, align 4
  store i32 4, ptr %616, align 4
  store ptr @Array, ptr %617, align 8
  %3206 = getelementptr ptr, ptr %617, i32 1
  store ptr @_parameterization_Ptri32, ptr %3206, align 8
  %3207 = load ptr, ptr %617, align 8
  %3208 = getelementptr ptr, ptr %3207, i32 6
  %3209 = load ptr, ptr %3208, align 8
  %3210 = call { i64, i64 } @size_wrapper(ptr %3209, ptr %617)
  %3211 = extractvalue { i64, i64 } %3210, 0
  %3212 = call ptr @bump_malloc(i64 %3211)
  store ptr @_parameterization_Ptri32, ptr %3212, align 8
  %3213 = call ptr @llvm.invariant.start.p0(i64 8, ptr %3212)
  store ptr @Array, ptr %621, align 8
  store ptr %3212, ptr %620, align 8
  store i32 10, ptr %618, align 4
  store i32 3, ptr %622, align 4
  store i32 4, ptr %623, align 4
  %3214 = load ptr, ptr %608, align 8
  %3215 = insertvalue { ptr } undef, ptr %3214, 0
  %3216 = load i32, ptr %622, align 4
  %3217 = load i32, ptr %623, align 4
  %3218 = load ptr, ptr %621, align 8
  %3219 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3218, 0
  %3220 = load ptr, ptr %620, align 8
  %3221 = insertvalue { ptr, ptr, ptr, i32 } %3219, ptr %3220, 1
  %3222 = load ptr, ptr %619, align 8
  %3223 = insertvalue { ptr, ptr, ptr, i32 } %3221, ptr %3222, 2
  %3224 = load i32, ptr %618, align 4
  %3225 = insertvalue { ptr, ptr, ptr, i32 } %3223, i32 %3224, 3
  %3226 = getelementptr [3 x ptr], ptr %624, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3226, align 8
  %3227 = getelementptr [3 x ptr], ptr %624, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3227, align 8
  %3228 = getelementptr [3 x ptr], ptr %624, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3228, align 8
  %3229 = call ptr @llvm.invariant.start.p0(i64 9, ptr %624)
  %3230 = call ptr @llvm.invariant.start.p0(i64 664, ptr %3218)
  %3231 = getelementptr ptr, ptr %3218, i32 %3224
  %3232 = getelementptr ptr, ptr %3231, i32 8
  %3233 = load ptr, ptr %3232, align 8
  %3234 = getelementptr { ptr, ptr, ptr }, ptr %625, i32 0, i32 0
  store ptr @buffer_typ, ptr %3234, align 8
  %3235 = getelementptr { ptr, ptr, ptr }, ptr %625, i32 0, i32 1
  store ptr @i32_typ, ptr %3235, align 8
  %3236 = getelementptr { ptr, ptr, ptr }, ptr %625, i32 0, i32 2
  store ptr @i32_typ, ptr %3236, align 8
  %3237 = call ptr @behavior_wrapper(ptr %3233, { ptr, ptr, ptr, i32 } %3225, ptr %625)
  call void %3237({ ptr, ptr, ptr, i32 } %3225, { ptr, ptr, ptr, i32 } %3225, ptr %624, { ptr } %3215, i32 %3216, i32 %3217) #17
  %3238 = load ptr, ptr %621, align 8
  %3239 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3238, 0
  %3240 = load ptr, ptr %620, align 8
  %3241 = insertvalue { ptr, ptr, ptr, i32 } %3239, ptr %3240, 1
  %3242 = load ptr, ptr %619, align 8
  %3243 = insertvalue { ptr, ptr, ptr, i32 } %3241, ptr %3242, 2
  %3244 = load i32, ptr %618, align 4
  %3245 = insertvalue { ptr, ptr, ptr, i32 } %3243, i32 %3244, 3
  %3246 = call ptr @llvm.invariant.start.p0(i64 0, ptr %626)
  %3247 = call ptr @llvm.invariant.start.p0(i64 664, ptr %3238)
  %3248 = getelementptr ptr, ptr %3238, i32 %3244
  %3249 = getelementptr ptr, ptr %3248, i32 30
  %3250 = load ptr, ptr %3249, align 8
  %3251 = call ptr @behavior_wrapper(ptr %3250, { ptr, ptr, ptr, i32 } %3245, ptr %627)
  %3252 = call { ptr, ptr, ptr, i32 } %3251({ ptr, ptr, ptr, i32 } %3245, { ptr, ptr, ptr, i32 } %3245, ptr %626) #17
  store { ptr, ptr, ptr, i32 } %3252, ptr %628, align 8
  %3253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %628, i32 0, i32 0
  %3254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %629, i32 0, i32 0
  %3255 = load ptr, ptr %3253, align 8
  store ptr %3255, ptr %3254, align 8
  %3256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %628, i32 0, i32 1
  %3257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %629, i32 0, i32 1
  %3258 = load ptr, ptr %3256, align 8
  store ptr %3258, ptr %3257, align 8
  %3259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %628, i32 0, i32 2
  %3260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %629, i32 0, i32 2
  %3261 = load ptr, ptr %3259, align 8
  store ptr %3261, ptr %3260, align 8
  %3262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %628, i32 0, i32 3
  %3263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %629, i32 0, i32 3
  %3264 = load i32, ptr %3262, align 4
  store i32 %3264, ptr %3263, align 4
  call void @set_offset(ptr %629, ptr @String)
  %3265 = getelementptr { ptr, i160 }, ptr %629, i32 0, i32 0
  %3266 = load ptr, ptr %3265, align 8
  %3267 = insertvalue { ptr, i160 } undef, ptr %3266, 0
  %3268 = getelementptr { ptr, i160 }, ptr %629, i32 0, i32 1
  %3269 = load i160, ptr %3268, align 4
  %3270 = insertvalue { ptr, i160 } %3267, i160 %3269, 1
  %3271 = getelementptr [1 x ptr], ptr %630, i32 0, i32 0
  store ptr @_parameterization_String, ptr %3271, align 8
  %3272 = call ptr @llvm.invariant.start.p0(i64 1, ptr %630)
  %3273 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3274 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3275 = getelementptr { ptr }, ptr %631, i32 0, i32 0
  store ptr %3266, ptr %3275, align 8
  %3276 = call ptr @class_behavior_wrapper(ptr %3274, ptr %631)
  call void %3276(ptr %630, { ptr, i160 } %3270) #17
  store i32 77, ptr %632, align 4
  store ptr @Integer2, ptr %633, align 8
  %3277 = load ptr, ptr %633, align 8
  %3278 = getelementptr ptr, ptr %3277, i32 6
  %3279 = load ptr, ptr %3278, align 8
  %3280 = call { i64, i64 } @size_wrapper(ptr %3279, ptr %633)
  %3281 = extractvalue { i64, i64 } %3280, 0
  %3282 = call ptr @bump_malloc(i64 %3281)
  store ptr @Integer2, ptr %637, align 8
  store ptr %3282, ptr %636, align 8
  store i32 10, ptr %634, align 4
  store i32 77, ptr %638, align 4
  %3283 = load i32, ptr %638, align 4
  %3284 = load ptr, ptr %637, align 8
  %3285 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3284, 0
  %3286 = load ptr, ptr %636, align 8
  %3287 = insertvalue { ptr, ptr, ptr, i32 } %3285, ptr %3286, 1
  %3288 = load ptr, ptr %635, align 8
  %3289 = insertvalue { ptr, ptr, ptr, i32 } %3287, ptr %3288, 2
  %3290 = load i32, ptr %634, align 4
  %3291 = insertvalue { ptr, ptr, ptr, i32 } %3289, i32 %3290, 3
  %3292 = getelementptr [1 x ptr], ptr %639, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3292, align 8
  %3293 = call ptr @llvm.invariant.start.p0(i64 1, ptr %639)
  %3294 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3284)
  %3295 = getelementptr ptr, ptr %3284, i32 %3290
  %3296 = getelementptr ptr, ptr %3295, i32 2
  %3297 = load ptr, ptr %3296, align 8
  %3298 = getelementptr { ptr }, ptr %640, i32 0, i32 0
  store ptr @i32_typ, ptr %3298, align 8
  %3299 = call ptr @behavior_wrapper(ptr %3297, { ptr, ptr, ptr, i32 } %3291, ptr %640)
  call void %3299({ ptr, ptr, ptr, i32 } %3291, { ptr, ptr, ptr, i32 } %3291, ptr %639, i32 %3283) #17
  %3300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %641, i32 0, i32 0
  %3301 = load ptr, ptr %637, align 8
  store ptr %3301, ptr %3300, align 8
  %3302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %641, i32 0, i32 1
  %3303 = load ptr, ptr %636, align 8
  store ptr %3303, ptr %3302, align 8
  %3304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %641, i32 0, i32 2
  %3305 = load ptr, ptr %635, align 8
  store ptr %3305, ptr %3304, align 8
  %3306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %641, i32 0, i32 3
  %3307 = load i32, ptr %634, align 4
  store i32 %3307, ptr %3306, align 4
  call void @set_offset(ptr %641, ptr @Integer2)
  %3308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %642, i32 0, i32 0
  %3309 = load ptr, ptr %3300, align 8
  store ptr %3309, ptr %3308, align 8
  %3310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %642, i32 0, i32 1
  %3311 = load ptr, ptr %3302, align 8
  store ptr %3311, ptr %3310, align 8
  %3312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %642, i32 0, i32 2
  %3313 = load ptr, ptr %3304, align 8
  store ptr %3313, ptr %3312, align 8
  %3314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %642, i32 0, i32 3
  %3315 = load i32, ptr %3306, align 4
  store i32 %3315, ptr %3314, align 4
  %3316 = load ptr, ptr %3308, align 8
  %3317 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3316, 0
  %3318 = load ptr, ptr %3310, align 8
  %3319 = insertvalue { ptr, ptr, ptr, i32 } %3317, ptr %3318, 1
  %3320 = load ptr, ptr %3312, align 8
  %3321 = insertvalue { ptr, ptr, ptr, i32 } %3319, ptr %3320, 2
  %3322 = load i32, ptr %3314, align 4
  %3323 = insertvalue { ptr, ptr, ptr, i32 } %3321, i32 %3322, 3
  %3324 = call ptr @llvm.invariant.start.p0(i64 0, ptr %643)
  %3325 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3316)
  %3326 = getelementptr ptr, ptr %3316, i32 %3322
  %3327 = getelementptr ptr, ptr %3326, i32 7
  %3328 = load ptr, ptr %3327, align 8
  %3329 = call ptr @behavior_wrapper(ptr %3328, { ptr, ptr, ptr, i32 } %3323, ptr %644)
  call void %3329({ ptr, ptr, ptr, i32 } %3323, { ptr, ptr, ptr, i32 } %3323, ptr %643) #17
  %3330 = getelementptr { ptr, i160 }, ptr %642, i32 0, i32 0
  %3331 = load ptr, ptr %3330, align 8
  %3332 = insertvalue { ptr, i160 } undef, ptr %3331, 0
  %3333 = getelementptr { ptr, i160 }, ptr %642, i32 0, i32 1
  %3334 = load i160, ptr %3333, align 4
  %3335 = insertvalue { ptr, i160 } %3332, i160 %3334, 1
  %3336 = getelementptr [1 x ptr], ptr %645, i32 0, i32 0
  store ptr @_parameterization_Integer2, ptr %3336, align 8
  %3337 = call ptr @llvm.invariant.start.p0(i64 1, ptr %645)
  %3338 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3339 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3340 = getelementptr { ptr }, ptr %646, i32 0, i32 0
  store ptr %3331, ptr %3340, align 8
  %3341 = call ptr @class_behavior_wrapper(ptr %3339, ptr %646)
  call void %3341(ptr %645, { ptr, i160 } %3335) #17
  %3342 = load ptr, ptr %3308, align 8
  %3343 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3342, 0
  %3344 = load ptr, ptr %3310, align 8
  %3345 = insertvalue { ptr, ptr, ptr, i32 } %3343, ptr %3344, 1
  %3346 = load ptr, ptr %3312, align 8
  %3347 = insertvalue { ptr, ptr, ptr, i32 } %3345, ptr %3346, 2
  %3348 = load i32, ptr %3314, align 4
  %3349 = insertvalue { ptr, ptr, ptr, i32 } %3347, i32 %3348, 3
  %3350 = call ptr @llvm.invariant.start.p0(i64 0, ptr %647)
  %3351 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3342)
  %3352 = getelementptr ptr, ptr %3342, i32 %3348
  %3353 = getelementptr ptr, ptr %3352, i32 8
  %3354 = load ptr, ptr %3353, align 8
  %3355 = call ptr @behavior_wrapper(ptr %3354, { ptr, ptr, ptr, i32 } %3349, ptr %648)
  call void %3355({ ptr, ptr, ptr, i32 } %3349, { ptr, ptr, ptr, i32 } %3349, ptr %647) #17
  store i32 5, ptr %649, align 4
  %3356 = load i32, ptr %649, align 4
  store i32 0, ptr %650, align 4
  store i32 25, ptr %651, align 4
  store ptr @Range, ptr %652, align 8
  %3357 = load ptr, ptr %652, align 8
  %3358 = getelementptr ptr, ptr %3357, i32 6
  %3359 = load ptr, ptr %3358, align 8
  %3360 = call { i64, i64 } @size_wrapper(ptr %3359, ptr %652)
  %3361 = extractvalue { i64, i64 } %3360, 0
  %3362 = call ptr @bump_malloc(i64 %3361)
  store ptr @Range, ptr %656, align 8
  store ptr %3362, ptr %655, align 8
  store i32 10, ptr %653, align 4
  store i32 0, ptr %657, align 4
  store i32 25, ptr %658, align 4
  %3363 = load i32, ptr %657, align 4
  %3364 = load i32, ptr %658, align 4
  %3365 = load ptr, ptr %656, align 8
  %3366 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3365, 0
  %3367 = load ptr, ptr %655, align 8
  %3368 = insertvalue { ptr, ptr, ptr, i32 } %3366, ptr %3367, 1
  %3369 = load ptr, ptr %654, align 8
  %3370 = insertvalue { ptr, ptr, ptr, i32 } %3368, ptr %3369, 2
  %3371 = load i32, ptr %653, align 4
  %3372 = insertvalue { ptr, ptr, ptr, i32 } %3370, i32 %3371, 3
  %3373 = getelementptr [2 x ptr], ptr %659, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3373, align 8
  %3374 = getelementptr [2 x ptr], ptr %659, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3374, align 8
  %3375 = call ptr @llvm.invariant.start.p0(i64 4, ptr %659)
  %3376 = call ptr @llvm.invariant.start.p0(i64 440, ptr %3365)
  %3377 = getelementptr ptr, ptr %3365, i32 %3371
  %3378 = getelementptr ptr, ptr %3377, i32 5
  %3379 = load ptr, ptr %3378, align 8
  %3380 = getelementptr { ptr, ptr }, ptr %660, i32 0, i32 0
  store ptr @i32_typ, ptr %3380, align 8
  %3381 = getelementptr { ptr, ptr }, ptr %660, i32 0, i32 1
  store ptr @i32_typ, ptr %3381, align 8
  %3382 = call ptr @behavior_wrapper(ptr %3379, { ptr, ptr, ptr, i32 } %3372, ptr %660)
  call void %3382({ ptr, ptr, ptr, i32 } %3372, { ptr, ptr, ptr, i32 } %3372, ptr %659, i32 %3363, i32 %3364) #17
  %3383 = load ptr, ptr %656, align 8
  %3384 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3383, 0
  %3385 = load ptr, ptr %655, align 8
  %3386 = insertvalue { ptr, ptr, ptr, i32 } %3384, ptr %3385, 1
  %3387 = load ptr, ptr %654, align 8
  %3388 = insertvalue { ptr, ptr, ptr, i32 } %3386, ptr %3387, 2
  %3389 = load i32, ptr %653, align 4
  %3390 = insertvalue { ptr, ptr, ptr, i32 } %3388, i32 %3389, 3
  %3391 = getelementptr [1 x ptr], ptr %661, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3391, align 8
  %3392 = call ptr @llvm.invariant.start.p0(i64 1, ptr %661)
  %3393 = call ptr @llvm.invariant.start.p0(i64 440, ptr %3383)
  %3394 = getelementptr ptr, ptr %3383, i32 %3389
  %3395 = getelementptr ptr, ptr %3394, i32 6
  %3396 = load ptr, ptr %3395, align 8
  %3397 = getelementptr { ptr }, ptr %662, i32 0, i32 0
  store ptr @i32_typ, ptr %3397, align 8
  %3398 = call ptr @behavior_wrapper(ptr %3396, { ptr, ptr, ptr, i32 } %3390, ptr %662)
  %3399 = call { ptr, ptr, ptr, i32 } %3398({ ptr, ptr, ptr, i32 } %3390, { ptr, ptr, ptr, i32 } %3390, ptr %661, i32 %3356) #17
  store { ptr, ptr, ptr, i32 } %3399, ptr %663, align 8
  %3400 = getelementptr { ptr, ptr, ptr, i32 }, ptr %663, i32 0, i32 0
  %3401 = getelementptr { ptr, ptr, ptr, i32 }, ptr %664, i32 0, i32 0
  %3402 = load ptr, ptr %3400, align 8
  store ptr %3402, ptr %3401, align 8
  %3403 = getelementptr { ptr, ptr, ptr, i32 }, ptr %663, i32 0, i32 1
  %3404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %664, i32 0, i32 1
  %3405 = load ptr, ptr %3403, align 8
  store ptr %3405, ptr %3404, align 8
  %3406 = getelementptr { ptr, ptr, ptr, i32 }, ptr %663, i32 0, i32 2
  %3407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %664, i32 0, i32 2
  %3408 = load ptr, ptr %3406, align 8
  store ptr %3408, ptr %3407, align 8
  %3409 = getelementptr { ptr, ptr, ptr, i32 }, ptr %663, i32 0, i32 3
  %3410 = getelementptr { ptr, ptr, ptr, i32 }, ptr %664, i32 0, i32 3
  %3411 = load i32, ptr %3409, align 4
  store i32 %3411, ptr %3410, align 4
  call void @set_offset(ptr %664, ptr @Range)
  %3412 = load ptr, ptr %3401, align 8
  %3413 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3412, 0
  %3414 = load ptr, ptr %3404, align 8
  %3415 = insertvalue { ptr, ptr, ptr, i32 } %3413, ptr %3414, 1
  %3416 = load ptr, ptr %3407, align 8
  %3417 = insertvalue { ptr, ptr, ptr, i32 } %3415, ptr %3416, 2
  %3418 = load i32, ptr %3410, align 4
  %3419 = insertvalue { ptr, ptr, ptr, i32 } %3417, i32 %3418, 3
  %3420 = call ptr @llvm.invariant.start.p0(i64 0, ptr %665)
  %3421 = call ptr @llvm.invariant.start.p0(i64 440, ptr %3412)
  %3422 = getelementptr ptr, ptr %3412, i32 %3418
  %3423 = getelementptr ptr, ptr %3422, i32 7
  %3424 = load ptr, ptr %3423, align 8
  %3425 = call ptr @behavior_wrapper(ptr %3424, { ptr, ptr, ptr, i32 } %3419, ptr %666)
  %3426 = call { ptr, ptr, ptr, i32 } %3425({ ptr, ptr, ptr, i32 } %3419, { ptr, ptr, ptr, i32 } %3419, ptr %665) #17
  store { ptr, ptr, ptr, i32 } %3426, ptr %667, align 8
  %3427 = getelementptr { ptr, ptr, ptr, i32 }, ptr %667, i32 0, i32 0
  %3428 = getelementptr { ptr, ptr, ptr, i32 }, ptr %668, i32 0, i32 0
  %3429 = load ptr, ptr %3427, align 8
  store ptr %3429, ptr %3428, align 8
  %3430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %667, i32 0, i32 1
  %3431 = getelementptr { ptr, ptr, ptr, i32 }, ptr %668, i32 0, i32 1
  %3432 = load ptr, ptr %3430, align 8
  store ptr %3432, ptr %3431, align 8
  %3433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %667, i32 0, i32 2
  %3434 = getelementptr { ptr, ptr, ptr, i32 }, ptr %668, i32 0, i32 2
  %3435 = load ptr, ptr %3433, align 8
  store ptr %3435, ptr %3434, align 8
  %3436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %667, i32 0, i32 3
  %3437 = getelementptr { ptr, ptr, ptr, i32 }, ptr %668, i32 0, i32 3
  %3438 = load i32, ptr %3436, align 4
  store i32 %3438, ptr %3437, align 4
  call void @set_offset(ptr %668, ptr @RangeIterator)
  %3439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %669, i32 0, i32 0
  %3440 = load ptr, ptr %3428, align 8
  store ptr %3440, ptr %3439, align 8
  %3441 = getelementptr { ptr, ptr, ptr, i32 }, ptr %669, i32 0, i32 1
  %3442 = load ptr, ptr %3431, align 8
  store ptr %3442, ptr %3441, align 8
  %3443 = getelementptr { ptr, ptr, ptr, i32 }, ptr %669, i32 0, i32 2
  %3444 = load ptr, ptr %3434, align 8
  store ptr %3444, ptr %3443, align 8
  %3445 = getelementptr { ptr, ptr, ptr, i32 }, ptr %669, i32 0, i32 3
  %3446 = load i32, ptr %3437, align 4
  store i32 %3446, ptr %3445, align 4
  call void @set_offset(ptr %669, ptr @RangeIterator)
  %3447 = load ptr, ptr %3439, align 8
  store ptr %3447, ptr %673, align 8
  %3448 = load ptr, ptr %3441, align 8
  store ptr %3448, ptr %672, align 8
  %3449 = load ptr, ptr %3443, align 8
  store ptr %3449, ptr %671, align 8
  %3450 = load i32, ptr %3445, align 4
  store i32 %3450, ptr %670, align 4
  %3451 = getelementptr { ptr, i32 }, ptr %676, i32 0, i32 0
  store ptr %3451, ptr %.reg2mem23, align 8
  %3452 = getelementptr { ptr, i32 }, ptr %676, i32 0, i32 1
  store ptr %3452, ptr %.reg2mem21, align 8
  br label %3453

3453:                                             ; preds = %._crit_edge19, %3181
  %3454 = load ptr, ptr %673, align 8
  %3455 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3454, 0
  %3456 = load ptr, ptr %672, align 8
  %3457 = insertvalue { ptr, ptr, ptr, i32 } %3455, ptr %3456, 1
  %3458 = load ptr, ptr %671, align 8
  %3459 = insertvalue { ptr, ptr, ptr, i32 } %3457, ptr %3458, 2
  %3460 = load i32, ptr %670, align 4
  %3461 = insertvalue { ptr, ptr, ptr, i32 } %3459, i32 %3460, 3
  %3462 = call ptr @llvm.invariant.start.p0(i64 0, ptr %674)
  %3463 = call ptr @llvm.invariant.start.p0(i64 88, ptr %3454)
  %3464 = getelementptr ptr, ptr %3454, i32 %3460
  %3465 = getelementptr ptr, ptr %3464, i32 5
  %3466 = load ptr, ptr %3465, align 8
  %3467 = call ptr @behavior_wrapper(ptr %3466, { ptr, ptr, ptr, i32 } %3461, ptr %675)
  %3468 = call { ptr, i160 } %3467({ ptr, ptr, ptr, i32 } %3461, { ptr, ptr, ptr, i32 } %3461, ptr %674) #17
  store { ptr, i160 } %3468, ptr %676, align 8
  %.reload24 = load ptr, ptr %.reg2mem23, align 8
  %3469 = load ptr, ptr %.reload24, align 8
  store ptr %3469, ptr %677, align 8
  %.reload22 = load ptr, ptr %.reg2mem21, align 8
  %3470 = load i32, ptr %.reload22, align 4
  store i32 %3470, ptr %678, align 4
  %3471 = load ptr, ptr %677, align 8
  %3472 = ptrtoint ptr %3471 to i64
  %3473 = icmp eq i64 %3472, ptrtoint (ptr @nil_typ to i64)
  %3474 = icmp eq i64 %3472, 0
  %3475 = or i1 %3473, %3474
  %3476 = icmp eq i1 %3475, false
  store i1 %3476, ptr %679, align 1
  %3477 = load i1, ptr %679, align 1
  store i1 %3477, ptr %.reg2mem, align 1
  %.reload20 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload20, label %3478, label %._crit_edge18

._crit_edge18:                                    ; preds = %3453
  br label %3492

3478:                                             ; preds = %3453
  %3479 = load i32, ptr %678, align 4
  store i32 %3479, ptr %680, align 4
  %3480 = load i32, ptr %680, align 4
  store i32 %3480, ptr %681, align 4
  store ptr @i32_typ, ptr %682, align 8
  %3481 = load ptr, ptr %682, align 8
  %3482 = insertvalue { ptr, i160 } undef, ptr %3481, 0
  %3483 = load i160, ptr %681, align 4
  %3484 = insertvalue { ptr, i160 } %3482, i160 %3483, 1
  %3485 = getelementptr [1 x ptr], ptr %683, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3485, align 8
  %3486 = call ptr @llvm.invariant.start.p0(i64 1, ptr %683)
  %3487 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3488 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3489 = getelementptr { ptr }, ptr %684, i32 0, i32 0
  store ptr %3481, ptr %3489, align 8
  %3490 = call ptr @class_behavior_wrapper(ptr %3488, ptr %684)
  call void %3490(ptr %683, { ptr, i160 } %3484) #17
  %3491 = load i32, ptr %680, align 4
  store i32 %3491, ptr %677, align 4
  br label %3492

3492:                                             ; preds = %._crit_edge18, %3478
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge19, label %3493

._crit_edge19:                                    ; preds = %3492
  br label %3453

3493:                                             ; preds = %3492
  store ptr @_functionliteral_mhtgabwkij, ptr %685, align 8
  store ptr @_functionliteral_fglekynkfk, ptr %686, align 8
  store ptr @_functionliteral_ayevdkrfrq, ptr %687, align 8
  store i32 0, ptr %688, align 4
  store ptr @i32_typ, ptr %690, align 8
  %3494 = load i32, ptr %688, align 4
  store i32 %3494, ptr %689, align 4
  %3495 = load ptr, ptr %690, align 8
  %3496 = insertvalue { ptr, i160 } undef, ptr %3495, 0
  %3497 = load i160, ptr %689, align 4
  %3498 = insertvalue { ptr, i160 } %3496, i160 %3497, 1
  %3499 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %3499)
  %3500 = load ptr, ptr %685, align 8
  call void @llvm.init.trampoline(ptr %3499, ptr @qbvmigpxki, ptr %3500)
  %3501 = call ptr @adjust_trampoline(ptr %3499)
  store ptr %3501, ptr %691, align 8
  %3502 = call ptr @llvm.invariant.start.p0(i64 24, ptr %3499)
  %3503 = getelementptr { ptr }, ptr %691, i32 0, i32 0
  %3504 = load ptr, ptr %3503, align 8
  %3505 = insertvalue { ptr } undef, ptr %3504, 0
  %3506 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %3506)
  %3507 = load ptr, ptr %686, align 8
  call void @llvm.init.trampoline(ptr %3506, ptr @tdrrecbgaa, ptr %3507)
  %3508 = call ptr @adjust_trampoline(ptr %3506)
  store ptr %3508, ptr %692, align 8
  %3509 = call ptr @llvm.invariant.start.p0(i64 24, ptr %3506)
  %3510 = getelementptr { ptr }, ptr %692, i32 0, i32 0
  %3511 = load ptr, ptr %3510, align 8
  %3512 = insertvalue { ptr } undef, ptr %3511, 0
  store i32 5, ptr %693, align 4
  %3513 = load i32, ptr %693, align 4
  %3514 = sext i32 %3513 to i64
  %3515 = mul i64 %3514, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %3516 = call ptr @bump_malloc(i64 %3515)
  store ptr %3516, ptr %694, align 8
  %3517 = getelementptr { ptr }, ptr %694, i32 0, i32 0
  %3518 = load ptr, ptr %3517, align 8
  store ptr %3518, ptr %695, align 8
  store i32 1, ptr %696, align 4
  store i32 0, ptr %697, align 4
  %3519 = load ptr, ptr %695, align 8
  %3520 = load i32, ptr %697, align 4
  %3521 = sext i32 %3520 to i64
  %3522 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3521
  %3523 = getelementptr i8, ptr %3519, i64 %3522
  %3524 = load i32, ptr %696, align 4
  store i32 %3524, ptr %3523, align 4
  store i32 2, ptr %698, align 4
  store i32 1, ptr %699, align 4
  %3525 = load ptr, ptr %695, align 8
  %3526 = load i32, ptr %699, align 4
  %3527 = sext i32 %3526 to i64
  %3528 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3527
  %3529 = getelementptr i8, ptr %3525, i64 %3528
  %3530 = load i32, ptr %698, align 4
  store i32 %3530, ptr %3529, align 4
  store i32 3, ptr %700, align 4
  store i32 2, ptr %701, align 4
  %3531 = load ptr, ptr %695, align 8
  %3532 = load i32, ptr %701, align 4
  %3533 = sext i32 %3532 to i64
  %3534 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3533
  %3535 = getelementptr i8, ptr %3531, i64 %3534
  %3536 = load i32, ptr %700, align 4
  store i32 %3536, ptr %3535, align 4
  store i32 4, ptr %702, align 4
  store i32 3, ptr %703, align 4
  %3537 = load ptr, ptr %695, align 8
  %3538 = load i32, ptr %703, align 4
  %3539 = sext i32 %3538 to i64
  %3540 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3539
  %3541 = getelementptr i8, ptr %3537, i64 %3540
  %3542 = load i32, ptr %702, align 4
  store i32 %3542, ptr %3541, align 4
  store i32 4, ptr %704, align 4
  store i32 5, ptr %705, align 4
  store ptr @Array, ptr %706, align 8
  %3543 = getelementptr ptr, ptr %706, i32 1
  store ptr @_parameterization_Ptri32, ptr %3543, align 8
  %3544 = load ptr, ptr %706, align 8
  %3545 = getelementptr ptr, ptr %3544, i32 6
  %3546 = load ptr, ptr %3545, align 8
  %3547 = call { i64, i64 } @size_wrapper(ptr %3546, ptr %706)
  %3548 = extractvalue { i64, i64 } %3547, 0
  %3549 = call ptr @bump_malloc(i64 %3548)
  store ptr @_parameterization_Ptri32, ptr %3549, align 8
  %3550 = call ptr @llvm.invariant.start.p0(i64 8, ptr %3549)
  store ptr @Array, ptr %710, align 8
  store ptr %3549, ptr %709, align 8
  store i32 10, ptr %707, align 4
  store i32 4, ptr %711, align 4
  store i32 5, ptr %712, align 4
  %3551 = load ptr, ptr %695, align 8
  %3552 = insertvalue { ptr } undef, ptr %3551, 0
  %3553 = load i32, ptr %711, align 4
  %3554 = load i32, ptr %712, align 4
  %3555 = load ptr, ptr %710, align 8
  %3556 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3555, 0
  %3557 = load ptr, ptr %709, align 8
  %3558 = insertvalue { ptr, ptr, ptr, i32 } %3556, ptr %3557, 1
  %3559 = load ptr, ptr %708, align 8
  %3560 = insertvalue { ptr, ptr, ptr, i32 } %3558, ptr %3559, 2
  %3561 = load i32, ptr %707, align 4
  %3562 = insertvalue { ptr, ptr, ptr, i32 } %3560, i32 %3561, 3
  %3563 = getelementptr [3 x ptr], ptr %713, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3563, align 8
  %3564 = getelementptr [3 x ptr], ptr %713, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3564, align 8
  %3565 = getelementptr [3 x ptr], ptr %713, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3565, align 8
  %3566 = call ptr @llvm.invariant.start.p0(i64 9, ptr %713)
  %3567 = call ptr @llvm.invariant.start.p0(i64 664, ptr %3555)
  %3568 = getelementptr ptr, ptr %3555, i32 %3561
  %3569 = getelementptr ptr, ptr %3568, i32 8
  %3570 = load ptr, ptr %3569, align 8
  %3571 = getelementptr { ptr, ptr, ptr }, ptr %714, i32 0, i32 0
  store ptr @buffer_typ, ptr %3571, align 8
  %3572 = getelementptr { ptr, ptr, ptr }, ptr %714, i32 0, i32 1
  store ptr @i32_typ, ptr %3572, align 8
  %3573 = getelementptr { ptr, ptr, ptr }, ptr %714, i32 0, i32 2
  store ptr @i32_typ, ptr %3573, align 8
  %3574 = call ptr @behavior_wrapper(ptr %3570, { ptr, ptr, ptr, i32 } %3562, ptr %714)
  call void %3574({ ptr, ptr, ptr, i32 } %3562, { ptr, ptr, ptr, i32 } %3562, ptr %713, { ptr } %3552, i32 %3553, i32 %3554) #17
  %3575 = load ptr, ptr %710, align 8
  %3576 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3575, 0
  %3577 = load ptr, ptr %709, align 8
  %3578 = insertvalue { ptr, ptr, ptr, i32 } %3576, ptr %3577, 1
  %3579 = load ptr, ptr %708, align 8
  %3580 = insertvalue { ptr, ptr, ptr, i32 } %3578, ptr %3579, 2
  %3581 = load i32, ptr %707, align 4
  %3582 = insertvalue { ptr, ptr, ptr, i32 } %3580, i32 %3581, 3
  %3583 = getelementptr [1 x ptr], ptr %715, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %3583, align 8
  %3584 = call ptr @llvm.invariant.start.p0(i64 1, ptr %715)
  %3585 = call ptr @llvm.invariant.start.p0(i64 664, ptr %3575)
  %3586 = getelementptr ptr, ptr %3575, i32 %3581
  %3587 = getelementptr ptr, ptr %3586, i32 24
  %3588 = load ptr, ptr %3587, align 8
  %3589 = getelementptr { ptr }, ptr %716, i32 0, i32 0
  store ptr @function_typ, ptr %3589, align 8
  %3590 = call ptr @behavior_wrapper(ptr %3588, { ptr, ptr, ptr, i32 } %3582, ptr %716)
  %3591 = call { ptr, ptr, ptr, i32 } %3590({ ptr, ptr, ptr, i32 } %3582, { ptr, ptr, ptr, i32 } %3582, ptr %715, { ptr } %3512) #17
  store { ptr, ptr, ptr, i32 } %3591, ptr %717, align 8
  %3592 = getelementptr { ptr, ptr, ptr, i32 }, ptr %717, i32 0, i32 0
  %3593 = getelementptr { ptr, ptr, ptr, i32 }, ptr %718, i32 0, i32 0
  %3594 = load ptr, ptr %3592, align 8
  store ptr %3594, ptr %3593, align 8
  %3595 = getelementptr { ptr, ptr, ptr, i32 }, ptr %717, i32 0, i32 1
  %3596 = getelementptr { ptr, ptr, ptr, i32 }, ptr %718, i32 0, i32 1
  %3597 = load ptr, ptr %3595, align 8
  store ptr %3597, ptr %3596, align 8
  %3598 = getelementptr { ptr, ptr, ptr, i32 }, ptr %717, i32 0, i32 2
  %3599 = getelementptr { ptr, ptr, ptr, i32 }, ptr %718, i32 0, i32 2
  %3600 = load ptr, ptr %3598, align 8
  store ptr %3600, ptr %3599, align 8
  %3601 = getelementptr { ptr, ptr, ptr, i32 }, ptr %717, i32 0, i32 3
  %3602 = getelementptr { ptr, ptr, ptr, i32 }, ptr %718, i32 0, i32 3
  %3603 = load i32, ptr %3601, align 4
  store i32 %3603, ptr %3602, align 4
  call void @set_offset(ptr %718, ptr @MapIterable)
  %3604 = load ptr, ptr %3593, align 8
  %3605 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3604, 0
  %3606 = load ptr, ptr %3596, align 8
  %3607 = insertvalue { ptr, ptr, ptr, i32 } %3605, ptr %3606, 1
  %3608 = load ptr, ptr %3599, align 8
  %3609 = insertvalue { ptr, ptr, ptr, i32 } %3607, ptr %3608, 2
  %3610 = load i32, ptr %3602, align 4
  %3611 = insertvalue { ptr, ptr, ptr, i32 } %3609, i32 %3610, 3
  %3612 = getelementptr [2 x ptr], ptr %719, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3612, align 8
  %3613 = getelementptr [2 x ptr], ptr %719, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri32, ptr %3613, align 8
  %3614 = call ptr @llvm.invariant.start.p0(i64 4, ptr %719)
  %3615 = call ptr @llvm.invariant.start.p0(i64 408, ptr %3604)
  %3616 = getelementptr ptr, ptr %3604, i32 %3610
  %3617 = getelementptr ptr, ptr %3616, i32 7
  %3618 = load ptr, ptr %3617, align 8
  %3619 = getelementptr { ptr, ptr }, ptr %720, i32 0, i32 0
  store ptr %3495, ptr %3619, align 8
  %3620 = getelementptr { ptr, ptr }, ptr %720, i32 0, i32 1
  store ptr @function_typ, ptr %3620, align 8
  %3621 = call ptr @behavior_wrapper(ptr %3618, { ptr, ptr, ptr, i32 } %3611, ptr %720)
  %3622 = call { ptr, i160 } %3621({ ptr, ptr, ptr, i32 } %3611, { ptr, ptr, ptr, i32 } %3611, ptr %719, { ptr, i160 } %3498, { ptr } %3505) #17
  store { ptr, i160 } %3622, ptr %721, align 8
  %3623 = getelementptr { ptr, i160 }, ptr %721, i32 0, i32 1
  %3624 = load i32, ptr %3623, align 4
  store i32 %3624, ptr %722, align 4
  %3625 = load i32, ptr %722, align 4
  store i32 %3625, ptr %723, align 4
  store ptr @i32_typ, ptr %724, align 8
  %3626 = load ptr, ptr %724, align 8
  %3627 = insertvalue { ptr, i160 } undef, ptr %3626, 0
  %3628 = load i160, ptr %723, align 4
  %3629 = insertvalue { ptr, i160 } %3627, i160 %3628, 1
  %3630 = getelementptr [1 x ptr], ptr %725, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3630, align 8
  %3631 = call ptr @llvm.invariant.start.p0(i64 1, ptr %725)
  %3632 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3633 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3634 = getelementptr { ptr }, ptr %726, i32 0, i32 0
  store ptr %3626, ptr %3634, align 8
  %3635 = call ptr @class_behavior_wrapper(ptr %3633, ptr %726)
  call void %3635(ptr %725, { ptr, i160 } %3629) #17
  store ptr @_functionliteral_fftpjzhzhp, ptr %727, align 8
  %3636 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %3636)
  %3637 = load ptr, ptr %727, align 8
  call void @llvm.init.trampoline(ptr %3636, ptr @xiprjjcnyd, ptr %3637)
  %3638 = call ptr @adjust_trampoline(ptr %3636)
  store ptr %3638, ptr %728, align 8
  %3639 = call ptr @llvm.invariant.start.p0(i64 24, ptr %3636)
  %3640 = getelementptr { ptr }, ptr %728, i32 0, i32 0
  %3641 = load ptr, ptr %3640, align 8
  %3642 = insertvalue { ptr } undef, ptr %3641, 0
  store i32 5, ptr %729, align 4
  %3643 = load i32, ptr %729, align 4
  %3644 = sext i32 %3643 to i64
  %3645 = mul i64 %3644, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %3646 = call ptr @bump_malloc(i64 %3645)
  store ptr %3646, ptr %730, align 8
  %3647 = getelementptr { ptr }, ptr %730, i32 0, i32 0
  %3648 = load ptr, ptr %3647, align 8
  store ptr %3648, ptr %731, align 8
  store i32 5, ptr %732, align 4
  store i32 0, ptr %733, align 4
  %3649 = load ptr, ptr %731, align 8
  %3650 = load i32, ptr %733, align 4
  %3651 = sext i32 %3650 to i64
  %3652 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3651
  %3653 = getelementptr i8, ptr %3649, i64 %3652
  %3654 = load i32, ptr %732, align 4
  store i32 %3654, ptr %3653, align 4
  store i32 6, ptr %734, align 4
  store i32 1, ptr %735, align 4
  %3655 = load ptr, ptr %731, align 8
  %3656 = load i32, ptr %735, align 4
  %3657 = sext i32 %3656 to i64
  %3658 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3657
  %3659 = getelementptr i8, ptr %3655, i64 %3658
  %3660 = load i32, ptr %734, align 4
  store i32 %3660, ptr %3659, align 4
  store i32 7, ptr %736, align 4
  store i32 2, ptr %737, align 4
  %3661 = load ptr, ptr %731, align 8
  %3662 = load i32, ptr %737, align 4
  %3663 = sext i32 %3662 to i64
  %3664 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3663
  %3665 = getelementptr i8, ptr %3661, i64 %3664
  %3666 = load i32, ptr %736, align 4
  store i32 %3666, ptr %3665, align 4
  store i32 8, ptr %738, align 4
  store i32 3, ptr %739, align 4
  %3667 = load ptr, ptr %731, align 8
  %3668 = load i32, ptr %739, align 4
  %3669 = sext i32 %3668 to i64
  %3670 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3669
  %3671 = getelementptr i8, ptr %3667, i64 %3670
  %3672 = load i32, ptr %738, align 4
  store i32 %3672, ptr %3671, align 4
  store i32 4, ptr %740, align 4
  store i32 5, ptr %741, align 4
  store ptr @Array, ptr %742, align 8
  %3673 = getelementptr ptr, ptr %742, i32 1
  store ptr @_parameterization_Ptri32, ptr %3673, align 8
  %3674 = load ptr, ptr %742, align 8
  %3675 = getelementptr ptr, ptr %3674, i32 6
  %3676 = load ptr, ptr %3675, align 8
  %3677 = call { i64, i64 } @size_wrapper(ptr %3676, ptr %742)
  %3678 = extractvalue { i64, i64 } %3677, 0
  %3679 = call ptr @bump_malloc(i64 %3678)
  store ptr @_parameterization_Ptri32, ptr %3679, align 8
  %3680 = call ptr @llvm.invariant.start.p0(i64 8, ptr %3679)
  store ptr @Array, ptr %746, align 8
  store ptr %3679, ptr %745, align 8
  store i32 10, ptr %743, align 4
  store i32 4, ptr %747, align 4
  store i32 5, ptr %748, align 4
  %3681 = load ptr, ptr %731, align 8
  %3682 = insertvalue { ptr } undef, ptr %3681, 0
  %3683 = load i32, ptr %747, align 4
  %3684 = load i32, ptr %748, align 4
  %3685 = load ptr, ptr %746, align 8
  %3686 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3685, 0
  %3687 = load ptr, ptr %745, align 8
  %3688 = insertvalue { ptr, ptr, ptr, i32 } %3686, ptr %3687, 1
  %3689 = load ptr, ptr %744, align 8
  %3690 = insertvalue { ptr, ptr, ptr, i32 } %3688, ptr %3689, 2
  %3691 = load i32, ptr %743, align 4
  %3692 = insertvalue { ptr, ptr, ptr, i32 } %3690, i32 %3691, 3
  %3693 = getelementptr [3 x ptr], ptr %749, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3693, align 8
  %3694 = getelementptr [3 x ptr], ptr %749, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3694, align 8
  %3695 = getelementptr [3 x ptr], ptr %749, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3695, align 8
  %3696 = call ptr @llvm.invariant.start.p0(i64 9, ptr %749)
  %3697 = call ptr @llvm.invariant.start.p0(i64 664, ptr %3685)
  %3698 = getelementptr ptr, ptr %3685, i32 %3691
  %3699 = getelementptr ptr, ptr %3698, i32 8
  %3700 = load ptr, ptr %3699, align 8
  %3701 = getelementptr { ptr, ptr, ptr }, ptr %750, i32 0, i32 0
  store ptr @buffer_typ, ptr %3701, align 8
  %3702 = getelementptr { ptr, ptr, ptr }, ptr %750, i32 0, i32 1
  store ptr @i32_typ, ptr %3702, align 8
  %3703 = getelementptr { ptr, ptr, ptr }, ptr %750, i32 0, i32 2
  store ptr @i32_typ, ptr %3703, align 8
  %3704 = call ptr @behavior_wrapper(ptr %3700, { ptr, ptr, ptr, i32 } %3692, ptr %750)
  call void %3704({ ptr, ptr, ptr, i32 } %3692, { ptr, ptr, ptr, i32 } %3692, ptr %749, { ptr } %3682, i32 %3683, i32 %3684) #17
  %3705 = load ptr, ptr %746, align 8
  %3706 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3705, 0
  %3707 = load ptr, ptr %745, align 8
  %3708 = insertvalue { ptr, ptr, ptr, i32 } %3706, ptr %3707, 1
  %3709 = load ptr, ptr %744, align 8
  %3710 = insertvalue { ptr, ptr, ptr, i32 } %3708, ptr %3709, 2
  %3711 = load i32, ptr %743, align 4
  %3712 = insertvalue { ptr, ptr, ptr, i32 } %3710, i32 %3711, 3
  %3713 = getelementptr [1 x ptr], ptr %751, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Nothing, ptr %3713, align 8
  %3714 = call ptr @llvm.invariant.start.p0(i64 1, ptr %751)
  %3715 = call ptr @llvm.invariant.start.p0(i64 664, ptr %3705)
  %3716 = getelementptr ptr, ptr %3705, i32 %3711
  %3717 = getelementptr ptr, ptr %3716, i32 20
  %3718 = load ptr, ptr %3717, align 8
  %3719 = getelementptr { ptr }, ptr %752, i32 0, i32 0
  store ptr @function_typ, ptr %3719, align 8
  %3720 = call ptr @behavior_wrapper(ptr %3718, { ptr, ptr, ptr, i32 } %3712, ptr %752)
  call void %3720({ ptr, ptr, ptr, i32 } %3712, { ptr, ptr, ptr, i32 } %3712, ptr %751, { ptr } %3642) #17
  store i32 13, ptr %753, align 4
  %3721 = load i32, ptr %753, align 4
  %3722 = sext i32 %3721 to i64
  %3723 = mul i64 %3722, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %3724 = call ptr @bump_malloc(i64 %3723)
  store ptr %3724, ptr %754, align 8
  %3725 = getelementptr { ptr }, ptr %754, i32 0, i32 0
  %3726 = load ptr, ptr %3725, align 8
  store ptr %3726, ptr %755, align 8
  store i32 0, ptr %756, align 4
  %3727 = load ptr, ptr %755, align 8
  %3728 = load i32, ptr %756, align 4
  %3729 = sext i32 %3728 to i64
  %3730 = mul i64 ptrtoint (ptr getelementptr ([12 x i8], ptr null, i32 1) to i64), %3729
  %3731 = getelementptr i8, ptr %3727, i64 %3730
  %3732 = load <12 x i8>, ptr @bdwic_bigtingstxt, align 16
  store <12 x i8> %3732, ptr %3731, align 16
  store i32 12, ptr %757, align 4
  store i32 13, ptr %758, align 4
  store ptr @String, ptr %759, align 8
  %3733 = load ptr, ptr %759, align 8
  %3734 = getelementptr ptr, ptr %3733, i32 6
  %3735 = load ptr, ptr %3734, align 8
  %3736 = call { i64, i64 } @size_wrapper(ptr %3735, ptr %759)
  %3737 = extractvalue { i64, i64 } %3736, 0
  %3738 = call ptr @bump_malloc(i64 %3737)
  store ptr @String, ptr %763, align 8
  store ptr %3738, ptr %762, align 8
  store i32 10, ptr %760, align 4
  store i32 12, ptr %764, align 4
  store i32 13, ptr %765, align 4
  %3739 = load ptr, ptr %755, align 8
  %3740 = insertvalue { ptr } undef, ptr %3739, 0
  %3741 = load i32, ptr %764, align 4
  %3742 = load i32, ptr %765, align 4
  %3743 = load ptr, ptr %763, align 8
  %3744 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3743, 0
  %3745 = load ptr, ptr %762, align 8
  %3746 = insertvalue { ptr, ptr, ptr, i32 } %3744, ptr %3745, 1
  %3747 = load ptr, ptr %761, align 8
  %3748 = insertvalue { ptr, ptr, ptr, i32 } %3746, ptr %3747, 2
  %3749 = load i32, ptr %760, align 4
  %3750 = insertvalue { ptr, ptr, ptr, i32 } %3748, i32 %3749, 3
  %3751 = getelementptr [3 x ptr], ptr %766, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3751, align 8
  %3752 = getelementptr [3 x ptr], ptr %766, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3752, align 8
  %3753 = getelementptr [3 x ptr], ptr %766, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3753, align 8
  %3754 = call ptr @llvm.invariant.start.p0(i64 9, ptr %766)
  %3755 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3743)
  %3756 = getelementptr ptr, ptr %3743, i32 %3749
  %3757 = getelementptr ptr, ptr %3756, i32 5
  %3758 = load ptr, ptr %3757, align 8
  %3759 = getelementptr { ptr, ptr, ptr }, ptr %767, i32 0, i32 0
  store ptr @buffer_typ, ptr %3759, align 8
  %3760 = getelementptr { ptr, ptr, ptr }, ptr %767, i32 0, i32 1
  store ptr @i32_typ, ptr %3760, align 8
  %3761 = getelementptr { ptr, ptr, ptr }, ptr %767, i32 0, i32 2
  store ptr @i32_typ, ptr %3761, align 8
  %3762 = call ptr @behavior_wrapper(ptr %3758, { ptr, ptr, ptr, i32 } %3750, ptr %767)
  call void %3762({ ptr, ptr, ptr, i32 } %3750, { ptr, ptr, ptr, i32 } %3750, ptr %766, { ptr } %3740, i32 %3741, i32 %3742) #17
  store i32 21, ptr %768, align 4
  %3763 = load i32, ptr %768, align 4
  %3764 = sext i32 %3763 to i64
  %3765 = mul i64 %3764, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %3766 = call ptr @bump_malloc(i64 %3765)
  store ptr %3766, ptr %769, align 8
  %3767 = getelementptr { ptr }, ptr %769, i32 0, i32 0
  %3768 = load ptr, ptr %3767, align 8
  store ptr %3768, ptr %770, align 8
  store i32 0, ptr %771, align 4
  %3769 = load ptr, ptr %770, align 8
  %3770 = load i32, ptr %771, align 4
  %3771 = sext i32 %3770 to i64
  %3772 = mul i64 ptrtoint (ptr getelementptr ([20 x i8], ptr null, i32 1) to i64), %3771
  %3773 = getelementptr i8, ptr %3769, i64 %3772
  %3774 = load <20 x i8>, ptr @ooxqh_thisnis_hownwe_donit, align 32
  store <20 x i8> %3774, ptr %3773, align 32
  store i32 20, ptr %772, align 4
  store i32 21, ptr %773, align 4
  store ptr @String, ptr %774, align 8
  %3775 = load ptr, ptr %774, align 8
  %3776 = getelementptr ptr, ptr %3775, i32 6
  %3777 = load ptr, ptr %3776, align 8
  %3778 = call { i64, i64 } @size_wrapper(ptr %3777, ptr %774)
  %3779 = extractvalue { i64, i64 } %3778, 0
  %3780 = call ptr @bump_malloc(i64 %3779)
  store ptr @String, ptr %778, align 8
  store ptr %3780, ptr %777, align 8
  store i32 10, ptr %775, align 4
  store i32 20, ptr %779, align 4
  store i32 21, ptr %780, align 4
  %3781 = load ptr, ptr %770, align 8
  %3782 = insertvalue { ptr } undef, ptr %3781, 0
  %3783 = load i32, ptr %779, align 4
  %3784 = load i32, ptr %780, align 4
  %3785 = load ptr, ptr %778, align 8
  %3786 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3785, 0
  %3787 = load ptr, ptr %777, align 8
  %3788 = insertvalue { ptr, ptr, ptr, i32 } %3786, ptr %3787, 1
  %3789 = load ptr, ptr %776, align 8
  %3790 = insertvalue { ptr, ptr, ptr, i32 } %3788, ptr %3789, 2
  %3791 = load i32, ptr %775, align 4
  %3792 = insertvalue { ptr, ptr, ptr, i32 } %3790, i32 %3791, 3
  %3793 = getelementptr [3 x ptr], ptr %781, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3793, align 8
  %3794 = getelementptr [3 x ptr], ptr %781, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3794, align 8
  %3795 = getelementptr [3 x ptr], ptr %781, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3795, align 8
  %3796 = call ptr @llvm.invariant.start.p0(i64 9, ptr %781)
  %3797 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3785)
  %3798 = getelementptr ptr, ptr %3785, i32 %3791
  %3799 = getelementptr ptr, ptr %3798, i32 5
  %3800 = load ptr, ptr %3799, align 8
  %3801 = getelementptr { ptr, ptr, ptr }, ptr %782, i32 0, i32 0
  store ptr @buffer_typ, ptr %3801, align 8
  %3802 = getelementptr { ptr, ptr, ptr }, ptr %782, i32 0, i32 1
  store ptr @i32_typ, ptr %3802, align 8
  %3803 = getelementptr { ptr, ptr, ptr }, ptr %782, i32 0, i32 2
  store ptr @i32_typ, ptr %3803, align 8
  %3804 = call ptr @behavior_wrapper(ptr %3800, { ptr, ptr, ptr, i32 } %3792, ptr %782)
  call void %3804({ ptr, ptr, ptr, i32 } %3792, { ptr, ptr, ptr, i32 } %3792, ptr %781, { ptr } %3782, i32 %3783, i32 %3784) #17
  %3805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %783, i32 0, i32 0
  %3806 = load ptr, ptr %763, align 8
  store ptr %3806, ptr %3805, align 8
  %3807 = getelementptr { ptr, ptr, ptr, i32 }, ptr %783, i32 0, i32 1
  %3808 = load ptr, ptr %762, align 8
  store ptr %3808, ptr %3807, align 8
  %3809 = getelementptr { ptr, ptr, ptr, i32 }, ptr %783, i32 0, i32 2
  %3810 = load ptr, ptr %761, align 8
  store ptr %3810, ptr %3809, align 8
  %3811 = getelementptr { ptr, ptr, ptr, i32 }, ptr %783, i32 0, i32 3
  %3812 = load i32, ptr %760, align 4
  store i32 %3812, ptr %3811, align 4
  call void @set_offset(ptr %783, ptr @String)
  %3813 = load ptr, ptr %3805, align 8
  %3814 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3813, 0
  %3815 = load ptr, ptr %3807, align 8
  %3816 = insertvalue { ptr, ptr, ptr, i32 } %3814, ptr %3815, 1
  %3817 = load ptr, ptr %3809, align 8
  %3818 = insertvalue { ptr, ptr, ptr, i32 } %3816, ptr %3817, 2
  %3819 = load i32, ptr %3811, align 4
  %3820 = insertvalue { ptr, ptr, ptr, i32 } %3818, i32 %3819, 3
  %3821 = getelementptr { ptr, ptr, ptr, i32 }, ptr %784, i32 0, i32 0
  %3822 = load ptr, ptr %778, align 8
  store ptr %3822, ptr %3821, align 8
  %3823 = getelementptr { ptr, ptr, ptr, i32 }, ptr %784, i32 0, i32 1
  %3824 = load ptr, ptr %777, align 8
  store ptr %3824, ptr %3823, align 8
  %3825 = getelementptr { ptr, ptr, ptr, i32 }, ptr %784, i32 0, i32 2
  %3826 = load ptr, ptr %776, align 8
  store ptr %3826, ptr %3825, align 8
  %3827 = getelementptr { ptr, ptr, ptr, i32 }, ptr %784, i32 0, i32 3
  %3828 = load i32, ptr %775, align 4
  store i32 %3828, ptr %3827, align 4
  call void @set_offset(ptr %784, ptr @String)
  %3829 = load ptr, ptr %3821, align 8
  %3830 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3829, 0
  %3831 = load ptr, ptr %3823, align 8
  %3832 = insertvalue { ptr, ptr, ptr, i32 } %3830, ptr %3831, 1
  %3833 = load ptr, ptr %3825, align 8
  %3834 = insertvalue { ptr, ptr, ptr, i32 } %3832, ptr %3833, 2
  %3835 = load i32, ptr %3827, align 4
  %3836 = insertvalue { ptr, ptr, ptr, i32 } %3834, i32 %3835, 3
  %3837 = getelementptr [2 x ptr], ptr %785, i32 0, i32 0
  store ptr @_parameterization_String, ptr %3837, align 8
  %3838 = getelementptr [2 x ptr], ptr %785, i32 0, i32 1
  store ptr @_parameterization_String, ptr %3838, align 8
  %3839 = call ptr @llvm.invariant.start.p0(i64 4, ptr %785)
  %3840 = call ptr @llvm.invariant.start.p0(i64 56, ptr @FileSystem)
  %3841 = load ptr, ptr getelementptr (ptr, ptr getelementptr (ptr, ptr @FileSystem, i32 10), i32 2), align 8
  %3842 = getelementptr { ptr, ptr }, ptr %786, i32 0, i32 0
  store ptr %3813, ptr %3842, align 8
  %3843 = getelementptr { ptr, ptr }, ptr %786, i32 0, i32 1
  store ptr %3829, ptr %3843, align 8
  %3844 = call ptr @class_behavior_wrapper(ptr %3841, ptr %786)
  call void %3844(ptr %785, { ptr, ptr, ptr, i32 } %3820, { ptr, ptr, ptr, i32 } %3836) #17
  store i32 13, ptr %787, align 4
  %3845 = load i32, ptr %787, align 4
  %3846 = sext i32 %3845 to i64
  %3847 = mul i64 %3846, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %3848 = call ptr @bump_malloc(i64 %3847)
  store ptr %3848, ptr %788, align 8
  %3849 = getelementptr { ptr }, ptr %788, i32 0, i32 0
  %3850 = load ptr, ptr %3849, align 8
  store ptr %3850, ptr %789, align 8
  store i32 0, ptr %790, align 4
  %3851 = load ptr, ptr %789, align 8
  %3852 = load i32, ptr %790, align 4
  %3853 = sext i32 %3852 to i64
  %3854 = mul i64 ptrtoint (ptr getelementptr ([12 x i8], ptr null, i32 1) to i64), %3853
  %3855 = getelementptr i8, ptr %3851, i64 %3854
  %3856 = load <12 x i8>, ptr @fralm_bigtingstxt, align 16
  store <12 x i8> %3856, ptr %3855, align 16
  store i32 12, ptr %791, align 4
  store i32 13, ptr %792, align 4
  store ptr @String, ptr %793, align 8
  %3857 = load ptr, ptr %793, align 8
  %3858 = getelementptr ptr, ptr %3857, i32 6
  %3859 = load ptr, ptr %3858, align 8
  %3860 = call { i64, i64 } @size_wrapper(ptr %3859, ptr %793)
  %3861 = extractvalue { i64, i64 } %3860, 0
  %3862 = call ptr @bump_malloc(i64 %3861)
  store ptr @String, ptr %797, align 8
  store ptr %3862, ptr %796, align 8
  store i32 10, ptr %794, align 4
  store i32 12, ptr %798, align 4
  store i32 13, ptr %799, align 4
  %3863 = load ptr, ptr %789, align 8
  %3864 = insertvalue { ptr } undef, ptr %3863, 0
  %3865 = load i32, ptr %798, align 4
  %3866 = load i32, ptr %799, align 4
  %3867 = load ptr, ptr %797, align 8
  %3868 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3867, 0
  %3869 = load ptr, ptr %796, align 8
  %3870 = insertvalue { ptr, ptr, ptr, i32 } %3868, ptr %3869, 1
  %3871 = load ptr, ptr %795, align 8
  %3872 = insertvalue { ptr, ptr, ptr, i32 } %3870, ptr %3871, 2
  %3873 = load i32, ptr %794, align 4
  %3874 = insertvalue { ptr, ptr, ptr, i32 } %3872, i32 %3873, 3
  %3875 = getelementptr [3 x ptr], ptr %800, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3875, align 8
  %3876 = getelementptr [3 x ptr], ptr %800, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3876, align 8
  %3877 = getelementptr [3 x ptr], ptr %800, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3877, align 8
  %3878 = call ptr @llvm.invariant.start.p0(i64 9, ptr %800)
  %3879 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3867)
  %3880 = getelementptr ptr, ptr %3867, i32 %3873
  %3881 = getelementptr ptr, ptr %3880, i32 5
  %3882 = load ptr, ptr %3881, align 8
  %3883 = getelementptr { ptr, ptr, ptr }, ptr %801, i32 0, i32 0
  store ptr @buffer_typ, ptr %3883, align 8
  %3884 = getelementptr { ptr, ptr, ptr }, ptr %801, i32 0, i32 1
  store ptr @i32_typ, ptr %3884, align 8
  %3885 = getelementptr { ptr, ptr, ptr }, ptr %801, i32 0, i32 2
  store ptr @i32_typ, ptr %3885, align 8
  %3886 = call ptr @behavior_wrapper(ptr %3882, { ptr, ptr, ptr, i32 } %3874, ptr %801)
  call void %3886({ ptr, ptr, ptr, i32 } %3874, { ptr, ptr, ptr, i32 } %3874, ptr %800, { ptr } %3864, i32 %3865, i32 %3866) #17
  %3887 = getelementptr { ptr, ptr, ptr, i32 }, ptr %802, i32 0, i32 0
  %3888 = load ptr, ptr %797, align 8
  store ptr %3888, ptr %3887, align 8
  %3889 = getelementptr { ptr, ptr, ptr, i32 }, ptr %802, i32 0, i32 1
  %3890 = load ptr, ptr %796, align 8
  store ptr %3890, ptr %3889, align 8
  %3891 = getelementptr { ptr, ptr, ptr, i32 }, ptr %802, i32 0, i32 2
  %3892 = load ptr, ptr %795, align 8
  store ptr %3892, ptr %3891, align 8
  %3893 = getelementptr { ptr, ptr, ptr, i32 }, ptr %802, i32 0, i32 3
  %3894 = load i32, ptr %794, align 4
  store i32 %3894, ptr %3893, align 4
  call void @set_offset(ptr %802, ptr @String)
  %3895 = load ptr, ptr %3887, align 8
  %3896 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3895, 0
  %3897 = load ptr, ptr %3889, align 8
  %3898 = insertvalue { ptr, ptr, ptr, i32 } %3896, ptr %3897, 1
  %3899 = load ptr, ptr %3891, align 8
  %3900 = insertvalue { ptr, ptr, ptr, i32 } %3898, ptr %3899, 2
  %3901 = load i32, ptr %3893, align 4
  %3902 = insertvalue { ptr, ptr, ptr, i32 } %3900, i32 %3901, 3
  %3903 = getelementptr [1 x ptr], ptr %803, i32 0, i32 0
  store ptr @_parameterization_String, ptr %3903, align 8
  %3904 = call ptr @llvm.invariant.start.p0(i64 1, ptr %803)
  %3905 = call ptr @llvm.invariant.start.p0(i64 56, ptr @FileSystem)
  %3906 = load ptr, ptr getelementptr (ptr, ptr getelementptr (ptr, ptr @FileSystem, i32 10), i32 1), align 8
  %3907 = getelementptr { ptr }, ptr %804, i32 0, i32 0
  store ptr %3895, ptr %3907, align 8
  %3908 = call ptr @class_behavior_wrapper(ptr %3906, ptr %804)
  %3909 = call { ptr, ptr, ptr, i32 } %3908(ptr %803, { ptr, ptr, ptr, i32 } %3902) #17
  store { ptr, ptr, ptr, i32 } %3909, ptr %805, align 8
  %3910 = getelementptr { ptr, ptr, ptr, i32 }, ptr %805, i32 0, i32 0
  %3911 = getelementptr { ptr, ptr, ptr, i32 }, ptr %806, i32 0, i32 0
  %3912 = load ptr, ptr %3910, align 8
  store ptr %3912, ptr %3911, align 8
  %3913 = getelementptr { ptr, ptr, ptr, i32 }, ptr %805, i32 0, i32 1
  %3914 = getelementptr { ptr, ptr, ptr, i32 }, ptr %806, i32 0, i32 1
  %3915 = load ptr, ptr %3913, align 8
  store ptr %3915, ptr %3914, align 8
  %3916 = getelementptr { ptr, ptr, ptr, i32 }, ptr %805, i32 0, i32 2
  %3917 = getelementptr { ptr, ptr, ptr, i32 }, ptr %806, i32 0, i32 2
  %3918 = load ptr, ptr %3916, align 8
  store ptr %3918, ptr %3917, align 8
  %3919 = getelementptr { ptr, ptr, ptr, i32 }, ptr %805, i32 0, i32 3
  %3920 = getelementptr { ptr, ptr, ptr, i32 }, ptr %806, i32 0, i32 3
  %3921 = load i32, ptr %3919, align 4
  store i32 %3921, ptr %3920, align 4
  call void @set_offset(ptr %806, ptr @String)
  %3922 = getelementptr { ptr, i160 }, ptr %806, i32 0, i32 0
  %3923 = load ptr, ptr %3922, align 8
  %3924 = insertvalue { ptr, i160 } undef, ptr %3923, 0
  %3925 = getelementptr { ptr, i160 }, ptr %806, i32 0, i32 1
  %3926 = load i160, ptr %3925, align 4
  %3927 = insertvalue { ptr, i160 } %3924, i160 %3926, 1
  %3928 = getelementptr [1 x ptr], ptr %807, i32 0, i32 0
  store ptr @_parameterization_String, ptr %3928, align 8
  %3929 = call ptr @llvm.invariant.start.p0(i64 1, ptr %807)
  %3930 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3931 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3932 = getelementptr { ptr }, ptr %808, i32 0, i32 0
  store ptr %3923, ptr %3932, align 8
  %3933 = call ptr @class_behavior_wrapper(ptr %3931, ptr %808)
  call void %3933(ptr %807, { ptr, i160 } %3927) #17
  store ptr @_functionliteral_oziycckder, ptr %809, align 8
  %3934 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %3934)
  %3935 = load ptr, ptr %809, align 8
  call void @llvm.init.trampoline(ptr %3934, ptr @yxbqnucngh, ptr %3935)
  %3936 = call ptr @adjust_trampoline(ptr %3934)
  store ptr %3936, ptr %810, align 8
  %3937 = call ptr @llvm.invariant.start.p0(i64 24, ptr %3934)
  %3938 = getelementptr { ptr }, ptr %810, i32 0, i32 0
  %3939 = load ptr, ptr %3938, align 8
  %3940 = insertvalue { ptr } undef, ptr %3939, 0
  store i32 2, ptr %811, align 4
  store i32 5, ptr %812, align 4
  store ptr @Range, ptr %813, align 8
  %3941 = load ptr, ptr %813, align 8
  %3942 = getelementptr ptr, ptr %3941, i32 6
  %3943 = load ptr, ptr %3942, align 8
  %3944 = call { i64, i64 } @size_wrapper(ptr %3943, ptr %813)
  %3945 = extractvalue { i64, i64 } %3944, 0
  %3946 = call ptr @bump_malloc(i64 %3945)
  store ptr @Range, ptr %817, align 8
  store ptr %3946, ptr %816, align 8
  store i32 10, ptr %814, align 4
  store i32 2, ptr %818, align 4
  store i32 5, ptr %819, align 4
  %3947 = load i32, ptr %818, align 4
  %3948 = load i32, ptr %819, align 4
  %3949 = load ptr, ptr %817, align 8
  %3950 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3949, 0
  %3951 = load ptr, ptr %816, align 8
  %3952 = insertvalue { ptr, ptr, ptr, i32 } %3950, ptr %3951, 1
  %3953 = load ptr, ptr %815, align 8
  %3954 = insertvalue { ptr, ptr, ptr, i32 } %3952, ptr %3953, 2
  %3955 = load i32, ptr %814, align 4
  %3956 = insertvalue { ptr, ptr, ptr, i32 } %3954, i32 %3955, 3
  %3957 = getelementptr [2 x ptr], ptr %820, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3957, align 8
  %3958 = getelementptr [2 x ptr], ptr %820, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3958, align 8
  %3959 = call ptr @llvm.invariant.start.p0(i64 4, ptr %820)
  %3960 = call ptr @llvm.invariant.start.p0(i64 440, ptr %3949)
  %3961 = getelementptr ptr, ptr %3949, i32 %3955
  %3962 = getelementptr ptr, ptr %3961, i32 5
  %3963 = load ptr, ptr %3962, align 8
  %3964 = getelementptr { ptr, ptr }, ptr %821, i32 0, i32 0
  store ptr @i32_typ, ptr %3964, align 8
  %3965 = getelementptr { ptr, ptr }, ptr %821, i32 0, i32 1
  store ptr @i32_typ, ptr %3965, align 8
  %3966 = call ptr @behavior_wrapper(ptr %3963, { ptr, ptr, ptr, i32 } %3956, ptr %821)
  call void %3966({ ptr, ptr, ptr, i32 } %3956, { ptr, ptr, ptr, i32 } %3956, ptr %820, i32 %3947, i32 %3948) #17
  %3967 = load ptr, ptr %817, align 8
  %3968 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3967, 0
  %3969 = load ptr, ptr %816, align 8
  %3970 = insertvalue { ptr, ptr, ptr, i32 } %3968, ptr %3969, 1
  %3971 = load ptr, ptr %815, align 8
  %3972 = insertvalue { ptr, ptr, ptr, i32 } %3970, ptr %3971, 2
  %3973 = load i32, ptr %814, align 4
  %3974 = insertvalue { ptr, ptr, ptr, i32 } %3972, i32 %3973, 3
  %3975 = getelementptr [1 x ptr], ptr %822, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Nothing, ptr %3975, align 8
  %3976 = call ptr @llvm.invariant.start.p0(i64 1, ptr %822)
  %3977 = call ptr @llvm.invariant.start.p0(i64 440, ptr %3967)
  %3978 = getelementptr ptr, ptr %3967, i32 %3973
  %3979 = getelementptr ptr, ptr %3978, i32 8
  %3980 = load ptr, ptr %3979, align 8
  %3981 = getelementptr { ptr }, ptr %823, i32 0, i32 0
  store ptr @function_typ, ptr %3981, align 8
  %3982 = call ptr @behavior_wrapper(ptr %3980, { ptr, ptr, ptr, i32 } %3974, ptr %823)
  call void %3982({ ptr, ptr, ptr, i32 } %3974, { ptr, ptr, ptr, i32 } %3974, ptr %822, { ptr } %3940) #17
  store ptr @i32toi8, ptr %824, align 8
  store i32 5, ptr %825, align 4
  %3983 = load i32, ptr %825, align 4
  %3984 = load ptr, ptr %824, align 8
  %3985 = call i8 %3984(i32 %3983)
  store i8 %3985, ptr %826, align 1
  %3986 = load i8, ptr %826, align 1
  store i8 %3986, ptr %827, align 1
  store ptr @i8_typ, ptr %828, align 8
  %3987 = load ptr, ptr %828, align 8
  %3988 = insertvalue { ptr, i160 } undef, ptr %3987, 0
  %3989 = load i160, ptr %827, align 4
  %3990 = insertvalue { ptr, i160 } %3988, i160 %3989, 1
  %3991 = getelementptr [1 x ptr], ptr %829, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %3991, align 8
  %3992 = call ptr @llvm.invariant.start.p0(i64 1, ptr %829)
  %3993 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3994 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3995 = getelementptr { ptr }, ptr %830, i32 0, i32 0
  store ptr %3987, ptr %3995, align 8
  %3996 = call ptr @class_behavior_wrapper(ptr %3994, ptr %830)
  call void %3996(ptr %829, { ptr, i160 } %3990) #17
  store ptr @_functionliteral_zaeoiiempm, ptr %831, align 8
  store i32 6, ptr %832, align 4
  store i32 4, ptr %833, align 4
  %3997 = load i32, ptr %832, align 4
  %3998 = load i32, ptr %833, align 4
  %3999 = load ptr, ptr %831, align 8
  %4000 = call ptr @coroutine_create(ptr %3999, ptr @coroutine_pwqblnbngv_passer)
  call void @coroutine_pwqblnbngv_buffer_filler(ptr %4000, i32 %3997, i32 %3998)
  store ptr %4000, ptr %834, align 8
  %4001 = getelementptr { ptr }, ptr %834, i32 0, i32 0
  %4002 = load ptr, ptr %4001, align 8
  store ptr %4002, ptr %835, align 8
  store i32 2, ptr %836, align 4
  %4003 = load i32, ptr %836, align 4
  store i32 %4003, ptr %837, align 4
  store ptr @i32_typ, ptr %838, align 8
  %4004 = load ptr, ptr %838, align 8
  %4005 = insertvalue { ptr, i32 } undef, ptr %4004, 0
  %4006 = load i32, ptr %837, align 4
  %4007 = insertvalue { ptr, i32 } %4005, i32 %4006, 1
  %4008 = load ptr, ptr %835, align 8
  %4009 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4008, i32 0, i32 4
  store { ptr, i32 } %4007, ptr %4009, align 8
  %4010 = load ptr, ptr %835, align 8
  call void @coroutine_call(ptr %4010)
  %4011 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4010, i32 0, i32 4
  %4012 = load { ptr, i32 }, ptr %4011, align 8
  store { ptr, i32 } %4012, ptr %839, align 8
  %4013 = getelementptr { ptr, i32 }, ptr %839, i32 0, i32 0
  %4014 = getelementptr { ptr, i32 }, ptr %840, i32 0, i32 0
  %4015 = load ptr, ptr %4013, align 8
  store ptr %4015, ptr %4014, align 8
  %4016 = getelementptr { ptr, i32 }, ptr %839, i32 0, i32 1
  %4017 = getelementptr { ptr, i32 }, ptr %840, i32 0, i32 1
  %4018 = load i32, ptr %4016, align 4
  store i32 %4018, ptr %4017, align 4
  %4019 = getelementptr { ptr, i160 }, ptr %840, i32 0, i32 0
  %4020 = load ptr, ptr %4019, align 8
  %4021 = insertvalue { ptr, i160 } undef, ptr %4020, 0
  %4022 = getelementptr { ptr, i160 }, ptr %840, i32 0, i32 1
  %4023 = load i160, ptr %4022, align 4
  %4024 = insertvalue { ptr, i160 } %4021, i160 %4023, 1
  %4025 = getelementptr [1 x ptr], ptr %841, i32 0, i32 0
  store ptr @_parameterization_Ptri32_or_Nil, ptr %4025, align 8
  %4026 = call ptr @llvm.invariant.start.p0(i64 1, ptr %841)
  %4027 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4028 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4029 = getelementptr { ptr }, ptr %842, i32 0, i32 0
  store ptr %4020, ptr %4029, align 8
  %4030 = call ptr @class_behavior_wrapper(ptr %4028, ptr %842)
  call void %4030(ptr %841, { ptr, i160 } %4024) #17
  store i32 3, ptr %843, align 4
  %4031 = load i32, ptr %843, align 4
  store i32 %4031, ptr %844, align 4
  store ptr @i32_typ, ptr %845, align 8
  %4032 = load ptr, ptr %845, align 8
  %4033 = insertvalue { ptr, i32 } undef, ptr %4032, 0
  %4034 = load i32, ptr %844, align 4
  %4035 = insertvalue { ptr, i32 } %4033, i32 %4034, 1
  %4036 = load ptr, ptr %835, align 8
  %4037 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4036, i32 0, i32 4
  store { ptr, i32 } %4035, ptr %4037, align 8
  %4038 = load ptr, ptr %835, align 8
  call void @coroutine_call(ptr %4038)
  %4039 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4038, i32 0, i32 4
  %4040 = load { ptr, i32 }, ptr %4039, align 8
  store { ptr, i32 } %4040, ptr %846, align 8
  %4041 = getelementptr { ptr, i32 }, ptr %846, i32 0, i32 0
  %4042 = getelementptr { ptr, i32 }, ptr %847, i32 0, i32 0
  %4043 = load ptr, ptr %4041, align 8
  store ptr %4043, ptr %4042, align 8
  %4044 = getelementptr { ptr, i32 }, ptr %846, i32 0, i32 1
  %4045 = getelementptr { ptr, i32 }, ptr %847, i32 0, i32 1
  %4046 = load i32, ptr %4044, align 4
  store i32 %4046, ptr %4045, align 4
  %4047 = getelementptr { ptr, i160 }, ptr %847, i32 0, i32 0
  %4048 = load ptr, ptr %4047, align 8
  %4049 = insertvalue { ptr, i160 } undef, ptr %4048, 0
  %4050 = getelementptr { ptr, i160 }, ptr %847, i32 0, i32 1
  %4051 = load i160, ptr %4050, align 4
  %4052 = insertvalue { ptr, i160 } %4049, i160 %4051, 1
  %4053 = getelementptr [1 x ptr], ptr %848, i32 0, i32 0
  store ptr @_parameterization_Ptri32_or_Nil, ptr %4053, align 8
  %4054 = call ptr @llvm.invariant.start.p0(i64 1, ptr %848)
  %4055 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4056 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4057 = getelementptr { ptr }, ptr %849, i32 0, i32 0
  store ptr %4048, ptr %4057, align 8
  %4058 = call ptr @class_behavior_wrapper(ptr %4056, ptr %849)
  call void %4058(ptr %848, { ptr, i160 } %4052) #17
  %4059 = load ptr, ptr %687, align 8
  %4060 = call ptr @coroutine_create(ptr %4059, ptr @coroutine_ufzezkjkco_passer)
  call void @coroutine_ufzezkjkco_buffer_filler(ptr %4060)
  store ptr %4060, ptr %850, align 8
  %4061 = getelementptr { ptr }, ptr %850, i32 0, i32 0
  %4062 = load ptr, ptr %4061, align 8
  store ptr %4062, ptr %851, align 8
  %4063 = load ptr, ptr %851, align 8
  call void @coroutine_call(ptr %4063)
  %4064 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %4063, i32 0, i32 4
  %4065 = load { ptr, i160 }, ptr %4064, align 8
  store { ptr, i160 } %4065, ptr %852, align 8
  %4066 = load ptr, ptr %851, align 8
  %4067 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4066, i32 0, i32 4
  %4068 = load { ptr, i32 }, ptr %4067, align 8
  store { ptr, i32 } %4068, ptr %853, align 8
  %4069 = getelementptr { ptr, i32 }, ptr %853, i32 0, i32 0
  %4070 = getelementptr { ptr, i32 }, ptr %854, i32 0, i32 0
  %4071 = load ptr, ptr %4069, align 8
  store ptr %4071, ptr %4070, align 8
  %4072 = getelementptr { ptr, i32 }, ptr %853, i32 0, i32 1
  %4073 = getelementptr { ptr, i32 }, ptr %854, i32 0, i32 1
  %4074 = load i32, ptr %4072, align 4
  store i32 %4074, ptr %4073, align 4
  %4075 = getelementptr { ptr, i160 }, ptr %854, i32 0, i32 0
  %4076 = load ptr, ptr %4075, align 8
  %4077 = insertvalue { ptr, i160 } undef, ptr %4076, 0
  %4078 = getelementptr { ptr, i160 }, ptr %854, i32 0, i32 1
  %4079 = load i160, ptr %4078, align 4
  %4080 = insertvalue { ptr, i160 } %4077, i160 %4079, 1
  %4081 = getelementptr [1 x ptr], ptr %855, i32 0, i32 0
  store ptr @_parameterization_Ptri32_or_Nil, ptr %4081, align 8
  %4082 = call ptr @llvm.invariant.start.p0(i64 1, ptr %855)
  %4083 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4084 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4085 = getelementptr { ptr }, ptr %856, i32 0, i32 0
  store ptr %4076, ptr %4085, align 8
  %4086 = call ptr @class_behavior_wrapper(ptr %4084, ptr %856)
  call void %4086(ptr %855, { ptr, i160 } %4080) #17
  store ptr @Channel, ptr %857, align 8
  %4087 = getelementptr ptr, ptr %857, i32 1
  store ptr @_parameterization_Ptri32, ptr %4087, align 8
  %4088 = load ptr, ptr %857, align 8
  %4089 = getelementptr ptr, ptr %4088, i32 6
  %4090 = load ptr, ptr %4089, align 8
  %4091 = call { i64, i64 } @size_wrapper(ptr %4090, ptr %857)
  %4092 = extractvalue { i64, i64 } %4091, 0
  %4093 = call ptr @bump_malloc(i64 %4092)
  store ptr @_parameterization_Ptri32, ptr %4093, align 8
  %4094 = call ptr @llvm.invariant.start.p0(i64 8, ptr %4093)
  store ptr @Channel, ptr %861, align 8
  store ptr %4093, ptr %860, align 8
  store i32 10, ptr %858, align 4
  %4095 = load ptr, ptr %861, align 8
  %4096 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4095, 0
  %4097 = load ptr, ptr %860, align 8
  %4098 = insertvalue { ptr, ptr, ptr, i32 } %4096, ptr %4097, 1
  %4099 = load ptr, ptr %859, align 8
  %4100 = insertvalue { ptr, ptr, ptr, i32 } %4098, ptr %4099, 2
  %4101 = load i32, ptr %858, align 4
  %4102 = insertvalue { ptr, ptr, ptr, i32 } %4100, i32 %4101, 3
  %4103 = call ptr @llvm.invariant.start.p0(i64 0, ptr %862)
  %4104 = call ptr @llvm.invariant.start.p0(i64 64, ptr %4095)
  %4105 = getelementptr ptr, ptr %4095, i32 %4101
  %4106 = getelementptr ptr, ptr %4105, i32 2
  %4107 = load ptr, ptr %4106, align 8
  %4108 = call ptr @behavior_wrapper(ptr %4107, { ptr, ptr, ptr, i32 } %4102, ptr %863)
  call void %4108({ ptr, ptr, ptr, i32 } %4102, { ptr, ptr, ptr, i32 } %4102, ptr %862) #17
  %4109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %864, i32 0, i32 0
  %4110 = load ptr, ptr %861, align 8
  store ptr %4110, ptr %4109, align 8
  %4111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %864, i32 0, i32 1
  %4112 = load ptr, ptr %860, align 8
  store ptr %4112, ptr %4111, align 8
  %4113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %864, i32 0, i32 2
  %4114 = load ptr, ptr %859, align 8
  store ptr %4114, ptr %4113, align 8
  %4115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %864, i32 0, i32 3
  %4116 = load i32, ptr %858, align 4
  store i32 %4116, ptr %4115, align 4
  call void @set_offset(ptr %864, ptr @Channel)
  %4117 = load ptr, ptr %4109, align 8
  store ptr %4117, ptr %868, align 8
  %4118 = load ptr, ptr %4111, align 8
  store ptr %4118, ptr %867, align 8
  %4119 = load ptr, ptr %4113, align 8
  store ptr %4119, ptr %866, align 8
  %4120 = load i32, ptr %4115, align 4
  store i32 %4120, ptr %865, align 4
  store ptr @_functionliteral_qwmccfjvej, ptr %869, align 8
  %4121 = load ptr, ptr %868, align 8
  %4122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4121, 0
  %4123 = load ptr, ptr %867, align 8
  %4124 = insertvalue { ptr, ptr, ptr, i32 } %4122, ptr %4123, 1
  %4125 = load ptr, ptr %866, align 8
  %4126 = insertvalue { ptr, ptr, ptr, i32 } %4124, ptr %4125, 2
  %4127 = load i32, ptr %865, align 4
  %4128 = insertvalue { ptr, ptr, ptr, i32 } %4126, i32 %4127, 3
  %4129 = load ptr, ptr %869, align 8
  %4130 = call ptr @coroutine_create(ptr %4129, ptr @coroutine_vrzowkgdyk_passer)
  call void @coroutine_vrzowkgdyk_buffer_filler(ptr %4130, { ptr, ptr, ptr, i32 } %4128)
  store ptr %4130, ptr %870, align 8
  %4131 = getelementptr { ptr }, ptr %870, i32 0, i32 0
  %4132 = load ptr, ptr %4131, align 8
  store ptr %4132, ptr %871, align 8
  %4133 = load ptr, ptr %871, align 8
  call void @coroutine_call(ptr %4133)
  %4134 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %4133, i32 0, i32 4
  %4135 = load { ptr, i160 }, ptr %4134, align 8
  store { ptr, i160 } %4135, ptr %872, align 8
  %4136 = load ptr, ptr %868, align 8
  %4137 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4136, 0
  %4138 = load ptr, ptr %867, align 8
  %4139 = insertvalue { ptr, ptr, ptr, i32 } %4137, ptr %4138, 1
  %4140 = load ptr, ptr %866, align 8
  %4141 = insertvalue { ptr, ptr, ptr, i32 } %4139, ptr %4140, 2
  %4142 = load i32, ptr %865, align 4
  %4143 = insertvalue { ptr, ptr, ptr, i32 } %4141, i32 %4142, 3
  %4144 = call ptr @llvm.invariant.start.p0(i64 0, ptr %873)
  %4145 = call ptr @llvm.invariant.start.p0(i64 64, ptr %4136)
  %4146 = getelementptr ptr, ptr %4136, i32 %4142
  %4147 = getelementptr ptr, ptr %4146, i32 3
  %4148 = load ptr, ptr %4147, align 8
  %4149 = call ptr @behavior_wrapper(ptr %4148, { ptr, ptr, ptr, i32 } %4143, ptr %874)
  %4150 = call { ptr, i160 } %4149({ ptr, ptr, ptr, i32 } %4143, { ptr, ptr, ptr, i32 } %4143, ptr %873) #17
  store { ptr, i160 } %4150, ptr %875, align 8
  %4151 = getelementptr { ptr, i160 }, ptr %875, i32 0, i32 1
  %4152 = load i32, ptr %4151, align 4
  store i32 %4152, ptr %876, align 4
  %4153 = load i32, ptr %876, align 4
  store i32 %4153, ptr %877, align 4
  store ptr @i32_typ, ptr %878, align 8
  %4154 = load ptr, ptr %878, align 8
  %4155 = insertvalue { ptr, i160 } undef, ptr %4154, 0
  %4156 = load i160, ptr %877, align 4
  %4157 = insertvalue { ptr, i160 } %4155, i160 %4156, 1
  %4158 = getelementptr [1 x ptr], ptr %879, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4158, align 8
  %4159 = call ptr @llvm.invariant.start.p0(i64 1, ptr %879)
  %4160 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4161 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4162 = getelementptr { ptr }, ptr %880, i32 0, i32 0
  store ptr %4154, ptr %4162, align 8
  %4163 = call ptr @class_behavior_wrapper(ptr %4161, ptr %880)
  call void %4163(ptr %879, { ptr, i160 } %4157) #17
  store i32 0, ptr %881, align 4
  store ptr @i32_typ, ptr %883, align 8
  %4164 = load i32, ptr %881, align 4
  store i32 %4164, ptr %882, align 4
  %4165 = load ptr, ptr %883, align 8
  %4166 = insertvalue { ptr, i160 } undef, ptr %4165, 0
  %4167 = load i160, ptr %882, align 4
  %4168 = insertvalue { ptr, i160 } %4166, i160 %4167, 1
  %4169 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %4169)
  %4170 = load ptr, ptr %685, align 8
  call void @llvm.init.trampoline(ptr %4169, ptr @mxxmveicjx, ptr %4170)
  %4171 = call ptr @adjust_trampoline(ptr %4169)
  store ptr %4171, ptr %884, align 8
  %4172 = call ptr @llvm.invariant.start.p0(i64 24, ptr %4169)
  %4173 = getelementptr { ptr }, ptr %884, i32 0, i32 0
  %4174 = load ptr, ptr %4173, align 8
  %4175 = insertvalue { ptr } undef, ptr %4174, 0
  store ptr @_functionliteral_mswknesszw, ptr %885, align 8
  %4176 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %4176)
  %4177 = load ptr, ptr %885, align 8
  call void @llvm.init.trampoline(ptr %4176, ptr @xyfgcdkiut, ptr %4177)
  %4178 = call ptr @adjust_trampoline(ptr %4176)
  store ptr %4178, ptr %886, align 8
  %4179 = call ptr @llvm.invariant.start.p0(i64 24, ptr %4176)
  %4180 = getelementptr { ptr }, ptr %886, i32 0, i32 0
  %4181 = load ptr, ptr %4180, align 8
  %4182 = insertvalue { ptr } undef, ptr %4181, 0
  store ptr @_functionliteral_rdeiqxonoi, ptr %887, align 8
  %4183 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %4183)
  %4184 = load ptr, ptr %887, align 8
  call void @llvm.init.trampoline(ptr %4183, ptr @phfxvzvziu, ptr %4184)
  %4185 = call ptr @adjust_trampoline(ptr %4183)
  store ptr %4185, ptr %888, align 8
  %4186 = call ptr @llvm.invariant.start.p0(i64 24, ptr %4183)
  %4187 = getelementptr { ptr }, ptr %888, i32 0, i32 0
  %4188 = load ptr, ptr %4187, align 8
  %4189 = insertvalue { ptr } undef, ptr %4188, 0
  store i32 1, ptr %889, align 4
  store i32 15, ptr %890, align 4
  store ptr @Range, ptr %891, align 8
  %4190 = load ptr, ptr %891, align 8
  %4191 = getelementptr ptr, ptr %4190, i32 6
  %4192 = load ptr, ptr %4191, align 8
  %4193 = call { i64, i64 } @size_wrapper(ptr %4192, ptr %891)
  %4194 = extractvalue { i64, i64 } %4193, 0
  %4195 = call ptr @bump_malloc(i64 %4194)
  store ptr @Range, ptr %895, align 8
  store ptr %4195, ptr %894, align 8
  store i32 10, ptr %892, align 4
  store i32 1, ptr %896, align 4
  store i32 15, ptr %897, align 4
  %4196 = load i32, ptr %896, align 4
  %4197 = load i32, ptr %897, align 4
  %4198 = load ptr, ptr %895, align 8
  %4199 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4198, 0
  %4200 = load ptr, ptr %894, align 8
  %4201 = insertvalue { ptr, ptr, ptr, i32 } %4199, ptr %4200, 1
  %4202 = load ptr, ptr %893, align 8
  %4203 = insertvalue { ptr, ptr, ptr, i32 } %4201, ptr %4202, 2
  %4204 = load i32, ptr %892, align 4
  %4205 = insertvalue { ptr, ptr, ptr, i32 } %4203, i32 %4204, 3
  %4206 = getelementptr [2 x ptr], ptr %898, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4206, align 8
  %4207 = getelementptr [2 x ptr], ptr %898, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4207, align 8
  %4208 = call ptr @llvm.invariant.start.p0(i64 4, ptr %898)
  %4209 = call ptr @llvm.invariant.start.p0(i64 440, ptr %4198)
  %4210 = getelementptr ptr, ptr %4198, i32 %4204
  %4211 = getelementptr ptr, ptr %4210, i32 5
  %4212 = load ptr, ptr %4211, align 8
  %4213 = getelementptr { ptr, ptr }, ptr %899, i32 0, i32 0
  store ptr @i32_typ, ptr %4213, align 8
  %4214 = getelementptr { ptr, ptr }, ptr %899, i32 0, i32 1
  store ptr @i32_typ, ptr %4214, align 8
  %4215 = call ptr @behavior_wrapper(ptr %4212, { ptr, ptr, ptr, i32 } %4205, ptr %899)
  call void %4215({ ptr, ptr, ptr, i32 } %4205, { ptr, ptr, ptr, i32 } %4205, ptr %898, i32 %4196, i32 %4197) #17
  %4216 = load ptr, ptr %895, align 8
  %4217 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4216, 0
  %4218 = load ptr, ptr %894, align 8
  %4219 = insertvalue { ptr, ptr, ptr, i32 } %4217, ptr %4218, 1
  %4220 = load ptr, ptr %893, align 8
  %4221 = insertvalue { ptr, ptr, ptr, i32 } %4219, ptr %4220, 2
  %4222 = load i32, ptr %892, align 4
  %4223 = insertvalue { ptr, ptr, ptr, i32 } %4221, i32 %4222, 3
  %4224 = getelementptr [1 x ptr], ptr %900, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %4224, align 8
  %4225 = call ptr @llvm.invariant.start.p0(i64 1, ptr %900)
  %4226 = call ptr @llvm.invariant.start.p0(i64 440, ptr %4216)
  %4227 = getelementptr ptr, ptr %4216, i32 %4222
  %4228 = getelementptr ptr, ptr %4227, i32 12
  %4229 = load ptr, ptr %4228, align 8
  %4230 = getelementptr { ptr }, ptr %901, i32 0, i32 0
  store ptr @function_typ, ptr %4230, align 8
  %4231 = call ptr @behavior_wrapper(ptr %4229, { ptr, ptr, ptr, i32 } %4223, ptr %901)
  %4232 = call { ptr, ptr, ptr, i32 } %4231({ ptr, ptr, ptr, i32 } %4223, { ptr, ptr, ptr, i32 } %4223, ptr %900, { ptr } %4189) #17
  store { ptr, ptr, ptr, i32 } %4232, ptr %902, align 8
  %4233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %902, i32 0, i32 0
  %4234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %903, i32 0, i32 0
  %4235 = load ptr, ptr %4233, align 8
  store ptr %4235, ptr %4234, align 8
  %4236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %902, i32 0, i32 1
  %4237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %903, i32 0, i32 1
  %4238 = load ptr, ptr %4236, align 8
  store ptr %4238, ptr %4237, align 8
  %4239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %902, i32 0, i32 2
  %4240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %903, i32 0, i32 2
  %4241 = load ptr, ptr %4239, align 8
  store ptr %4241, ptr %4240, align 8
  %4242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %902, i32 0, i32 3
  %4243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %903, i32 0, i32 3
  %4244 = load i32, ptr %4242, align 4
  store i32 %4244, ptr %4243, align 4
  call void @set_offset(ptr %903, ptr @MapIterable)
  %4245 = load ptr, ptr %4234, align 8
  %4246 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4245, 0
  %4247 = load ptr, ptr %4237, align 8
  %4248 = insertvalue { ptr, ptr, ptr, i32 } %4246, ptr %4247, 1
  %4249 = load ptr, ptr %4240, align 8
  %4250 = insertvalue { ptr, ptr, ptr, i32 } %4248, ptr %4249, 2
  %4251 = load i32, ptr %4243, align 4
  %4252 = insertvalue { ptr, ptr, ptr, i32 } %4250, i32 %4251, 3
  %4253 = getelementptr [1 x ptr], ptr %904, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %4253, align 8
  %4254 = call ptr @llvm.invariant.start.p0(i64 1, ptr %904)
  %4255 = call ptr @llvm.invariant.start.p0(i64 408, ptr %4245)
  %4256 = getelementptr ptr, ptr %4245, i32 %4251
  %4257 = getelementptr ptr, ptr %4256, i32 11
  %4258 = load ptr, ptr %4257, align 8
  %4259 = getelementptr { ptr }, ptr %905, i32 0, i32 0
  store ptr @function_typ, ptr %4259, align 8
  %4260 = call ptr @behavior_wrapper(ptr %4258, { ptr, ptr, ptr, i32 } %4252, ptr %905)
  %4261 = call { ptr, ptr, ptr, i32 } %4260({ ptr, ptr, ptr, i32 } %4252, { ptr, ptr, ptr, i32 } %4252, ptr %904, { ptr } %4182) #17
  store { ptr, ptr, ptr, i32 } %4261, ptr %906, align 8
  %4262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 0
  %4263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %907, i32 0, i32 0
  %4264 = load ptr, ptr %4262, align 8
  store ptr %4264, ptr %4263, align 8
  %4265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 1
  %4266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %907, i32 0, i32 1
  %4267 = load ptr, ptr %4265, align 8
  store ptr %4267, ptr %4266, align 8
  %4268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 2
  %4269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %907, i32 0, i32 2
  %4270 = load ptr, ptr %4268, align 8
  store ptr %4270, ptr %4269, align 8
  %4271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 3
  %4272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %907, i32 0, i32 3
  %4273 = load i32, ptr %4271, align 4
  store i32 %4273, ptr %4272, align 4
  call void @set_offset(ptr %907, ptr @FilterIterable)
  %4274 = load ptr, ptr %4263, align 8
  %4275 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4274, 0
  %4276 = load ptr, ptr %4266, align 8
  %4277 = insertvalue { ptr, ptr, ptr, i32 } %4275, ptr %4276, 1
  %4278 = load ptr, ptr %4269, align 8
  %4279 = insertvalue { ptr, ptr, ptr, i32 } %4277, ptr %4278, 2
  %4280 = load i32, ptr %4272, align 4
  %4281 = insertvalue { ptr, ptr, ptr, i32 } %4279, i32 %4280, 3
  %4282 = getelementptr [2 x ptr], ptr %908, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4282, align 8
  %4283 = getelementptr [2 x ptr], ptr %908, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri32, ptr %4283, align 8
  %4284 = call ptr @llvm.invariant.start.p0(i64 4, ptr %908)
  %4285 = call ptr @llvm.invariant.start.p0(i64 400, ptr %4274)
  %4286 = getelementptr ptr, ptr %4274, i32 %4280
  %4287 = getelementptr ptr, ptr %4286, i32 6
  %4288 = load ptr, ptr %4287, align 8
  %4289 = getelementptr { ptr, ptr }, ptr %909, i32 0, i32 0
  store ptr %4165, ptr %4289, align 8
  %4290 = getelementptr { ptr, ptr }, ptr %909, i32 0, i32 1
  store ptr @function_typ, ptr %4290, align 8
  %4291 = call ptr @behavior_wrapper(ptr %4288, { ptr, ptr, ptr, i32 } %4281, ptr %909)
  %4292 = call { ptr, i160 } %4291({ ptr, ptr, ptr, i32 } %4281, { ptr, ptr, ptr, i32 } %4281, ptr %908, { ptr, i160 } %4168, { ptr } %4175) #17
  store { ptr, i160 } %4292, ptr %910, align 8
  %4293 = getelementptr { ptr, i160 }, ptr %910, i32 0, i32 1
  %4294 = load i32, ptr %4293, align 4
  store i32 %4294, ptr %911, align 4
  %4295 = load i32, ptr %911, align 4
  store i32 %4295, ptr %912, align 4
  store ptr @i32_typ, ptr %913, align 8
  %4296 = load ptr, ptr %913, align 8
  %4297 = insertvalue { ptr, i160 } undef, ptr %4296, 0
  %4298 = load i160, ptr %912, align 4
  %4299 = insertvalue { ptr, i160 } %4297, i160 %4298, 1
  %4300 = getelementptr [1 x ptr], ptr %914, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4300, align 8
  %4301 = call ptr @llvm.invariant.start.p0(i64 1, ptr %914)
  %4302 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4303 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4304 = getelementptr { ptr }, ptr %915, i32 0, i32 0
  store ptr %4296, ptr %4304, align 8
  %4305 = call ptr @class_behavior_wrapper(ptr %4303, ptr %915)
  call void %4305(ptr %914, { ptr, i160 } %4299) #17
  store i32 256, ptr %916, align 4
  %4306 = load i32, ptr %916, align 4
  store i32 %4306, ptr %917, align 4
  store ptr @i32_typ, ptr %918, align 8
  %4307 = load ptr, ptr %918, align 8
  %4308 = insertvalue { ptr, i160 } undef, ptr %4307, 0
  %4309 = load i160, ptr %917, align 4
  %4310 = insertvalue { ptr, i160 } %4308, i160 %4309, 1
  %4311 = getelementptr [1 x ptr], ptr %919, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4311, align 8
  %4312 = call ptr @llvm.invariant.start.p0(i64 1, ptr %919)
  %4313 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4314 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4315 = getelementptr { ptr }, ptr %920, i32 0, i32 0
  store ptr %4307, ptr %4315, align 8
  %4316 = call ptr @class_behavior_wrapper(ptr %4314, ptr %920)
  call void %4316(ptr %919, { ptr, i160 } %4310) #17
  store i32 4, ptr %921, align 4
  store i32 5, ptr %922, align 4
  store i32 6, ptr %923, align 4
  %4317 = load i32, ptr %921, align 4
  %4318 = load i32, ptr %922, align 4
  %4319 = load i32, ptr %923, align 4
  store i32 %4317, ptr %926, align 4
  store i32 %4318, ptr %924, align 4
  store i32 %4319, ptr %925, align 4
  %4320 = load i32, ptr %924, align 4
  store i32 %4320, ptr %927, align 4
  store ptr @i32_typ, ptr %928, align 8
  %4321 = load ptr, ptr %928, align 8
  %4322 = insertvalue { ptr, i160 } undef, ptr %4321, 0
  %4323 = load i160, ptr %927, align 4
  %4324 = insertvalue { ptr, i160 } %4322, i160 %4323, 1
  %4325 = getelementptr [1 x ptr], ptr %929, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4325, align 8
  %4326 = call ptr @llvm.invariant.start.p0(i64 1, ptr %929)
  %4327 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4328 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4329 = getelementptr { ptr }, ptr %930, i32 0, i32 0
  store ptr %4321, ptr %4329, align 8
  %4330 = call ptr @class_behavior_wrapper(ptr %4328, ptr %930)
  call void %4330(ptr %929, { ptr, i160 } %4324) #17
  store i32 4, ptr %931, align 4
  %4331 = load i32, ptr %931, align 4
  store i32 4, ptr %932, align 4
  %4332 = load i32, ptr %932, align 4
  %4333 = sext i32 %4332 to i64
  %4334 = mul i64 %4333, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %4335 = call ptr @bump_malloc(i64 %4334)
  store ptr %4335, ptr %933, align 8
  %4336 = getelementptr { ptr }, ptr %933, i32 0, i32 0
  %4337 = load ptr, ptr %4336, align 8
  store ptr %4337, ptr %934, align 8
  store i32 4, ptr %935, align 4
  store i32 0, ptr %936, align 4
  %4338 = load ptr, ptr %934, align 8
  %4339 = load i32, ptr %936, align 4
  %4340 = sext i32 %4339 to i64
  %4341 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %4340
  %4342 = getelementptr i8, ptr %4338, i64 %4341
  %4343 = load i32, ptr %935, align 4
  store i32 %4343, ptr %4342, align 4
  store i32 5, ptr %937, align 4
  store i32 1, ptr %938, align 4
  %4344 = load ptr, ptr %934, align 8
  %4345 = load i32, ptr %938, align 4
  %4346 = sext i32 %4345 to i64
  %4347 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %4346
  %4348 = getelementptr i8, ptr %4344, i64 %4347
  %4349 = load i32, ptr %937, align 4
  store i32 %4349, ptr %4348, align 4
  store i32 6, ptr %939, align 4
  store i32 2, ptr %940, align 4
  %4350 = load ptr, ptr %934, align 8
  %4351 = load i32, ptr %940, align 4
  %4352 = sext i32 %4351 to i64
  %4353 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %4352
  %4354 = getelementptr i8, ptr %4350, i64 %4353
  %4355 = load i32, ptr %939, align 4
  store i32 %4355, ptr %4354, align 4
  store i32 3, ptr %941, align 4
  store i32 4, ptr %942, align 4
  store ptr @Array, ptr %943, align 8
  %4356 = getelementptr ptr, ptr %943, i32 1
  store ptr @_parameterization_Ptri32, ptr %4356, align 8
  %4357 = load ptr, ptr %943, align 8
  %4358 = getelementptr ptr, ptr %4357, i32 6
  %4359 = load ptr, ptr %4358, align 8
  %4360 = call { i64, i64 } @size_wrapper(ptr %4359, ptr %943)
  %4361 = extractvalue { i64, i64 } %4360, 0
  %4362 = call ptr @bump_malloc(i64 %4361)
  store ptr @_parameterization_Ptri32, ptr %4362, align 8
  %4363 = call ptr @llvm.invariant.start.p0(i64 8, ptr %4362)
  store ptr @Array, ptr %947, align 8
  store ptr %4362, ptr %946, align 8
  store i32 10, ptr %944, align 4
  store i32 3, ptr %948, align 4
  store i32 4, ptr %949, align 4
  %4364 = load ptr, ptr %934, align 8
  %4365 = insertvalue { ptr } undef, ptr %4364, 0
  %4366 = load i32, ptr %948, align 4
  %4367 = load i32, ptr %949, align 4
  %4368 = load ptr, ptr %947, align 8
  %4369 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4368, 0
  %4370 = load ptr, ptr %946, align 8
  %4371 = insertvalue { ptr, ptr, ptr, i32 } %4369, ptr %4370, 1
  %4372 = load ptr, ptr %945, align 8
  %4373 = insertvalue { ptr, ptr, ptr, i32 } %4371, ptr %4372, 2
  %4374 = load i32, ptr %944, align 4
  %4375 = insertvalue { ptr, ptr, ptr, i32 } %4373, i32 %4374, 3
  %4376 = getelementptr [3 x ptr], ptr %950, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %4376, align 8
  %4377 = getelementptr [3 x ptr], ptr %950, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4377, align 8
  %4378 = getelementptr [3 x ptr], ptr %950, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %4378, align 8
  %4379 = call ptr @llvm.invariant.start.p0(i64 9, ptr %950)
  %4380 = call ptr @llvm.invariant.start.p0(i64 664, ptr %4368)
  %4381 = getelementptr ptr, ptr %4368, i32 %4374
  %4382 = getelementptr ptr, ptr %4381, i32 8
  %4383 = load ptr, ptr %4382, align 8
  %4384 = getelementptr { ptr, ptr, ptr }, ptr %951, i32 0, i32 0
  store ptr @buffer_typ, ptr %4384, align 8
  %4385 = getelementptr { ptr, ptr, ptr }, ptr %951, i32 0, i32 1
  store ptr @i32_typ, ptr %4385, align 8
  %4386 = getelementptr { ptr, ptr, ptr }, ptr %951, i32 0, i32 2
  store ptr @i32_typ, ptr %4386, align 8
  %4387 = call ptr @behavior_wrapper(ptr %4383, { ptr, ptr, ptr, i32 } %4375, ptr %951)
  call void %4387({ ptr, ptr, ptr, i32 } %4375, { ptr, ptr, ptr, i32 } %4375, ptr %950, { ptr } %4365, i32 %4366, i32 %4367) #17
  %4388 = load ptr, ptr %947, align 8
  %4389 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4388, 0
  %4390 = load ptr, ptr %946, align 8
  %4391 = insertvalue { ptr, ptr, ptr, i32 } %4389, ptr %4390, 1
  %4392 = load ptr, ptr %945, align 8
  %4393 = insertvalue { ptr, ptr, ptr, i32 } %4391, ptr %4392, 2
  %4394 = load i32, ptr %944, align 4
  %4395 = insertvalue { ptr, ptr, ptr, i32 } %4393, i32 %4394, 3
  %4396 = getelementptr [1 x ptr], ptr %952, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4396, align 8
  %4397 = call ptr @llvm.invariant.start.p0(i64 1, ptr %952)
  %4398 = call ptr @llvm.invariant.start.p0(i64 664, ptr %4388)
  %4399 = getelementptr ptr, ptr %4388, i32 %4394
  %4400 = getelementptr ptr, ptr %4399, i32 14
  %4401 = load ptr, ptr %4400, align 8
  %4402 = getelementptr { ptr }, ptr %953, i32 0, i32 0
  store ptr @i32_typ, ptr %4402, align 8
  %4403 = call ptr @behavior_wrapper(ptr %4401, { ptr, ptr, ptr, i32 } %4395, ptr %953)
  %4404 = call { ptr, i160 } %4403({ ptr, ptr, ptr, i32 } %4395, { ptr, ptr, ptr, i32 } %4395, ptr %952, i32 %4331) #17
  store { ptr, i160 } %4404, ptr %954, align 8
  %4405 = getelementptr { ptr, i160 }, ptr %954, i32 0, i32 1
  %4406 = load i32, ptr %4405, align 4
  store i32 %4406, ptr %955, align 4
  ret i32 0
}

declare i64 @clock()

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.init.trampoline(ptr nocapture writeonly, ptr readnone, ptr readnone) #0

define { i64, i64 } @_data_size_bool_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_bool_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @bool_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_bool_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_bool_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_bool_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

define { i64, i64 } @_data_size_any_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_data_size_Object(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_data_size_i8_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i8_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i8_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i8_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i8_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i8_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_i32_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i32_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i32_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i32_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i32_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i32_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_i64_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i64 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i64 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i64_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i64_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i64_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_i128_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i128 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i128 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i128, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i128, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i128_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i128_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i128_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i128_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i128_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_f64_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_f64_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @f64_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_f64_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_f64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_f64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_nil_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_nil_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @nil_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_nil_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_nil_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_nil_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_nothing_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_nothing_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @nothing_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_nothing_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_nothing_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_nothing_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_coroutine_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_coroutine_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @coroutine_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_coroutine_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_coroutine_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_coroutine_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_function_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_function_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @function_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_function_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_function_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_function_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_buffer_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_buffer_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @buffer_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_buffer_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_buffer_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_buffer_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_tuple_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @tuple_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_tuple_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_tuple_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_tuple_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_union_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem6, align 8
  store ptr @union_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_union_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload5 = load i64, ptr %.reg2mem, align 4
  %7 = icmp eq i64 %.reload5, 32
  br i1 %7, label %._crit_edge, label %9

._crit_edge:                                      ; preds = %2
  store ptr %3, ptr %.reg2mem10, align 8
  br label %8

8:                                                ; preds = %._crit_edge1, %._crit_edge
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %.reload4 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload11, ptr %0, i64 %.reload4, i1 false)
  br label %13

9:                                                ; preds = %2
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %10 = icmp sle i64 %.reload3, 16
  br i1 %10, label %._crit_edge1, label %11

._crit_edge1:                                     ; preds = %9
  %.reload9 = load ptr, ptr %.reg2mem6, align 8
  store ptr %.reload9, ptr %.reg2mem10, align 8
  br label %8

11:                                               ; preds = %9
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %12 = call ptr @bump_malloc(i64 %.reload2)
  %.reload = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %12, ptr %0, i64 %.reload, i1 false)
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  store ptr %12, ptr %.reload8, align 8
  br label %13

13:                                               ; preds = %11, %8
  %14 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, i160 } undef, ptr %15, 0
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %17 = load i160, ptr %.reload7, align 4
  %18 = insertvalue { ptr, i160 } %16, i160 %17, 1
  ret { ptr, i160 } %18
}

define { i64, i64 } @_data_size_Representable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 1, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [2 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Representable)
  %18 = alloca i32, align 4
  store i32 7, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([6 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <6 x i8>, ptr @xqgco_Object, align 8
  store <6 x i8> %33, ptr %32, align 8
  %34 = alloca i32, align 4
  store i32 6, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 7, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca i32, align 4
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  store ptr @String, ptr %46, align 8
  store ptr %42, ptr %45, align 8
  store i32 10, ptr %43, align 4
  %47 = alloca i32, align 4
  store i32 6, ptr %47, align 4
  %48 = alloca i32, align 4
  store i32 7, ptr %48, align 4
  %49 = load ptr, ptr %24, align 8
  %50 = insertvalue { ptr } undef, ptr %49, 0
  %51 = load i32, ptr %47, align 4
  %52 = load i32, ptr %48, align 4
  %53 = load ptr, ptr %46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %45, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %44, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %43, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca [3 x ptr], align 8
  %62 = getelementptr [3 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %61, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %61, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr %61)
  %66 = call ptr @llvm.invariant.start.p0(i64 616, ptr %53)
  %67 = getelementptr ptr, ptr %53, i32 %59
  %68 = getelementptr ptr, ptr %67, i32 5
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr, ptr, ptr }, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 2
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %60, ptr %70)
  call void %74({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr } %50, i32 %51, i32 %52) #17
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %77 = load ptr, ptr %46, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %79 = load ptr, ptr %45, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %81 = load ptr, ptr %44, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %83 = load i32, ptr %43, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %75, ptr @String)
  %84 = load ptr, ptr %76, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %78, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %80, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %82, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  ret { ptr, ptr, ptr, i32 } %91
}

define { i64, i64 } @_data_size_String(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @String_field_String_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_Character
}

define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 28, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @buffer_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @i32_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 29, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [77 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 30, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 31, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 32, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_append_xPtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i8_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 33, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 34, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [77 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 35, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 36, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [77 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 37, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 38, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 39, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 40, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 41, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Character, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Character to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 42, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [77 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @String_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 43, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 44, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 45, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 46, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 47, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [77 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 48, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [77 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 49, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [77 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 50, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [77 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 51, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca i32, align 4
  store i32 1, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = load ptr, ptr %10, align 8
  %25 = load ptr, ptr %5, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 616, ptr %25)
  %27 = load i32, ptr %16, align 4
  %28 = getelementptr ptr, ptr %25, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %31(ptr %24, { ptr } %34) #15
  %35 = alloca i32, align 4
  store i32 1, ptr %35, align 4
  %36 = load ptr, ptr %10, align 8
  %37 = load ptr, ptr %5, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 616, ptr %37)
  %39 = load i32, ptr %16, align 4
  %40 = getelementptr ptr, ptr %37, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load i32, ptr %35, align 4
  call void %44(ptr %36, i32 %45) #15
  %46 = alloca i32, align 4
  store i32 0, ptr %46, align 4
  %47 = load ptr, ptr %10, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 616, ptr %48)
  %50 = load i32, ptr %16, align 4
  %51 = getelementptr ptr, ptr %48, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = load i32, ptr %46, align 4
  call void %55(ptr %47, i32 %56) #15
  ret void
}

define void @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @String)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 616, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %21, align 8
  %31 = insertvalue { ptr } undef, ptr %30, 0
  call void %29(ptr %22, { ptr } %31) #15
  %32 = alloca i32, align 4
  store i32 %4, ptr %32, align 4
  %33 = load ptr, ptr %13, align 8
  %34 = load ptr, ptr %8, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 616, ptr %34)
  %36 = load i32, ptr %19, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load i32, ptr %32, align 4
  call void %41(ptr %33, i32 %42) #15
  %43 = alloca i32, align 4
  store i32 %5, ptr %43, align 4
  %44 = load ptr, ptr %13, align 8
  %45 = load ptr, ptr %8, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 616, ptr %45)
  %47 = load i32, ptr %19, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load i32, ptr %43, align 4
  call void %52(ptr %44, i32 %53) #15
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 616, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #16
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 616, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #16
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 616, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr } %25(ptr %18) #16
  %27 = alloca ptr, align 8
  store { ptr } %26, ptr %27, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr } undef, ptr %28, 0
  ret { ptr } %29
}

define { ptr, ptr, ptr, i32 } @String_append_xPtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr }, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i32, align 4
  %17 = alloca ptr, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i1, align 1
  %21 = alloca i8, align 1
  %22 = alloca ptr, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca { ptr }, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem21 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem40 = alloca ptr, align 8
  %.reg2mem43 = alloca ptr, align 8
  %.reg2mem59 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %31, align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  store ptr %34, ptr %.reg2mem59, align 8
  %35 = load ptr, ptr %33, align 8
  %.reload61 = load ptr, ptr %.reg2mem59, align 8
  store ptr %35, ptr %.reload61, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  store ptr %37, ptr %.reg2mem43, align 8
  %38 = load ptr, ptr %36, align 8
  %.reload58 = load ptr, ptr %.reg2mem43, align 8
  store ptr %38, ptr %.reload58, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  store ptr %40, ptr %.reg2mem40, align 8
  %41 = load ptr, ptr %39, align 8
  %.reload42 = load ptr, ptr %.reg2mem40, align 8
  store ptr %41, ptr %.reload42, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr %43, ptr %.reg2mem24, align 8
  %44 = load i32, ptr %42, align 4
  %.reload39 = load ptr, ptr %.reg2mem24, align 8
  store i32 %44, ptr %.reload39, align 4
  call void @set_offset(ptr %32, ptr @String)
  %45 = alloca i8, align 1
  store i8 %3, ptr %45, align 1
  %.reload57 = load ptr, ptr %.reg2mem43, align 8
  %46 = load ptr, ptr %.reload57, align 8
  %47 = load ptr, ptr %32, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 616, ptr %47)
  %.reload38 = load ptr, ptr %.reg2mem24, align 8
  %49 = load i32, ptr %.reload38, align 4
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = getelementptr ptr, ptr %50, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = call i32 %54(ptr %46) #16
  %56 = alloca i32, align 4
  store i32 %55, ptr %56, align 4
  %.reload56 = load ptr, ptr %.reg2mem43, align 8
  %57 = load ptr, ptr %.reload56, align 8
  %58 = load ptr, ptr %32, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 616, ptr %58)
  %.reload37 = load ptr, ptr %.reg2mem24, align 8
  %60 = load i32, ptr %.reload37, align 4
  %61 = getelementptr ptr, ptr %58, i32 %60
  %62 = getelementptr ptr, ptr %61, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr { ptr, ptr }, ptr %63, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %66 = call i32 %65(ptr %57) #16
  %67 = alloca i32, align 4
  store i32 %66, ptr %67, align 4
  %68 = load i32, ptr %56, align 4
  %69 = load i32, ptr %67, align 4
  %70 = icmp slt i32 %68, %69
  %71 = alloca i1, align 1
  store i1 %70, ptr %71, align 1
  %72 = load i1, ptr %71, align 1
  %73 = select i1 %72, ptr %5, ptr %25
  store ptr %73, ptr %.reg2mem21, align 8
  %74 = select i1 %72, ptr %6, ptr %26
  store ptr %74, ptr %.reg2mem18, align 8
  %75 = select i1 %72, ptr %7, ptr %27
  store ptr %75, ptr %.reg2mem15, align 8
  %76 = select i1 %72, ptr %8, ptr %28
  store ptr %76, ptr %.reg2mem12, align 8
  %77 = select i1 %72, ptr %9, ptr %29
  store ptr %77, ptr %.reg2mem9, align 8
  %78 = select i1 %72, ptr %10, ptr %30
  store ptr %78, ptr %.reg2mem3, align 8
  br i1 %72, label %79, label %80

79:                                               ; preds = %4
  br label %182

80:                                               ; preds = %4
  %.reload55 = load ptr, ptr %.reg2mem43, align 8
  %81 = load ptr, ptr %.reload55, align 8
  %82 = load ptr, ptr %32, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 616, ptr %82)
  %.reload36 = load ptr, ptr %.reg2mem24, align 8
  %84 = load i32, ptr %.reload36, align 4
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 2
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr { ptr, ptr }, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = call i32 %89(ptr %81) #16
  store i32 %90, ptr %11, align 4
  store i32 2, ptr %12, align 4
  %91 = load i32, ptr %11, align 4
  %92 = load i32, ptr %12, align 4
  %93 = mul i32 %91, %92
  store i32 %93, ptr %13, align 4
  %.reload54 = load ptr, ptr %.reg2mem43, align 8
  %94 = load ptr, ptr %.reload54, align 8
  %95 = load ptr, ptr %32, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 616, ptr %95)
  %.reload35 = load ptr, ptr %.reg2mem24, align 8
  %97 = load i32, ptr %.reload35, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 2
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = load i32, ptr %13, align 4
  call void %102(ptr %94, i32 %103) #15
  %.reload53 = load ptr, ptr %.reg2mem43, align 8
  %104 = load ptr, ptr %.reload53, align 8
  %105 = load ptr, ptr %32, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 616, ptr %105)
  %.reload34 = load ptr, ptr %.reg2mem24, align 8
  %107 = load i32, ptr %.reload34, align 4
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr }, ptr %109, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = call { ptr } %111(ptr %104) #16
  store { ptr } %112, ptr %14, align 8
  %113 = load ptr, ptr %14, align 8
  store ptr %113, ptr %15, align 8
  %.reload52 = load ptr, ptr %.reg2mem43, align 8
  %114 = load ptr, ptr %.reload52, align 8
  %115 = load ptr, ptr %32, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 616, ptr %115)
  %.reload33 = load ptr, ptr %.reg2mem24, align 8
  %117 = load i32, ptr %.reload33, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 2
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call i32 %122(ptr %114) #16
  store i32 %123, ptr %16, align 4
  %124 = load i32, ptr %16, align 4
  %125 = sext i32 %124 to i64
  %126 = mul i64 %125, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %127 = call ptr @bump_malloc(i64 %126)
  store ptr %127, ptr %17, align 8
  %.reload51 = load ptr, ptr %.reg2mem43, align 8
  %128 = load ptr, ptr %.reload51, align 8
  %129 = load ptr, ptr %32, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 616, ptr %129)
  %.reload32 = load ptr, ptr %.reg2mem24, align 8
  %131 = load i32, ptr %.reload32, align 4
  %132 = getelementptr ptr, ptr %129, i32 %131
  %133 = load ptr, ptr %132, align 8
  %134 = getelementptr { ptr, ptr }, ptr %133, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr } undef, ptr %137, 0
  call void %135(ptr %128, { ptr } %138) #15
  store i32 0, ptr %18, align 4
  br label %139

139:                                              ; preds = %._crit_edge1, %80
  %.reload50 = load ptr, ptr %.reg2mem43, align 8
  %140 = load ptr, ptr %.reload50, align 8
  %141 = load ptr, ptr %32, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 616, ptr %141)
  %.reload31 = load ptr, ptr %.reg2mem24, align 8
  %143 = load i32, ptr %.reload31, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr }, ptr %146, i32 0, i32 0
  %148 = load ptr, ptr %147, align 8
  %149 = call i32 %148(ptr %140) #16
  store i32 %149, ptr %19, align 4
  %150 = load i32, ptr %18, align 4
  %151 = load i32, ptr %19, align 4
  %152 = icmp slt i32 %150, %151
  store i1 %152, ptr %20, align 1
  %153 = load i1, ptr %20, align 1
  store i1 %153, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %154, label %._crit_edge

._crit_edge:                                      ; preds = %139
  br label %180

154:                                              ; preds = %139
  %155 = load ptr, ptr %15, align 8
  %156 = load i32, ptr %18, align 4
  %157 = sext i32 %156 to i64
  %158 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %157
  %159 = getelementptr i8, ptr %155, i64 %158
  %160 = load i8, ptr %159, align 1
  store i8 %160, ptr %21, align 1
  %.reload49 = load ptr, ptr %.reg2mem43, align 8
  %161 = load ptr, ptr %.reload49, align 8
  %162 = load ptr, ptr %32, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 616, ptr %162)
  %.reload30 = load ptr, ptr %.reg2mem24, align 8
  %164 = load i32, ptr %.reload30, align 4
  %165 = getelementptr ptr, ptr %162, i32 %164
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr { ptr, ptr }, ptr %166, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %169 = call { ptr } %168(ptr %161) #16
  store { ptr } %169, ptr %22, align 8
  %170 = load ptr, ptr %22, align 8
  %171 = load i32, ptr %18, align 4
  %172 = sext i32 %171 to i64
  %173 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %172
  %174 = getelementptr i8, ptr %170, i64 %173
  %175 = load i8, ptr %21, align 1
  store i8 %175, ptr %174, align 1
  store i32 1, ptr %23, align 4
  %176 = load i32, ptr %18, align 4
  %177 = load i32, ptr %23, align 4
  %178 = add i32 %176, %177
  store i32 %178, ptr %24, align 4
  %179 = load i32, ptr %24, align 4
  store i32 %179, ptr %18, align 4
  br label %180

180:                                              ; preds = %._crit_edge, %154
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %181

._crit_edge1:                                     ; preds = %180
  br label %139

181:                                              ; preds = %180
  br label %182

182:                                              ; preds = %181, %79
  %.reload48 = load ptr, ptr %.reg2mem43, align 8
  %183 = load ptr, ptr %.reload48, align 8
  %184 = load ptr, ptr %32, align 8
  %185 = call ptr @llvm.invariant.start.p0(i64 616, ptr %184)
  %.reload29 = load ptr, ptr %.reg2mem24, align 8
  %186 = load i32, ptr %.reload29, align 4
  %187 = getelementptr ptr, ptr %184, i32 %186
  %188 = load ptr, ptr %187, align 8
  %189 = getelementptr { ptr, ptr }, ptr %188, i32 0, i32 0
  %190 = load ptr, ptr %189, align 8
  %191 = call { ptr } %190(ptr %183) #16
  %.reload23 = load ptr, ptr %.reg2mem21, align 8
  store { ptr } %191, ptr %.reload23, align 8
  %.reload47 = load ptr, ptr %.reg2mem43, align 8
  %192 = load ptr, ptr %.reload47, align 8
  %193 = load ptr, ptr %32, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 616, ptr %193)
  %.reload28 = load ptr, ptr %.reg2mem24, align 8
  %195 = load i32, ptr %.reload28, align 4
  %196 = getelementptr ptr, ptr %193, i32 %195
  %197 = getelementptr ptr, ptr %196, i32 1
  %198 = load ptr, ptr %197, align 8
  %199 = getelementptr { ptr, ptr }, ptr %198, i32 0, i32 0
  %200 = load ptr, ptr %199, align 8
  %201 = call i32 %200(ptr %192) #16
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  store i32 %201, ptr %.reload20, align 4
  %.reload22 = load ptr, ptr %.reg2mem21, align 8
  %202 = load ptr, ptr %.reload22, align 8
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %203 = load i32, ptr %.reload19, align 4
  %204 = sext i32 %203 to i64
  %205 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %204
  %206 = getelementptr i8, ptr %202, i64 %205
  %207 = load i8, ptr %45, align 1
  store i8 %207, ptr %206, align 1
  %.reload46 = load ptr, ptr %.reg2mem43, align 8
  %208 = load ptr, ptr %.reload46, align 8
  %209 = load ptr, ptr %32, align 8
  %210 = call ptr @llvm.invariant.start.p0(i64 616, ptr %209)
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %211 = load i32, ptr %.reload27, align 4
  %212 = getelementptr ptr, ptr %209, i32 %211
  %213 = getelementptr ptr, ptr %212, i32 1
  %214 = load ptr, ptr %213, align 8
  %215 = getelementptr { ptr, ptr }, ptr %214, i32 0, i32 0
  %216 = load ptr, ptr %215, align 8
  %217 = call i32 %216(ptr %208) #16
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  store i32 %217, ptr %.reload17, align 4
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  store i32 1, ptr %.reload14, align 4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %218 = load i32, ptr %.reload16, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %219 = load i32, ptr %.reload13, align 4
  %220 = add i32 %218, %219
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  store i32 %220, ptr %.reload11, align 4
  %.reload45 = load ptr, ptr %.reg2mem43, align 8
  %221 = load ptr, ptr %.reload45, align 8
  %222 = load ptr, ptr %32, align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 616, ptr %222)
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  %224 = load i32, ptr %.reload26, align 4
  %225 = getelementptr ptr, ptr %222, i32 %224
  %226 = getelementptr ptr, ptr %225, i32 1
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr { ptr, ptr }, ptr %227, i32 0, i32 1
  %229 = load ptr, ptr %228, align 8
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %230 = load i32, ptr %.reload10, align 4
  call void %229(ptr %221, i32 %230) #15
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload8, i32 0, i32 0
  %.reload60 = load ptr, ptr %.reg2mem59, align 8
  %232 = load ptr, ptr %.reload60, align 8
  store ptr %232, ptr %231, align 8
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload7, i32 0, i32 1
  %.reload44 = load ptr, ptr %.reg2mem43, align 8
  %234 = load ptr, ptr %.reload44, align 8
  store ptr %234, ptr %233, align 8
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload6, i32 0, i32 2
  %.reload41 = load ptr, ptr %.reg2mem40, align 8
  %236 = load ptr, ptr %.reload41, align 8
  store ptr %236, ptr %235, align 8
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload5, i32 0, i32 3
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %238 = load i32, ptr %.reload25, align 4
  store i32 %238, ptr %237, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  call void @set_offset(ptr %.reload4, ptr @String)
  %239 = load ptr, ptr %231, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %239, 0
  %241 = load ptr, ptr %233, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %241, 1
  %243 = load ptr, ptr %235, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %243, 2
  %245 = load i32, ptr %237, align 4
  %246 = insertvalue { ptr, ptr, ptr, i32 } %244, i32 %245, 3
  ret { ptr, ptr, ptr, i32 } %246
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i1, align 1
  %10 = alloca i8, align 1
  %11 = alloca ptr, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca ptr, align 8
  %22 = alloca ptr, align 8
  %23 = alloca i32, align 4
  %24 = alloca ptr, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i1, align 1
  %30 = alloca i32, align 4
  %31 = alloca i1, align 1
  %32 = alloca i8, align 1
  %33 = alloca ptr, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i8, align 1
  %37 = alloca ptr, align 8
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem39 = alloca ptr, align 8
  %.reg2mem42 = alloca ptr, align 8
  %.reg2mem61 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %45, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  store ptr %48, ptr %.reg2mem61, align 8
  %49 = load ptr, ptr %47, align 8
  %.reload63 = load ptr, ptr %.reg2mem61, align 8
  store ptr %49, ptr %.reload63, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  store ptr %51, ptr %.reg2mem42, align 8
  %52 = load ptr, ptr %50, align 8
  %.reload60 = load ptr, ptr %.reg2mem42, align 8
  store ptr %52, ptr %.reload60, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  store ptr %54, ptr %.reg2mem39, align 8
  %55 = load ptr, ptr %53, align 8
  %.reload41 = load ptr, ptr %.reg2mem39, align 8
  store ptr %55, ptr %.reload41, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  store ptr %57, ptr %.reg2mem20, align 8
  %58 = load i32, ptr %56, align 4
  %.reload38 = load ptr, ptr %.reg2mem20, align 8
  store i32 %58, ptr %.reload38, align 4
  call void @set_offset(ptr %46, ptr @String)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @String)
  %73 = load ptr, ptr %62, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %65, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %68, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %71, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  %81 = alloca [0 x ptr], align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 0, ptr %81)
  %83 = call ptr @llvm.invariant.start.p0(i64 616, ptr %73)
  %84 = getelementptr ptr, ptr %73, i32 %79
  %85 = getelementptr ptr, ptr %84, i32 8
  %86 = load ptr, ptr %85, align 8
  %87 = alloca {}, align 8
  %88 = call ptr @behavior_wrapper(ptr %86, { ptr, ptr, ptr, i32 } %80, ptr %87)
  %89 = call { ptr } %88({ ptr, ptr, ptr, i32 } %80, { ptr, ptr, ptr, i32 } %80, ptr %81) #17
  %90 = alloca ptr, align 8
  store { ptr } %89, ptr %90, align 8
  %91 = alloca ptr, align 8
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = load ptr, ptr %62, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = load ptr, ptr %65, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 1
  %97 = load ptr, ptr %68, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 2
  %99 = load i32, ptr %71, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %99, 3
  %101 = alloca [0 x ptr], align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 0, ptr %101)
  %103 = call ptr @llvm.invariant.start.p0(i64 616, ptr %93)
  %104 = getelementptr ptr, ptr %93, i32 %99
  %105 = getelementptr ptr, ptr %104, i32 6
  %106 = load ptr, ptr %105, align 8
  %107 = alloca {}, align 8
  %108 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %100, ptr %107)
  %109 = call i32 %108({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr %101) #17
  %110 = alloca i32, align 4
  store i32 %109, ptr %110, align 4
  %.reload59 = load ptr, ptr %.reg2mem42, align 8
  %111 = load ptr, ptr %.reload59, align 8
  %112 = load ptr, ptr %46, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 616, ptr %112)
  %.reload37 = load ptr, ptr %.reg2mem20, align 8
  %114 = load i32, ptr %.reload37, align 4
  %115 = getelementptr ptr, ptr %112, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 1
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr { ptr, ptr }, ptr %117, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = call i32 %119(ptr %111) #16
  %121 = alloca i32, align 4
  store i32 %120, ptr %121, align 4
  %122 = load i32, ptr %121, align 4
  %123 = load i32, ptr %110, align 4
  %124 = add i32 %122, %123
  %125 = alloca i32, align 4
  store i32 %124, ptr %125, align 4
  %.reload58 = load ptr, ptr %.reg2mem42, align 8
  %126 = load ptr, ptr %.reload58, align 8
  %127 = load ptr, ptr %46, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 616, ptr %127)
  %.reload36 = load ptr, ptr %.reg2mem20, align 8
  %129 = load i32, ptr %.reload36, align 4
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr, ptr }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = call i32 %134(ptr %126) #16
  %136 = alloca i32, align 4
  store i32 %135, ptr %136, align 4
  %137 = load i32, ptr %125, align 4
  %138 = load i32, ptr %136, align 4
  %139 = icmp slt i32 %137, %138
  %140 = alloca i1, align 1
  store i1 %139, ptr %140, align 1
  %141 = load i1, ptr %140, align 1
  %142 = select i1 %141, ptr %16, ptr %42
  store ptr %142, ptr %.reg2mem17, align 8
  %143 = select i1 %141, ptr %17, ptr %43
  store ptr %143, ptr %.reg2mem14, align 8
  %144 = select i1 %141, ptr %18, ptr %44
  store ptr %144, ptr %.reg2mem8, align 8
  br i1 %141, label %145, label %206

145:                                              ; preds = %4
  %.reload57 = load ptr, ptr %.reg2mem42, align 8
  %146 = load ptr, ptr %.reload57, align 8
  %147 = load ptr, ptr %46, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 616, ptr %147)
  %.reload35 = load ptr, ptr %.reg2mem20, align 8
  %149 = load i32, ptr %.reload35, align 4
  %150 = getelementptr ptr, ptr %147, i32 %149
  %151 = getelementptr ptr, ptr %150, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = getelementptr { ptr, ptr }, ptr %152, i32 0, i32 0
  %154 = load ptr, ptr %153, align 8
  %155 = call i32 %154(ptr %146) #16
  store i32 %155, ptr %5, align 4
  store i32 0, ptr %6, align 4
  br label %156

156:                                              ; preds = %._crit_edge1, %145
  %.reload56 = load ptr, ptr %.reg2mem42, align 8
  %157 = load ptr, ptr %.reload56, align 8
  %158 = load ptr, ptr %46, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 616, ptr %158)
  %.reload34 = load ptr, ptr %.reg2mem20, align 8
  %160 = load i32, ptr %.reload34, align 4
  %161 = getelementptr ptr, ptr %158, i32 %160
  %162 = getelementptr ptr, ptr %161, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = getelementptr { ptr, ptr }, ptr %163, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = call i32 %165(ptr %157) #16
  store i32 %166, ptr %7, align 4
  %167 = load i32, ptr %7, align 4
  %168 = load i32, ptr %110, align 4
  %169 = add i32 %167, %168
  store i32 %169, ptr %8, align 4
  %170 = load i32, ptr %5, align 4
  %171 = load i32, ptr %8, align 4
  %172 = icmp slt i32 %170, %171
  store i1 %172, ptr %9, align 1
  %173 = load i1, ptr %9, align 1
  store i1 %173, ptr %.reg2mem5, align 1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload7, label %174, label %._crit_edge

._crit_edge:                                      ; preds = %156
  br label %204

174:                                              ; preds = %156
  %175 = load ptr, ptr %91, align 8
  %176 = load i32, ptr %6, align 4
  %177 = sext i32 %176 to i64
  %178 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %177
  %179 = getelementptr i8, ptr %175, i64 %178
  %180 = load i8, ptr %179, align 1
  store i8 %180, ptr %10, align 1
  %.reload55 = load ptr, ptr %.reg2mem42, align 8
  %181 = load ptr, ptr %.reload55, align 8
  %182 = load ptr, ptr %46, align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 616, ptr %182)
  %.reload33 = load ptr, ptr %.reg2mem20, align 8
  %184 = load i32, ptr %.reload33, align 4
  %185 = getelementptr ptr, ptr %182, i32 %184
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr, ptr }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = call { ptr } %188(ptr %181) #16
  store { ptr } %189, ptr %11, align 8
  %190 = load ptr, ptr %11, align 8
  %191 = load i32, ptr %5, align 4
  %192 = sext i32 %191 to i64
  %193 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %192
  %194 = getelementptr i8, ptr %190, i64 %193
  %195 = load i8, ptr %10, align 1
  store i8 %195, ptr %194, align 1
  store i32 1, ptr %12, align 4
  %196 = load i32, ptr %5, align 4
  %197 = load i32, ptr %12, align 4
  %198 = add i32 %196, %197
  store i32 %198, ptr %13, align 4
  %199 = load i32, ptr %13, align 4
  store i32 %199, ptr %5, align 4
  store i32 1, ptr %14, align 4
  %200 = load i32, ptr %6, align 4
  %201 = load i32, ptr %14, align 4
  %202 = add i32 %200, %201
  store i32 %202, ptr %15, align 4
  %203 = load i32, ptr %15, align 4
  store i32 %203, ptr %6, align 4
  br label %204

204:                                              ; preds = %._crit_edge, %174
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload6, label %._crit_edge1, label %205

._crit_edge1:                                     ; preds = %204
  br label %156

205:                                              ; preds = %204
  br label %357

206:                                              ; preds = %4
  %.reload54 = load ptr, ptr %.reg2mem42, align 8
  %207 = load ptr, ptr %.reload54, align 8
  %208 = load ptr, ptr %46, align 8
  %209 = call ptr @llvm.invariant.start.p0(i64 616, ptr %208)
  %.reload32 = load ptr, ptr %.reg2mem20, align 8
  %210 = load i32, ptr %.reload32, align 4
  %211 = getelementptr ptr, ptr %208, i32 %210
  %212 = getelementptr ptr, ptr %211, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = getelementptr { ptr, ptr }, ptr %213, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  %216 = call i32 %215(ptr %207) #16
  store i32 %216, ptr %19, align 4
  %217 = load i32, ptr %19, align 4
  %218 = load i32, ptr %110, align 4
  %219 = add i32 %217, %218
  store i32 %219, ptr %20, align 4
  %.reload53 = load ptr, ptr %.reg2mem42, align 8
  %220 = load ptr, ptr %.reload53, align 8
  %221 = load ptr, ptr %46, align 8
  %222 = call ptr @llvm.invariant.start.p0(i64 616, ptr %221)
  %.reload31 = load ptr, ptr %.reg2mem20, align 8
  %223 = load i32, ptr %.reload31, align 4
  %224 = getelementptr ptr, ptr %221, i32 %223
  %225 = getelementptr ptr, ptr %224, i32 2
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr { ptr, ptr }, ptr %226, i32 0, i32 1
  %228 = load ptr, ptr %227, align 8
  %229 = load i32, ptr %20, align 4
  call void %228(ptr %220, i32 %229) #15
  %.reload52 = load ptr, ptr %.reg2mem42, align 8
  %230 = load ptr, ptr %.reload52, align 8
  %231 = load ptr, ptr %46, align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 616, ptr %231)
  %.reload30 = load ptr, ptr %.reg2mem20, align 8
  %233 = load i32, ptr %.reload30, align 4
  %234 = getelementptr ptr, ptr %231, i32 %233
  %235 = load ptr, ptr %234, align 8
  %236 = getelementptr { ptr, ptr }, ptr %235, i32 0, i32 0
  %237 = load ptr, ptr %236, align 8
  %238 = call { ptr } %237(ptr %230) #16
  store { ptr } %238, ptr %21, align 8
  %239 = load ptr, ptr %21, align 8
  store ptr %239, ptr %22, align 8
  %.reload51 = load ptr, ptr %.reg2mem42, align 8
  %240 = load ptr, ptr %.reload51, align 8
  %241 = load ptr, ptr %46, align 8
  %242 = call ptr @llvm.invariant.start.p0(i64 616, ptr %241)
  %.reload29 = load ptr, ptr %.reg2mem20, align 8
  %243 = load i32, ptr %.reload29, align 4
  %244 = getelementptr ptr, ptr %241, i32 %243
  %245 = getelementptr ptr, ptr %244, i32 2
  %246 = load ptr, ptr %245, align 8
  %247 = getelementptr { ptr, ptr }, ptr %246, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = call i32 %248(ptr %240) #16
  store i32 %249, ptr %23, align 4
  %250 = load i32, ptr %23, align 4
  %251 = sext i32 %250 to i64
  %252 = mul i64 %251, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %253 = call ptr @bump_malloc(i64 %252)
  store ptr %253, ptr %24, align 8
  %.reload50 = load ptr, ptr %.reg2mem42, align 8
  %254 = load ptr, ptr %.reload50, align 8
  %255 = load ptr, ptr %46, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 616, ptr %255)
  %.reload28 = load ptr, ptr %.reg2mem20, align 8
  %257 = load i32, ptr %.reload28, align 4
  %258 = getelementptr ptr, ptr %255, i32 %257
  %259 = load ptr, ptr %258, align 8
  %260 = getelementptr { ptr, ptr }, ptr %259, i32 0, i32 1
  %261 = load ptr, ptr %260, align 8
  %262 = getelementptr { ptr }, ptr %24, i32 0, i32 0
  %263 = load ptr, ptr %262, align 8
  %264 = insertvalue { ptr } undef, ptr %263, 0
  call void %261(ptr %254, { ptr } %264) #15
  store i32 0, ptr %25, align 4
  store i32 0, ptr %26, align 4
  br label %265

265:                                              ; preds = %._crit_edge3, %206
  %.reload49 = load ptr, ptr %.reg2mem42, align 8
  %266 = load ptr, ptr %.reload49, align 8
  %267 = load ptr, ptr %46, align 8
  %268 = call ptr @llvm.invariant.start.p0(i64 616, ptr %267)
  %.reload27 = load ptr, ptr %.reg2mem20, align 8
  %269 = load i32, ptr %.reload27, align 4
  %270 = getelementptr ptr, ptr %267, i32 %269
  %271 = getelementptr ptr, ptr %270, i32 1
  %272 = load ptr, ptr %271, align 8
  %273 = getelementptr { ptr, ptr }, ptr %272, i32 0, i32 0
  %274 = load ptr, ptr %273, align 8
  %275 = call i32 %274(ptr %266) #16
  store i32 %275, ptr %27, align 4
  %276 = load i32, ptr %27, align 4
  %277 = load i32, ptr %110, align 4
  %278 = add i32 %276, %277
  store i32 %278, ptr %28, align 4
  %279 = load i32, ptr %25, align 4
  %280 = load i32, ptr %28, align 4
  %281 = icmp slt i32 %279, %280
  store i1 %281, ptr %29, align 1
  %282 = load i1, ptr %29, align 1
  store i1 %282, ptr %.reg2mem, align 1
  %.reload4 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload4, label %283, label %._crit_edge2

._crit_edge2:                                     ; preds = %265
  br label %355

283:                                              ; preds = %265
  %.reload48 = load ptr, ptr %.reg2mem42, align 8
  %284 = load ptr, ptr %.reload48, align 8
  %285 = load ptr, ptr %46, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 616, ptr %285)
  %.reload26 = load ptr, ptr %.reg2mem20, align 8
  %287 = load i32, ptr %.reload26, align 4
  %288 = getelementptr ptr, ptr %285, i32 %287
  %289 = getelementptr ptr, ptr %288, i32 1
  %290 = load ptr, ptr %289, align 8
  %291 = getelementptr { ptr, ptr }, ptr %290, i32 0, i32 0
  %292 = load ptr, ptr %291, align 8
  %293 = call i32 %292(ptr %284) #16
  store i32 %293, ptr %30, align 4
  %294 = load i32, ptr %25, align 4
  %295 = load i32, ptr %30, align 4
  %296 = icmp slt i32 %294, %295
  store i1 %296, ptr %31, align 1
  %297 = load i1, ptr %31, align 1
  br i1 %297, label %298, label %324

298:                                              ; preds = %283
  %299 = load ptr, ptr %22, align 8
  %300 = load i32, ptr %25, align 4
  %301 = sext i32 %300 to i64
  %302 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %301
  %303 = getelementptr i8, ptr %299, i64 %302
  %304 = load i8, ptr %303, align 1
  store i8 %304, ptr %32, align 1
  %.reload47 = load ptr, ptr %.reg2mem42, align 8
  %305 = load ptr, ptr %.reload47, align 8
  %306 = load ptr, ptr %46, align 8
  %307 = call ptr @llvm.invariant.start.p0(i64 616, ptr %306)
  %.reload25 = load ptr, ptr %.reg2mem20, align 8
  %308 = load i32, ptr %.reload25, align 4
  %309 = getelementptr ptr, ptr %306, i32 %308
  %310 = load ptr, ptr %309, align 8
  %311 = getelementptr { ptr, ptr }, ptr %310, i32 0, i32 0
  %312 = load ptr, ptr %311, align 8
  %313 = call { ptr } %312(ptr %305) #16
  store { ptr } %313, ptr %33, align 8
  %314 = load ptr, ptr %33, align 8
  %315 = load i32, ptr %25, align 4
  %316 = sext i32 %315 to i64
  %317 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %316
  %318 = getelementptr i8, ptr %314, i64 %317
  %319 = load i8, ptr %32, align 1
  store i8 %319, ptr %318, align 1
  store i32 1, ptr %34, align 4
  %320 = load i32, ptr %25, align 4
  %321 = load i32, ptr %34, align 4
  %322 = add i32 %320, %321
  store i32 %322, ptr %35, align 4
  %323 = load i32, ptr %35, align 4
  store i32 %323, ptr %25, align 4
  br label %354

324:                                              ; preds = %283
  %325 = load ptr, ptr %91, align 8
  %326 = load i32, ptr %26, align 4
  %327 = sext i32 %326 to i64
  %328 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %327
  %329 = getelementptr i8, ptr %325, i64 %328
  %330 = load i8, ptr %329, align 1
  store i8 %330, ptr %36, align 1
  %.reload46 = load ptr, ptr %.reg2mem42, align 8
  %331 = load ptr, ptr %.reload46, align 8
  %332 = load ptr, ptr %46, align 8
  %333 = call ptr @llvm.invariant.start.p0(i64 616, ptr %332)
  %.reload24 = load ptr, ptr %.reg2mem20, align 8
  %334 = load i32, ptr %.reload24, align 4
  %335 = getelementptr ptr, ptr %332, i32 %334
  %336 = load ptr, ptr %335, align 8
  %337 = getelementptr { ptr, ptr }, ptr %336, i32 0, i32 0
  %338 = load ptr, ptr %337, align 8
  %339 = call { ptr } %338(ptr %331) #16
  store { ptr } %339, ptr %37, align 8
  %340 = load ptr, ptr %37, align 8
  %341 = load i32, ptr %25, align 4
  %342 = sext i32 %341 to i64
  %343 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %342
  %344 = getelementptr i8, ptr %340, i64 %343
  %345 = load i8, ptr %36, align 1
  store i8 %345, ptr %344, align 1
  store i32 1, ptr %38, align 4
  %346 = load i32, ptr %25, align 4
  %347 = load i32, ptr %38, align 4
  %348 = add i32 %346, %347
  store i32 %348, ptr %39, align 4
  %349 = load i32, ptr %39, align 4
  store i32 %349, ptr %25, align 4
  store i32 1, ptr %40, align 4
  %350 = load i32, ptr %26, align 4
  %351 = load i32, ptr %40, align 4
  %352 = add i32 %350, %351
  store i32 %352, ptr %41, align 4
  %353 = load i32, ptr %41, align 4
  store i32 %353, ptr %26, align 4
  br label %354

354:                                              ; preds = %324, %298
  br label %355

355:                                              ; preds = %._crit_edge2, %354
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge3, label %356

._crit_edge3:                                     ; preds = %355
  br label %265

356:                                              ; preds = %355
  br label %357

357:                                              ; preds = %356, %205
  %.reload45 = load ptr, ptr %.reg2mem42, align 8
  %358 = load ptr, ptr %.reload45, align 8
  %359 = load ptr, ptr %46, align 8
  %360 = call ptr @llvm.invariant.start.p0(i64 616, ptr %359)
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  %361 = load i32, ptr %.reload23, align 4
  %362 = getelementptr ptr, ptr %359, i32 %361
  %363 = getelementptr ptr, ptr %362, i32 1
  %364 = load ptr, ptr %363, align 8
  %365 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 0
  %366 = load ptr, ptr %365, align 8
  %367 = call i32 %366(ptr %358) #16
  %.reload19 = load ptr, ptr %.reg2mem17, align 8
  store i32 %367, ptr %.reload19, align 4
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %368 = load i32, ptr %.reload18, align 4
  %369 = load i32, ptr %110, align 4
  %370 = add i32 %368, %369
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  store i32 %370, ptr %.reload16, align 4
  %.reload44 = load ptr, ptr %.reg2mem42, align 8
  %371 = load ptr, ptr %.reload44, align 8
  %372 = load ptr, ptr %46, align 8
  %373 = call ptr @llvm.invariant.start.p0(i64 616, ptr %372)
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %374 = load i32, ptr %.reload22, align 4
  %375 = getelementptr ptr, ptr %372, i32 %374
  %376 = getelementptr ptr, ptr %375, i32 1
  %377 = load ptr, ptr %376, align 8
  %378 = getelementptr { ptr, ptr }, ptr %377, i32 0, i32 1
  %379 = load ptr, ptr %378, align 8
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %380 = load i32, ptr %.reload15, align 4
  call void %379(ptr %371, i32 %380) #15
  %.reload13 = load ptr, ptr %.reg2mem8, align 8
  %381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload13, i32 0, i32 0
  %.reload62 = load ptr, ptr %.reg2mem61, align 8
  %382 = load ptr, ptr %.reload62, align 8
  store ptr %382, ptr %381, align 8
  %.reload12 = load ptr, ptr %.reg2mem8, align 8
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload12, i32 0, i32 1
  %.reload43 = load ptr, ptr %.reg2mem42, align 8
  %384 = load ptr, ptr %.reload43, align 8
  store ptr %384, ptr %383, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload11, i32 0, i32 2
  %.reload40 = load ptr, ptr %.reg2mem39, align 8
  %386 = load ptr, ptr %.reload40, align 8
  store ptr %386, ptr %385, align 8
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload10, i32 0, i32 3
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %388 = load i32, ptr %.reload21, align 4
  store i32 %388, ptr %387, align 4
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  call void @set_offset(ptr %.reload9, ptr @String)
  %389 = load ptr, ptr %381, align 8
  %390 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %389, 0
  %391 = load ptr, ptr %383, align 8
  %392 = insertvalue { ptr, ptr, ptr, i32 } %390, ptr %391, 1
  %393 = load ptr, ptr %385, align 8
  %394 = insertvalue { ptr, ptr, ptr, i32 } %392, ptr %393, 2
  %395 = load i32, ptr %387, align 4
  %396 = insertvalue { ptr, ptr, ptr, i32 } %394, i32 %395, 3
  ret { ptr, ptr, ptr, i32 } %396
}

define i8 @String__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca i32, align 4
  %6 = alloca i1, align 1
  %7 = alloca ptr, align 8
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i1, align 1
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8, align 1
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i8, align 1
  %.reg2mem2 = alloca i8, align 1
  %.reg2mem4 = alloca i8, align 1
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem20 = alloca i8, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %17, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  store ptr %23, ptr %.reg2mem13, align 8
  %24 = load ptr, ptr %22, align 8
  %.reload19 = load ptr, ptr %.reg2mem13, align 8
  store ptr %24, ptr %.reload19, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  store ptr %29, ptr %.reg2mem6, align 8
  %30 = load i32, ptr %28, align 4
  %.reload12 = load ptr, ptr %.reg2mem6, align 8
  store i32 %30, ptr %.reload12, align 4
  call void @set_offset(ptr %18, ptr @String)
  %31 = alloca i32, align 4
  store i32 %3, ptr %31, align 4
  %.reload18 = load ptr, ptr %.reg2mem13, align 8
  %32 = load ptr, ptr %.reload18, align 8
  %33 = load ptr, ptr %18, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 616, ptr %33)
  %.reload11 = load ptr, ptr %.reg2mem6, align 8
  %35 = load i32, ptr %.reload11, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call i32 %40(ptr %32) #16
  %42 = alloca i32, align 4
  store i32 %41, ptr %42, align 4
  %43 = alloca i32, align 4
  store i32 1, ptr %43, align 4
  %44 = load i32, ptr %42, align 4
  %45 = load i32, ptr %43, align 4
  %46 = sub i32 %44, %45
  %47 = alloca i32, align 4
  store i32 %46, ptr %47, align 4
  %48 = load i32, ptr %31, align 4
  %49 = load i32, ptr %47, align 4
  %50 = icmp sgt i32 %48, %49
  %51 = alloca i1, align 1
  store i1 %50, ptr %51, align 1
  %52 = load i1, ptr %51, align 1
  br i1 %52, label %53, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %55

53:                                               ; preds = %4
  %54 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %54)
  br label %55

55:                                               ; preds = %._crit_edge, %53
  store i32 0, ptr %5, align 4
  %56 = load i32, ptr %31, align 4
  %57 = load i32, ptr %5, align 4
  %58 = icmp sge i32 %56, %57
  store i1 %58, ptr %6, align 1
  %59 = load i1, ptr %6, align 1
  br i1 %59, label %60, label %77

60:                                               ; preds = %55
  %.reload17 = load ptr, ptr %.reg2mem13, align 8
  %61 = load ptr, ptr %.reload17, align 8
  %62 = load ptr, ptr %18, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 616, ptr %62)
  %.reload10 = load ptr, ptr %.reg2mem6, align 8
  %64 = load i32, ptr %.reload10, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = call { ptr } %68(ptr %61) #16
  store { ptr } %69, ptr %7, align 8
  %70 = load ptr, ptr %7, align 8
  %71 = load i32, ptr %31, align 4
  %72 = sext i32 %71 to i64
  %73 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %72
  %74 = getelementptr i8, ptr %70, i64 %73
  %75 = load i8, ptr %74, align 1
  store i8 %75, ptr %8, align 1
  %76 = load i8, ptr %8, align 1
  store i8 %76, ptr %.reg2mem4, align 1
  %.reload5 = load i8, ptr %.reg2mem4, align 1
  store i8 %.reload5, ptr %.reg2mem20, align 1
  br label %127

77:                                               ; preds = %55
  %.reload16 = load ptr, ptr %.reg2mem13, align 8
  %78 = load ptr, ptr %.reload16, align 8
  %79 = load ptr, ptr %18, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 616, ptr %79)
  %.reload9 = load ptr, ptr %.reg2mem6, align 8
  %81 = load i32, ptr %.reload9, align 4
  %82 = getelementptr ptr, ptr %79, i32 %81
  %83 = getelementptr ptr, ptr %82, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %87 = call i32 %86(ptr %78) #16
  store i32 %87, ptr %9, align 4
  %88 = load i32, ptr %9, align 4
  %89 = load i32, ptr %31, align 4
  %90 = add i32 %88, %89
  store i32 %90, ptr %10, align 4
  store i32 0, ptr %11, align 4
  %91 = load i32, ptr %10, align 4
  %92 = load i32, ptr %11, align 4
  %93 = icmp slt i32 %91, %92
  store i1 %93, ptr %12, align 1
  %94 = load i1, ptr %12, align 1
  br i1 %94, label %95, label %._crit_edge1

._crit_edge1:                                     ; preds = %77
  br label %97

95:                                               ; preds = %77
  %96 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %96)
  br label %97

97:                                               ; preds = %._crit_edge1, %95
  %.reload15 = load ptr, ptr %.reg2mem13, align 8
  %98 = load ptr, ptr %.reload15, align 8
  %99 = load ptr, ptr %18, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 616, ptr %99)
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %101 = load i32, ptr %.reload8, align 4
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = load ptr, ptr %102, align 8
  %104 = getelementptr { ptr, ptr }, ptr %103, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = call { ptr } %105(ptr %98) #16
  store { ptr } %106, ptr %13, align 8
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %107 = load ptr, ptr %.reload14, align 8
  %108 = load ptr, ptr %18, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 616, ptr %108)
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %110 = load i32, ptr %.reload7, align 4
  %111 = getelementptr ptr, ptr %108, i32 %110
  %112 = getelementptr ptr, ptr %111, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = getelementptr { ptr, ptr }, ptr %113, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = call i32 %115(ptr %107) #16
  store i32 %116, ptr %14, align 4
  %117 = load i32, ptr %14, align 4
  %118 = load i32, ptr %31, align 4
  %119 = add i32 %117, %118
  store i32 %119, ptr %15, align 4
  %120 = load ptr, ptr %13, align 8
  %121 = load i32, ptr %15, align 4
  %122 = sext i32 %121 to i64
  %123 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %122
  %124 = getelementptr i8, ptr %120, i64 %123
  %125 = load i8, ptr %124, align 1
  store i8 %125, ptr %16, align 1
  %126 = load i8, ptr %16, align 1
  store i8 %126, ptr %.reg2mem2, align 1
  %.reload3 = load i8, ptr %.reg2mem2, align 1
  store i8 %.reload3, ptr %.reg2mem20, align 1
  br label %127

127:                                              ; preds = %97, %60
  %.reload21 = load i8, ptr %.reg2mem20, align 1
  store i8 %.reload21, ptr %.reg2mem, align 1
  br label %128

128:                                              ; preds = %127
  %.reload = load i8, ptr %.reg2mem, align 1
  ret i8 %.reload
}

define i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i1, align 1
  %9 = alloca ptr, align 8
  %10 = alloca i8, align 1
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i8, align 1
  %15 = alloca i1, align 1
  %16 = alloca i1, align 1
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i1, align 1
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem26 = alloca ptr, align 8
  %.reg2mem30 = alloca ptr, align 8
  %.reg2mem35 = alloca ptr, align 8
  %.reg2mem40 = alloca ptr, align 8
  %.reg2mem42 = alloca i1, align 1
  %.reg2mem44 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  store ptr %26, ptr %.reg2mem35, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload39 = load ptr, ptr %.reg2mem35, align 8
  store ptr %27, ptr %.reload39, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr %32, ptr %.reg2mem30, align 8
  %33 = load i32, ptr %31, align 4
  %.reload34 = load ptr, ptr %.reg2mem30, align 8
  store i32 %33, ptr %.reload34, align 4
  call void @set_offset(ptr %21, ptr @String)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %34, align 8
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  store ptr %37, ptr %.reg2mem26, align 8
  %38 = load ptr, ptr %36, align 8
  %.reload29 = load ptr, ptr %.reg2mem26, align 8
  store ptr %38, ptr %.reload29, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  store ptr %40, ptr %.reg2mem22, align 8
  %41 = load ptr, ptr %39, align 8
  %.reload25 = load ptr, ptr %.reg2mem22, align 8
  store ptr %41, ptr %.reload25, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  store ptr %43, ptr %.reg2mem18, align 8
  %44 = load ptr, ptr %42, align 8
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  store ptr %44, ptr %.reload21, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr %46, ptr %.reg2mem14, align 8
  %47 = load i32, ptr %45, align 4
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  store i32 %47, ptr %.reload17, align 4
  call void @set_offset(ptr %35, ptr @String)
  %.reload38 = load ptr, ptr %.reg2mem35, align 8
  %48 = load ptr, ptr %.reload38, align 8
  %49 = load ptr, ptr %21, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 616, ptr %49)
  %.reload33 = load ptr, ptr %.reg2mem30, align 8
  %51 = load i32, ptr %.reload33, align 4
  %52 = getelementptr ptr, ptr %49, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = call i32 %56(ptr %48) #16
  %58 = alloca i32, align 4
  store i32 %57, ptr %58, align 4
  %.reload28 = load ptr, ptr %.reg2mem26, align 8
  %59 = load ptr, ptr %.reload28, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %.reload24 = load ptr, ptr %.reg2mem22, align 8
  %61 = load ptr, ptr %.reload24, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 1
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %63 = load ptr, ptr %.reload20, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %63, 2
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %65 = load i32, ptr %.reload16, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %65, 3
  %67 = alloca [0 x ptr], align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 0, ptr %67)
  %69 = call ptr @llvm.invariant.start.p0(i64 616, ptr %59)
  %70 = getelementptr ptr, ptr %59, i32 %65
  %71 = getelementptr ptr, ptr %70, i32 6
  %72 = load ptr, ptr %71, align 8
  %73 = alloca {}, align 8
  %74 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %66, ptr %73)
  %75 = call i32 %74({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67) #17
  %76 = alloca i32, align 4
  store i32 %75, ptr %76, align 4
  %77 = load i32, ptr %58, align 4
  %78 = load i32, ptr %76, align 4
  %79 = icmp ne i32 %77, %78
  %80 = alloca i1, align 1
  store i1 %79, ptr %80, align 1
  %81 = load i1, ptr %80, align 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %4
  store ptr %5, ptr %.reg2mem40, align 8
  store i1 false, ptr %.reg2mem42, align 1
  br label %157

83:                                               ; preds = %4
  store i32 0, ptr %6, align 4
  br label %84

84:                                               ; preds = %155, %83
  %.reload37 = load ptr, ptr %.reg2mem35, align 8
  %85 = load ptr, ptr %.reload37, align 8
  %86 = load ptr, ptr %21, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 616, ptr %86)
  %.reload32 = load ptr, ptr %.reg2mem30, align 8
  %88 = load i32, ptr %.reload32, align 4
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = getelementptr ptr, ptr %89, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr { ptr, ptr }, ptr %91, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = call i32 %93(ptr %85) #16
  store i32 %94, ptr %7, align 4
  %95 = load i32, ptr %6, align 4
  %96 = load i32, ptr %7, align 4
  %97 = icmp slt i32 %95, %96
  store i1 %97, ptr %8, align 1
  %98 = load i1, ptr %8, align 1
  %99 = xor i1 %98, true
  store i1 %99, ptr %.reg2mem11, align 1
  %100 = select i1 %98, ptr %16, ptr %19
  store ptr %100, ptr %.reg2mem8, align 8
  br i1 %98, label %101, label %151

101:                                              ; preds = %84
  %.reload36 = load ptr, ptr %.reg2mem35, align 8
  %102 = load ptr, ptr %.reload36, align 8
  %103 = load ptr, ptr %21, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 616, ptr %103)
  %.reload31 = load ptr, ptr %.reg2mem30, align 8
  %105 = load i32, ptr %.reload31, align 4
  %106 = getelementptr ptr, ptr %103, i32 %105
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = call { ptr } %109(ptr %102) #16
  store { ptr } %110, ptr %9, align 8
  %111 = load ptr, ptr %9, align 8
  %112 = load i32, ptr %6, align 4
  %113 = sext i32 %112 to i64
  %114 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %113
  %115 = getelementptr i8, ptr %111, i64 %114
  %116 = load i8, ptr %115, align 1
  store i8 %116, ptr %10, align 1
  %.reload27 = load ptr, ptr %.reg2mem26, align 8
  %117 = load ptr, ptr %.reload27, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %119 = load ptr, ptr %.reload23, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %121 = load ptr, ptr %.reload19, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 2
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %123 = load i32, ptr %.reload15, align 4
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %123, 3
  %125 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %126 = call ptr @llvm.invariant.start.p0(i64 616, ptr %117)
  %127 = getelementptr ptr, ptr %117, i32 %123
  %128 = getelementptr ptr, ptr %127, i32 8
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr @behavior_wrapper(ptr %129, { ptr, ptr, ptr, i32 } %124, ptr %12)
  %131 = call { ptr } %130({ ptr, ptr, ptr, i32 } %124, { ptr, ptr, ptr, i32 } %124, ptr %11) #17
  store { ptr } %131, ptr %13, align 8
  %132 = load ptr, ptr %13, align 8
  %133 = load i32, ptr %6, align 4
  %134 = sext i32 %133 to i64
  %135 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %134
  %136 = getelementptr i8, ptr %132, i64 %135
  %137 = load i8, ptr %136, align 1
  store i8 %137, ptr %14, align 1
  %138 = load i8, ptr %10, align 1
  %139 = load i8, ptr %14, align 1
  %140 = icmp ne i8 %138, %139
  store i1 %140, ptr %15, align 1
  %141 = load i1, ptr %15, align 1
  %142 = xor i1 %141, true
  %143 = zext i1 %142 to i32
  store i32 %143, ptr %.reg2mem6, align 4
  br i1 %141, label %144, label %145

144:                                              ; preds = %101
  br label %150

145:                                              ; preds = %101
  store i32 1, ptr %17, align 4
  %146 = load i32, ptr %6, align 4
  %147 = load i32, ptr %17, align 4
  %148 = add i32 %146, %147
  store i32 %148, ptr %18, align 4
  %149 = load i32, ptr %18, align 4
  store i32 %149, ptr %6, align 4
  br label %150

150:                                              ; preds = %145, %144
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload7, ptr %.reg2mem44, align 4
  br label %152

151:                                              ; preds = %84
  store i32 0, ptr %.reg2mem44, align 4
  br label %152

152:                                              ; preds = %151, %150
  %.reload45 = load i32, ptr %.reg2mem44, align 4
  store i32 %.reload45, ptr %.reg2mem4, align 4
  br label %153

153:                                              ; preds = %152
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  %154 = trunc i32 %.reload5 to i1
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  br i1 %154, label %155, label %156

155:                                              ; preds = %153
  br label %84

156:                                              ; preds = %153
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  store ptr %.reload9, ptr %.reg2mem40, align 8
  store i1 %.reload12, ptr %.reg2mem42, align 1
  br label %157

157:                                              ; preds = %156, %82
  %.reload43 = load i1, ptr %.reg2mem42, align 1
  %.reload41 = load ptr, ptr %.reg2mem40, align 8
  store i1 %.reload43, ptr %.reg2mem2, align 1
  store ptr %.reload41, ptr %.reg2mem, align 8
  br label %158

158:                                              ; preds = %157
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %.reload3 = load i1, ptr %.reg2mem2, align 1
  store i1 %.reload3, ptr %.reload1, align 1
  %.reload = load ptr, ptr %.reg2mem, align 8
  %159 = load i1, ptr %.reload, align 1
  ret i1 %159
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca [0 x i8], align 1
  %5 = alloca i8, align 1
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca ptr, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i8 }, align 8
  %.reg2mem1 = alloca { ptr, i8 }, align 8
  %.reg2mem3 = alloca { ptr, i8 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem19 = alloca { ptr, i8 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %15, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  store ptr %21, ptr %.reg2mem12, align 8
  %22 = load ptr, ptr %20, align 8
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  store ptr %22, ptr %.reload18, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr %27, ptr %.reg2mem5, align 8
  %28 = load i32, ptr %26, align 4
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  store i32 %28, ptr %.reload11, align 4
  call void @set_offset(ptr %16, ptr @String)
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %29 = load ptr, ptr %.reload17, align 8
  %30 = load ptr, ptr %16, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 616, ptr %30)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %32 = load i32, ptr %.reload10, align 4
  %33 = getelementptr ptr, ptr %30, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %29) #16
  %39 = alloca i32, align 4
  store i32 %38, ptr %39, align 4
  %40 = alloca i32, align 4
  store i32 0, ptr %40, align 4
  %41 = load i32, ptr %39, align 4
  %42 = load i32, ptr %40, align 4
  %43 = icmp eq i32 %41, %42
  %44 = alloca i1, align 1
  store i1 %43, ptr %44, align 1
  %45 = load i1, ptr %44, align 1
  br i1 %45, label %46, label %52

46:                                               ; preds = %3
  %47 = load [0 x i8], ptr %4, align 1
  store [0 x i8] %47, ptr %5, align 1
  store ptr @nil_typ, ptr %6, align 8
  %48 = load ptr, ptr %6, align 8
  %49 = insertvalue { ptr, i8 } undef, ptr %48, 0
  %50 = load i8, ptr %5, align 1
  %51 = insertvalue { ptr, i8 } %49, i8 %50, 1
  store { ptr, i8 } %51, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i8 }, ptr %.reg2mem3, align 8
  store { ptr, i8 } %.reload4, ptr %.reg2mem19, align 8
  br label %106

52:                                               ; preds = %3
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %53 = load ptr, ptr %.reload16, align 8
  %54 = load ptr, ptr %16, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 616, ptr %54)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %56 = load i32, ptr %.reload9, align 4
  %57 = getelementptr ptr, ptr %54, i32 %56
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr }, ptr %59, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = call i32 %61(ptr %53) #16
  store i32 %62, ptr %7, align 4
  store i32 1, ptr %8, align 4
  %63 = load i32, ptr %7, align 4
  %64 = load i32, ptr %8, align 4
  %65 = sub i32 %63, %64
  store i32 %65, ptr %9, align 4
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %66 = load ptr, ptr %.reload15, align 8
  %67 = load ptr, ptr %16, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 616, ptr %67)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %69 = load i32, ptr %.reload8, align 4
  %70 = getelementptr ptr, ptr %67, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load i32, ptr %9, align 4
  call void %74(ptr %66, i32 %75) #15
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %76 = load ptr, ptr %.reload14, align 8
  %77 = load ptr, ptr %16, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 616, ptr %77)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %79 = load i32, ptr %.reload7, align 4
  %80 = getelementptr ptr, ptr %77, i32 %79
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = call { ptr } %83(ptr %76) #16
  store { ptr } %84, ptr %10, align 8
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %85 = load ptr, ptr %.reload13, align 8
  %86 = load ptr, ptr %16, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 616, ptr %86)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %88 = load i32, ptr %.reload6, align 4
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = getelementptr ptr, ptr %89, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr { ptr, ptr }, ptr %91, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = call i32 %93(ptr %85) #16
  store i32 %94, ptr %11, align 4
  %95 = load ptr, ptr %10, align 8
  %96 = load i32, ptr %11, align 4
  %97 = sext i32 %96 to i64
  %98 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %97
  %99 = getelementptr i8, ptr %95, i64 %98
  %100 = load i8, ptr %99, align 1
  store i8 %100, ptr %12, align 1
  %101 = load i8, ptr %12, align 1
  store i8 %101, ptr %13, align 1
  store ptr @i8_typ, ptr %14, align 8
  %102 = load ptr, ptr %14, align 8
  %103 = insertvalue { ptr, i8 } undef, ptr %102, 0
  %104 = load i8, ptr %13, align 1
  %105 = insertvalue { ptr, i8 } %103, i8 %104, 1
  store { ptr, i8 } %105, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i8 }, ptr %.reg2mem1, align 8
  store { ptr, i8 } %.reload2, ptr %.reg2mem19, align 8
  br label %106

106:                                              ; preds = %52, %46
  %.reload20 = load { ptr, i8 }, ptr %.reg2mem19, align 8
  store { ptr, i8 } %.reload20, ptr %.reg2mem, align 8
  br label %107

107:                                              ; preds = %106
  %.reload = load { ptr, i8 }, ptr %.reg2mem, align 8
  ret { ptr, i8 } %.reload
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca ptr, align 8
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [1 x ptr], align 8
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca [3 x ptr], align 8
  %20 = alloca { ptr, ptr, ptr }, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = alloca i32, align 4
  %23 = alloca ptr, align 8
  %24 = alloca ptr, align 8
  %25 = alloca ptr, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %27, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  store ptr %33, ptr %.reg2mem12, align 8
  %34 = load ptr, ptr %32, align 8
  %.reload20 = load ptr, ptr %.reg2mem12, align 8
  store ptr %34, ptr %.reload20, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr %39, ptr %.reg2mem3, align 8
  %40 = load i32, ptr %38, align 4
  %.reload11 = load ptr, ptr %.reg2mem3, align 8
  store i32 %40, ptr %.reload11, align 4
  call void @set_offset(ptr %28, ptr @String)
  %.reload19 = load ptr, ptr %.reg2mem12, align 8
  %41 = load ptr, ptr %.reload19, align 8
  %42 = load ptr, ptr %28, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 616, ptr %42)
  %.reload10 = load ptr, ptr %.reg2mem3, align 8
  %44 = load i32, ptr %.reload10, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = call i32 %49(ptr %41) #16
  %51 = alloca i32, align 4
  store i32 %50, ptr %51, align 4
  %52 = load i32, ptr %51, align 4
  %53 = sext i32 %52 to i64
  %54 = alloca ptr, align 8
  %55 = mul i64 %53, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %56 = call ptr @bump_malloc(i64 %55)
  store ptr %56, ptr %54, align 8
  %57 = alloca ptr, align 8
  %58 = getelementptr { ptr }, ptr %54, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  store ptr %59, ptr %57, align 8
  %60 = alloca i32, align 4
  store i32 0, ptr %60, align 4
  br label %61

61:                                               ; preds = %._crit_edge1, %3
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  %62 = load ptr, ptr %.reload18, align 8
  %63 = load ptr, ptr %28, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 616, ptr %63)
  %.reload9 = load ptr, ptr %.reg2mem3, align 8
  %65 = load i32, ptr %.reload9, align 4
  %66 = getelementptr ptr, ptr %63, i32 %65
  %67 = getelementptr ptr, ptr %66, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr { ptr, ptr }, ptr %68, i32 0, i32 0
  %70 = load ptr, ptr %69, align 8
  %71 = call i32 %70(ptr %62) #16
  store i32 %71, ptr %4, align 4
  %72 = load i32, ptr %60, align 4
  %73 = load i32, ptr %4, align 4
  %74 = icmp slt i32 %72, %73
  store i1 %74, ptr %5, align 1
  %75 = load i1, ptr %5, align 1
  store i1 %75, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %76, label %._crit_edge

._crit_edge:                                      ; preds = %61
  br label %102

76:                                               ; preds = %61
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %77 = load ptr, ptr %.reload17, align 8
  %78 = load ptr, ptr %28, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 616, ptr %78)
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %80 = load i32, ptr %.reload8, align 4
  %81 = getelementptr ptr, ptr %78, i32 %80
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr } %84(ptr %77) #16
  store { ptr } %85, ptr %6, align 8
  %86 = load ptr, ptr %6, align 8
  %87 = load i32, ptr %60, align 4
  %88 = sext i32 %87 to i64
  %89 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %88
  %90 = getelementptr i8, ptr %86, i64 %89
  %91 = load i8, ptr %90, align 1
  store i8 %91, ptr %7, align 1
  %92 = load ptr, ptr %57, align 8
  %93 = load i32, ptr %60, align 4
  %94 = sext i32 %93 to i64
  %95 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %94
  %96 = getelementptr i8, ptr %92, i64 %95
  %97 = load i8, ptr %7, align 1
  store i8 %97, ptr %96, align 1
  store i32 1, ptr %8, align 4
  %98 = load i32, ptr %60, align 4
  %99 = load i32, ptr %8, align 4
  %100 = add i32 %98, %99
  store i32 %100, ptr %9, align 4
  %101 = load i32, ptr %9, align 4
  store i32 %101, ptr %60, align 4
  br label %102

102:                                              ; preds = %._crit_edge, %76
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %103

._crit_edge1:                                     ; preds = %102
  br label %61

103:                                              ; preds = %102
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %104 = load ptr, ptr %.reload16, align 8
  %105 = load ptr, ptr %28, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 616, ptr %105)
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %107 = load i32, ptr %.reload7, align 4
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = call i32 %112(ptr %104) #16
  store i32 %113, ptr %10, align 4
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %114 = load ptr, ptr %.reload15, align 8
  %115 = load ptr, ptr %28, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 616, ptr %115)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %117 = load i32, ptr %.reload6, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call i32 %122(ptr %114) #16
  store i32 %123, ptr %11, align 4
  store ptr @String, ptr %12, align 8
  %124 = load ptr, ptr %12, align 8
  %125 = getelementptr ptr, ptr %124, i32 6
  %126 = load ptr, ptr %125, align 8
  %127 = call { i64, i64 } @size_wrapper(ptr %126, ptr %12)
  %128 = extractvalue { i64, i64 } %127, 0
  %129 = call ptr @bump_malloc(i64 %128)
  store ptr @String, ptr %16, align 8
  store ptr %129, ptr %15, align 8
  store i32 10, ptr %13, align 4
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %130 = load ptr, ptr %.reload14, align 8
  %131 = load ptr, ptr %28, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 616, ptr %131)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %133 = load i32, ptr %.reload5, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call i32 %138(ptr %130) #16
  store i32 %139, ptr %17, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %140 = load ptr, ptr %.reload13, align 8
  %141 = load ptr, ptr %28, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 616, ptr %141)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %143 = load i32, ptr %.reload4, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr }, ptr %146, i32 0, i32 0
  %148 = load ptr, ptr %147, align 8
  %149 = call i32 %148(ptr %140) #16
  store i32 %149, ptr %18, align 4
  %150 = load ptr, ptr %57, align 8
  %151 = insertvalue { ptr } undef, ptr %150, 0
  %152 = load i32, ptr %17, align 4
  %153 = load i32, ptr %18, align 4
  %154 = load ptr, ptr %16, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %154, 0
  %156 = load ptr, ptr %15, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %156, 1
  %158 = load ptr, ptr %14, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %158, 2
  %160 = load i32, ptr %13, align 4
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, i32 %160, 3
  %162 = getelementptr [3 x ptr], ptr %19, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %162, align 8
  %163 = getelementptr [3 x ptr], ptr %19, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %163, align 8
  %164 = getelementptr [3 x ptr], ptr %19, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %164, align 8
  %165 = call ptr @llvm.invariant.start.p0(i64 9, ptr %19)
  %166 = call ptr @llvm.invariant.start.p0(i64 616, ptr %154)
  %167 = getelementptr ptr, ptr %154, i32 %160
  %168 = getelementptr ptr, ptr %167, i32 5
  %169 = load ptr, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 0
  store ptr @buffer_typ, ptr %170, align 8
  %171 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 1
  store ptr @i32_typ, ptr %171, align 8
  %172 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  store ptr @i32_typ, ptr %172, align 8
  %173 = call ptr @behavior_wrapper(ptr %169, { ptr, ptr, ptr, i32 } %161, ptr %20)
  call void %173({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr %19, { ptr } %151, i32 %152, i32 %153) #17
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %175 = load ptr, ptr %16, align 8
  store ptr %175, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %177 = load ptr, ptr %15, align 8
  store ptr %177, ptr %176, align 8
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %179 = load ptr, ptr %14, align 8
  store ptr %179, ptr %178, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %181 = load i32, ptr %13, align 4
  store i32 %181, ptr %180, align 4
  call void @set_offset(ptr %21, ptr @String)
  %182 = load ptr, ptr %174, align 8
  store ptr %182, ptr %25, align 8
  %183 = load ptr, ptr %176, align 8
  store ptr %183, ptr %24, align 8
  %184 = load ptr, ptr %178, align 8
  store ptr %184, ptr %23, align 8
  %185 = load i32, ptr %180, align 4
  store i32 %185, ptr %22, align 4
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %187 = load ptr, ptr %25, align 8
  store ptr %187, ptr %186, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %189 = load ptr, ptr %24, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %191 = load ptr, ptr %23, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %193 = load i32, ptr %22, align 4
  store i32 %193, ptr %192, align 4
  call void @set_offset(ptr %26, ptr @String)
  %194 = load ptr, ptr %186, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %194, 0
  %196 = load ptr, ptr %188, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %196, 1
  %198 = load ptr, ptr %190, align 8
  %199 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %198, 2
  %200 = load i32, ptr %192, align 4
  %201 = insertvalue { ptr, ptr, ptr, i32 } %199, i32 %200, 3
  ret { ptr, ptr, ptr, i32 } %201
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca ptr, align 8
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8, align 1
  %11 = alloca i32, align 4
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  store ptr %18, ptr %.reg2mem9, align 8
  %19 = load ptr, ptr %17, align 8
  %.reload14 = load ptr, ptr %.reg2mem9, align 8
  store ptr %19, ptr %.reload14, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  store ptr %24, ptr %.reg2mem3, align 8
  %25 = load i32, ptr %23, align 4
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  store i32 %25, ptr %.reload8, align 4
  call void @set_offset(ptr %13, ptr @String)
  %.reload13 = load ptr, ptr %.reg2mem9, align 8
  %26 = load ptr, ptr %.reload13, align 8
  %27 = load ptr, ptr %13, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 616, ptr %27)
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %29 = load i32, ptr %.reload7, align 4
  %30 = getelementptr ptr, ptr %27, i32 %29
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr { ptr, ptr }, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call i32 %34(ptr %26) #16
  %36 = alloca i32, align 4
  store i32 %35, ptr %36, align 4
  %37 = alloca i32, align 4
  store i32 1, ptr %37, align 4
  %38 = load i32, ptr %36, align 4
  %39 = load i32, ptr %37, align 4
  %40 = add i32 %38, %39
  %41 = alloca i32, align 4
  store i32 %40, ptr %41, align 4
  %42 = load i32, ptr %41, align 4
  %43 = sext i32 %42 to i64
  %44 = alloca ptr, align 8
  %45 = mul i64 %43, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %46 = call ptr @bump_malloc(i64 %45)
  store ptr %46, ptr %44, align 8
  %47 = alloca ptr, align 8
  %48 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  store ptr %49, ptr %47, align 8
  %50 = alloca i32, align 4
  store i32 0, ptr %50, align 4
  br label %51

51:                                               ; preds = %._crit_edge1, %3
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %52 = load ptr, ptr %.reload12, align 8
  %53 = load ptr, ptr %13, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 616, ptr %53)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %55 = load i32, ptr %.reload6, align 4
  %56 = getelementptr ptr, ptr %53, i32 %55
  %57 = getelementptr ptr, ptr %56, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr }, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = call i32 %60(ptr %52) #16
  store i32 %61, ptr %4, align 4
  %62 = load i32, ptr %50, align 4
  %63 = load i32, ptr %4, align 4
  %64 = icmp slt i32 %62, %63
  store i1 %64, ptr %5, align 1
  %65 = load i1, ptr %5, align 1
  store i1 %65, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %66, label %._crit_edge

._crit_edge:                                      ; preds = %51
  br label %92

66:                                               ; preds = %51
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %67 = load ptr, ptr %.reload11, align 8
  %68 = load ptr, ptr %13, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 616, ptr %68)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %70 = load i32, ptr %.reload5, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr } %74(ptr %67) #16
  store { ptr } %75, ptr %6, align 8
  %76 = load ptr, ptr %6, align 8
  %77 = load i32, ptr %50, align 4
  %78 = sext i32 %77 to i64
  %79 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %78
  %80 = getelementptr i8, ptr %76, i64 %79
  %81 = load i8, ptr %80, align 1
  store i8 %81, ptr %7, align 1
  %82 = load ptr, ptr %47, align 8
  %83 = load i32, ptr %50, align 4
  %84 = sext i32 %83 to i64
  %85 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %84
  %86 = getelementptr i8, ptr %82, i64 %85
  %87 = load i8, ptr %7, align 1
  store i8 %87, ptr %86, align 1
  store i32 1, ptr %8, align 4
  %88 = load i32, ptr %50, align 4
  %89 = load i32, ptr %8, align 4
  %90 = add i32 %88, %89
  store i32 %90, ptr %9, align 4
  %91 = load i32, ptr %9, align 4
  store i32 %91, ptr %50, align 4
  br label %92

92:                                               ; preds = %._crit_edge, %66
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %93

._crit_edge1:                                     ; preds = %92
  br label %51

93:                                               ; preds = %92
  store i8 0, ptr %10, align 1
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %94 = load ptr, ptr %.reload10, align 8
  %95 = load ptr, ptr %13, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 616, ptr %95)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %97 = load i32, ptr %.reload4, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = call i32 %102(ptr %94) #16
  store i32 %103, ptr %11, align 4
  %104 = load ptr, ptr %47, align 8
  %105 = load i32, ptr %11, align 4
  %106 = sext i32 %105 to i64
  %107 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %106
  %108 = getelementptr i8, ptr %104, i64 %107
  %109 = load i8, ptr %10, align 1
  store i8 %109, ptr %108, align 1
  %110 = load ptr, ptr %47, align 8
  %111 = insertvalue { ptr } undef, ptr %110, 0
  ret { ptr } %111
}

define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca [1 x ptr], align 8
  store ptr @StringIterator, ptr %18, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 6
  %21 = load ptr, ptr %20, align 8
  %22 = call { i64, i64 } @size_wrapper(ptr %21, ptr %18)
  %23 = extractvalue { i64, i64 } %22, 0
  %24 = call ptr @bump_malloc(i64 %23)
  %25 = alloca i32, align 4
  %26 = alloca ptr, align 8
  %27 = alloca ptr, align 8
  %28 = alloca ptr, align 8
  store ptr @StringIterator, ptr %28, align 8
  store ptr %24, ptr %27, align 8
  store i32 10, ptr %25, align 4
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %31 = load ptr, ptr %7, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %33 = load ptr, ptr %10, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %35 = load ptr, ptr %13, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %37 = load i32, ptr %16, align 4
  store i32 %37, ptr %36, align 4
  call void @set_offset(ptr %29, ptr @String)
  %38 = load ptr, ptr %30, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 1
  %42 = load ptr, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 2
  %44 = load i32, ptr %36, align 4
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %44, 3
  %46 = load ptr, ptr %28, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = load ptr, ptr %27, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 1
  %50 = load ptr, ptr %26, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 2
  %52 = load i32, ptr %25, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %52, 3
  %54 = alloca [1 x ptr], align 8
  %55 = getelementptr [1 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_String, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 1, ptr %54)
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr %46)
  %58 = getelementptr ptr, ptr %46, i32 %52
  %59 = getelementptr ptr, ptr %58, i32 3
  %60 = load ptr, ptr %59, align 8
  %61 = alloca { ptr }, align 8
  %62 = getelementptr { ptr }, ptr %61, i32 0, i32 0
  store ptr %38, ptr %62, align 8
  %63 = call ptr @behavior_wrapper(ptr %60, { ptr, ptr, ptr, i32 } %53, ptr %61)
  call void %63({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr, ptr, ptr, i32 } %45) #17
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %28, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %68 = load ptr, ptr %27, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %70 = load ptr, ptr %26, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %72 = load i32, ptr %25, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %64, ptr @Iterator)
  %73 = load ptr, ptr %65, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %67, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %69, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %71, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  ret { ptr, ptr, ptr, i32 } %80
}

define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %7, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %22 = load ptr, ptr %10, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %24 = load ptr, ptr %13, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %26 = load i32, ptr %16, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %18, ptr @String)
  %27 = load ptr, ptr %19, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %21, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %25, align 4
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  ret { ptr, ptr, ptr, i32 } %34
}

define { i64, i64 } @_data_size_StringIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @StringIterator_field_StringIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_Character
}

define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 5, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [10 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @StringIterator)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @String)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 80, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %34, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %36, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %38, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %40, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  call void %49(ptr %42, { ptr, ptr, ptr, i32 } %57) #15
  %58 = alloca i32, align 4
  store i32 0, ptr %58, align 4
  %59 = load ptr, ptr %11, align 8
  %60 = load ptr, ptr %6, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 80, ptr %60)
  %62 = load i32, ptr %17, align 4
  %63 = getelementptr ptr, ptr %60, i32 %62
  %64 = getelementptr ptr, ptr %63, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = load i32, ptr %58, align 4
  call void %67(ptr %59, i32 %68) #15
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [0 x ptr], align 8
  %9 = alloca {}, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca [0 x ptr], align 8
  %19 = alloca {}, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i8, align 1
  %25 = alloca [1 x ptr], align 8
  %26 = alloca { ptr }, align 8
  %27 = alloca [0 x i8], align 1
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem25 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %30, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  store ptr %36, ptr %.reg2mem15, align 8
  %37 = load ptr, ptr %35, align 8
  %.reload24 = load ptr, ptr %.reg2mem15, align 8
  store ptr %37, ptr %.reload24, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  store ptr %42, ptr %.reg2mem5, align 8
  %43 = load i32, ptr %41, align 4
  %.reload14 = load ptr, ptr %.reg2mem5, align 8
  store i32 %43, ptr %.reload14, align 4
  call void @set_offset(ptr %31, ptr @StringIterator)
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  %44 = load ptr, ptr %.reload23, align 8
  %45 = load ptr, ptr %31, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 80, ptr %45)
  %.reload13 = load ptr, ptr %.reg2mem5, align 8
  %47 = load i32, ptr %.reload13, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %44) #16
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %55 = load ptr, ptr %.reload22, align 8
  %56 = load ptr, ptr %31, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr %56)
  %.reload12 = load ptr, ptr %.reg2mem5, align 8
  %58 = load i32, ptr %.reload12, align 4
  %59 = getelementptr ptr, ptr %56, i32 %58
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call { ptr, ptr, ptr, i32 } %62(ptr %55) #16
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %63, ptr %64, align 8
  call void @assume_offset(ptr %64, ptr @String)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %69, 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 2
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %75, 3
  %77 = alloca [0 x ptr], align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 0, ptr %77)
  %79 = call ptr @llvm.invariant.start.p0(i64 616, ptr %66)
  %80 = getelementptr ptr, ptr %66, i32 %75
  %81 = getelementptr ptr, ptr %80, i32 6
  %82 = load ptr, ptr %81, align 8
  %83 = alloca {}, align 8
  %84 = call ptr @behavior_wrapper(ptr %82, { ptr, ptr, ptr, i32 } %76, ptr %83)
  %85 = call i32 %84({ ptr, ptr, ptr, i32 } %76, { ptr, ptr, ptr, i32 } %76, ptr %77) #17
  %86 = alloca i32, align 4
  store i32 %85, ptr %86, align 4
  %87 = load i32, ptr %54, align 4
  %88 = load i32, ptr %86, align 4
  %89 = icmp slt i32 %87, %88
  %90 = alloca i1, align 1
  store i1 %89, ptr %90, align 1
  %91 = load i1, ptr %90, align 1
  br i1 %91, label %92, label %243

92:                                               ; preds = %3
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %93 = load ptr, ptr %.reload21, align 8
  %94 = load ptr, ptr %31, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 80, ptr %94)
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  %96 = load i32, ptr %.reload11, align 4
  %97 = getelementptr ptr, ptr %94, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = call i32 %101(ptr %93) #16
  store i32 %102, ptr %4, align 4
  store i32 1, ptr %5, align 4
  %103 = load i32, ptr %4, align 4
  %104 = load i32, ptr %5, align 4
  %105 = add i32 %103, %104
  store i32 %105, ptr %6, align 4
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  %106 = load ptr, ptr %.reload20, align 8
  %107 = load ptr, ptr %31, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 80, ptr %107)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %109 = load i32, ptr %.reload10, align 4
  %110 = getelementptr ptr, ptr %107, i32 %109
  %111 = getelementptr ptr, ptr %110, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = load i32, ptr %6, align 4
  call void %114(ptr %106, i32 %115) #15
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %116 = load ptr, ptr %.reload19, align 8
  %117 = load ptr, ptr %31, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 80, ptr %117)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %119 = load i32, ptr %.reload9, align 4
  %120 = getelementptr ptr, ptr %117, i32 %119
  %121 = load ptr, ptr %120, align 8
  %122 = getelementptr { ptr, ptr }, ptr %121, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = call { ptr, ptr, ptr, i32 } %123(ptr %116) #16
  store { ptr, ptr, ptr, i32 } %124, ptr %7, align 8
  call void @assume_offset(ptr %7, ptr @String)
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %126, 0
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 2
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %135 = load i32, ptr %134, align 4
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %135, 3
  %137 = call ptr @llvm.invariant.start.p0(i64 0, ptr %8)
  %138 = call ptr @llvm.invariant.start.p0(i64 616, ptr %126)
  %139 = getelementptr ptr, ptr %126, i32 %135
  %140 = getelementptr ptr, ptr %139, i32 8
  %141 = load ptr, ptr %140, align 8
  %142 = call ptr @behavior_wrapper(ptr %141, { ptr, ptr, ptr, i32 } %136, ptr %9)
  %143 = call { ptr } %142({ ptr, ptr, ptr, i32 } %136, { ptr, ptr, ptr, i32 } %136, ptr %8) #17
  store { ptr } %143, ptr %10, align 8
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %144 = load ptr, ptr %.reload18, align 8
  %145 = load ptr, ptr %31, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 80, ptr %145)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %147 = load i32, ptr %.reload8, align 4
  %148 = getelementptr ptr, ptr %145, i32 %147
  %149 = getelementptr ptr, ptr %148, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = call i32 %152(ptr %144) #16
  store i32 %153, ptr %11, align 4
  store i32 1, ptr %12, align 4
  %154 = load i32, ptr %11, align 4
  %155 = load i32, ptr %12, align 4
  %156 = sub i32 %154, %155
  store i32 %156, ptr %13, align 4
  %157 = load ptr, ptr %10, align 8
  %158 = load i32, ptr %13, align 4
  %159 = sext i32 %158 to i64
  %160 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %159
  %161 = getelementptr i8, ptr %157, i64 %160
  %162 = load i8, ptr %161, align 1
  store i8 %162, ptr %14, align 1
  store ptr @Character, ptr %15, align 8
  %163 = load ptr, ptr %15, align 8
  %164 = getelementptr ptr, ptr %163, i32 6
  %165 = load ptr, ptr %164, align 8
  %166 = call { i64, i64 } @size_wrapper(ptr %165, ptr %15)
  %167 = extractvalue { i64, i64 } %166, 0
  %168 = call ptr @bump_malloc(i64 %167)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr @Character, ptr %16, align 8
  store ptr %168, ptr %169, align 8
  store i32 10, ptr %170, align 4
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %171 = load ptr, ptr %.reload17, align 8
  %172 = load ptr, ptr %31, align 8
  %173 = call ptr @llvm.invariant.start.p0(i64 80, ptr %172)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %174 = load i32, ptr %.reload7, align 4
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = load ptr, ptr %175, align 8
  %177 = getelementptr { ptr, ptr }, ptr %176, i32 0, i32 0
  %178 = load ptr, ptr %177, align 8
  %179 = call { ptr, ptr, ptr, i32 } %178(ptr %171) #16
  store { ptr, ptr, ptr, i32 } %179, ptr %17, align 8
  call void @assume_offset(ptr %17, ptr @String)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %184, 1
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 2
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %190 = load i32, ptr %189, align 4
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, i32 %190, 3
  %192 = call ptr @llvm.invariant.start.p0(i64 0, ptr %18)
  %193 = call ptr @llvm.invariant.start.p0(i64 616, ptr %181)
  %194 = getelementptr ptr, ptr %181, i32 %190
  %195 = getelementptr ptr, ptr %194, i32 8
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr @behavior_wrapper(ptr %196, { ptr, ptr, ptr, i32 } %191, ptr %19)
  %198 = call { ptr } %197({ ptr, ptr, ptr, i32 } %191, { ptr, ptr, ptr, i32 } %191, ptr %18) #17
  store { ptr } %198, ptr %20, align 8
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %199 = load ptr, ptr %.reload16, align 8
  %200 = load ptr, ptr %31, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 80, ptr %200)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %202 = load i32, ptr %.reload6, align 4
  %203 = getelementptr ptr, ptr %200, i32 %202
  %204 = getelementptr ptr, ptr %203, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = getelementptr { ptr, ptr }, ptr %205, i32 0, i32 0
  %207 = load ptr, ptr %206, align 8
  %208 = call i32 %207(ptr %199) #16
  store i32 %208, ptr %21, align 4
  store i32 1, ptr %22, align 4
  %209 = load i32, ptr %21, align 4
  %210 = load i32, ptr %22, align 4
  %211 = sub i32 %209, %210
  store i32 %211, ptr %23, align 4
  %212 = load ptr, ptr %20, align 8
  %213 = load i32, ptr %23, align 4
  %214 = sext i32 %213 to i64
  %215 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %214
  %216 = getelementptr i8, ptr %212, i64 %215
  %217 = load i8, ptr %216, align 1
  store i8 %217, ptr %24, align 1
  %218 = load i8, ptr %24, align 1
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %220 = load ptr, ptr %219, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %220, 0
  %222 = load ptr, ptr %169, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } %221, ptr %222, 1
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %225 = load ptr, ptr %224, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %225, 2
  %227 = load i32, ptr %170, align 4
  %228 = insertvalue { ptr, ptr, ptr, i32 } %226, i32 %227, 3
  %229 = getelementptr [1 x ptr], ptr %25, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %229, align 8
  %230 = call ptr @llvm.invariant.start.p0(i64 1, ptr %25)
  %231 = call ptr @llvm.invariant.start.p0(i64 40, ptr %220)
  %232 = getelementptr ptr, ptr %220, i32 %227
  %233 = getelementptr ptr, ptr %232, i32 2
  %234 = load ptr, ptr %233, align 8
  %235 = getelementptr { ptr }, ptr %26, i32 0, i32 0
  store ptr @i8_typ, ptr %235, align 8
  %236 = call ptr @behavior_wrapper(ptr %234, { ptr, ptr, ptr, i32 } %228, ptr %26)
  call void %236({ ptr, ptr, ptr, i32 } %228, { ptr, ptr, ptr, i32 } %228, ptr %25, i8 %218) #17
  %237 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %238 = load ptr, ptr %237, align 8
  %239 = insertvalue { ptr, i160 } undef, ptr %238, 0
  %240 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %241 = load i160, ptr %240, align 4
  %242 = insertvalue { ptr, i160 } %239, i160 %241, 1
  store { ptr, i160 } %242, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem25, align 8
  br label %249

243:                                              ; preds = %3
  %244 = load [0 x i8], ptr %27, align 1
  store [0 x i8] %244, ptr %28, align 1
  store ptr @nil_typ, ptr %29, align 8
  %245 = load ptr, ptr %29, align 8
  %246 = insertvalue { ptr, i160 } undef, ptr %245, 0
  %247 = load i160, ptr %28, align 4
  %248 = insertvalue { ptr, i160 } %246, i160 %247, 1
  store { ptr, i160 } %248, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem25, align 8
  br label %249

249:                                              ; preds = %243, %92
  %.reload26 = load { ptr, i160 }, ptr %.reg2mem25, align 8
  store { ptr, i160 } %.reload26, ptr %.reg2mem, align 8
  br label %250

250:                                              ; preds = %249
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { i64, i64 } @_data_size_Character(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 3, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [5 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Character_B_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i8_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 4, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [5 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Character)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 40, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i8 %25(ptr %18) #16
  %27 = alloca i8, align 1
  store i8 %26, ptr %27, align 1
  %28 = load i8, ptr %27, align 1
  ret i8 %28
}

define void @Character_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Character)
  %19 = alloca i8, align 1
  store i8 %3, ptr %19, align 1
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 40, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = load i8, ptr %19, align 1
  call void %27(ptr %20, i8 %28) #15
  ret void
}

define i8 @Character_getter_byte(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i8, ptr %2, align 1
  ret i8 %3
}

define void @Character_setter_byte(ptr %0, i8 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i8, align 1
  store i8 %1, ptr %4, align 1
  %5 = load i8, ptr %4, align 1
  store i8 %5, ptr %3, align 1
  ret void
}

define i32 @StringIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @StringIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @StringIterator_setter_str(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define i32 @String_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @String_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define i32 @String_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @String_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define { ptr } @String_getter_bytes(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @String_setter_bytes(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define { i64, i64 } @_data_size_Exception(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 8, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [13 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Exception_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 1
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 2
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 0
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 1
  %16 = load i64, ptr %12, align 4
  %17 = load i64, ptr %13, align 4
  %18 = load ptr, ptr %14, align 8
  %19 = load ptr, ptr %15, align 8
  %20 = load i64, ptr @String, align 4
  %21 = call i1 @subtype_test_wrapper(ptr %18, i64 %17, i64 %16, i64 %20, i64 ptrtoint (ptr @String to i64), ptr %19)
  store i1 %21, ptr %3, align 1
  store i32 10, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [13 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 11, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @String)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 104, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %34, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %36, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %38, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %40, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %42, { ptr, ptr, ptr, i32 } %58) #15
  %59 = alloca i32, align 4
  store i32 0, ptr %59, align 4
  %60 = load ptr, ptr %11, align 8
  %61 = load ptr, ptr %6, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 104, ptr %61)
  %63 = load i32, ptr %17, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = load i32, ptr %59, align 4
  call void %67(ptr %60, i32 %68) #15
  %69 = alloca i32, align 4
  store i32 1, ptr %69, align 4
  %70 = load i32, ptr %69, align 4
  %71 = sext i32 %70 to i64
  %72 = alloca ptr, align 8
  %73 = mul i64 %71, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %74 = call ptr @bump_malloc(i64 %73)
  store ptr %74, ptr %72, align 8
  %75 = alloca ptr, align 8
  %76 = getelementptr { ptr }, ptr %72, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  store ptr %77, ptr %75, align 8
  %78 = alloca i32, align 4
  store i32 0, ptr %78, align 4
  %79 = alloca i32, align 4
  store i32 0, ptr %79, align 4
  %80 = alloca i32, align 4
  store i32 1, ptr %80, align 4
  %81 = alloca [1 x ptr], align 8
  store ptr @String, ptr %81, align 8
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr ptr, ptr %82, i32 6
  %84 = load ptr, ptr %83, align 8
  %85 = call { i64, i64 } @size_wrapper(ptr %84, ptr %81)
  %86 = extractvalue { i64, i64 } %85, 0
  %87 = call ptr @bump_malloc(i64 %86)
  %88 = alloca i32, align 4
  %89 = alloca ptr, align 8
  %90 = alloca ptr, align 8
  %91 = alloca ptr, align 8
  store ptr @String, ptr %91, align 8
  store ptr %87, ptr %90, align 8
  store i32 10, ptr %88, align 4
  %92 = alloca i32, align 4
  store i32 0, ptr %92, align 4
  %93 = alloca i32, align 4
  store i32 1, ptr %93, align 4
  %94 = load ptr, ptr %75, align 8
  %95 = insertvalue { ptr } undef, ptr %94, 0
  %96 = load i32, ptr %92, align 4
  %97 = load i32, ptr %93, align 4
  %98 = load ptr, ptr %91, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = load ptr, ptr %90, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 1
  %102 = load ptr, ptr %89, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %102, 2
  %104 = load i32, ptr %88, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %104, 3
  %106 = alloca [3 x ptr], align 8
  %107 = getelementptr [3 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %107, align 8
  %108 = getelementptr [3 x ptr], ptr %106, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %108, align 8
  %109 = getelementptr [3 x ptr], ptr %106, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 9, ptr %106)
  %111 = call ptr @llvm.invariant.start.p0(i64 616, ptr %98)
  %112 = getelementptr ptr, ptr %98, i32 %104
  %113 = getelementptr ptr, ptr %112, i32 5
  %114 = load ptr, ptr %113, align 8
  %115 = alloca { ptr, ptr, ptr }, align 8
  %116 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 0
  store ptr @buffer_typ, ptr %116, align 8
  %117 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 1
  store ptr @i32_typ, ptr %117, align 8
  %118 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 2
  store ptr @i32_typ, ptr %118, align 8
  %119 = call ptr @behavior_wrapper(ptr %114, { ptr, ptr, ptr, i32 } %105, ptr %115)
  call void %119({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr %106, { ptr } %95, i32 %96, i32 %97) #17
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %91, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %124 = load ptr, ptr %90, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %126 = load ptr, ptr %89, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %128 = load i32, ptr %88, align 4
  store i32 %128, ptr %127, align 4
  call void @set_offset(ptr %120, ptr @String)
  %129 = load ptr, ptr %11, align 8
  %130 = load ptr, ptr %6, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 104, ptr %130)
  %132 = load i32, ptr %17, align 4
  %133 = getelementptr ptr, ptr %130, i32 %132
  %134 = getelementptr ptr, ptr %133, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr, ptr }, ptr %135, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = load ptr, ptr %121, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %140 = load ptr, ptr %123, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %140, 1
  %142 = load ptr, ptr %125, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %142, 2
  %144 = load i32, ptr %127, align 4
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, i32 %144, 3
  call void %137(ptr %129, { ptr, ptr, ptr, i32 } %145) #15
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %18 = alloca i32, align 4
  store i32 0, ptr %18, align 4
  %19 = load ptr, ptr %10, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 104, ptr %20)
  %22 = load i32, ptr %16, align 4
  %23 = getelementptr ptr, ptr %20, i32 %22
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = load i32, ptr %18, align 4
  call void %26(ptr %19, i32 %27) #15
  %28 = alloca i32, align 4
  store i32 7, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  %30 = sext i32 %29 to i64
  %31 = alloca ptr, align 8
  %32 = mul i64 %30, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %33 = call ptr @bump_malloc(i64 %32)
  store ptr %33, ptr %31, align 8
  %34 = alloca ptr, align 8
  %35 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  store ptr %36, ptr %34, align 8
  %37 = alloca i32, align 4
  store i32 0, ptr %37, align 4
  %38 = load ptr, ptr %34, align 8
  %39 = load i32, ptr %37, align 4
  %40 = sext i32 %39 to i64
  %41 = mul i64 ptrtoint (ptr getelementptr ([6 x i8], ptr null, i32 1) to i64), %40
  %42 = getelementptr i8, ptr %38, i64 %41
  %43 = load <6 x i8>, ptr @jvhnd_None, align 8
  store <6 x i8> %43, ptr %42, align 8
  %44 = alloca i32, align 4
  store i32 6, ptr %44, align 4
  %45 = alloca i32, align 4
  store i32 7, ptr %45, align 4
  %46 = alloca [1 x ptr], align 8
  store ptr @String, ptr %46, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr ptr, ptr %47, i32 6
  %49 = load ptr, ptr %48, align 8
  %50 = call { i64, i64 } @size_wrapper(ptr %49, ptr %46)
  %51 = extractvalue { i64, i64 } %50, 0
  %52 = call ptr @bump_malloc(i64 %51)
  %53 = alloca i32, align 4
  %54 = alloca ptr, align 8
  %55 = alloca ptr, align 8
  %56 = alloca ptr, align 8
  store ptr @String, ptr %56, align 8
  store ptr %52, ptr %55, align 8
  store i32 10, ptr %53, align 4
  %57 = alloca i32, align 4
  store i32 6, ptr %57, align 4
  %58 = alloca i32, align 4
  store i32 7, ptr %58, align 4
  %59 = load ptr, ptr %34, align 8
  %60 = insertvalue { ptr } undef, ptr %59, 0
  %61 = load i32, ptr %57, align 4
  %62 = load i32, ptr %58, align 4
  %63 = load ptr, ptr %56, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %63, 0
  %65 = load ptr, ptr %55, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %65, 1
  %67 = load ptr, ptr %54, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %67, 2
  %69 = load i32, ptr %53, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %69, 3
  %71 = alloca [3 x ptr], align 8
  %72 = getelementptr [3 x ptr], ptr %71, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %72, align 8
  %73 = getelementptr [3 x ptr], ptr %71, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %73, align 8
  %74 = getelementptr [3 x ptr], ptr %71, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 9, ptr %71)
  %76 = call ptr @llvm.invariant.start.p0(i64 616, ptr %63)
  %77 = getelementptr ptr, ptr %63, i32 %69
  %78 = getelementptr ptr, ptr %77, i32 5
  %79 = load ptr, ptr %78, align 8
  %80 = alloca { ptr, ptr, ptr }, align 8
  %81 = getelementptr { ptr, ptr, ptr }, ptr %80, i32 0, i32 0
  store ptr @buffer_typ, ptr %81, align 8
  %82 = getelementptr { ptr, ptr, ptr }, ptr %80, i32 0, i32 1
  store ptr @i32_typ, ptr %82, align 8
  %83 = getelementptr { ptr, ptr, ptr }, ptr %80, i32 0, i32 2
  store ptr @i32_typ, ptr %83, align 8
  %84 = call ptr @behavior_wrapper(ptr %79, { ptr, ptr, ptr, i32 } %70, ptr %80)
  call void %84({ ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %70, ptr %71, { ptr } %60, i32 %61, i32 %62) #17
  %85 = alloca { ptr, ptr, ptr, i32 }, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 0
  %87 = load ptr, ptr %56, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 1
  %89 = load ptr, ptr %55, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 2
  %91 = load ptr, ptr %54, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 3
  %93 = load i32, ptr %53, align 4
  store i32 %93, ptr %92, align 4
  call void @set_offset(ptr %85, ptr @String)
  %94 = load ptr, ptr %10, align 8
  %95 = load ptr, ptr %5, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 104, ptr %95)
  %97 = load i32, ptr %16, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 2
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %86, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = load ptr, ptr %88, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %105, 1
  %107 = load ptr, ptr %90, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %107, 2
  %109 = load i32, ptr %92, align 4
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, i32 %109, 3
  call void %102(ptr %94, { ptr, ptr, ptr, i32 } %110) #15
  %111 = alloca i32, align 4
  store i32 1, ptr %111, align 4
  %112 = load i32, ptr %111, align 4
  %113 = sext i32 %112 to i64
  %114 = alloca ptr, align 8
  %115 = mul i64 %113, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %116 = call ptr @bump_malloc(i64 %115)
  store ptr %116, ptr %114, align 8
  %117 = alloca ptr, align 8
  %118 = getelementptr { ptr }, ptr %114, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  store ptr %119, ptr %117, align 8
  %120 = alloca i32, align 4
  store i32 0, ptr %120, align 4
  %121 = alloca i32, align 4
  store i32 0, ptr %121, align 4
  %122 = alloca i32, align 4
  store i32 1, ptr %122, align 4
  %123 = alloca [1 x ptr], align 8
  store ptr @String, ptr %123, align 8
  %124 = load ptr, ptr %123, align 8
  %125 = getelementptr ptr, ptr %124, i32 6
  %126 = load ptr, ptr %125, align 8
  %127 = call { i64, i64 } @size_wrapper(ptr %126, ptr %123)
  %128 = extractvalue { i64, i64 } %127, 0
  %129 = call ptr @bump_malloc(i64 %128)
  %130 = alloca i32, align 4
  %131 = alloca ptr, align 8
  %132 = alloca ptr, align 8
  %133 = alloca ptr, align 8
  store ptr @String, ptr %133, align 8
  store ptr %129, ptr %132, align 8
  store i32 10, ptr %130, align 4
  %134 = alloca i32, align 4
  store i32 0, ptr %134, align 4
  %135 = alloca i32, align 4
  store i32 1, ptr %135, align 4
  %136 = load ptr, ptr %117, align 8
  %137 = insertvalue { ptr } undef, ptr %136, 0
  %138 = load i32, ptr %134, align 4
  %139 = load i32, ptr %135, align 4
  %140 = load ptr, ptr %133, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %140, 0
  %142 = load ptr, ptr %132, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %142, 1
  %144 = load ptr, ptr %131, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %144, 2
  %146 = load i32, ptr %130, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 %146, 3
  %148 = alloca [3 x ptr], align 8
  %149 = getelementptr [3 x ptr], ptr %148, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %149, align 8
  %150 = getelementptr [3 x ptr], ptr %148, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %150, align 8
  %151 = getelementptr [3 x ptr], ptr %148, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 9, ptr %148)
  %153 = call ptr @llvm.invariant.start.p0(i64 616, ptr %140)
  %154 = getelementptr ptr, ptr %140, i32 %146
  %155 = getelementptr ptr, ptr %154, i32 5
  %156 = load ptr, ptr %155, align 8
  %157 = alloca { ptr, ptr, ptr }, align 8
  %158 = getelementptr { ptr, ptr, ptr }, ptr %157, i32 0, i32 0
  store ptr @buffer_typ, ptr %158, align 8
  %159 = getelementptr { ptr, ptr, ptr }, ptr %157, i32 0, i32 1
  store ptr @i32_typ, ptr %159, align 8
  %160 = getelementptr { ptr, ptr, ptr }, ptr %157, i32 0, i32 2
  store ptr @i32_typ, ptr %160, align 8
  %161 = call ptr @behavior_wrapper(ptr %156, { ptr, ptr, ptr, i32 } %147, ptr %157)
  call void %161({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %148, { ptr } %137, i32 %138, i32 %139) #17
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %164 = load ptr, ptr %133, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %166 = load ptr, ptr %132, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %168 = load ptr, ptr %131, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %170 = load i32, ptr %130, align 4
  store i32 %170, ptr %169, align 4
  call void @set_offset(ptr %162, ptr @String)
  %171 = load ptr, ptr %10, align 8
  %172 = load ptr, ptr %5, align 8
  %173 = call ptr @llvm.invariant.start.p0(i64 104, ptr %172)
  %174 = load i32, ptr %16, align 4
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = getelementptr ptr, ptr %175, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = getelementptr { ptr, ptr }, ptr %177, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %163, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %180, 0
  %182 = load ptr, ptr %165, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %182, 1
  %184 = load ptr, ptr %167, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %183, ptr %184, 2
  %186 = load i32, ptr %169, align 4
  %187 = insertvalue { ptr, ptr, ptr, i32 } %185, i32 %186, 3
  call void %179(ptr %171, { ptr, ptr, ptr, i32 } %187) #15
  ret void
}

define void @Exception_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Exception)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %20, align 4
  call void %28(ptr %21, i32 %29) #15
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %30, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %41, align 4
  store i32 %43, ptr %42, align 4
  call void @set_offset(ptr %31, ptr @String)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %33, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %48 = load ptr, ptr %36, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %50 = load ptr, ptr %39, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %52 = load i32, ptr %42, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %44, ptr @String)
  %53 = load ptr, ptr %12, align 8
  %54 = load ptr, ptr %7, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 104, ptr %54)
  %56 = load i32, ptr %18, align 4
  %57 = getelementptr ptr, ptr %54, i32 %56
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr }, ptr %59, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %45, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %47, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %49, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %51, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %53, { ptr, ptr, ptr, i32 } %69) #15
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %18 = alloca i32, align 4
  store i32 10, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([9 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <9 x i8>, ptr @eyary_, align 16
  store <9 x i8> %33, ptr %32, align 16
  %34 = alloca i32, align 4
  store i32 9, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 10, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca i32, align 4
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  store ptr @String, ptr %46, align 8
  store ptr %42, ptr %45, align 8
  store i32 10, ptr %43, align 4
  %47 = alloca i32, align 4
  store i32 9, ptr %47, align 4
  %48 = alloca i32, align 4
  store i32 10, ptr %48, align 4
  %49 = load ptr, ptr %24, align 8
  %50 = insertvalue { ptr } undef, ptr %49, 0
  %51 = load i32, ptr %47, align 4
  %52 = load i32, ptr %48, align 4
  %53 = load ptr, ptr %46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %45, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %44, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %43, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca [3 x ptr], align 8
  %62 = getelementptr [3 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %61, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %61, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr %61)
  %66 = call ptr @llvm.invariant.start.p0(i64 616, ptr %53)
  %67 = getelementptr ptr, ptr %53, i32 %59
  %68 = getelementptr ptr, ptr %67, i32 5
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr, ptr, ptr }, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 2
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %60, ptr %70)
  call void %74({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr } %50, i32 %51, i32 %52) #17
  %75 = load ptr, ptr %46, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = load ptr, ptr %45, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 1
  %79 = load ptr, ptr %44, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %79, 2
  %81 = load i32, ptr %43, align 4
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %81, 3
  %83 = alloca [0 x ptr], align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 0, ptr %83)
  %85 = call ptr @llvm.invariant.start.p0(i64 616, ptr %75)
  %86 = getelementptr ptr, ptr %75, i32 %81
  %87 = getelementptr ptr, ptr %86, i32 15
  %88 = load ptr, ptr %87, align 8
  %89 = alloca {}, align 8
  %90 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %82, ptr %89)
  %91 = call { ptr } %90({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr %83) #17
  %92 = alloca ptr, align 8
  store { ptr } %91, ptr %92, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %93)
  %95 = alloca i32, align 4
  store i32 27, ptr %95, align 4
  %96 = load i32, ptr %95, align 4
  %97 = sext i32 %96 to i64
  %98 = alloca ptr, align 8
  %99 = mul i64 %97, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %100 = call ptr @bump_malloc(i64 %99)
  store ptr %100, ptr %98, align 8
  %101 = alloca ptr, align 8
  %102 = getelementptr { ptr }, ptr %98, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  store ptr %103, ptr %101, align 8
  %104 = alloca i32, align 4
  store i32 0, ptr %104, align 4
  %105 = load ptr, ptr %101, align 8
  %106 = load i32, ptr %104, align 4
  %107 = sext i32 %106 to i64
  %108 = mul i64 ptrtoint (ptr getelementptr ([26 x i8], ptr null, i32 1) to i64), %107
  %109 = getelementptr i8, ptr %105, i64 %108
  %110 = load <26 x i8>, ptr @uhgrx_Exception_thrown_from_file, align 32
  store <26 x i8> %110, ptr %109, align 32
  %111 = alloca i32, align 4
  store i32 26, ptr %111, align 4
  %112 = alloca i32, align 4
  store i32 27, ptr %112, align 4
  %113 = alloca [1 x ptr], align 8
  store ptr @String, ptr %113, align 8
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr ptr, ptr %114, i32 6
  %116 = load ptr, ptr %115, align 8
  %117 = call { i64, i64 } @size_wrapper(ptr %116, ptr %113)
  %118 = extractvalue { i64, i64 } %117, 0
  %119 = call ptr @bump_malloc(i64 %118)
  %120 = alloca i32, align 4
  %121 = alloca ptr, align 8
  %122 = alloca ptr, align 8
  %123 = alloca ptr, align 8
  store ptr @String, ptr %123, align 8
  store ptr %119, ptr %122, align 8
  store i32 10, ptr %120, align 4
  %124 = alloca i32, align 4
  store i32 26, ptr %124, align 4
  %125 = alloca i32, align 4
  store i32 27, ptr %125, align 4
  %126 = load ptr, ptr %101, align 8
  %127 = insertvalue { ptr } undef, ptr %126, 0
  %128 = load i32, ptr %124, align 4
  %129 = load i32, ptr %125, align 4
  %130 = load ptr, ptr %123, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %132 = load ptr, ptr %122, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %132, 1
  %134 = load ptr, ptr %121, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %134, 2
  %136 = load i32, ptr %120, align 4
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %136, 3
  %138 = alloca [3 x ptr], align 8
  %139 = getelementptr [3 x ptr], ptr %138, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %138, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %140, align 8
  %141 = getelementptr [3 x ptr], ptr %138, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %141, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 9, ptr %138)
  %143 = call ptr @llvm.invariant.start.p0(i64 616, ptr %130)
  %144 = getelementptr ptr, ptr %130, i32 %136
  %145 = getelementptr ptr, ptr %144, i32 5
  %146 = load ptr, ptr %145, align 8
  %147 = alloca { ptr, ptr, ptr }, align 8
  %148 = getelementptr { ptr, ptr, ptr }, ptr %147, i32 0, i32 0
  store ptr @buffer_typ, ptr %148, align 8
  %149 = getelementptr { ptr, ptr, ptr }, ptr %147, i32 0, i32 1
  store ptr @i32_typ, ptr %149, align 8
  %150 = getelementptr { ptr, ptr, ptr }, ptr %147, i32 0, i32 2
  store ptr @i32_typ, ptr %150, align 8
  %151 = call ptr @behavior_wrapper(ptr %146, { ptr, ptr, ptr, i32 } %137, ptr %147)
  call void %151({ ptr, ptr, ptr, i32 } %137, { ptr, ptr, ptr, i32 } %137, ptr %138, { ptr } %127, i32 %128, i32 %129) #17
  %152 = load ptr, ptr %123, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %152, 0
  %154 = load ptr, ptr %122, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 1
  %156 = load ptr, ptr %121, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %156, 2
  %158 = load i32, ptr %120, align 4
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, i32 %158, 3
  %160 = alloca [0 x ptr], align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 0, ptr %160)
  %162 = call ptr @llvm.invariant.start.p0(i64 616, ptr %152)
  %163 = getelementptr ptr, ptr %152, i32 %158
  %164 = getelementptr ptr, ptr %163, i32 15
  %165 = load ptr, ptr %164, align 8
  %166 = alloca {}, align 8
  %167 = call ptr @behavior_wrapper(ptr %165, { ptr, ptr, ptr, i32 } %159, ptr %166)
  %168 = call { ptr } %167({ ptr, ptr, ptr, i32 } %159, { ptr, ptr, ptr, i32 } %159, ptr %160) #17
  %169 = alloca ptr, align 8
  store { ptr } %168, ptr %169, align 8
  %170 = load ptr, ptr %169, align 8
  %171 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %170)
  %172 = load ptr, ptr %10, align 8
  %173 = load ptr, ptr %5, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 104, ptr %173)
  %175 = load i32, ptr %16, align 4
  %176 = getelementptr ptr, ptr %173, i32 %175
  %177 = getelementptr ptr, ptr %176, i32 1
  %178 = load ptr, ptr %177, align 8
  %179 = getelementptr { ptr, ptr }, ptr %178, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = call { ptr, ptr, ptr, i32 } %180(ptr %172) #16
  %182 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %181, ptr %182, align 8
  call void @assume_offset(ptr %182, ptr @String)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %184, 0
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 1
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 1
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 2
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %190, 2
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 3
  %193 = load i32, ptr %192, align 4
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, i32 %193, 3
  %195 = alloca [0 x ptr], align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 0, ptr %195)
  %197 = call ptr @llvm.invariant.start.p0(i64 616, ptr %184)
  %198 = getelementptr ptr, ptr %184, i32 %193
  %199 = getelementptr ptr, ptr %198, i32 15
  %200 = load ptr, ptr %199, align 8
  %201 = alloca {}, align 8
  %202 = call ptr @behavior_wrapper(ptr %200, { ptr, ptr, ptr, i32 } %194, ptr %201)
  %203 = call { ptr } %202({ ptr, ptr, ptr, i32 } %194, { ptr, ptr, ptr, i32 } %194, ptr %195) #17
  %204 = alloca ptr, align 8
  store { ptr } %203, ptr %204, align 8
  %205 = load ptr, ptr %204, align 8
  %206 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %205)
  %207 = alloca i32, align 4
  store i32 8, ptr %207, align 4
  %208 = load i32, ptr %207, align 4
  %209 = sext i32 %208 to i64
  %210 = alloca ptr, align 8
  %211 = mul i64 %209, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %212 = call ptr @bump_malloc(i64 %211)
  store ptr %212, ptr %210, align 8
  %213 = alloca ptr, align 8
  %214 = getelementptr { ptr }, ptr %210, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  store ptr %215, ptr %213, align 8
  %216 = alloca i32, align 4
  store i32 0, ptr %216, align 4
  %217 = load ptr, ptr %213, align 8
  %218 = load i32, ptr %216, align 4
  %219 = sext i32 %218 to i64
  %220 = mul i64 ptrtoint (ptr getelementptr ([7 x i8], ptr null, i32 1) to i64), %219
  %221 = getelementptr i8, ptr %217, i64 %220
  %222 = load <7 x i8>, ptr @cyjud_At_line, align 8
  store <7 x i8> %222, ptr %221, align 8
  %223 = alloca i32, align 4
  store i32 7, ptr %223, align 4
  %224 = alloca i32, align 4
  store i32 8, ptr %224, align 4
  %225 = alloca [1 x ptr], align 8
  store ptr @String, ptr %225, align 8
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr ptr, ptr %226, i32 6
  %228 = load ptr, ptr %227, align 8
  %229 = call { i64, i64 } @size_wrapper(ptr %228, ptr %225)
  %230 = extractvalue { i64, i64 } %229, 0
  %231 = call ptr @bump_malloc(i64 %230)
  %232 = alloca i32, align 4
  %233 = alloca ptr, align 8
  %234 = alloca ptr, align 8
  %235 = alloca ptr, align 8
  store ptr @String, ptr %235, align 8
  store ptr %231, ptr %234, align 8
  store i32 10, ptr %232, align 4
  %236 = alloca i32, align 4
  store i32 7, ptr %236, align 4
  %237 = alloca i32, align 4
  store i32 8, ptr %237, align 4
  %238 = load ptr, ptr %213, align 8
  %239 = insertvalue { ptr } undef, ptr %238, 0
  %240 = load i32, ptr %236, align 4
  %241 = load i32, ptr %237, align 4
  %242 = load ptr, ptr %235, align 8
  %243 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %242, 0
  %244 = load ptr, ptr %234, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } %243, ptr %244, 1
  %246 = load ptr, ptr %233, align 8
  %247 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %246, 2
  %248 = load i32, ptr %232, align 4
  %249 = insertvalue { ptr, ptr, ptr, i32 } %247, i32 %248, 3
  %250 = alloca [3 x ptr], align 8
  %251 = getelementptr [3 x ptr], ptr %250, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %251, align 8
  %252 = getelementptr [3 x ptr], ptr %250, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %252, align 8
  %253 = getelementptr [3 x ptr], ptr %250, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %253, align 8
  %254 = call ptr @llvm.invariant.start.p0(i64 9, ptr %250)
  %255 = call ptr @llvm.invariant.start.p0(i64 616, ptr %242)
  %256 = getelementptr ptr, ptr %242, i32 %248
  %257 = getelementptr ptr, ptr %256, i32 5
  %258 = load ptr, ptr %257, align 8
  %259 = alloca { ptr, ptr, ptr }, align 8
  %260 = getelementptr { ptr, ptr, ptr }, ptr %259, i32 0, i32 0
  store ptr @buffer_typ, ptr %260, align 8
  %261 = getelementptr { ptr, ptr, ptr }, ptr %259, i32 0, i32 1
  store ptr @i32_typ, ptr %261, align 8
  %262 = getelementptr { ptr, ptr, ptr }, ptr %259, i32 0, i32 2
  store ptr @i32_typ, ptr %262, align 8
  %263 = call ptr @behavior_wrapper(ptr %258, { ptr, ptr, ptr, i32 } %249, ptr %259)
  call void %263({ ptr, ptr, ptr, i32 } %249, { ptr, ptr, ptr, i32 } %249, ptr %250, { ptr } %239, i32 %240, i32 %241) #17
  %264 = load ptr, ptr %235, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %264, 0
  %266 = load ptr, ptr %234, align 8
  %267 = insertvalue { ptr, ptr, ptr, i32 } %265, ptr %266, 1
  %268 = load ptr, ptr %233, align 8
  %269 = insertvalue { ptr, ptr, ptr, i32 } %267, ptr %268, 2
  %270 = load i32, ptr %232, align 4
  %271 = insertvalue { ptr, ptr, ptr, i32 } %269, i32 %270, 3
  %272 = alloca [0 x ptr], align 8
  %273 = call ptr @llvm.invariant.start.p0(i64 0, ptr %272)
  %274 = call ptr @llvm.invariant.start.p0(i64 616, ptr %264)
  %275 = getelementptr ptr, ptr %264, i32 %270
  %276 = getelementptr ptr, ptr %275, i32 15
  %277 = load ptr, ptr %276, align 8
  %278 = alloca {}, align 8
  %279 = call ptr @behavior_wrapper(ptr %277, { ptr, ptr, ptr, i32 } %271, ptr %278)
  %280 = call { ptr } %279({ ptr, ptr, ptr, i32 } %271, { ptr, ptr, ptr, i32 } %271, ptr %272) #17
  %281 = alloca ptr, align 8
  store { ptr } %280, ptr %281, align 8
  %282 = load ptr, ptr %281, align 8
  %283 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %282)
  %284 = load ptr, ptr %10, align 8
  %285 = load ptr, ptr %5, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 104, ptr %285)
  %287 = load i32, ptr %16, align 4
  %288 = getelementptr ptr, ptr %285, i32 %287
  %289 = load ptr, ptr %288, align 8
  %290 = getelementptr { ptr, ptr }, ptr %289, i32 0, i32 0
  %291 = load ptr, ptr %290, align 8
  %292 = call i32 %291(ptr %284) #16
  %293 = alloca i32, align 4
  store i32 %292, ptr %293, align 4
  %294 = load i32, ptr %293, align 4
  %295 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %294)
  %296 = alloca i32, align 4
  store i32 13, ptr %296, align 4
  %297 = load i32, ptr %296, align 4
  %298 = sext i32 %297 to i64
  %299 = alloca ptr, align 8
  %300 = mul i64 %298, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %301 = call ptr @bump_malloc(i64 %300)
  store ptr %301, ptr %299, align 8
  %302 = alloca ptr, align 8
  %303 = getelementptr { ptr }, ptr %299, i32 0, i32 0
  %304 = load ptr, ptr %303, align 8
  store ptr %304, ptr %302, align 8
  %305 = alloca i32, align 4
  store i32 0, ptr %305, align 4
  %306 = load ptr, ptr %302, align 8
  %307 = load i32, ptr %305, align 4
  %308 = sext i32 %307 to i64
  %309 = mul i64 ptrtoint (ptr getelementptr ([12 x i8], ptr null, i32 1) to i64), %308
  %310 = getelementptr i8, ptr %306, i64 %309
  %311 = load <12 x i8>, ptr @tyuxh_With_message, align 16
  store <12 x i8> %311, ptr %310, align 16
  %312 = alloca i32, align 4
  store i32 12, ptr %312, align 4
  %313 = alloca i32, align 4
  store i32 13, ptr %313, align 4
  %314 = alloca [1 x ptr], align 8
  store ptr @String, ptr %314, align 8
  %315 = load ptr, ptr %314, align 8
  %316 = getelementptr ptr, ptr %315, i32 6
  %317 = load ptr, ptr %316, align 8
  %318 = call { i64, i64 } @size_wrapper(ptr %317, ptr %314)
  %319 = extractvalue { i64, i64 } %318, 0
  %320 = call ptr @bump_malloc(i64 %319)
  %321 = alloca i32, align 4
  %322 = alloca ptr, align 8
  %323 = alloca ptr, align 8
  %324 = alloca ptr, align 8
  store ptr @String, ptr %324, align 8
  store ptr %320, ptr %323, align 8
  store i32 10, ptr %321, align 4
  %325 = alloca i32, align 4
  store i32 12, ptr %325, align 4
  %326 = alloca i32, align 4
  store i32 13, ptr %326, align 4
  %327 = load ptr, ptr %302, align 8
  %328 = insertvalue { ptr } undef, ptr %327, 0
  %329 = load i32, ptr %325, align 4
  %330 = load i32, ptr %326, align 4
  %331 = load ptr, ptr %324, align 8
  %332 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %331, 0
  %333 = load ptr, ptr %323, align 8
  %334 = insertvalue { ptr, ptr, ptr, i32 } %332, ptr %333, 1
  %335 = load ptr, ptr %322, align 8
  %336 = insertvalue { ptr, ptr, ptr, i32 } %334, ptr %335, 2
  %337 = load i32, ptr %321, align 4
  %338 = insertvalue { ptr, ptr, ptr, i32 } %336, i32 %337, 3
  %339 = alloca [3 x ptr], align 8
  %340 = getelementptr [3 x ptr], ptr %339, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %340, align 8
  %341 = getelementptr [3 x ptr], ptr %339, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %341, align 8
  %342 = getelementptr [3 x ptr], ptr %339, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %342, align 8
  %343 = call ptr @llvm.invariant.start.p0(i64 9, ptr %339)
  %344 = call ptr @llvm.invariant.start.p0(i64 616, ptr %331)
  %345 = getelementptr ptr, ptr %331, i32 %337
  %346 = getelementptr ptr, ptr %345, i32 5
  %347 = load ptr, ptr %346, align 8
  %348 = alloca { ptr, ptr, ptr }, align 8
  %349 = getelementptr { ptr, ptr, ptr }, ptr %348, i32 0, i32 0
  store ptr @buffer_typ, ptr %349, align 8
  %350 = getelementptr { ptr, ptr, ptr }, ptr %348, i32 0, i32 1
  store ptr @i32_typ, ptr %350, align 8
  %351 = getelementptr { ptr, ptr, ptr }, ptr %348, i32 0, i32 2
  store ptr @i32_typ, ptr %351, align 8
  %352 = call ptr @behavior_wrapper(ptr %347, { ptr, ptr, ptr, i32 } %338, ptr %348)
  call void %352({ ptr, ptr, ptr, i32 } %338, { ptr, ptr, ptr, i32 } %338, ptr %339, { ptr } %328, i32 %329, i32 %330) #17
  %353 = load ptr, ptr %324, align 8
  %354 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %353, 0
  %355 = load ptr, ptr %323, align 8
  %356 = insertvalue { ptr, ptr, ptr, i32 } %354, ptr %355, 1
  %357 = load ptr, ptr %322, align 8
  %358 = insertvalue { ptr, ptr, ptr, i32 } %356, ptr %357, 2
  %359 = load i32, ptr %321, align 4
  %360 = insertvalue { ptr, ptr, ptr, i32 } %358, i32 %359, 3
  %361 = alloca [0 x ptr], align 8
  %362 = call ptr @llvm.invariant.start.p0(i64 0, ptr %361)
  %363 = call ptr @llvm.invariant.start.p0(i64 616, ptr %353)
  %364 = getelementptr ptr, ptr %353, i32 %359
  %365 = getelementptr ptr, ptr %364, i32 15
  %366 = load ptr, ptr %365, align 8
  %367 = alloca {}, align 8
  %368 = call ptr @behavior_wrapper(ptr %366, { ptr, ptr, ptr, i32 } %360, ptr %367)
  %369 = call { ptr } %368({ ptr, ptr, ptr, i32 } %360, { ptr, ptr, ptr, i32 } %360, ptr %361) #17
  %370 = alloca ptr, align 8
  store { ptr } %369, ptr %370, align 8
  %371 = load ptr, ptr %370, align 8
  %372 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %371)
  %373 = load ptr, ptr %7, align 8
  %374 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %373, 0
  %375 = load ptr, ptr %10, align 8
  %376 = insertvalue { ptr, ptr, ptr, i32 } %374, ptr %375, 1
  %377 = load ptr, ptr %13, align 8
  %378 = insertvalue { ptr, ptr, ptr, i32 } %376, ptr %377, 2
  %379 = load i32, ptr %16, align 4
  %380 = insertvalue { ptr, ptr, ptr, i32 } %378, i32 %379, 3
  %381 = alloca [0 x ptr], align 8
  %382 = call ptr @llvm.invariant.start.p0(i64 0, ptr %381)
  %383 = call ptr @llvm.invariant.start.p0(i64 104, ptr %373)
  %384 = getelementptr ptr, ptr %373, i32 %379
  %385 = getelementptr ptr, ptr %384, i32 7
  %386 = load ptr, ptr %385, align 8
  %387 = alloca {}, align 8
  %388 = call ptr @behavior_wrapper(ptr %386, { ptr, ptr, ptr, i32 } %380, ptr %387)
  call void %388({ ptr, ptr, ptr, i32 } %380, { ptr, ptr, ptr, i32 } %380, ptr %381) #17
  %389 = alloca i32, align 4
  store i32 10, ptr %389, align 4
  %390 = load i32, ptr %389, align 4
  %391 = sext i32 %390 to i64
  %392 = alloca ptr, align 8
  %393 = mul i64 %391, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %394 = call ptr @bump_malloc(i64 %393)
  store ptr %394, ptr %392, align 8
  %395 = alloca ptr, align 8
  %396 = getelementptr { ptr }, ptr %392, i32 0, i32 0
  %397 = load ptr, ptr %396, align 8
  store ptr %397, ptr %395, align 8
  %398 = alloca i32, align 4
  store i32 0, ptr %398, align 4
  %399 = load ptr, ptr %395, align 8
  %400 = load i32, ptr %398, align 4
  %401 = sext i32 %400 to i64
  %402 = mul i64 ptrtoint (ptr getelementptr ([9 x i8], ptr null, i32 1) to i64), %401
  %403 = getelementptr i8, ptr %399, i64 %402
  %404 = load <9 x i8>, ptr @dkdyx_, align 16
  store <9 x i8> %404, ptr %403, align 16
  %405 = alloca i32, align 4
  store i32 9, ptr %405, align 4
  %406 = alloca i32, align 4
  store i32 10, ptr %406, align 4
  %407 = alloca [1 x ptr], align 8
  store ptr @String, ptr %407, align 8
  %408 = load ptr, ptr %407, align 8
  %409 = getelementptr ptr, ptr %408, i32 6
  %410 = load ptr, ptr %409, align 8
  %411 = call { i64, i64 } @size_wrapper(ptr %410, ptr %407)
  %412 = extractvalue { i64, i64 } %411, 0
  %413 = call ptr @bump_malloc(i64 %412)
  %414 = alloca i32, align 4
  %415 = alloca ptr, align 8
  %416 = alloca ptr, align 8
  %417 = alloca ptr, align 8
  store ptr @String, ptr %417, align 8
  store ptr %413, ptr %416, align 8
  store i32 10, ptr %414, align 4
  %418 = alloca i32, align 4
  store i32 9, ptr %418, align 4
  %419 = alloca i32, align 4
  store i32 10, ptr %419, align 4
  %420 = load ptr, ptr %395, align 8
  %421 = insertvalue { ptr } undef, ptr %420, 0
  %422 = load i32, ptr %418, align 4
  %423 = load i32, ptr %419, align 4
  %424 = load ptr, ptr %417, align 8
  %425 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %424, 0
  %426 = load ptr, ptr %416, align 8
  %427 = insertvalue { ptr, ptr, ptr, i32 } %425, ptr %426, 1
  %428 = load ptr, ptr %415, align 8
  %429 = insertvalue { ptr, ptr, ptr, i32 } %427, ptr %428, 2
  %430 = load i32, ptr %414, align 4
  %431 = insertvalue { ptr, ptr, ptr, i32 } %429, i32 %430, 3
  %432 = alloca [3 x ptr], align 8
  %433 = getelementptr [3 x ptr], ptr %432, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %433, align 8
  %434 = getelementptr [3 x ptr], ptr %432, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %434, align 8
  %435 = getelementptr [3 x ptr], ptr %432, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %435, align 8
  %436 = call ptr @llvm.invariant.start.p0(i64 9, ptr %432)
  %437 = call ptr @llvm.invariant.start.p0(i64 616, ptr %424)
  %438 = getelementptr ptr, ptr %424, i32 %430
  %439 = getelementptr ptr, ptr %438, i32 5
  %440 = load ptr, ptr %439, align 8
  %441 = alloca { ptr, ptr, ptr }, align 8
  %442 = getelementptr { ptr, ptr, ptr }, ptr %441, i32 0, i32 0
  store ptr @buffer_typ, ptr %442, align 8
  %443 = getelementptr { ptr, ptr, ptr }, ptr %441, i32 0, i32 1
  store ptr @i32_typ, ptr %443, align 8
  %444 = getelementptr { ptr, ptr, ptr }, ptr %441, i32 0, i32 2
  store ptr @i32_typ, ptr %444, align 8
  %445 = call ptr @behavior_wrapper(ptr %440, { ptr, ptr, ptr, i32 } %431, ptr %441)
  call void %445({ ptr, ptr, ptr, i32 } %431, { ptr, ptr, ptr, i32 } %431, ptr %432, { ptr } %421, i32 %422, i32 %423) #17
  %446 = load ptr, ptr %417, align 8
  %447 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %446, 0
  %448 = load ptr, ptr %416, align 8
  %449 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr %448, 1
  %450 = load ptr, ptr %415, align 8
  %451 = insertvalue { ptr, ptr, ptr, i32 } %449, ptr %450, 2
  %452 = load i32, ptr %414, align 4
  %453 = insertvalue { ptr, ptr, ptr, i32 } %451, i32 %452, 3
  %454 = alloca [0 x ptr], align 8
  %455 = call ptr @llvm.invariant.start.p0(i64 0, ptr %454)
  %456 = call ptr @llvm.invariant.start.p0(i64 616, ptr %446)
  %457 = getelementptr ptr, ptr %446, i32 %452
  %458 = getelementptr ptr, ptr %457, i32 15
  %459 = load ptr, ptr %458, align 8
  %460 = alloca {}, align 8
  %461 = call ptr @behavior_wrapper(ptr %459, { ptr, ptr, ptr, i32 } %453, ptr %460)
  %462 = call { ptr } %461({ ptr, ptr, ptr, i32 } %453, { ptr, ptr, ptr, i32 } %453, ptr %454) #17
  %463 = alloca ptr, align 8
  store { ptr } %462, ptr %463, align 8
  %464 = load ptr, ptr %463, align 8
  %465 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %464)
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 104, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @String)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 616, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 15
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca ptr, align 8
  store { ptr } %49, ptr %50, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %51)
  ret void
}

define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @Exception_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @Exception_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define i32 @Exception_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Exception_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define void @report_exception({ ptr } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr } %0, ptr %5, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %6, i32 0, i32 4
  %8 = load { ptr, i160 }, ptr %7, align 8
  %9 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %8, ptr %9, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = ptrtoint ptr %10 to i64
  %12 = icmp eq i64 %11, ptrtoint (ptr @nil_typ to i64)
  %13 = icmp eq i64 %11, 0
  %14 = or i1 %12, %13
  %15 = icmp eq i1 %14, false
  %16 = alloca i1, align 1
  store i1 %15, ptr %16, align 1
  %17 = load i1, ptr %16, align 1
  br i1 %17, label %18, label %._crit_edge

._crit_edge:                                      ; preds = %1
  br label %45

18:                                               ; preds = %1
  %19 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %20 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %23 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %24 = load i160, ptr %22, align 4
  store i160 %24, ptr %23, align 4
  call void @set_offset(ptr %2, ptr @Exception)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 1
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 2
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %35, 3
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %38 = call ptr @llvm.invariant.start.p0(i64 104, ptr %26)
  %39 = getelementptr ptr, ptr %26, i32 %35
  %40 = getelementptr ptr, ptr %39, i32 6
  %41 = load ptr, ptr %40, align 8
  %42 = call ptr @behavior_wrapper(ptr %41, { ptr, ptr, ptr, i32 } %36, ptr %4)
  call void %42({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr %3) #17
  %43 = load ptr, ptr %20, align 8
  store ptr %43, ptr %19, align 8
  %44 = load i160, ptr %23, align 4
  store i160 %44, ptr %22, align 4
  br label %45

45:                                               ; preds = %._crit_edge, %18
  ret void
}

define { i64, i64 } @_data_size_Pair(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = getelementptr ptr, ptr %0, i32 1
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr ptr, ptr %14, i32 9
  %16 = load ptr, ptr %15, align 8
  %17 = call { i64, i64 } @size_wrapper(ptr %16, ptr %13)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = extractvalue { i64, i64 } %17, 1
  %20 = icmp ugt i64 %19, %5
  %21 = select i1 %20, i64 %19, i64 %5
  %22 = urem i64 %11, %19
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %19, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 %18, %25
  %27 = add i64 %11, %26
  %28 = getelementptr ptr, ptr %0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 9
  %32 = load ptr, ptr %31, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr %32, ptr %29)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = extractvalue { i64, i64 } %33, 1
  %36 = icmp ugt i64 %35, %21
  %37 = select i1 %36, i64 %35, i64 %21
  %38 = urem i64 %27, %35
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 %35, %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 %34, %41
  %43 = add i64 %27, %42
  %44 = urem i64 %43, %37
  %45 = icmp eq i64 %44, 0
  %46 = sub i64 %37, %44
  %47 = select i1 %45, i64 0, i64 %46
  %48 = add i64 %43, %47
  %49 = insertvalue { i64, i64 } undef, i64 %48, 0
  %50 = insertvalue { i64, i64 } %49, i64 %37, 1
  ret { i64, i64 } %50
}

define ptr @Pair_field_Pair_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Pair_field_Pair_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @any_typ, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @any_typ to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 7, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [10 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 8, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Pair)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  store ptr %24, ptr %22, align 8
  %25 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %26 = load i160, ptr %25, align 4
  store i160 %26, ptr %21, align 4
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  %29 = load ptr, ptr %22, align 8
  store ptr %29, ptr %28, align 8
  %30 = load i160, ptr %21, align 4
  store i160 %30, ptr %27, align 4
  %31 = load ptr, ptr %12, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 80, ptr %32)
  %34 = load i32, ptr %18, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %28, align 8
  %41 = insertvalue { ptr, i160 } undef, ptr %40, 0
  %42 = load i160, ptr %27, align 4
  %43 = insertvalue { ptr, i160 } %41, i160 %42, 1
  call void %39(ptr %31, { ptr, i160 } %43) #15
  %44 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %44, align 8
  %45 = alloca i160, align 8
  %46 = alloca ptr, align 8
  %47 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  store ptr %48, ptr %46, align 8
  %49 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 1
  %50 = load i160, ptr %49, align 4
  store i160 %50, ptr %45, align 4
  %51 = alloca i160, align 8
  %52 = alloca ptr, align 8
  %53 = load ptr, ptr %46, align 8
  store ptr %53, ptr %52, align 8
  %54 = load i160, ptr %45, align 4
  store i160 %54, ptr %51, align 4
  %55 = load ptr, ptr %12, align 8
  %56 = load ptr, ptr %7, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr %56)
  %58 = load i32, ptr %18, align 4
  %59 = getelementptr ptr, ptr %56, i32 %58
  %60 = getelementptr ptr, ptr %59, i32 3
  %61 = load ptr, ptr %60, align 8
  %62 = getelementptr { ptr, ptr }, ptr %61, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = load ptr, ptr %52, align 8
  %65 = insertvalue { ptr, i160 } undef, ptr %64, 0
  %66 = load i160, ptr %51, align 4
  %67 = insertvalue { ptr, i160 } %65, i160 %66, 1
  call void %63(ptr %55, { ptr, i160 } %67) #15
  ret void
}

define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Pair)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, i160 } %26(ptr %18) #16
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %27, ptr %28, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  store ptr %32, ptr %30, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %33, align 4
  store i160 %34, ptr %29, align 4
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = load ptr, ptr %30, align 8
  store ptr %37, ptr %36, align 8
  %38 = load i160, ptr %29, align 4
  store i160 %38, ptr %35, align 4
  %39 = load ptr, ptr %36, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = load i160, ptr %35, align 4
  %42 = insertvalue { ptr, i160 } %40, i160 %41, 1
  ret { ptr, i160 } %42
}

define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Pair)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, i160 } %26(ptr %18) #16
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %27, ptr %28, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  store ptr %32, ptr %30, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %33, align 4
  store i160 %34, ptr %29, align 4
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = load ptr, ptr %30, align 8
  store ptr %37, ptr %36, align 8
  %38 = load i160, ptr %29, align 4
  store i160 %38, ptr %35, align 4
  %39 = load ptr, ptr %36, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = load i160, ptr %35, align 4
  %42 = insertvalue { ptr, i160 } %40, i160 %41, 1
  ret { ptr, i160 } %42
}

define { ptr, i160 } @Pair_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = load ptr, ptr %0, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %9, i32 9
  %11 = load ptr, ptr %10, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr %8)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = extractvalue { i64, i64 } %12, 1
  %15 = urem i64 %7, %14
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 %14, %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %13, %18
  %20 = add i64 %7, %19
  %21 = getelementptr ptr, ptr %0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr ptr, ptr %23, i32 9
  %25 = load ptr, ptr %24, align 8
  %26 = call { i64, i64 } @size_wrapper(ptr %25, ptr %22)
  %27 = extractvalue { i64, i64 } %26, 1
  %28 = urem i64 %20, %27
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %27, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %20, %31
  %33 = getelementptr i8, ptr %0, i64 %32
  %34 = load ptr, ptr %21, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr ptr, ptr %35, i32 7
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr, i160 } @box_wrapper(ptr %37, ptr %33, ptr %34)
  ret { ptr, i160 } %38
}

define void @Pair_setter_second(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = load ptr, ptr %0, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %10, i32 9
  %12 = load ptr, ptr %11, align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr %9)
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = extractvalue { i64, i64 } %13, 1
  %16 = urem i64 %8, %15
  %17 = icmp eq i64 %16, 0
  %18 = sub i64 %15, %16
  %19 = select i1 %17, i64 0, i64 %18
  %20 = add i64 %14, %19
  %21 = add i64 %8, %20
  %22 = getelementptr ptr, ptr %0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr ptr, ptr %24, i32 9
  %26 = load ptr, ptr %25, align 8
  %27 = call { i64, i64 } @size_wrapper(ptr %26, ptr %23)
  %28 = extractvalue { i64, i64 } %27, 1
  %29 = urem i64 %21, %28
  %30 = icmp eq i64 %29, 0
  %31 = sub i64 %28, %29
  %32 = select i1 %30, i64 0, i64 %31
  %33 = add i64 %21, %32
  %34 = getelementptr i8, ptr %0, i64 %33
  %35 = load ptr, ptr %22, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr ptr, ptr %36, i32 8
  %38 = load ptr, ptr %37, align 8
  call void @unbox_wrapper(ptr %38, { ptr, i160 } %1, ptr %35, ptr %34)
  ret void
}

define { ptr, i160 } @Pair_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = load ptr, ptr %0, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %9, i32 9
  %11 = load ptr, ptr %10, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr %8)
  %13 = extractvalue { i64, i64 } %12, 1
  %14 = urem i64 %7, %13
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 %13, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %7, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load ptr, ptr %0, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr ptr, ptr %21, i32 7
  %23 = load ptr, ptr %22, align 8
  %24 = call { ptr, i160 } @box_wrapper(ptr %23, ptr %19, ptr %20)
  ret { ptr, i160 } %24
}

define void @Pair_setter_first(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = load ptr, ptr %0, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %10, i32 9
  %12 = load ptr, ptr %11, align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr %9)
  %14 = extractvalue { i64, i64 } %13, 1
  %15 = urem i64 %8, %14
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 %14, %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %8, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = load ptr, ptr %0, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 8
  %24 = load ptr, ptr %23, align 8
  call void @unbox_wrapper(ptr %24, { ptr, i160 } %1, ptr %21, ptr %20)
  ret void
}

define { i64, i64 } @_data_size_Container(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_data_size_Iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_data_size_Iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_data_size_MapIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @MapIterable_field_MapIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @MapIterable_field_MapIterable_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 16, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [51 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @MapIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 17, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [51 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @MapIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 19, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [51 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @MapIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @MapIterable_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @MapIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 408, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 408, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 3
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @MapIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 408, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 408, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 3
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %64) #16
  %74 = alloca ptr, align 8
  store { ptr } %73, ptr %74, align 8
  %75 = load ptr, ptr %10, align 8
  %76 = load ptr, ptr %5, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 408, ptr %76)
  %78 = load i32, ptr %16, align 4
  %79 = getelementptr ptr, ptr %76, i32 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %75)
  %82 = load ptr, ptr %10, align 8
  %83 = load ptr, ptr %5, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 408, ptr %83)
  %85 = load i32, ptr %16, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr @typegetter_wrapper(ptr %88, ptr %82)
  %90 = alloca [3 x ptr], align 8
  store ptr @MapIterator, ptr %90, align 8
  %91 = getelementptr ptr, ptr %90, i32 1
  store ptr %81, ptr %91, align 8
  %92 = getelementptr ptr, ptr %90, i32 2
  store ptr %89, ptr %92, align 8
  %93 = load ptr, ptr %90, align 8
  %94 = getelementptr ptr, ptr %93, i32 6
  %95 = load ptr, ptr %94, align 8
  %96 = call { i64, i64 } @size_wrapper(ptr %95, ptr %90)
  %97 = extractvalue { i64, i64 } %96, 0
  %98 = call ptr @bump_malloc(i64 %97)
  store ptr %81, ptr %98, align 8
  %99 = getelementptr ptr, ptr %98, i32 1
  store ptr %89, ptr %99, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 16, ptr %98)
  %101 = alloca i32, align 4
  %102 = alloca ptr, align 8
  %103 = alloca ptr, align 8
  %104 = alloca ptr, align 8
  store ptr @MapIterator, ptr %104, align 8
  store ptr %98, ptr %103, align 8
  store i32 10, ptr %101, align 4
  %105 = load ptr, ptr %10, align 8
  %106 = load ptr, ptr %5, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 408, ptr %106)
  %108 = load i32, ptr %16, align 4
  %109 = getelementptr ptr, ptr %106, i32 %108
  %110 = getelementptr ptr, ptr %109, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = call { ptr, ptr, ptr, i32 } %113(ptr %105) #16
  %115 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %114, ptr %115, align 8
  call void @assume_offset(ptr %115, ptr @Iterable)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %126, 3
  %128 = alloca [0 x ptr], align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 0, ptr %128)
  %130 = call ptr @llvm.invariant.start.p0(i64 184, ptr %117)
  %131 = getelementptr ptr, ptr %117, i32 %126
  %132 = getelementptr ptr, ptr %131, i32 1
  %133 = load ptr, ptr %132, align 8
  %134 = alloca {}, align 8
  %135 = call ptr @behavior_wrapper(ptr %133, { ptr, ptr, ptr, i32 } %127, ptr %134)
  %136 = call { ptr, ptr, ptr, i32 } %135({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %128) #17
  %137 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %136, ptr %137, align 8
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 0
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %141 = load ptr, ptr %139, align 8
  store ptr %141, ptr %140, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %144 = load ptr, ptr %142, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 2
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %150 = load i32, ptr %148, align 4
  store i32 %150, ptr %149, align 4
  call void @set_offset(ptr %138, ptr @Iterator)
  %151 = load ptr, ptr %10, align 8
  %152 = load ptr, ptr %5, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 408, ptr %152)
  %154 = load i32, ptr %16, align 4
  %155 = getelementptr ptr, ptr %152, i32 %154
  %156 = getelementptr ptr, ptr %155, i32 3
  %157 = load ptr, ptr %156, align 8
  %158 = getelementptr { ptr, ptr }, ptr %157, i32 0, i32 0
  %159 = load ptr, ptr %158, align 8
  %160 = call { ptr } %159(ptr %151) #16
  %161 = alloca ptr, align 8
  store { ptr } %160, ptr %161, align 8
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %164 = load ptr, ptr %140, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %166 = load ptr, ptr %143, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %168 = load ptr, ptr %146, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %170 = load i32, ptr %149, align 4
  store i32 %170, ptr %169, align 4
  call void @set_offset(ptr %162, ptr @Iterator)
  %171 = load ptr, ptr %163, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %169, align 4
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = load ptr, ptr %161, align 8
  %180 = insertvalue { ptr } undef, ptr %179, 0
  %181 = load ptr, ptr %104, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = load ptr, ptr %103, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %183, 1
  %185 = load ptr, ptr %102, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %185, 2
  %187 = load i32, ptr %101, align 4
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, i32 %187, 3
  %189 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %190 = getelementptr [3 x ptr], ptr %189, i32 0, i32 1
  store ptr %81, ptr %190, align 8
  %191 = getelementptr [3 x ptr], ptr %189, i32 0, i32 2
  store ptr null, ptr %191, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 16, ptr %189)
  store ptr @Iterator, ptr %189, align 8
  %193 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %194 = getelementptr [4 x ptr], ptr %193, i32 0, i32 2
  store ptr %81, ptr %194, align 8
  %195 = getelementptr [4 x ptr], ptr %193, i32 0, i32 1
  store ptr %89, ptr %195, align 8
  %196 = getelementptr [4 x ptr], ptr %193, i32 0, i32 3
  store ptr null, ptr %196, align 8
  %197 = call ptr @llvm.invariant.start.p0(i64 24, ptr %193)
  store ptr @function_typ, ptr %193, align 8
  %198 = alloca [2 x ptr], align 8
  %199 = getelementptr [2 x ptr], ptr %198, i32 0, i32 0
  store ptr %189, ptr %199, align 8
  %200 = getelementptr [2 x ptr], ptr %198, i32 0, i32 1
  store ptr %193, ptr %200, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 4, ptr %198)
  %202 = call ptr @llvm.invariant.start.p0(i64 88, ptr %181)
  %203 = getelementptr ptr, ptr %181, i32 %187
  %204 = getelementptr ptr, ptr %203, i32 4
  %205 = load ptr, ptr %204, align 8
  %206 = alloca { ptr, ptr }, align 8
  %207 = getelementptr { ptr, ptr }, ptr %206, i32 0, i32 0
  store ptr %171, ptr %207, align 8
  %208 = getelementptr { ptr, ptr }, ptr %206, i32 0, i32 1
  store ptr @function_typ, ptr %208, align 8
  %209 = call ptr @behavior_wrapper(ptr %205, { ptr, ptr, ptr, i32 } %188, ptr %206)
  call void %209({ ptr, ptr, ptr, i32 } %188, { ptr, ptr, ptr, i32 } %188, ptr %198, { ptr, ptr, ptr, i32 } %178, { ptr } %180) #17
  %210 = alloca { ptr, ptr, ptr, i32 }, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 0
  %212 = load ptr, ptr %104, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 1
  %214 = load ptr, ptr %103, align 8
  store ptr %214, ptr %213, align 8
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 2
  %216 = load ptr, ptr %102, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 3
  %218 = load i32, ptr %101, align 4
  store i32 %218, ptr %217, align 4
  call void @set_offset(ptr %210, ptr @Iterator)
  %219 = load ptr, ptr %211, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %219, 0
  %221 = load ptr, ptr %213, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %221, 1
  %223 = load ptr, ptr %215, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %223, 2
  %225 = load i32, ptr %217, align 4
  %226 = insertvalue { ptr, ptr, ptr, i32 } %224, i32 %225, 3
  ret { ptr, ptr, ptr, i32 } %226
}

define void @Iterable_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %15, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  store ptr %21, ptr %.reg2mem7, align 8
  %22 = load ptr, ptr %20, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  store ptr %22, ptr %.reload10, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr %27, ptr %.reg2mem3, align 8
  %28 = load i32, ptr %26, align 4
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store i32 %28, ptr %.reload6, align 4
  call void @set_offset(ptr %16, ptr @Iterable)
  %29 = alloca ptr, align 8
  store { ptr } %3, ptr %29, align 8
  %30 = load ptr, ptr %18, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %32 = load ptr, ptr %.reload9, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %24, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %36 = load i32, ptr %.reload5, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  %38 = alloca [0 x ptr], align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr %38)
  %40 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %41 = getelementptr ptr, ptr %30, i32 %36
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = alloca {}, align 8
  %45 = call ptr @behavior_wrapper(ptr %43, { ptr, ptr, ptr, i32 } %37, ptr %44)
  %46 = call { ptr, ptr, ptr, i32 } %45({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr %38) #17
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %46, ptr %47, align 8
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %60 = load i32, ptr %58, align 4
  store i32 %60, ptr %59, align 4
  call void @set_offset(ptr %48, ptr @Iterator)
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %50, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %65 = load ptr, ptr %53, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %67 = load ptr, ptr %56, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %69 = load i32, ptr %59, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %61, ptr @Iterator)
  %70 = alloca i32, align 4
  %71 = alloca ptr, align 8
  %72 = alloca ptr, align 8
  %73 = alloca ptr, align 8
  %74 = load ptr, ptr %62, align 8
  store ptr %74, ptr %73, align 8
  %75 = load ptr, ptr %64, align 8
  store ptr %75, ptr %72, align 8
  %76 = load ptr, ptr %66, align 8
  store ptr %76, ptr %71, align 8
  %77 = load i32, ptr %68, align 4
  store i32 %77, ptr %70, align 4
  br label %78

78:                                               ; preds = %._crit_edge1, %4
  %79 = load ptr, ptr %73, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %72, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %71, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %70, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %88 = call ptr @llvm.invariant.start.p0(i64 24, ptr %79)
  %89 = getelementptr ptr, ptr %79, i32 %85
  %90 = getelementptr ptr, ptr %89, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = call ptr @behavior_wrapper(ptr %91, { ptr, ptr, ptr, i32 } %86, ptr %6)
  %93 = call { ptr, i160 } %92({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %5) #17
  store { ptr, i160 } %93, ptr %7, align 8
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %94 = load ptr, ptr %.reload8, align 8
  %95 = load ptr, ptr %16, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 184, ptr %95)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %97 = load i32, ptr %.reload4, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = load ptr, ptr %98, align 8
  %100 = call ptr @typegetter_wrapper(ptr %99, ptr %94)
  %101 = load ptr, ptr %7, align 8
  %102 = ptrtoint ptr %101 to i64
  %103 = icmp eq i64 %102, ptrtoint (ptr @nil_typ to i64)
  %104 = icmp eq i64 %102, 0
  %105 = or i1 %103, %104
  %106 = icmp eq i1 %105, false
  store i1 %106, ptr %8, align 1
  %107 = load i1, ptr %8, align 1
  store i1 %107, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %108, label %._crit_edge

._crit_edge:                                      ; preds = %78
  br label %124

108:                                              ; preds = %78
  %109 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  store ptr %110, ptr %10, align 8
  %111 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %112 = load i160, ptr %111, align 4
  store i160 %112, ptr %9, align 4
  %113 = load ptr, ptr %10, align 8
  store ptr %113, ptr %12, align 8
  %114 = load i160, ptr %9, align 4
  store i160 %114, ptr %11, align 4
  %115 = load ptr, ptr %12, align 8
  %116 = insertvalue { ptr, i160 } undef, ptr %115, 0
  %117 = load i160, ptr %11, align 4
  %118 = insertvalue { ptr, i160 } %116, i160 %117, 1
  %119 = load ptr, ptr %29, align 8
  call void %119({ ptr, i160 } %118)
  %120 = load ptr, ptr %10, align 8
  store ptr %120, ptr %14, align 8
  %121 = load i160, ptr %9, align 4
  store i160 %121, ptr %13, align 4
  %122 = load ptr, ptr %14, align 8
  store ptr %122, ptr %109, align 8
  %123 = load i160, ptr %13, align 4
  store i160 %123, ptr %111, align 4
  br label %124

124:                                              ; preds = %._crit_edge, %108
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %125

._crit_edge1:                                     ; preds = %124
  br label %78

125:                                              ; preds = %124
  ret void
}

define { ptr, i160 } @Iterable_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr } %4) {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca { ptr, i160 }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %23, align 8
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  store ptr %29, ptr %.reg2mem7, align 8
  %30 = load ptr, ptr %28, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  store ptr %30, ptr %.reload10, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  store ptr %35, ptr %.reg2mem3, align 8
  %36 = load i32, ptr %34, align 4
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store i32 %36, ptr %.reload6, align 4
  call void @set_offset(ptr %24, ptr @Iterable)
  %37 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %37, align 8
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %39, align 8
  %42 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %43 = load i160, ptr %42, align 4
  store i160 %43, ptr %38, align 4
  %44 = alloca ptr, align 8
  store { ptr } %4, ptr %44, align 8
  %45 = load ptr, ptr %26, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %47 = load ptr, ptr %.reload9, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 1
  %49 = load ptr, ptr %32, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 2
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %51 = load i32, ptr %.reload5, align 4
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %51, 3
  %53 = alloca [0 x ptr], align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 0, ptr %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 184, ptr %45)
  %56 = getelementptr ptr, ptr %45, i32 %51
  %57 = getelementptr ptr, ptr %56, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = alloca {}, align 8
  %60 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %52, ptr %59)
  %61 = call { ptr, ptr, ptr, i32 } %60({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr %53) #17
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %61, ptr %62, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %75 = load i32, ptr %73, align 4
  store i32 %75, ptr %74, align 4
  call void @set_offset(ptr %63, ptr @Iterator)
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %65, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %80 = load ptr, ptr %68, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %82 = load ptr, ptr %71, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %84 = load i32, ptr %74, align 4
  store i32 %84, ptr %83, align 4
  call void @set_offset(ptr %76, ptr @Iterator)
  %85 = alloca i32, align 4
  %86 = alloca ptr, align 8
  %87 = alloca ptr, align 8
  %88 = alloca ptr, align 8
  %89 = load ptr, ptr %77, align 8
  store ptr %89, ptr %88, align 8
  %90 = load ptr, ptr %79, align 8
  store ptr %90, ptr %87, align 8
  %91 = load ptr, ptr %81, align 8
  store ptr %91, ptr %86, align 8
  %92 = load i32, ptr %83, align 4
  store i32 %92, ptr %85, align 4
  br label %93

93:                                               ; preds = %._crit_edge1, %5
  %94 = load ptr, ptr %88, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %94, 0
  %96 = load ptr, ptr %87, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 1
  %98 = load ptr, ptr %86, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 2
  %100 = load i32, ptr %85, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %100, 3
  %102 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %103 = call ptr @llvm.invariant.start.p0(i64 24, ptr %94)
  %104 = getelementptr ptr, ptr %94, i32 %100
  %105 = getelementptr ptr, ptr %104, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %101, ptr %7)
  %108 = call { ptr, i160 } %107({ ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %101, ptr %6) #17
  store { ptr, i160 } %108, ptr %8, align 8
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %109 = load ptr, ptr %.reload8, align 8
  %110 = load ptr, ptr %24, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 184, ptr %110)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %112 = load i32, ptr %.reload4, align 4
  %113 = getelementptr ptr, ptr %110, i32 %112
  %114 = load ptr, ptr %113, align 8
  %115 = call ptr @typegetter_wrapper(ptr %114, ptr %109)
  %116 = load ptr, ptr %8, align 8
  %117 = ptrtoint ptr %116 to i64
  %118 = icmp eq i64 %117, ptrtoint (ptr @nil_typ to i64)
  %119 = icmp eq i64 %117, 0
  %120 = or i1 %118, %119
  %121 = icmp eq i1 %120, false
  store i1 %121, ptr %9, align 1
  %122 = load i1, ptr %9, align 1
  store i1 %122, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %123, label %._crit_edge

._crit_edge:                                      ; preds = %93
  br label %152

123:                                              ; preds = %93
  %124 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  store ptr %125, ptr %11, align 8
  %126 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %127 = load i160, ptr %126, align 4
  store i160 %127, ptr %10, align 4
  %128 = load ptr, ptr %39, align 8
  store ptr %128, ptr %13, align 8
  %129 = load i160, ptr %38, align 4
  store i160 %129, ptr %12, align 4
  %130 = load ptr, ptr %13, align 8
  %131 = insertvalue { ptr, i160 } undef, ptr %130, 0
  %132 = load i160, ptr %12, align 4
  %133 = insertvalue { ptr, i160 } %131, i160 %132, 1
  %134 = load ptr, ptr %11, align 8
  store ptr %134, ptr %15, align 8
  %135 = load i160, ptr %10, align 4
  store i160 %135, ptr %14, align 4
  %136 = load ptr, ptr %15, align 8
  %137 = insertvalue { ptr, i160 } undef, ptr %136, 0
  %138 = load i160, ptr %14, align 4
  %139 = insertvalue { ptr, i160 } %137, i160 %138, 1
  %140 = load ptr, ptr %44, align 8
  %141 = call { ptr, i160 } %140({ ptr, i160 } %133, { ptr, i160 } %139)
  store { ptr, i160 } %141, ptr %16, align 8
  %142 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  store ptr %143, ptr %18, align 8
  %144 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %145 = load i160, ptr %144, align 4
  store i160 %145, ptr %17, align 4
  %146 = load ptr, ptr %18, align 8
  store ptr %146, ptr %39, align 8
  %147 = load i160, ptr %17, align 4
  store i160 %147, ptr %38, align 4
  %148 = load ptr, ptr %11, align 8
  store ptr %148, ptr %20, align 8
  %149 = load i160, ptr %10, align 4
  store i160 %149, ptr %19, align 4
  %150 = load ptr, ptr %20, align 8
  store ptr %150, ptr %124, align 8
  %151 = load i160, ptr %19, align 4
  store i160 %151, ptr %126, align 4
  br label %152

152:                                              ; preds = %._crit_edge, %123
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %153

._crit_edge1:                                     ; preds = %152
  br label %93

153:                                              ; preds = %152
  %154 = load ptr, ptr %39, align 8
  store ptr %154, ptr %22, align 8
  %155 = load i160, ptr %38, align 4
  store i160 %155, ptr %21, align 4
  %156 = load ptr, ptr %22, align 8
  %157 = insertvalue { ptr, i160 } undef, ptr %156, 0
  %158 = load i160, ptr %21, align 4
  %159 = insertvalue { ptr, i160 } %157, i160 %158, 1
  ret { ptr, i160 } %159
}

define i1 @Iterable_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i1, align 1
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i1, align 1
  %15 = alloca i1, align 1
  %16 = alloca i1, align 1
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i1, align 1
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem13 = alloca i1, align 1
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem24 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  store ptr %26, ptr %.reg2mem20, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  store ptr %27, ptr %.reload23, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr %32, ptr %.reg2mem16, align 8
  %33 = load i32, ptr %31, align 4
  %.reload19 = load ptr, ptr %.reg2mem16, align 8
  store i32 %33, ptr %.reload19, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca ptr, align 8
  store { ptr } %3, ptr %34, align 8
  %35 = load ptr, ptr %23, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %37 = load ptr, ptr %.reload22, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = load ptr, ptr %29, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 2
  %.reload18 = load ptr, ptr %.reg2mem16, align 8
  %41 = load i32, ptr %.reload18, align 4
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %41, 3
  %43 = alloca [0 x ptr], align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 0, ptr %43)
  %45 = call ptr @llvm.invariant.start.p0(i64 184, ptr %35)
  %46 = getelementptr ptr, ptr %35, i32 %41
  %47 = getelementptr ptr, ptr %46, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = alloca {}, align 8
  %50 = call ptr @behavior_wrapper(ptr %48, { ptr, ptr, ptr, i32 } %42, ptr %49)
  %51 = call { ptr, ptr, ptr, i32 } %50({ ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %42, ptr %43) #17
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %51, ptr %52, align 8
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %65 = load i32, ptr %63, align 4
  store i32 %65, ptr %64, align 4
  call void @set_offset(ptr %53, ptr @Iterator)
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %55, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %70 = load ptr, ptr %58, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %72 = load ptr, ptr %61, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %74 = load i32, ptr %64, align 4
  store i32 %74, ptr %73, align 4
  call void @set_offset(ptr %66, ptr @Iterator)
  %75 = alloca i32, align 4
  %76 = alloca ptr, align 8
  %77 = alloca ptr, align 8
  %78 = alloca ptr, align 8
  %79 = load ptr, ptr %67, align 8
  store ptr %79, ptr %78, align 8
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %77, align 8
  %81 = load ptr, ptr %71, align 8
  store ptr %81, ptr %76, align 8
  %82 = load i32, ptr %73, align 4
  store i32 %82, ptr %75, align 4
  br label %83

83:                                               ; preds = %145, %4
  %84 = load ptr, ptr %78, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %77, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %76, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %75, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  %92 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %93 = call ptr @llvm.invariant.start.p0(i64 24, ptr %84)
  %94 = getelementptr ptr, ptr %84, i32 %90
  %95 = getelementptr ptr, ptr %94, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = call ptr @behavior_wrapper(ptr %96, { ptr, ptr, ptr, i32 } %91, ptr %6)
  %98 = call { ptr, i160 } %97({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr %5) #17
  store { ptr, i160 } %98, ptr %7, align 8
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %99 = load ptr, ptr %.reload21, align 8
  %100 = load ptr, ptr %21, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 184, ptr %100)
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %102 = load i32, ptr %.reload17, align 4
  %103 = getelementptr ptr, ptr %100, i32 %102
  %104 = load ptr, ptr %103, align 8
  %105 = call ptr @typegetter_wrapper(ptr %104, ptr %99)
  %106 = load ptr, ptr %7, align 8
  %107 = ptrtoint ptr %106 to i64
  %108 = icmp eq i64 %107, ptrtoint (ptr @nil_typ to i64)
  %109 = icmp eq i64 %107, 0
  %110 = or i1 %108, %109
  %111 = icmp eq i1 %110, false
  store i1 %111, ptr %8, align 1
  %112 = load i1, ptr %8, align 1
  %113 = xor i1 %112, true
  store i1 %113, ptr %.reg2mem13, align 1
  %114 = select i1 %112, ptr %16, ptr %19
  store ptr %114, ptr %.reg2mem9, align 8
  br i1 %112, label %115, label %141

115:                                              ; preds = %83
  %116 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  store ptr %116, ptr %.reg2mem6, align 8
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %117 = load ptr, ptr %.reload8, align 8
  store ptr %117, ptr %10, align 8
  %118 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  store ptr %118, ptr %.reg2mem3, align 8
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %119 = load i160, ptr %.reload5, align 4
  store i160 %119, ptr %9, align 4
  store i1 false, ptr %11, align 1
  %120 = load ptr, ptr %10, align 8
  store ptr %120, ptr %13, align 8
  %121 = load i160, ptr %9, align 4
  store i160 %121, ptr %12, align 4
  %122 = load ptr, ptr %13, align 8
  %123 = insertvalue { ptr, i160 } undef, ptr %122, 0
  %124 = load i160, ptr %12, align 4
  %125 = insertvalue { ptr, i160 } %123, i160 %124, 1
  %126 = load ptr, ptr %34, align 8
  %127 = call i1 %126({ ptr, i160 } %125)
  store i1 %127, ptr %14, align 1
  %128 = load i1, ptr %11, align 1
  %129 = load i1, ptr %14, align 1
  %130 = icmp eq i1 %128, %129
  store i1 %130, ptr %15, align 1
  %131 = load i1, ptr %15, align 1
  %132 = xor i1 %131, true
  %133 = zext i1 %132 to i32
  store i32 %133, ptr %.reg2mem1, align 4
  br i1 %131, label %134, label %135

134:                                              ; preds = %115
  br label %140

135:                                              ; preds = %115
  %136 = load ptr, ptr %10, align 8
  store ptr %136, ptr %18, align 8
  %137 = load i160, ptr %9, align 4
  store i160 %137, ptr %17, align 4
  %138 = load ptr, ptr %18, align 8
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  store ptr %138, ptr %.reload7, align 8
  %139 = load i160, ptr %17, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  store i160 %139, ptr %.reload4, align 4
  br label %140

140:                                              ; preds = %135, %134
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem24, align 4
  br label %142

141:                                              ; preds = %83
  store i32 0, ptr %.reg2mem24, align 4
  br label %142

142:                                              ; preds = %141, %140
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  store i32 %.reload25, ptr %.reg2mem, align 4
  br label %143

143:                                              ; preds = %142
  %.reload = load i32, ptr %.reg2mem, align 4
  %144 = trunc i32 %.reload to i1
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %.reload15 = load i1, ptr %.reg2mem13, align 1
  br i1 %144, label %145, label %146

145:                                              ; preds = %143
  br label %83

146:                                              ; preds = %143
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %.reload14 = load i1, ptr %.reg2mem13, align 1
  store i1 %.reload14, ptr %.reload11, align 1
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %147 = load i1, ptr %.reload10, align 1
  ret i1 %147
}

define i1 @Iterable_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i1, align 1
  %14 = alloca i1, align 1
  %15 = alloca i160, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i1, align 1
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem13 = alloca i1, align 1
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem26 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem22, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload25 = load ptr, ptr %.reg2mem22, align 8
  store ptr %25, ptr %.reload25, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem18, align 8
  %31 = load i32, ptr %29, align 4
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  store i32 %31, ptr %.reload21, align 4
  call void @set_offset(ptr %19, ptr @Iterable)
  %32 = alloca ptr, align 8
  store { ptr } %3, ptr %32, align 8
  %33 = load ptr, ptr %21, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %.reload24 = load ptr, ptr %.reg2mem22, align 8
  %35 = load ptr, ptr %.reload24, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 1
  %37 = load ptr, ptr %27, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 2
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %39 = load i32, ptr %.reload20, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %33)
  %44 = getelementptr ptr, ptr %33, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %53, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %68 = load ptr, ptr %56, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %70 = load ptr, ptr %59, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %72 = load i32, ptr %62, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %64, ptr @Iterator)
  %73 = alloca i32, align 4
  %74 = alloca ptr, align 8
  %75 = alloca ptr, align 8
  %76 = alloca ptr, align 8
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = load ptr, ptr %67, align 8
  store ptr %78, ptr %75, align 8
  %79 = load ptr, ptr %69, align 8
  store ptr %79, ptr %74, align 8
  %80 = load i32, ptr %71, align 4
  store i32 %80, ptr %73, align 4
  br label %81

81:                                               ; preds = %139, %4
  %82 = load ptr, ptr %76, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %82, 0
  %84 = load ptr, ptr %75, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 1
  %86 = load ptr, ptr %74, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 2
  %88 = load i32, ptr %73, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, i32 %88, 3
  %90 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %91 = call ptr @llvm.invariant.start.p0(i64 24, ptr %82)
  %92 = getelementptr ptr, ptr %82, i32 %88
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %89, ptr %6)
  %96 = call { ptr, i160 } %95({ ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %89, ptr %5) #17
  store { ptr, i160 } %96, ptr %7, align 8
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %97 = load ptr, ptr %.reload23, align 8
  %98 = load ptr, ptr %19, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 184, ptr %98)
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %100 = load i32, ptr %.reload19, align 4
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = load ptr, ptr %101, align 8
  %103 = call ptr @typegetter_wrapper(ptr %102, ptr %97)
  %104 = load ptr, ptr %7, align 8
  %105 = ptrtoint ptr %104 to i64
  %106 = icmp eq i64 %105, ptrtoint (ptr @nil_typ to i64)
  %107 = icmp eq i64 %105, 0
  %108 = or i1 %106, %107
  %109 = icmp eq i1 %108, false
  store i1 %109, ptr %8, align 1
  %110 = load i1, ptr %8, align 1
  store i1 %110, ptr %.reg2mem13, align 1
  %.reload17 = load i1, ptr %.reg2mem13, align 1
  %111 = select i1 %.reload17, ptr %14, ptr %17
  store ptr %111, ptr %.reg2mem9, align 8
  %.reload16 = load i1, ptr %.reg2mem13, align 1
  br i1 %.reload16, label %112, label %135

112:                                              ; preds = %81
  %113 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  store ptr %113, ptr %.reg2mem6, align 8
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %114 = load ptr, ptr %.reload8, align 8
  store ptr %114, ptr %10, align 8
  %115 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  store ptr %115, ptr %.reg2mem3, align 8
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %116 = load i160, ptr %.reload5, align 4
  store i160 %116, ptr %9, align 4
  %117 = load ptr, ptr %10, align 8
  store ptr %117, ptr %12, align 8
  %118 = load i160, ptr %9, align 4
  store i160 %118, ptr %11, align 4
  %119 = load ptr, ptr %12, align 8
  %120 = insertvalue { ptr, i160 } undef, ptr %119, 0
  %121 = load i160, ptr %11, align 4
  %122 = insertvalue { ptr, i160 } %120, i160 %121, 1
  %123 = load ptr, ptr %32, align 8
  %124 = call i1 %123({ ptr, i160 } %122)
  store i1 %124, ptr %13, align 1
  %125 = load i1, ptr %13, align 1
  %126 = xor i1 %125, true
  %127 = zext i1 %126 to i32
  store i32 %127, ptr %.reg2mem1, align 4
  br i1 %125, label %128, label %129

128:                                              ; preds = %112
  br label %134

129:                                              ; preds = %112
  %130 = load ptr, ptr %10, align 8
  store ptr %130, ptr %16, align 8
  %131 = load i160, ptr %9, align 4
  store i160 %131, ptr %15, align 4
  %132 = load ptr, ptr %16, align 8
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  store ptr %132, ptr %.reload7, align 8
  %133 = load i160, ptr %15, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  store i160 %133, ptr %.reload4, align 4
  br label %134

134:                                              ; preds = %129, %128
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem26, align 4
  br label %136

135:                                              ; preds = %81
  store i32 0, ptr %.reg2mem26, align 4
  br label %136

136:                                              ; preds = %135, %134
  %.reload27 = load i32, ptr %.reg2mem26, align 4
  store i32 %.reload27, ptr %.reg2mem, align 4
  br label %137

137:                                              ; preds = %136
  %.reload = load i32, ptr %.reg2mem, align 4
  %138 = trunc i32 %.reload to i1
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %.reload15 = load i1, ptr %.reg2mem13, align 1
  br i1 %138, label %139, label %140

139:                                              ; preds = %137
  br label %81

140:                                              ; preds = %137
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %.reload14 = load i1, ptr %.reg2mem13, align 1
  store i1 %.reload14, ptr %.reload11, align 1
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %141 = load i1, ptr %.reload10, align 1
  ret i1 %141
}

define { ptr, ptr, ptr, i32 } @Iterable_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca ptr, align 8
  store { ptr } %3, ptr %19, align 8
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 184, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = call ptr @typegetter_wrapper(ptr %25, ptr %20)
  %27 = load ptr, ptr %2, align 8
  %28 = getelementptr [1 x ptr], ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = alloca [3 x ptr], align 8
  store ptr @MapIterable, ptr %30, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  store ptr %26, ptr %31, align 8
  %32 = getelementptr ptr, ptr %30, i32 2
  store ptr %29, ptr %32, align 8
  %33 = load ptr, ptr %30, align 8
  %34 = getelementptr ptr, ptr %33, i32 6
  %35 = load ptr, ptr %34, align 8
  %36 = call { i64, i64 } @size_wrapper(ptr %35, ptr %30)
  %37 = extractvalue { i64, i64 } %36, 0
  %38 = call ptr @bump_malloc(i64 %37)
  store ptr %26, ptr %38, align 8
  %39 = getelementptr ptr, ptr %38, i32 1
  store ptr %29, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  store ptr @MapIterable, ptr %44, align 8
  store ptr %38, ptr %43, align 8
  store i32 10, ptr %41, align 4
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %8, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %49 = load ptr, ptr %11, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %51 = load ptr, ptr %14, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %53 = load i32, ptr %17, align 4
  store i32 %53, ptr %52, align 4
  call void @set_offset(ptr %45, ptr @Iterable)
  %54 = load ptr, ptr %46, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = load ptr, ptr %48, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 1
  %58 = load ptr, ptr %50, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %58, 2
  %60 = load i32, ptr %52, align 4
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %60, 3
  %62 = load ptr, ptr %19, align 8
  %63 = insertvalue { ptr } undef, ptr %62, 0
  %64 = load ptr, ptr %44, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = load ptr, ptr %43, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 1
  %68 = load ptr, ptr %42, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 2
  %70 = load i32, ptr %41, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %73 = getelementptr [3 x ptr], ptr %72, i32 0, i32 1
  store ptr %26, ptr %73, align 8
  %74 = getelementptr [3 x ptr], ptr %72, i32 0, i32 2
  store ptr null, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  store ptr @Iterable, ptr %72, align 8
  %76 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %77 = getelementptr [4 x ptr], ptr %76, i32 0, i32 2
  store ptr %26, ptr %77, align 8
  %78 = getelementptr [4 x ptr], ptr %76, i32 0, i32 1
  store ptr %29, ptr %78, align 8
  %79 = getelementptr [4 x ptr], ptr %76, i32 0, i32 3
  store ptr null, ptr %79, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 24, ptr %76)
  store ptr @function_typ, ptr %76, align 8
  %81 = alloca [2 x ptr], align 8
  %82 = getelementptr [2 x ptr], ptr %81, i32 0, i32 0
  store ptr %72, ptr %82, align 8
  %83 = getelementptr [2 x ptr], ptr %81, i32 0, i32 1
  store ptr %76, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 4, ptr %81)
  %85 = call ptr @llvm.invariant.start.p0(i64 408, ptr %64)
  %86 = getelementptr ptr, ptr %64, i32 %70
  %87 = getelementptr ptr, ptr %86, i32 4
  %88 = load ptr, ptr %87, align 8
  %89 = alloca { ptr, ptr }, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 0
  store ptr %54, ptr %90, align 8
  %91 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  store ptr @function_typ, ptr %91, align 8
  %92 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %71, ptr %89)
  call void %92({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %81, { ptr, ptr, ptr, i32 } %61, { ptr } %63) #17
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 0
  %95 = load ptr, ptr %44, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 1
  %97 = load ptr, ptr %43, align 8
  store ptr %97, ptr %96, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 2
  %99 = load ptr, ptr %42, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 3
  %101 = load i32, ptr %41, align 4
  store i32 %101, ptr %100, align 4
  call void @set_offset(ptr %93, ptr @MapIterable)
  %102 = load ptr, ptr %94, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %102, 0
  %104 = load ptr, ptr %96, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %104, 1
  %106 = load ptr, ptr %98, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %105, ptr %106, 2
  %108 = load i32, ptr %100, align 4
  %109 = insertvalue { ptr, ptr, ptr, i32 } %107, i32 %108, 3
  ret { ptr, ptr, ptr, i32 } %109
}

define { ptr, ptr, ptr, i32 } @Iterable_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca ptr, align 8
  store { ptr } %3, ptr %19, align 8
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 184, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = call ptr @typegetter_wrapper(ptr %25, ptr %20)
  %27 = alloca [2 x ptr], align 8
  store ptr @FilterIterable, ptr %27, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  store ptr %26, ptr %28, align 8
  %29 = load ptr, ptr %27, align 8
  %30 = getelementptr ptr, ptr %29, i32 6
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %27)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  store ptr %26, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 8, ptr %34)
  %36 = alloca i32, align 4
  %37 = alloca ptr, align 8
  %38 = alloca ptr, align 8
  %39 = alloca ptr, align 8
  store ptr @FilterIterable, ptr %39, align 8
  store ptr %34, ptr %38, align 8
  store i32 10, ptr %36, align 4
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %8, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %44 = load ptr, ptr %11, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %46 = load ptr, ptr %14, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %48 = load i32, ptr %17, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %40, ptr @Iterable)
  %49 = load ptr, ptr %41, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 1
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 2
  %55 = load i32, ptr %47, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %55, 3
  %57 = load ptr, ptr %19, align 8
  %58 = insertvalue { ptr } undef, ptr %57, 0
  %59 = load ptr, ptr %39, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = load ptr, ptr %38, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 1
  %63 = load ptr, ptr %37, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %63, 2
  %65 = load i32, ptr %36, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %65, 3
  %67 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %68 = getelementptr [3 x ptr], ptr %67, i32 0, i32 1
  store ptr %26, ptr %68, align 8
  %69 = getelementptr [3 x ptr], ptr %67, i32 0, i32 2
  store ptr null, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 16, ptr %67)
  store ptr @Iterable, ptr %67, align 8
  %71 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %72 = getelementptr [4 x ptr], ptr %71, i32 0, i32 2
  store ptr %26, ptr %72, align 8
  %73 = getelementptr [4 x ptr], ptr %71, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %73, align 8
  %74 = getelementptr [4 x ptr], ptr %71, i32 0, i32 3
  store ptr null, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 24, ptr %71)
  store ptr @function_typ, ptr %71, align 8
  %76 = alloca [2 x ptr], align 8
  %77 = getelementptr [2 x ptr], ptr %76, i32 0, i32 0
  store ptr %67, ptr %77, align 8
  %78 = getelementptr [2 x ptr], ptr %76, i32 0, i32 1
  store ptr %71, ptr %78, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 4, ptr %76)
  %80 = call ptr @llvm.invariant.start.p0(i64 400, ptr %59)
  %81 = getelementptr ptr, ptr %59, i32 %65
  %82 = getelementptr ptr, ptr %81, i32 3
  %83 = load ptr, ptr %82, align 8
  %84 = alloca { ptr, ptr }, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 0
  store ptr %49, ptr %85, align 8
  %86 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 1
  store ptr @function_typ, ptr %86, align 8
  %87 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %66, ptr %84)
  call void %87({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %76, { ptr, ptr, ptr, i32 } %56, { ptr } %58) #17
  %88 = alloca { ptr, ptr, ptr, i32 }, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  %90 = load ptr, ptr %39, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  %92 = load ptr, ptr %38, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  %94 = load ptr, ptr %37, align 8
  store ptr %94, ptr %93, align 8
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  %96 = load i32, ptr %36, align 4
  store i32 %96, ptr %95, align 4
  call void @set_offset(ptr %88, ptr @FilterIterable)
  %97 = load ptr, ptr %89, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = load ptr, ptr %91, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %101 = load ptr, ptr %93, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %103 = load i32, ptr %95, align 4
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  ret { ptr, ptr, ptr, i32 } %104
}

define { ptr, ptr, ptr, i32 } @Iterable_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca [2 x ptr], align 8
  store ptr @ChainIterable, ptr %40, align 8
  %41 = getelementptr ptr, ptr %40, i32 1
  store ptr %39, ptr %41, align 8
  %42 = load ptr, ptr %40, align 8
  %43 = getelementptr ptr, ptr %42, i32 6
  %44 = load ptr, ptr %43, align 8
  %45 = call { i64, i64 } @size_wrapper(ptr %44, ptr %40)
  %46 = extractvalue { i64, i64 } %45, 0
  %47 = call ptr @bump_malloc(i64 %46)
  store ptr %39, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 8, ptr %47)
  %49 = alloca i32, align 4
  %50 = alloca ptr, align 8
  %51 = alloca ptr, align 8
  %52 = alloca ptr, align 8
  store ptr @ChainIterable, ptr %52, align 8
  store ptr %47, ptr %51, align 8
  store i32 10, ptr %49, align 4
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %55 = load ptr, ptr %8, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %57 = load ptr, ptr %11, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %59 = load ptr, ptr %14, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %61 = load i32, ptr %17, align 4
  store i32 %61, ptr %60, align 4
  call void @set_offset(ptr %53, ptr @Iterable)
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %60, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %22, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %74 = load ptr, ptr %25, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %76 = load ptr, ptr %28, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %78 = load i32, ptr %31, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %70, ptr @Iterable)
  %79 = load ptr, ptr %71, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %73, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %75, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %77, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = load ptr, ptr %52, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %51, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %50, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %49, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %96 = getelementptr [3 x ptr], ptr %95, i32 0, i32 1
  store ptr %39, ptr %96, align 8
  %97 = getelementptr [3 x ptr], ptr %95, i32 0, i32 2
  store ptr null, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  store ptr @Iterable, ptr %95, align 8
  %99 = alloca [2 x ptr], align 8
  %100 = getelementptr [2 x ptr], ptr %99, i32 0, i32 0
  store ptr %95, ptr %100, align 8
  %101 = getelementptr [2 x ptr], ptr %99, i32 0, i32 1
  store ptr %95, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 4, ptr %99)
  %103 = call ptr @llvm.invariant.start.p0(i64 400, ptr %87)
  %104 = getelementptr ptr, ptr %87, i32 %93
  %105 = getelementptr ptr, ptr %104, i32 3
  %106 = load ptr, ptr %105, align 8
  %107 = alloca { ptr, ptr }, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  store ptr %62, ptr %108, align 8
  %109 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  store ptr %79, ptr %109, align 8
  %110 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %94, ptr %107)
  call void %110({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %99, { ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %86) #17
  %111 = alloca { ptr, ptr, ptr, i32 }, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %52, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 1
  %115 = load ptr, ptr %51, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 2
  %117 = load ptr, ptr %50, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 3
  %119 = load i32, ptr %49, align 4
  store i32 %119, ptr %118, align 4
  call void @set_offset(ptr %111, ptr @ChainIterable)
  %120 = load ptr, ptr %112, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = load ptr, ptr %114, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %122, 1
  %124 = load ptr, ptr %116, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 2
  %126 = load i32, ptr %118, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %126, 3
  ret { ptr, ptr, ptr, i32 } %127
}

define { ptr, ptr, ptr, i32 } @Iterable_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterable, ptr %40, align 8
  %41 = getelementptr ptr, ptr %40, i32 1
  store ptr %39, ptr %41, align 8
  %42 = load ptr, ptr %40, align 8
  %43 = getelementptr ptr, ptr %42, i32 6
  %44 = load ptr, ptr %43, align 8
  %45 = call { i64, i64 } @size_wrapper(ptr %44, ptr %40)
  %46 = extractvalue { i64, i64 } %45, 0
  %47 = call ptr @bump_malloc(i64 %46)
  store ptr %39, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 8, ptr %47)
  %49 = alloca i32, align 4
  %50 = alloca ptr, align 8
  %51 = alloca ptr, align 8
  %52 = alloca ptr, align 8
  store ptr @InterleaveIterable, ptr %52, align 8
  store ptr %47, ptr %51, align 8
  store i32 10, ptr %49, align 4
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %55 = load ptr, ptr %8, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %57 = load ptr, ptr %11, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %59 = load ptr, ptr %14, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %61 = load i32, ptr %17, align 4
  store i32 %61, ptr %60, align 4
  call void @set_offset(ptr %53, ptr @Iterable)
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %60, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %22, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %74 = load ptr, ptr %25, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %76 = load ptr, ptr %28, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %78 = load i32, ptr %31, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %70, ptr @Iterable)
  %79 = load ptr, ptr %71, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %73, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %75, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %77, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = load ptr, ptr %52, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %51, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %50, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %49, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %96 = getelementptr [3 x ptr], ptr %95, i32 0, i32 1
  store ptr %39, ptr %96, align 8
  %97 = getelementptr [3 x ptr], ptr %95, i32 0, i32 2
  store ptr null, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  store ptr @Iterable, ptr %95, align 8
  %99 = alloca [2 x ptr], align 8
  %100 = getelementptr [2 x ptr], ptr %99, i32 0, i32 0
  store ptr %95, ptr %100, align 8
  %101 = getelementptr [2 x ptr], ptr %99, i32 0, i32 1
  store ptr %95, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 4, ptr %99)
  %103 = call ptr @llvm.invariant.start.p0(i64 400, ptr %87)
  %104 = getelementptr ptr, ptr %87, i32 %93
  %105 = getelementptr ptr, ptr %104, i32 3
  %106 = load ptr, ptr %105, align 8
  %107 = alloca { ptr, ptr }, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  store ptr %62, ptr %108, align 8
  %109 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  store ptr %79, ptr %109, align 8
  %110 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %94, ptr %107)
  call void %110({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %99, { ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %86) #17
  %111 = alloca { ptr, ptr, ptr, i32 }, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %52, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 1
  %115 = load ptr, ptr %51, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 2
  %117 = load ptr, ptr %50, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 3
  %119 = load i32, ptr %49, align 4
  store i32 %119, ptr %118, align 4
  call void @set_offset(ptr %111, ptr @InterleaveIterable)
  %120 = load ptr, ptr %112, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = load ptr, ptr %114, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %122, 1
  %124 = load ptr, ptr %116, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 2
  %126 = load i32, ptr %118, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %126, 3
  ret { ptr, ptr, ptr, i32 } %127
}

define { ptr, ptr, ptr, i32 } @Iterable_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %40, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %40, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 184, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = call ptr @typegetter_wrapper(ptr %48, ptr %42)
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %50, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %50, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 184, ptr %53)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = getelementptr ptr, ptr %53, i32 %56
  %58 = load ptr, ptr %57, align 8
  %59 = call ptr @typegetter_wrapper(ptr %58, ptr %52)
  %60 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %61 = getelementptr [4 x ptr], ptr %60, i32 0, i32 2
  store ptr %59, ptr %61, align 8
  %62 = getelementptr [4 x ptr], ptr %60, i32 0, i32 1
  store ptr %39, ptr %62, align 8
  %63 = getelementptr [4 x ptr], ptr %60, i32 0, i32 3
  store ptr null, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %60)
  store ptr @Pair, ptr %60, align 8
  %65 = alloca [4 x ptr], align 8
  store ptr @ZipIterable, ptr %65, align 8
  %66 = getelementptr ptr, ptr %65, i32 1
  store ptr %39, ptr %66, align 8
  %67 = getelementptr ptr, ptr %65, i32 2
  store ptr %49, ptr %67, align 8
  %68 = getelementptr ptr, ptr %65, i32 3
  store ptr %60, ptr %68, align 8
  %69 = load ptr, ptr %65, align 8
  %70 = getelementptr ptr, ptr %69, i32 6
  %71 = load ptr, ptr %70, align 8
  %72 = call { i64, i64 } @size_wrapper(ptr %71, ptr %65)
  %73 = extractvalue { i64, i64 } %72, 0
  %74 = call ptr @bump_malloc(i64 %73)
  store ptr %39, ptr %74, align 8
  %75 = getelementptr ptr, ptr %74, i32 1
  store ptr %49, ptr %75, align 8
  %76 = getelementptr ptr, ptr %74, i32 2
  store ptr %60, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %78 = alloca i32, align 4
  %79 = alloca ptr, align 8
  %80 = alloca ptr, align 8
  %81 = alloca ptr, align 8
  store ptr @ZipIterable, ptr %81, align 8
  store ptr %74, ptr %80, align 8
  store i32 10, ptr %78, align 4
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %8, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %86 = load ptr, ptr %11, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %88 = load ptr, ptr %14, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %90 = load i32, ptr %17, align 4
  store i32 %90, ptr %89, align 4
  call void @set_offset(ptr %82, ptr @Iterable)
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %85, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %87, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %89, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  %99 = alloca { ptr, ptr, ptr, i32 }, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %22, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %103 = load ptr, ptr %25, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %105 = load ptr, ptr %28, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %107 = load i32, ptr %31, align 4
  store i32 %107, ptr %106, align 4
  call void @set_offset(ptr %99, ptr @Iterable)
  %108 = load ptr, ptr %100, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %102, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %104, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %106, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = load ptr, ptr %81, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = load ptr, ptr %80, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %118, 1
  %120 = load ptr, ptr %79, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %120, 2
  %122 = load i32, ptr %78, align 4
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 %122, 3
  %124 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %125 = getelementptr [3 x ptr], ptr %124, i32 0, i32 1
  store ptr %39, ptr %125, align 8
  %126 = getelementptr [3 x ptr], ptr %124, i32 0, i32 2
  store ptr null, ptr %126, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 16, ptr %124)
  store ptr @Iterable, ptr %124, align 8
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %128, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = load ptr, ptr %128, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 184, ptr %131)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = getelementptr ptr, ptr %131, i32 %134
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @typegetter_wrapper(ptr %136, ptr %130)
  %138 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %139 = getelementptr [3 x ptr], ptr %138, i32 0, i32 1
  store ptr %137, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %138, i32 0, i32 2
  store ptr null, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %138)
  store ptr @Iterable, ptr %138, align 8
  %142 = alloca [2 x ptr], align 8
  %143 = getelementptr [2 x ptr], ptr %142, i32 0, i32 0
  store ptr %124, ptr %143, align 8
  %144 = getelementptr [2 x ptr], ptr %142, i32 0, i32 1
  store ptr %138, ptr %144, align 8
  %145 = call ptr @llvm.invariant.start.p0(i64 4, ptr %142)
  %146 = call ptr @llvm.invariant.start.p0(i64 416, ptr %116)
  %147 = getelementptr ptr, ptr %116, i32 %122
  %148 = getelementptr ptr, ptr %147, i32 5
  %149 = load ptr, ptr %148, align 8
  %150 = alloca { ptr, ptr }, align 8
  %151 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 0
  store ptr %91, ptr %151, align 8
  %152 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 1
  store ptr %108, ptr %152, align 8
  %153 = call ptr @behavior_wrapper(ptr %149, { ptr, ptr, ptr, i32 } %123, ptr %150)
  call void %153({ ptr, ptr, ptr, i32 } %123, { ptr, ptr, ptr, i32 } %123, ptr %142, { ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %115) #17
  %154 = alloca { ptr, ptr, ptr, i32 }, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  %156 = load ptr, ptr %81, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  %158 = load ptr, ptr %80, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  %160 = load ptr, ptr %79, align 8
  store ptr %160, ptr %159, align 8
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  %162 = load i32, ptr %78, align 4
  store i32 %162, ptr %161, align 4
  call void @set_offset(ptr %154, ptr @ZipIterable)
  %163 = load ptr, ptr %155, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %163, 0
  %165 = load ptr, ptr %157, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %165, 1
  %167 = load ptr, ptr %159, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %167, 2
  %169 = load i32, ptr %161, align 4
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, i32 %169, 3
  ret { ptr, ptr, ptr, i32 } %170
}

define { ptr, ptr, ptr, i32 } @Iterable_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %40, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %40, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 184, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = call ptr @typegetter_wrapper(ptr %48, ptr %42)
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %50, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %50, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 184, ptr %53)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = getelementptr ptr, ptr %53, i32 %56
  %58 = load ptr, ptr %57, align 8
  %59 = call ptr @typegetter_wrapper(ptr %58, ptr %52)
  %60 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %61 = getelementptr [4 x ptr], ptr %60, i32 0, i32 2
  store ptr %59, ptr %61, align 8
  %62 = getelementptr [4 x ptr], ptr %60, i32 0, i32 1
  store ptr %39, ptr %62, align 8
  %63 = getelementptr [4 x ptr], ptr %60, i32 0, i32 3
  store ptr null, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %60)
  store ptr @Pair, ptr %60, align 8
  %65 = alloca [4 x ptr], align 8
  store ptr @ProductIterable, ptr %65, align 8
  %66 = getelementptr ptr, ptr %65, i32 1
  store ptr %39, ptr %66, align 8
  %67 = getelementptr ptr, ptr %65, i32 2
  store ptr %49, ptr %67, align 8
  %68 = getelementptr ptr, ptr %65, i32 3
  store ptr %60, ptr %68, align 8
  %69 = load ptr, ptr %65, align 8
  %70 = getelementptr ptr, ptr %69, i32 6
  %71 = load ptr, ptr %70, align 8
  %72 = call { i64, i64 } @size_wrapper(ptr %71, ptr %65)
  %73 = extractvalue { i64, i64 } %72, 0
  %74 = call ptr @bump_malloc(i64 %73)
  store ptr %39, ptr %74, align 8
  %75 = getelementptr ptr, ptr %74, i32 1
  store ptr %49, ptr %75, align 8
  %76 = getelementptr ptr, ptr %74, i32 2
  store ptr %60, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %78 = alloca i32, align 4
  %79 = alloca ptr, align 8
  %80 = alloca ptr, align 8
  %81 = alloca ptr, align 8
  store ptr @ProductIterable, ptr %81, align 8
  store ptr %74, ptr %80, align 8
  store i32 10, ptr %78, align 4
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %8, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %86 = load ptr, ptr %11, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %88 = load ptr, ptr %14, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %90 = load i32, ptr %17, align 4
  store i32 %90, ptr %89, align 4
  call void @set_offset(ptr %82, ptr @Iterable)
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %85, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %87, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %89, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  %99 = alloca { ptr, ptr, ptr, i32 }, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %22, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %103 = load ptr, ptr %25, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %105 = load ptr, ptr %28, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %107 = load i32, ptr %31, align 4
  store i32 %107, ptr %106, align 4
  call void @set_offset(ptr %99, ptr @Iterable)
  %108 = load ptr, ptr %100, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %102, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %104, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %106, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = load ptr, ptr %81, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = load ptr, ptr %80, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %118, 1
  %120 = load ptr, ptr %79, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %120, 2
  %122 = load i32, ptr %78, align 4
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 %122, 3
  %124 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %125 = getelementptr [3 x ptr], ptr %124, i32 0, i32 1
  store ptr %39, ptr %125, align 8
  %126 = getelementptr [3 x ptr], ptr %124, i32 0, i32 2
  store ptr null, ptr %126, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 16, ptr %124)
  store ptr @Iterable, ptr %124, align 8
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %128, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = load ptr, ptr %128, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 184, ptr %131)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = getelementptr ptr, ptr %131, i32 %134
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @typegetter_wrapper(ptr %136, ptr %130)
  %138 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %139 = getelementptr [3 x ptr], ptr %138, i32 0, i32 1
  store ptr %137, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %138, i32 0, i32 2
  store ptr null, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %138)
  store ptr @Iterable, ptr %138, align 8
  %142 = alloca [2 x ptr], align 8
  %143 = getelementptr [2 x ptr], ptr %142, i32 0, i32 0
  store ptr %124, ptr %143, align 8
  %144 = getelementptr [2 x ptr], ptr %142, i32 0, i32 1
  store ptr %138, ptr %144, align 8
  %145 = call ptr @llvm.invariant.start.p0(i64 4, ptr %142)
  %146 = call ptr @llvm.invariant.start.p0(i64 416, ptr %116)
  %147 = getelementptr ptr, ptr %116, i32 %122
  %148 = getelementptr ptr, ptr %147, i32 5
  %149 = load ptr, ptr %148, align 8
  %150 = alloca { ptr, ptr }, align 8
  %151 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 0
  store ptr %91, ptr %151, align 8
  %152 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 1
  store ptr %108, ptr %152, align 8
  %153 = call ptr @behavior_wrapper(ptr %149, { ptr, ptr, ptr, i32 } %123, ptr %150)
  call void %153({ ptr, ptr, ptr, i32 } %123, { ptr, ptr, ptr, i32 } %123, ptr %142, { ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %115) #17
  %154 = alloca { ptr, ptr, ptr, i32 }, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  %156 = load ptr, ptr %81, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  %158 = load ptr, ptr %80, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  %160 = load ptr, ptr %79, align 8
  store ptr %160, ptr %159, align 8
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  %162 = load i32, ptr %78, align 4
  store i32 %162, ptr %161, align 4
  call void @set_offset(ptr %154, ptr @ProductIterable)
  %163 = load ptr, ptr %155, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %163, 0
  %165 = load ptr, ptr %157, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %165, 1
  %167 = load ptr, ptr %159, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %167, 2
  %169 = load i32, ptr %161, align 4
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, i32 %169, 3
  ret { ptr, ptr, ptr, i32 } %170
}

define { i64, i64 } @_data_size_ProductIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ProductIterable_field_ProductIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ProductIterable_field_ProductIterable_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterable_field_ProductIterable_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 17, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [52 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ProductIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 18, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [52 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ProductIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Pair, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Pair to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 20, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [52 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @ProductIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ProductIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ProductIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ProductIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 28, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @ProductIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ProductIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 416, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 416, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 4
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ProductIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 416, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 416, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 4
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #16
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  call void @assume_offset(ptr %74, ptr @Iterable)
  %75 = load ptr, ptr %10, align 8
  %76 = load ptr, ptr %5, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 416, ptr %76)
  %78 = load i32, ptr %16, align 4
  %79 = getelementptr ptr, ptr %76, i32 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %75)
  %82 = load ptr, ptr %10, align 8
  %83 = load ptr, ptr %5, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 416, ptr %83)
  %85 = load i32, ptr %16, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr @typegetter_wrapper(ptr %88, ptr %82)
  %90 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %91 = getelementptr [4 x ptr], ptr %90, i32 0, i32 2
  store ptr %89, ptr %91, align 8
  %92 = getelementptr [4 x ptr], ptr %90, i32 0, i32 1
  store ptr %81, ptr %92, align 8
  %93 = getelementptr [4 x ptr], ptr %90, i32 0, i32 3
  store ptr null, ptr %93, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 24, ptr %90)
  store ptr @Pair, ptr %90, align 8
  %95 = alloca [4 x ptr], align 8
  store ptr @ProductIterator, ptr %95, align 8
  %96 = getelementptr ptr, ptr %95, i32 1
  store ptr %81, ptr %96, align 8
  %97 = getelementptr ptr, ptr %95, i32 2
  store ptr %89, ptr %97, align 8
  %98 = getelementptr ptr, ptr %95, i32 3
  store ptr %90, ptr %98, align 8
  %99 = load ptr, ptr %95, align 8
  %100 = getelementptr ptr, ptr %99, i32 6
  %101 = load ptr, ptr %100, align 8
  %102 = call { i64, i64 } @size_wrapper(ptr %101, ptr %95)
  %103 = extractvalue { i64, i64 } %102, 0
  %104 = call ptr @bump_malloc(i64 %103)
  store ptr %81, ptr %104, align 8
  %105 = getelementptr ptr, ptr %104, i32 1
  store ptr %89, ptr %105, align 8
  %106 = getelementptr ptr, ptr %104, i32 2
  store ptr %90, ptr %106, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 24, ptr %104)
  %108 = alloca i32, align 4
  %109 = alloca ptr, align 8
  %110 = alloca ptr, align 8
  %111 = alloca ptr, align 8
  store ptr @ProductIterator, ptr %111, align 8
  store ptr %104, ptr %110, align 8
  store i32 10, ptr %108, align 4
  %112 = load ptr, ptr %10, align 8
  %113 = load ptr, ptr %5, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 416, ptr %113)
  %115 = load i32, ptr %16, align 4
  %116 = getelementptr ptr, ptr %113, i32 %115
  %117 = getelementptr ptr, ptr %116, i32 3
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = call { ptr, ptr, ptr, i32 } %120(ptr %112) #16
  %122 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %121, ptr %122, align 8
  call void @assume_offset(ptr %122, ptr @Iterable)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %124, 0
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 1
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %127, 1
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 2
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %130, 2
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 3
  %133 = load i32, ptr %132, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, i32 %133, 3
  %135 = alloca [0 x ptr], align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 0, ptr %135)
  %137 = call ptr @llvm.invariant.start.p0(i64 184, ptr %124)
  %138 = getelementptr ptr, ptr %124, i32 %133
  %139 = getelementptr ptr, ptr %138, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = alloca {}, align 8
  %142 = call ptr @behavior_wrapper(ptr %140, { ptr, ptr, ptr, i32 } %134, ptr %141)
  %143 = call { ptr, ptr, ptr, i32 } %142({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr %135) #17
  %144 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %143, ptr %144, align 8
  %145 = alloca { ptr, ptr, ptr, i32 }, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %148 = load ptr, ptr %146, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %151 = load ptr, ptr %149, align 8
  store ptr %151, ptr %150, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %154 = load ptr, ptr %152, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %157 = load i32, ptr %155, align 4
  store i32 %157, ptr %156, align 4
  call void @set_offset(ptr %145, ptr @Iterator)
  %158 = load ptr, ptr %10, align 8
  %159 = load ptr, ptr %5, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 416, ptr %159)
  %161 = load i32, ptr %16, align 4
  %162 = getelementptr ptr, ptr %159, i32 %161
  %163 = getelementptr ptr, ptr %162, i32 4
  %164 = load ptr, ptr %163, align 8
  %165 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  %167 = call { ptr, ptr, ptr, i32 } %166(ptr %158) #16
  %168 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %167, ptr %168, align 8
  call void @assume_offset(ptr %168, ptr @Iterable)
  %169 = alloca { ptr, ptr, ptr, i32 }, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 0
  %171 = load ptr, ptr %147, align 8
  store ptr %171, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 1
  %173 = load ptr, ptr %150, align 8
  store ptr %173, ptr %172, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 2
  %175 = load ptr, ptr %153, align 8
  store ptr %175, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 3
  %177 = load i32, ptr %156, align 4
  store i32 %177, ptr %176, align 4
  call void @set_offset(ptr %169, ptr @Iterator)
  %178 = load ptr, ptr %170, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %178, 0
  %180 = load ptr, ptr %172, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %180, 1
  %182 = load ptr, ptr %174, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %182, 2
  %184 = load i32, ptr %176, align 4
  %185 = insertvalue { ptr, ptr, ptr, i32 } %183, i32 %184, 3
  %186 = alloca { ptr, ptr, ptr, i32 }, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 0
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %189 = load ptr, ptr %187, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 1
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %192 = load ptr, ptr %190, align 8
  store ptr %192, ptr %191, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 2
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %195 = load ptr, ptr %193, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 3
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %198 = load i32, ptr %196, align 4
  store i32 %198, ptr %197, align 4
  call void @set_offset(ptr %186, ptr @Iterable)
  %199 = load ptr, ptr %188, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %199, 0
  %201 = load ptr, ptr %191, align 8
  %202 = insertvalue { ptr, ptr, ptr, i32 } %200, ptr %201, 1
  %203 = load ptr, ptr %194, align 8
  %204 = insertvalue { ptr, ptr, ptr, i32 } %202, ptr %203, 2
  %205 = load i32, ptr %197, align 4
  %206 = insertvalue { ptr, ptr, ptr, i32 } %204, i32 %205, 3
  %207 = load ptr, ptr %111, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %207, 0
  %209 = load ptr, ptr %110, align 8
  %210 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %209, 1
  %211 = load ptr, ptr %109, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %211, 2
  %213 = load i32, ptr %108, align 4
  %214 = insertvalue { ptr, ptr, ptr, i32 } %212, i32 %213, 3
  %215 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %216 = getelementptr [3 x ptr], ptr %215, i32 0, i32 1
  store ptr %81, ptr %216, align 8
  %217 = getelementptr [3 x ptr], ptr %215, i32 0, i32 2
  store ptr null, ptr %217, align 8
  %218 = call ptr @llvm.invariant.start.p0(i64 16, ptr %215)
  store ptr @Iterator, ptr %215, align 8
  %219 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %220 = getelementptr [3 x ptr], ptr %219, i32 0, i32 1
  store ptr %89, ptr %220, align 8
  %221 = getelementptr [3 x ptr], ptr %219, i32 0, i32 2
  store ptr null, ptr %221, align 8
  %222 = call ptr @llvm.invariant.start.p0(i64 16, ptr %219)
  store ptr @Iterable, ptr %219, align 8
  %223 = alloca [2 x ptr], align 8
  %224 = getelementptr [2 x ptr], ptr %223, i32 0, i32 0
  store ptr %215, ptr %224, align 8
  %225 = getelementptr [2 x ptr], ptr %223, i32 0, i32 1
  store ptr %219, ptr %225, align 8
  %226 = call ptr @llvm.invariant.start.p0(i64 4, ptr %223)
  %227 = call ptr @llvm.invariant.start.p0(i64 112, ptr %207)
  %228 = getelementptr ptr, ptr %207, i32 %213
  %229 = getelementptr ptr, ptr %228, i32 7
  %230 = load ptr, ptr %229, align 8
  %231 = alloca { ptr, ptr }, align 8
  %232 = getelementptr { ptr, ptr }, ptr %231, i32 0, i32 0
  store ptr %178, ptr %232, align 8
  %233 = getelementptr { ptr, ptr }, ptr %231, i32 0, i32 1
  store ptr %199, ptr %233, align 8
  %234 = call ptr @behavior_wrapper(ptr %230, { ptr, ptr, ptr, i32 } %214, ptr %231)
  call void %234({ ptr, ptr, ptr, i32 } %214, { ptr, ptr, ptr, i32 } %214, ptr %223, { ptr, ptr, ptr, i32 } %185, { ptr, ptr, ptr, i32 } %206) #17
  %235 = alloca { ptr, ptr, ptr, i32 }, align 8
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 0
  %237 = load ptr, ptr %111, align 8
  store ptr %237, ptr %236, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 1
  %239 = load ptr, ptr %110, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 2
  %241 = load ptr, ptr %109, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 3
  %243 = load i32, ptr %108, align 4
  store i32 %243, ptr %242, align 4
  call void @set_offset(ptr %235, ptr @Iterator)
  %244 = load ptr, ptr %236, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %244, 0
  %246 = load ptr, ptr %238, align 8
  %247 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %246, 1
  %248 = load ptr, ptr %240, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } %247, ptr %248, 2
  %250 = load i32, ptr %242, align 4
  %251 = insertvalue { ptr, ptr, ptr, i32 } %249, i32 %250, 3
  ret { ptr, ptr, ptr, i32 } %251
}

define { i64, i64 } @_data_size_ProductIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %29
  %37 = select i1 %36, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %29
  %38 = urem i64 %35, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %41
  %43 = add i64 %35, %42
  %44 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %37
  %45 = select i1 %44, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 %37
  %46 = urem i64 %43, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %47 = icmp eq i64 %46, 0
  %48 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %46
  %49 = select i1 %47, i64 0, i64 %48
  %50 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %49
  %51 = add i64 %43, %50
  %52 = urem i64 %51, %45
  %53 = icmp eq i64 %52, 0
  %54 = sub i64 %45, %52
  %55 = select i1 %53, i64 0, i64 %54
  %56 = add i64 %51, %55
  %57 = insertvalue { i64, i64 } undef, i64 %56, 0
  %58 = insertvalue { i64, i64 } %57, i64 %45, 1
  ret { i64, i64 } %58
}

define ptr @ProductIterator_field_ProductIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ProductIterator_field_ProductIterator_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterator_field_ProductIterator_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 9, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [14 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ProductIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 10, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [14 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ProductIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 112, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 112, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 5
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  %100 = load ptr, ptr %12, align 8
  %101 = load ptr, ptr %7, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 112, ptr %101)
  %103 = load i32, ptr %18, align 4
  %104 = getelementptr ptr, ptr %101, i32 %103
  %105 = getelementptr ptr, ptr %104, i32 5
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr { ptr, ptr }, ptr %106, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = call { ptr, ptr, ptr, i32 } %108(ptr %100) #16
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %109, ptr %110, align 8
  call void @assume_offset(ptr %110, ptr @Iterable)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  %123 = alloca [0 x ptr], align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 0, ptr %123)
  %125 = call ptr @llvm.invariant.start.p0(i64 184, ptr %112)
  %126 = getelementptr ptr, ptr %112, i32 %121
  %127 = getelementptr ptr, ptr %126, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = alloca {}, align 8
  %130 = call ptr @behavior_wrapper(ptr %128, { ptr, ptr, ptr, i32 } %122, ptr %129)
  %131 = call { ptr, ptr, ptr, i32 } %130({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr %123) #17
  %132 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %131, ptr %132, align 8
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 0
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %139 = load ptr, ptr %137, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 2
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %142 = load ptr, ptr %140, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 3
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %145 = load i32, ptr %143, align 4
  store i32 %145, ptr %144, align 4
  call void @set_offset(ptr %133, ptr @Iterator)
  %146 = alloca { ptr, ptr, ptr, i32 }, align 8
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 0
  %148 = load ptr, ptr %135, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %150 = load ptr, ptr %138, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 2
  %152 = load ptr, ptr %141, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  %154 = load i32, ptr %144, align 4
  store i32 %154, ptr %153, align 4
  call void @set_offset(ptr %146, ptr @Iterator)
  %155 = load ptr, ptr %12, align 8
  %156 = load ptr, ptr %7, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 112, ptr %156)
  %158 = load i32, ptr %18, align 4
  %159 = getelementptr ptr, ptr %156, i32 %158
  %160 = getelementptr ptr, ptr %159, i32 4
  %161 = load ptr, ptr %160, align 8
  %162 = getelementptr { ptr, ptr }, ptr %161, i32 0, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = load ptr, ptr %147, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %164, 0
  %166 = load ptr, ptr %149, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 1
  %168 = load ptr, ptr %151, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %168, 2
  %170 = load i32, ptr %153, align 4
  %171 = insertvalue { ptr, ptr, ptr, i32 } %169, i32 %170, 3
  call void %163(ptr %155, { ptr, ptr, ptr, i32 } %171) #15
  %172 = load ptr, ptr %12, align 8
  %173 = load ptr, ptr %7, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 112, ptr %173)
  %175 = load i32, ptr %18, align 4
  %176 = getelementptr ptr, ptr %173, i32 %175
  %177 = getelementptr ptr, ptr %176, i32 3
  %178 = load ptr, ptr %177, align 8
  %179 = getelementptr { ptr, ptr }, ptr %178, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = call { ptr, ptr, ptr, i32 } %180(ptr %172) #16
  %182 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %181, ptr %182, align 8
  call void @assume_offset(ptr %182, ptr @Iterator)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %184, 0
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 1
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 1
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 2
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %190, 2
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 3
  %193 = load i32, ptr %192, align 4
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, i32 %193, 3
  %195 = alloca [0 x ptr], align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 0, ptr %195)
  %197 = call ptr @llvm.invariant.start.p0(i64 24, ptr %184)
  %198 = getelementptr ptr, ptr %184, i32 %193
  %199 = getelementptr ptr, ptr %198, i32 1
  %200 = load ptr, ptr %199, align 8
  %201 = alloca {}, align 8
  %202 = call ptr @behavior_wrapper(ptr %200, { ptr, ptr, ptr, i32 } %194, ptr %201)
  %203 = call { ptr, i160 } %202({ ptr, ptr, ptr, i32 } %194, { ptr, ptr, ptr, i32 } %194, ptr %195) #17
  %204 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %203, ptr %204, align 8
  %205 = load ptr, ptr %12, align 8
  %206 = load ptr, ptr %7, align 8
  %207 = call ptr @llvm.invariant.start.p0(i64 112, ptr %206)
  %208 = load i32, ptr %18, align 4
  %209 = getelementptr ptr, ptr %206, i32 %208
  %210 = getelementptr ptr, ptr %209, i32 6
  %211 = load ptr, ptr %210, align 8
  %212 = getelementptr { ptr, ptr }, ptr %211, i32 0, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = getelementptr { ptr, i160 }, ptr %204, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr, i160 } undef, ptr %215, 0
  %217 = getelementptr { ptr, i160 }, ptr %204, i32 0, i32 1
  %218 = load i160, ptr %217, align 4
  %219 = insertvalue { ptr, i160 } %216, i160 %218, 1
  call void %213(ptr %205, { ptr, i160 } %219) #15
  ret void
}

define { ptr, i160 } @ProductIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [0 x ptr], align 8
  %9 = alloca {}, align 8
  %10 = alloca { ptr, i160 }, align 8
  %11 = alloca i1, align 1
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [3 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca [2 x ptr], align 8
  %21 = alloca { ptr, ptr }, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = alloca [0 x ptr], align 8
  %24 = alloca {}, align 8
  %25 = alloca { ptr, i160 }, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca [0 x ptr], align 8
  %28 = alloca {}, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = alloca { ptr, i160 }, align 8
  %33 = alloca [0 x i8], align 1
  %34 = alloca i160, align 8
  %35 = alloca ptr, align 8
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem37 = alloca ptr, align 8
  %.reg2mem49 = alloca { ptr, i160 }, align 8
  %.reg2mem51 = alloca ptr, align 8
  %.reg2mem53 = alloca i32, align 4
  %.reg2mem55 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %36, align 8
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  store ptr %42, ptr %.reg2mem37, align 8
  %43 = load ptr, ptr %41, align 8
  %.reload48 = load ptr, ptr %.reg2mem37, align 8
  store ptr %43, ptr %.reload48, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  store ptr %48, ptr %.reg2mem25, align 8
  %49 = load i32, ptr %47, align 4
  %.reload36 = load ptr, ptr %.reg2mem25, align 8
  store i32 %49, ptr %.reload36, align 4
  call void @set_offset(ptr %37, ptr @ProductIterator)
  %.reload47 = load ptr, ptr %.reg2mem37, align 8
  %50 = load ptr, ptr %.reload47, align 8
  %51 = load ptr, ptr %37, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 112, ptr %51)
  %.reload35 = load ptr, ptr %.reg2mem25, align 8
  %53 = load i32, ptr %.reload35, align 4
  %54 = getelementptr ptr, ptr %51, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 6
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call { ptr, i160 } %58(ptr %50) #16
  %60 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %59, ptr %60, align 8
  br label %61

61:                                               ; preds = %259, %3
  %.reload46 = load ptr, ptr %.reg2mem37, align 8
  %62 = load ptr, ptr %.reload46, align 8
  %63 = load ptr, ptr %37, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 112, ptr %63)
  %.reload34 = load ptr, ptr %.reg2mem25, align 8
  %65 = load i32, ptr %.reload34, align 4
  %66 = getelementptr ptr, ptr %63, i32 %65
  %67 = load ptr, ptr %66, align 8
  %68 = call ptr @typegetter_wrapper(ptr %67, ptr %62)
  %69 = load ptr, ptr %60, align 8
  %70 = ptrtoint ptr %69 to i64
  %71 = icmp eq i64 %70, ptrtoint (ptr @nil_typ to i64)
  %72 = icmp eq i64 %70, 0
  %73 = or i1 %71, %72
  %74 = icmp eq i1 %73, false
  store i1 %74, ptr %4, align 1
  %75 = load i1, ptr %4, align 1
  br i1 %75, label %76, label %255

76:                                               ; preds = %61
  %77 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 0
  store ptr %77, ptr %.reg2mem22, align 8
  %.reload24 = load ptr, ptr %.reg2mem22, align 8
  %78 = load ptr, ptr %.reload24, align 8
  store ptr %78, ptr %6, align 8
  %79 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 1
  store ptr %79, ptr %.reg2mem19, align 8
  %.reload21 = load ptr, ptr %.reg2mem19, align 8
  %80 = load i160, ptr %.reload21, align 4
  store i160 %80, ptr %5, align 4
  %.reload45 = load ptr, ptr %.reg2mem37, align 8
  %81 = load ptr, ptr %.reload45, align 8
  %82 = load ptr, ptr %37, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 112, ptr %82)
  %.reload33 = load ptr, ptr %.reg2mem25, align 8
  %84 = load i32, ptr %.reload33, align 4
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 4
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr { ptr, ptr }, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = call { ptr, ptr, ptr, i32 } %89(ptr %81) #16
  store { ptr, ptr, ptr, i32 } %90, ptr %7, align 8
  call void @assume_offset(ptr %7, ptr @Iterator)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %95, 1
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 2
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %101 = load i32, ptr %100, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %101, 3
  %103 = call ptr @llvm.invariant.start.p0(i64 0, ptr %8)
  %104 = call ptr @llvm.invariant.start.p0(i64 24, ptr %92)
  %105 = getelementptr ptr, ptr %92, i32 %101
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = call ptr @behavior_wrapper(ptr %107, { ptr, ptr, ptr, i32 } %102, ptr %9)
  %109 = call { ptr, i160 } %108({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %8) #17
  store { ptr, i160 } %109, ptr %10, align 8
  %.reload44 = load ptr, ptr %.reg2mem37, align 8
  %110 = load ptr, ptr %.reload44, align 8
  %111 = load ptr, ptr %37, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 112, ptr %111)
  %.reload32 = load ptr, ptr %.reg2mem25, align 8
  %113 = load i32, ptr %.reload32, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = getelementptr ptr, ptr %114, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = call ptr @typegetter_wrapper(ptr %116, ptr %110)
  store ptr %117, ptr %.reg2mem17, align 8
  %118 = load ptr, ptr %10, align 8
  %119 = ptrtoint ptr %118 to i64
  %120 = icmp eq i64 %119, ptrtoint (ptr @nil_typ to i64)
  %121 = icmp eq i64 %119, 0
  %122 = or i1 %120, %121
  %123 = icmp eq i1 %122, false
  store i1 %123, ptr %11, align 1
  %124 = load i1, ptr %11, align 1
  %125 = zext i1 %124 to i32
  store i32 %125, ptr %.reg2mem15, align 4
  %126 = xor i1 %124, true
  %127 = zext i1 %126 to i32
  store i32 %127, ptr %.reg2mem13, align 4
  br i1 %124, label %128, label %129

128:                                              ; preds = %76
  br label %254

129:                                              ; preds = %76
  %.reload43 = load ptr, ptr %.reg2mem37, align 8
  %130 = load ptr, ptr %.reload43, align 8
  %131 = load ptr, ptr %37, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 112, ptr %131)
  %.reload31 = load ptr, ptr %.reg2mem25, align 8
  %133 = load i32, ptr %.reload31, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 3
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #16
  store { ptr, ptr, ptr, i32 } %139, ptr %22, align 8
  call void @assume_offset(ptr %22, ptr @Iterator)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %147, 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, i32 %150, 3
  %152 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %153 = call ptr @llvm.invariant.start.p0(i64 24, ptr %141)
  %154 = getelementptr ptr, ptr %141, i32 %150
  %155 = getelementptr ptr, ptr %154, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = call ptr @behavior_wrapper(ptr %156, { ptr, ptr, ptr, i32 } %151, ptr %24)
  %158 = call { ptr, i160 } %157({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %23) #17
  store { ptr, i160 } %158, ptr %25, align 8
  %.reload42 = load ptr, ptr %.reg2mem37, align 8
  %159 = load ptr, ptr %.reload42, align 8
  %160 = load ptr, ptr %37, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 112, ptr %160)
  %.reload30 = load ptr, ptr %.reg2mem25, align 8
  %162 = load i32, ptr %.reload30, align 4
  %163 = getelementptr ptr, ptr %160, i32 %162
  %164 = getelementptr ptr, ptr %163, i32 6
  %165 = load ptr, ptr %164, align 8
  %166 = getelementptr { ptr, ptr }, ptr %165, i32 0, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = getelementptr { ptr, i160 }, ptr %25, i32 0, i32 0
  %169 = load ptr, ptr %168, align 8
  %170 = insertvalue { ptr, i160 } undef, ptr %169, 0
  %171 = getelementptr { ptr, i160 }, ptr %25, i32 0, i32 1
  %172 = load i160, ptr %171, align 4
  %173 = insertvalue { ptr, i160 } %170, i160 %172, 1
  call void %167(ptr %159, { ptr, i160 } %173) #15
  %.reload41 = load ptr, ptr %.reg2mem37, align 8
  %174 = load ptr, ptr %.reload41, align 8
  %175 = load ptr, ptr %37, align 8
  %176 = call ptr @llvm.invariant.start.p0(i64 112, ptr %175)
  %.reload29 = load ptr, ptr %.reg2mem25, align 8
  %177 = load i32, ptr %.reload29, align 4
  %178 = getelementptr ptr, ptr %175, i32 %177
  %179 = getelementptr ptr, ptr %178, i32 5
  %180 = load ptr, ptr %179, align 8
  %181 = getelementptr { ptr, ptr }, ptr %180, i32 0, i32 0
  %182 = load ptr, ptr %181, align 8
  %183 = call { ptr, ptr, ptr, i32 } %182(ptr %174) #16
  store { ptr, ptr, ptr, i32 } %183, ptr %26, align 8
  call void @assume_offset(ptr %26, ptr @Iterable)
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %185 = load ptr, ptr %184, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %185, 0
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } %186, ptr %188, 1
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 2
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %194 = load i32, ptr %193, align 4
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, i32 %194, 3
  %196 = call ptr @llvm.invariant.start.p0(i64 0, ptr %27)
  %197 = call ptr @llvm.invariant.start.p0(i64 184, ptr %185)
  %198 = getelementptr ptr, ptr %185, i32 %194
  %199 = getelementptr ptr, ptr %198, i32 1
  %200 = load ptr, ptr %199, align 8
  %201 = call ptr @behavior_wrapper(ptr %200, { ptr, ptr, ptr, i32 } %195, ptr %28)
  %202 = call { ptr, ptr, ptr, i32 } %201({ ptr, ptr, ptr, i32 } %195, { ptr, ptr, ptr, i32 } %195, ptr %27) #17
  store { ptr, ptr, ptr, i32 } %202, ptr %29, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %205 = load ptr, ptr %203, align 8
  store ptr %205, ptr %204, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %211 = load ptr, ptr %209, align 8
  store ptr %211, ptr %210, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %214 = load i32, ptr %212, align 4
  store i32 %214, ptr %213, align 4
  call void @set_offset(ptr %30, ptr @Iterator)
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %216 = load ptr, ptr %204, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %218 = load ptr, ptr %207, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %220 = load ptr, ptr %210, align 8
  store ptr %220, ptr %219, align 8
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %222 = load i32, ptr %213, align 4
  store i32 %222, ptr %221, align 4
  call void @set_offset(ptr %31, ptr @Iterator)
  %.reload40 = load ptr, ptr %.reg2mem37, align 8
  %223 = load ptr, ptr %.reload40, align 8
  %224 = load ptr, ptr %37, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 112, ptr %224)
  %.reload28 = load ptr, ptr %.reg2mem25, align 8
  %226 = load i32, ptr %.reload28, align 4
  %227 = getelementptr ptr, ptr %224, i32 %226
  %228 = getelementptr ptr, ptr %227, i32 4
  %229 = load ptr, ptr %228, align 8
  %230 = getelementptr { ptr, ptr }, ptr %229, i32 0, i32 1
  %231 = load ptr, ptr %230, align 8
  %232 = load ptr, ptr %215, align 8
  %233 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %232, 0
  %234 = load ptr, ptr %217, align 8
  %235 = insertvalue { ptr, ptr, ptr, i32 } %233, ptr %234, 1
  %236 = load ptr, ptr %219, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %235, ptr %236, 2
  %238 = load i32, ptr %221, align 4
  %239 = insertvalue { ptr, ptr, ptr, i32 } %237, i32 %238, 3
  call void %231(ptr %223, { ptr, ptr, ptr, i32 } %239) #15
  %.reload39 = load ptr, ptr %.reg2mem37, align 8
  %240 = load ptr, ptr %.reload39, align 8
  %241 = load ptr, ptr %37, align 8
  %242 = call ptr @llvm.invariant.start.p0(i64 112, ptr %241)
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  %243 = load i32, ptr %.reload27, align 4
  %244 = getelementptr ptr, ptr %241, i32 %243
  %245 = getelementptr ptr, ptr %244, i32 6
  %246 = load ptr, ptr %245, align 8
  %247 = getelementptr { ptr, ptr }, ptr %246, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = call { ptr, i160 } %248(ptr %240) #16
  store { ptr, i160 } %249, ptr %32, align 8
  %250 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %251 = load ptr, ptr %250, align 8
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  store ptr %251, ptr %.reload23, align 8
  %252 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %253 = load i160, ptr %252, align 4
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  store i160 %253, ptr %.reload20, align 4
  br label %254

254:                                              ; preds = %129, %128
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  store ptr %.reload18, ptr %.reg2mem51, align 8
  store i32 %.reload14, ptr %.reg2mem53, align 4
  store i32 %.reload16, ptr %.reg2mem55, align 4
  br label %256

255:                                              ; preds = %61
  store ptr poison, ptr %.reg2mem51, align 8
  store i32 0, ptr %.reg2mem53, align 4
  store i32 2, ptr %.reg2mem55, align 4
  br label %256

256:                                              ; preds = %255, %254
  %.reload56 = load i32, ptr %.reg2mem55, align 4
  %.reload54 = load i32, ptr %.reg2mem53, align 4
  %.reload52 = load ptr, ptr %.reg2mem51, align 8
  store i32 %.reload56, ptr %.reg2mem10, align 4
  store i32 %.reload54, ptr %.reg2mem8, align 4
  store ptr %.reload52, ptr %.reg2mem3, align 8
  br label %257

257:                                              ; preds = %256
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %258 = trunc i32 %.reload9 to i1
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %.reload12 = load i32, ptr %.reg2mem10, align 4
  br i1 %258, label %259, label %260

259:                                              ; preds = %257
  br label %61

260:                                              ; preds = %257
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  %261 = zext i32 %.reload11 to i64
  %262 = trunc i64 %261 to i32
  switch i32 %262, label %325 [
    i32 1, label %263
  ]

263:                                              ; preds = %260
  %264 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 0
  %265 = load ptr, ptr %264, align 8
  store ptr %265, ptr %13, align 8
  %266 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 1
  %267 = load i160, ptr %266, align 4
  store i160 %267, ptr %12, align 4
  %.reload38 = load ptr, ptr %.reg2mem37, align 8
  %268 = load ptr, ptr %.reload38, align 8
  %269 = load ptr, ptr %37, align 8
  %270 = call ptr @llvm.invariant.start.p0(i64 112, ptr %269)
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %271 = load i32, ptr %.reload26, align 4
  %272 = getelementptr ptr, ptr %269, i32 %271
  %273 = load ptr, ptr %272, align 8
  %274 = call ptr @typegetter_wrapper(ptr %273, ptr %268)
  store ptr @Pair, ptr %14, align 8
  %275 = getelementptr ptr, ptr %14, i32 1
  store ptr %274, ptr %275, align 8
  %276 = getelementptr ptr, ptr %14, i32 2
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store ptr %.reload6, ptr %276, align 8
  %277 = load ptr, ptr %14, align 8
  %278 = getelementptr ptr, ptr %277, i32 6
  %279 = load ptr, ptr %278, align 8
  %280 = call { i64, i64 } @size_wrapper(ptr %279, ptr %14)
  %281 = extractvalue { i64, i64 } %280, 0
  %282 = call ptr @bump_malloc(i64 %281)
  store ptr %274, ptr %282, align 8
  %283 = getelementptr ptr, ptr %282, i32 1
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  store ptr %.reload5, ptr %283, align 8
  %284 = call ptr @llvm.invariant.start.p0(i64 16, ptr %282)
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr @Pair, ptr %15, align 8
  store ptr %282, ptr %285, align 8
  store i32 10, ptr %286, align 4
  %287 = load ptr, ptr %6, align 8
  store ptr %287, ptr %17, align 8
  %288 = load i160, ptr %5, align 4
  store i160 %288, ptr %16, align 4
  %289 = load ptr, ptr %17, align 8
  %290 = insertvalue { ptr, i160 } undef, ptr %289, 0
  %291 = load i160, ptr %16, align 4
  %292 = insertvalue { ptr, i160 } %290, i160 %291, 1
  %293 = load ptr, ptr %13, align 8
  store ptr %293, ptr %19, align 8
  %294 = load i160, ptr %12, align 4
  store i160 %294, ptr %18, align 4
  %295 = load ptr, ptr %19, align 8
  %296 = insertvalue { ptr, i160 } undef, ptr %295, 0
  %297 = load i160, ptr %18, align 4
  %298 = insertvalue { ptr, i160 } %296, i160 %297, 1
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %300 = load ptr, ptr %299, align 8
  %301 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %300, 0
  %302 = load ptr, ptr %285, align 8
  %303 = insertvalue { ptr, ptr, ptr, i32 } %301, ptr %302, 1
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %305 = load ptr, ptr %304, align 8
  %306 = insertvalue { ptr, ptr, ptr, i32 } %303, ptr %305, 2
  %307 = load i32, ptr %286, align 4
  %308 = insertvalue { ptr, ptr, ptr, i32 } %306, i32 %307, 3
  %309 = getelementptr [2 x ptr], ptr %20, i32 0, i32 0
  store ptr %274, ptr %309, align 8
  %310 = getelementptr [2 x ptr], ptr %20, i32 0, i32 1
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  store ptr %.reload4, ptr %310, align 8
  %311 = call ptr @llvm.invariant.start.p0(i64 4, ptr %20)
  %312 = call ptr @llvm.invariant.start.p0(i64 80, ptr %300)
  %313 = getelementptr ptr, ptr %300, i32 %307
  %314 = getelementptr ptr, ptr %313, i32 4
  %315 = load ptr, ptr %314, align 8
  %316 = getelementptr { ptr, ptr }, ptr %21, i32 0, i32 0
  store ptr %289, ptr %316, align 8
  %317 = getelementptr { ptr, ptr }, ptr %21, i32 0, i32 1
  store ptr %295, ptr %317, align 8
  %318 = call ptr @behavior_wrapper(ptr %315, { ptr, ptr, ptr, i32 } %308, ptr %21)
  call void %318({ ptr, ptr, ptr, i32 } %308, { ptr, ptr, ptr, i32 } %308, ptr %20, { ptr, i160 } %292, { ptr, i160 } %298) #17
  %319 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 0
  %320 = load ptr, ptr %319, align 8
  %321 = insertvalue { ptr, i160 } undef, ptr %320, 0
  %322 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 1
  %323 = load i160, ptr %322, align 4
  %324 = insertvalue { ptr, i160 } %321, i160 %323, 1
  store { ptr, i160 } %324, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem49, align 8
  br label %331

325:                                              ; preds = %260
  %326 = load [0 x i8], ptr %33, align 1
  store [0 x i8] %326, ptr %34, align 1
  store ptr @nil_typ, ptr %35, align 8
  %327 = load ptr, ptr %35, align 8
  %328 = insertvalue { ptr, i160 } undef, ptr %327, 0
  %329 = load i160, ptr %34, align 4
  %330 = insertvalue { ptr, i160 } %328, i160 %329, 1
  store { ptr, i160 } %330, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem49, align 8
  br label %331

331:                                              ; preds = %325, %263
  %.reload50 = load { ptr, i160 }, ptr %.reg2mem49, align 8
  ret { ptr, i160 } %.reload50
}

define { ptr, i160 } @ProductIterator_getter_current_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = getelementptr i8, ptr %0, i64 %36
  %38 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %42 = load i160, ptr %41, align 4
  %43 = insertvalue { ptr, i160 } %40, i160 %42, 1
  ret { ptr, i160 } %43
}

define void @ProductIterator_setter_current_first(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 %32, %36
  %38 = getelementptr i8, ptr %0, i64 %37
  %39 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %39, align 8
  %40 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 0
  %41 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 0
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %44 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 1
  %45 = load i160, ptr %43, align 4
  store i160 %45, ptr %44, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %25, %29
  %31 = getelementptr i8, ptr %0, i64 %30
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  ret { ptr, ptr, ptr, i32 } %43
}

define void @ProductIterator_setter_second_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %26, %30
  %32 = getelementptr i8, ptr %0, i64 %31
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %33, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %45 = load i32, ptr %43, align 4
  store i32 %45, ptr %44, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ProductIterator_setter_second_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_first_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ProductIterator_setter_first_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ProductIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ProductIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { i64, i64 } @_data_size_ZipIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ZipIterable_field_ZipIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ZipIterable_field_ZipIterable_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterable_field_ZipIterable_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 17, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [52 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ZipIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 18, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [52 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ZipIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Pair, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Pair to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 20, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [52 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @ZipIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ZipIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ZipIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ZipIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 28, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @ZipIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ZipIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 416, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 416, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 4
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ZipIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 416, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 416, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 4
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #16
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  call void @assume_offset(ptr %74, ptr @Iterable)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = alloca [0 x ptr], align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %87)
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %76)
  %90 = getelementptr ptr, ptr %76, i32 %85
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = alloca {}, align 8
  %94 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %86, ptr %93)
  %95 = call { ptr, ptr, ptr, i32 } %94({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %87) #17
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %95, ptr %96, align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator)
  %110 = load ptr, ptr %10, align 8
  %111 = load ptr, ptr %5, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 416, ptr %111)
  %113 = load i32, ptr %16, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = call ptr @typegetter_wrapper(ptr %115, ptr %110)
  %117 = load ptr, ptr %10, align 8
  %118 = load ptr, ptr %5, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 416, ptr %118)
  %120 = load i32, ptr %16, align 4
  %121 = getelementptr ptr, ptr %118, i32 %120
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @typegetter_wrapper(ptr %123, ptr %117)
  %125 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %126 = getelementptr [4 x ptr], ptr %125, i32 0, i32 2
  store ptr %124, ptr %126, align 8
  %127 = getelementptr [4 x ptr], ptr %125, i32 0, i32 1
  store ptr %116, ptr %127, align 8
  %128 = getelementptr [4 x ptr], ptr %125, i32 0, i32 3
  store ptr null, ptr %128, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 24, ptr %125)
  store ptr @Pair, ptr %125, align 8
  %130 = alloca [4 x ptr], align 8
  store ptr @ZipIterator, ptr %130, align 8
  %131 = getelementptr ptr, ptr %130, i32 1
  store ptr %116, ptr %131, align 8
  %132 = getelementptr ptr, ptr %130, i32 2
  store ptr %124, ptr %132, align 8
  %133 = getelementptr ptr, ptr %130, i32 3
  store ptr %125, ptr %133, align 8
  %134 = load ptr, ptr %130, align 8
  %135 = getelementptr ptr, ptr %134, i32 6
  %136 = load ptr, ptr %135, align 8
  %137 = call { i64, i64 } @size_wrapper(ptr %136, ptr %130)
  %138 = extractvalue { i64, i64 } %137, 0
  %139 = call ptr @bump_malloc(i64 %138)
  store ptr %116, ptr %139, align 8
  %140 = getelementptr ptr, ptr %139, i32 1
  store ptr %124, ptr %140, align 8
  %141 = getelementptr ptr, ptr %139, i32 2
  store ptr %125, ptr %141, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 24, ptr %139)
  %143 = alloca i32, align 4
  %144 = alloca ptr, align 8
  %145 = alloca ptr, align 8
  %146 = alloca ptr, align 8
  store ptr @ZipIterator, ptr %146, align 8
  store ptr %139, ptr %145, align 8
  store i32 10, ptr %143, align 4
  %147 = load ptr, ptr %10, align 8
  %148 = load ptr, ptr %5, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 416, ptr %148)
  %150 = load i32, ptr %16, align 4
  %151 = getelementptr ptr, ptr %148, i32 %150
  %152 = getelementptr ptr, ptr %151, i32 3
  %153 = load ptr, ptr %152, align 8
  %154 = getelementptr { ptr, ptr }, ptr %153, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = call { ptr, ptr, ptr, i32 } %155(ptr %147) #16
  %157 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %156, ptr %157, align 8
  call void @assume_offset(ptr %157, ptr @Iterable)
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 0
  %159 = load ptr, ptr %158, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %159, 0
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 1
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %160, ptr %162, 1
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 2
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %165, 2
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 3
  %168 = load i32, ptr %167, align 4
  %169 = insertvalue { ptr, ptr, ptr, i32 } %166, i32 %168, 3
  %170 = alloca [0 x ptr], align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 0, ptr %170)
  %172 = call ptr @llvm.invariant.start.p0(i64 184, ptr %159)
  %173 = getelementptr ptr, ptr %159, i32 %168
  %174 = getelementptr ptr, ptr %173, i32 1
  %175 = load ptr, ptr %174, align 8
  %176 = alloca {}, align 8
  %177 = call ptr @behavior_wrapper(ptr %175, { ptr, ptr, ptr, i32 } %169, ptr %176)
  %178 = call { ptr, ptr, ptr, i32 } %177({ ptr, ptr, ptr, i32 } %169, { ptr, ptr, ptr, i32 } %169, ptr %170) #17
  %179 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %178, ptr %179, align 8
  %180 = alloca { ptr, ptr, ptr, i32 }, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 0
  %183 = load ptr, ptr %181, align 8
  store ptr %183, ptr %182, align 8
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 1
  %186 = load ptr, ptr %184, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 2
  %189 = load ptr, ptr %187, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 3
  %192 = load i32, ptr %190, align 4
  store i32 %192, ptr %191, align 4
  call void @set_offset(ptr %180, ptr @Iterator)
  %193 = load ptr, ptr %10, align 8
  %194 = load ptr, ptr %5, align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 416, ptr %194)
  %196 = load i32, ptr %16, align 4
  %197 = getelementptr ptr, ptr %194, i32 %196
  %198 = getelementptr ptr, ptr %197, i32 4
  %199 = load ptr, ptr %198, align 8
  %200 = getelementptr { ptr, ptr }, ptr %199, i32 0, i32 0
  %201 = load ptr, ptr %200, align 8
  %202 = call { ptr, ptr, ptr, i32 } %201(ptr %193) #16
  %203 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %202, ptr %203, align 8
  call void @assume_offset(ptr %203, ptr @Iterable)
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 0
  %205 = load ptr, ptr %204, align 8
  %206 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %205, 0
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 1
  %208 = load ptr, ptr %207, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } %206, ptr %208, 1
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 2
  %211 = load ptr, ptr %210, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %211, 2
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 3
  %214 = load i32, ptr %213, align 4
  %215 = insertvalue { ptr, ptr, ptr, i32 } %212, i32 %214, 3
  %216 = alloca [0 x ptr], align 8
  %217 = call ptr @llvm.invariant.start.p0(i64 0, ptr %216)
  %218 = call ptr @llvm.invariant.start.p0(i64 184, ptr %205)
  %219 = getelementptr ptr, ptr %205, i32 %214
  %220 = getelementptr ptr, ptr %219, i32 1
  %221 = load ptr, ptr %220, align 8
  %222 = alloca {}, align 8
  %223 = call ptr @behavior_wrapper(ptr %221, { ptr, ptr, ptr, i32 } %215, ptr %222)
  %224 = call { ptr, ptr, ptr, i32 } %223({ ptr, ptr, ptr, i32 } %215, { ptr, ptr, ptr, i32 } %215, ptr %216) #17
  %225 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %224, ptr %225, align 8
  %226 = alloca { ptr, ptr, ptr, i32 }, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 0
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 0
  %229 = load ptr, ptr %227, align 8
  store ptr %229, ptr %228, align 8
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 1
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 1
  %232 = load ptr, ptr %230, align 8
  store ptr %232, ptr %231, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 2
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 2
  %235 = load ptr, ptr %233, align 8
  store ptr %235, ptr %234, align 8
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 3
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 3
  %238 = load i32, ptr %236, align 4
  store i32 %238, ptr %237, align 4
  call void @set_offset(ptr %226, ptr @Iterator)
  %239 = alloca { ptr, ptr, ptr, i32 }, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 0
  %241 = load ptr, ptr %182, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 1
  %243 = load ptr, ptr %185, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 2
  %245 = load ptr, ptr %188, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 3
  %247 = load i32, ptr %191, align 4
  store i32 %247, ptr %246, align 4
  call void @set_offset(ptr %239, ptr @Iterator)
  %248 = load ptr, ptr %240, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = load ptr, ptr %242, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %250, 1
  %252 = load ptr, ptr %244, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } %251, ptr %252, 2
  %254 = load i32, ptr %246, align 4
  %255 = insertvalue { ptr, ptr, ptr, i32 } %253, i32 %254, 3
  %256 = alloca { ptr, ptr, ptr, i32 }, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 0
  %258 = load ptr, ptr %228, align 8
  store ptr %258, ptr %257, align 8
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 1
  %260 = load ptr, ptr %231, align 8
  store ptr %260, ptr %259, align 8
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 2
  %262 = load ptr, ptr %234, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 3
  %264 = load i32, ptr %237, align 4
  store i32 %264, ptr %263, align 4
  call void @set_offset(ptr %256, ptr @Iterator)
  %265 = load ptr, ptr %257, align 8
  %266 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %265, 0
  %267 = load ptr, ptr %259, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } %266, ptr %267, 1
  %269 = load ptr, ptr %261, align 8
  %270 = insertvalue { ptr, ptr, ptr, i32 } %268, ptr %269, 2
  %271 = load i32, ptr %263, align 4
  %272 = insertvalue { ptr, ptr, ptr, i32 } %270, i32 %271, 3
  %273 = load ptr, ptr %146, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %273, 0
  %275 = load ptr, ptr %145, align 8
  %276 = insertvalue { ptr, ptr, ptr, i32 } %274, ptr %275, 1
  %277 = load ptr, ptr %144, align 8
  %278 = insertvalue { ptr, ptr, ptr, i32 } %276, ptr %277, 2
  %279 = load i32, ptr %143, align 4
  %280 = insertvalue { ptr, ptr, ptr, i32 } %278, i32 %279, 3
  %281 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %282 = getelementptr [3 x ptr], ptr %281, i32 0, i32 1
  store ptr %116, ptr %282, align 8
  %283 = getelementptr [3 x ptr], ptr %281, i32 0, i32 2
  store ptr null, ptr %283, align 8
  %284 = call ptr @llvm.invariant.start.p0(i64 16, ptr %281)
  store ptr @Iterator, ptr %281, align 8
  %285 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %286 = getelementptr [3 x ptr], ptr %285, i32 0, i32 1
  store ptr %124, ptr %286, align 8
  %287 = getelementptr [3 x ptr], ptr %285, i32 0, i32 2
  store ptr null, ptr %287, align 8
  %288 = call ptr @llvm.invariant.start.p0(i64 16, ptr %285)
  store ptr @Iterator, ptr %285, align 8
  %289 = alloca [2 x ptr], align 8
  %290 = getelementptr [2 x ptr], ptr %289, i32 0, i32 0
  store ptr %281, ptr %290, align 8
  %291 = getelementptr [2 x ptr], ptr %289, i32 0, i32 1
  store ptr %285, ptr %291, align 8
  %292 = call ptr @llvm.invariant.start.p0(i64 4, ptr %289)
  %293 = call ptr @llvm.invariant.start.p0(i64 96, ptr %273)
  %294 = getelementptr ptr, ptr %273, i32 %279
  %295 = getelementptr ptr, ptr %294, i32 5
  %296 = load ptr, ptr %295, align 8
  %297 = alloca { ptr, ptr }, align 8
  %298 = getelementptr { ptr, ptr }, ptr %297, i32 0, i32 0
  store ptr %248, ptr %298, align 8
  %299 = getelementptr { ptr, ptr }, ptr %297, i32 0, i32 1
  store ptr %265, ptr %299, align 8
  %300 = call ptr @behavior_wrapper(ptr %296, { ptr, ptr, ptr, i32 } %280, ptr %297)
  call void %300({ ptr, ptr, ptr, i32 } %280, { ptr, ptr, ptr, i32 } %280, ptr %289, { ptr, ptr, ptr, i32 } %255, { ptr, ptr, ptr, i32 } %272) #17
  %301 = alloca { ptr, ptr, ptr, i32 }, align 8
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %301, i32 0, i32 0
  %303 = load ptr, ptr %146, align 8
  store ptr %303, ptr %302, align 8
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %301, i32 0, i32 1
  %305 = load ptr, ptr %145, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %301, i32 0, i32 2
  %307 = load ptr, ptr %144, align 8
  store ptr %307, ptr %306, align 8
  %308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %301, i32 0, i32 3
  %309 = load i32, ptr %143, align 4
  store i32 %309, ptr %308, align 4
  call void @set_offset(ptr %301, ptr @Iterator)
  %310 = load ptr, ptr %302, align 8
  %311 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %310, 0
  %312 = load ptr, ptr %304, align 8
  %313 = insertvalue { ptr, ptr, ptr, i32 } %311, ptr %312, 1
  %314 = load ptr, ptr %306, align 8
  %315 = insertvalue { ptr, ptr, ptr, i32 } %313, ptr %314, 2
  %316 = load i32, ptr %308, align 4
  %317 = insertvalue { ptr, ptr, ptr, i32 } %315, i32 %316, 3
  ret { ptr, ptr, ptr, i32 } %317
}

define { i64, i64 } @_data_size_ZipIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ZipIterator_field_ZipIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ZipIterator_field_ZipIterator_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterator_field_ZipIterator_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterator, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterator to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 7, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [12 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ZipIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 8, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [12 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ZipIterator_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ZipIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 96, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterator)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterator)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 96, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 4
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  ret void
}

define { ptr, i160 } @ZipIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i1, align 1
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca [3 x ptr], align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca [2 x ptr], align 8
  %16 = alloca { ptr, ptr }, align 8
  %17 = alloca [0 x i8], align 1
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem21 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem37 = alloca { ptr, i160 }, align 8
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca { ptr, i160 }, align 8
  %.reg2mem43 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  store ptr %26, ptr %.reg2mem31, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload36 = load ptr, ptr %.reg2mem31, align 8
  store ptr %27, ptr %.reload36, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr %32, ptr %.reg2mem25, align 8
  %33 = load i32, ptr %31, align 4
  %.reload30 = load ptr, ptr %.reg2mem25, align 8
  store i32 %33, ptr %.reload30, align 4
  call void @set_offset(ptr %21, ptr @ZipIterator)
  %.reload35 = load ptr, ptr %.reg2mem31, align 8
  %34 = load ptr, ptr %.reload35, align 8
  %35 = load ptr, ptr %21, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 96, ptr %35)
  %.reload29 = load ptr, ptr %.reg2mem25, align 8
  %37 = load i32, ptr %.reload29, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 3
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = call { ptr, ptr, ptr, i32 } %42(ptr %34) #16
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %43, ptr %44, align 8
  call void @assume_offset(ptr %44, ptr @Iterator)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %55 = load i32, ptr %54, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %55, 3
  %57 = alloca [0 x ptr], align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 0, ptr %57)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr ptr, ptr %46, i32 %55
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = alloca {}, align 8
  %64 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %56, ptr %63)
  %65 = call { ptr, i160 } %64({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr %57) #17
  %66 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %65, ptr %66, align 8
  %.reload34 = load ptr, ptr %.reg2mem31, align 8
  %67 = load ptr, ptr %.reload34, align 8
  %68 = load ptr, ptr %21, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 96, ptr %68)
  %.reload28 = load ptr, ptr %.reg2mem25, align 8
  %70 = load i32, ptr %.reload28, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = getelementptr ptr, ptr %71, i32 4
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = call { ptr, ptr, ptr, i32 } %75(ptr %67) #16
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %76, ptr %77, align 8
  call void @assume_offset(ptr %77, ptr @Iterator)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %88, 3
  %90 = alloca [0 x ptr], align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 0, ptr %90)
  %92 = call ptr @llvm.invariant.start.p0(i64 24, ptr %79)
  %93 = getelementptr ptr, ptr %79, i32 %88
  %94 = getelementptr ptr, ptr %93, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = alloca {}, align 8
  %97 = call ptr @behavior_wrapper(ptr %95, { ptr, ptr, ptr, i32 } %89, ptr %96)
  %98 = call { ptr, i160 } %97({ ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %89, ptr %90) #17
  %99 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %98, ptr %99, align 8
  %.reload33 = load ptr, ptr %.reg2mem31, align 8
  %100 = load ptr, ptr %.reload33, align 8
  %101 = load ptr, ptr %21, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 96, ptr %101)
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  %103 = load i32, ptr %.reload27, align 4
  %104 = getelementptr ptr, ptr %101, i32 %103
  %105 = load ptr, ptr %104, align 8
  %106 = call ptr @typegetter_wrapper(ptr %105, ptr %100)
  store ptr %106, ptr %.reg2mem21, align 8
  %107 = load ptr, ptr %66, align 8
  %108 = ptrtoint ptr %107 to i64
  %109 = icmp eq i64 %108, ptrtoint (ptr @nil_typ to i64)
  %110 = icmp eq i64 %108, 0
  %111 = or i1 %109, %110
  %112 = icmp eq i1 %111, false
  %113 = alloca i1, align 1
  store i1 %112, ptr %113, align 1
  %114 = load i1, ptr %113, align 1
  br i1 %114, label %115, label %197

115:                                              ; preds = %3
  %116 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 0
  store ptr %116, ptr %.reg2mem18, align 8
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %117 = load ptr, ptr %.reload20, align 8
  store ptr %117, ptr %5, align 8
  %118 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 1
  store ptr %118, ptr %.reg2mem15, align 8
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %119 = load i160, ptr %.reload17, align 4
  store i160 %119, ptr %4, align 4
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %120 = load ptr, ptr %.reload32, align 8
  %121 = load ptr, ptr %21, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 96, ptr %121)
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %123 = load i32, ptr %.reload26, align 4
  %124 = getelementptr ptr, ptr %121, i32 %123
  %125 = getelementptr ptr, ptr %124, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = call ptr @typegetter_wrapper(ptr %126, ptr %120)
  store ptr %127, ptr %.reg2mem11, align 8
  %128 = load ptr, ptr %99, align 8
  %129 = ptrtoint ptr %128 to i64
  %130 = icmp eq i64 %129, ptrtoint (ptr @nil_typ to i64)
  %131 = icmp eq i64 %129, 0
  %132 = or i1 %130, %131
  %133 = icmp eq i1 %132, false
  store i1 %133, ptr %6, align 1
  %134 = load i1, ptr %6, align 1
  %135 = xor i1 %134, true
  %136 = zext i1 %135 to i32
  store i32 %136, ptr %.reg2mem9, align 4
  br i1 %134, label %137, label %192

137:                                              ; preds = %115
  %138 = getelementptr { ptr, i160 }, ptr %99, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  store ptr %139, ptr %8, align 8
  %140 = getelementptr { ptr, i160 }, ptr %99, i32 0, i32 1
  %141 = load i160, ptr %140, align 4
  store i160 %141, ptr %7, align 4
  store ptr @Pair, ptr %9, align 8
  %142 = getelementptr ptr, ptr %9, i32 1
  %.reload24 = load ptr, ptr %.reg2mem21, align 8
  store ptr %.reload24, ptr %142, align 8
  %143 = getelementptr ptr, ptr %9, i32 2
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  store ptr %.reload14, ptr %143, align 8
  %144 = load ptr, ptr %9, align 8
  %145 = getelementptr ptr, ptr %144, i32 6
  %146 = load ptr, ptr %145, align 8
  %147 = call { i64, i64 } @size_wrapper(ptr %146, ptr %9)
  %148 = extractvalue { i64, i64 } %147, 0
  %149 = call ptr @bump_malloc(i64 %148)
  %.reload23 = load ptr, ptr %.reg2mem21, align 8
  store ptr %.reload23, ptr %149, align 8
  %150 = getelementptr ptr, ptr %149, i32 1
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  store ptr %.reload13, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 16, ptr %149)
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  store ptr @Pair, ptr %10, align 8
  store ptr %149, ptr %152, align 8
  store i32 10, ptr %153, align 4
  %154 = load ptr, ptr %5, align 8
  store ptr %154, ptr %12, align 8
  %155 = load i160, ptr %4, align 4
  store i160 %155, ptr %11, align 4
  %156 = load ptr, ptr %12, align 8
  %157 = insertvalue { ptr, i160 } undef, ptr %156, 0
  %158 = load i160, ptr %11, align 4
  %159 = insertvalue { ptr, i160 } %157, i160 %158, 1
  %160 = load ptr, ptr %8, align 8
  store ptr %160, ptr %14, align 8
  %161 = load i160, ptr %7, align 4
  store i160 %161, ptr %13, align 4
  %162 = load ptr, ptr %14, align 8
  %163 = insertvalue { ptr, i160 } undef, ptr %162, 0
  %164 = load i160, ptr %13, align 4
  %165 = insertvalue { ptr, i160 } %163, i160 %164, 1
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = load ptr, ptr %152, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %169, 1
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %172 = load ptr, ptr %171, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } %170, ptr %172, 2
  %174 = load i32, ptr %153, align 4
  %175 = insertvalue { ptr, ptr, ptr, i32 } %173, i32 %174, 3
  %176 = getelementptr [2 x ptr], ptr %15, i32 0, i32 0
  %.reload22 = load ptr, ptr %.reg2mem21, align 8
  store ptr %.reload22, ptr %176, align 8
  %177 = getelementptr [2 x ptr], ptr %15, i32 0, i32 1
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  store ptr %.reload12, ptr %177, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 4, ptr %15)
  %179 = call ptr @llvm.invariant.start.p0(i64 80, ptr %167)
  %180 = getelementptr ptr, ptr %167, i32 %174
  %181 = getelementptr ptr, ptr %180, i32 4
  %182 = load ptr, ptr %181, align 8
  %183 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 0
  store ptr %156, ptr %183, align 8
  %184 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 1
  store ptr %162, ptr %184, align 8
  %185 = call ptr @behavior_wrapper(ptr %182, { ptr, ptr, ptr, i32 } %175, ptr %16)
  call void %185({ ptr, ptr, ptr, i32 } %175, { ptr, ptr, ptr, i32 } %175, ptr %15, { ptr, i160 } %159, { ptr, i160 } %165) #17
  %186 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 0
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, i160 } undef, ptr %187, 0
  %189 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 1
  %190 = load i160, ptr %189, align 4
  %191 = insertvalue { ptr, i160 } %188, i160 %190, 1
  store { ptr, i160 } %191, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem43, align 8
  br label %195

192:                                              ; preds = %115
  %193 = load ptr, ptr %5, align 8
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  store ptr %193, ptr %.reload19, align 8
  %194 = load i160, ptr %4, align 4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  store i160 %194, ptr %.reload16, align 4
  store { ptr, i160 } poison, ptr %.reg2mem43, align 8
  br label %195

195:                                              ; preds = %192, %137
  %.reload44 = load { ptr, i160 }, ptr %.reg2mem43, align 8
  store { ptr, i160 } %.reload44, ptr %.reg2mem5, align 8
  br label %196

196:                                              ; preds = %195
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem39, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem41, align 8
  br label %198

197:                                              ; preds = %3
  store i32 1, ptr %.reg2mem39, align 4
  store { ptr, i160 } poison, ptr %.reg2mem41, align 8
  br label %198

198:                                              ; preds = %197, %196
  %.reload42 = load { ptr, i160 }, ptr %.reg2mem41, align 8
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store { ptr, i160 } %.reload42, ptr %.reg2mem3, align 8
  store i32 %.reload40, ptr %.reg2mem1, align 4
  br label %199

199:                                              ; preds = %198
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %200 = zext i32 %.reload2 to i64
  %201 = trunc i64 %200 to i32
  switch i32 %201, label %203 [
    i32 0, label %202
  ]

202:                                              ; preds = %199
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem37, align 8
  br label %209

203:                                              ; preds = %199
  %204 = load [0 x i8], ptr %17, align 1
  store [0 x i8] %204, ptr %18, align 1
  store ptr @nil_typ, ptr %19, align 8
  %205 = load ptr, ptr %19, align 8
  %206 = insertvalue { ptr, i160 } undef, ptr %205, 0
  %207 = load i160, ptr %18, align 4
  %208 = insertvalue { ptr, i160 } %206, i160 %207, 1
  store { ptr, i160 } %208, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem37, align 8
  br label %209

209:                                              ; preds = %203, %202
  %.reload38 = load { ptr, i160 }, ptr %.reg2mem37, align 8
  ret { ptr, i160 } %.reload38
}

define { ptr, ptr, ptr, i32 } @ZipIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ZipIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ZipIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ZipIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ZipIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { i64, i64 } @_data_size_InterleaveIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @InterleaveIterable_field_InterleaveIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 15, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [50 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @InterleaveIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [50 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 18, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @InterleaveIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @InterleaveIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @InterleaveIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 400, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 400, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @InterleaveIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 400, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 400, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #16
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  call void @assume_offset(ptr %74, ptr @Iterable)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = alloca [0 x ptr], align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %87)
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %76)
  %90 = getelementptr ptr, ptr %76, i32 %85
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = alloca {}, align 8
  %94 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %86, ptr %93)
  %95 = call { ptr, ptr, ptr, i32 } %94({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %87) #17
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %95, ptr %96, align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator)
  %110 = load ptr, ptr %10, align 8
  %111 = load ptr, ptr %5, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 400, ptr %111)
  %113 = load i32, ptr %16, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = call ptr @typegetter_wrapper(ptr %115, ptr %110)
  %117 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterator, ptr %117, align 8
  %118 = getelementptr ptr, ptr %117, i32 1
  store ptr %116, ptr %118, align 8
  %119 = load ptr, ptr %117, align 8
  %120 = getelementptr ptr, ptr %119, i32 6
  %121 = load ptr, ptr %120, align 8
  %122 = call { i64, i64 } @size_wrapper(ptr %121, ptr %117)
  %123 = extractvalue { i64, i64 } %122, 0
  %124 = call ptr @bump_malloc(i64 %123)
  store ptr %116, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 8, ptr %124)
  %126 = alloca i32, align 4
  %127 = alloca ptr, align 8
  %128 = alloca ptr, align 8
  %129 = alloca ptr, align 8
  store ptr @InterleaveIterator, ptr %129, align 8
  store ptr %124, ptr %128, align 8
  store i32 10, ptr %126, align 4
  %130 = load ptr, ptr %10, align 8
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 400, ptr %131)
  %133 = load i32, ptr %16, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #16
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %139, ptr %140, align 8
  call void @assume_offset(ptr %140, ptr @Iterable)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %145, 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %148, 2
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %151 = load i32, ptr %150, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %151, 3
  %153 = alloca [0 x ptr], align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 0, ptr %153)
  %155 = call ptr @llvm.invariant.start.p0(i64 184, ptr %142)
  %156 = getelementptr ptr, ptr %142, i32 %151
  %157 = getelementptr ptr, ptr %156, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = alloca {}, align 8
  %160 = call ptr @behavior_wrapper(ptr %158, { ptr, ptr, ptr, i32 } %152, ptr %159)
  %161 = call { ptr, ptr, ptr, i32 } %160({ ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %152, ptr %153) #17
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %161, ptr %162, align 8
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %163, ptr @Iterator)
  %176 = load ptr, ptr %10, align 8
  %177 = load ptr, ptr %5, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 400, ptr %177)
  %179 = load i32, ptr %16, align 4
  %180 = getelementptr ptr, ptr %177, i32 %179
  %181 = getelementptr ptr, ptr %180, i32 2
  %182 = load ptr, ptr %181, align 8
  %183 = getelementptr { ptr, ptr }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = call { ptr, ptr, ptr, i32 } %184(ptr %176) #16
  %186 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %185, ptr %186, align 8
  call void @assume_offset(ptr %186, ptr @Iterable)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %194, 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %197, 3
  %199 = alloca [0 x ptr], align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 0, ptr %199)
  %201 = call ptr @llvm.invariant.start.p0(i64 184, ptr %188)
  %202 = getelementptr ptr, ptr %188, i32 %197
  %203 = getelementptr ptr, ptr %202, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = alloca {}, align 8
  %206 = call ptr @behavior_wrapper(ptr %204, { ptr, ptr, ptr, i32 } %198, ptr %205)
  %207 = call { ptr, ptr, ptr, i32 } %206({ ptr, ptr, ptr, i32 } %198, { ptr, ptr, ptr, i32 } %198, ptr %199) #17
  %208 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %207, ptr %208, align 8
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %221 = load i32, ptr %219, align 4
  store i32 %221, ptr %220, align 4
  call void @set_offset(ptr %209, ptr @Iterator)
  %222 = alloca { ptr, ptr, ptr, i32 }, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %224 = load ptr, ptr %165, align 8
  store ptr %224, ptr %223, align 8
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %226 = load ptr, ptr %168, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %228 = load ptr, ptr %171, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %230 = load i32, ptr %174, align 4
  store i32 %230, ptr %229, align 4
  call void @set_offset(ptr %222, ptr @Iterator)
  %231 = load ptr, ptr %223, align 8
  %232 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %231, 0
  %233 = load ptr, ptr %225, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } %232, ptr %233, 1
  %235 = load ptr, ptr %227, align 8
  %236 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %235, 2
  %237 = load i32, ptr %229, align 4
  %238 = insertvalue { ptr, ptr, ptr, i32 } %236, i32 %237, 3
  %239 = alloca { ptr, ptr, ptr, i32 }, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 0
  %241 = load ptr, ptr %211, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 1
  %243 = load ptr, ptr %214, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 2
  %245 = load ptr, ptr %217, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 3
  %247 = load i32, ptr %220, align 4
  store i32 %247, ptr %246, align 4
  call void @set_offset(ptr %239, ptr @Iterator)
  %248 = load ptr, ptr %240, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = load ptr, ptr %242, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %250, 1
  %252 = load ptr, ptr %244, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } %251, ptr %252, 2
  %254 = load i32, ptr %246, align 4
  %255 = insertvalue { ptr, ptr, ptr, i32 } %253, i32 %254, 3
  %256 = load ptr, ptr %129, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %256, 0
  %258 = load ptr, ptr %128, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %257, ptr %258, 1
  %260 = load ptr, ptr %127, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } %259, ptr %260, 2
  %262 = load i32, ptr %126, align 4
  %263 = insertvalue { ptr, ptr, ptr, i32 } %261, i32 %262, 3
  %264 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %265 = getelementptr [3 x ptr], ptr %264, i32 0, i32 1
  store ptr %116, ptr %265, align 8
  %266 = getelementptr [3 x ptr], ptr %264, i32 0, i32 2
  store ptr null, ptr %266, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 16, ptr %264)
  store ptr @Iterator, ptr %264, align 8
  %268 = alloca [2 x ptr], align 8
  %269 = getelementptr [2 x ptr], ptr %268, i32 0, i32 0
  store ptr %264, ptr %269, align 8
  %270 = getelementptr [2 x ptr], ptr %268, i32 0, i32 1
  store ptr %264, ptr %270, align 8
  %271 = call ptr @llvm.invariant.start.p0(i64 4, ptr %268)
  %272 = call ptr @llvm.invariant.start.p0(i64 88, ptr %256)
  %273 = getelementptr ptr, ptr %256, i32 %262
  %274 = getelementptr ptr, ptr %273, i32 4
  %275 = load ptr, ptr %274, align 8
  %276 = alloca { ptr, ptr }, align 8
  %277 = getelementptr { ptr, ptr }, ptr %276, i32 0, i32 0
  store ptr %231, ptr %277, align 8
  %278 = getelementptr { ptr, ptr }, ptr %276, i32 0, i32 1
  store ptr %248, ptr %278, align 8
  %279 = call ptr @behavior_wrapper(ptr %275, { ptr, ptr, ptr, i32 } %263, ptr %276)
  call void %279({ ptr, ptr, ptr, i32 } %263, { ptr, ptr, ptr, i32 } %263, ptr %268, { ptr, ptr, ptr, i32 } %238, { ptr, ptr, ptr, i32 } %255) #17
  %280 = alloca { ptr, ptr, ptr, i32 }, align 8
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 0
  %282 = load ptr, ptr %129, align 8
  store ptr %282, ptr %281, align 8
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 1
  %284 = load ptr, ptr %128, align 8
  store ptr %284, ptr %283, align 8
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 2
  %286 = load ptr, ptr %127, align 8
  store ptr %286, ptr %285, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 3
  %288 = load i32, ptr %126, align 4
  store i32 %288, ptr %287, align 4
  call void @set_offset(ptr %280, ptr @Iterator)
  %289 = load ptr, ptr %281, align 8
  %290 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %289, 0
  %291 = load ptr, ptr %283, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } %290, ptr %291, 1
  %293 = load ptr, ptr %285, align 8
  %294 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %293, 2
  %295 = load i32, ptr %287, align 4
  %296 = insertvalue { ptr, ptr, ptr, i32 } %294, i32 %295, 3
  ret { ptr, ptr, ptr, i32 } %296
}

define { i64, i64 } @_data_size_InterleaveIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @InterleaveIterator_field_InterleaveIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterator, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterator to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 6, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [11 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @InterleaveIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [11 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @InterleaveIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @InterleaveIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterator)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterator)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 88, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  %100 = alloca i1, align 1
  store i1 true, ptr %100, align 1
  %101 = load ptr, ptr %12, align 8
  %102 = load ptr, ptr %7, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = load i32, ptr %18, align 4
  %105 = getelementptr ptr, ptr %102, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 3
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load i1, ptr %100, align 1
  call void %109(ptr %101, i1 %110) #15
  ret void
}

define { ptr, i160 } @InterleaveIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem19 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  store ptr %20, ptr %.reg2mem12, align 8
  %21 = load ptr, ptr %19, align 8
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  store ptr %21, ptr %.reload18, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr %26, ptr %.reg2mem5, align 8
  %27 = load i32, ptr %25, align 4
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  store i32 %27, ptr %.reload11, align 4
  call void @set_offset(ptr %15, ptr @InterleaveIterator)
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %28 = load ptr, ptr %.reload17, align 8
  %29 = load ptr, ptr %15, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 88, ptr %29)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %31 = load i32, ptr %.reload10, align 4
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 3
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call i1 %36(ptr %28) #16
  %38 = alloca i1, align 1
  store i1 %37, ptr %38, align 1
  %39 = load i1, ptr %38, align 1
  br i1 %39, label %40, label %86

40:                                               ; preds = %3
  store i1 false, ptr %4, align 1
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %41 = load ptr, ptr %.reload16, align 8
  %42 = load ptr, ptr %15, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 88, ptr %42)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %44 = load i32, ptr %.reload9, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 3
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load i1, ptr %4, align 1
  call void %49(ptr %41, i1 %50) #15
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %51 = load ptr, ptr %.reload15, align 8
  %52 = load ptr, ptr %15, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 88, ptr %52)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %54 = load i32, ptr %.reload8, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = call { ptr, ptr, ptr, i32 } %59(ptr %51) #16
  store { ptr, ptr, ptr, i32 } %60, ptr %5, align 8
  call void @assume_offset(ptr %5, ptr @Iterator)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %71, 3
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %62)
  %75 = getelementptr ptr, ptr %62, i32 %71
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @behavior_wrapper(ptr %77, { ptr, ptr, ptr, i32 } %72, ptr %7)
  %79 = call { ptr, i160 } %78({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr %6) #17
  store { ptr, i160 } %79, ptr %8, align 8
  %80 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, i160 } undef, ptr %81, 0
  %83 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %84 = load i160, ptr %83, align 4
  %85 = insertvalue { ptr, i160 } %82, i160 %84, 1
  store { ptr, i160 } %85, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem19, align 8
  br label %132

86:                                               ; preds = %3
  store i1 true, ptr %9, align 1
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %87 = load ptr, ptr %.reload14, align 8
  %88 = load ptr, ptr %15, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 88, ptr %88)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %90 = load i32, ptr %.reload7, align 4
  %91 = getelementptr ptr, ptr %88, i32 %90
  %92 = getelementptr ptr, ptr %91, i32 3
  %93 = load ptr, ptr %92, align 8
  %94 = getelementptr { ptr, ptr }, ptr %93, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = load i1, ptr %9, align 1
  call void %95(ptr %87, i1 %96) #15
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %97 = load ptr, ptr %.reload13, align 8
  %98 = load ptr, ptr %15, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 88, ptr %98)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %100 = load i32, ptr %.reload6, align 4
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = getelementptr ptr, ptr %101, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = getelementptr { ptr, ptr }, ptr %103, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = call { ptr, ptr, ptr, i32 } %105(ptr %97) #16
  store { ptr, ptr, ptr, i32 } %106, ptr %10, align 8
  call void @assume_offset(ptr %10, ptr @Iterator)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 2
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %117, 3
  %119 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %120 = call ptr @llvm.invariant.start.p0(i64 24, ptr %108)
  %121 = getelementptr ptr, ptr %108, i32 %117
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @behavior_wrapper(ptr %123, { ptr, ptr, ptr, i32 } %118, ptr %12)
  %125 = call { ptr, i160 } %124({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr %11) #17
  store { ptr, i160 } %125, ptr %13, align 8
  %126 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, i160 } undef, ptr %127, 0
  %129 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 1
  %130 = load i160, ptr %129, align 4
  %131 = insertvalue { ptr, i160 } %128, i160 %130, 1
  store { ptr, i160 } %131, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem19, align 8
  br label %132

132:                                              ; preds = %86, %40
  %.reload20 = load { ptr, i160 }, ptr %.reg2mem19, align 8
  store { ptr, i160 } %.reload20, ptr %.reg2mem, align 8
  br label %133

133:                                              ; preds = %132
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i1 @InterleaveIterator_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @InterleaveIterator_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca i1, align 1
  store i1 %1, ptr %21, align 1
  %22 = load i1, ptr %21, align 1
  store i1 %22, ptr %20, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @InterleaveIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @InterleaveIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { i64, i64 } @_data_size_ChainIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ChainIterable_field_ChainIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ChainIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 15, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [50 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ChainIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [50 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ChainIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 18, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @ChainIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @ChainIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ChainIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 400, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 400, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ChainIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 400, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 400, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #16
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  call void @assume_offset(ptr %74, ptr @Iterable)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = alloca [0 x ptr], align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %87)
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %76)
  %90 = getelementptr ptr, ptr %76, i32 %85
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = alloca {}, align 8
  %94 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %86, ptr %93)
  %95 = call { ptr, ptr, ptr, i32 } %94({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %87) #17
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %95, ptr %96, align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator)
  %110 = load ptr, ptr %10, align 8
  %111 = load ptr, ptr %5, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 400, ptr %111)
  %113 = load i32, ptr %16, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = call ptr @typegetter_wrapper(ptr %115, ptr %110)
  %117 = alloca [2 x ptr], align 8
  store ptr @ChainIterator, ptr %117, align 8
  %118 = getelementptr ptr, ptr %117, i32 1
  store ptr %116, ptr %118, align 8
  %119 = load ptr, ptr %117, align 8
  %120 = getelementptr ptr, ptr %119, i32 6
  %121 = load ptr, ptr %120, align 8
  %122 = call { i64, i64 } @size_wrapper(ptr %121, ptr %117)
  %123 = extractvalue { i64, i64 } %122, 0
  %124 = call ptr @bump_malloc(i64 %123)
  store ptr %116, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 8, ptr %124)
  %126 = alloca i32, align 4
  %127 = alloca ptr, align 8
  %128 = alloca ptr, align 8
  %129 = alloca ptr, align 8
  store ptr @ChainIterator, ptr %129, align 8
  store ptr %124, ptr %128, align 8
  store i32 10, ptr %126, align 4
  %130 = load ptr, ptr %10, align 8
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 400, ptr %131)
  %133 = load i32, ptr %16, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #16
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %139, ptr %140, align 8
  call void @assume_offset(ptr %140, ptr @Iterable)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %145, 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %148, 2
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %151 = load i32, ptr %150, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %151, 3
  %153 = alloca [0 x ptr], align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 0, ptr %153)
  %155 = call ptr @llvm.invariant.start.p0(i64 184, ptr %142)
  %156 = getelementptr ptr, ptr %142, i32 %151
  %157 = getelementptr ptr, ptr %156, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = alloca {}, align 8
  %160 = call ptr @behavior_wrapper(ptr %158, { ptr, ptr, ptr, i32 } %152, ptr %159)
  %161 = call { ptr, ptr, ptr, i32 } %160({ ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %152, ptr %153) #17
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %161, ptr %162, align 8
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %163, ptr @Iterator)
  %176 = load ptr, ptr %10, align 8
  %177 = load ptr, ptr %5, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 400, ptr %177)
  %179 = load i32, ptr %16, align 4
  %180 = getelementptr ptr, ptr %177, i32 %179
  %181 = getelementptr ptr, ptr %180, i32 2
  %182 = load ptr, ptr %181, align 8
  %183 = getelementptr { ptr, ptr }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = call { ptr, ptr, ptr, i32 } %184(ptr %176) #16
  %186 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %185, ptr %186, align 8
  call void @assume_offset(ptr %186, ptr @Iterable)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %194, 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %197, 3
  %199 = alloca [0 x ptr], align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 0, ptr %199)
  %201 = call ptr @llvm.invariant.start.p0(i64 184, ptr %188)
  %202 = getelementptr ptr, ptr %188, i32 %197
  %203 = getelementptr ptr, ptr %202, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = alloca {}, align 8
  %206 = call ptr @behavior_wrapper(ptr %204, { ptr, ptr, ptr, i32 } %198, ptr %205)
  %207 = call { ptr, ptr, ptr, i32 } %206({ ptr, ptr, ptr, i32 } %198, { ptr, ptr, ptr, i32 } %198, ptr %199) #17
  %208 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %207, ptr %208, align 8
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %221 = load i32, ptr %219, align 4
  store i32 %221, ptr %220, align 4
  call void @set_offset(ptr %209, ptr @Iterator)
  %222 = alloca { ptr, ptr, ptr, i32 }, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %224 = load ptr, ptr %165, align 8
  store ptr %224, ptr %223, align 8
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %226 = load ptr, ptr %168, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %228 = load ptr, ptr %171, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %230 = load i32, ptr %174, align 4
  store i32 %230, ptr %229, align 4
  call void @set_offset(ptr %222, ptr @Iterator)
  %231 = load ptr, ptr %223, align 8
  %232 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %231, 0
  %233 = load ptr, ptr %225, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } %232, ptr %233, 1
  %235 = load ptr, ptr %227, align 8
  %236 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %235, 2
  %237 = load i32, ptr %229, align 4
  %238 = insertvalue { ptr, ptr, ptr, i32 } %236, i32 %237, 3
  %239 = alloca { ptr, ptr, ptr, i32 }, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 0
  %241 = load ptr, ptr %211, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 1
  %243 = load ptr, ptr %214, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 2
  %245 = load ptr, ptr %217, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 3
  %247 = load i32, ptr %220, align 4
  store i32 %247, ptr %246, align 4
  call void @set_offset(ptr %239, ptr @Iterator)
  %248 = load ptr, ptr %240, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = load ptr, ptr %242, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %250, 1
  %252 = load ptr, ptr %244, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } %251, ptr %252, 2
  %254 = load i32, ptr %246, align 4
  %255 = insertvalue { ptr, ptr, ptr, i32 } %253, i32 %254, 3
  %256 = load ptr, ptr %129, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %256, 0
  %258 = load ptr, ptr %128, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %257, ptr %258, 1
  %260 = load ptr, ptr %127, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } %259, ptr %260, 2
  %262 = load i32, ptr %126, align 4
  %263 = insertvalue { ptr, ptr, ptr, i32 } %261, i32 %262, 3
  %264 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %265 = getelementptr [3 x ptr], ptr %264, i32 0, i32 1
  store ptr %116, ptr %265, align 8
  %266 = getelementptr [3 x ptr], ptr %264, i32 0, i32 2
  store ptr null, ptr %266, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 16, ptr %264)
  store ptr @Iterator, ptr %264, align 8
  %268 = alloca [2 x ptr], align 8
  %269 = getelementptr [2 x ptr], ptr %268, i32 0, i32 0
  store ptr %264, ptr %269, align 8
  %270 = getelementptr [2 x ptr], ptr %268, i32 0, i32 1
  store ptr %264, ptr %270, align 8
  %271 = call ptr @llvm.invariant.start.p0(i64 4, ptr %268)
  %272 = call ptr @llvm.invariant.start.p0(i64 88, ptr %256)
  %273 = getelementptr ptr, ptr %256, i32 %262
  %274 = getelementptr ptr, ptr %273, i32 4
  %275 = load ptr, ptr %274, align 8
  %276 = alloca { ptr, ptr }, align 8
  %277 = getelementptr { ptr, ptr }, ptr %276, i32 0, i32 0
  store ptr %231, ptr %277, align 8
  %278 = getelementptr { ptr, ptr }, ptr %276, i32 0, i32 1
  store ptr %248, ptr %278, align 8
  %279 = call ptr @behavior_wrapper(ptr %275, { ptr, ptr, ptr, i32 } %263, ptr %276)
  call void %279({ ptr, ptr, ptr, i32 } %263, { ptr, ptr, ptr, i32 } %263, ptr %268, { ptr, ptr, ptr, i32 } %238, { ptr, ptr, ptr, i32 } %255) #17
  %280 = alloca { ptr, ptr, ptr, i32 }, align 8
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 0
  %282 = load ptr, ptr %129, align 8
  store ptr %282, ptr %281, align 8
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 1
  %284 = load ptr, ptr %128, align 8
  store ptr %284, ptr %283, align 8
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 2
  %286 = load ptr, ptr %127, align 8
  store ptr %286, ptr %285, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 3
  %288 = load i32, ptr %126, align 4
  store i32 %288, ptr %287, align 4
  call void @set_offset(ptr %280, ptr @Iterator)
  %289 = load ptr, ptr %281, align 8
  %290 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %289, 0
  %291 = load ptr, ptr %283, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } %290, ptr %291, 1
  %293 = load ptr, ptr %285, align 8
  %294 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %293, 2
  %295 = load i32, ptr %287, align 4
  %296 = insertvalue { ptr, ptr, ptr, i32 } %294, i32 %295, 3
  ret { ptr, ptr, ptr, i32 } %296
}

define { i64, i64 } @_data_size_ChainIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @ChainIterator_field_ChainIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterator, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterator to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 6, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [11 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ChainIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [11 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ChainIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ChainIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterator)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterator)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 88, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  %100 = alloca i1, align 1
  store i1 true, ptr %100, align 1
  %101 = load ptr, ptr %12, align 8
  %102 = load ptr, ptr %7, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = load i32, ptr %18, align 4
  %105 = getelementptr ptr, ptr %102, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 3
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load i1, ptr %100, align 1
  call void %109(ptr %101, i1 %110) #15
  ret void
}

define { ptr, i160 } @ChainIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca { ptr, i160 }, align 8
  %12 = alloca i1, align 1
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i1, align 1
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca { ptr, i160 }, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem25 = alloca { ptr, i160 }, align 8
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca { ptr, i160 }, align 8
  %.reg2mem31 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  store ptr %22, ptr %.reg2mem18, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload24 = load ptr, ptr %.reg2mem18, align 8
  store ptr %23, ptr %.reload24, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr %28, ptr %.reg2mem11, align 8
  %29 = load i32, ptr %27, align 4
  %.reload17 = load ptr, ptr %.reg2mem11, align 8
  store i32 %29, ptr %.reload17, align 4
  call void @set_offset(ptr %17, ptr @ChainIterator)
  %30 = alloca i1, align 1
  store i1 false, ptr %30, align 1
  %.reload23 = load ptr, ptr %.reg2mem18, align 8
  %31 = load ptr, ptr %.reload23, align 8
  %32 = load ptr, ptr %17, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 88, ptr %32)
  %.reload16 = load ptr, ptr %.reg2mem11, align 8
  %34 = load i32, ptr %.reload16, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 3
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call i1 %39(ptr %31) #16
  %41 = alloca i1, align 1
  store i1 %40, ptr %41, align 1
  %42 = load i1, ptr %30, align 1
  %43 = load i1, ptr %41, align 1
  %44 = icmp eq i1 %42, %43
  %45 = alloca i1, align 1
  store i1 %44, ptr %45, align 1
  %46 = load i1, ptr %45, align 1
  br i1 %46, label %47, label %83

47:                                               ; preds = %3
  %.reload22 = load ptr, ptr %.reg2mem18, align 8
  %48 = load ptr, ptr %.reload22, align 8
  %49 = load ptr, ptr %17, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 88, ptr %49)
  %.reload15 = load ptr, ptr %.reg2mem11, align 8
  %51 = load i32, ptr %.reload15, align 4
  %52 = getelementptr ptr, ptr %49, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = call { ptr, ptr, ptr, i32 } %56(ptr %48) #16
  store { ptr, ptr, ptr, i32 } %57, ptr %4, align 8
  call void @assume_offset(ptr %4, ptr @Iterator)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  %70 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %71 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %72 = getelementptr ptr, ptr %59, i32 %68
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %69, ptr %6)
  %76 = call { ptr, i160 } %75({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr %5) #17
  store { ptr, i160 } %76, ptr %7, align 8
  %77 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, i160 } undef, ptr %78, 0
  %80 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %81 = load i160, ptr %80, align 4
  %82 = insertvalue { ptr, i160 } %79, i160 %81, 1
  store { ptr, i160 } %82, ptr %.reg2mem9, align 8
  %.reload10 = load { ptr, i160 }, ptr %.reg2mem9, align 8
  store i32 0, ptr %.reg2mem27, align 4
  store { ptr, i160 } %.reload10, ptr %.reg2mem29, align 8
  br label %153

83:                                               ; preds = %3
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  %84 = load ptr, ptr %.reload21, align 8
  %85 = load ptr, ptr %17, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 88, ptr %85)
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %87 = load i32, ptr %.reload14, align 4
  %88 = getelementptr ptr, ptr %85, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call { ptr, ptr, ptr, i32 } %92(ptr %84) #16
  store { ptr, ptr, ptr, i32 } %93, ptr %8, align 8
  call void @assume_offset(ptr %8, ptr @Iterator)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 2
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %104, 3
  %106 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %107 = call ptr @llvm.invariant.start.p0(i64 24, ptr %95)
  %108 = getelementptr ptr, ptr %95, i32 %104
  %109 = getelementptr ptr, ptr %108, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = call ptr @behavior_wrapper(ptr %110, { ptr, ptr, ptr, i32 } %105, ptr %10)
  %112 = call { ptr, i160 } %111({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr %9) #17
  store { ptr, i160 } %112, ptr %11, align 8
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %113 = load ptr, ptr %.reload20, align 8
  %114 = load ptr, ptr %17, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 88, ptr %114)
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %116 = load i32, ptr %.reload13, align 4
  %117 = getelementptr ptr, ptr %114, i32 %116
  %118 = load ptr, ptr %117, align 8
  %119 = call ptr @typegetter_wrapper(ptr %118, ptr %113)
  %120 = load ptr, ptr %11, align 8
  %121 = ptrtoint ptr %120 to i64
  %122 = icmp eq i64 %121, ptrtoint (ptr @nil_typ to i64)
  %123 = icmp eq i64 %121, 0
  %124 = or i1 %122, %123
  %125 = icmp eq i1 %124, false
  store i1 %125, ptr %12, align 1
  %126 = load i1, ptr %12, align 1
  %127 = xor i1 %126, true
  %128 = zext i1 %127 to i32
  store i32 %128, ptr %.reg2mem7, align 4
  br i1 %126, label %129, label %138

129:                                              ; preds = %83
  %130 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  store ptr %131, ptr %14, align 8
  %132 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 1
  %133 = load i160, ptr %132, align 4
  store i160 %133, ptr %13, align 4
  %134 = load ptr, ptr %14, align 8
  %135 = insertvalue { ptr, i160 } undef, ptr %134, 0
  %136 = load i160, ptr %13, align 4
  %137 = insertvalue { ptr, i160 } %135, i160 %136, 1
  store { ptr, i160 } %137, ptr %.reg2mem5, align 8
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem31, align 8
  br label %151

138:                                              ; preds = %83
  br label %139

139:                                              ; preds = %._crit_edge, %138
  store i1 false, ptr %15, align 1
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %140 = load ptr, ptr %.reload19, align 8
  %141 = load ptr, ptr %17, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 88, ptr %141)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %143 = load i32, ptr %.reload12, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 3
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr }, ptr %146, i32 0, i32 1
  %148 = load ptr, ptr %147, align 8
  %149 = load i1, ptr %15, align 1
  call void %148(ptr %140, i1 %149) #15
  br i1 true, label %._crit_edge, label %150

._crit_edge:                                      ; preds = %139
  br label %139

150:                                              ; preds = %139
  store { ptr, i160 } poison, ptr %.reg2mem31, align 8
  br label %151

151:                                              ; preds = %150, %129
  %.reload32 = load { ptr, i160 }, ptr %.reg2mem31, align 8
  store { ptr, i160 } %.reload32, ptr %.reg2mem3, align 8
  br label %152

152:                                              ; preds = %151
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem27, align 4
  store { ptr, i160 } %.reload4, ptr %.reg2mem29, align 8
  br label %153

153:                                              ; preds = %152, %47
  %.reload30 = load { ptr, i160 }, ptr %.reg2mem29, align 8
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store { ptr, i160 } %.reload30, ptr %.reg2mem1, align 8
  store i32 %.reload28, ptr %.reg2mem, align 4
  br label %154

154:                                              ; preds = %153
  %.reload = load i32, ptr %.reg2mem, align 4
  %155 = zext i32 %.reload to i64
  %156 = trunc i64 %155 to i32
  switch i32 %156, label %158 [
    i32 0, label %157
  ]

157:                                              ; preds = %154
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem25, align 8
  br label %159

158:                                              ; preds = %154
  store { ptr, i160 } poison, ptr %.reg2mem25, align 8
  br label %159

159:                                              ; preds = %158, %157
  %.reload26 = load { ptr, i160 }, ptr %.reg2mem25, align 8
  ret { ptr, i160 } %.reload26
}

define i1 @ChainIterator_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @ChainIterator_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca i1, align 1
  store i1 %1, ptr %21, align 1
  %22 = load i1, ptr %21, align 1
  store i1 %22, ptr %20, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ChainIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ChainIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { i64, i64 } @_data_size_FilterIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FilterIterable_field_FilterIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 15, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FilterIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [50 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @FilterIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 18, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FilterIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @FilterIterable_init_iterableIterableT_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @FilterIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 400, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 400, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @FilterIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 400, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 400, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %64) #16
  %74 = alloca ptr, align 8
  store { ptr } %73, ptr %74, align 8
  %75 = load ptr, ptr %10, align 8
  %76 = load ptr, ptr %5, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 400, ptr %76)
  %78 = load i32, ptr %16, align 4
  %79 = getelementptr ptr, ptr %76, i32 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %75)
  %82 = alloca [2 x ptr], align 8
  store ptr @FilterIterator, ptr %82, align 8
  %83 = getelementptr ptr, ptr %82, i32 1
  store ptr %81, ptr %83, align 8
  %84 = load ptr, ptr %82, align 8
  %85 = getelementptr ptr, ptr %84, i32 6
  %86 = load ptr, ptr %85, align 8
  %87 = call { i64, i64 } @size_wrapper(ptr %86, ptr %82)
  %88 = extractvalue { i64, i64 } %87, 0
  %89 = call ptr @bump_malloc(i64 %88)
  store ptr %81, ptr %89, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 8, ptr %89)
  %91 = alloca i32, align 4
  %92 = alloca ptr, align 8
  %93 = alloca ptr, align 8
  %94 = alloca ptr, align 8
  store ptr @FilterIterator, ptr %94, align 8
  store ptr %89, ptr %93, align 8
  store i32 10, ptr %91, align 4
  %95 = load ptr, ptr %10, align 8
  %96 = load ptr, ptr %5, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 400, ptr %96)
  %98 = load i32, ptr %16, align 4
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = getelementptr ptr, ptr %99, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = getelementptr { ptr, ptr }, ptr %101, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = call { ptr, ptr, ptr, i32 } %103(ptr %95) #16
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %104, ptr %105, align 8
  call void @assume_offset(ptr %105, ptr @Iterable)
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %110, 1
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 2
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 %116, 3
  %118 = alloca [0 x ptr], align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 0, ptr %118)
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %107)
  %121 = getelementptr ptr, ptr %107, i32 %116
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = alloca {}, align 8
  %125 = call ptr @behavior_wrapper(ptr %123, { ptr, ptr, ptr, i32 } %117, ptr %124)
  %126 = call { ptr, ptr, ptr, i32 } %125({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %118) #17
  %127 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %126, ptr %127, align 8
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 0
  %131 = load ptr, ptr %129, align 8
  store ptr %131, ptr %130, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %134 = load ptr, ptr %132, align 8
  store ptr %134, ptr %133, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 2
  %137 = load ptr, ptr %135, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 3
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %140 = load i32, ptr %138, align 4
  store i32 %140, ptr %139, align 4
  call void @set_offset(ptr %128, ptr @Iterator)
  %141 = load ptr, ptr %10, align 8
  %142 = load ptr, ptr %5, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 400, ptr %142)
  %144 = load i32, ptr %16, align 4
  %145 = getelementptr ptr, ptr %142, i32 %144
  %146 = getelementptr ptr, ptr %145, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = getelementptr { ptr, ptr }, ptr %147, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  %150 = call { ptr } %149(ptr %141) #16
  %151 = alloca ptr, align 8
  store { ptr } %150, ptr %151, align 8
  %152 = alloca { ptr, ptr, ptr, i32 }, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %154 = load ptr, ptr %130, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %156 = load ptr, ptr %133, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %158 = load ptr, ptr %136, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %160 = load i32, ptr %139, align 4
  store i32 %160, ptr %159, align 4
  call void @set_offset(ptr %152, ptr @Iterator)
  %161 = load ptr, ptr %153, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %161, 0
  %163 = load ptr, ptr %155, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %162, ptr %163, 1
  %165 = load ptr, ptr %157, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %165, 2
  %167 = load i32, ptr %159, align 4
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, i32 %167, 3
  %169 = load ptr, ptr %151, align 8
  %170 = insertvalue { ptr } undef, ptr %169, 0
  %171 = load ptr, ptr %94, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %93, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %92, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %91, align 4
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %180 = getelementptr [3 x ptr], ptr %179, i32 0, i32 1
  store ptr %81, ptr %180, align 8
  %181 = getelementptr [3 x ptr], ptr %179, i32 0, i32 2
  store ptr null, ptr %181, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 16, ptr %179)
  store ptr @Iterator, ptr %179, align 8
  %183 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %184 = getelementptr [4 x ptr], ptr %183, i32 0, i32 2
  store ptr %81, ptr %184, align 8
  %185 = getelementptr [4 x ptr], ptr %183, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %185, align 8
  %186 = getelementptr [4 x ptr], ptr %183, i32 0, i32 3
  store ptr null, ptr %186, align 8
  %187 = call ptr @llvm.invariant.start.p0(i64 24, ptr %183)
  store ptr @function_typ, ptr %183, align 8
  %188 = alloca [2 x ptr], align 8
  %189 = getelementptr [2 x ptr], ptr %188, i32 0, i32 0
  store ptr %179, ptr %189, align 8
  %190 = getelementptr [2 x ptr], ptr %188, i32 0, i32 1
  store ptr %183, ptr %190, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 4, ptr %188)
  %192 = call ptr @llvm.invariant.start.p0(i64 80, ptr %171)
  %193 = getelementptr ptr, ptr %171, i32 %177
  %194 = getelementptr ptr, ptr %193, i32 3
  %195 = load ptr, ptr %194, align 8
  %196 = alloca { ptr, ptr }, align 8
  %197 = getelementptr { ptr, ptr }, ptr %196, i32 0, i32 0
  store ptr %161, ptr %197, align 8
  %198 = getelementptr { ptr, ptr }, ptr %196, i32 0, i32 1
  store ptr @function_typ, ptr %198, align 8
  %199 = call ptr @behavior_wrapper(ptr %195, { ptr, ptr, ptr, i32 } %178, ptr %196)
  call void %199({ ptr, ptr, ptr, i32 } %178, { ptr, ptr, ptr, i32 } %178, ptr %188, { ptr, ptr, ptr, i32 } %168, { ptr } %170) #17
  %200 = alloca { ptr, ptr, ptr, i32 }, align 8
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 0
  %202 = load ptr, ptr %94, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 1
  %204 = load ptr, ptr %93, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 2
  %206 = load ptr, ptr %92, align 8
  store ptr %206, ptr %205, align 8
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 3
  %208 = load i32, ptr %91, align 4
  store i32 %208, ptr %207, align 4
  call void @set_offset(ptr %200, ptr @Iterator)
  %209 = load ptr, ptr %201, align 8
  %210 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %209, 0
  %211 = load ptr, ptr %203, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %211, 1
  %213 = load ptr, ptr %205, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %212, ptr %213, 2
  %215 = load i32, ptr %207, align 4
  %216 = insertvalue { ptr, ptr, ptr, i32 } %214, i32 %215, 3
  ret { ptr, ptr, ptr, i32 } %216
}

define { i64, i64 } @_data_size_FilterIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FilterIterator_field_FilterIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 5, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [10 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FilterIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @FilterIterator_init_iteratorIteratorT_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @FilterIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 80, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 80, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #15
  ret void
}

define { ptr, i160 } @FilterIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i1, align 1
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca [0 x ptr], align 8
  %13 = alloca {}, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca [0 x i8], align 1
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem30 = alloca { ptr, i160 }, align 8
  %.reg2mem32 = alloca i32, align 4
  %.reg2mem34 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem24, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload29 = load ptr, ptr %.reg2mem24, align 8
  store ptr %25, ptr %.reload29, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem18, align 8
  %31 = load i32, ptr %29, align 4
  %.reload23 = load ptr, ptr %.reg2mem18, align 8
  store i32 %31, ptr %.reload23, align 4
  call void @set_offset(ptr %19, ptr @FilterIterator)
  %.reload28 = load ptr, ptr %.reg2mem24, align 8
  %32 = load ptr, ptr %.reload28, align 8
  %33 = load ptr, ptr %19, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 80, ptr %33)
  %.reload22 = load ptr, ptr %.reg2mem18, align 8
  %35 = load i32, ptr %.reload22, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr, ptr, ptr, i32 } %40(ptr %32) #16
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  call void @assume_offset(ptr %42, ptr @Iterator)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %47, 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %53, 3
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 0, ptr %55)
  %57 = call ptr @llvm.invariant.start.p0(i64 24, ptr %44)
  %58 = getelementptr ptr, ptr %44, i32 %53
  %59 = getelementptr ptr, ptr %58, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = alloca {}, align 8
  %62 = call ptr @behavior_wrapper(ptr %60, { ptr, ptr, ptr, i32 } %54, ptr %61)
  %63 = call { ptr, i160 } %62({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr %55) #17
  %64 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %63, ptr %64, align 8
  br label %65

65:                                               ; preds = %147, %3
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %66 = load ptr, ptr %.reload27, align 8
  %67 = load ptr, ptr %19, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 80, ptr %67)
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  %69 = load i32, ptr %.reload21, align 4
  %70 = getelementptr ptr, ptr %67, i32 %69
  %71 = load ptr, ptr %70, align 8
  %72 = call ptr @typegetter_wrapper(ptr %71, ptr %66)
  %73 = load ptr, ptr %64, align 8
  %74 = ptrtoint ptr %73 to i64
  %75 = icmp eq i64 %74, ptrtoint (ptr @nil_typ to i64)
  %76 = icmp eq i64 %74, 0
  %77 = or i1 %75, %76
  %78 = icmp eq i1 %77, false
  store i1 %78, ptr %4, align 1
  %79 = load i1, ptr %4, align 1
  br i1 %79, label %80, label %143

80:                                               ; preds = %65
  %81 = getelementptr { ptr, i160 }, ptr %64, i32 0, i32 0
  store ptr %81, ptr %.reg2mem15, align 8
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %82 = load ptr, ptr %.reload17, align 8
  store ptr %82, ptr %6, align 8
  %83 = getelementptr { ptr, i160 }, ptr %64, i32 0, i32 1
  store ptr %83, ptr %.reg2mem12, align 8
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %84 = load i160, ptr %.reload14, align 4
  store i160 %84, ptr %5, align 4
  %85 = load ptr, ptr %6, align 8
  store ptr %85, ptr %8, align 8
  %86 = load i160, ptr %5, align 4
  store i160 %86, ptr %7, align 4
  %87 = load ptr, ptr %8, align 8
  %88 = insertvalue { ptr, i160 } undef, ptr %87, 0
  %89 = load i160, ptr %7, align 4
  %90 = insertvalue { ptr, i160 } %88, i160 %89, 1
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  %91 = load ptr, ptr %.reload26, align 8
  %92 = load ptr, ptr %19, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 80, ptr %92)
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %94 = load i32, ptr %.reload20, align 4
  %95 = getelementptr ptr, ptr %92, i32 %94
  %96 = getelementptr ptr, ptr %95, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr { ptr, ptr }, ptr %97, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = call { ptr } %99(ptr %91) #16
  store { ptr } %100, ptr %9, align 8
  %101 = load ptr, ptr %9, align 8
  %102 = call i1 %101({ ptr, i160 } %90)
  store i1 %102, ptr %10, align 1
  %103 = load i1, ptr %10, align 1
  %104 = zext i1 %103 to i32
  store i32 %104, ptr %.reg2mem10, align 4
  %105 = xor i1 %103, true
  %106 = zext i1 %105 to i32
  store i32 %106, ptr %.reg2mem8, align 4
  br i1 %103, label %107, label %108

107:                                              ; preds = %80
  br label %142

108:                                              ; preds = %80
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %109 = load ptr, ptr %.reload25, align 8
  %110 = load ptr, ptr %19, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 80, ptr %110)
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %112 = load i32, ptr %.reload19, align 4
  %113 = getelementptr ptr, ptr %110, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call { ptr, ptr, ptr, i32 } %117(ptr %109) #16
  store { ptr, ptr, ptr, i32 } %118, ptr %11, align 8
  call void @assume_offset(ptr %11, ptr @Iterator)
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %126, 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %129 = load i32, ptr %128, align 4
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, i32 %129, 3
  %131 = call ptr @llvm.invariant.start.p0(i64 0, ptr %12)
  %132 = call ptr @llvm.invariant.start.p0(i64 24, ptr %120)
  %133 = getelementptr ptr, ptr %120, i32 %129
  %134 = getelementptr ptr, ptr %133, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = call ptr @behavior_wrapper(ptr %135, { ptr, ptr, ptr, i32 } %130, ptr %13)
  %137 = call { ptr, i160 } %136({ ptr, ptr, ptr, i32 } %130, { ptr, ptr, ptr, i32 } %130, ptr %12) #17
  store { ptr, i160 } %137, ptr %14, align 8
  %138 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  store ptr %139, ptr %.reload16, align 8
  %140 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 1
  %141 = load i160, ptr %140, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  store i160 %141, ptr %.reload13, align 4
  br label %142

142:                                              ; preds = %108, %107
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem32, align 4
  store i32 %.reload11, ptr %.reg2mem34, align 4
  br label %144

143:                                              ; preds = %65
  store i32 0, ptr %.reg2mem32, align 4
  store i32 2, ptr %.reg2mem34, align 4
  br label %144

144:                                              ; preds = %143, %142
  %.reload35 = load i32, ptr %.reg2mem34, align 4
  %.reload33 = load i32, ptr %.reg2mem32, align 4
  store i32 %.reload35, ptr %.reg2mem5, align 4
  store i32 %.reload33, ptr %.reg2mem3, align 4
  br label %145

145:                                              ; preds = %144
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %146 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %146, label %147, label %148

147:                                              ; preds = %145
  br label %65

148:                                              ; preds = %145
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %149 = zext i32 %.reload6 to i64
  %150 = trunc i64 %149 to i32
  switch i32 %150, label %156 [
    i32 1, label %151
  ]

151:                                              ; preds = %148
  %152 = load ptr, ptr %6, align 8
  %153 = insertvalue { ptr, i160 } undef, ptr %152, 0
  %154 = load i160, ptr %5, align 4
  %155 = insertvalue { ptr, i160 } %153, i160 %154, 1
  store { ptr, i160 } %155, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem30, align 8
  br label %162

156:                                              ; preds = %148
  %157 = load [0 x i8], ptr %15, align 1
  store [0 x i8] %157, ptr %16, align 1
  store ptr @nil_typ, ptr %17, align 8
  %158 = load ptr, ptr %17, align 8
  %159 = insertvalue { ptr, i160 } undef, ptr %158, 0
  %160 = load i160, ptr %16, align 4
  %161 = insertvalue { ptr, i160 } %159, i160 %160, 1
  store { ptr, i160 } %161, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem30, align 8
  br label %162

162:                                              ; preds = %156, %151
  %.reload31 = load { ptr, i160 }, ptr %.reg2mem30, align 8
  ret { ptr, i160 } %.reload31
}

define { ptr } @FilterIterator_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @FilterIterator_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterator_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FilterIterator_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr } @FilterIterable_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @FilterIterable_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FilterIterable_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { i64, i64 } @_data_size_MapIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @MapIterator_field_MapIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @MapIterator_field_MapIterator_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 6, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [11 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @MapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [11 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @MapIterator_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @MapIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 88, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 3
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #15
  ret void
}

define { ptr, i160 } @MapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca [0 x i8], align 1
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %13, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  store ptr %19, ptr %.reg2mem10, align 8
  %20 = load ptr, ptr %18, align 8
  %.reload14 = load ptr, ptr %.reg2mem10, align 8
  store ptr %20, ptr %.reload14, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  store ptr %25, ptr %.reg2mem5, align 8
  %26 = load i32, ptr %24, align 4
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  store i32 %26, ptr %.reload9, align 4
  call void @set_offset(ptr %14, ptr @MapIterator)
  %.reload13 = load ptr, ptr %.reg2mem10, align 8
  %27 = load ptr, ptr %.reload13, align 8
  %28 = load ptr, ptr %14, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 88, ptr %28)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %30 = load i32, ptr %.reload8, align 4
  %31 = getelementptr ptr, ptr %28, i32 %30
  %32 = getelementptr ptr, ptr %31, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr { ptr, ptr }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = call { ptr, ptr, ptr, i32 } %35(ptr %27) #16
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %36, ptr %37, align 8
  call void @assume_offset(ptr %37, ptr @Iterator)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %42, 1
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %45, 2
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %48, 3
  %50 = alloca [0 x ptr], align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr %50)
  %52 = call ptr @llvm.invariant.start.p0(i64 24, ptr %39)
  %53 = getelementptr ptr, ptr %39, i32 %48
  %54 = getelementptr ptr, ptr %53, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = alloca {}, align 8
  %57 = call ptr @behavior_wrapper(ptr %55, { ptr, ptr, ptr, i32 } %49, ptr %56)
  %58 = call { ptr, i160 } %57({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr %50) #17
  %59 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %58, ptr %59, align 8
  %.reload12 = load ptr, ptr %.reg2mem10, align 8
  %60 = load ptr, ptr %.reload12, align 8
  %61 = load ptr, ptr %14, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 88, ptr %61)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %63 = load i32, ptr %.reload7, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr @typegetter_wrapper(ptr %65, ptr %60)
  %67 = load ptr, ptr %59, align 8
  %68 = ptrtoint ptr %67 to i64
  %69 = icmp eq i64 %68, ptrtoint (ptr @nil_typ to i64)
  %70 = icmp eq i64 %68, 0
  %71 = or i1 %69, %70
  %72 = icmp eq i1 %71, false
  %73 = alloca i1, align 1
  store i1 %72, ptr %73, align 1
  %74 = load i1, ptr %73, align 1
  br i1 %74, label %75, label %104

75:                                               ; preds = %3
  %76 = getelementptr { ptr, i160 }, ptr %59, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  store ptr %77, ptr %5, align 8
  %78 = getelementptr { ptr, i160 }, ptr %59, i32 0, i32 1
  %79 = load i160, ptr %78, align 4
  store i160 %79, ptr %4, align 4
  %80 = load ptr, ptr %5, align 8
  store ptr %80, ptr %7, align 8
  %81 = load i160, ptr %4, align 4
  store i160 %81, ptr %6, align 4
  %82 = load ptr, ptr %7, align 8
  %83 = insertvalue { ptr, i160 } undef, ptr %82, 0
  %84 = load i160, ptr %6, align 4
  %85 = insertvalue { ptr, i160 } %83, i160 %84, 1
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %86 = load ptr, ptr %.reload11, align 8
  %87 = load ptr, ptr %14, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 88, ptr %87)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %89 = load i32, ptr %.reload6, align 4
  %90 = getelementptr ptr, ptr %87, i32 %89
  %91 = getelementptr ptr, ptr %90, i32 3
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = call { ptr } %94(ptr %86) #16
  store { ptr } %95, ptr %8, align 8
  %96 = load ptr, ptr %8, align 8
  %97 = call { ptr, i160 } %96({ ptr, i160 } %85)
  store { ptr, i160 } %97, ptr %9, align 8
  %98 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, i160 } undef, ptr %99, 0
  %101 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %102 = load i160, ptr %101, align 4
  %103 = insertvalue { ptr, i160 } %100, i160 %102, 1
  store { ptr, i160 } %103, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem15, align 8
  br label %110

104:                                              ; preds = %3
  %105 = load [0 x i8], ptr %10, align 1
  store [0 x i8] %105, ptr %11, align 1
  store ptr @nil_typ, ptr %12, align 8
  %106 = load ptr, ptr %12, align 8
  %107 = insertvalue { ptr, i160 } undef, ptr %106, 0
  %108 = load i160, ptr %11, align 4
  %109 = insertvalue { ptr, i160 } %107, i160 %108, 1
  store { ptr, i160 } %109, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem15, align 8
  br label %110

110:                                              ; preds = %104, %75
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  store { ptr, i160 } %.reload16, ptr %.reg2mem, align 8
  br label %111

111:                                              ; preds = %110
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr } @MapIterator_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @MapIterator_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterator_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @MapIterator_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr } @MapIterable_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @MapIterable_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @MapIterable_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define ptr @Iterator_field_Iterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Iterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 2, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [3 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Iterable_field_Iterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Iterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [23 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Iterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 13, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 14, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [23 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Iterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 15, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 16, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Iterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Iterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Iterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define { i64, i64 } @_data_size_Math(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Math_B__Self_sqrt_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 7, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define ptr @Math_B__Self_abs_xPtrf64__Self_abs_xPtri32(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %0, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @f64_typ to i64)
  store i1 %8, ptr %2, align 1
  %9 = load i1, ptr %2, align 1
  %10 = select i1 %9, i32 8, i32 9
  store i32 %10, ptr %.reg2mem, align 4
  br i1 %9, label %11, label %12

11:                                               ; preds = %1
  br label %16

12:                                               ; preds = %1
  %13 = load ptr, ptr %0, align 8
  %14 = ptrtoint ptr %13 to i64
  %15 = icmp eq i64 %14, ptrtoint (ptr @i32_typ to i64)
  store i1 %15, ptr %3, align 1
  br label %16

16:                                               ; preds = %12, %11
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %5, align 4
  %17 = load i32, ptr %5, align 4
  %18 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %17
  %19 = getelementptr ptr, ptr %18, i32 10
  %20 = load ptr, ptr %19, align 8
  ret ptr %20
}

define ptr @Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %0, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @i32_typ to i64)
  store i1 %10, ptr %4, align 1
  %11 = load i1, ptr %4, align 1
  %12 = select i1 %11, i32 11, i32 10
  store i32 %12, ptr %.reg2mem, align 4
  br i1 %11, label %13, label %18

13:                                               ; preds = %1
  %14 = getelementptr ptr, ptr %0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = ptrtoint ptr %15 to i64
  %17 = icmp eq i64 %16, ptrtoint (ptr @i32_typ to i64)
  store i1 %17, ptr %2, align 1
  br label %26

18:                                               ; preds = %1
  %19 = load ptr, ptr %0, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @f64_typ to i64)
  store i1 %21, ptr %5, align 1
  %22 = getelementptr ptr, ptr %0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = ptrtoint ptr %23 to i64
  %25 = icmp eq i64 %24, ptrtoint (ptr @f64_typ to i64)
  store i1 %25, ptr %3, align 1
  br label %26

26:                                               ; preds = %18, %13
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %7, align 4
  %27 = load i32, ptr %7, align 4
  %28 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %27
  %29 = getelementptr ptr, ptr %28, i32 10
  %30 = load ptr, ptr %29, align 8
  ret ptr %30
}

define ptr @Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %0, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @i32_typ to i64)
  store i1 %10, ptr %4, align 1
  %11 = load i1, ptr %4, align 1
  %12 = select i1 %11, i32 12, i32 13
  store i32 %12, ptr %.reg2mem, align 4
  br i1 %11, label %13, label %18

13:                                               ; preds = %1
  %14 = getelementptr ptr, ptr %0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = ptrtoint ptr %15 to i64
  %17 = icmp eq i64 %16, ptrtoint (ptr @i32_typ to i64)
  store i1 %17, ptr %2, align 1
  br label %26

18:                                               ; preds = %1
  %19 = load ptr, ptr %0, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @f64_typ to i64)
  store i1 %21, ptr %5, align 1
  %22 = getelementptr ptr, ptr %0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = ptrtoint ptr %23 to i64
  %25 = icmp eq i64 %24, ptrtoint (ptr @f64_typ to i64)
  store i1 %25, ptr %3, align 1
  br label %26

26:                                               ; preds = %18, %13
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %7, align 4
  %27 = load i32, ptr %7, align 4
  %28 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %27
  %29 = getelementptr ptr, ptr %28, i32 10
  %30 = load ptr, ptr %29, align 8
  ret ptr %30
}

define ptr @Math_B__Self_round_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 14, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define ptr @Math_B__Self_floor_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 15, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define ptr @Math_B__Self_ceiling_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 16, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define double @Math__Self_sqrt_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.sqrt.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

define { ptr, i64 } @Math__Self_abs_xPtrf64(ptr %0, { ptr, i64 } %1) {
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca i64, align 8
  %10 = alloca ptr, align 8
  %11 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %11, align 8
  %12 = alloca double, align 8
  %13 = getelementptr { ptr, i64 }, ptr %11, i32 0, i32 1
  %14 = load double, ptr %13, align 8
  store double %14, ptr %12, align 8
  %15 = alloca double, align 8
  store double 0.000000e+00, ptr %15, align 8
  %16 = load double, ptr %12, align 8
  %17 = load double, ptr %15, align 8
  %18 = fcmp oge double %16, %17
  %19 = alloca i1, align 1
  store i1 %18, ptr %19, align 1
  %20 = load i1, ptr %19, align 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %2
  %22 = load double, ptr %12, align 8
  store double %22, ptr %3, align 8
  store ptr @f64_typ, ptr %4, align 8
  %23 = load ptr, ptr %4, align 8
  %24 = insertvalue { ptr, i64 } undef, ptr %23, 0
  %25 = load i64, ptr %3, align 4
  %26 = insertvalue { ptr, i64 } %24, i64 %25, 1
  store { ptr, i64 } %26, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem5, align 8
  br label %39

27:                                               ; preds = %2
  store double 0.000000e+00, ptr %5, align 8
  store double 1.000000e+00, ptr %6, align 8
  %28 = load double, ptr %5, align 8
  %29 = load double, ptr %6, align 8
  %30 = fsub double %28, %29
  store double %30, ptr %7, align 8
  %31 = load double, ptr %7, align 8
  %32 = load double, ptr %12, align 8
  %33 = fmul double %31, %32
  store double %33, ptr %8, align 8
  %34 = load double, ptr %8, align 8
  store double %34, ptr %9, align 8
  store ptr @f64_typ, ptr %10, align 8
  %35 = load ptr, ptr %10, align 8
  %36 = insertvalue { ptr, i64 } undef, ptr %35, 0
  %37 = load i64, ptr %9, align 4
  %38 = insertvalue { ptr, i64 } %36, i64 %37, 1
  store { ptr, i64 } %38, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem5, align 8
  br label %39

39:                                               ; preds = %27, %21
  %.reload6 = load { ptr, i64 }, ptr %.reg2mem5, align 8
  store { ptr, i64 } %.reload6, ptr %.reg2mem, align 8
  br label %40

40:                                               ; preds = %39
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_abs_xPtri32(ptr %0, { ptr, i64 } %1) {
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %9, align 8
  %10 = alloca i32, align 4
  %11 = getelementptr { ptr, i64 }, ptr %9, i32 0, i32 1
  %12 = load i32, ptr %11, align 4
  store i32 %12, ptr %10, align 4
  %13 = alloca i32, align 4
  store i32 0, ptr %13, align 4
  %14 = load i32, ptr %10, align 4
  %15 = load i32, ptr %13, align 4
  %16 = icmp sge i32 %14, %15
  %17 = alloca i1, align 1
  store i1 %16, ptr %17, align 1
  %18 = load i1, ptr %17, align 1
  br i1 %18, label %19, label %25

19:                                               ; preds = %2
  %20 = load i32, ptr %10, align 4
  store i32 %20, ptr %3, align 4
  store ptr @i32_typ, ptr %4, align 8
  %21 = load ptr, ptr %4, align 8
  %22 = insertvalue { ptr, i64 } undef, ptr %21, 0
  %23 = load i64, ptr %3, align 4
  %24 = insertvalue { ptr, i64 } %22, i64 %23, 1
  store { ptr, i64 } %24, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem5, align 8
  br label %34

25:                                               ; preds = %2
  store i32 -1, ptr %5, align 4
  %26 = load i32, ptr %5, align 4
  %27 = load i32, ptr %10, align 4
  %28 = mul i32 %26, %27
  store i32 %28, ptr %6, align 4
  %29 = load i32, ptr %6, align 4
  store i32 %29, ptr %7, align 4
  store ptr @i32_typ, ptr %8, align 8
  %30 = load ptr, ptr %8, align 8
  %31 = insertvalue { ptr, i64 } undef, ptr %30, 0
  %32 = load i64, ptr %7, align 4
  %33 = insertvalue { ptr, i64 } %31, i64 %32, 1
  store { ptr, i64 } %33, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem5, align 8
  br label %34

34:                                               ; preds = %25, %19
  %.reload6 = load { ptr, i64 }, ptr %.reg2mem5, align 8
  store { ptr, i64 } %.reload6, ptr %.reg2mem, align 8
  br label %35

35:                                               ; preds = %34
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_max_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %6, align 8
  %7 = alloca double, align 8
  %8 = getelementptr { ptr, i64 }, ptr %6, i32 0, i32 1
  %9 = load double, ptr %8, align 8
  store double %9, ptr %7, align 8
  %10 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %10, align 8
  %11 = alloca double, align 8
  %12 = getelementptr { ptr, i64 }, ptr %10, i32 0, i32 1
  %13 = load double, ptr %12, align 8
  store double %13, ptr %11, align 8
  %14 = load double, ptr %7, align 8
  %15 = load double, ptr %11, align 8
  %16 = fcmp ogt double %14, %15
  %17 = alloca i1, align 1
  store i1 %16, ptr %17, align 1
  %18 = load i1, ptr %17, align 1
  %19 = select i1 %18, ptr %4, ptr %5
  %20 = select i1 %18, ptr %7, ptr %11
  %21 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %22 = load double, ptr %20, align 8
  store double %22, ptr %21, align 8
  store ptr @f64_typ, ptr %19, align 8
  %23 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, i64 } undef, ptr %24, 0
  %26 = load i64, ptr %21, align 4
  %27 = insertvalue { ptr, i64 } %25, i64 %26, 1
  ret { ptr, i64 } %27
}

define { ptr, i64 } @Math__Self_max_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %6, align 8
  %7 = alloca i32, align 4
  %8 = getelementptr { ptr, i64 }, ptr %6, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  store i32 %9, ptr %7, align 4
  %10 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %10, align 8
  %11 = alloca i32, align 4
  %12 = getelementptr { ptr, i64 }, ptr %10, i32 0, i32 1
  %13 = load i32, ptr %12, align 4
  store i32 %13, ptr %11, align 4
  %14 = load i32, ptr %7, align 4
  %15 = load i32, ptr %11, align 4
  %16 = icmp sgt i32 %14, %15
  %17 = alloca i1, align 1
  store i1 %16, ptr %17, align 1
  %18 = load i1, ptr %17, align 1
  %19 = select i1 %18, ptr %4, ptr %5
  %20 = select i1 %18, ptr %7, ptr %11
  %21 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  store ptr @i32_typ, ptr %19, align 8
  %23 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, i64 } undef, ptr %24, 0
  %26 = load i64, ptr %21, align 4
  %27 = insertvalue { ptr, i64 } %25, i64 %26, 1
  ret { ptr, i64 } %27
}

define { ptr, i64 } @Math__Self_min_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %6, align 8
  %7 = alloca i32, align 4
  %8 = getelementptr { ptr, i64 }, ptr %6, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  store i32 %9, ptr %7, align 4
  %10 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %10, align 8
  %11 = alloca i32, align 4
  %12 = getelementptr { ptr, i64 }, ptr %10, i32 0, i32 1
  %13 = load i32, ptr %12, align 4
  store i32 %13, ptr %11, align 4
  %14 = load i32, ptr %7, align 4
  %15 = load i32, ptr %11, align 4
  %16 = icmp slt i32 %14, %15
  %17 = alloca i1, align 1
  store i1 %16, ptr %17, align 1
  %18 = load i1, ptr %17, align 1
  %19 = select i1 %18, ptr %4, ptr %5
  %20 = select i1 %18, ptr %7, ptr %11
  %21 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  store ptr @i32_typ, ptr %19, align 8
  %23 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, i64 } undef, ptr %24, 0
  %26 = load i64, ptr %21, align 4
  %27 = insertvalue { ptr, i64 } %25, i64 %26, 1
  ret { ptr, i64 } %27
}

define { ptr, i64 } @Math__Self_min_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %6, align 8
  %7 = alloca double, align 8
  %8 = getelementptr { ptr, i64 }, ptr %6, i32 0, i32 1
  %9 = load double, ptr %8, align 8
  store double %9, ptr %7, align 8
  %10 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %10, align 8
  %11 = alloca double, align 8
  %12 = getelementptr { ptr, i64 }, ptr %10, i32 0, i32 1
  %13 = load double, ptr %12, align 8
  store double %13, ptr %11, align 8
  %14 = load double, ptr %7, align 8
  %15 = load double, ptr %11, align 8
  %16 = fcmp olt double %14, %15
  %17 = alloca i1, align 1
  store i1 %16, ptr %17, align 1
  %18 = load i1, ptr %17, align 1
  %19 = select i1 %18, ptr %4, ptr %5
  %20 = select i1 %18, ptr %7, ptr %11
  %21 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %22 = load double, ptr %20, align 8
  store double %22, ptr %21, align 8
  store ptr @f64_typ, ptr %19, align 8
  %23 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, i64 } undef, ptr %24, 0
  %26 = load i64, ptr %21, align 4
  %27 = insertvalue { ptr, i64 } %25, i64 %26, 1
  ret { ptr, i64 } %27
}

define double @Math__Self_round_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.round.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

define double @Math__Self_floor_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.floor.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

define double @Math__Self_ceiling_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.ceil.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.ceil.f64(double) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.round.f64(double) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.sqrt.f64(double) #2

define { i64, i64 } @_data_size_Range(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Range_field_Range_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_Ptri32
}

define ptr @Range_B_init_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @i32_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 19, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [55 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 21, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [55 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Range_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @function_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 23, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [55 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 28, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [55 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Range_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 29, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [55 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Range_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 30, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [55 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Range_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 31, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [55 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @Range_init_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Range)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 440, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %19, align 4
  call void %28(ptr %20, i32 %29) #15
  %30 = alloca i32, align 4
  store i32 0, ptr %30, align 4
  %31 = load ptr, ptr %11, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 440, ptr %32)
  %34 = load i32, ptr %17, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = load i32, ptr %30, align 4
  call void %38(ptr %31, i32 %39) #15
  %40 = alloca i32, align 4
  store i32 1, ptr %40, align 4
  %41 = load ptr, ptr %11, align 8
  %42 = load ptr, ptr %6, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 440, ptr %42)
  %44 = load i32, ptr %17, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 2
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load i32, ptr %40, align 4
  call void %49(ptr %41, i32 %50) #15
  ret void
}

define void @Range_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Range)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 440, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %20, align 4
  call void %28(ptr %21, i32 %29) #15
  %30 = alloca i32, align 4
  store i32 %4, ptr %30, align 4
  %31 = load ptr, ptr %12, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 440, ptr %32)
  %34 = load i32, ptr %18, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = load i32, ptr %30, align 4
  call void %39(ptr %31, i32 %40) #15
  %41 = alloca i32, align 4
  store i32 1, ptr %41, align 4
  %42 = load ptr, ptr %12, align 8
  %43 = load ptr, ptr %7, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 440, ptr %43)
  %45 = load i32, ptr %18, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load i32, ptr %41, align 4
  call void %50(ptr %42, i32 %51) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @Range_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Range)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 440, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %19, align 4
  call void %28(ptr %20, i32 %29) #15
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %32 = load ptr, ptr %8, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %34 = load ptr, ptr %11, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %36 = load ptr, ptr %14, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %38 = load i32, ptr %17, align 4
  store i32 %38, ptr %37, align 4
  call void @set_offset(ptr %30, ptr @Range)
  %39 = load ptr, ptr %31, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %41 = load ptr, ptr %33, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %41, 1
  %43 = load ptr, ptr %35, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %43, 2
  %45 = load i32, ptr %37, align 4
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %45, 3
  ret { ptr, ptr, ptr, i32 } %46
}

define { ptr, ptr, ptr, i32 } @Range_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Range)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 440, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #16
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = load ptr, ptr %10, align 8
  %29 = load ptr, ptr %5, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 440, ptr %29)
  %31 = load i32, ptr %16, align 4
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %28) #16
  %38 = alloca i32, align 4
  store i32 %37, ptr %38, align 4
  %39 = load ptr, ptr %10, align 8
  %40 = load ptr, ptr %5, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 440, ptr %40)
  %42 = load i32, ptr %16, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, ptr }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %39) #16
  %49 = alloca i32, align 4
  store i32 %48, ptr %49, align 4
  %50 = alloca [1 x ptr], align 8
  store ptr @RangeIterator, ptr %50, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr ptr, ptr %51, i32 6
  %53 = load ptr, ptr %52, align 8
  %54 = call { i64, i64 } @size_wrapper(ptr %53, ptr %50)
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = call ptr @bump_malloc(i64 %55)
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  %60 = alloca ptr, align 8
  store ptr @RangeIterator, ptr %60, align 8
  store ptr %56, ptr %59, align 8
  store i32 10, ptr %57, align 4
  %61 = load ptr, ptr %10, align 8
  %62 = load ptr, ptr %5, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 440, ptr %62)
  %64 = load i32, ptr %16, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 %68(ptr %61) #16
  %70 = alloca i32, align 4
  store i32 %69, ptr %70, align 4
  %71 = load ptr, ptr %10, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 440, ptr %72)
  %74 = load i32, ptr %16, align 4
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = call i32 %79(ptr %71) #16
  %81 = alloca i32, align 4
  store i32 %80, ptr %81, align 4
  %82 = load ptr, ptr %10, align 8
  %83 = load ptr, ptr %5, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 440, ptr %83)
  %85 = load i32, ptr %16, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 2
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = call i32 %90(ptr %82) #16
  %92 = alloca i32, align 4
  store i32 %91, ptr %92, align 4
  %93 = load i32, ptr %70, align 4
  %94 = load i32, ptr %81, align 4
  %95 = load i32, ptr %92, align 4
  %96 = load ptr, ptr %60, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = load ptr, ptr %59, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 1
  %100 = load ptr, ptr %58, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 2
  %102 = load i32, ptr %57, align 4
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %102, 3
  %104 = alloca [3 x ptr], align 8
  %105 = getelementptr [3 x ptr], ptr %104, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %105, align 8
  %106 = getelementptr [3 x ptr], ptr %104, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %106, align 8
  %107 = getelementptr [3 x ptr], ptr %104, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 9, ptr %104)
  %109 = call ptr @llvm.invariant.start.p0(i64 88, ptr %96)
  %110 = getelementptr ptr, ptr %96, i32 %102
  %111 = getelementptr ptr, ptr %110, i32 4
  %112 = load ptr, ptr %111, align 8
  %113 = alloca { ptr, ptr, ptr }, align 8
  %114 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 0
  store ptr @i32_typ, ptr %114, align 8
  %115 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 1
  store ptr @i32_typ, ptr %115, align 8
  %116 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 2
  store ptr @i32_typ, ptr %116, align 8
  %117 = call ptr @behavior_wrapper(ptr %112, { ptr, ptr, ptr, i32 } %103, ptr %113)
  call void %117({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr %104, i32 %93, i32 %94, i32 %95) #17
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %60, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %122 = load ptr, ptr %59, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %124 = load ptr, ptr %58, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %126 = load i32, ptr %57, align 4
  store i32 %126, ptr %125, align 4
  call void @set_offset(ptr %118, ptr @Iterator)
  %127 = load ptr, ptr %119, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %121, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %123, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %125, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  ret { ptr, ptr, ptr, i32 } %134
}

define { i64, i64 } @_data_size_RangeIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @RangeIterator_field_RangeIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_Ptri32
}

define ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @i32_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @i32_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 6, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [11 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @RangeIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [11 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @RangeIterator_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @RangeIterator)
  %21 = alloca i32, align 4
  store i32 %3, ptr %21, align 4
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 88, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load i32, ptr %21, align 4
  call void %29(ptr %22, i32 %30) #15
  %31 = alloca i32, align 4
  store i32 %4, ptr %31, align 4
  %32 = load ptr, ptr %13, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 88, ptr %33)
  %35 = load i32, ptr %19, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = load i32, ptr %31, align 4
  call void %40(ptr %32, i32 %41) #15
  %42 = alloca i32, align 4
  store i32 %5, ptr %42, align 4
  %43 = load ptr, ptr %13, align 8
  %44 = load ptr, ptr %8, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = load i32, ptr %19, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load i32, ptr %42, align 4
  call void %51(ptr %43, i32 %52) #15
  ret void
}

define { ptr, i160 } @RangeIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca [0 x i8], align 1
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem23 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %15, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  store ptr %21, ptr %.reg2mem14, align 8
  %22 = load ptr, ptr %20, align 8
  %.reload22 = load ptr, ptr %.reg2mem14, align 8
  store ptr %22, ptr %.reload22, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr %27, ptr %.reg2mem5, align 8
  %28 = load i32, ptr %26, align 4
  %.reload13 = load ptr, ptr %.reg2mem5, align 8
  store i32 %28, ptr %.reload13, align 4
  call void @set_offset(ptr %16, ptr @RangeIterator)
  %.reload21 = load ptr, ptr %.reg2mem14, align 8
  %29 = load ptr, ptr %.reload21, align 8
  %30 = load ptr, ptr %16, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 88, ptr %30)
  %.reload12 = load ptr, ptr %.reg2mem5, align 8
  %32 = load i32, ptr %.reload12, align 4
  %33 = getelementptr ptr, ptr %30, i32 %32
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %29) #16
  %38 = alloca i32, align 4
  store i32 %37, ptr %38, align 4
  %.reload20 = load ptr, ptr %.reg2mem14, align 8
  %39 = load ptr, ptr %.reload20, align 8
  %40 = load ptr, ptr %16, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 88, ptr %40)
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  %42 = load i32, ptr %.reload11, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, ptr }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %39) #16
  %49 = alloca i32, align 4
  store i32 %48, ptr %49, align 4
  %50 = load i32, ptr %38, align 4
  %51 = load i32, ptr %49, align 4
  %52 = icmp sgt i32 %50, %51
  %53 = alloca i1, align 1
  store i1 %52, ptr %53, align 1
  %54 = load i1, ptr %53, align 1
  br i1 %54, label %55, label %61

55:                                               ; preds = %3
  %56 = load [0 x i8], ptr %4, align 1
  store [0 x i8] %56, ptr %5, align 1
  store ptr @nil_typ, ptr %6, align 8
  %57 = load ptr, ptr %6, align 8
  %58 = insertvalue { ptr, i160 } undef, ptr %57, 0
  %59 = load i160, ptr %5, align 4
  %60 = insertvalue { ptr, i160 } %58, i160 %59, 1
  store { ptr, i160 } %60, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem23, align 8
  br label %120

61:                                               ; preds = %3
  %.reload19 = load ptr, ptr %.reg2mem14, align 8
  %62 = load ptr, ptr %.reload19, align 8
  %63 = load ptr, ptr %16, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 88, ptr %63)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %65 = load i32, ptr %.reload10, align 4
  %66 = getelementptr ptr, ptr %63, i32 %65
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = call i32 %69(ptr %62) #16
  store i32 %70, ptr %7, align 4
  %.reload18 = load ptr, ptr %.reg2mem14, align 8
  %71 = load ptr, ptr %.reload18, align 8
  %72 = load ptr, ptr %16, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 88, ptr %72)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %74 = load i32, ptr %.reload9, align 4
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = call i32 %79(ptr %71) #16
  store i32 %80, ptr %8, align 4
  %81 = load i32, ptr %7, align 4
  %82 = load i32, ptr %8, align 4
  %83 = add i32 %81, %82
  store i32 %83, ptr %9, align 4
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  %84 = load ptr, ptr %.reload17, align 8
  %85 = load ptr, ptr %16, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 88, ptr %85)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %87 = load i32, ptr %.reload8, align 4
  %88 = getelementptr ptr, ptr %85, i32 %87
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load i32, ptr %9, align 4
  call void %91(ptr %84, i32 %92) #15
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %93 = load ptr, ptr %.reload16, align 8
  %94 = load ptr, ptr %16, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 88, ptr %94)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %96 = load i32, ptr %.reload7, align 4
  %97 = getelementptr ptr, ptr %94, i32 %96
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = call i32 %100(ptr %93) #16
  store i32 %101, ptr %10, align 4
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %102 = load ptr, ptr %.reload15, align 8
  %103 = load ptr, ptr %16, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 88, ptr %103)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %105 = load i32, ptr %.reload6, align 4
  %106 = getelementptr ptr, ptr %103, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = call i32 %110(ptr %102) #16
  store i32 %111, ptr %11, align 4
  %112 = load i32, ptr %10, align 4
  %113 = load i32, ptr %11, align 4
  %114 = sub i32 %112, %113
  store i32 %114, ptr %12, align 4
  %115 = load i32, ptr %12, align 4
  store i32 %115, ptr %13, align 4
  store ptr @i32_typ, ptr %14, align 8
  %116 = load ptr, ptr %14, align 8
  %117 = insertvalue { ptr, i160 } undef, ptr %116, 0
  %118 = load i160, ptr %13, align 4
  %119 = insertvalue { ptr, i160 } %117, i160 %118, 1
  store { ptr, i160 } %119, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem23, align 8
  br label %120

120:                                              ; preds = %61, %55
  %.reload24 = load { ptr, i160 }, ptr %.reg2mem23, align 8
  store { ptr, i160 } %.reload24, ptr %.reg2mem, align 8
  br label %121

121:                                              ; preds = %120
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i32 @RangeIterator_getter_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @RangeIterator_setter_step(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define i32 @RangeIterator_getter_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @RangeIterator_setter_end(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define i32 @RangeIterator_getter_counter(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @RangeIterator_setter_counter(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define i32 @Range_getter_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Range_setter_step(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define i32 @Range_getter_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @Range_setter_end(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define i32 @Range_getter_start(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Range_setter_start(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_IO(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @IO_B__Self_print_xNil__Self_print_xPtri1__Self_print_xPtrf64__Self_print_xString__Self_print_xCharacter__Self_print_xPtri8__Self_print_xPtri32__Self_print_xRepresentable__Self_print_xPtri64(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = alloca i1, align 1
  %11 = alloca i1, align 1
  %12 = alloca i1, align 1
  %13 = alloca i1, align 1
  %14 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca i32, align 4
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i32, align 4
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem37 = alloca i32, align 4
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca i32, align 4
  %.reg2mem43 = alloca i32, align 4
  %.reg2mem45 = alloca i32, align 4
  %.reg2mem47 = alloca i32, align 4
  %.reg2mem49 = alloca i32, align 4
  %.reg2mem51 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %15 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %16 = alloca ptr, align 8
  %17 = load ptr, ptr %0, align 8
  %18 = ptrtoint ptr %17 to i64
  %19 = icmp eq i64 %18, ptrtoint (ptr @nil_typ to i64)
  %20 = icmp eq i64 %18, 0
  %21 = or i1 %19, %20
  store i1 %21, ptr %2, align 1
  %22 = load i1, ptr %2, align 1
  br i1 %22, label %23, label %24

23:                                               ; preds = %1
  store i32 1, ptr %.reg2mem29, align 4
  br label %181

24:                                               ; preds = %1
  %25 = load ptr, ptr %0, align 8
  %26 = ptrtoint ptr %25 to i64
  %27 = icmp eq i64 %26, ptrtoint (ptr @bool_typ to i64)
  store i1 %27, ptr %3, align 1
  %28 = load i1, ptr %3, align 1
  br i1 %28, label %29, label %30

29:                                               ; preds = %24
  store i32 2, ptr %.reg2mem31, align 4
  br label %179

30:                                               ; preds = %24
  %31 = load ptr, ptr %0, align 8
  %32 = getelementptr { [3 x i64], [3 x ptr] }, ptr %31, i32 0, i32 0, i32 1
  %33 = getelementptr { [3 x i64], [3 x ptr] }, ptr %31, i32 0, i32 0, i32 2
  %34 = getelementptr { [3 x i64], [3 x ptr] }, ptr %31, i32 0, i32 1, i32 0
  %35 = getelementptr { [3 x i64], [3 x ptr] }, ptr %31, i32 0, i32 1, i32 1
  %36 = load i64, ptr %32, align 4
  %37 = load i64, ptr %33, align 4
  %38 = load ptr, ptr %34, align 8
  %39 = load ptr, ptr %35, align 8
  %40 = load i64, ptr @Representable, align 4
  %41 = call i1 @subtype_test_wrapper(ptr %38, i64 %37, i64 %36, i64 %40, i64 ptrtoint (ptr @Representable to i64), ptr %39)
  store i1 %41, ptr %4, align 1
  %42 = load i1, ptr %4, align 1
  br i1 %42, label %43, label %74

43:                                               ; preds = %30
  %44 = load ptr, ptr %0, align 8
  %45 = getelementptr { [3 x i64], [3 x ptr] }, ptr %44, i32 0, i32 0, i32 1
  %46 = getelementptr { [3 x i64], [3 x ptr] }, ptr %44, i32 0, i32 0, i32 2
  %47 = getelementptr { [3 x i64], [3 x ptr] }, ptr %44, i32 0, i32 1, i32 0
  %48 = getelementptr { [3 x i64], [3 x ptr] }, ptr %44, i32 0, i32 1, i32 1
  %49 = load i64, ptr %45, align 4
  %50 = load i64, ptr %46, align 4
  %51 = load ptr, ptr %47, align 8
  %52 = load ptr, ptr %48, align 8
  %53 = load i64, ptr @Character, align 4
  %54 = call i1 @subtype_test_wrapper(ptr %51, i64 %50, i64 %49, i64 %53, i64 ptrtoint (ptr @Character to i64), ptr %52)
  store i1 %54, ptr %5, align 1
  %55 = load i1, ptr %5, align 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %43
  store i32 0, ptr %.reg2mem51, align 4
  br label %72

57:                                               ; preds = %43
  %58 = load ptr, ptr %0, align 8
  %59 = getelementptr { [3 x i64], [3 x ptr] }, ptr %58, i32 0, i32 0, i32 1
  %60 = getelementptr { [3 x i64], [3 x ptr] }, ptr %58, i32 0, i32 0, i32 2
  %61 = getelementptr { [3 x i64], [3 x ptr] }, ptr %58, i32 0, i32 1, i32 0
  %62 = getelementptr { [3 x i64], [3 x ptr] }, ptr %58, i32 0, i32 1, i32 1
  %63 = load i64, ptr %59, align 4
  %64 = load i64, ptr %60, align 4
  %65 = load ptr, ptr %61, align 8
  %66 = load ptr, ptr %62, align 8
  %67 = load i64, ptr @String, align 4
  %68 = call i1 @subtype_test_wrapper(ptr %65, i64 %64, i64 %63, i64 %67, i64 ptrtoint (ptr @String to i64), ptr %66)
  store i1 %68, ptr %6, align 1
  %69 = load i1, ptr %6, align 1
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  store i32 %71, ptr %.reg2mem27, align 4
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store i32 %.reload28, ptr %.reg2mem51, align 4
  br label %72

72:                                               ; preds = %57, %56
  %.reload52 = load i32, ptr %.reg2mem51, align 4
  store i32 %.reload52, ptr %.reg2mem25, align 4
  br label %73

73:                                               ; preds = %72
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  store i32 %.reload26, ptr %.reg2mem49, align 4
  br label %75

74:                                               ; preds = %30
  store i32 0, ptr %.reg2mem49, align 4
  br label %75

75:                                               ; preds = %74, %73
  %.reload50 = load i32, ptr %.reg2mem49, align 4
  store i32 %.reload50, ptr %.reg2mem23, align 4
  br label %76

76:                                               ; preds = %75
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  %77 = zext i32 %.reload24 to i64
  %78 = trunc i64 %77 to i32
  switch i32 %78, label %177 [
    i32 0, label %79
  ]

79:                                               ; preds = %76
  %80 = load ptr, ptr %0, align 8
  %81 = ptrtoint ptr %80 to i64
  %82 = icmp eq i64 %81, ptrtoint (ptr @i8_typ to i64)
  store i1 %82, ptr %7, align 1
  %83 = load i1, ptr %7, align 1
  br i1 %83, label %84, label %85

84:                                               ; preds = %79
  store i32 6, ptr %.reg2mem35, align 4
  br label %175

85:                                               ; preds = %79
  %86 = load ptr, ptr %0, align 8
  %87 = ptrtoint ptr %86 to i64
  %88 = icmp eq i64 %87, ptrtoint (ptr @i64_typ to i64)
  store i1 %88, ptr %8, align 1
  %89 = load i1, ptr %8, align 1
  br i1 %89, label %90, label %91

90:                                               ; preds = %85
  store i32 9, ptr %.reg2mem37, align 4
  br label %173

91:                                               ; preds = %85
  %92 = load ptr, ptr %0, align 8
  %93 = getelementptr { [3 x i64], [3 x ptr] }, ptr %92, i32 0, i32 0, i32 1
  %94 = getelementptr { [3 x i64], [3 x ptr] }, ptr %92, i32 0, i32 0, i32 2
  %95 = getelementptr { [3 x i64], [3 x ptr] }, ptr %92, i32 0, i32 1, i32 0
  %96 = getelementptr { [3 x i64], [3 x ptr] }, ptr %92, i32 0, i32 1, i32 1
  %97 = load i64, ptr %93, align 4
  %98 = load i64, ptr %94, align 4
  %99 = load ptr, ptr %95, align 8
  %100 = load ptr, ptr %96, align 8
  %101 = load i64, ptr @Character, align 4
  %102 = call i1 @subtype_test_wrapper(ptr %99, i64 %98, i64 %97, i64 %101, i64 ptrtoint (ptr @Character to i64), ptr %100)
  store i1 %102, ptr %9, align 1
  %103 = load i1, ptr %9, align 1
  br i1 %103, label %104, label %119

104:                                              ; preds = %91
  %105 = load ptr, ptr %0, align 8
  %106 = getelementptr { [3 x i64], [3 x ptr] }, ptr %105, i32 0, i32 0, i32 1
  %107 = getelementptr { [3 x i64], [3 x ptr] }, ptr %105, i32 0, i32 0, i32 2
  %108 = getelementptr { [3 x i64], [3 x ptr] }, ptr %105, i32 0, i32 1, i32 0
  %109 = getelementptr { [3 x i64], [3 x ptr] }, ptr %105, i32 0, i32 1, i32 1
  %110 = load i64, ptr %106, align 4
  %111 = load i64, ptr %107, align 4
  %112 = load ptr, ptr %108, align 8
  %113 = load ptr, ptr %109, align 8
  %114 = load i64, ptr @String, align 4
  %115 = call i1 @subtype_test_wrapper(ptr %112, i64 %111, i64 %110, i64 %114, i64 ptrtoint (ptr @String to i64), ptr %113)
  store i1 %115, ptr %10, align 1
  %116 = load i1, ptr %10, align 1
  %117 = xor i1 %116, true
  %118 = zext i1 %117 to i32
  store i32 %118, ptr %.reg2mem21, align 4
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  store i32 %.reload22, ptr %.reg2mem47, align 4
  br label %120

119:                                              ; preds = %91
  store i32 0, ptr %.reg2mem47, align 4
  br label %120

120:                                              ; preds = %119, %104
  %.reload48 = load i32, ptr %.reg2mem47, align 4
  store i32 %.reload48, ptr %.reg2mem19, align 4
  br label %121

121:                                              ; preds = %120
  %.reload20 = load i32, ptr %.reg2mem19, align 4
  %122 = zext i32 %.reload20 to i64
  %123 = trunc i64 %122 to i32
  switch i32 %123, label %171 [
    i32 0, label %124
  ]

124:                                              ; preds = %121
  %125 = load ptr, ptr %0, align 8
  %126 = ptrtoint ptr %125 to i64
  %127 = icmp eq i64 %126, ptrtoint (ptr @i32_typ to i64)
  store i1 %127, ptr %11, align 1
  %128 = load i1, ptr %11, align 1
  br i1 %128, label %129, label %130

129:                                              ; preds = %124
  store i32 7, ptr %.reg2mem41, align 4
  br label %169

130:                                              ; preds = %124
  %131 = load ptr, ptr %0, align 8
  %132 = getelementptr { [3 x i64], [3 x ptr] }, ptr %131, i32 0, i32 0, i32 1
  %133 = getelementptr { [3 x i64], [3 x ptr] }, ptr %131, i32 0, i32 0, i32 2
  %134 = getelementptr { [3 x i64], [3 x ptr] }, ptr %131, i32 0, i32 1, i32 0
  %135 = getelementptr { [3 x i64], [3 x ptr] }, ptr %131, i32 0, i32 1, i32 1
  %136 = load i64, ptr %132, align 4
  %137 = load i64, ptr %133, align 4
  %138 = load ptr, ptr %134, align 8
  %139 = load ptr, ptr %135, align 8
  %140 = load i64, ptr @String, align 4
  %141 = call i1 @subtype_test_wrapper(ptr %138, i64 %137, i64 %136, i64 %140, i64 ptrtoint (ptr @String to i64), ptr %139)
  store i1 %141, ptr %12, align 1
  %142 = load i1, ptr %12, align 1
  br i1 %142, label %143, label %158

143:                                              ; preds = %130
  %144 = load ptr, ptr %0, align 8
  %145 = getelementptr { [3 x i64], [3 x ptr] }, ptr %144, i32 0, i32 0, i32 1
  %146 = getelementptr { [3 x i64], [3 x ptr] }, ptr %144, i32 0, i32 0, i32 2
  %147 = getelementptr { [3 x i64], [3 x ptr] }, ptr %144, i32 0, i32 1, i32 0
  %148 = getelementptr { [3 x i64], [3 x ptr] }, ptr %144, i32 0, i32 1, i32 1
  %149 = load i64, ptr %145, align 4
  %150 = load i64, ptr %146, align 4
  %151 = load ptr, ptr %147, align 8
  %152 = load ptr, ptr %148, align 8
  %153 = load i64, ptr @Character, align 4
  %154 = call i1 @subtype_test_wrapper(ptr %151, i64 %150, i64 %149, i64 %153, i64 ptrtoint (ptr @Character to i64), ptr %152)
  store i1 %154, ptr %13, align 1
  %155 = load i1, ptr %13, align 1
  %156 = xor i1 %155, true
  %157 = zext i1 %156 to i32
  store i32 %157, ptr %.reg2mem17, align 4
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem45, align 4
  br label %159

158:                                              ; preds = %130
  store i32 0, ptr %.reg2mem45, align 4
  br label %159

159:                                              ; preds = %158, %143
  %.reload46 = load i32, ptr %.reg2mem45, align 4
  store i32 %.reload46, ptr %.reg2mem15, align 4
  br label %160

160:                                              ; preds = %159
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  %161 = zext i32 %.reload16 to i64
  %162 = trunc i64 %161 to i32
  switch i32 %162, label %167 [
    i32 0, label %163
  ]

163:                                              ; preds = %160
  %164 = load ptr, ptr %0, align 8
  %165 = ptrtoint ptr %164 to i64
  %166 = icmp eq i64 %165, ptrtoint (ptr @f64_typ to i64)
  store i1 %166, ptr %14, align 1
  store i32 3, ptr %.reg2mem43, align 4
  br label %168

167:                                              ; preds = %160
  store i32 4, ptr %.reg2mem43, align 4
  br label %168

168:                                              ; preds = %167, %163
  %.reload44 = load i32, ptr %.reg2mem43, align 4
  store i32 %.reload44, ptr %.reg2mem13, align 4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem41, align 4
  br label %169

169:                                              ; preds = %168, %129
  %.reload42 = load i32, ptr %.reg2mem41, align 4
  store i32 %.reload42, ptr %.reg2mem11, align 4
  br label %170

170:                                              ; preds = %169
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem39, align 4
  br label %172

171:                                              ; preds = %121
  store i32 5, ptr %.reg2mem39, align 4
  br label %172

172:                                              ; preds = %171, %170
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store i32 %.reload40, ptr %.reg2mem9, align 4
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem37, align 4
  br label %173

173:                                              ; preds = %172, %90
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  store i32 %.reload38, ptr %.reg2mem7, align 4
  br label %174

174:                                              ; preds = %173
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem35, align 4
  br label %175

175:                                              ; preds = %174, %84
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload36, ptr %.reg2mem5, align 4
  br label %176

176:                                              ; preds = %175
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem33, align 4
  br label %178

177:                                              ; preds = %76
  store i32 8, ptr %.reg2mem33, align 4
  br label %178

178:                                              ; preds = %177, %176
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  store i32 %.reload34, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem31, align 4
  br label %179

179:                                              ; preds = %178, %29
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  store i32 %.reload32, ptr %.reg2mem1, align 4
  br label %180

180:                                              ; preds = %179
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem29, align 4
  br label %181

181:                                              ; preds = %180, %23
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  store i32 %.reload30, ptr %.reg2mem, align 4
  br label %182

182:                                              ; preds = %181
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %16, align 4
  %183 = load i32, ptr %16, align 4
  %184 = getelementptr [10 x ptr], ptr @IO, i32 0, i32 %183
  %185 = getelementptr ptr, ptr %184, i32 10
  %186 = load ptr, ptr %185, align 8
  ret ptr %186
}

define void @IO__Self_print_xNil(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca [0 x i8], align 1
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load [0 x i8], ptr %5, align 1
  store [0 x i8] %6, ptr %4, align 1
  %7 = alloca i32, align 4
  store i32 4, ptr %7, align 4
  %8 = load i32, ptr %7, align 4
  %9 = sext i32 %8 to i64
  %10 = alloca ptr, align 8
  %11 = mul i64 %9, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %12 = call ptr @bump_malloc(i64 %11)
  store ptr %12, ptr %10, align 8
  %13 = alloca ptr, align 8
  %14 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  store ptr %15, ptr %13, align 8
  %16 = alloca i32, align 4
  store i32 0, ptr %16, align 4
  %17 = load ptr, ptr %13, align 8
  %18 = load i32, ptr %16, align 4
  %19 = sext i32 %18 to i64
  %20 = mul i64 ptrtoint (ptr getelementptr ([3 x i8], ptr null, i32 1) to i64), %19
  %21 = getelementptr i8, ptr %17, i64 %20
  %22 = load <3 x i8>, ptr @nvcyd_nil, align 4
  store <3 x i8> %22, ptr %21, align 4
  %23 = alloca i32, align 4
  store i32 3, ptr %23, align 4
  %24 = alloca i32, align 4
  store i32 4, ptr %24, align 4
  %25 = alloca [1 x ptr], align 8
  store ptr @String, ptr %25, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr ptr, ptr %26, i32 6
  %28 = load ptr, ptr %27, align 8
  %29 = call { i64, i64 } @size_wrapper(ptr %28, ptr %25)
  %30 = extractvalue { i64, i64 } %29, 0
  %31 = call ptr @bump_malloc(i64 %30)
  %32 = alloca i32, align 4
  %33 = alloca ptr, align 8
  %34 = alloca ptr, align 8
  %35 = alloca ptr, align 8
  store ptr @String, ptr %35, align 8
  store ptr %31, ptr %34, align 8
  store i32 10, ptr %32, align 4
  %36 = alloca i32, align 4
  store i32 3, ptr %36, align 4
  %37 = alloca i32, align 4
  store i32 4, ptr %37, align 4
  %38 = load ptr, ptr %13, align 8
  %39 = insertvalue { ptr } undef, ptr %38, 0
  %40 = load i32, ptr %36, align 4
  %41 = load i32, ptr %37, align 4
  %42 = load ptr, ptr %35, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %42, 0
  %44 = load ptr, ptr %34, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %44, 1
  %46 = load ptr, ptr %33, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 2
  %48 = load i32, ptr %32, align 4
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %48, 3
  %50 = alloca [3 x ptr], align 8
  %51 = getelementptr [3 x ptr], ptr %50, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %51, align 8
  %52 = getelementptr [3 x ptr], ptr %50, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %52, align 8
  %53 = getelementptr [3 x ptr], ptr %50, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 9, ptr %50)
  %55 = call ptr @llvm.invariant.start.p0(i64 616, ptr %42)
  %56 = getelementptr ptr, ptr %42, i32 %48
  %57 = getelementptr ptr, ptr %56, i32 5
  %58 = load ptr, ptr %57, align 8
  %59 = alloca { ptr, ptr, ptr }, align 8
  %60 = getelementptr { ptr, ptr, ptr }, ptr %59, i32 0, i32 0
  store ptr @buffer_typ, ptr %60, align 8
  %61 = getelementptr { ptr, ptr, ptr }, ptr %59, i32 0, i32 1
  store ptr @i32_typ, ptr %61, align 8
  %62 = getelementptr { ptr, ptr, ptr }, ptr %59, i32 0, i32 2
  store ptr @i32_typ, ptr %62, align 8
  %63 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %49, ptr %59)
  call void %63({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr %50, { ptr } %39, i32 %40, i32 %41) #17
  %64 = load ptr, ptr %35, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = load ptr, ptr %34, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 1
  %68 = load ptr, ptr %33, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 2
  %70 = load i32, ptr %32, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = alloca [0 x ptr], align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr %72)
  %74 = call ptr @llvm.invariant.start.p0(i64 616, ptr %64)
  %75 = getelementptr ptr, ptr %64, i32 %70
  %76 = getelementptr ptr, ptr %75, i32 15
  %77 = load ptr, ptr %76, align 8
  %78 = alloca {}, align 8
  %79 = call ptr @behavior_wrapper(ptr %77, { ptr, ptr, ptr, i32 } %71, ptr %78)
  %80 = call { ptr } %79({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %72) #17
  %81 = alloca ptr, align 8
  store { ptr } %80, ptr %81, align 8
  %82 = load ptr, ptr %81, align 8
  %83 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %82)
  ret void
}

define void @IO__Self_print_xPtri1(ptr %0, { ptr, i160 } %1) {
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [1 x ptr], align 8
  %10 = alloca i32, align 4
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca [3 x ptr], align 8
  %17 = alloca { ptr, ptr, ptr }, align 8
  %18 = alloca [0 x ptr], align 8
  %19 = alloca {}, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i32, align 4
  %22 = alloca ptr, align 8
  %23 = alloca ptr, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca [1 x ptr], align 8
  %28 = alloca i32, align 4
  %29 = alloca ptr, align 8
  %30 = alloca ptr, align 8
  %31 = alloca ptr, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca [3 x ptr], align 8
  %35 = alloca { ptr, ptr, ptr }, align 8
  %36 = alloca [0 x ptr], align 8
  %37 = alloca {}, align 8
  %38 = alloca ptr, align 8
  %39 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %39, align 8
  %40 = alloca i1, align 1
  %41 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %42 = load i1, ptr %41, align 1
  store i1 %42, ptr %40, align 1
  %43 = load i1, ptr %40, align 1
  br i1 %43, label %44, label %104

44:                                               ; preds = %2
  store i32 5, ptr %3, align 4
  %45 = load i32, ptr %3, align 4
  %46 = sext i32 %45 to i64
  %47 = mul i64 %46, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %48 = call ptr @bump_malloc(i64 %47)
  store ptr %48, ptr %4, align 8
  %49 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  store ptr %50, ptr %5, align 8
  store i32 0, ptr %6, align 4
  %51 = load ptr, ptr %5, align 8
  %52 = load i32, ptr %6, align 4
  %53 = sext i32 %52 to i64
  %54 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %53
  %55 = getelementptr i8, ptr %51, i64 %54
  %56 = load <4 x i8>, ptr @hjayz_true, align 4
  store <4 x i8> %56, ptr %55, align 4
  store i32 4, ptr %7, align 4
  store i32 5, ptr %8, align 4
  store ptr @String, ptr %9, align 8
  %57 = load ptr, ptr %9, align 8
  %58 = getelementptr ptr, ptr %57, i32 6
  %59 = load ptr, ptr %58, align 8
  %60 = call { i64, i64 } @size_wrapper(ptr %59, ptr %9)
  %61 = extractvalue { i64, i64 } %60, 0
  %62 = call ptr @bump_malloc(i64 %61)
  store ptr @String, ptr %13, align 8
  store ptr %62, ptr %12, align 8
  store i32 10, ptr %10, align 4
  store i32 4, ptr %14, align 4
  store i32 5, ptr %15, align 4
  %63 = load ptr, ptr %5, align 8
  %64 = insertvalue { ptr } undef, ptr %63, 0
  %65 = load i32, ptr %14, align 4
  %66 = load i32, ptr %15, align 4
  %67 = load ptr, ptr %13, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = load ptr, ptr %12, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %69, 1
  %71 = load ptr, ptr %11, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %71, 2
  %73 = load i32, ptr %10, align 4
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %73, 3
  %75 = getelementptr [3 x ptr], ptr %16, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %75, align 8
  %76 = getelementptr [3 x ptr], ptr %16, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %76, align 8
  %77 = getelementptr [3 x ptr], ptr %16, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %77, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 9, ptr %16)
  %79 = call ptr @llvm.invariant.start.p0(i64 616, ptr %67)
  %80 = getelementptr ptr, ptr %67, i32 %73
  %81 = getelementptr ptr, ptr %80, i32 5
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 0
  store ptr @buffer_typ, ptr %83, align 8
  %84 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 1
  store ptr @i32_typ, ptr %84, align 8
  %85 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 2
  store ptr @i32_typ, ptr %85, align 8
  %86 = call ptr @behavior_wrapper(ptr %82, { ptr, ptr, ptr, i32 } %74, ptr %17)
  call void %86({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr %16, { ptr } %64, i32 %65, i32 %66) #17
  %87 = load ptr, ptr %13, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %12, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %11, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %10, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr %18)
  %96 = call ptr @llvm.invariant.start.p0(i64 616, ptr %87)
  %97 = getelementptr ptr, ptr %87, i32 %93
  %98 = getelementptr ptr, ptr %97, i32 15
  %99 = load ptr, ptr %98, align 8
  %100 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %94, ptr %19)
  %101 = call { ptr } %100({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %18) #17
  store { ptr } %101, ptr %20, align 8
  %102 = load ptr, ptr %20, align 8
  %103 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %102)
  br label %164

104:                                              ; preds = %2
  store i32 6, ptr %21, align 4
  %105 = load i32, ptr %21, align 4
  %106 = sext i32 %105 to i64
  %107 = mul i64 %106, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %108 = call ptr @bump_malloc(i64 %107)
  store ptr %108, ptr %22, align 8
  %109 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  store ptr %110, ptr %23, align 8
  store i32 0, ptr %24, align 4
  %111 = load ptr, ptr %23, align 8
  %112 = load i32, ptr %24, align 4
  %113 = sext i32 %112 to i64
  %114 = mul i64 ptrtoint (ptr getelementptr ([5 x i8], ptr null, i32 1) to i64), %113
  %115 = getelementptr i8, ptr %111, i64 %114
  %116 = load <5 x i8>, ptr @cfedv_false, align 8
  store <5 x i8> %116, ptr %115, align 8
  store i32 5, ptr %25, align 4
  store i32 6, ptr %26, align 4
  store ptr @String, ptr %27, align 8
  %117 = load ptr, ptr %27, align 8
  %118 = getelementptr ptr, ptr %117, i32 6
  %119 = load ptr, ptr %118, align 8
  %120 = call { i64, i64 } @size_wrapper(ptr %119, ptr %27)
  %121 = extractvalue { i64, i64 } %120, 0
  %122 = call ptr @bump_malloc(i64 %121)
  store ptr @String, ptr %31, align 8
  store ptr %122, ptr %30, align 8
  store i32 10, ptr %28, align 4
  store i32 5, ptr %32, align 4
  store i32 6, ptr %33, align 4
  %123 = load ptr, ptr %23, align 8
  %124 = insertvalue { ptr } undef, ptr %123, 0
  %125 = load i32, ptr %32, align 4
  %126 = load i32, ptr %33, align 4
  %127 = load ptr, ptr %31, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %30, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %29, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %28, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  %135 = getelementptr [3 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %135, align 8
  %136 = getelementptr [3 x ptr], ptr %34, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %136, align 8
  %137 = getelementptr [3 x ptr], ptr %34, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %137, align 8
  %138 = call ptr @llvm.invariant.start.p0(i64 9, ptr %34)
  %139 = call ptr @llvm.invariant.start.p0(i64 616, ptr %127)
  %140 = getelementptr ptr, ptr %127, i32 %133
  %141 = getelementptr ptr, ptr %140, i32 5
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr }, ptr %35, i32 0, i32 0
  store ptr @buffer_typ, ptr %143, align 8
  %144 = getelementptr { ptr, ptr, ptr }, ptr %35, i32 0, i32 1
  store ptr @i32_typ, ptr %144, align 8
  %145 = getelementptr { ptr, ptr, ptr }, ptr %35, i32 0, i32 2
  store ptr @i32_typ, ptr %145, align 8
  %146 = call ptr @behavior_wrapper(ptr %142, { ptr, ptr, ptr, i32 } %134, ptr %35)
  call void %146({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr %34, { ptr } %124, i32 %125, i32 %126) #17
  %147 = load ptr, ptr %31, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %147, 0
  %149 = load ptr, ptr %30, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %149, 1
  %151 = load ptr, ptr %29, align 8
  %152 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %151, 2
  %153 = load i32, ptr %28, align 4
  %154 = insertvalue { ptr, ptr, ptr, i32 } %152, i32 %153, 3
  %155 = call ptr @llvm.invariant.start.p0(i64 0, ptr %36)
  %156 = call ptr @llvm.invariant.start.p0(i64 616, ptr %147)
  %157 = getelementptr ptr, ptr %147, i32 %153
  %158 = getelementptr ptr, ptr %157, i32 15
  %159 = load ptr, ptr %158, align 8
  %160 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %154, ptr %37)
  %161 = call { ptr } %160({ ptr, ptr, ptr, i32 } %154, { ptr, ptr, ptr, i32 } %154, ptr %36) #17
  store { ptr } %161, ptr %38, align 8
  %162 = load ptr, ptr %38, align 8
  %163 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %162)
  br label %164

164:                                              ; preds = %104, %44
  ret void
}

define void @IO__Self_print_xPtrf64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca double, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load double, ptr %5, align 8
  store double %6, ptr %4, align 8
  %7 = load double, ptr %4, align 8
  %8 = call i32 (ptr, ...) @printf(ptr @float_string, double %7)
  ret void
}

define void @IO__Self_print_xString(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @String)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 616, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = getelementptr ptr, ptr %26, i32 15
  %28 = load ptr, ptr %27, align 8
  %29 = alloca {}, align 8
  %30 = call ptr @behavior_wrapper(ptr %28, { ptr, ptr, ptr, i32 } %22, ptr %29)
  %31 = call { ptr } %30({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23) #17
  %32 = alloca ptr, align 8
  store { ptr } %31, ptr %32, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %33)
  ret void
}

define void @IO__Self_print_xCharacter(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Character)
  %11 = alloca i32, align 4
  store i32 2, ptr %11, align 4
  %12 = load i32, ptr %11, align 4
  %13 = sext i32 %12 to i64
  %14 = alloca ptr, align 8
  %15 = mul i64 %13, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %16 = call ptr @bump_malloc(i64 %15)
  store ptr %16, ptr %14, align 8
  %17 = alloca ptr, align 8
  %18 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  store ptr %19, ptr %17, align 8
  %20 = alloca i8, align 1
  store i8 0, ptr %20, align 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %22, 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %31 = load i32, ptr %30, align 4
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 %31, 3
  %33 = alloca [0 x ptr], align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr %33)
  %35 = call ptr @llvm.invariant.start.p0(i64 40, ptr %22)
  %36 = getelementptr ptr, ptr %22, i32 %31
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = alloca {}, align 8
  %40 = call ptr @behavior_wrapper(ptr %38, { ptr, ptr, ptr, i32 } %32, ptr %39)
  %41 = call i8 %40({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr %33) #17
  %42 = alloca i8, align 1
  store i8 %41, ptr %42, align 1
  %43 = alloca i32, align 4
  store i32 0, ptr %43, align 4
  %44 = load ptr, ptr %17, align 8
  %45 = load i32, ptr %43, align 4
  %46 = sext i32 %45 to i64
  %47 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %46
  %48 = getelementptr i8, ptr %44, i64 %47
  %49 = load i8, ptr %42, align 1
  store i8 %49, ptr %48, align 1
  %50 = alloca i32, align 4
  store i32 1, ptr %50, align 4
  %51 = load ptr, ptr %17, align 8
  %52 = load i32, ptr %50, align 4
  %53 = sext i32 %52 to i64
  %54 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %53
  %55 = getelementptr i8, ptr %51, i64 %54
  %56 = load i8, ptr %20, align 1
  store i8 %56, ptr %55, align 1
  %57 = load ptr, ptr %17, align 8
  %58 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %57)
  ret void
}

define void @IO__Self_print_xPtri8(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i8, align 1
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i8, ptr %5, align 1
  store i8 %6, ptr %4, align 1
  %7 = load i8, ptr %4, align 1
  %8 = sext i8 %7 to i32
  %9 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %8)
  ret void
}

define void @IO__Self_print_xPtri32(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %7)
  ret void
}

define void @IO__Self_print_xRepresentable(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Representable)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = load ptr, ptr %26, align 8
  %28 = alloca {}, align 8
  %29 = call ptr @behavior_wrapper(ptr %27, { ptr, ptr, ptr, i32 } %22, ptr %28)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23) #17
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %44 = load i32, ptr %42, align 4
  store i32 %44, ptr %43, align 4
  call void @set_offset(ptr %32, ptr @String)
  %45 = load ptr, ptr %34, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = load ptr, ptr %37, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 1
  %49 = load ptr, ptr %40, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 2
  %51 = load i32, ptr %43, align 4
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %51, 3
  %53 = alloca [0 x ptr], align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 0, ptr %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 616, ptr %45)
  %56 = getelementptr ptr, ptr %45, i32 %51
  %57 = getelementptr ptr, ptr %56, i32 15
  %58 = load ptr, ptr %57, align 8
  %59 = alloca {}, align 8
  %60 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %52, ptr %59)
  %61 = call { ptr } %60({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr %53) #17
  %62 = alloca ptr, align 8
  store { ptr } %61, ptr %62, align 8
  %63 = load ptr, ptr %62, align 8
  %64 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %63)
  ret void
}

define void @IO__Self_print_xPtri64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i64, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i64, ptr %5, align 4
  store i64 %6, ptr %4, align 4
  %7 = load i64, ptr %4, align 4
  %8 = call i32 (ptr, ...) @printf(ptr @i64_string, i64 %7)
  ret void
}

define { i64, i64 } @_data_size_Blocking(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Blocking_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 1, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [2 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Blocking_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Blocking)
  ret void
}

define { i64, i64 } @_data_size_Channel(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @Channel_field_Channel_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Channel_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 5, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Channel_B_get_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Channel_B_put_new_valueT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 7, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [8 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @Channel_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Channel)
  %18 = alloca [0 x i8], align 1
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = load [0 x i8], ptr %18, align 1
  store [0 x i8] %21, ptr %19, align 1
  store ptr @nil_typ, ptr %20, align 8
  %22 = load ptr, ptr %10, align 8
  %23 = load ptr, ptr %5, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 64, ptr %23)
  %25 = load i32, ptr %16, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %20, align 8
  %32 = insertvalue { ptr, i160 } undef, ptr %31, 0
  %33 = load i160, ptr %19, align 4
  %34 = insertvalue { ptr, i160 } %32, i160 %33, 1
  call void %30(ptr %22, { ptr, i160 } %34) #15
  ret void
}

define { ptr, i160 } @Channel_get_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca { ptr, i160 }, align 8
  %6 = alloca i1, align 1
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca [0 x i8], align 1
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca [0 x ptr], align 8
  %17 = alloca {}, align 8
  %18 = alloca { ptr, i160 }, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem20 = alloca { ptr, i160 }, align 8
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem24 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  store ptr %25, ptr %.reg2mem15, align 8
  %26 = load ptr, ptr %24, align 8
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  store ptr %26, ptr %.reload19, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr %31, ptr %.reg2mem10, align 8
  %32 = load i32, ptr %30, align 4
  %.reload14 = load ptr, ptr %.reg2mem10, align 8
  store i32 %32, ptr %.reload14, align 4
  call void @set_offset(ptr %20, ptr @Channel)
  br label %33

33:                                               ; preds = %102, %3
  store i1 true, ptr %4, align 1
  %34 = load i1, ptr %4, align 1
  br i1 %34, label %35, label %98

35:                                               ; preds = %33
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %36 = load ptr, ptr %.reload18, align 8
  %37 = load ptr, ptr %20, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 64, ptr %37)
  %.reload13 = load ptr, ptr %.reg2mem10, align 8
  %39 = load i32, ptr %.reload13, align 4
  %40 = getelementptr ptr, ptr %37, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = call { ptr, i160 } %44(ptr %36) #16
  store { ptr, i160 } %45, ptr %5, align 8
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %46 = load ptr, ptr %.reload17, align 8
  %47 = load ptr, ptr %20, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 64, ptr %47)
  %.reload12 = load ptr, ptr %.reg2mem10, align 8
  %49 = load i32, ptr %.reload12, align 4
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = load ptr, ptr %50, align 8
  %52 = call ptr @typegetter_wrapper(ptr %51, ptr %46)
  %53 = load ptr, ptr %5, align 8
  %54 = ptrtoint ptr %53 to i64
  %55 = icmp eq i64 %54, ptrtoint (ptr @nil_typ to i64)
  %56 = icmp eq i64 %54, 0
  %57 = or i1 %55, %56
  %58 = icmp eq i1 %57, false
  store i1 %58, ptr %6, align 1
  %59 = load i1, ptr %6, align 1
  %60 = zext i1 %59 to i32
  store i32 %60, ptr %.reg2mem8, align 4
  %61 = xor i1 %59, true
  %62 = zext i1 %61 to i32
  store i32 %62, ptr %.reg2mem6, align 4
  br i1 %59, label %63, label %64

63:                                               ; preds = %35
  br label %97

64:                                               ; preds = %35
  store ptr @Blocking, ptr %14, align 8
  %65 = load ptr, ptr %14, align 8
  %66 = getelementptr ptr, ptr %65, i32 6
  %67 = load ptr, ptr %66, align 8
  %68 = call { i64, i64 } @size_wrapper(ptr %67, ptr %14)
  %69 = extractvalue { i64, i64 } %68, 0
  %70 = call ptr @bump_malloc(i64 %69)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr @Blocking, ptr %15, align 8
  store ptr %70, ptr %71, align 8
  store i32 10, ptr %72, align 4
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = load ptr, ptr %71, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %76, 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 2
  %81 = load i32, ptr %72, align 4
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %81, 3
  %83 = call ptr @llvm.invariant.start.p0(i64 0, ptr %16)
  %84 = call ptr @llvm.invariant.start.p0(i64 16, ptr %74)
  %85 = getelementptr ptr, ptr %74, i32 %81
  %86 = load ptr, ptr %85, align 8
  %87 = call ptr @behavior_wrapper(ptr %86, { ptr, ptr, ptr, i32 } %82, ptr %17)
  call void %87({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr %16) #17
  %88 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, i160 } undef, ptr %89, 0
  %91 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 1
  %92 = load i160, ptr %91, align 4
  %93 = insertvalue { ptr, i160 } %90, i160 %92, 1
  %94 = call ptr @get_current_coroutine()
  %95 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %94, i32 0, i32 4
  store { ptr, i160 } %93, ptr %95, align 8
  call void @coroutine_yield(ptr %94)
  %96 = load { ptr, i160 }, ptr %95, align 8
  store { ptr, i160 } %96, ptr %18, align 8
  br label %97

97:                                               ; preds = %64, %63
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  store i32 %.reload7, ptr %.reg2mem22, align 4
  store i32 %.reload9, ptr %.reg2mem24, align 4
  br label %99

98:                                               ; preds = %33
  store i32 0, ptr %.reg2mem22, align 4
  store i32 2, ptr %.reg2mem24, align 4
  br label %99

99:                                               ; preds = %98, %97
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  store i32 %.reload25, ptr %.reg2mem3, align 4
  store i32 %.reload23, ptr %.reg2mem1, align 4
  br label %100

100:                                              ; preds = %99
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %101 = trunc i32 %.reload2 to i1
  %.reload5 = load i32, ptr %.reg2mem3, align 4
  br i1 %101, label %102, label %103

102:                                              ; preds = %100
  br label %33

103:                                              ; preds = %100
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %104 = zext i32 %.reload4 to i64
  %105 = trunc i64 %104 to i32
  switch i32 %105, label %131 [
    i32 1, label %106
  ]

106:                                              ; preds = %103
  %107 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  store ptr %108, ptr %8, align 8
  %109 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %110 = load i160, ptr %109, align 4
  store i160 %110, ptr %7, align 4
  %111 = load [0 x i8], ptr %9, align 1
  store [0 x i8] %111, ptr %10, align 1
  store ptr @nil_typ, ptr %11, align 8
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %112 = load ptr, ptr %.reload16, align 8
  %113 = load ptr, ptr %20, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 64, ptr %113)
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %115 = load i32, ptr %.reload11, align 4
  %116 = getelementptr ptr, ptr %113, i32 %115
  %117 = getelementptr ptr, ptr %116, i32 1
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = load ptr, ptr %11, align 8
  %122 = insertvalue { ptr, i160 } undef, ptr %121, 0
  %123 = load i160, ptr %10, align 4
  %124 = insertvalue { ptr, i160 } %122, i160 %123, 1
  call void %120(ptr %112, { ptr, i160 } %124) #15
  %125 = load ptr, ptr %8, align 8
  store ptr %125, ptr %13, align 8
  %126 = load i160, ptr %7, align 4
  store i160 %126, ptr %12, align 4
  %127 = load ptr, ptr %13, align 8
  %128 = insertvalue { ptr, i160 } undef, ptr %127, 0
  %129 = load i160, ptr %12, align 4
  %130 = insertvalue { ptr, i160 } %128, i160 %129, 1
  store { ptr, i160 } %130, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem20, align 8
  br label %132

131:                                              ; preds = %103
  store { ptr, i160 } poison, ptr %.reg2mem20, align 8
  br label %132

132:                                              ; preds = %131, %106
  %.reload21 = load { ptr, i160 }, ptr %.reg2mem20, align 8
  ret { ptr, i160 } %.reload21
}

define void @Channel_put_new_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca i1, align 1
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [0 x ptr], align 8
  %11 = alloca {}, align 8
  %12 = alloca { ptr, i160 }, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  store ptr %20, ptr %.reg2mem9, align 8
  %21 = load ptr, ptr %19, align 8
  %.reload14 = load ptr, ptr %.reg2mem9, align 8
  store ptr %21, ptr %.reload14, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr %26, ptr %.reg2mem3, align 8
  %27 = load i32, ptr %25, align 4
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  store i32 %27, ptr %.reload8, align 4
  call void @set_offset(ptr %15, ptr @Channel)
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %28, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  store ptr %32, ptr %30, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %33, align 4
  store i160 %34, ptr %29, align 4
  %.reload13 = load ptr, ptr %.reg2mem9, align 8
  %35 = load ptr, ptr %.reload13, align 8
  %36 = load ptr, ptr %15, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 64, ptr %36)
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %38 = load i32, ptr %.reload7, align 4
  %39 = getelementptr ptr, ptr %36, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call { ptr, i160 } %43(ptr %35) #16
  %45 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %44, ptr %45, align 8
  br label %46

46:                                               ; preds = %._crit_edge1, %4
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %47 = load ptr, ptr %.reload12, align 8
  %48 = load ptr, ptr %15, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 64, ptr %48)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %50 = load i32, ptr %.reload6, align 4
  %51 = getelementptr ptr, ptr %48, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %47)
  %54 = load ptr, ptr %45, align 8
  %55 = ptrtoint ptr %54 to i64
  %56 = icmp eq i64 %55, ptrtoint (ptr @nil_typ to i64)
  %57 = icmp eq i64 %55, 0
  %58 = or i1 %56, %57
  %59 = icmp eq i1 %58, false
  store i1 %59, ptr %5, align 1
  %60 = load i1, ptr %5, align 1
  store i1 %60, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %61, label %._crit_edge

._crit_edge:                                      ; preds = %46
  br label %112

61:                                               ; preds = %46
  %62 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 0
  %63 = load ptr, ptr %62, align 8
  store ptr %63, ptr %7, align 8
  %64 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 1
  %65 = load i160, ptr %64, align 4
  store i160 %65, ptr %6, align 4
  store ptr @Blocking, ptr %8, align 8
  %66 = load ptr, ptr %8, align 8
  %67 = getelementptr ptr, ptr %66, i32 6
  %68 = load ptr, ptr %67, align 8
  %69 = call { i64, i64 } @size_wrapper(ptr %68, ptr %8)
  %70 = extractvalue { i64, i64 } %69, 0
  %71 = call ptr @bump_malloc(i64 %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  store ptr @Blocking, ptr %9, align 8
  store ptr %71, ptr %72, align 8
  store i32 10, ptr %73, align 4
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = load ptr, ptr %72, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 2
  %82 = load i32, ptr %73, align 4
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = call ptr @llvm.invariant.start.p0(i64 0, ptr %10)
  %85 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %86 = getelementptr ptr, ptr %75, i32 %82
  %87 = load ptr, ptr %86, align 8
  %88 = call ptr @behavior_wrapper(ptr %87, { ptr, ptr, ptr, i32 } %83, ptr %11)
  call void %88({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr %10) #17
  %89 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, i160 } undef, ptr %90, 0
  %92 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %93 = load i160, ptr %92, align 4
  %94 = insertvalue { ptr, i160 } %91, i160 %93, 1
  %95 = call ptr @get_current_coroutine()
  %96 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %95, i32 0, i32 4
  store { ptr, i160 } %94, ptr %96, align 8
  call void @coroutine_yield(ptr %95)
  %97 = load { ptr, i160 }, ptr %96, align 8
  store { ptr, i160 } %97, ptr %12, align 8
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %98 = load ptr, ptr %.reload11, align 8
  %99 = load ptr, ptr %15, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 64, ptr %99)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %101 = load i32, ptr %.reload5, align 4
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = call { ptr, i160 } %106(ptr %98) #16
  store { ptr, i160 } %107, ptr %13, align 8
  %108 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  store ptr %109, ptr %62, align 8
  %110 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 1
  %111 = load i160, ptr %110, align 4
  store i160 %111, ptr %64, align 4
  br label %112

112:                                              ; preds = %._crit_edge, %61
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %113

._crit_edge1:                                     ; preds = %112
  br label %46

113:                                              ; preds = %112
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %114 = load ptr, ptr %.reload10, align 8
  %115 = load ptr, ptr %15, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 64, ptr %115)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %117 = load i32, ptr %.reload4, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 1
  %122 = load ptr, ptr %121, align 8
  %123 = load ptr, ptr %30, align 8
  %124 = insertvalue { ptr, i160 } undef, ptr %123, 0
  %125 = load i160, ptr %29, align 4
  %126 = insertvalue { ptr, i160 } %124, i160 %125, 1
  call void %122(ptr %114, { ptr, i160 } %126) #15
  ret void
}

define { ptr, i160 } @Channel_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, i160 } undef, ptr %9, 0
  %11 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %12 = load i160, ptr %11, align 4
  %13 = insertvalue { ptr, i160 } %10, i160 %12, 1
  ret { ptr, i160 } %13
}

define void @Channel_setter_value(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %15 = load i160, ptr %13, align 4
  store i160 %15, ptr %14, align 4
  ret void
}

define { i64, i64 } @_data_size_Array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @Array_field_Array_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Array_B__Self_from_iterable_iterableIterableT(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 1
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 2
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 0
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 1
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @Iterable, align 4
  %15 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 ptrtoint (ptr @Iterable to i64), ptr %13)
  store i1 %15, ptr %2, align 1
  store i32 31, ptr %4, align 4
  %16 = load i32, ptr %4, align 4
  %17 = getelementptr [83 x ptr], ptr @Array, i32 0, i32 %16
  %18 = getelementptr ptr, ptr %17, i32 10
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 32, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [83 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 33, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_init_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @i32_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 34, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [83 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_init_bufferBufferT_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @buffer_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @i32_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 35, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [83 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 36, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [83 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 37, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [83 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 38, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Array, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Array to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 39, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_reserve_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 40, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 41, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B__set_index_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 1
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 2
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 0
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 1
  %16 = load i64, ptr %12, align 4
  %17 = load i64, ptr %13, align 4
  %18 = load ptr, ptr %14, align 8
  %19 = load ptr, ptr %15, align 8
  %20 = load i64, ptr @any_typ, align 4
  %21 = call i1 @subtype_test_wrapper(ptr %18, i64 %17, i64 %16, i64 %20, i64 ptrtoint (ptr @any_typ to i64), ptr %19)
  store i1 %21, ptr %3, align 1
  store i32 42, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [83 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Array_B_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 43, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_unchecked_index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 44, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_unchecked_insert_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 1
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 2
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 0
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 1
  %16 = load i64, ptr %12, align 4
  %17 = load i64, ptr %13, align 4
  %18 = load ptr, ptr %14, align 8
  %19 = load ptr, ptr %15, align 8
  %20 = load i64, ptr @any_typ, align 4
  %21 = call i1 @subtype_test_wrapper(ptr %18, i64 %17, i64 %16, i64 %20, i64 ptrtoint (ptr @any_typ to i64), ptr %19)
  store i1 %21, ptr %3, align 1
  store i32 45, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [83 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 46, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [83 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 47, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 48, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [83 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Array_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 49, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 50, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 51, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 52, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 53, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 54, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 55, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 56, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 57, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [83 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterableT(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca { ptr, i160 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca i1, align 1
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %34, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %34, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 664, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %44, align 8
  %45 = getelementptr ptr, ptr %44, i32 1
  store ptr %43, ptr %45, align 8
  %46 = load ptr, ptr %44, align 8
  %47 = getelementptr ptr, ptr %46, i32 6
  %48 = load ptr, ptr %47, align 8
  %49 = call { i64, i64 } @size_wrapper(ptr %48, ptr %44)
  %50 = extractvalue { i64, i64 } %49, 0
  %51 = call ptr @bump_malloc(i64 %50)
  store ptr %43, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 8, ptr %51)
  %53 = alloca i32, align 4
  %54 = alloca ptr, align 8
  %55 = alloca ptr, align 8
  %56 = alloca ptr, align 8
  store ptr @Array, ptr %56, align 8
  store ptr %51, ptr %55, align 8
  store i32 10, ptr %53, align 4
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = load ptr, ptr %55, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 1
  %61 = load ptr, ptr %54, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 2
  %63 = load i32, ptr %53, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %63, 3
  %65 = alloca [0 x ptr], align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr %65)
  %67 = call ptr @llvm.invariant.start.p0(i64 664, ptr %57)
  %68 = getelementptr ptr, ptr %57, i32 %63
  %69 = getelementptr ptr, ptr %68, i32 5
  %70 = load ptr, ptr %69, align 8
  %71 = alloca {}, align 8
  %72 = call ptr @behavior_wrapper(ptr %70, { ptr, ptr, ptr, i32 } %64, ptr %71)
  call void %72({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %65) #17
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %56, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %55, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %54, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %53, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @Array)
  %82 = alloca i32, align 4
  %83 = alloca ptr, align 8
  %84 = alloca ptr, align 8
  %85 = alloca ptr, align 8
  %86 = load ptr, ptr %74, align 8
  store ptr %86, ptr %85, align 8
  %87 = load ptr, ptr %76, align 8
  store ptr %87, ptr %84, align 8
  %88 = load ptr, ptr %78, align 8
  store ptr %88, ptr %83, align 8
  %89 = load i32, ptr %80, align 4
  store i32 %89, ptr %82, align 4
  %90 = load ptr, ptr %23, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = load ptr, ptr %26, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %92, 1
  %94 = load ptr, ptr %29, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 2
  %96 = load i32, ptr %32, align 4
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %96, 3
  %98 = alloca [0 x ptr], align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 0, ptr %98)
  %100 = call ptr @llvm.invariant.start.p0(i64 184, ptr %90)
  %101 = getelementptr ptr, ptr %90, i32 %96
  %102 = getelementptr ptr, ptr %101, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = alloca {}, align 8
  %105 = call ptr @behavior_wrapper(ptr %103, { ptr, ptr, ptr, i32 } %97, ptr %104)
  %106 = call { ptr, ptr, ptr, i32 } %105({ ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %97, ptr %98) #17
  %107 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %106, ptr %107, align 8
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 0
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %114 = load ptr, ptr %112, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 2
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %117 = load ptr, ptr %115, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 3
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %120 = load i32, ptr %118, align 4
  store i32 %120, ptr %119, align 4
  call void @set_offset(ptr %108, ptr @Iterator)
  %121 = alloca { ptr, ptr, ptr, i32 }, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 0
  %123 = load ptr, ptr %110, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 1
  %125 = load ptr, ptr %113, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 2
  %127 = load ptr, ptr %116, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 3
  %129 = load i32, ptr %119, align 4
  store i32 %129, ptr %128, align 4
  call void @set_offset(ptr %121, ptr @Iterator)
  %130 = alloca i32, align 4
  %131 = alloca ptr, align 8
  %132 = alloca ptr, align 8
  %133 = alloca ptr, align 8
  %134 = load ptr, ptr %122, align 8
  store ptr %134, ptr %133, align 8
  %135 = load ptr, ptr %124, align 8
  store ptr %135, ptr %132, align 8
  %136 = load ptr, ptr %126, align 8
  store ptr %136, ptr %131, align 8
  %137 = load i32, ptr %128, align 4
  store i32 %137, ptr %130, align 4
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  store ptr %138, ptr %.reg2mem5, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr %139, ptr %.reg2mem3, align 8
  br label %140

140:                                              ; preds = %._crit_edge1, %2
  %141 = load ptr, ptr %133, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = load ptr, ptr %132, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %143, 1
  %145 = load ptr, ptr %131, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %145, 2
  %147 = load i32, ptr %130, align 4
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, i32 %147, 3
  %149 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %150 = call ptr @llvm.invariant.start.p0(i64 24, ptr %141)
  %151 = getelementptr ptr, ptr %141, i32 %147
  %152 = getelementptr ptr, ptr %151, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = call ptr @behavior_wrapper(ptr %153, { ptr, ptr, ptr, i32 } %148, ptr %4)
  %155 = call { ptr, i160 } %154({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr %3) #17
  store { ptr, i160 } %155, ptr %5, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %6, align 8
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %156 = load ptr, ptr %.reload6, align 8
  %157 = load ptr, ptr %6, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 664, ptr %157)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %159 = load i32, ptr %.reload4, align 4
  %160 = getelementptr ptr, ptr %157, i32 %159
  %161 = load ptr, ptr %160, align 8
  %162 = call ptr @typegetter_wrapper(ptr %161, ptr %156)
  %163 = load ptr, ptr %5, align 8
  %164 = ptrtoint ptr %163 to i64
  %165 = icmp eq i64 %164, ptrtoint (ptr @nil_typ to i64)
  %166 = icmp eq i64 %164, 0
  %167 = or i1 %165, %166
  %168 = icmp eq i1 %167, false
  store i1 %168, ptr %7, align 1
  %169 = load i1, ptr %7, align 1
  store i1 %169, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %170, label %._crit_edge

._crit_edge:                                      ; preds = %140
  br label %223

170:                                              ; preds = %140
  %171 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %172 = load ptr, ptr %171, align 8
  store ptr %172, ptr %9, align 8
  %173 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %174 = load i160, ptr %173, align 4
  store i160 %174, ptr %8, align 4
  %175 = load ptr, ptr %9, align 8
  store ptr %175, ptr %11, align 8
  %176 = load i160, ptr %8, align 4
  store i160 %176, ptr %10, align 4
  %177 = load ptr, ptr %11, align 8
  %178 = insertvalue { ptr, i160 } undef, ptr %177, 0
  %179 = load i160, ptr %10, align 4
  %180 = insertvalue { ptr, i160 } %178, i160 %179, 1
  %181 = load ptr, ptr %85, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = load ptr, ptr %84, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %183, 1
  %185 = load ptr, ptr %83, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %185, 2
  %187 = load i32, ptr %82, align 4
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, i32 %187, 3
  store { ptr, ptr, ptr, i32 } %1, ptr %12, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %190 = load ptr, ptr %189, align 8
  %191 = load ptr, ptr %12, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 664, ptr %191)
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %194 = load i32, ptr %193, align 4
  %195 = getelementptr ptr, ptr %191, i32 %194
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr @typegetter_wrapper(ptr %196, ptr %190)
  %198 = getelementptr [1 x ptr], ptr %13, i32 0, i32 0
  store ptr %197, ptr %198, align 8
  %199 = call ptr @llvm.invariant.start.p0(i64 1, ptr %13)
  %200 = call ptr @llvm.invariant.start.p0(i64 664, ptr %181)
  %201 = getelementptr ptr, ptr %181, i32 %187
  %202 = getelementptr ptr, ptr %201, i32 11
  %203 = load ptr, ptr %202, align 8
  %204 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  store ptr %177, ptr %204, align 8
  %205 = call ptr @behavior_wrapper(ptr %203, { ptr, ptr, ptr, i32 } %188, ptr %14)
  %206 = call { ptr, ptr, ptr, i32 } %205({ ptr, ptr, ptr, i32 } %188, { ptr, ptr, ptr, i32 } %188, ptr %13, { ptr, i160 } %180) #17
  store { ptr, ptr, ptr, i32 } %206, ptr %15, align 8
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %209 = load ptr, ptr %207, align 8
  store ptr %209, ptr %208, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %218 = load i32, ptr %216, align 4
  store i32 %218, ptr %217, align 4
  call void @set_offset(ptr %16, ptr @Array)
  %219 = load ptr, ptr %9, align 8
  store ptr %219, ptr %18, align 8
  %220 = load i160, ptr %8, align 4
  store i160 %220, ptr %17, align 4
  %221 = load ptr, ptr %18, align 8
  store ptr %221, ptr %171, align 8
  %222 = load i160, ptr %17, align 4
  store i160 %222, ptr %173, align 4
  br label %223

223:                                              ; preds = %._crit_edge, %170
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %224

._crit_edge1:                                     ; preds = %223
  br label %140

224:                                              ; preds = %223
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %226 = load ptr, ptr %85, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %228 = load ptr, ptr %84, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %230 = load ptr, ptr %83, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %232 = load i32, ptr %82, align 4
  store i32 %232, ptr %231, align 4
  call void @set_offset(ptr %19, ptr @Array)
  %233 = load ptr, ptr %225, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %233, 0
  %235 = load ptr, ptr %227, align 8
  %236 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %235, 1
  %237 = load ptr, ptr %229, align 8
  %238 = insertvalue { ptr, ptr, ptr, i32 } %236, ptr %237, 2
  %239 = load i32, ptr %231, align 4
  %240 = insertvalue { ptr, ptr, ptr, i32 } %238, i32 %239, 3
  ret { ptr, ptr, ptr, i32 } %240
}

define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = alloca i32, align 4
  store i32 1, ptr %18, align 4
  %19 = load ptr, ptr %10, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 664, ptr %20)
  %22 = load i32, ptr %16, align 4
  %23 = getelementptr ptr, ptr %20, i32 %22
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %19)
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr ptr, ptr %26, i32 9
  %28 = load ptr, ptr %27, align 8
  %29 = call { i64, i64 } @size_wrapper(ptr %28, ptr %25)
  %30 = extractvalue { i64, i64 } %29, 0
  %31 = load i32, ptr %18, align 4
  %32 = sext i32 %31 to i64
  %33 = alloca ptr, align 8
  %34 = mul i64 %32, %30
  %35 = call ptr @bump_malloc(i64 %34)
  store ptr %35, ptr %33, align 8
  %36 = load ptr, ptr %10, align 8
  %37 = load ptr, ptr %5, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 664, ptr %37)
  %39 = load i32, ptr %16, align 4
  %40 = getelementptr ptr, ptr %37, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr { ptr }, ptr %33, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr } undef, ptr %46, 0
  call void %44(ptr %36, { ptr } %47) #15
  %48 = alloca i32, align 4
  store i32 0, ptr %48, align 4
  %49 = load ptr, ptr %10, align 8
  %50 = load ptr, ptr %5, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 664, ptr %50)
  %52 = load i32, ptr %16, align 4
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = load i32, ptr %48, align 4
  call void %57(ptr %49, i32 %58) #15
  %59 = alloca i32, align 4
  store i32 1, ptr %59, align 4
  %60 = load ptr, ptr %10, align 8
  %61 = load ptr, ptr %5, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 664, ptr %61)
  %63 = load i32, ptr %16, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 3
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load i32, ptr %59, align 4
  call void %68(ptr %60, i32 %69) #15
  ret void
}

define void @Array_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 664, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 3
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %19, align 4
  call void %28(ptr %20, i32 %29) #15
  %30 = load ptr, ptr %11, align 8
  %31 = load ptr, ptr %6, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 664, ptr %31)
  %33 = load i32, ptr %17, align 4
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 3
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %30) #16
  %40 = alloca i32, align 4
  store i32 %39, ptr %40, align 4
  %41 = load ptr, ptr %11, align 8
  %42 = load ptr, ptr %6, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 664, ptr %42)
  %44 = load i32, ptr %17, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = load ptr, ptr %45, align 8
  %47 = call ptr @typegetter_wrapper(ptr %46, ptr %41)
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr ptr, ptr %48, i32 9
  %50 = load ptr, ptr %49, align 8
  %51 = call { i64, i64 } @size_wrapper(ptr %50, ptr %47)
  %52 = extractvalue { i64, i64 } %51, 0
  %53 = load i32, ptr %40, align 4
  %54 = sext i32 %53 to i64
  %55 = alloca ptr, align 8
  %56 = mul i64 %54, %52
  %57 = call ptr @bump_malloc(i64 %56)
  store ptr %57, ptr %55, align 8
  %58 = load ptr, ptr %11, align 8
  %59 = load ptr, ptr %6, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 664, ptr %59)
  %61 = load i32, ptr %17, align 4
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr } undef, ptr %68, 0
  call void %66(ptr %58, { ptr } %69) #15
  %70 = alloca i32, align 4
  store i32 0, ptr %70, align 4
  %71 = load ptr, ptr %11, align 8
  %72 = load ptr, ptr %6, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 664, ptr %72)
  %74 = load i32, ptr %17, align 4
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr }, ptr %77, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load i32, ptr %70, align 4
  call void %79(ptr %71, i32 %80) #15
  ret void
}

define void @Array_init_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 664, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load i32, ptr %20, align 4
  call void %29(ptr %21, i32 %30) #15
  %31 = alloca i32, align 4
  store i32 %4, ptr %31, align 4
  %32 = load ptr, ptr %12, align 8
  %33 = load ptr, ptr %7, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 664, ptr %33)
  %35 = load i32, ptr %18, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 3
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = load i32, ptr %31, align 4
  call void %40(ptr %32, i32 %41) #15
  %42 = load ptr, ptr %12, align 8
  %43 = load ptr, ptr %7, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 664, ptr %43)
  %45 = load i32, ptr %18, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 3
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = call i32 %50(ptr %42) #16
  %52 = alloca i32, align 4
  store i32 %51, ptr %52, align 4
  %53 = load ptr, ptr %12, align 8
  %54 = load ptr, ptr %7, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 664, ptr %54)
  %56 = load i32, ptr %18, align 4
  %57 = getelementptr ptr, ptr %54, i32 %56
  %58 = load ptr, ptr %57, align 8
  %59 = call ptr @typegetter_wrapper(ptr %58, ptr %53)
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr ptr, ptr %60, i32 9
  %62 = load ptr, ptr %61, align 8
  %63 = call { i64, i64 } @size_wrapper(ptr %62, ptr %59)
  %64 = extractvalue { i64, i64 } %63, 0
  %65 = load i32, ptr %52, align 4
  %66 = sext i32 %65 to i64
  %67 = alloca ptr, align 8
  %68 = mul i64 %66, %64
  %69 = call ptr @bump_malloc(i64 %68)
  store ptr %69, ptr %67, align 8
  %70 = load ptr, ptr %12, align 8
  %71 = load ptr, ptr %7, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 664, ptr %71)
  %73 = load i32, ptr %18, align 4
  %74 = getelementptr ptr, ptr %71, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr }, ptr %67, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr } undef, ptr %80, 0
  call void %78(ptr %70, { ptr } %81) #15
  ret void
}

define void @Array_init_bufferBufferT_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Array)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 664, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %21, align 8
  %32 = insertvalue { ptr } undef, ptr %31, 0
  call void %30(ptr %22, { ptr } %32) #15
  %33 = alloca i32, align 4
  store i32 %4, ptr %33, align 4
  %34 = load ptr, ptr %13, align 8
  %35 = load ptr, ptr %8, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 664, ptr %35)
  %37 = load i32, ptr %19, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load i32, ptr %33, align 4
  call void %42(ptr %34, i32 %43) #15
  %44 = alloca i32, align 4
  store i32 %5, ptr %44, align 4
  %45 = load ptr, ptr %13, align 8
  %46 = load ptr, ptr %8, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 664, ptr %46)
  %48 = load i32, ptr %19, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 3
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = load i32, ptr %44, align 4
  call void %53(ptr %45, i32 %54) #15
  ret void
}

define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 664, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #16
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 664, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #16
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem27 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  store ptr %21, ptr %.reg2mem27, align 8
  %22 = load ptr, ptr %20, align 8
  %.reload30 = load ptr, ptr %.reg2mem27, align 8
  store ptr %22, ptr %.reload30, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem15, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload26 = load ptr, ptr %.reg2mem15, align 8
  store ptr %25, ptr %.reload26, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  store ptr %27, ptr %.reg2mem11, align 8
  %28 = load ptr, ptr %26, align 8
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  store ptr %28, ptr %.reload14, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem, align 8
  %31 = load i32, ptr %29, align 4
  %.reload10 = load ptr, ptr %.reg2mem, align 8
  store i32 %31, ptr %.reload10, align 4
  call void @set_offset(ptr %19, ptr @Array)
  %32 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %32, align 8
  %33 = alloca i160, align 8
  %34 = alloca ptr, align 8
  %35 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  store ptr %36, ptr %34, align 8
  %37 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %38 = load i160, ptr %37, align 4
  store i160 %38, ptr %33, align 4
  %.reload25 = load ptr, ptr %.reg2mem15, align 8
  %39 = load ptr, ptr %.reload25, align 8
  %40 = load ptr, ptr %19, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 664, ptr %40)
  %.reload9 = load ptr, ptr %.reg2mem, align 8
  %42 = load i32, ptr %.reload9, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, ptr }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %39) #16
  %49 = alloca i32, align 4
  store i32 %48, ptr %49, align 4
  %.reload24 = load ptr, ptr %.reg2mem15, align 8
  %50 = load ptr, ptr %.reload24, align 8
  %51 = load ptr, ptr %19, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 664, ptr %51)
  %.reload8 = load ptr, ptr %.reg2mem, align 8
  %53 = load i32, ptr %.reload8, align 4
  %54 = getelementptr ptr, ptr %51, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 3
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call i32 %58(ptr %50) #16
  %60 = alloca i32, align 4
  store i32 %59, ptr %60, align 4
  %61 = load i32, ptr %49, align 4
  %62 = load i32, ptr %60, align 4
  %63 = icmp sge i32 %61, %62
  %64 = alloca i1, align 1
  store i1 %63, ptr %64, align 1
  %65 = load i1, ptr %64, align 1
  br i1 %65, label %66, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %97

66:                                               ; preds = %4
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  %67 = load ptr, ptr %.reload23, align 8
  %68 = load ptr, ptr %19, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 664, ptr %68)
  %.reload7 = load ptr, ptr %.reg2mem, align 8
  %70 = load i32, ptr %.reload7, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = getelementptr ptr, ptr %71, i32 3
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = call i32 %75(ptr %67) #16
  store i32 %76, ptr %5, align 4
  store i32 2, ptr %6, align 4
  %77 = load i32, ptr %5, align 4
  %78 = load i32, ptr %6, align 4
  %79 = mul i32 %77, %78
  store i32 %79, ptr %7, align 4
  %80 = load i32, ptr %7, align 4
  %.reload29 = load ptr, ptr %.reg2mem27, align 8
  %81 = load ptr, ptr %.reload29, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %83 = load ptr, ptr %.reload22, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 1
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %85 = load ptr, ptr %.reload13, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 2
  %.reload6 = load ptr, ptr %.reg2mem, align 8
  %87 = load i32, ptr %.reload6, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %87, 3
  %89 = getelementptr [1 x ptr], ptr %8, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %89, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 1, ptr %8)
  %91 = call ptr @llvm.invariant.start.p0(i64 664, ptr %81)
  %92 = getelementptr ptr, ptr %81, i32 %87
  %93 = getelementptr ptr, ptr %92, i32 13
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr { ptr }, ptr %9, i32 0, i32 0
  store ptr @i32_typ, ptr %95, align 8
  %96 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %88, ptr %9)
  call void %96({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %8, i32 %80) #17
  br label %97

97:                                               ; preds = %._crit_edge, %66
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %98 = load ptr, ptr %.reload21, align 8
  %99 = load ptr, ptr %19, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 664, ptr %99)
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  %101 = load i32, ptr %.reload5, align 4
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = call { ptr } %106(ptr %98) #16
  store { ptr } %107, ptr %10, align 8
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  %108 = load ptr, ptr %.reload20, align 8
  %109 = load ptr, ptr %19, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 664, ptr %109)
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %111 = load i32, ptr %.reload4, align 4
  %112 = getelementptr ptr, ptr %109, i32 %111
  %113 = getelementptr ptr, ptr %112, i32 2
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr { ptr, ptr }, ptr %114, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %117 = call i32 %116(ptr %108) #16
  store i32 %117, ptr %11, align 4
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %118 = load ptr, ptr %.reload19, align 8
  %119 = load ptr, ptr %19, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 664, ptr %119)
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %121 = load i32, ptr %.reload3, align 4
  %122 = getelementptr ptr, ptr %119, i32 %121
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @typegetter_wrapper(ptr %123, ptr %118)
  %125 = load ptr, ptr %34, align 8
  store ptr %125, ptr %13, align 8
  %126 = load i160, ptr %33, align 4
  store i160 %126, ptr %12, align 4
  %127 = load ptr, ptr %124, align 8
  %128 = getelementptr ptr, ptr %127, i32 9
  %129 = load ptr, ptr %128, align 8
  %130 = call { i64, i64 } @size_wrapper(ptr %129, ptr %124)
  %131 = extractvalue { i64, i64 } %130, 0
  %132 = load ptr, ptr %10, align 8
  %133 = load i32, ptr %11, align 4
  %134 = sext i32 %133 to i64
  %135 = mul i64 %131, %134
  %136 = getelementptr i8, ptr %132, i64 %135
  %137 = load ptr, ptr %13, align 8
  %138 = insertvalue { ptr, i160 } undef, ptr %137, 0
  %139 = load i160, ptr %12, align 4
  %140 = insertvalue { ptr, i160 } %138, i160 %139, 1
  %141 = load ptr, ptr %124, align 8
  %142 = getelementptr ptr, ptr %141, i32 8
  %143 = load ptr, ptr %142, align 8
  call void @unbox_wrapper(ptr %143, { ptr, i160 } %140, ptr %124, ptr %136)
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %144 = load ptr, ptr %.reload18, align 8
  %145 = load ptr, ptr %19, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 664, ptr %145)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %147 = load i32, ptr %.reload2, align 4
  %148 = getelementptr ptr, ptr %145, i32 %147
  %149 = getelementptr ptr, ptr %148, i32 2
  %150 = load ptr, ptr %149, align 8
  %151 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = call i32 %152(ptr %144) #16
  store i32 %153, ptr %14, align 4
  store i32 1, ptr %15, align 4
  %154 = load i32, ptr %14, align 4
  %155 = load i32, ptr %15, align 4
  %156 = add i32 %154, %155
  store i32 %156, ptr %16, align 4
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %157 = load ptr, ptr %.reload17, align 8
  %158 = load ptr, ptr %19, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 664, ptr %158)
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %160 = load i32, ptr %.reload1, align 4
  %161 = getelementptr ptr, ptr %158, i32 %160
  %162 = getelementptr ptr, ptr %161, i32 2
  %163 = load ptr, ptr %162, align 8
  %164 = getelementptr { ptr, ptr }, ptr %163, i32 0, i32 1
  %165 = load ptr, ptr %164, align 8
  %166 = load i32, ptr %16, align 4
  call void %165(ptr %157, i32 %166) #15
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %.reload28 = load ptr, ptr %.reg2mem27, align 8
  %168 = load ptr, ptr %.reload28, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %170 = load ptr, ptr %.reload16, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %172 = load ptr, ptr %.reload12, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %.reload = load ptr, ptr %.reg2mem, align 8
  %174 = load i32, ptr %.reload, align 4
  store i32 %174, ptr %173, align 4
  call void @set_offset(ptr %17, ptr @Array)
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %175, 0
  %177 = load ptr, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %177, 1
  %179 = load ptr, ptr %171, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %179, 2
  %181 = load i32, ptr %173, align 4
  %182 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 %181, 3
  ret { ptr, ptr, ptr, i32 } %182
}

define { ptr, ptr, ptr, i32 } @Array_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca i32, align 4
  %8 = alloca i1, align 1
  %9 = alloca i32, align 4
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca { ptr, i160 }, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i160, align 8
  %16 = alloca ptr, align 8
  %17 = alloca [2 x ptr], align 8
  %18 = alloca { ptr, ptr }, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem4 = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem29 = alloca ptr, align 8
  %.reg2mem34 = alloca ptr, align 8
  %.reg2mem42 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %22, align 8
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  store ptr %25, ptr %.reg2mem42, align 8
  %26 = load ptr, ptr %24, align 8
  %.reload46 = load ptr, ptr %.reg2mem42, align 8
  store ptr %26, ptr %.reload46, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  store ptr %28, ptr %.reg2mem34, align 8
  %29 = load ptr, ptr %27, align 8
  %.reload41 = load ptr, ptr %.reg2mem34, align 8
  store ptr %29, ptr %.reload41, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  store ptr %31, ptr %.reg2mem29, align 8
  %32 = load ptr, ptr %30, align 8
  %.reload33 = load ptr, ptr %.reg2mem29, align 8
  store ptr %32, ptr %.reload33, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr %34, ptr %.reg2mem20, align 8
  %35 = load i32, ptr %33, align 4
  %.reload28 = load ptr, ptr %.reg2mem20, align 8
  store i32 %35, ptr %.reload28, align 4
  call void @set_offset(ptr %23, ptr @Array)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %36, align 8
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  store ptr %39, ptr %.reg2mem16, align 8
  %40 = load ptr, ptr %38, align 8
  %.reload19 = load ptr, ptr %.reg2mem16, align 8
  store ptr %40, ptr %.reload19, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  store ptr %42, ptr %.reg2mem12, align 8
  %43 = load ptr, ptr %41, align 8
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  store ptr %43, ptr %.reload15, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  store ptr %45, ptr %.reg2mem8, align 8
  %46 = load ptr, ptr %44, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  store ptr %46, ptr %.reload11, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  store ptr %48, ptr %.reg2mem4, align 8
  %49 = load i32, ptr %47, align 4
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store i32 %49, ptr %.reload7, align 4
  call void @set_offset(ptr %37, ptr @Array)
  %.reload18 = load ptr, ptr %.reg2mem16, align 8
  %50 = load ptr, ptr %.reload18, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %52 = load ptr, ptr %.reload14, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %54 = load ptr, ptr %.reload10, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  %56 = load i32, ptr %.reload6, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  %58 = alloca [0 x ptr], align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 664, ptr %50)
  %61 = getelementptr ptr, ptr %50, i32 %56
  %62 = getelementptr ptr, ptr %61, i32 9
  %63 = load ptr, ptr %62, align 8
  %64 = alloca {}, align 8
  %65 = call ptr @behavior_wrapper(ptr %63, { ptr, ptr, ptr, i32 } %57, ptr %64)
  %66 = call i32 %65({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr %58) #17
  %67 = alloca i32, align 4
  store i32 %66, ptr %67, align 4
  %.reload40 = load ptr, ptr %.reg2mem34, align 8
  %68 = load ptr, ptr %.reload40, align 8
  %69 = load ptr, ptr %23, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 664, ptr %69)
  %.reload27 = load ptr, ptr %.reg2mem20, align 8
  %71 = load i32, ptr %.reload27, align 4
  %72 = getelementptr ptr, ptr %69, i32 %71
  %73 = getelementptr ptr, ptr %72, i32 2
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = call i32 %76(ptr %68) #16
  %78 = alloca i32, align 4
  store i32 %77, ptr %78, align 4
  %79 = load i32, ptr %78, align 4
  %80 = load i32, ptr %67, align 4
  %81 = add i32 %79, %80
  %82 = alloca i32, align 4
  store i32 %81, ptr %82, align 4
  %.reload39 = load ptr, ptr %.reg2mem34, align 8
  %83 = load ptr, ptr %.reload39, align 8
  %84 = load ptr, ptr %23, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 664, ptr %84)
  %.reload26 = load ptr, ptr %.reg2mem20, align 8
  %86 = load i32, ptr %.reload26, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 3
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = call i32 %91(ptr %83) #16
  %93 = alloca i32, align 4
  store i32 %92, ptr %93, align 4
  %94 = load i32, ptr %82, align 4
  %95 = load i32, ptr %93, align 4
  %96 = icmp sge i32 %94, %95
  %97 = alloca i1, align 1
  store i1 %96, ptr %97, align 1
  %98 = load i1, ptr %97, align 1
  br i1 %98, label %99, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %117

99:                                               ; preds = %4
  %100 = load i32, ptr %82, align 4
  %.reload45 = load ptr, ptr %.reg2mem42, align 8
  %101 = load ptr, ptr %.reload45, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %101, 0
  %.reload38 = load ptr, ptr %.reg2mem34, align 8
  %103 = load ptr, ptr %.reload38, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %103, 1
  %.reload32 = load ptr, ptr %.reg2mem29, align 8
  %105 = load ptr, ptr %.reload32, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %105, 2
  %.reload25 = load ptr, ptr %.reg2mem20, align 8
  %107 = load i32, ptr %.reload25, align 4
  %108 = insertvalue { ptr, ptr, ptr, i32 } %106, i32 %107, 3
  %109 = getelementptr [1 x ptr], ptr %5, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 1, ptr %5)
  %111 = call ptr @llvm.invariant.start.p0(i64 664, ptr %101)
  %112 = getelementptr ptr, ptr %101, i32 %107
  %113 = getelementptr ptr, ptr %112, i32 13
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  store ptr @i32_typ, ptr %115, align 8
  %116 = call ptr @behavior_wrapper(ptr %114, { ptr, ptr, ptr, i32 } %108, ptr %6)
  call void %116({ ptr, ptr, ptr, i32 } %108, { ptr, ptr, ptr, i32 } %108, ptr %5, i32 %100) #17
  br label %117

117:                                              ; preds = %._crit_edge, %99
  store i32 0, ptr %7, align 4
  br label %118

118:                                              ; preds = %._crit_edge2, %117
  %119 = load i32, ptr %7, align 4
  %120 = load i32, ptr %67, align 4
  %121 = icmp slt i32 %119, %120
  store i1 %121, ptr %8, align 1
  %122 = load i1, ptr %8, align 1
  store i1 %122, ptr %.reg2mem, align 1
  %.reload3 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload3, label %123, label %._crit_edge1

._crit_edge1:                                     ; preds = %118
  br label %184

123:                                              ; preds = %118
  %124 = load i32, ptr %7, align 4
  %125 = load i32, ptr %78, align 4
  %126 = add i32 %124, %125
  store i32 %126, ptr %9, align 4
  %127 = load i32, ptr %7, align 4
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %128 = load ptr, ptr %.reload17, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %130 = load ptr, ptr %.reload13, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %130, 1
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %132 = load ptr, ptr %.reload9, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %132, 2
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %134 = load i32, ptr %.reload5, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %134, 3
  %136 = getelementptr [1 x ptr], ptr %10, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %136, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 1, ptr %10)
  %138 = call ptr @llvm.invariant.start.p0(i64 664, ptr %128)
  %139 = getelementptr ptr, ptr %128, i32 %134
  %140 = getelementptr ptr, ptr %139, i32 17
  %141 = load ptr, ptr %140, align 8
  %142 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  store ptr @i32_typ, ptr %142, align 8
  %143 = call ptr @behavior_wrapper(ptr %141, { ptr, ptr, ptr, i32 } %135, ptr %11)
  %144 = call { ptr, i160 } %143({ ptr, ptr, ptr, i32 } %135, { ptr, ptr, ptr, i32 } %135, ptr %10, i32 %127) #17
  store { ptr, i160 } %144, ptr %12, align 8
  %145 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  store ptr %146, ptr %14, align 8
  %147 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 1
  %148 = load i160, ptr %147, align 4
  store i160 %148, ptr %13, align 4
  %149 = load i32, ptr %9, align 4
  %150 = load ptr, ptr %14, align 8
  store ptr %150, ptr %16, align 8
  %151 = load i160, ptr %13, align 4
  store i160 %151, ptr %15, align 4
  %152 = load ptr, ptr %16, align 8
  %153 = insertvalue { ptr, i160 } undef, ptr %152, 0
  %154 = load i160, ptr %15, align 4
  %155 = insertvalue { ptr, i160 } %153, i160 %154, 1
  %.reload44 = load ptr, ptr %.reg2mem42, align 8
  %156 = load ptr, ptr %.reload44, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %156, 0
  %.reload37 = load ptr, ptr %.reg2mem34, align 8
  %158 = load ptr, ptr %.reload37, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %158, 1
  %.reload31 = load ptr, ptr %.reg2mem29, align 8
  %160 = load ptr, ptr %.reload31, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %160, 2
  %.reload24 = load ptr, ptr %.reg2mem20, align 8
  %162 = load i32, ptr %.reload24, align 4
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, i32 %162, 3
  %164 = load ptr, ptr %23, align 8
  %165 = call ptr @llvm.invariant.start.p0(i64 664, ptr %164)
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  %166 = load i32, ptr %.reload23, align 4
  %167 = getelementptr ptr, ptr %164, i32 %166
  %168 = load ptr, ptr %167, align 8
  %169 = call ptr @typegetter_wrapper(ptr %168, ptr %158)
  %170 = getelementptr [2 x ptr], ptr %17, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %170, align 8
  %171 = getelementptr [2 x ptr], ptr %17, i32 0, i32 1
  store ptr %169, ptr %171, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 4, ptr %17)
  %173 = call ptr @llvm.invariant.start.p0(i64 664, ptr %156)
  %174 = getelementptr ptr, ptr %156, i32 %162
  %175 = getelementptr ptr, ptr %174, i32 18
  %176 = load ptr, ptr %175, align 8
  %177 = getelementptr { ptr, ptr }, ptr %18, i32 0, i32 0
  store ptr @i32_typ, ptr %177, align 8
  %178 = getelementptr { ptr, ptr }, ptr %18, i32 0, i32 1
  store ptr %152, ptr %178, align 8
  %179 = call ptr @behavior_wrapper(ptr %176, { ptr, ptr, ptr, i32 } %163, ptr %18)
  call void %179({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr %17, i32 %149, { ptr, i160 } %155) #17
  store i32 1, ptr %19, align 4
  %180 = load i32, ptr %7, align 4
  %181 = load i32, ptr %19, align 4
  %182 = add i32 %180, %181
  store i32 %182, ptr %20, align 4
  %183 = load i32, ptr %20, align 4
  store i32 %183, ptr %7, align 4
  br label %184

184:                                              ; preds = %._crit_edge1, %123
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge2, label %185

._crit_edge2:                                     ; preds = %184
  br label %118

185:                                              ; preds = %184
  %.reload36 = load ptr, ptr %.reg2mem34, align 8
  %186 = load ptr, ptr %.reload36, align 8
  %187 = load ptr, ptr %23, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 664, ptr %187)
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %189 = load i32, ptr %.reload22, align 4
  %190 = getelementptr ptr, ptr %187, i32 %189
  %191 = getelementptr ptr, ptr %190, i32 2
  %192 = load ptr, ptr %191, align 8
  %193 = getelementptr { ptr, ptr }, ptr %192, i32 0, i32 1
  %194 = load ptr, ptr %193, align 8
  %195 = load i32, ptr %82, align 4
  call void %194(ptr %186, i32 %195) #15
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %.reload43 = load ptr, ptr %.reg2mem42, align 8
  %197 = load ptr, ptr %.reload43, align 8
  store ptr %197, ptr %196, align 8
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %.reload35 = load ptr, ptr %.reg2mem34, align 8
  %199 = load ptr, ptr %.reload35, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %.reload30 = load ptr, ptr %.reg2mem29, align 8
  %201 = load ptr, ptr %.reload30, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %203 = load i32, ptr %.reload21, align 4
  store i32 %203, ptr %202, align 4
  call void @set_offset(ptr %21, ptr @Array)
  %204 = load ptr, ptr %196, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %204, 0
  %206 = load ptr, ptr %198, align 8
  %207 = insertvalue { ptr, ptr, ptr, i32 } %205, ptr %206, 1
  %208 = load ptr, ptr %200, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } %207, ptr %208, 2
  %210 = load i32, ptr %202, align 4
  %211 = insertvalue { ptr, ptr, ptr, i32 } %209, i32 %210, 3
  ret { ptr, ptr, ptr, i32 } %211
}

define void @Array_reserve_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i1, align 1
  %12 = alloca { ptr, i160 }, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem24, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload33 = load ptr, ptr %.reg2mem24, align 8
  store ptr %25, ptr %.reload33, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem14, align 8
  %31 = load i32, ptr %29, align 4
  %.reload23 = load ptr, ptr %.reg2mem14, align 8
  store i32 %31, ptr %.reload23, align 4
  call void @set_offset(ptr %19, ptr @Array)
  %32 = alloca i32, align 4
  store i32 %3, ptr %32, align 4
  %.reload32 = load ptr, ptr %.reg2mem24, align 8
  %33 = load ptr, ptr %.reload32, align 8
  %34 = load ptr, ptr %19, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 664, ptr %34)
  %.reload22 = load ptr, ptr %.reg2mem14, align 8
  %36 = load i32, ptr %.reload22, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 3
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = call i32 %41(ptr %33) #16
  %43 = alloca i32, align 4
  store i32 %42, ptr %43, align 4
  %44 = load i32, ptr %32, align 4
  %45 = load i32, ptr %43, align 4
  %46 = icmp sle i32 %44, %45
  %47 = alloca i1, align 1
  store i1 %46, ptr %47, align 1
  %48 = load i1, ptr %47, align 1
  br i1 %48, label %49, label %50

49:                                               ; preds = %4
  br label %177

50:                                               ; preds = %4
  %.reload31 = load ptr, ptr %.reg2mem24, align 8
  %51 = load ptr, ptr %.reload31, align 8
  %52 = load ptr, ptr %19, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 664, ptr %52)
  %.reload21 = load ptr, ptr %.reg2mem14, align 8
  %54 = load i32, ptr %.reload21, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 3
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = load i32, ptr %32, align 4
  call void %59(ptr %51, i32 %60) #15
  %.reload30 = load ptr, ptr %.reg2mem24, align 8
  %61 = load ptr, ptr %.reload30, align 8
  %62 = load ptr, ptr %19, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 664, ptr %62)
  %.reload20 = load ptr, ptr %.reg2mem14, align 8
  %64 = load i32, ptr %.reload20, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = call { ptr } %69(ptr %61) #16
  store { ptr } %70, ptr %5, align 8
  %71 = load ptr, ptr %5, align 8
  store ptr %71, ptr %6, align 8
  %.reload29 = load ptr, ptr %.reg2mem24, align 8
  %72 = load ptr, ptr %.reload29, align 8
  %73 = load ptr, ptr %19, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 664, ptr %73)
  %.reload19 = load ptr, ptr %.reg2mem14, align 8
  %75 = load i32, ptr %.reload19, align 4
  %76 = getelementptr ptr, ptr %73, i32 %75
  %77 = getelementptr ptr, ptr %76, i32 3
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = call i32 %80(ptr %72) #16
  store i32 %81, ptr %7, align 4
  %.reload28 = load ptr, ptr %.reg2mem24, align 8
  %82 = load ptr, ptr %.reload28, align 8
  %83 = load ptr, ptr %19, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 664, ptr %83)
  %.reload18 = load ptr, ptr %.reg2mem14, align 8
  %85 = load i32, ptr %.reload18, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = load ptr, ptr %86, align 8
  %88 = call ptr @typegetter_wrapper(ptr %87, ptr %82)
  store ptr %88, ptr %.reg2mem3, align 8
  %.reload13 = load ptr, ptr %.reg2mem3, align 8
  %89 = load ptr, ptr %.reload13, align 8
  %90 = getelementptr ptr, ptr %89, i32 9
  %91 = load ptr, ptr %90, align 8
  %.reload12 = load ptr, ptr %.reg2mem3, align 8
  %92 = call { i64, i64 } @size_wrapper(ptr %91, ptr %.reload12)
  %93 = extractvalue { i64, i64 } %92, 0
  %94 = load i32, ptr %7, align 4
  %95 = sext i32 %94 to i64
  %96 = mul i64 %95, %93
  %97 = call ptr @bump_malloc(i64 %96)
  store ptr %97, ptr %8, align 8
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %98 = load ptr, ptr %.reload27, align 8
  %99 = load ptr, ptr %19, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 664, ptr %99)
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  %101 = load i32, ptr %.reload17, align 4
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr } undef, ptr %108, 0
  call void %106(ptr %98, { ptr } %109) #15
  store i32 0, ptr %9, align 4
  br label %110

110:                                              ; preds = %._crit_edge1, %50
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  %111 = load ptr, ptr %.reload26, align 8
  %112 = load ptr, ptr %19, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 664, ptr %112)
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %114 = load i32, ptr %.reload16, align 4
  %115 = getelementptr ptr, ptr %112, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr { ptr, ptr }, ptr %117, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = call i32 %119(ptr %111) #16
  store i32 %120, ptr %10, align 4
  %121 = load i32, ptr %9, align 4
  %122 = load i32, ptr %10, align 4
  %123 = icmp slt i32 %121, %122
  store i1 %123, ptr %11, align 1
  %124 = load i1, ptr %11, align 1
  store i1 %124, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %125, label %._crit_edge

._crit_edge:                                      ; preds = %110
  br label %175

125:                                              ; preds = %110
  %.reload11 = load ptr, ptr %.reg2mem3, align 8
  %126 = load ptr, ptr %.reload11, align 8
  %127 = getelementptr ptr, ptr %126, i32 9
  %128 = load ptr, ptr %127, align 8
  %.reload10 = load ptr, ptr %.reg2mem3, align 8
  %129 = call { i64, i64 } @size_wrapper(ptr %128, ptr %.reload10)
  %130 = extractvalue { i64, i64 } %129, 0
  %131 = load ptr, ptr %6, align 8
  %132 = load i32, ptr %9, align 4
  %133 = sext i32 %132 to i64
  %134 = mul i64 %130, %133
  %135 = getelementptr i8, ptr %131, i64 %134
  %.reload9 = load ptr, ptr %.reg2mem3, align 8
  %136 = load ptr, ptr %.reload9, align 8
  %137 = getelementptr ptr, ptr %136, i32 7
  %138 = load ptr, ptr %137, align 8
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %139 = call { ptr, i160 } @box_wrapper(ptr %138, ptr %135, ptr %.reload8)
  store { ptr, i160 } %139, ptr %12, align 8
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %140 = load ptr, ptr %.reload25, align 8
  %141 = load ptr, ptr %19, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 664, ptr %141)
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %143 = load i32, ptr %.reload15, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr }, ptr %146, i32 0, i32 0
  %148 = load ptr, ptr %147, align 8
  %149 = call { ptr } %148(ptr %140) #16
  store { ptr } %149, ptr %13, align 8
  %150 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 0
  %151 = load ptr, ptr %150, align 8
  store ptr %151, ptr %15, align 8
  %152 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 1
  %153 = load i160, ptr %152, align 4
  store i160 %153, ptr %14, align 4
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %154 = load ptr, ptr %.reload7, align 8
  %155 = getelementptr ptr, ptr %154, i32 9
  %156 = load ptr, ptr %155, align 8
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %157 = call { i64, i64 } @size_wrapper(ptr %156, ptr %.reload6)
  %158 = extractvalue { i64, i64 } %157, 0
  %159 = load ptr, ptr %13, align 8
  %160 = load i32, ptr %9, align 4
  %161 = sext i32 %160 to i64
  %162 = mul i64 %158, %161
  %163 = getelementptr i8, ptr %159, i64 %162
  %164 = load ptr, ptr %15, align 8
  %165 = insertvalue { ptr, i160 } undef, ptr %164, 0
  %166 = load i160, ptr %14, align 4
  %167 = insertvalue { ptr, i160 } %165, i160 %166, 1
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %168 = load ptr, ptr %.reload5, align 8
  %169 = getelementptr ptr, ptr %168, i32 8
  %170 = load ptr, ptr %169, align 8
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  call void @unbox_wrapper(ptr %170, { ptr, i160 } %167, ptr %.reload4, ptr %163)
  store i32 1, ptr %16, align 4
  %171 = load i32, ptr %9, align 4
  %172 = load i32, ptr %16, align 4
  %173 = add i32 %171, %172
  store i32 %173, ptr %17, align 4
  %174 = load i32, ptr %17, align 4
  store i32 %174, ptr %9, align 4
  br label %175

175:                                              ; preds = %._crit_edge, %125
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %176

._crit_edge1:                                     ; preds = %175
  br label %110

176:                                              ; preds = %175
  br label %177

177:                                              ; preds = %176, %49
  ret void
}

define { ptr, i160 } @Array__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca i1, align 1
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca i32, align 4
  %9 = alloca i1, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [1 x ptr], align 8
  %13 = alloca { ptr }, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca i160, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  store ptr %22, ptr %.reg2mem18, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  store ptr %23, ptr %.reload21, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  store ptr %25, ptr %.reg2mem11, align 8
  %26 = load ptr, ptr %24, align 8
  %.reload17 = load ptr, ptr %.reg2mem11, align 8
  store ptr %26, ptr %.reload17, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  store ptr %28, ptr %.reg2mem7, align 8
  %29 = load ptr, ptr %27, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  store ptr %29, ptr %.reload10, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr %31, ptr %.reg2mem, align 8
  %32 = load i32, ptr %30, align 4
  %.reload6 = load ptr, ptr %.reg2mem, align 8
  store i32 %32, ptr %.reload6, align 4
  call void @set_offset(ptr %20, ptr @Array)
  %33 = alloca i32, align 4
  store i32 %3, ptr %33, align 4
  %.reload16 = load ptr, ptr %.reg2mem11, align 8
  %34 = load ptr, ptr %.reload16, align 8
  %35 = load ptr, ptr %20, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 664, ptr %35)
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  %37 = load i32, ptr %.reload5, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = call i32 %42(ptr %34) #16
  %44 = alloca i32, align 4
  store i32 %43, ptr %44, align 4
  %45 = alloca i32, align 4
  store i32 1, ptr %45, align 4
  %46 = load i32, ptr %44, align 4
  %47 = load i32, ptr %45, align 4
  %48 = sub i32 %46, %47
  %49 = alloca i32, align 4
  store i32 %48, ptr %49, align 4
  %50 = load i32, ptr %33, align 4
  %51 = load i32, ptr %49, align 4
  %52 = icmp sgt i32 %50, %51
  %53 = alloca i1, align 1
  store i1 %52, ptr %53, align 1
  %.reload15 = load ptr, ptr %.reg2mem11, align 8
  %54 = load ptr, ptr %.reload15, align 8
  %55 = load ptr, ptr %20, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 664, ptr %55)
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %57 = load i32, ptr %.reload4, align 4
  %58 = getelementptr ptr, ptr %55, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call i32 %62(ptr %54) #16
  %64 = alloca i32, align 4
  store i32 %63, ptr %64, align 4
  %65 = load i32, ptr %64, align 4
  %66 = load i32, ptr %33, align 4
  %67 = add i32 %65, %66
  %68 = alloca i32, align 4
  store i32 %67, ptr %68, align 4
  %69 = alloca i32, align 4
  store i32 0, ptr %69, align 4
  %70 = load i32, ptr %68, align 4
  %71 = load i32, ptr %69, align 4
  %72 = icmp slt i32 %70, %71
  %73 = alloca i1, align 1
  store i1 %72, ptr %73, align 1
  %74 = load i1, ptr %53, align 1
  %75 = alloca i1, align 1
  store i1 %74, ptr %75, align 1
  br i1 %74, label %76, label %77

76:                                               ; preds = %4
  br label %79

77:                                               ; preds = %4
  %78 = load i1, ptr %73, align 1
  store i1 %78, ptr %75, align 1
  br label %79

79:                                               ; preds = %77, %76
  %80 = load i1, ptr %75, align 1
  store i1 %80, ptr %5, align 1
  %81 = load i1, ptr %5, align 1
  br i1 %81, label %82, label %._crit_edge

._crit_edge:                                      ; preds = %79
  br label %100

82:                                               ; preds = %79
  %83 = load i32, ptr %33, align 4
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %84 = load ptr, ptr %.reload20, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %86 = load ptr, ptr %.reload14, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %88 = load ptr, ptr %.reload9, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %90 = load i32, ptr %.reload3, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  %92 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %92, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %94 = call ptr @llvm.invariant.start.p0(i64 664, ptr %84)
  %95 = getelementptr ptr, ptr %84, i32 %90
  %96 = getelementptr ptr, ptr %95, i32 16
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %98, align 8
  %99 = call ptr @behavior_wrapper(ptr %97, { ptr, ptr, ptr, i32 } %91, ptr %7)
  call void %99({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr %6, i32 %83) #17
  br label %100

100:                                              ; preds = %._crit_edge, %82
  store i32 0, ptr %8, align 4
  %101 = load i32, ptr %33, align 4
  %102 = load i32, ptr %8, align 4
  %103 = icmp slt i32 %101, %102
  store i1 %103, ptr %9, align 1
  %104 = load i1, ptr %9, align 1
  br i1 %104, label %105, label %._crit_edge1

._crit_edge1:                                     ; preds = %100
  br label %120

105:                                              ; preds = %100
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %106 = load ptr, ptr %.reload13, align 8
  %107 = load ptr, ptr %20, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 664, ptr %107)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %109 = load i32, ptr %.reload2, align 4
  %110 = getelementptr ptr, ptr %107, i32 %109
  %111 = getelementptr ptr, ptr %110, i32 2
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 0
  %114 = load ptr, ptr %113, align 8
  %115 = call i32 %114(ptr %106) #16
  store i32 %115, ptr %10, align 4
  %116 = load i32, ptr %10, align 4
  %117 = load i32, ptr %33, align 4
  %118 = add i32 %116, %117
  store i32 %118, ptr %11, align 4
  %119 = load i32, ptr %11, align 4
  store i32 %119, ptr %33, align 4
  br label %120

120:                                              ; preds = %._crit_edge1, %105
  %121 = load i32, ptr %33, align 4
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %122 = load ptr, ptr %.reload19, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %122, 0
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %124 = load ptr, ptr %.reload12, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 1
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %126 = load ptr, ptr %.reload8, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %126, 2
  %.reload = load ptr, ptr %.reg2mem, align 8
  %128 = load i32, ptr %.reload, align 4
  %129 = insertvalue { ptr, ptr, ptr, i32 } %127, i32 %128, 3
  %130 = getelementptr [1 x ptr], ptr %12, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %130, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 1, ptr %12)
  %132 = call ptr @llvm.invariant.start.p0(i64 664, ptr %122)
  %133 = getelementptr ptr, ptr %122, i32 %128
  %134 = getelementptr ptr, ptr %133, i32 17
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  store ptr @i32_typ, ptr %136, align 8
  %137 = call ptr @behavior_wrapper(ptr %135, { ptr, ptr, ptr, i32 } %129, ptr %13)
  %138 = call { ptr, i160 } %137({ ptr, ptr, ptr, i32 } %129, { ptr, ptr, ptr, i32 } %129, ptr %12, i32 %121) #17
  store { ptr, i160 } %138, ptr %14, align 8
  %139 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %140 = load ptr, ptr %139, align 8
  store ptr %140, ptr %16, align 8
  %141 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 1
  %142 = load i160, ptr %141, align 4
  store i160 %142, ptr %15, align 4
  %143 = load ptr, ptr %16, align 8
  store ptr %143, ptr %18, align 8
  %144 = load i160, ptr %15, align 4
  store i160 %144, ptr %17, align 4
  %145 = load ptr, ptr %18, align 8
  %146 = insertvalue { ptr, i160 } undef, ptr %145, 0
  %147 = load i160, ptr %17, align 4
  %148 = insertvalue { ptr, i160 } %146, i160 %147, 1
  ret { ptr, i160 } %148
}

define void @Array__set_index_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, i160 } %4) {
  %6 = alloca i1, align 1
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca [2 x ptr], align 8
  %16 = alloca { ptr, ptr }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %17, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  store ptr %20, ptr %.reg2mem20, align 8
  %21 = load ptr, ptr %19, align 8
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  store ptr %21, ptr %.reload23, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  store ptr %23, ptr %.reg2mem12, align 8
  %24 = load ptr, ptr %22, align 8
  %.reload19 = load ptr, ptr %.reg2mem12, align 8
  store ptr %24, ptr %.reload19, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  store ptr %26, ptr %.reg2mem8, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  store ptr %27, ptr %.reload11, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  store ptr %29, ptr %.reg2mem, align 8
  %30 = load i32, ptr %28, align 4
  %.reload7 = load ptr, ptr %.reg2mem, align 8
  store i32 %30, ptr %.reload7, align 4
  call void @set_offset(ptr %18, ptr @Array)
  %31 = alloca i32, align 4
  store i32 %3, ptr %31, align 4
  %32 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %32, align 8
  %33 = alloca i160, align 8
  %34 = alloca ptr, align 8
  %35 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  store ptr %36, ptr %34, align 8
  %37 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %38 = load i160, ptr %37, align 4
  store i160 %38, ptr %33, align 4
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  %39 = load ptr, ptr %.reload18, align 8
  %40 = load ptr, ptr %18, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 664, ptr %40)
  %.reload6 = load ptr, ptr %.reg2mem, align 8
  %42 = load i32, ptr %.reload6, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, ptr }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %39) #16
  %49 = alloca i32, align 4
  store i32 %48, ptr %49, align 4
  %50 = alloca i32, align 4
  store i32 1, ptr %50, align 4
  %51 = load i32, ptr %49, align 4
  %52 = load i32, ptr %50, align 4
  %53 = sub i32 %51, %52
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %55 = load i32, ptr %31, align 4
  %56 = load i32, ptr %54, align 4
  %57 = icmp sgt i32 %55, %56
  %58 = alloca i1, align 1
  store i1 %57, ptr %58, align 1
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %59 = load ptr, ptr %.reload17, align 8
  %60 = load ptr, ptr %18, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 664, ptr %60)
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  %62 = load i32, ptr %.reload5, align 4
  %63 = getelementptr ptr, ptr %60, i32 %62
  %64 = getelementptr ptr, ptr %63, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 0
  %67 = load ptr, ptr %66, align 8
  %68 = call i32 %67(ptr %59) #16
  %69 = alloca i32, align 4
  store i32 %68, ptr %69, align 4
  %70 = load i32, ptr %69, align 4
  %71 = load i32, ptr %31, align 4
  %72 = add i32 %70, %71
  %73 = alloca i32, align 4
  store i32 %72, ptr %73, align 4
  %74 = alloca i32, align 4
  store i32 0, ptr %74, align 4
  %75 = load i32, ptr %73, align 4
  %76 = load i32, ptr %74, align 4
  %77 = icmp slt i32 %75, %76
  %78 = alloca i1, align 1
  store i1 %77, ptr %78, align 1
  %79 = load i1, ptr %58, align 1
  %80 = alloca i1, align 1
  store i1 %79, ptr %80, align 1
  br i1 %79, label %81, label %82

81:                                               ; preds = %5
  br label %84

82:                                               ; preds = %5
  %83 = load i1, ptr %78, align 1
  store i1 %83, ptr %80, align 1
  br label %84

84:                                               ; preds = %82, %81
  %85 = load i1, ptr %80, align 1
  store i1 %85, ptr %6, align 1
  %86 = load i1, ptr %6, align 1
  br i1 %86, label %87, label %._crit_edge

._crit_edge:                                      ; preds = %84
  br label %105

87:                                               ; preds = %84
  %88 = load i32, ptr %31, align 4
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %89 = load ptr, ptr %.reload22, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %89, 0
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %91 = load ptr, ptr %.reload16, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 1
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %93 = load ptr, ptr %.reload10, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 2
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %95 = load i32, ptr %.reload4, align 4
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, i32 %95, 3
  %97 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %99 = call ptr @llvm.invariant.start.p0(i64 664, ptr %89)
  %100 = getelementptr ptr, ptr %89, i32 %95
  %101 = getelementptr ptr, ptr %100, i32 16
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr @i32_typ, ptr %103, align 8
  %104 = call ptr @behavior_wrapper(ptr %102, { ptr, ptr, ptr, i32 } %96, ptr %8)
  call void %104({ ptr, ptr, ptr, i32 } %96, { ptr, ptr, ptr, i32 } %96, ptr %7, i32 %88) #17
  br label %105

105:                                              ; preds = %._crit_edge, %87
  store i32 0, ptr %9, align 4
  %106 = load i32, ptr %31, align 4
  %107 = load i32, ptr %9, align 4
  %108 = icmp slt i32 %106, %107
  store i1 %108, ptr %10, align 1
  %109 = load i1, ptr %10, align 1
  br i1 %109, label %110, label %._crit_edge1

._crit_edge1:                                     ; preds = %105
  br label %125

110:                                              ; preds = %105
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %111 = load ptr, ptr %.reload15, align 8
  %112 = load ptr, ptr %18, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 664, ptr %112)
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %114 = load i32, ptr %.reload3, align 4
  %115 = getelementptr ptr, ptr %112, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr { ptr, ptr }, ptr %117, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = call i32 %119(ptr %111) #16
  store i32 %120, ptr %11, align 4
  %121 = load i32, ptr %11, align 4
  %122 = load i32, ptr %31, align 4
  %123 = add i32 %121, %122
  store i32 %123, ptr %12, align 4
  %124 = load i32, ptr %12, align 4
  store i32 %124, ptr %31, align 4
  br label %125

125:                                              ; preds = %._crit_edge1, %110
  %126 = load i32, ptr %31, align 4
  %127 = load ptr, ptr %34, align 8
  store ptr %127, ptr %14, align 8
  %128 = load i160, ptr %33, align 4
  store i160 %128, ptr %13, align 4
  %129 = load ptr, ptr %14, align 8
  %130 = insertvalue { ptr, i160 } undef, ptr %129, 0
  %131 = load i160, ptr %13, align 4
  %132 = insertvalue { ptr, i160 } %130, i160 %131, 1
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %133 = load ptr, ptr %.reload21, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %133, 0
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %135 = load ptr, ptr %.reload14, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %135, 1
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %137 = load ptr, ptr %.reload9, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %136, ptr %137, 2
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %139 = load i32, ptr %.reload2, align 4
  %140 = insertvalue { ptr, ptr, ptr, i32 } %138, i32 %139, 3
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %141 = load ptr, ptr %.reload13, align 8
  %142 = load ptr, ptr %18, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 664, ptr %142)
  %.reload = load ptr, ptr %.reg2mem, align 8
  %144 = load i32, ptr %.reload, align 4
  %145 = getelementptr ptr, ptr %142, i32 %144
  %146 = load ptr, ptr %145, align 8
  %147 = call ptr @typegetter_wrapper(ptr %146, ptr %141)
  %148 = getelementptr [2 x ptr], ptr %15, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %148, align 8
  %149 = getelementptr [2 x ptr], ptr %15, i32 0, i32 1
  store ptr %147, ptr %149, align 8
  %150 = call ptr @llvm.invariant.start.p0(i64 4, ptr %15)
  %151 = call ptr @llvm.invariant.start.p0(i64 664, ptr %133)
  %152 = getelementptr ptr, ptr %133, i32 %139
  %153 = getelementptr ptr, ptr %152, i32 18
  %154 = load ptr, ptr %153, align 8
  %155 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 0
  store ptr @i32_typ, ptr %155, align 8
  %156 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 1
  store ptr %129, ptr %156, align 8
  %157 = call ptr @behavior_wrapper(ptr %154, { ptr, ptr, ptr, i32 } %140, ptr %16)
  call void %157({ ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %140, ptr %15, i32 %126, { ptr, i160 } %132) #17
  ret void
}

define void @Array_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = alloca [1 x ptr], align 8
  store ptr @Exception, ptr %20, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr ptr, ptr %21, i32 6
  %23 = load ptr, ptr %22, align 8
  %24 = call { i64, i64 } @size_wrapper(ptr %23, ptr %20)
  %25 = extractvalue { i64, i64 } %24, 0
  %26 = call ptr @bump_malloc(i64 %25)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  store ptr @Exception, ptr %27, align 8
  store ptr %26, ptr %28, align 8
  store i32 10, ptr %29, align 4
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %28, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = load i32, ptr %29, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 104, ptr %31)
  %43 = getelementptr ptr, ptr %31, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 4
  %45 = load ptr, ptr %44, align 8
  %46 = alloca {}, align 8
  %47 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %39, ptr %46)
  call void %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40) #17
  %48 = alloca i32, align 4
  store i32 89, ptr %48, align 4
  %49 = alloca i32, align 4
  store i32 11, ptr %49, align 4
  %50 = load i32, ptr %49, align 4
  %51 = sext i32 %50 to i64
  %52 = alloca ptr, align 8
  %53 = mul i64 %51, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %54 = call ptr @bump_malloc(i64 %53)
  store ptr %54, ptr %52, align 8
  %55 = alloca ptr, align 8
  %56 = getelementptr { ptr }, ptr %52, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  store ptr %57, ptr %55, align 8
  %58 = alloca i32, align 4
  store i32 0, ptr %58, align 4
  %59 = load ptr, ptr %55, align 8
  %60 = load i32, ptr %58, align 4
  %61 = sext i32 %60 to i64
  %62 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %61
  %63 = getelementptr i8, ptr %59, i64 %62
  %64 = load <10 x i8>, ptr @khhpi_arraymini, align 16
  store <10 x i8> %64, ptr %63, align 16
  %65 = alloca i32, align 4
  store i32 10, ptr %65, align 4
  %66 = alloca i32, align 4
  store i32 11, ptr %66, align 4
  %67 = alloca [1 x ptr], align 8
  store ptr @String, ptr %67, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr ptr, ptr %68, i32 6
  %70 = load ptr, ptr %69, align 8
  %71 = call { i64, i64 } @size_wrapper(ptr %70, ptr %67)
  %72 = extractvalue { i64, i64 } %71, 0
  %73 = call ptr @bump_malloc(i64 %72)
  %74 = alloca i32, align 4
  %75 = alloca ptr, align 8
  %76 = alloca ptr, align 8
  %77 = alloca ptr, align 8
  store ptr @String, ptr %77, align 8
  store ptr %73, ptr %76, align 8
  store i32 10, ptr %74, align 4
  %78 = alloca i32, align 4
  store i32 10, ptr %78, align 4
  %79 = alloca i32, align 4
  store i32 11, ptr %79, align 4
  %80 = load ptr, ptr %55, align 8
  %81 = insertvalue { ptr } undef, ptr %80, 0
  %82 = load i32, ptr %78, align 4
  %83 = load i32, ptr %79, align 4
  %84 = load ptr, ptr %77, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %76, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %75, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %74, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  %92 = alloca [3 x ptr], align 8
  %93 = getelementptr [3 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %93, align 8
  %94 = getelementptr [3 x ptr], ptr %92, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %94, align 8
  %95 = getelementptr [3 x ptr], ptr %92, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %95, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 9, ptr %92)
  %97 = call ptr @llvm.invariant.start.p0(i64 616, ptr %84)
  %98 = getelementptr ptr, ptr %84, i32 %90
  %99 = getelementptr ptr, ptr %98, i32 5
  %100 = load ptr, ptr %99, align 8
  %101 = alloca { ptr, ptr, ptr }, align 8
  %102 = getelementptr { ptr, ptr, ptr }, ptr %101, i32 0, i32 0
  store ptr @buffer_typ, ptr %102, align 8
  %103 = getelementptr { ptr, ptr, ptr }, ptr %101, i32 0, i32 1
  store ptr @i32_typ, ptr %103, align 8
  %104 = getelementptr { ptr, ptr, ptr }, ptr %101, i32 0, i32 2
  store ptr @i32_typ, ptr %104, align 8
  %105 = call ptr @behavior_wrapper(ptr %100, { ptr, ptr, ptr, i32 } %91, ptr %101)
  call void %105({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr %92, { ptr } %81, i32 %82, i32 %83) #17
  %106 = load i32, ptr %48, align 4
  %107 = alloca { ptr, ptr, ptr, i32 }, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 0
  %109 = load ptr, ptr %77, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 1
  %111 = load ptr, ptr %76, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 2
  %113 = load ptr, ptr %75, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 3
  %115 = load i32, ptr %74, align 4
  store i32 %115, ptr %114, align 4
  call void @set_offset(ptr %107, ptr @String)
  %116 = load ptr, ptr %108, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = load ptr, ptr %110, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %118, 1
  %120 = load ptr, ptr %112, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %120, 2
  %122 = load i32, ptr %114, align 4
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 %122, 3
  %124 = load ptr, ptr %30, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %124, 0
  %126 = load ptr, ptr %28, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %126, 1
  %128 = load ptr, ptr %35, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %128, 2
  %130 = load i32, ptr %29, align 4
  %131 = insertvalue { ptr, ptr, ptr, i32 } %129, i32 %130, 3
  %132 = alloca [2 x ptr], align 8
  %133 = getelementptr [2 x ptr], ptr %132, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %133, align 8
  %134 = getelementptr [2 x ptr], ptr %132, i32 0, i32 1
  store ptr @_parameterization_String, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 4, ptr %132)
  %136 = call ptr @llvm.invariant.start.p0(i64 104, ptr %124)
  %137 = getelementptr ptr, ptr %124, i32 %130
  %138 = getelementptr ptr, ptr %137, i32 5
  %139 = load ptr, ptr %138, align 8
  %140 = alloca { ptr, ptr }, align 8
  %141 = getelementptr { ptr, ptr }, ptr %140, i32 0, i32 0
  store ptr @i32_typ, ptr %141, align 8
  %142 = getelementptr { ptr, ptr }, ptr %140, i32 0, i32 1
  store ptr %116, ptr %142, align 8
  %143 = call ptr @behavior_wrapper(ptr %139, { ptr, ptr, ptr, i32 } %131, ptr %140)
  call void %143({ ptr, ptr, ptr, i32 } %131, { ptr, ptr, ptr, i32 } %131, ptr %132, i32 %106, { ptr, ptr, ptr, i32 } %123) #17
  %144 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 0
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, i160 } undef, ptr %145, 0
  %147 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 1
  %148 = load i160, ptr %147, align 4
  %149 = insertvalue { ptr, i160 } %146, i160 %148, 1
  %150 = call ptr @get_current_coroutine()
  %151 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %150, i32 0, i32 4
  store { ptr, i160 } %149, ptr %151, align 8
  call void @coroutine_yield(ptr %150)
  %152 = load { ptr, i160 }, ptr %151, align 8
  %153 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %152, ptr %153, align 8
  ret void
}

define { ptr, i160 } @Array_unchecked_index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 664, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr } %28(ptr %20) #16
  %30 = alloca ptr, align 8
  store { ptr } %29, ptr %30, align 8
  %31 = load ptr, ptr %11, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 664, ptr %32)
  %34 = load i32, ptr %17, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = load ptr, ptr %35, align 8
  %37 = call ptr @typegetter_wrapper(ptr %36, ptr %31)
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr ptr, ptr %38, i32 9
  %40 = load ptr, ptr %39, align 8
  %41 = call { i64, i64 } @size_wrapper(ptr %40, ptr %37)
  %42 = extractvalue { i64, i64 } %41, 0
  %43 = load ptr, ptr %30, align 8
  %44 = load i32, ptr %19, align 4
  %45 = sext i32 %44 to i64
  %46 = mul i64 %42, %45
  %47 = getelementptr i8, ptr %43, i64 %46
  %48 = load ptr, ptr %37, align 8
  %49 = getelementptr ptr, ptr %48, i32 7
  %50 = load ptr, ptr %49, align 8
  %51 = call { ptr, i160 } @box_wrapper(ptr %50, ptr %47, ptr %37)
  %52 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %51, ptr %52, align 8
  %53 = alloca i160, align 8
  %54 = alloca ptr, align 8
  %55 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  store ptr %56, ptr %54, align 8
  %57 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 1
  %58 = load i160, ptr %57, align 4
  store i160 %58, ptr %53, align 4
  %59 = load ptr, ptr %54, align 8
  %60 = insertvalue { ptr, i160 } undef, ptr %59, 0
  %61 = load i160, ptr %53, align 4
  %62 = insertvalue { ptr, i160 } %60, i160 %61, 1
  ret { ptr, i160 } %62
}

define void @Array_unchecked_insert_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %21, align 8
  %22 = alloca i160, align 8
  %23 = alloca ptr, align 8
  %24 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  store ptr %25, ptr %23, align 8
  %26 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %27 = load i160, ptr %26, align 4
  store i160 %27, ptr %22, align 4
  %28 = load ptr, ptr %12, align 8
  %29 = load ptr, ptr %7, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 664, ptr %29)
  %31 = load i32, ptr %18, align 4
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call { ptr } %36(ptr %28) #16
  %38 = alloca ptr, align 8
  store { ptr } %37, ptr %38, align 8
  %39 = load ptr, ptr %12, align 8
  %40 = load ptr, ptr %7, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 664, ptr %40)
  %42 = load i32, ptr %18, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = load ptr, ptr %43, align 8
  %45 = call ptr @typegetter_wrapper(ptr %44, ptr %39)
  %46 = alloca i160, align 8
  %47 = alloca ptr, align 8
  %48 = load ptr, ptr %23, align 8
  store ptr %48, ptr %47, align 8
  %49 = load i160, ptr %22, align 4
  store i160 %49, ptr %46, align 4
  %50 = load ptr, ptr %45, align 8
  %51 = getelementptr ptr, ptr %50, i32 9
  %52 = load ptr, ptr %51, align 8
  %53 = call { i64, i64 } @size_wrapper(ptr %52, ptr %45)
  %54 = extractvalue { i64, i64 } %53, 0
  %55 = load ptr, ptr %38, align 8
  %56 = load i32, ptr %20, align 4
  %57 = sext i32 %56 to i64
  %58 = mul i64 %54, %57
  %59 = getelementptr i8, ptr %55, i64 %58
  %60 = load ptr, ptr %47, align 8
  %61 = insertvalue { ptr, i160 } undef, ptr %60, 0
  %62 = load i160, ptr %46, align 4
  %63 = insertvalue { ptr, i160 } %61, i160 %62, 1
  %64 = load ptr, ptr %45, align 8
  %65 = getelementptr ptr, ptr %64, i32 8
  %66 = load ptr, ptr %65, align 8
  call void @unbox_wrapper(ptr %66, { ptr, i160 } %63, ptr %45, ptr %59)
  ret void
}

define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 664, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @typegetter_wrapper(ptr %23, ptr %18)
  %25 = alloca [2 x ptr], align 8
  store ptr @ArrayIterator, ptr %25, align 8
  %26 = getelementptr ptr, ptr %25, i32 1
  store ptr %24, ptr %26, align 8
  %27 = load ptr, ptr %25, align 8
  %28 = getelementptr ptr, ptr %27, i32 6
  %29 = load ptr, ptr %28, align 8
  %30 = call { i64, i64 } @size_wrapper(ptr %29, ptr %25)
  %31 = extractvalue { i64, i64 } %30, 0
  %32 = call ptr @bump_malloc(i64 %31)
  store ptr %24, ptr %32, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 8, ptr %32)
  %34 = alloca i32, align 4
  %35 = alloca ptr, align 8
  %36 = alloca ptr, align 8
  %37 = alloca ptr, align 8
  store ptr @ArrayIterator, ptr %37, align 8
  store ptr %32, ptr %36, align 8
  store i32 10, ptr %34, align 4
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %7, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %42 = load ptr, ptr %10, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %44 = load ptr, ptr %13, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %46 = load i32, ptr %16, align 4
  store i32 %46, ptr %45, align 4
  call void @set_offset(ptr %38, ptr @Array)
  %47 = load ptr, ptr %39, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %49 = load ptr, ptr %41, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 1
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 2
  %53 = load i32, ptr %45, align 4
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %53, 3
  %55 = load ptr, ptr %37, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = load ptr, ptr %36, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 1
  %59 = load ptr, ptr %35, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 2
  %61 = load i32, ptr %34, align 4
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %61, 3
  %63 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %64 = getelementptr [3 x ptr], ptr %63, i32 0, i32 1
  store ptr %24, ptr %64, align 8
  %65 = getelementptr [3 x ptr], ptr %63, i32 0, i32 2
  store ptr null, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  store ptr @Array, ptr %63, align 8
  %67 = alloca [1 x ptr], align 8
  %68 = getelementptr [1 x ptr], ptr %67, i32 0, i32 0
  store ptr %63, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 1, ptr %67)
  %70 = call ptr @llvm.invariant.start.p0(i64 80, ptr %55)
  %71 = getelementptr ptr, ptr %55, i32 %61
  %72 = getelementptr ptr, ptr %71, i32 3
  %73 = load ptr, ptr %72, align 8
  %74 = alloca { ptr }, align 8
  %75 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  store ptr %47, ptr %75, align 8
  %76 = call ptr @behavior_wrapper(ptr %73, { ptr, ptr, ptr, i32 } %62, ptr %74)
  call void %76({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr %67, { ptr, ptr, ptr, i32 } %54) #17
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %37, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %81 = load ptr, ptr %36, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %83 = load ptr, ptr %35, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %85 = load i32, ptr %34, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %77, ptr @Iterator)
  %86 = load ptr, ptr %78, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %86, 0
  %88 = load ptr, ptr %80, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 1
  %90 = load ptr, ptr %82, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %90, 2
  %92 = load i32, ptr %84, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %92, 3
  ret { ptr, ptr, ptr, i32 } %93
}

define { ptr, ptr, ptr, i32 } @Array_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = alloca i32, align 4
  store i32 6, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([5 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <5 x i8>, ptr @ujhot_Array, align 8
  store <5 x i8> %33, ptr %32, align 8
  %34 = alloca i32, align 4
  store i32 5, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 6, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca i32, align 4
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  store ptr @String, ptr %46, align 8
  store ptr %42, ptr %45, align 8
  store i32 10, ptr %43, align 4
  %47 = alloca i32, align 4
  store i32 5, ptr %47, align 4
  %48 = alloca i32, align 4
  store i32 6, ptr %48, align 4
  %49 = load ptr, ptr %24, align 8
  %50 = insertvalue { ptr } undef, ptr %49, 0
  %51 = load i32, ptr %47, align 4
  %52 = load i32, ptr %48, align 4
  %53 = load ptr, ptr %46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %45, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %44, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %43, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca [3 x ptr], align 8
  %62 = getelementptr [3 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %61, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %61, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr %61)
  %66 = call ptr @llvm.invariant.start.p0(i64 616, ptr %53)
  %67 = getelementptr ptr, ptr %53, i32 %59
  %68 = getelementptr ptr, ptr %67, i32 5
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr, ptr, ptr }, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 2
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %60, ptr %70)
  call void %74({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr } %50, i32 %51, i32 %52) #17
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %77 = load ptr, ptr %46, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %79 = load ptr, ptr %45, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %81 = load ptr, ptr %44, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %83 = load i32, ptr %43, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %75, ptr @String)
  %84 = load ptr, ptr %76, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %78, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %80, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %82, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  ret { ptr, ptr, ptr, i32 } %91
}

define { i64, i64 } @_data_size_ArrayIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ArrayIterator_field_ArrayIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Array, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Array to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 5, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [10 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ArrayIterator)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Array)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @Array)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 80, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %34, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %36, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %38, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %40, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %42, { ptr, ptr, ptr, i32 } %58) #15
  %59 = alloca i32, align 4
  store i32 0, ptr %59, align 4
  %60 = load ptr, ptr %11, align 8
  %61 = load ptr, ptr %6, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 80, ptr %61)
  %63 = load i32, ptr %17, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load i32, ptr %59, align 4
  call void %68(ptr %60, i32 %69) #15
  ret void
}

define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca [0 x i8], align 1
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca { ptr, i160 }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem21 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  store ptr %25, ptr %.reg2mem13, align 8
  %26 = load ptr, ptr %24, align 8
  %.reload20 = load ptr, ptr %.reg2mem13, align 8
  store ptr %26, ptr %.reload20, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr %31, ptr %.reg2mem5, align 8
  %32 = load i32, ptr %30, align 4
  %.reload12 = load ptr, ptr %.reg2mem5, align 8
  store i32 %32, ptr %.reload12, align 4
  call void @set_offset(ptr %20, ptr @ArrayIterator)
  %.reload19 = load ptr, ptr %.reg2mem13, align 8
  %33 = load ptr, ptr %.reload19, align 8
  %34 = load ptr, ptr %20, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 80, ptr %34)
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  %36 = load i32, ptr %.reload11, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = call i32 %41(ptr %33) #16
  %43 = alloca i32, align 4
  store i32 %42, ptr %43, align 4
  %.reload18 = load ptr, ptr %.reg2mem13, align 8
  %44 = load ptr, ptr %.reload18, align 8
  %45 = load ptr, ptr %20, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 80, ptr %45)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %47 = load i32, ptr %.reload10, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call { ptr, ptr, ptr, i32 } %52(ptr %44) #16
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %53, ptr %54, align 8
  call void @assume_offset(ptr %54, ptr @Array)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = alloca [0 x ptr], align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 0, ptr %67)
  %69 = call ptr @llvm.invariant.start.p0(i64 664, ptr %56)
  %70 = getelementptr ptr, ptr %56, i32 %65
  %71 = getelementptr ptr, ptr %70, i32 9
  %72 = load ptr, ptr %71, align 8
  %73 = alloca {}, align 8
  %74 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %66, ptr %73)
  %75 = call i32 %74({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67) #17
  %76 = alloca i32, align 4
  store i32 %75, ptr %76, align 4
  %77 = load i32, ptr %43, align 4
  %78 = load i32, ptr %76, align 4
  %79 = icmp sge i32 %77, %78
  %80 = alloca i1, align 1
  store i1 %79, ptr %80, align 1
  %81 = load i1, ptr %80, align 1
  br i1 %81, label %82, label %88

82:                                               ; preds = %3
  %83 = load [0 x i8], ptr %4, align 1
  store [0 x i8] %83, ptr %5, align 1
  store ptr @nil_typ, ptr %6, align 8
  %84 = load ptr, ptr %6, align 8
  %85 = insertvalue { ptr, i160 } undef, ptr %84, 0
  %86 = load i160, ptr %5, align 4
  %87 = insertvalue { ptr, i160 } %85, i160 %86, 1
  store { ptr, i160 } %87, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem21, align 8
  br label %165

88:                                               ; preds = %3
  %.reload17 = load ptr, ptr %.reg2mem13, align 8
  %89 = load ptr, ptr %.reload17, align 8
  %90 = load ptr, ptr %20, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 80, ptr %90)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %92 = load i32, ptr %.reload9, align 4
  %93 = getelementptr ptr, ptr %90, i32 %92
  %94 = getelementptr ptr, ptr %93, i32 2
  %95 = load ptr, ptr %94, align 8
  %96 = getelementptr { ptr, ptr }, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = call i32 %97(ptr %89) #16
  store i32 %98, ptr %7, align 4
  store i32 1, ptr %8, align 4
  %99 = load i32, ptr %7, align 4
  %100 = load i32, ptr %8, align 4
  %101 = add i32 %99, %100
  store i32 %101, ptr %9, align 4
  %.reload16 = load ptr, ptr %.reg2mem13, align 8
  %102 = load ptr, ptr %.reload16, align 8
  %103 = load ptr, ptr %20, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 80, ptr %103)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %105 = load i32, ptr %.reload8, align 4
  %106 = getelementptr ptr, ptr %103, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = load i32, ptr %9, align 4
  call void %110(ptr %102, i32 %111) #15
  %.reload15 = load ptr, ptr %.reg2mem13, align 8
  %112 = load ptr, ptr %.reload15, align 8
  %113 = load ptr, ptr %20, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 80, ptr %113)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %115 = load i32, ptr %.reload7, align 4
  %116 = getelementptr ptr, ptr %113, i32 %115
  %117 = getelementptr ptr, ptr %116, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = call i32 %120(ptr %112) #16
  store i32 %121, ptr %10, align 4
  store i32 1, ptr %11, align 4
  %122 = load i32, ptr %10, align 4
  %123 = load i32, ptr %11, align 4
  %124 = sub i32 %122, %123
  store i32 %124, ptr %12, align 4
  %125 = load i32, ptr %12, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %126 = load ptr, ptr %.reload14, align 8
  %127 = load ptr, ptr %20, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 80, ptr %127)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %129 = load i32, ptr %.reload6, align 4
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr, ptr }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = call { ptr, ptr, ptr, i32 } %134(ptr %126) #16
  store { ptr, ptr, ptr, i32 } %135, ptr %13, align 8
  call void @assume_offset(ptr %13, ptr @Array)
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %137, 0
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 1
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %143, 2
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %146 = load i32, ptr %145, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 %146, 3
  %148 = getelementptr [1 x ptr], ptr %14, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %148, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 1, ptr %14)
  %150 = call ptr @llvm.invariant.start.p0(i64 664, ptr %137)
  %151 = getelementptr ptr, ptr %137, i32 %146
  %152 = getelementptr ptr, ptr %151, i32 17
  %153 = load ptr, ptr %152, align 8
  %154 = getelementptr { ptr }, ptr %15, i32 0, i32 0
  store ptr @i32_typ, ptr %154, align 8
  %155 = call ptr @behavior_wrapper(ptr %153, { ptr, ptr, ptr, i32 } %147, ptr %15)
  %156 = call { ptr, i160 } %155({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %14, i32 %125) #17
  store { ptr, i160 } %156, ptr %16, align 8
  %157 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %158 = load ptr, ptr %157, align 8
  store ptr %158, ptr %18, align 8
  %159 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %160 = load i160, ptr %159, align 4
  store i160 %160, ptr %17, align 4
  %161 = load ptr, ptr %18, align 8
  %162 = insertvalue { ptr, i160 } undef, ptr %161, 0
  %163 = load i160, ptr %17, align 4
  %164 = insertvalue { ptr, i160 } %162, i160 %163, 1
  store { ptr, i160 } %164, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem21, align 8
  br label %165

165:                                              ; preds = %88, %82
  %.reload22 = load { ptr, i160 }, ptr %.reg2mem21, align 8
  store { ptr, i160 } %.reload22, ptr %.reg2mem, align 8
  br label %166

166:                                              ; preds = %165
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i32 @ArrayIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @ArrayIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ArrayIterator_setter_array(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define i32 @Array_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i32, ptr %19, align 4
  ret i32 %20
}

define void @Array_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca i32, align 4
  store i32 %1, ptr %21, align 4
  %22 = load i32, ptr %21, align 4
  store i32 %22, ptr %20, align 4
  ret void
}

define i32 @Array_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Array_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define { ptr } @Array_getter_buffer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @Array_setter_buffer(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { i64, i64 } @_data_size_FileSystemError(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FileSystemError_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 8, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [26 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FileSystemError_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [26 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @FileSystemError_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 1
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 2
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 0
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 1
  %16 = load i64, ptr %12, align 4
  %17 = load i64, ptr %13, align 4
  %18 = load ptr, ptr %14, align 8
  %19 = load ptr, ptr %15, align 8
  %20 = load i64, ptr @String, align 4
  %21 = call i1 @subtype_test_wrapper(ptr %18, i64 %17, i64 %16, i64 %20, i64 ptrtoint (ptr @String to i64), ptr %19)
  store i1 %21, ptr %3, align 1
  store i32 10, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [26 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FileSystemError_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 11, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [26 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @FileSystemError_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [26 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define { ptr, ptr, ptr, i32 } @FileSystemError_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @FileSystemError_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @FileSystemError_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FileSystemError_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define i32 @FileSystemError_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @FileSystemError_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_File(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @File_B_init_nameString_modeString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @String, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @String to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @String, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @String to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 10, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [16 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @File_B__set_mode_modeString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 11, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [16 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @File_B_reopen_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [16 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @File_B_close_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 13, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [16 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @File_B_get_byte_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 14, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [16 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @File_B_write_textString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 15, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [16 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @File_init_nameString_modeString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @File)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @String)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @String)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 128, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #15
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @String)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %62, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %68, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %71, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @String)
  %82 = load ptr, ptr %12, align 8
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 128, ptr %83)
  %85 = load i32, ptr %18, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %74, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %76, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %80, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  call void %90(ptr %82, { ptr, ptr, ptr, i32 } %98) #15
  %99 = alloca i1, align 1
  store i1 false, ptr %99, align 1
  %100 = load ptr, ptr %12, align 8
  %101 = load ptr, ptr %7, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 128, ptr %101)
  %103 = load i32, ptr %18, align 4
  %104 = getelementptr ptr, ptr %101, i32 %103
  %105 = getelementptr ptr, ptr %104, i32 3
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr { ptr, ptr }, ptr %106, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load i1, ptr %99, align 1
  call void %108(ptr %100, i1 %109) #15
  %110 = load ptr, ptr %12, align 8
  %111 = load ptr, ptr %7, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 128, ptr %111)
  %113 = load i32, ptr %18, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call { ptr, ptr, ptr, i32 } %117(ptr %110) #16
  %119 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %118, ptr %119, align 8
  call void @assume_offset(ptr %119, ptr @String)
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %121, 0
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 1
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %127, 2
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %130 = load i32, ptr %129, align 4
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 %130, 3
  %132 = alloca [0 x ptr], align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 0, ptr %132)
  %134 = call ptr @llvm.invariant.start.p0(i64 616, ptr %121)
  %135 = getelementptr ptr, ptr %121, i32 %130
  %136 = getelementptr ptr, ptr %135, i32 15
  %137 = load ptr, ptr %136, align 8
  %138 = alloca {}, align 8
  %139 = call ptr @behavior_wrapper(ptr %137, { ptr, ptr, ptr, i32 } %131, ptr %138)
  %140 = call { ptr } %139({ ptr, ptr, ptr, i32 } %131, { ptr, ptr, ptr, i32 } %131, ptr %132) #17
  %141 = alloca ptr, align 8
  store { ptr } %140, ptr %141, align 8
  %142 = load ptr, ptr %12, align 8
  %143 = load ptr, ptr %7, align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 128, ptr %143)
  %145 = load i32, ptr %18, align 4
  %146 = getelementptr ptr, ptr %143, i32 %145
  %147 = getelementptr ptr, ptr %146, i32 1
  %148 = load ptr, ptr %147, align 8
  %149 = getelementptr { ptr, ptr }, ptr %148, i32 0, i32 0
  %150 = load ptr, ptr %149, align 8
  %151 = call { ptr, ptr, ptr, i32 } %150(ptr %142) #16
  %152 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %151, ptr %152, align 8
  call void @assume_offset(ptr %152, ptr @String)
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %154 = load ptr, ptr %153, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %154, 0
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %157, 1
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %160, 2
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %163 = load i32, ptr %162, align 4
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, i32 %163, 3
  %165 = alloca [0 x ptr], align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 0, ptr %165)
  %167 = call ptr @llvm.invariant.start.p0(i64 616, ptr %154)
  %168 = getelementptr ptr, ptr %154, i32 %163
  %169 = getelementptr ptr, ptr %168, i32 15
  %170 = load ptr, ptr %169, align 8
  %171 = alloca {}, align 8
  %172 = call ptr @behavior_wrapper(ptr %170, { ptr, ptr, ptr, i32 } %164, ptr %171)
  %173 = call { ptr } %172({ ptr, ptr, ptr, i32 } %164, { ptr, ptr, ptr, i32 } %164, ptr %165) #17
  %174 = alloca ptr, align 8
  store { ptr } %173, ptr %174, align 8
  %175 = load ptr, ptr %141, align 8
  %176 = insertvalue { ptr } undef, ptr %175, 0
  %177 = load ptr, ptr %174, align 8
  %178 = insertvalue { ptr } undef, ptr %177, 0
  %179 = call { ptr } @fopen({ ptr } %176, { ptr } %178)
  %180 = alloca ptr, align 8
  store { ptr } %179, ptr %180, align 8
  %181 = load ptr, ptr %12, align 8
  %182 = load ptr, ptr %7, align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 128, ptr %182)
  %184 = load i32, ptr %18, align 4
  %185 = getelementptr ptr, ptr %182, i32 %184
  %186 = getelementptr ptr, ptr %185, i32 2
  %187 = load ptr, ptr %186, align 8
  %188 = getelementptr { ptr, ptr }, ptr %187, i32 0, i32 1
  %189 = load ptr, ptr %188, align 8
  %190 = load ptr, ptr %180, align 8
  %191 = insertvalue { ptr } undef, ptr %190, 0
  call void %189(ptr %181, { ptr } %191) #15
  %192 = load ptr, ptr %12, align 8
  %193 = load ptr, ptr %7, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 128, ptr %193)
  %195 = load i32, ptr %18, align 4
  %196 = getelementptr ptr, ptr %193, i32 %195
  %197 = getelementptr ptr, ptr %196, i32 2
  %198 = load ptr, ptr %197, align 8
  %199 = getelementptr { ptr, ptr }, ptr %198, i32 0, i32 0
  %200 = load ptr, ptr %199, align 8
  %201 = call { ptr } %200(ptr %192) #16
  %202 = alloca ptr, align 8
  store { ptr } %201, ptr %202, align 8
  %203 = load ptr, ptr %202, align 8
  %204 = ptrtoint ptr %203 to i64
  %205 = icmp eq i64 %204, ptrtoint (ptr @nil_typ to i64)
  %206 = icmp eq i64 %204, 0
  %207 = or i1 %205, %206
  %208 = alloca i1, align 1
  store i1 %207, ptr %208, align 1
  %209 = alloca i1, align 1
  store i1 true, ptr %209, align 1
  %210 = load ptr, ptr %12, align 8
  %211 = load ptr, ptr %7, align 8
  %212 = call ptr @llvm.invariant.start.p0(i64 128, ptr %211)
  %213 = load i32, ptr %18, align 4
  %214 = getelementptr ptr, ptr %211, i32 %213
  %215 = getelementptr ptr, ptr %214, i32 3
  %216 = load ptr, ptr %215, align 8
  %217 = getelementptr { ptr, ptr }, ptr %216, i32 0, i32 1
  %218 = load ptr, ptr %217, align 8
  %219 = load i1, ptr %209, align 1
  call void %218(ptr %210, i1 %219) #15
  ret void
}

define void @File__set_mode_modeString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem4 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  store ptr %10, ptr %.reg2mem12, align 8
  %11 = load ptr, ptr %9, align 8
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  store ptr %11, ptr %.reload14, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  store ptr %13, ptr %.reg2mem7, align 8
  %14 = load ptr, ptr %12, align 8
  %.reload11 = load ptr, ptr %.reg2mem7, align 8
  store ptr %14, ptr %.reload11, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  store ptr %16, ptr %.reg2mem4, align 8
  %17 = load ptr, ptr %15, align 8
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %17, ptr %.reload6, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  store ptr %19, ptr %.reg2mem, align 8
  %20 = load i32, ptr %18, align 4
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  store i32 %20, ptr %.reload3, align 4
  call void @set_offset(ptr %8, ptr @File)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @String)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %24, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %39 = load ptr, ptr %27, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %41 = load ptr, ptr %30, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %43 = load i32, ptr %33, align 4
  store i32 %43, ptr %42, align 4
  call void @set_offset(ptr %35, ptr @String)
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  %44 = load ptr, ptr %.reload10, align 8
  %45 = load ptr, ptr %8, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 128, ptr %45)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %47 = load i32, ptr %.reload2, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %36, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %38, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %40, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %42, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  call void %52(ptr %44, { ptr, ptr, ptr, i32 } %60) #15
  %61 = alloca i1, align 1
  store i1 false, ptr %61, align 1
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %62 = load ptr, ptr %.reload9, align 8
  %63 = load ptr, ptr %8, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 128, ptr %63)
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %65 = load i32, ptr %.reload1, align 4
  %66 = getelementptr ptr, ptr %63, i32 %65
  %67 = getelementptr ptr, ptr %66, i32 3
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr { ptr, ptr }, ptr %68, i32 0, i32 0
  %70 = load ptr, ptr %69, align 8
  %71 = call i1 %70(ptr %62) #16
  %72 = alloca i1, align 1
  store i1 %71, ptr %72, align 1
  %73 = load i1, ptr %61, align 1
  %74 = load i1, ptr %72, align 1
  %75 = icmp eq i1 %73, %74
  %76 = alloca i1, align 1
  store i1 %75, ptr %76, align 1
  %77 = load i1, ptr %76, align 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %4
  br label %94

79:                                               ; preds = %4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %80 = load ptr, ptr %.reload13, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %82 = load ptr, ptr %.reload8, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 1
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %84 = load ptr, ptr %.reload5, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 2
  %.reload = load ptr, ptr %.reg2mem, align 8
  %86 = load i32, ptr %.reload, align 4
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %86, 3
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %89 = call ptr @llvm.invariant.start.p0(i64 128, ptr %80)
  %90 = getelementptr ptr, ptr %80, i32 %86
  %91 = getelementptr ptr, ptr %90, i32 6
  %92 = load ptr, ptr %91, align 8
  %93 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %87, ptr %6)
  call void %93({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } %87, ptr %5) #17
  br label %94

94:                                               ; preds = %79, %78
  ret void
}

define void @File_reopen_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @File)
  %18 = load ptr, ptr %7, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %18, 0
  %20 = load ptr, ptr %10, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %20, 1
  %22 = load ptr, ptr %13, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 2
  %24 = load i32, ptr %16, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %24, 3
  %26 = alloca [0 x ptr], align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 0, ptr %26)
  %28 = call ptr @llvm.invariant.start.p0(i64 128, ptr %18)
  %29 = getelementptr ptr, ptr %18, i32 %24
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  %32 = alloca {}, align 8
  %33 = call ptr @behavior_wrapper(ptr %31, { ptr, ptr, ptr, i32 } %25, ptr %32)
  call void %33({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr %26) #17
  %34 = load ptr, ptr %10, align 8
  %35 = load ptr, ptr %5, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 128, ptr %35)
  %37 = load i32, ptr %16, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = call { ptr, ptr, ptr, i32 } %41(ptr %34) #16
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %42, ptr %43, align 8
  call void @assume_offset(ptr %43, ptr @String)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = alloca [0 x ptr], align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 0, ptr %56)
  %58 = call ptr @llvm.invariant.start.p0(i64 616, ptr %45)
  %59 = getelementptr ptr, ptr %45, i32 %54
  %60 = getelementptr ptr, ptr %59, i32 15
  %61 = load ptr, ptr %60, align 8
  %62 = alloca {}, align 8
  %63 = call ptr @behavior_wrapper(ptr %61, { ptr, ptr, ptr, i32 } %55, ptr %62)
  %64 = call { ptr } %63({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %56) #17
  %65 = alloca ptr, align 8
  store { ptr } %64, ptr %65, align 8
  %66 = load ptr, ptr %10, align 8
  %67 = load ptr, ptr %5, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 128, ptr %67)
  %69 = load i32, ptr %16, align 4
  %70 = getelementptr ptr, ptr %67, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr, ptr, ptr, i32 } %74(ptr %66) #16
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %75, ptr %76, align 8
  call void @assume_offset(ptr %76, ptr @String)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 2
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %87, 3
  %89 = alloca [0 x ptr], align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 0, ptr %89)
  %91 = call ptr @llvm.invariant.start.p0(i64 616, ptr %78)
  %92 = getelementptr ptr, ptr %78, i32 %87
  %93 = getelementptr ptr, ptr %92, i32 15
  %94 = load ptr, ptr %93, align 8
  %95 = alloca {}, align 8
  %96 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %88, ptr %95)
  %97 = call { ptr } %96({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %89) #17
  %98 = alloca ptr, align 8
  store { ptr } %97, ptr %98, align 8
  %99 = load ptr, ptr %65, align 8
  %100 = insertvalue { ptr } undef, ptr %99, 0
  %101 = load ptr, ptr %98, align 8
  %102 = insertvalue { ptr } undef, ptr %101, 0
  %103 = call { ptr } @fopen({ ptr } %100, { ptr } %102)
  %104 = alloca ptr, align 8
  store { ptr } %103, ptr %104, align 8
  %105 = load ptr, ptr %10, align 8
  %106 = load ptr, ptr %5, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 128, ptr %106)
  %108 = load i32, ptr %16, align 4
  %109 = getelementptr ptr, ptr %106, i32 %108
  %110 = getelementptr ptr, ptr %109, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = load ptr, ptr %104, align 8
  %115 = insertvalue { ptr } undef, ptr %114, 0
  call void %113(ptr %105, { ptr } %115) #15
  %116 = load ptr, ptr %10, align 8
  %117 = load ptr, ptr %5, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 128, ptr %117)
  %119 = load i32, ptr %16, align 4
  %120 = getelementptr ptr, ptr %117, i32 %119
  %121 = getelementptr ptr, ptr %120, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = getelementptr { ptr, ptr }, ptr %122, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = call { ptr } %124(ptr %116) #16
  %126 = alloca ptr, align 8
  store { ptr } %125, ptr %126, align 8
  %127 = load ptr, ptr %126, align 8
  %128 = ptrtoint ptr %127 to i64
  %129 = icmp eq i64 %128, ptrtoint (ptr @nil_typ to i64)
  %130 = icmp eq i64 %128, 0
  %131 = or i1 %129, %130
  %132 = alloca i1, align 1
  store i1 %131, ptr %132, align 1
  %133 = alloca i1, align 1
  store i1 true, ptr %133, align 1
  %134 = load ptr, ptr %10, align 8
  %135 = load ptr, ptr %5, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 128, ptr %135)
  %137 = load i32, ptr %16, align 4
  %138 = getelementptr ptr, ptr %135, i32 %137
  %139 = getelementptr ptr, ptr %138, i32 3
  %140 = load ptr, ptr %139, align 8
  %141 = getelementptr { ptr, ptr }, ptr %140, i32 0, i32 1
  %142 = load ptr, ptr %141, align 8
  %143 = load i1, ptr %133, align 1
  call void %142(ptr %134, i1 %143) #15
  ret void
}

define void @File_close_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i1, align 1
  %7 = alloca i32, align 4
  %8 = alloca i1, align 1
  %9 = alloca [1 x ptr], align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca [1 x ptr], align 8
  %21 = alloca i32, align 4
  %22 = alloca ptr, align 8
  %23 = alloca ptr, align 8
  %24 = alloca ptr, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca [3 x ptr], align 8
  %28 = alloca { ptr, ptr, ptr }, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca [2 x ptr], align 8
  %31 = alloca { ptr, ptr }, align 8
  %32 = alloca { ptr, i160 }, align 8
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %33, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  store ptr %39, ptr %.reg2mem4, align 8
  %40 = load ptr, ptr %38, align 8
  %.reload8 = load ptr, ptr %.reg2mem4, align 8
  store ptr %40, ptr %.reload8, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  store ptr %45, ptr %.reg2mem, align 8
  %46 = load i32, ptr %44, align 4
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  store i32 %46, ptr %.reload3, align 4
  call void @set_offset(ptr %34, ptr @File)
  %47 = alloca i1, align 1
  store i1 false, ptr %47, align 1
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  %48 = load ptr, ptr %.reload7, align 8
  %49 = load ptr, ptr %34, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 128, ptr %49)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %51 = load i32, ptr %.reload2, align 4
  %52 = getelementptr ptr, ptr %49, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 3
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = call i1 %56(ptr %48) #16
  %58 = alloca i1, align 1
  store i1 %57, ptr %58, align 1
  %59 = load i1, ptr %47, align 1
  %60 = load i1, ptr %58, align 1
  %61 = icmp eq i1 %59, %60
  %62 = alloca i1, align 1
  store i1 %61, ptr %62, align 1
  %63 = load i1, ptr %62, align 1
  br i1 %63, label %64, label %65

64:                                               ; preds = %3
  br label %205

65:                                               ; preds = %3
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  %66 = load ptr, ptr %.reload6, align 8
  %67 = load ptr, ptr %34, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 128, ptr %67)
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %69 = load i32, ptr %.reload1, align 4
  %70 = getelementptr ptr, ptr %67, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr } %74(ptr %66) #16
  store { ptr } %75, ptr %4, align 8
  %76 = load ptr, ptr %4, align 8
  %77 = insertvalue { ptr } undef, ptr %76, 0
  %78 = call i32 @fclose({ ptr } %77)
  store i32 %78, ptr %5, align 4
  store i1 false, ptr %6, align 1
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %79 = load ptr, ptr %.reload5, align 8
  %80 = load ptr, ptr %34, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 128, ptr %80)
  %.reload = load ptr, ptr %.reg2mem, align 8
  %82 = load i32, ptr %.reload, align 4
  %83 = getelementptr ptr, ptr %80, i32 %82
  %84 = getelementptr ptr, ptr %83, i32 3
  %85 = load ptr, ptr %84, align 8
  %86 = getelementptr { ptr, ptr }, ptr %85, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = load i1, ptr %6, align 1
  call void %87(ptr %79, i1 %88) #15
  store i32 -1, ptr %7, align 4
  %89 = load i32, ptr %5, align 4
  %90 = load i32, ptr %7, align 4
  %91 = icmp eq i32 %89, %90
  store i1 %91, ptr %8, align 1
  %92 = load i1, ptr %8, align 1
  br i1 %92, label %93, label %._crit_edge

._crit_edge:                                      ; preds = %65
  br label %204

93:                                               ; preds = %65
  store ptr @FileSystemError, ptr %9, align 8
  %94 = load ptr, ptr %9, align 8
  %95 = getelementptr ptr, ptr %94, i32 6
  %96 = load ptr, ptr %95, align 8
  %97 = call { i64, i64 } @size_wrapper(ptr %96, ptr %9)
  %98 = extractvalue { i64, i64 } %97, 0
  %99 = call ptr @bump_malloc(i64 %98)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  store ptr @FileSystemError, ptr %10, align 8
  store ptr %99, ptr %100, align 8
  store i32 10, ptr %101, align 4
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = load ptr, ptr %100, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %105, 1
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 2
  %110 = load i32, ptr %101, align 4
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, i32 %110, 3
  %112 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %113 = call ptr @llvm.invariant.start.p0(i64 208, ptr %103)
  %114 = getelementptr ptr, ptr %103, i32 %110
  %115 = getelementptr ptr, ptr %114, i32 4
  %116 = load ptr, ptr %115, align 8
  %117 = call ptr @behavior_wrapper(ptr %116, { ptr, ptr, ptr, i32 } %111, ptr %12)
  call void %117({ ptr, ptr, ptr, i32 } %111, { ptr, ptr, ptr, i32 } %111, ptr %11) #17
  store i32 55, ptr %13, align 4
  store i32 11, ptr %14, align 4
  %118 = load i32, ptr %14, align 4
  %119 = sext i32 %118 to i64
  %120 = mul i64 %119, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %121 = call ptr @bump_malloc(i64 %120)
  store ptr %121, ptr %15, align 8
  %122 = getelementptr { ptr }, ptr %15, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  store ptr %123, ptr %16, align 8
  store i32 0, ptr %17, align 4
  %124 = load ptr, ptr %16, align 8
  %125 = load i32, ptr %17, align 4
  %126 = sext i32 %125 to i64
  %127 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %126
  %128 = getelementptr i8, ptr %124, i64 %127
  %129 = load <10 x i8>, ptr @uysps_filesmini, align 16
  store <10 x i8> %129, ptr %128, align 16
  store i32 10, ptr %18, align 4
  store i32 11, ptr %19, align 4
  store ptr @String, ptr %20, align 8
  %130 = load ptr, ptr %20, align 8
  %131 = getelementptr ptr, ptr %130, i32 6
  %132 = load ptr, ptr %131, align 8
  %133 = call { i64, i64 } @size_wrapper(ptr %132, ptr %20)
  %134 = extractvalue { i64, i64 } %133, 0
  %135 = call ptr @bump_malloc(i64 %134)
  store ptr @String, ptr %24, align 8
  store ptr %135, ptr %23, align 8
  store i32 10, ptr %21, align 4
  store i32 10, ptr %25, align 4
  store i32 11, ptr %26, align 4
  %136 = load ptr, ptr %16, align 8
  %137 = insertvalue { ptr } undef, ptr %136, 0
  %138 = load i32, ptr %25, align 4
  %139 = load i32, ptr %26, align 4
  %140 = load ptr, ptr %24, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %140, 0
  %142 = load ptr, ptr %23, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %142, 1
  %144 = load ptr, ptr %22, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %144, 2
  %146 = load i32, ptr %21, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 %146, 3
  %148 = getelementptr [3 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %148, align 8
  %149 = getelementptr [3 x ptr], ptr %27, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %149, align 8
  %150 = getelementptr [3 x ptr], ptr %27, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 9, ptr %27)
  %152 = call ptr @llvm.invariant.start.p0(i64 616, ptr %140)
  %153 = getelementptr ptr, ptr %140, i32 %146
  %154 = getelementptr ptr, ptr %153, i32 5
  %155 = load ptr, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr }, ptr %28, i32 0, i32 0
  store ptr @buffer_typ, ptr %156, align 8
  %157 = getelementptr { ptr, ptr, ptr }, ptr %28, i32 0, i32 1
  store ptr @i32_typ, ptr %157, align 8
  %158 = getelementptr { ptr, ptr, ptr }, ptr %28, i32 0, i32 2
  store ptr @i32_typ, ptr %158, align 8
  %159 = call ptr @behavior_wrapper(ptr %155, { ptr, ptr, ptr, i32 } %147, ptr %28)
  call void %159({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %27, { ptr } %137, i32 %138, i32 %139) #17
  %160 = load i32, ptr %13, align 4
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %162 = load ptr, ptr %24, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %164 = load ptr, ptr %23, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %166 = load ptr, ptr %22, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %168 = load i32, ptr %21, align 4
  store i32 %168, ptr %167, align 4
  call void @set_offset(ptr %29, ptr @String)
  %169 = load ptr, ptr %161, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %169, 0
  %171 = load ptr, ptr %163, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } %170, ptr %171, 1
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 2
  %175 = load i32, ptr %167, align 4
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %175, 3
  %177 = load ptr, ptr %102, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %177, 0
  %179 = load ptr, ptr %100, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %179, 1
  %181 = load ptr, ptr %107, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %180, ptr %181, 2
  %183 = load i32, ptr %101, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, i32 %183, 3
  %185 = getelementptr [2 x ptr], ptr %30, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %185, align 8
  %186 = getelementptr [2 x ptr], ptr %30, i32 0, i32 1
  store ptr @_parameterization_String, ptr %186, align 8
  %187 = call ptr @llvm.invariant.start.p0(i64 4, ptr %30)
  %188 = call ptr @llvm.invariant.start.p0(i64 208, ptr %177)
  %189 = getelementptr ptr, ptr %177, i32 %183
  %190 = getelementptr ptr, ptr %189, i32 5
  %191 = load ptr, ptr %190, align 8
  %192 = getelementptr { ptr, ptr }, ptr %31, i32 0, i32 0
  store ptr @i32_typ, ptr %192, align 8
  %193 = getelementptr { ptr, ptr }, ptr %31, i32 0, i32 1
  store ptr %169, ptr %193, align 8
  %194 = call ptr @behavior_wrapper(ptr %191, { ptr, ptr, ptr, i32 } %184, ptr %31)
  call void %194({ ptr, ptr, ptr, i32 } %184, { ptr, ptr, ptr, i32 } %184, ptr %30, i32 %160, { ptr, ptr, ptr, i32 } %176) #17
  %195 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 0
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, i160 } undef, ptr %196, 0
  %198 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 1
  %199 = load i160, ptr %198, align 4
  %200 = insertvalue { ptr, i160 } %197, i160 %199, 1
  %201 = call ptr @get_current_coroutine()
  %202 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %201, i32 0, i32 4
  store { ptr, i160 } %200, ptr %202, align 8
  call void @coroutine_yield(ptr %201)
  %203 = load { ptr, i160 }, ptr %202, align 8
  store { ptr, i160 } %203, ptr %32, align 8
  br label %204

204:                                              ; preds = %._crit_edge, %93
  br label %205

205:                                              ; preds = %204, %64
  ret void
}

define { ptr, i8 } @File_get_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca [0 x i8], align 1
  %5 = alloca { ptr, i8 }, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i1, align 1
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i1, align 1
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca [0 x ptr], align 8
  %17 = alloca {}, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca ptr, align 8
  %21 = alloca ptr, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca [1 x ptr], align 8
  %26 = alloca i32, align 4
  %27 = alloca ptr, align 8
  %28 = alloca ptr, align 8
  %29 = alloca ptr, align 8
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca [3 x ptr], align 8
  %33 = alloca { ptr, ptr, ptr }, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = alloca [2 x ptr], align 8
  %36 = alloca { ptr, ptr }, align 8
  %37 = alloca { ptr, i160 }, align 8
  %38 = alloca [0 x i8], align 1
  %39 = alloca { ptr, i8 }, align 8
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca ptr, align 8
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i8 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i8 }, align 8
  %.reg2mem5 = alloca { ptr, i8 }, align 8
  %.reg2mem7 = alloca { ptr, i8 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem25 = alloca { ptr, i8 }, align 8
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca { ptr, i8 }, align 8
  %.reg2mem31 = alloca { ptr, i8 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %43, align 8
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  store ptr %49, ptr %.reg2mem20, align 8
  %50 = load ptr, ptr %48, align 8
  %.reload24 = load ptr, ptr %.reg2mem20, align 8
  store ptr %50, ptr %.reload24, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  store ptr %55, ptr %.reg2mem15, align 8
  %56 = load i32, ptr %54, align 4
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  store i32 %56, ptr %.reload19, align 4
  call void @set_offset(ptr %44, ptr @File)
  %57 = alloca i1, align 1
  store i1 false, ptr %57, align 1
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  %58 = load ptr, ptr %.reload23, align 8
  %59 = load ptr, ptr %44, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 128, ptr %59)
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %61 = load i32, ptr %.reload18, align 4
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 3
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = call i1 %66(ptr %58) #16
  %68 = alloca i1, align 1
  store i1 %67, ptr %68, align 1
  %69 = load i1, ptr %57, align 1
  %70 = load i1, ptr %68, align 1
  %71 = icmp eq i1 %69, %70
  %72 = alloca i1, align 1
  store i1 %71, ptr %72, align 1
  %73 = load i1, ptr %72, align 1
  store i1 %73, ptr %.reg2mem11, align 1
  %.reload14 = load i1, ptr %.reg2mem11, align 1
  br i1 %.reload14, label %74, label %75

74:                                               ; preds = %3
  store i32 0, ptr %.reg2mem27, align 4
  store { ptr, i8 } poison, ptr %.reg2mem29, align 8
  br label %235

75:                                               ; preds = %3
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %76 = load ptr, ptr %.reload22, align 8
  %77 = load ptr, ptr %44, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 128, ptr %77)
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %79 = load i32, ptr %.reload17, align 4
  %80 = getelementptr ptr, ptr %77, i32 %79
  %81 = getelementptr ptr, ptr %80, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr } %84(ptr %76) #16
  store { ptr } %85, ptr %6, align 8
  %86 = load ptr, ptr %6, align 8
  %87 = insertvalue { ptr } undef, ptr %86, 0
  %88 = call i32 @fgetc({ ptr } %87)
  store i32 %88, ptr %7, align 4
  store i32 -1, ptr %8, align 4
  %89 = load i32, ptr %7, align 4
  %90 = load i32, ptr %8, align 4
  %91 = icmp eq i32 %89, %90
  store i1 %91, ptr %9, align 1
  %92 = load i1, ptr %9, align 1
  %93 = xor i1 %92, true
  %94 = zext i1 %93 to i32
  store i32 %94, ptr %.reg2mem9, align 4
  br i1 %92, label %95, label %225

95:                                               ; preds = %75
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %96 = load ptr, ptr %.reload21, align 8
  %97 = load ptr, ptr %44, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 128, ptr %97)
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %99 = load i32, ptr %.reload16, align 4
  %100 = getelementptr ptr, ptr %97, i32 %99
  %101 = getelementptr ptr, ptr %100, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = call { ptr } %104(ptr %96) #16
  store { ptr } %105, ptr %10, align 8
  %106 = load ptr, ptr %10, align 8
  %107 = insertvalue { ptr } undef, ptr %106, 0
  %108 = call i32 @ferror({ ptr } %107)
  store i32 %108, ptr %11, align 4
  store i32 0, ptr %12, align 4
  %109 = load i32, ptr %11, align 4
  %110 = load i32, ptr %12, align 4
  %111 = icmp ne i32 %109, %110
  store i1 %111, ptr %13, align 1
  %112 = load i1, ptr %13, align 1
  br i1 %112, label %113, label %._crit_edge

._crit_edge:                                      ; preds = %95
  br label %224

113:                                              ; preds = %95
  store ptr @FileSystemError, ptr %14, align 8
  %114 = load ptr, ptr %14, align 8
  %115 = getelementptr ptr, ptr %114, i32 6
  %116 = load ptr, ptr %115, align 8
  %117 = call { i64, i64 } @size_wrapper(ptr %116, ptr %14)
  %118 = extractvalue { i64, i64 } %117, 0
  %119 = call ptr @bump_malloc(i64 %118)
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr @FileSystemError, ptr %15, align 8
  store ptr %119, ptr %120, align 8
  store i32 10, ptr %121, align 4
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = load ptr, ptr %120, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %125, 1
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %128, 2
  %130 = load i32, ptr %121, align 4
  %131 = insertvalue { ptr, ptr, ptr, i32 } %129, i32 %130, 3
  %132 = call ptr @llvm.invariant.start.p0(i64 0, ptr %16)
  %133 = call ptr @llvm.invariant.start.p0(i64 208, ptr %123)
  %134 = getelementptr ptr, ptr %123, i32 %130
  %135 = getelementptr ptr, ptr %134, i32 4
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @behavior_wrapper(ptr %136, { ptr, ptr, ptr, i32 } %131, ptr %17)
  call void %137({ ptr, ptr, ptr, i32 } %131, { ptr, ptr, ptr, i32 } %131, ptr %16) #17
  store i32 61, ptr %18, align 4
  store i32 11, ptr %19, align 4
  %138 = load i32, ptr %19, align 4
  %139 = sext i32 %138 to i64
  %140 = mul i64 %139, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %141 = call ptr @bump_malloc(i64 %140)
  store ptr %141, ptr %20, align 8
  %142 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  store ptr %143, ptr %21, align 8
  store i32 0, ptr %22, align 4
  %144 = load ptr, ptr %21, align 8
  %145 = load i32, ptr %22, align 4
  %146 = sext i32 %145 to i64
  %147 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %146
  %148 = getelementptr i8, ptr %144, i64 %147
  %149 = load <10 x i8>, ptr @coiwt_filesmini, align 16
  store <10 x i8> %149, ptr %148, align 16
  store i32 10, ptr %23, align 4
  store i32 11, ptr %24, align 4
  store ptr @String, ptr %25, align 8
  %150 = load ptr, ptr %25, align 8
  %151 = getelementptr ptr, ptr %150, i32 6
  %152 = load ptr, ptr %151, align 8
  %153 = call { i64, i64 } @size_wrapper(ptr %152, ptr %25)
  %154 = extractvalue { i64, i64 } %153, 0
  %155 = call ptr @bump_malloc(i64 %154)
  store ptr @String, ptr %29, align 8
  store ptr %155, ptr %28, align 8
  store i32 10, ptr %26, align 4
  store i32 10, ptr %30, align 4
  store i32 11, ptr %31, align 4
  %156 = load ptr, ptr %21, align 8
  %157 = insertvalue { ptr } undef, ptr %156, 0
  %158 = load i32, ptr %30, align 4
  %159 = load i32, ptr %31, align 4
  %160 = load ptr, ptr %29, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %160, 0
  %162 = load ptr, ptr %28, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %162, 1
  %164 = load ptr, ptr %27, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 2
  %166 = load i32, ptr %26, align 4
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, i32 %166, 3
  %168 = getelementptr [3 x ptr], ptr %32, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %168, align 8
  %169 = getelementptr [3 x ptr], ptr %32, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %169, align 8
  %170 = getelementptr [3 x ptr], ptr %32, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %170, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 9, ptr %32)
  %172 = call ptr @llvm.invariant.start.p0(i64 616, ptr %160)
  %173 = getelementptr ptr, ptr %160, i32 %166
  %174 = getelementptr ptr, ptr %173, i32 5
  %175 = load ptr, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr }, ptr %33, i32 0, i32 0
  store ptr @buffer_typ, ptr %176, align 8
  %177 = getelementptr { ptr, ptr, ptr }, ptr %33, i32 0, i32 1
  store ptr @i32_typ, ptr %177, align 8
  %178 = getelementptr { ptr, ptr, ptr }, ptr %33, i32 0, i32 2
  store ptr @i32_typ, ptr %178, align 8
  %179 = call ptr @behavior_wrapper(ptr %175, { ptr, ptr, ptr, i32 } %167, ptr %33)
  call void %179({ ptr, ptr, ptr, i32 } %167, { ptr, ptr, ptr, i32 } %167, ptr %32, { ptr } %157, i32 %158, i32 %159) #17
  %180 = load i32, ptr %18, align 4
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %182 = load ptr, ptr %29, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %184 = load ptr, ptr %28, align 8
  store ptr %184, ptr %183, align 8
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %186 = load ptr, ptr %27, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %188 = load i32, ptr %26, align 4
  store i32 %188, ptr %187, align 4
  call void @set_offset(ptr %34, ptr @String)
  %189 = load ptr, ptr %181, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %189, 0
  %191 = load ptr, ptr %183, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %190, ptr %191, 1
  %193 = load ptr, ptr %185, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %193, 2
  %195 = load i32, ptr %187, align 4
  %196 = insertvalue { ptr, ptr, ptr, i32 } %194, i32 %195, 3
  %197 = load ptr, ptr %122, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %197, 0
  %199 = load ptr, ptr %120, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %199, 1
  %201 = load ptr, ptr %127, align 8
  %202 = insertvalue { ptr, ptr, ptr, i32 } %200, ptr %201, 2
  %203 = load i32, ptr %121, align 4
  %204 = insertvalue { ptr, ptr, ptr, i32 } %202, i32 %203, 3
  %205 = getelementptr [2 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %205, align 8
  %206 = getelementptr [2 x ptr], ptr %35, i32 0, i32 1
  store ptr @_parameterization_String, ptr %206, align 8
  %207 = call ptr @llvm.invariant.start.p0(i64 4, ptr %35)
  %208 = call ptr @llvm.invariant.start.p0(i64 208, ptr %197)
  %209 = getelementptr ptr, ptr %197, i32 %203
  %210 = getelementptr ptr, ptr %209, i32 5
  %211 = load ptr, ptr %210, align 8
  %212 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 0
  store ptr @i32_typ, ptr %212, align 8
  %213 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 1
  store ptr %189, ptr %213, align 8
  %214 = call ptr @behavior_wrapper(ptr %211, { ptr, ptr, ptr, i32 } %204, ptr %36)
  call void %214({ ptr, ptr, ptr, i32 } %204, { ptr, ptr, ptr, i32 } %204, ptr %35, i32 %180, { ptr, ptr, ptr, i32 } %196) #17
  %215 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 0
  %216 = load ptr, ptr %215, align 8
  %217 = insertvalue { ptr, i160 } undef, ptr %216, 0
  %218 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 1
  %219 = load i160, ptr %218, align 4
  %220 = insertvalue { ptr, i160 } %217, i160 %219, 1
  %221 = call ptr @get_current_coroutine()
  %222 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %221, i32 0, i32 4
  store { ptr, i160 } %220, ptr %222, align 8
  call void @coroutine_yield(ptr %221)
  %223 = load { ptr, i160 }, ptr %222, align 8
  store { ptr, i160 } %223, ptr %37, align 8
  br label %224

224:                                              ; preds = %._crit_edge, %113
  store { ptr, i8 } poison, ptr %.reg2mem31, align 8
  br label %233

225:                                              ; preds = %75
  %226 = load i32, ptr %7, align 4
  %227 = call i8 @i32toi8(i32 %226)
  store i8 %227, ptr %40, align 1
  %228 = load i8, ptr %40, align 1
  store i8 %228, ptr %41, align 1
  store ptr @i8_typ, ptr %42, align 8
  %229 = load ptr, ptr %42, align 8
  %230 = insertvalue { ptr, i8 } undef, ptr %229, 0
  %231 = load i8, ptr %41, align 1
  %232 = insertvalue { ptr, i8 } %230, i8 %231, 1
  store { ptr, i8 } %232, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i8 }, ptr %.reg2mem7, align 8
  store { ptr, i8 } %.reload8, ptr %.reg2mem31, align 8
  br label %233

233:                                              ; preds = %225, %224
  %.reload32 = load { ptr, i8 }, ptr %.reg2mem31, align 8
  store { ptr, i8 } %.reload32, ptr %.reg2mem5, align 8
  br label %234

234:                                              ; preds = %233
  %.reload6 = load { ptr, i8 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem27, align 4
  store { ptr, i8 } %.reload6, ptr %.reg2mem29, align 8
  br label %235

235:                                              ; preds = %234, %74
  %.reload30 = load { ptr, i8 }, ptr %.reg2mem29, align 8
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store { ptr, i8 } %.reload30, ptr %.reg2mem3, align 8
  store i32 %.reload28, ptr %.reg2mem1, align 4
  br label %236

236:                                              ; preds = %235
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %237 = zext i32 %.reload2 to i64
  %238 = trunc i64 %237 to i32
  switch i32 %238, label %249 [
    i32 0, label %239
  ]

239:                                              ; preds = %236
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  %240 = select i1 %.reload13, ptr %4, ptr %38
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  %241 = select i1 %.reload12, ptr %5, ptr %39
  %242 = getelementptr { ptr, i8 }, ptr %241, i32 0, i32 1
  %243 = load [0 x i8], ptr %240, align 1
  store [0 x i8] %243, ptr %242, align 1
  store ptr @nil_typ, ptr %241, align 8
  %244 = getelementptr { ptr, i8 }, ptr %241, i32 0, i32 0
  %245 = load ptr, ptr %244, align 8
  %246 = insertvalue { ptr, i8 } undef, ptr %245, 0
  %247 = load i8, ptr %242, align 1
  %248 = insertvalue { ptr, i8 } %246, i8 %247, 1
  store { ptr, i8 } %248, ptr %.reg2mem, align 8
  %.reload = load { ptr, i8 }, ptr %.reg2mem, align 8
  store { ptr, i8 } %.reload, ptr %.reg2mem25, align 8
  br label %250

249:                                              ; preds = %236
  %.reload4 = load { ptr, i8 }, ptr %.reg2mem3, align 8
  store { ptr, i8 } %.reload4, ptr %.reg2mem25, align 8
  br label %250

250:                                              ; preds = %249, %239
  %.reload26 = load { ptr, i8 }, ptr %.reg2mem25, align 8
  ret { ptr, i8 } %.reload26
}

define i32 @File_write_textString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i32, align 4
  %6 = alloca ptr, align 8
  %7 = alloca [0 x ptr], align 8
  %8 = alloca {}, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i1, align 1
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = alloca [0 x ptr], align 8
  %16 = alloca {}, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca ptr, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca [1 x ptr], align 8
  %25 = alloca i32, align 4
  %26 = alloca ptr, align 8
  %27 = alloca ptr, align 8
  %28 = alloca ptr, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca [3 x ptr], align 8
  %32 = alloca { ptr, ptr, ptr }, align 8
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = alloca [2 x ptr], align 8
  %35 = alloca { ptr, ptr }, align 8
  %36 = alloca { ptr, i160 }, align 8
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem21 = alloca ptr, align 8
  %.reg2mem25 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %37, align 8
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  store ptr %43, ptr %.reg2mem21, align 8
  %44 = load ptr, ptr %42, align 8
  %.reload24 = load ptr, ptr %.reg2mem21, align 8
  store ptr %44, ptr %.reload24, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr %49, ptr %.reg2mem17, align 8
  %50 = load i32, ptr %48, align 4
  %.reload20 = load ptr, ptr %.reg2mem17, align 8
  store i32 %50, ptr %.reload20, align 4
  call void @set_offset(ptr %38, ptr @File)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %51, align 8
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  store ptr %54, ptr %.reg2mem14, align 8
  %55 = load ptr, ptr %53, align 8
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  store ptr %55, ptr %.reload16, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  store ptr %57, ptr %.reg2mem11, align 8
  %58 = load ptr, ptr %56, align 8
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  store ptr %58, ptr %.reload13, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  store ptr %60, ptr %.reg2mem8, align 8
  %61 = load ptr, ptr %59, align 8
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  store ptr %61, ptr %.reload10, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  store ptr %63, ptr %.reg2mem5, align 8
  %64 = load i32, ptr %62, align 4
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  store i32 %64, ptr %.reload7, align 4
  call void @set_offset(ptr %52, ptr @String)
  %65 = alloca i1, align 1
  store i1 false, ptr %65, align 1
  %.reload23 = load ptr, ptr %.reg2mem21, align 8
  %66 = load ptr, ptr %.reload23, align 8
  %67 = load ptr, ptr %38, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 128, ptr %67)
  %.reload19 = load ptr, ptr %.reg2mem17, align 8
  %69 = load i32, ptr %.reload19, align 4
  %70 = getelementptr ptr, ptr %67, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 3
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call i1 %74(ptr %66) #16
  %76 = alloca i1, align 1
  store i1 %75, ptr %76, align 1
  %77 = load i1, ptr %65, align 1
  %78 = load i1, ptr %76, align 1
  %79 = icmp eq i1 %77, %78
  %80 = alloca i1, align 1
  store i1 %79, ptr %80, align 1
  %81 = load i1, ptr %80, align 1
  br i1 %81, label %82, label %84

82:                                               ; preds = %4
  store i32 -1, ptr %5, align 4
  %83 = load i32, ptr %5, align 4
  store i32 %83, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem25, align 4
  br label %232

84:                                               ; preds = %4
  %.reload22 = load ptr, ptr %.reg2mem21, align 8
  %85 = load ptr, ptr %.reload22, align 8
  %86 = load ptr, ptr %38, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 128, ptr %86)
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %88 = load i32, ptr %.reload18, align 4
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = getelementptr ptr, ptr %89, i32 2
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr { ptr, ptr }, ptr %91, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = call { ptr } %93(ptr %85) #16
  store { ptr } %94, ptr %6, align 8
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %95 = load ptr, ptr %.reload15, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %97 = load ptr, ptr %.reload12, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 1
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %99 = load ptr, ptr %.reload9, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %101 = load i32, ptr %.reload6, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  %103 = call ptr @llvm.invariant.start.p0(i64 0, ptr %7)
  %104 = call ptr @llvm.invariant.start.p0(i64 616, ptr %95)
  %105 = getelementptr ptr, ptr %95, i32 %101
  %106 = getelementptr ptr, ptr %105, i32 15
  %107 = load ptr, ptr %106, align 8
  %108 = call ptr @behavior_wrapper(ptr %107, { ptr, ptr, ptr, i32 } %102, ptr %8)
  %109 = call { ptr } %108({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %7) #17
  store { ptr } %109, ptr %9, align 8
  %110 = load ptr, ptr %6, align 8
  %111 = insertvalue { ptr } undef, ptr %110, 0
  %112 = load ptr, ptr %9, align 8
  %113 = insertvalue { ptr } undef, ptr %112, 0
  %114 = call i32 @fprintf({ ptr } %111, { ptr } %113)
  store i32 %114, ptr %10, align 4
  store i32 0, ptr %11, align 4
  %115 = load i32, ptr %10, align 4
  %116 = load i32, ptr %11, align 4
  %117 = icmp slt i32 %115, %116
  store i1 %117, ptr %12, align 1
  %118 = load i1, ptr %12, align 1
  br i1 %118, label %119, label %._crit_edge

._crit_edge:                                      ; preds = %84
  br label %230

119:                                              ; preds = %84
  store ptr @FileSystemError, ptr %13, align 8
  %120 = load ptr, ptr %13, align 8
  %121 = getelementptr ptr, ptr %120, i32 6
  %122 = load ptr, ptr %121, align 8
  %123 = call { i64, i64 } @size_wrapper(ptr %122, ptr %13)
  %124 = extractvalue { i64, i64 } %123, 0
  %125 = call ptr @bump_malloc(i64 %124)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  store ptr @FileSystemError, ptr %14, align 8
  store ptr %125, ptr %126, align 8
  store i32 10, ptr %127, align 4
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %129, 0
  %131 = load ptr, ptr %126, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 2
  %136 = load i32, ptr %127, align 4
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %136, 3
  %138 = call ptr @llvm.invariant.start.p0(i64 0, ptr %15)
  %139 = call ptr @llvm.invariant.start.p0(i64 208, ptr %129)
  %140 = getelementptr ptr, ptr %129, i32 %136
  %141 = getelementptr ptr, ptr %140, i32 4
  %142 = load ptr, ptr %141, align 8
  %143 = call ptr @behavior_wrapper(ptr %142, { ptr, ptr, ptr, i32 } %137, ptr %16)
  call void %143({ ptr, ptr, ptr, i32 } %137, { ptr, ptr, ptr, i32 } %137, ptr %15) #17
  store i32 69, ptr %17, align 4
  store i32 11, ptr %18, align 4
  %144 = load i32, ptr %18, align 4
  %145 = sext i32 %144 to i64
  %146 = mul i64 %145, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %147 = call ptr @bump_malloc(i64 %146)
  store ptr %147, ptr %19, align 8
  %148 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  store ptr %149, ptr %20, align 8
  store i32 0, ptr %21, align 4
  %150 = load ptr, ptr %20, align 8
  %151 = load i32, ptr %21, align 4
  %152 = sext i32 %151 to i64
  %153 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %152
  %154 = getelementptr i8, ptr %150, i64 %153
  %155 = load <10 x i8>, ptr @xcidy_filesmini, align 16
  store <10 x i8> %155, ptr %154, align 16
  store i32 10, ptr %22, align 4
  store i32 11, ptr %23, align 4
  store ptr @String, ptr %24, align 8
  %156 = load ptr, ptr %24, align 8
  %157 = getelementptr ptr, ptr %156, i32 6
  %158 = load ptr, ptr %157, align 8
  %159 = call { i64, i64 } @size_wrapper(ptr %158, ptr %24)
  %160 = extractvalue { i64, i64 } %159, 0
  %161 = call ptr @bump_malloc(i64 %160)
  store ptr @String, ptr %28, align 8
  store ptr %161, ptr %27, align 8
  store i32 10, ptr %25, align 4
  store i32 10, ptr %29, align 4
  store i32 11, ptr %30, align 4
  %162 = load ptr, ptr %20, align 8
  %163 = insertvalue { ptr } undef, ptr %162, 0
  %164 = load i32, ptr %29, align 4
  %165 = load i32, ptr %30, align 4
  %166 = load ptr, ptr %28, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %166, 0
  %168 = load ptr, ptr %27, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %168, 1
  %170 = load ptr, ptr %26, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %170, 2
  %172 = load i32, ptr %25, align 4
  %173 = insertvalue { ptr, ptr, ptr, i32 } %171, i32 %172, 3
  %174 = getelementptr [3 x ptr], ptr %31, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %174, align 8
  %175 = getelementptr [3 x ptr], ptr %31, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %175, align 8
  %176 = getelementptr [3 x ptr], ptr %31, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %176, align 8
  %177 = call ptr @llvm.invariant.start.p0(i64 9, ptr %31)
  %178 = call ptr @llvm.invariant.start.p0(i64 616, ptr %166)
  %179 = getelementptr ptr, ptr %166, i32 %172
  %180 = getelementptr ptr, ptr %179, i32 5
  %181 = load ptr, ptr %180, align 8
  %182 = getelementptr { ptr, ptr, ptr }, ptr %32, i32 0, i32 0
  store ptr @buffer_typ, ptr %182, align 8
  %183 = getelementptr { ptr, ptr, ptr }, ptr %32, i32 0, i32 1
  store ptr @i32_typ, ptr %183, align 8
  %184 = getelementptr { ptr, ptr, ptr }, ptr %32, i32 0, i32 2
  store ptr @i32_typ, ptr %184, align 8
  %185 = call ptr @behavior_wrapper(ptr %181, { ptr, ptr, ptr, i32 } %173, ptr %32)
  call void %185({ ptr, ptr, ptr, i32 } %173, { ptr, ptr, ptr, i32 } %173, ptr %31, { ptr } %163, i32 %164, i32 %165) #17
  %186 = load i32, ptr %17, align 4
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %188 = load ptr, ptr %28, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %190 = load ptr, ptr %27, align 8
  store ptr %190, ptr %189, align 8
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %192 = load ptr, ptr %26, align 8
  store ptr %192, ptr %191, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %194 = load i32, ptr %25, align 4
  store i32 %194, ptr %193, align 4
  call void @set_offset(ptr %33, ptr @String)
  %195 = load ptr, ptr %187, align 8
  %196 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %195, 0
  %197 = load ptr, ptr %189, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %196, ptr %197, 1
  %199 = load ptr, ptr %191, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %199, 2
  %201 = load i32, ptr %193, align 4
  %202 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %201, 3
  %203 = load ptr, ptr %128, align 8
  %204 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %203, 0
  %205 = load ptr, ptr %126, align 8
  %206 = insertvalue { ptr, ptr, ptr, i32 } %204, ptr %205, 1
  %207 = load ptr, ptr %133, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } %206, ptr %207, 2
  %209 = load i32, ptr %127, align 4
  %210 = insertvalue { ptr, ptr, ptr, i32 } %208, i32 %209, 3
  %211 = getelementptr [2 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %211, align 8
  %212 = getelementptr [2 x ptr], ptr %34, i32 0, i32 1
  store ptr @_parameterization_String, ptr %212, align 8
  %213 = call ptr @llvm.invariant.start.p0(i64 4, ptr %34)
  %214 = call ptr @llvm.invariant.start.p0(i64 208, ptr %203)
  %215 = getelementptr ptr, ptr %203, i32 %209
  %216 = getelementptr ptr, ptr %215, i32 5
  %217 = load ptr, ptr %216, align 8
  %218 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  store ptr @i32_typ, ptr %218, align 8
  %219 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 1
  store ptr %195, ptr %219, align 8
  %220 = call ptr @behavior_wrapper(ptr %217, { ptr, ptr, ptr, i32 } %210, ptr %35)
  call void %220({ ptr, ptr, ptr, i32 } %210, { ptr, ptr, ptr, i32 } %210, ptr %34, i32 %186, { ptr, ptr, ptr, i32 } %202) #17
  %221 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %222 = load ptr, ptr %221, align 8
  %223 = insertvalue { ptr, i160 } undef, ptr %222, 0
  %224 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 1
  %225 = load i160, ptr %224, align 4
  %226 = insertvalue { ptr, i160 } %223, i160 %225, 1
  %227 = call ptr @get_current_coroutine()
  %228 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %227, i32 0, i32 4
  store { ptr, i160 } %226, ptr %228, align 8
  call void @coroutine_yield(ptr %227)
  %229 = load { ptr, i160 }, ptr %228, align 8
  store { ptr, i160 } %229, ptr %36, align 8
  br label %230

230:                                              ; preds = %._crit_edge, %119
  %231 = load i32, ptr %10, align 4
  store i32 %231, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem25, align 4
  br label %232

232:                                              ; preds = %230, %82
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  store i32 %.reload26, ptr %.reg2mem, align 4
  br label %233

233:                                              ; preds = %232
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

declare i32 @fprintf({ ptr }, { ptr })

declare i32 @fgetc({ ptr })

declare i32 @ferror({ ptr })

define i8 @i32toi8(i32 %0) {
  %2 = alloca i1, align 1
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %.reg2mem = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %6, align 4
  %7 = alloca i32, align 4
  store i32 0, ptr %7, align 4
  %8 = alloca i8, align 1
  store i8 0, ptr %8, align 1
  %9 = alloca i8, align 1
  store i8 1, ptr %9, align 1
  br label %10

10:                                               ; preds = %._crit_edge1, %1
  %11 = load i32, ptr %7, align 4
  %12 = load i32, ptr %6, align 4
  %13 = icmp slt i32 %11, %12
  store i1 %13, ptr %2, align 1
  %14 = load i1, ptr %2, align 1
  store i1 %14, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %15, label %._crit_edge

._crit_edge:                                      ; preds = %10
  br label %24

15:                                               ; preds = %10
  %16 = load i8, ptr %8, align 1
  %17 = load i8, ptr %9, align 1
  %18 = add i8 %16, %17
  store i8 %18, ptr %3, align 1
  %19 = load i8, ptr %3, align 1
  store i8 %19, ptr %8, align 1
  store i32 1, ptr %4, align 4
  %20 = load i32, ptr %7, align 4
  %21 = load i32, ptr %4, align 4
  %22 = add i32 %20, %21
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %5, align 4
  store i32 %23, ptr %7, align 4
  br label %24

24:                                               ; preds = %._crit_edge, %15
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %25

._crit_edge1:                                     ; preds = %24
  br label %10

25:                                               ; preds = %24
  %26 = load i8, ptr %8, align 1
  ret i8 %26
}

declare i32 @fclose({ ptr })

declare { ptr } @fopen({ ptr }, { ptr })

define i1 @File_getter_open(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @File_setter_open(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca i1, align 1
  store i1 %1, ptr %21, align 1
  %22 = load i1, ptr %21, align 1
  store i1 %22, ptr %20, align 1
  ret void
}

define { ptr } @File_getter_handle(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @File_setter_handle(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @File_getter_mode(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @File_setter_mode(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @File_getter_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @File_setter_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { i64, i64 } @_data_size_FileProcessor(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_data_size_FileReader(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @FileReader_field_FileReader_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_String
}

define ptr @FileReader_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 3, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @FileReader_B_process_fileFile({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @File, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @File to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 4, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [8 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @FileReader_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @FileReader)
  ret void
}

define { ptr, i160 } @FileReader_process_fileFile({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i1, align 1
  %6 = alloca i8, align 1
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca { ptr, i8 }, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = load i32, ptr %27, align 4
  store i32 %29, ptr %28, align 4
  call void @set_offset(ptr %17, ptr @FileReader)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %30, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  store ptr %33, ptr %.reg2mem15, align 8
  %34 = load ptr, ptr %32, align 8
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  store ptr %34, ptr %.reload18, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  store ptr %36, ptr %.reg2mem11, align 8
  %37 = load ptr, ptr %35, align 8
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  store ptr %37, ptr %.reload14, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  store ptr %39, ptr %.reg2mem7, align 8
  %40 = load ptr, ptr %38, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  store ptr %40, ptr %.reload10, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  store ptr %42, ptr %.reg2mem3, align 8
  %43 = load i32, ptr %41, align 4
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store i32 %43, ptr %.reload6, align 4
  call void @set_offset(ptr %31, ptr @File)
  %44 = alloca i32, align 4
  store i32 1, ptr %44, align 4
  %45 = load i32, ptr %44, align 4
  %46 = sext i32 %45 to i64
  %47 = alloca ptr, align 8
  %48 = mul i64 %46, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %49 = call ptr @bump_malloc(i64 %48)
  store ptr %49, ptr %47, align 8
  %50 = alloca ptr, align 8
  %51 = getelementptr { ptr }, ptr %47, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  store ptr %52, ptr %50, align 8
  %53 = alloca i32, align 4
  store i32 0, ptr %53, align 4
  %54 = alloca i32, align 4
  store i32 0, ptr %54, align 4
  %55 = alloca i32, align 4
  store i32 1, ptr %55, align 4
  %56 = alloca [1 x ptr], align 8
  store ptr @String, ptr %56, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr ptr, ptr %57, i32 6
  %59 = load ptr, ptr %58, align 8
  %60 = call { i64, i64 } @size_wrapper(ptr %59, ptr %56)
  %61 = extractvalue { i64, i64 } %60, 0
  %62 = call ptr @bump_malloc(i64 %61)
  %63 = alloca i32, align 4
  %64 = alloca ptr, align 8
  %65 = alloca ptr, align 8
  %66 = alloca ptr, align 8
  store ptr @String, ptr %66, align 8
  store ptr %62, ptr %65, align 8
  store i32 10, ptr %63, align 4
  %67 = alloca i32, align 4
  store i32 0, ptr %67, align 4
  %68 = alloca i32, align 4
  store i32 1, ptr %68, align 4
  %69 = load ptr, ptr %50, align 8
  %70 = insertvalue { ptr } undef, ptr %69, 0
  %71 = load i32, ptr %67, align 4
  %72 = load i32, ptr %68, align 4
  %73 = load ptr, ptr %66, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %65, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %64, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %63, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  %81 = alloca [3 x ptr], align 8
  %82 = getelementptr [3 x ptr], ptr %81, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %82, align 8
  %83 = getelementptr [3 x ptr], ptr %81, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %83, align 8
  %84 = getelementptr [3 x ptr], ptr %81, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 9, ptr %81)
  %86 = call ptr @llvm.invariant.start.p0(i64 616, ptr %73)
  %87 = getelementptr ptr, ptr %73, i32 %79
  %88 = getelementptr ptr, ptr %87, i32 5
  %89 = load ptr, ptr %88, align 8
  %90 = alloca { ptr, ptr, ptr }, align 8
  %91 = getelementptr { ptr, ptr, ptr }, ptr %90, i32 0, i32 0
  store ptr @buffer_typ, ptr %91, align 8
  %92 = getelementptr { ptr, ptr, ptr }, ptr %90, i32 0, i32 1
  store ptr @i32_typ, ptr %92, align 8
  %93 = getelementptr { ptr, ptr, ptr }, ptr %90, i32 0, i32 2
  store ptr @i32_typ, ptr %93, align 8
  %94 = call ptr @behavior_wrapper(ptr %89, { ptr, ptr, ptr, i32 } %80, ptr %90)
  call void %94({ ptr, ptr, ptr, i32 } %80, { ptr, ptr, ptr, i32 } %80, ptr %81, { ptr } %70, i32 %71, i32 %72) #17
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %66, align 8
  store ptr %97, ptr %96, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 1
  %99 = load ptr, ptr %65, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 2
  %101 = load ptr, ptr %64, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 3
  %103 = load i32, ptr %63, align 4
  store i32 %103, ptr %102, align 4
  call void @set_offset(ptr %95, ptr @String)
  %104 = alloca i32, align 4
  %105 = alloca ptr, align 8
  %106 = alloca ptr, align 8
  %107 = alloca ptr, align 8
  %108 = load ptr, ptr %96, align 8
  store ptr %108, ptr %107, align 8
  %109 = load ptr, ptr %98, align 8
  store ptr %109, ptr %106, align 8
  %110 = load ptr, ptr %100, align 8
  store ptr %110, ptr %105, align 8
  %111 = load i32, ptr %102, align 4
  store i32 %111, ptr %104, align 4
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %112 = load ptr, ptr %.reload17, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %114 = load ptr, ptr %.reload13, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 1
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %116 = load ptr, ptr %.reload9, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %116, 2
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %118 = load i32, ptr %.reload5, align 4
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %118, 3
  %120 = alloca [0 x ptr], align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 0, ptr %120)
  %122 = call ptr @llvm.invariant.start.p0(i64 128, ptr %112)
  %123 = getelementptr ptr, ptr %112, i32 %118
  %124 = getelementptr ptr, ptr %123, i32 8
  %125 = load ptr, ptr %124, align 8
  %126 = alloca {}, align 8
  %127 = call ptr @behavior_wrapper(ptr %125, { ptr, ptr, ptr, i32 } %119, ptr %126)
  %128 = call { ptr, i8 } %127({ ptr, ptr, ptr, i32 } %119, { ptr, ptr, ptr, i32 } %119, ptr %120) #17
  %129 = alloca { ptr, i8 }, align 8
  store { ptr, i8 } %128, ptr %129, align 8
  br label %130

130:                                              ; preds = %._crit_edge1, %4
  %131 = load ptr, ptr %129, align 8
  %132 = ptrtoint ptr %131 to i64
  %133 = icmp eq i64 %132, ptrtoint (ptr @nil_typ to i64)
  %134 = icmp eq i64 %132, 0
  %135 = or i1 %133, %134
  %136 = icmp eq i1 %135, false
  store i1 %136, ptr %5, align 1
  %137 = load i1, ptr %5, align 1
  store i1 %137, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %138, label %._crit_edge

._crit_edge:                                      ; preds = %130
  br label %191

138:                                              ; preds = %130
  %139 = getelementptr { ptr, i8 }, ptr %129, i32 0, i32 1
  %140 = load i8, ptr %139, align 1
  store i8 %140, ptr %6, align 1
  %141 = load i8, ptr %6, align 1
  %142 = load ptr, ptr %107, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %144 = load ptr, ptr %106, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %144, 1
  %146 = load ptr, ptr %105, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %146, 2
  %148 = load i32, ptr %104, align 4
  %149 = insertvalue { ptr, ptr, ptr, i32 } %147, i32 %148, 3
  %150 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %152 = call ptr @llvm.invariant.start.p0(i64 616, ptr %142)
  %153 = getelementptr ptr, ptr %142, i32 %148
  %154 = getelementptr ptr, ptr %153, i32 9
  %155 = load ptr, ptr %154, align 8
  %156 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr @i8_typ, ptr %156, align 8
  %157 = call ptr @behavior_wrapper(ptr %155, { ptr, ptr, ptr, i32 } %149, ptr %8)
  %158 = call { ptr, ptr, ptr, i32 } %157({ ptr, ptr, ptr, i32 } %149, { ptr, ptr, ptr, i32 } %149, ptr %7, i8 %141) #17
  store { ptr, ptr, ptr, i32 } %158, ptr %9, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %161 = load ptr, ptr %159, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %164 = load ptr, ptr %162, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %167 = load ptr, ptr %165, align 8
  store ptr %167, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %170 = load i32, ptr %168, align 4
  store i32 %170, ptr %169, align 4
  call void @set_offset(ptr %10, ptr @String)
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %171 = load ptr, ptr %.reload16, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %173 = load ptr, ptr %.reload12, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %175 = load ptr, ptr %.reload8, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %177 = load i32, ptr %.reload4, align 4
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %180 = call ptr @llvm.invariant.start.p0(i64 128, ptr %171)
  %181 = getelementptr ptr, ptr %171, i32 %177
  %182 = getelementptr ptr, ptr %181, i32 8
  %183 = load ptr, ptr %182, align 8
  %184 = call ptr @behavior_wrapper(ptr %183, { ptr, ptr, ptr, i32 } %178, ptr %12)
  %185 = call { ptr, i8 } %184({ ptr, ptr, ptr, i32 } %178, { ptr, ptr, ptr, i32 } %178, ptr %11) #17
  store { ptr, i8 } %185, ptr %13, align 8
  %186 = getelementptr { ptr, i8 }, ptr %13, i32 0, i32 0
  %187 = getelementptr { ptr, i8 }, ptr %129, i32 0, i32 0
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, i8 }, ptr %13, i32 0, i32 1
  %190 = load i8, ptr %189, align 1
  store i8 %190, ptr %139, align 1
  br label %191

191:                                              ; preds = %._crit_edge, %138
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %192

._crit_edge1:                                     ; preds = %191
  br label %130

192:                                              ; preds = %191
  %193 = load ptr, ptr %107, align 8
  store ptr %193, ptr %15, align 8
  %194 = load ptr, ptr %106, align 8
  store ptr %194, ptr %14, align 8
  %195 = getelementptr i8, ptr %14, i32 8
  %196 = load ptr, ptr %105, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr i8, ptr %14, i32 16
  %198 = load i32, ptr %104, align 4
  store i32 %198, ptr %197, align 4
  %199 = load ptr, ptr %15, align 8
  %200 = insertvalue { ptr, i160 } undef, ptr %199, 0
  %201 = load i160, ptr %14, align 4
  %202 = insertvalue { ptr, i160 } %200, i160 %201, 1
  ret { ptr, i160 } %202
}

define { i64, i64 } @_data_size_FileWriter(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @FileWriter_field_FileWriter_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_Ptri32
}

define ptr @FileWriter_B_init_textString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 4, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [9 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FileWriter_B_process_fileFile({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @File, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @File to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 5, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [9 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @FileWriter_init_textString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FileWriter)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @String)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 72, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %34, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %36, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %38, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %40, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  call void %49(ptr %42, { ptr, ptr, ptr, i32 } %57) #15
  ret void
}

define { ptr, i160 } @FileWriter_process_fileFile({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FileWriter)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @File)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 72, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr, ptr, ptr, i32 } %40(ptr %33) #16
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  call void @assume_offset(ptr %42, ptr @String)
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %55 = load i32, ptr %53, align 4
  store i32 %55, ptr %54, align 4
  call void @set_offset(ptr %43, ptr @String)
  %56 = load ptr, ptr %45, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = load ptr, ptr %48, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %58, 1
  %60 = load ptr, ptr %51, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %60, 2
  %62 = load i32, ptr %54, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %62, 3
  %64 = load ptr, ptr %22, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = load ptr, ptr %25, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 1
  %68 = load ptr, ptr %28, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 2
  %70 = load i32, ptr %31, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = alloca [1 x ptr], align 8
  %73 = getelementptr [1 x ptr], ptr %72, i32 0, i32 0
  store ptr @_parameterization_String, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 1, ptr %72)
  %75 = call ptr @llvm.invariant.start.p0(i64 128, ptr %64)
  %76 = getelementptr ptr, ptr %64, i32 %70
  %77 = getelementptr ptr, ptr %76, i32 9
  %78 = load ptr, ptr %77, align 8
  %79 = alloca { ptr }, align 8
  %80 = getelementptr { ptr }, ptr %79, i32 0, i32 0
  store ptr %56, ptr %80, align 8
  %81 = call ptr @behavior_wrapper(ptr %78, { ptr, ptr, ptr, i32 } %71, ptr %79)
  %82 = call i32 %81({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %72, { ptr, ptr, ptr, i32 } %63) #17
  %83 = alloca i32, align 4
  store i32 %82, ptr %83, align 4
  %84 = alloca i160, align 8
  %85 = alloca ptr, align 8
  store ptr @i32_typ, ptr %85, align 8
  %86 = load i32, ptr %83, align 4
  store i32 %86, ptr %84, align 4
  %87 = load ptr, ptr %85, align 8
  %88 = insertvalue { ptr, i160 } undef, ptr %87, 0
  %89 = load i160, ptr %84, align 4
  %90 = insertvalue { ptr, i160 } %88, i160 %89, 1
  ret { ptr, i160 } %90
}

define { ptr, ptr, ptr, i32 } @FileWriter_getter_text(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @FileWriter_setter_text(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { i64, i64 } @_data_size_FileSystem(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %0)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %0, align 8
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 0, i32 1
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 0, i32 2
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 1, i32 0
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 1, i32 1
  %13 = load i64, ptr %9, align 4
  %14 = load i64, ptr %10, align 4
  %15 = load ptr, ptr %11, align 8
  %16 = load ptr, ptr %12, align 8
  %17 = load i64, ptr @String, align 4
  %18 = call i1 @subtype_test_wrapper(ptr %15, i64 %14, i64 %13, i64 %17, i64 ptrtoint (ptr @String to i64), ptr %16)
  store i1 %18, ptr %5, align 1
  %19 = getelementptr ptr, ptr %0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 0, i32 1
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 0, i32 2
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 1, i32 0
  %24 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 1, i32 1
  %25 = load i64, ptr %21, align 4
  %26 = load i64, ptr %22, align 4
  %27 = load ptr, ptr %23, align 8
  %28 = load ptr, ptr %24, align 8
  %29 = load i64, ptr @String, align 4
  %30 = call i1 @subtype_test_wrapper(ptr %27, i64 %26, i64 %25, i64 %29, i64 ptrtoint (ptr @String to i64), ptr %28)
  store i1 %30, ptr %4, align 1
  %31 = getelementptr ptr, ptr %0, i32 2
  store ptr %31, ptr %.reg2mem1, align 8
  %.reload3 = load ptr, ptr %.reg2mem1, align 8
  %32 = load ptr, ptr %.reload3, align 8
  %33 = getelementptr { [3 x i64], [3 x ptr] }, ptr %32, i32 0, i32 0, i32 1
  %34 = getelementptr { [3 x i64], [3 x ptr] }, ptr %32, i32 0, i32 0, i32 2
  %35 = getelementptr { [3 x i64], [3 x ptr] }, ptr %32, i32 0, i32 1, i32 0
  %36 = getelementptr { [3 x i64], [3 x ptr] }, ptr %32, i32 0, i32 1, i32 1
  %37 = load i64, ptr %33, align 4
  %38 = load i64, ptr %34, align 4
  %39 = load ptr, ptr %35, align 8
  %40 = load ptr, ptr %36, align 8
  %41 = load i64, ptr @FileProcessor, align 4
  %42 = call i1 @subtype_test_wrapper(ptr %39, i64 %38, i64 %37, i64 %41, i64 ptrtoint (ptr @FileProcessor to i64), ptr %40)
  store i1 %42, ptr %2, align 1
  %43 = load i1, ptr %2, align 1
  %44 = select i1 %43, i32 4, i32 3
  store i32 %44, ptr %.reg2mem, align 4
  br i1 %43, label %45, label %46

45:                                               ; preds = %1
  br label %50

46:                                               ; preds = %1
  %.reload2 = load ptr, ptr %.reg2mem1, align 8
  %47 = load ptr, ptr %.reload2, align 8
  %48 = ptrtoint ptr %47 to i64
  %49 = icmp eq i64 %48, ptrtoint (ptr @function_typ to i64)
  store i1 %49, ptr %3, align 1
  br label %50

50:                                               ; preds = %46, %45
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %7, align 4
  %51 = load i32, ptr %7, align 4
  %52 = getelementptr [7 x ptr], ptr @FileSystem, i32 0, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 10
  %54 = load ptr, ptr %53, align 8
  ret ptr %54
}

define ptr @FileSystem_B__Self_read_file_file_nameString(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 1
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 2
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 0
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 1
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @String, align 4
  %15 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 ptrtoint (ptr @String to i64), ptr %13)
  store i1 %15, ptr %2, align 1
  store i32 5, ptr %4, align 4
  %16 = load i32, ptr %4, align 4
  %17 = getelementptr [7 x ptr], ptr @FileSystem, i32 0, i32 %16
  %18 = getelementptr ptr, ptr %17, i32 10
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FileSystem_B__Self_write_file_file_nameString_textString(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %0, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  %17 = getelementptr ptr, ptr %0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr { [3 x i64], [3 x ptr] }, ptr %18, i32 0, i32 0, i32 1
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %18, i32 0, i32 0, i32 2
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %18, i32 0, i32 1, i32 0
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %18, i32 0, i32 1, i32 1
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = load i64, ptr @String, align 4
  %28 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 %27, i64 ptrtoint (ptr @String to i64), ptr %26)
  store i1 %28, ptr %2, align 1
  store i32 6, ptr %5, align 4
  %29 = load i32, ptr %5, align 4
  %30 = getelementptr [7 x ptr], ptr @FileSystem, i32 0, i32 %29
  %31 = getelementptr ptr, ptr %30, i32 10
  %32 = load ptr, ptr %31, align 8
  ret ptr %32
}

define { ptr, i160 } @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T(ptr %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2, { ptr, i160 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, i160 }, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %13, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @String)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %2, ptr %27, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  call void @set_offset(ptr %28, ptr @String)
  %41 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %41, align 8
  %42 = alloca ptr, align 8
  %43 = getelementptr { ptr, i160 }, ptr %41, i32 0, i32 1
  %44 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  store ptr %45, ptr %42, align 8
  %46 = alloca [1 x ptr], align 8
  store ptr @File, ptr %46, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr ptr, ptr %47, i32 6
  %49 = load ptr, ptr %48, align 8
  %50 = call { i64, i64 } @size_wrapper(ptr %49, ptr %46)
  %51 = extractvalue { i64, i64 } %50, 0
  %52 = call ptr @bump_malloc(i64 %51)
  %53 = alloca i32, align 4
  %54 = alloca ptr, align 8
  %55 = alloca ptr, align 8
  %56 = alloca ptr, align 8
  store ptr @File, ptr %56, align 8
  store ptr %52, ptr %55, align 8
  store i32 10, ptr %53, align 4
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %16, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %61 = load ptr, ptr %19, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %63 = load ptr, ptr %22, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %65 = load i32, ptr %25, align 4
  store i32 %65, ptr %64, align 4
  call void @set_offset(ptr %57, ptr @String)
  %66 = load ptr, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = load ptr, ptr %60, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 1
  %70 = load ptr, ptr %62, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 2
  %72 = load i32, ptr %64, align 4
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %72, 3
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %30, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %33, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %36, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %39, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @String)
  %83 = load ptr, ptr %75, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = load ptr, ptr %77, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 1
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %87, 2
  %89 = load i32, ptr %81, align 4
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, i32 %89, 3
  %91 = load ptr, ptr %56, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %55, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %54, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %53, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  %99 = alloca [2 x ptr], align 8
  %100 = getelementptr [2 x ptr], ptr %99, i32 0, i32 0
  store ptr @_parameterization_String, ptr %100, align 8
  %101 = getelementptr [2 x ptr], ptr %99, i32 0, i32 1
  store ptr @_parameterization_String, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 4, ptr %99)
  %103 = call ptr @llvm.invariant.start.p0(i64 128, ptr %91)
  %104 = getelementptr ptr, ptr %91, i32 %97
  %105 = getelementptr ptr, ptr %104, i32 4
  %106 = load ptr, ptr %105, align 8
  %107 = alloca { ptr, ptr }, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  store ptr %66, ptr %108, align 8
  %109 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  store ptr %83, ptr %109, align 8
  %110 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %98, ptr %107)
  call void %110({ ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %98, ptr %99, { ptr, ptr, ptr, i32 } %73, { ptr, ptr, ptr, i32 } %90) #17
  %111 = alloca { ptr, ptr, ptr, i32 }, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %56, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 1
  %115 = load ptr, ptr %55, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 2
  %117 = load ptr, ptr %54, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 3
  %119 = load i32, ptr %53, align 4
  store i32 %119, ptr %118, align 4
  call void @set_offset(ptr %111, ptr @File)
  %120 = alloca i32, align 4
  %121 = alloca ptr, align 8
  %122 = alloca ptr, align 8
  %123 = alloca ptr, align 8
  %124 = load ptr, ptr %112, align 8
  store ptr %124, ptr %123, align 8
  %125 = load ptr, ptr %114, align 8
  store ptr %125, ptr %122, align 8
  %126 = load ptr, ptr %116, align 8
  store ptr %126, ptr %121, align 8
  %127 = load i32, ptr %118, align 4
  store i32 %127, ptr %120, align 4
  %128 = load ptr, ptr %123, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = load ptr, ptr %122, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %130, 1
  %132 = load ptr, ptr %121, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %132, 2
  %134 = load i32, ptr %120, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %134, 3
  %136 = alloca ptr, align 8
  %137 = load ptr, ptr %42, align 8
  %138 = call ptr @coroutine_create(ptr %137, ptr @coroutine_ncjxqsbgoq_passer)
  call void @coroutine_ncjxqsbgoq_buffer_filler(ptr %138, { ptr, ptr, ptr, i32 } %135)
  store ptr %138, ptr %136, align 8
  %139 = alloca ptr, align 8
  %140 = getelementptr { ptr }, ptr %136, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  store ptr %141, ptr %139, align 8
  %142 = load ptr, ptr %139, align 8
  call void @coroutine_call(ptr %142)
  %143 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, ptr, ptr, i32 } }, ptr %142, i32 0, i32 4
  %144 = load { ptr, ptr, ptr, i32 }, ptr %143, align 8
  %145 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %144, ptr %145, align 8
  %146 = load ptr, ptr %123, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %146, 0
  %148 = load ptr, ptr %122, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %148, 1
  %150 = load ptr, ptr %121, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %149, ptr %150, 2
  %152 = load i32, ptr %120, align 4
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, i32 %152, 3
  %154 = alloca [0 x ptr], align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 0, ptr %154)
  %156 = call ptr @llvm.invariant.start.p0(i64 128, ptr %146)
  %157 = getelementptr ptr, ptr %146, i32 %152
  %158 = getelementptr ptr, ptr %157, i32 7
  %159 = load ptr, ptr %158, align 8
  %160 = alloca {}, align 8
  %161 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %153, ptr %160)
  call void %161({ ptr, ptr, ptr, i32 } %153, { ptr, ptr, ptr, i32 } %153, ptr %154) #17
  %162 = alloca i1, align 1
  store i1 false, ptr %162, align 1
  %163 = load i1, ptr %162, align 1
  br i1 %163, label %164, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %190

164:                                              ; preds = %4
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %167 = load ptr, ptr %165, align 8
  store ptr %167, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %170 = load ptr, ptr %168, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %173 = load ptr, ptr %171, align 8
  store ptr %173, ptr %172, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %176 = load i32, ptr %174, align 4
  store i32 %176, ptr %175, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %177 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %178 = load ptr, ptr %177, align 8
  %179 = insertvalue { ptr, i160 } undef, ptr %178, 0
  %180 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %181 = load i160, ptr %180, align 4
  %182 = insertvalue { ptr, i160 } %179, i160 %181, 1
  %183 = call ptr @get_current_coroutine()
  %184 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %183, i32 0, i32 4
  store { ptr, i160 } %182, ptr %184, align 8
  call void @coroutine_yield(ptr %183)
  %185 = load { ptr, i160 }, ptr %184, align 8
  store { ptr, i160 } %185, ptr %6, align 8
  %186 = load ptr, ptr %166, align 8
  store ptr %186, ptr %165, align 8
  %187 = load ptr, ptr %169, align 8
  store ptr %187, ptr %168, align 8
  %188 = load ptr, ptr %172, align 8
  store ptr %188, ptr %171, align 8
  %189 = load i32, ptr %175, align 4
  store i32 %189, ptr %174, align 4
  br label %190

190:                                              ; preds = %._crit_edge, %164
  %191 = load ptr, ptr %139, align 8
  %192 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %191, i32 0, i32 4
  %193 = load { ptr, i160 }, ptr %192, align 8
  store { ptr, i160 } %193, ptr %7, align 8
  %194 = load ptr, ptr %7, align 8
  %195 = ptrtoint ptr %194 to i64
  %196 = icmp eq i64 %195, ptrtoint (ptr @nil_typ to i64)
  %197 = icmp eq i64 %195, 0
  %198 = or i1 %196, %197
  %199 = icmp eq i1 %198, false
  store i1 %199, ptr %8, align 1
  %200 = load i1, ptr %8, align 1
  br i1 %200, label %201, label %212

201:                                              ; preds = %190
  %202 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %203 = load ptr, ptr %202, align 8
  store ptr %203, ptr %10, align 8
  %204 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %205 = load i160, ptr %204, align 4
  store i160 %205, ptr %9, align 4
  %206 = load ptr, ptr %10, align 8
  store ptr %206, ptr %12, align 8
  %207 = load i160, ptr %9, align 4
  store i160 %207, ptr %11, align 4
  %208 = load ptr, ptr %12, align 8
  %209 = insertvalue { ptr, i160 } undef, ptr %208, 0
  %210 = load i160, ptr %11, align 4
  %211 = insertvalue { ptr, i160 } %209, i160 %210, 1
  store { ptr, i160 } %211, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem3, align 8
  br label %213

212:                                              ; preds = %190
  store { ptr, i160 } poison, ptr %.reg2mem3, align 8
  br label %213

213:                                              ; preds = %212, %201
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem, align 8
  br label %214

214:                                              ; preds = %213
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr, i160 } @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT(ptr %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2, { ptr, i160 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, i160 }, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %14, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  call void @set_offset(ptr %15, ptr @String)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %2, ptr %28, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %41 = load i32, ptr %39, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %29, ptr @String)
  %42 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %42, align 8
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = getelementptr { ptr, i160 }, ptr %42, i32 0, i32 0
  %45 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 0
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, i160 }, ptr %42, i32 0, i32 1
  %48 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 1
  %49 = load i160, ptr %47, align 4
  store i160 %49, ptr %48, align 4
  call void @set_offset(ptr %43, ptr @FileProcessor)
  %50 = alloca [1 x ptr], align 8
  store ptr @File, ptr %50, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr ptr, ptr %51, i32 6
  %53 = load ptr, ptr %52, align 8
  %54 = call { i64, i64 } @size_wrapper(ptr %53, ptr %50)
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = call ptr @bump_malloc(i64 %55)
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  %60 = alloca ptr, align 8
  store ptr @File, ptr %60, align 8
  store ptr %56, ptr %59, align 8
  store i32 10, ptr %57, align 4
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %17, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %65 = load ptr, ptr %20, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %67 = load ptr, ptr %23, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %69 = load i32, ptr %26, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %61, ptr @String)
  %70 = load ptr, ptr %62, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %64, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %66, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %68, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %31, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %82 = load ptr, ptr %34, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %84 = load ptr, ptr %37, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %86 = load i32, ptr %40, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %78, ptr @String)
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %81, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %85, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = load ptr, ptr %60, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = load ptr, ptr %59, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 1
  %99 = load ptr, ptr %58, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %101 = load i32, ptr %57, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  %103 = alloca [2 x ptr], align 8
  %104 = getelementptr [2 x ptr], ptr %103, i32 0, i32 0
  store ptr @_parameterization_String, ptr %104, align 8
  %105 = getelementptr [2 x ptr], ptr %103, i32 0, i32 1
  store ptr @_parameterization_String, ptr %105, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 4, ptr %103)
  %107 = call ptr @llvm.invariant.start.p0(i64 128, ptr %95)
  %108 = getelementptr ptr, ptr %95, i32 %101
  %109 = getelementptr ptr, ptr %108, i32 4
  %110 = load ptr, ptr %109, align 8
  %111 = alloca { ptr, ptr }, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 0
  store ptr %70, ptr %112, align 8
  %113 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 1
  store ptr %87, ptr %113, align 8
  %114 = call ptr @behavior_wrapper(ptr %110, { ptr, ptr, ptr, i32 } %102, ptr %111)
  call void %114({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %103, { ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %94) #17
  %115 = alloca { ptr, ptr, ptr, i32 }, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %60, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 1
  %119 = load ptr, ptr %59, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 2
  %121 = load ptr, ptr %58, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 3
  %123 = load i32, ptr %57, align 4
  store i32 %123, ptr %122, align 4
  call void @set_offset(ptr %115, ptr @File)
  %124 = alloca i32, align 4
  %125 = alloca ptr, align 8
  %126 = alloca ptr, align 8
  %127 = alloca ptr, align 8
  %128 = load ptr, ptr %116, align 8
  store ptr %128, ptr %127, align 8
  %129 = load ptr, ptr %118, align 8
  store ptr %129, ptr %126, align 8
  %130 = load ptr, ptr %120, align 8
  store ptr %130, ptr %125, align 8
  %131 = load i32, ptr %122, align 4
  store i32 %131, ptr %124, align 4
  %132 = alloca ptr, align 8
  store ptr @_functionliteral_tjknwadrwp, ptr %132, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  %145 = load ptr, ptr %127, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %145, 0
  %147 = load ptr, ptr %126, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %147, 1
  %149 = load ptr, ptr %125, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %149, 2
  %151 = load i32, ptr %124, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %151, 3
  %153 = alloca ptr, align 8
  %154 = load ptr, ptr %132, align 8
  %155 = call ptr @coroutine_create(ptr %154, ptr @coroutine_wyfjeqslfr_passer)
  call void @coroutine_wyfjeqslfr_buffer_filler(ptr %155, { ptr, ptr, ptr, i32 } %144, { ptr, ptr, ptr, i32 } %152)
  store ptr %155, ptr %153, align 8
  %156 = alloca ptr, align 8
  %157 = getelementptr { ptr }, ptr %153, i32 0, i32 0
  %158 = load ptr, ptr %157, align 8
  store ptr %158, ptr %156, align 8
  %159 = load ptr, ptr %156, align 8
  call void @coroutine_call(ptr %159)
  %160 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %159, i32 0, i32 4
  %161 = load { ptr, i160 }, ptr %160, align 8
  %162 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %161, ptr %162, align 8
  %163 = load ptr, ptr %127, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %163, 0
  %165 = load ptr, ptr %126, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %165, 1
  %167 = load ptr, ptr %125, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %167, 2
  %169 = load i32, ptr %124, align 4
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, i32 %169, 3
  %171 = alloca [0 x ptr], align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 0, ptr %171)
  %173 = call ptr @llvm.invariant.start.p0(i64 128, ptr %163)
  %174 = getelementptr ptr, ptr %163, i32 %169
  %175 = getelementptr ptr, ptr %174, i32 7
  %176 = load ptr, ptr %175, align 8
  %177 = alloca {}, align 8
  %178 = call ptr @behavior_wrapper(ptr %176, { ptr, ptr, ptr, i32 } %170, ptr %177)
  call void %178({ ptr, ptr, ptr, i32 } %170, { ptr, ptr, ptr, i32 } %170, ptr %171) #17
  %179 = load ptr, ptr %162, align 8
  %180 = getelementptr { [3 x i64], [3 x ptr] }, ptr %179, i32 0, i32 0, i32 1
  %181 = getelementptr { [3 x i64], [3 x ptr] }, ptr %179, i32 0, i32 0, i32 2
  %182 = getelementptr { [3 x i64], [3 x ptr] }, ptr %179, i32 0, i32 1, i32 0
  %183 = getelementptr { [3 x i64], [3 x ptr] }, ptr %179, i32 0, i32 1, i32 1
  %184 = load i64, ptr %180, align 4
  %185 = load i64, ptr %181, align 4
  %186 = load ptr, ptr %182, align 8
  %187 = load ptr, ptr %183, align 8
  %188 = load i64, ptr @Exception, align 4
  %189 = call i1 @subtype_test_wrapper(ptr %186, i64 %185, i64 %184, i64 %188, i64 ptrtoint (ptr @Exception to i64), ptr %187)
  %190 = alloca i1, align 1
  store i1 %189, ptr %190, align 1
  %191 = load i1, ptr %190, align 1
  br i1 %191, label %192, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %208

192:                                              ; preds = %4
  %193 = getelementptr { ptr, i160 }, ptr %162, i32 0, i32 0
  %194 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %195 = load ptr, ptr %193, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, i160 }, ptr %162, i32 0, i32 1
  %197 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %198 = load i160, ptr %196, align 4
  store i160 %198, ptr %197, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %199 = load ptr, ptr %194, align 8
  %200 = insertvalue { ptr, i160 } undef, ptr %199, 0
  %201 = load i160, ptr %197, align 4
  %202 = insertvalue { ptr, i160 } %200, i160 %201, 1
  %203 = call ptr @get_current_coroutine()
  %204 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %203, i32 0, i32 4
  store { ptr, i160 } %202, ptr %204, align 8
  call void @coroutine_yield(ptr %203)
  %205 = load { ptr, i160 }, ptr %204, align 8
  store { ptr, i160 } %205, ptr %6, align 8
  %206 = load ptr, ptr %194, align 8
  store ptr %206, ptr %193, align 8
  %207 = load i160, ptr %197, align 4
  store i160 %207, ptr %196, align 4
  br label %208

208:                                              ; preds = %._crit_edge, %192
  %209 = load ptr, ptr %156, align 8
  %210 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %209, i32 0, i32 4
  %211 = load { ptr, i160 }, ptr %210, align 8
  store { ptr, i160 } %211, ptr %7, align 8
  store { ptr, i160 } %3, ptr %8, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = load ptr, ptr %8, align 8
  %215 = call ptr @llvm.invariant.start.p0(i64 56, ptr %214)
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %217 = load i32, ptr %216, align 4
  %218 = getelementptr ptr, ptr %214, i32 %217
  %219 = load ptr, ptr %218, align 8
  %220 = call ptr @typegetter_wrapper(ptr %219, ptr %213)
  %221 = load ptr, ptr %7, align 8
  %222 = ptrtoint ptr %221 to i64
  %223 = icmp eq i64 %222, ptrtoint (ptr @nil_typ to i64)
  %224 = icmp eq i64 %222, 0
  %225 = or i1 %223, %224
  %226 = icmp eq i1 %225, false
  store i1 %226, ptr %9, align 1
  %227 = load i1, ptr %9, align 1
  br i1 %227, label %228, label %239

228:                                              ; preds = %208
  %229 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %230 = load ptr, ptr %229, align 8
  store ptr %230, ptr %11, align 8
  %231 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %232 = load i160, ptr %231, align 4
  store i160 %232, ptr %10, align 4
  %233 = load ptr, ptr %11, align 8
  store ptr %233, ptr %13, align 8
  %234 = load i160, ptr %10, align 4
  store i160 %234, ptr %12, align 4
  %235 = load ptr, ptr %13, align 8
  %236 = insertvalue { ptr, i160 } undef, ptr %235, 0
  %237 = load i160, ptr %12, align 4
  %238 = insertvalue { ptr, i160 } %236, i160 %237, 1
  store { ptr, i160 } %238, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem3, align 8
  br label %240

239:                                              ; preds = %208
  store { ptr, i160 } poison, ptr %.reg2mem3, align 8
  br label %240

240:                                              ; preds = %239, %228
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem, align 8
  br label %241

241:                                              ; preds = %240
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr, ptr, ptr, i32 } @FileSystem__Self_read_file_file_nameString(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @String)
  %17 = alloca i32, align 4
  store i32 2, ptr %17, align 4
  %18 = load i32, ptr %17, align 4
  %19 = sext i32 %18 to i64
  %20 = alloca ptr, align 8
  %21 = mul i64 %19, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %22 = call ptr @bump_malloc(i64 %21)
  store ptr %22, ptr %20, align 8
  %23 = alloca ptr, align 8
  %24 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  store ptr %25, ptr %23, align 8
  %26 = alloca i32, align 4
  store i32 0, ptr %26, align 4
  %27 = load ptr, ptr %23, align 8
  %28 = load i32, ptr %26, align 4
  %29 = sext i32 %28 to i64
  %30 = mul i64 ptrtoint (ptr getelementptr ([1 x i8], ptr null, i32 1) to i64), %29
  %31 = getelementptr i8, ptr %27, i64 %30
  %32 = load <1 x i8>, ptr @gshfn_r, align 1
  store <1 x i8> %32, ptr %31, align 1
  %33 = alloca i32, align 4
  store i32 1, ptr %33, align 4
  %34 = alloca i32, align 4
  store i32 2, ptr %34, align 4
  %35 = alloca [1 x ptr], align 8
  store ptr @String, ptr %35, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr ptr, ptr %36, i32 6
  %38 = load ptr, ptr %37, align 8
  %39 = call { i64, i64 } @size_wrapper(ptr %38, ptr %35)
  %40 = extractvalue { i64, i64 } %39, 0
  %41 = call ptr @bump_malloc(i64 %40)
  %42 = alloca i32, align 4
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  store ptr @String, ptr %45, align 8
  store ptr %41, ptr %44, align 8
  store i32 10, ptr %42, align 4
  %46 = alloca i32, align 4
  store i32 1, ptr %46, align 4
  %47 = alloca i32, align 4
  store i32 2, ptr %47, align 4
  %48 = load ptr, ptr %23, align 8
  %49 = insertvalue { ptr } undef, ptr %48, 0
  %50 = load i32, ptr %46, align 4
  %51 = load i32, ptr %47, align 4
  %52 = load ptr, ptr %45, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %44, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %43, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %42, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  %60 = alloca [3 x ptr], align 8
  %61 = getelementptr [3 x ptr], ptr %60, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %61, align 8
  %62 = getelementptr [3 x ptr], ptr %60, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %60, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 9, ptr %60)
  %65 = call ptr @llvm.invariant.start.p0(i64 616, ptr %52)
  %66 = getelementptr ptr, ptr %52, i32 %58
  %67 = getelementptr ptr, ptr %66, i32 5
  %68 = load ptr, ptr %67, align 8
  %69 = alloca { ptr, ptr, ptr }, align 8
  %70 = getelementptr { ptr, ptr, ptr }, ptr %69, i32 0, i32 0
  store ptr @buffer_typ, ptr %70, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %69, i32 0, i32 1
  store ptr @i32_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %69, i32 0, i32 2
  store ptr @i32_typ, ptr %72, align 8
  %73 = call ptr @behavior_wrapper(ptr %68, { ptr, ptr, ptr, i32 } %59, ptr %69)
  call void %73({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr %60, { ptr } %49, i32 %50, i32 %51) #17
  %74 = alloca [1 x ptr], align 8
  store ptr @FileReader, ptr %74, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr ptr, ptr %75, i32 6
  %77 = load ptr, ptr %76, align 8
  %78 = call { i64, i64 } @size_wrapper(ptr %77, ptr %74)
  %79 = extractvalue { i64, i64 } %78, 0
  %80 = call ptr @bump_malloc(i64 %79)
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  store ptr @FileReader, ptr %81, align 8
  store ptr %80, ptr %82, align 8
  store i32 10, ptr %83, align 4
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %87 = load ptr, ptr %82, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %87, 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 2
  %92 = load i32, ptr %83, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %92, 3
  %94 = alloca [0 x ptr], align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr %94)
  %96 = call ptr @llvm.invariant.start.p0(i64 64, ptr %85)
  %97 = getelementptr ptr, ptr %85, i32 %92
  %98 = getelementptr ptr, ptr %97, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = alloca {}, align 8
  %101 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %93, ptr %100)
  call void %101({ ptr, ptr, ptr, i32 } %93, { ptr, ptr, ptr, i32 } %93, ptr %94) #17
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %6, align 8
  store ptr %104, ptr %103, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %106 = load ptr, ptr %9, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %108 = load ptr, ptr %12, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %110 = load i32, ptr %15, align 4
  store i32 %110, ptr %109, align 4
  call void @set_offset(ptr %102, ptr @String)
  %111 = load ptr, ptr %103, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = load ptr, ptr %105, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %113, 1
  %115 = load ptr, ptr %107, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %115, 2
  %117 = load i32, ptr %109, align 4
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, i32 %117, 3
  %119 = alloca { ptr, ptr, ptr, i32 }, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %121 = load ptr, ptr %45, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %123 = load ptr, ptr %44, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %125 = load ptr, ptr %43, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %127 = load i32, ptr %42, align 4
  store i32 %127, ptr %126, align 4
  call void @set_offset(ptr %119, ptr @String)
  %128 = load ptr, ptr %120, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = load ptr, ptr %122, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %130, 1
  %132 = load ptr, ptr %124, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %132, 2
  %134 = load i32, ptr %126, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %134, 3
  %136 = getelementptr { ptr, i160 }, ptr %81, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, i160 } undef, ptr %137, 0
  %139 = getelementptr { ptr, i160 }, ptr %81, i32 0, i32 1
  %140 = load i160, ptr %139, align 4
  %141 = insertvalue { ptr, i160 } %138, i160 %140, 1
  %142 = alloca [3 x ptr], align 8
  %143 = getelementptr [3 x ptr], ptr %142, i32 0, i32 0
  store ptr @_parameterization_String, ptr %143, align 8
  %144 = getelementptr [3 x ptr], ptr %142, i32 0, i32 1
  store ptr @_parameterization_String, ptr %144, align 8
  %145 = getelementptr [3 x ptr], ptr %142, i32 0, i32 2
  store ptr @_parameterization_FileReader, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 9, ptr %142)
  %147 = call ptr @llvm.invariant.start.p0(i64 56, ptr @FileSystem)
  %148 = load ptr, ptr getelementptr (ptr, ptr @FileSystem, i32 10), align 8
  %149 = alloca { ptr, ptr, ptr }, align 8
  %150 = getelementptr { ptr, ptr, ptr }, ptr %149, i32 0, i32 0
  store ptr %111, ptr %150, align 8
  %151 = getelementptr { ptr, ptr, ptr }, ptr %149, i32 0, i32 1
  store ptr %128, ptr %151, align 8
  %152 = getelementptr { ptr, ptr, ptr }, ptr %149, i32 0, i32 2
  store ptr %137, ptr %152, align 8
  %153 = call ptr @class_behavior_wrapper(ptr %148, ptr %149)
  %154 = call { ptr, i160 } %153(ptr %142, { ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %135, { ptr, i160 } %141) #17
  %155 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %154, ptr %155, align 8
  %156 = alloca { ptr, ptr, ptr, i32 }, align 8
  %157 = getelementptr { ptr, i160 }, ptr %155, i32 0, i32 0
  %158 = getelementptr { ptr, i160 }, ptr %156, i32 0, i32 0
  %159 = load ptr, ptr %157, align 8
  store ptr %159, ptr %158, align 8
  %160 = getelementptr { ptr, i160 }, ptr %155, i32 0, i32 1
  %161 = getelementptr { ptr, i160 }, ptr %156, i32 0, i32 1
  %162 = load i160, ptr %160, align 4
  store i160 %162, ptr %161, align 4
  call void @set_offset(ptr %156, ptr @String)
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %163, ptr @String)
  %176 = load ptr, ptr %165, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %176, 0
  %178 = load ptr, ptr %168, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } %177, ptr %178, 1
  %180 = load ptr, ptr %171, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %180, 2
  %182 = load i32, ptr %174, align 4
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %182, 3
  ret { ptr, ptr, ptr, i32 } %183
}

define void @FileSystem__Self_write_file_file_nameString_textString(ptr %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %2, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @String)
  %32 = alloca i32, align 4
  store i32 2, ptr %32, align 4
  %33 = load i32, ptr %32, align 4
  %34 = sext i32 %33 to i64
  %35 = alloca ptr, align 8
  %36 = mul i64 %34, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %37 = call ptr @bump_malloc(i64 %36)
  store ptr %37, ptr %35, align 8
  %38 = alloca ptr, align 8
  %39 = getelementptr { ptr }, ptr %35, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  store ptr %40, ptr %38, align 8
  %41 = alloca i32, align 4
  store i32 0, ptr %41, align 4
  %42 = load ptr, ptr %38, align 8
  %43 = load i32, ptr %41, align 4
  %44 = sext i32 %43 to i64
  %45 = mul i64 ptrtoint (ptr getelementptr ([1 x i8], ptr null, i32 1) to i64), %44
  %46 = getelementptr i8, ptr %42, i64 %45
  %47 = load <1 x i8>, ptr @vohfk_w, align 1
  store <1 x i8> %47, ptr %46, align 1
  %48 = alloca i32, align 4
  store i32 1, ptr %48, align 4
  %49 = alloca i32, align 4
  store i32 2, ptr %49, align 4
  %50 = alloca [1 x ptr], align 8
  store ptr @String, ptr %50, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr ptr, ptr %51, i32 6
  %53 = load ptr, ptr %52, align 8
  %54 = call { i64, i64 } @size_wrapper(ptr %53, ptr %50)
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = call ptr @bump_malloc(i64 %55)
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  %60 = alloca ptr, align 8
  store ptr @String, ptr %60, align 8
  store ptr %56, ptr %59, align 8
  store i32 10, ptr %57, align 4
  %61 = alloca i32, align 4
  store i32 1, ptr %61, align 4
  %62 = alloca i32, align 4
  store i32 2, ptr %62, align 4
  %63 = load ptr, ptr %38, align 8
  %64 = insertvalue { ptr } undef, ptr %63, 0
  %65 = load i32, ptr %61, align 4
  %66 = load i32, ptr %62, align 4
  %67 = load ptr, ptr %60, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = load ptr, ptr %59, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %69, 1
  %71 = load ptr, ptr %58, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %71, 2
  %73 = load i32, ptr %57, align 4
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %73, 3
  %75 = alloca [3 x ptr], align 8
  %76 = getelementptr [3 x ptr], ptr %75, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %76, align 8
  %77 = getelementptr [3 x ptr], ptr %75, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %77, align 8
  %78 = getelementptr [3 x ptr], ptr %75, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %78, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 9, ptr %75)
  %80 = call ptr @llvm.invariant.start.p0(i64 616, ptr %67)
  %81 = getelementptr ptr, ptr %67, i32 %73
  %82 = getelementptr ptr, ptr %81, i32 5
  %83 = load ptr, ptr %82, align 8
  %84 = alloca { ptr, ptr, ptr }, align 8
  %85 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 0
  store ptr @buffer_typ, ptr %85, align 8
  %86 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 1
  store ptr @i32_typ, ptr %86, align 8
  %87 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 2
  store ptr @i32_typ, ptr %87, align 8
  %88 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %74, ptr %84)
  call void %88({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr %75, { ptr } %64, i32 %65, i32 %66) #17
  %89 = alloca [1 x ptr], align 8
  store ptr @FileWriter, ptr %89, align 8
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr ptr, ptr %90, i32 6
  %92 = load ptr, ptr %91, align 8
  %93 = call { i64, i64 } @size_wrapper(ptr %92, ptr %89)
  %94 = extractvalue { i64, i64 } %93, 0
  %95 = call ptr @bump_malloc(i64 %94)
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  store ptr @FileWriter, ptr %96, align 8
  store ptr %95, ptr %97, align 8
  store i32 10, ptr %98, align 4
  %99 = alloca { ptr, ptr, ptr, i32 }, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %21, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %103 = load ptr, ptr %24, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %105 = load ptr, ptr %27, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %107 = load i32, ptr %30, align 4
  store i32 %107, ptr %106, align 4
  call void @set_offset(ptr %99, ptr @String)
  %108 = load ptr, ptr %100, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %102, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %104, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %106, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = load ptr, ptr %97, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %122, 2
  %124 = load i32, ptr %98, align 4
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, i32 %124, 3
  %126 = alloca [1 x ptr], align 8
  %127 = getelementptr [1 x ptr], ptr %126, i32 0, i32 0
  store ptr @_parameterization_String, ptr %127, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 1, ptr %126)
  %129 = call ptr @llvm.invariant.start.p0(i64 72, ptr %117)
  %130 = getelementptr ptr, ptr %117, i32 %124
  %131 = getelementptr ptr, ptr %130, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = alloca { ptr }, align 8
  %134 = getelementptr { ptr }, ptr %133, i32 0, i32 0
  store ptr %108, ptr %134, align 8
  %135 = call ptr @behavior_wrapper(ptr %132, { ptr, ptr, ptr, i32 } %125, ptr %133)
  call void %135({ ptr, ptr, ptr, i32 } %125, { ptr, ptr, ptr, i32 } %125, ptr %126, { ptr, ptr, ptr, i32 } %115) #17
  %136 = alloca { ptr, ptr, ptr, i32 }, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %7, align 8
  store ptr %138, ptr %137, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 1
  %140 = load ptr, ptr %10, align 8
  store ptr %140, ptr %139, align 8
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 2
  %142 = load ptr, ptr %13, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 3
  %144 = load i32, ptr %16, align 4
  store i32 %144, ptr %143, align 4
  call void @set_offset(ptr %136, ptr @String)
  %145 = load ptr, ptr %137, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %145, 0
  %147 = load ptr, ptr %139, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %147, 1
  %149 = load ptr, ptr %141, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %149, 2
  %151 = load i32, ptr %143, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %151, 3
  %153 = alloca { ptr, ptr, ptr, i32 }, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 0
  %155 = load ptr, ptr %60, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 1
  %157 = load ptr, ptr %59, align 8
  store ptr %157, ptr %156, align 8
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 2
  %159 = load ptr, ptr %58, align 8
  store ptr %159, ptr %158, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 3
  %161 = load i32, ptr %57, align 4
  store i32 %161, ptr %160, align 4
  call void @set_offset(ptr %153, ptr @String)
  %162 = load ptr, ptr %154, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %164 = load ptr, ptr %156, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 1
  %166 = load ptr, ptr %158, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 2
  %168 = load i32, ptr %160, align 4
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %168, 3
  %170 = getelementptr { ptr, i160 }, ptr %96, i32 0, i32 0
  %171 = load ptr, ptr %170, align 8
  %172 = insertvalue { ptr, i160 } undef, ptr %171, 0
  %173 = getelementptr { ptr, i160 }, ptr %96, i32 0, i32 1
  %174 = load i160, ptr %173, align 4
  %175 = insertvalue { ptr, i160 } %172, i160 %174, 1
  %176 = alloca [3 x ptr], align 8
  %177 = getelementptr [3 x ptr], ptr %176, i32 0, i32 0
  store ptr @_parameterization_String, ptr %177, align 8
  %178 = getelementptr [3 x ptr], ptr %176, i32 0, i32 1
  store ptr @_parameterization_String, ptr %178, align 8
  %179 = getelementptr [3 x ptr], ptr %176, i32 0, i32 2
  store ptr @_parameterization_FileWriter, ptr %179, align 8
  %180 = call ptr @llvm.invariant.start.p0(i64 9, ptr %176)
  %181 = call ptr @llvm.invariant.start.p0(i64 56, ptr @FileSystem)
  %182 = load ptr, ptr getelementptr (ptr, ptr @FileSystem, i32 10), align 8
  %183 = alloca { ptr, ptr, ptr }, align 8
  %184 = getelementptr { ptr, ptr, ptr }, ptr %183, i32 0, i32 0
  store ptr %145, ptr %184, align 8
  %185 = getelementptr { ptr, ptr, ptr }, ptr %183, i32 0, i32 1
  store ptr %162, ptr %185, align 8
  %186 = getelementptr { ptr, ptr, ptr }, ptr %183, i32 0, i32 2
  store ptr %171, ptr %186, align 8
  %187 = call ptr @class_behavior_wrapper(ptr %182, ptr %183)
  %188 = call { ptr, i160 } %187(ptr %176, { ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %169, { ptr, i160 } %175) #17
  %189 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %188, ptr %189, align 8
  %190 = alloca i32, align 4
  %191 = getelementptr { ptr, i160 }, ptr %189, i32 0, i32 1
  %192 = load i32, ptr %191, align 4
  store i32 %192, ptr %190, align 4
  ret void
}

define { ptr, i160 } @_functionliteral_tjknwadrwp({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @File)
  %18 = load ptr, ptr %7, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %18, 0
  %20 = load ptr, ptr %10, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %20, 1
  %22 = load ptr, ptr %13, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 2
  %24 = load i32, ptr %16, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %24, 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  %38 = alloca [1 x ptr], align 8
  %39 = getelementptr [1 x ptr], ptr %38, i32 0, i32 0
  store ptr @_parameterization_File, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 1, ptr %38)
  %41 = call ptr @llvm.invariant.start.p0(i64 24, ptr %27)
  %42 = getelementptr ptr, ptr %27, i32 %36
  %43 = getelementptr ptr, ptr %42, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = alloca { ptr }, align 8
  %46 = getelementptr { ptr }, ptr %45, i32 0, i32 0
  store ptr %18, ptr %46, align 8
  %47 = call ptr @behavior_wrapper(ptr %44, { ptr, ptr, ptr, i32 } %37, ptr %45)
  %48 = call { ptr, i160 } %47({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr %38, { ptr, ptr, ptr, i32 } %25) #17
  %49 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %48, ptr %49, align 8
  %50 = alloca i160, align 8
  %51 = alloca ptr, align 8
  %52 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  store ptr %53, ptr %51, align 8
  %54 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 1
  %55 = load i160, ptr %54, align 4
  store i160 %55, ptr %50, align 4
  %56 = alloca i160, align 8
  %57 = alloca ptr, align 8
  %58 = load ptr, ptr %51, align 8
  store ptr %58, ptr %57, align 8
  %59 = load i160, ptr %50, align 4
  store i160 %59, ptr %56, align 4
  %60 = load ptr, ptr %57, align 8
  %61 = insertvalue { ptr, i160 } undef, ptr %60, 0
  %62 = load i160, ptr %56, align 4
  %63 = insertvalue { ptr, i160 } %61, i160 %62, 1
  ret { ptr, i160 } %63
}

define void @coroutine_wyfjeqslfr_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 2
  %4 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %5 = load { ptr, ptr, ptr, i32 }, ptr %3, align 8
  %6 = load ptr, ptr %0, align 8
  %7 = call { ptr, i160 } %6({ ptr, ptr, ptr, i32 } %4, { ptr, ptr, ptr, i32 } %5)
  %8 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %0, i32 0, i32 4, i32 0
  store { ptr, i160 } %7, ptr %8, align 8
  ret void
}

define void @coroutine_wyfjeqslfr_buffer_filler(ptr %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 2
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  store { ptr, ptr, ptr, i32 } %2, ptr %5, align 8
  ret void
}

define void @coroutine_ncjxqsbgoq_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  %3 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %4 = load ptr, ptr %0, align 8
  %5 = call { ptr, i160 } %4({ ptr, ptr, ptr, i32 } %3)
  %6 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %0, i32 0, i32 4, i32 0
  store { ptr, i160 } %5, ptr %6, align 8
  ret void
}

define void @coroutine_ncjxqsbgoq_buffer_filler(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  ret void
}

define ptr @FileProcessor_field_FileProcessor_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FileProcessor_B_process_fileFile({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @File, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @File to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 2, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [3 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define ptr @typegetter_wrapper(ptr %f, ptr nocapture nofree noundef nonnull readonly %0) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f(ptr nocapture nofree noundef nonnull readonly %0) #18
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { i64, i64 } @size_wrapper(ptr %f, ptr nocapture nofree readonly %0) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call { i64, i64 } %f(ptr nocapture nofree readonly %0) #18
  ret { i64, i64 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { ptr, i160 } @box_wrapper(ptr %f, ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call { ptr, i160 } %f(ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #18
  ret { ptr, i160 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @unbox_wrapper(ptr %f, { ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #4 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void %f({ ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #19
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @behavior_wrapper(ptr %f, { ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #5 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #20
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @class_behavior_wrapper(ptr %f, ptr nocapture nofree noundef nonnull %0) #5 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f(ptr nocapture nofree noundef nonnull %0) #20
  ret ptr %result
}

define ptr @adjust_trampoline(ptr %tramp) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %ret = call ptr @llvm.adjust.trampoline(ptr %tramp) #21
  ret ptr %ret
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #6

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc(i64 noundef %size) #7 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr @current_ptr) #7
  ret ptr %result
}

; Function Attrs: mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr %current_ptr) #8 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %size_plus_15 = add i64 %size, 15
  %aligned_size = and i64 %size_plus_15, -16
  %current = load ptr, ptr %current_ptr, align 8
  %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
  store ptr %new_ptr, ptr %current_ptr, align 8
  ret ptr %current
}

define { i64, i64 } @_data_size_tuple_typ(ptr %0) {
  %.reg2mem = alloca i64, align 8
  %.reg2mem2 = alloca i64, align 8
  %.reg2mem5 = alloca i64, align 8
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem11 = alloca i64, align 8
  %.reg2mem22.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.010.reg2mem = alloca i64, align 8
  %.reg2mem22.011.reg2mem = alloca i64, align 8
  %.reg2mem14 = alloca i64, align 8
  %.in.reg2mem = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  store i64 %3, ptr %.reg2mem11, align 4
  %.reload13 = load i64, ptr %.reg2mem11, align 4
  %4 = icmp eq i64 %.reload13, 0
  br i1 %4, label %.._crit_edge_crit_edge, label %..lr.ph_crit_edge

..lr.ph_crit_edge:                                ; preds = %1
  %.reload12 = load i64, ptr %.reg2mem11, align 4
  store i64 1, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 0, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 1, ptr %.reg2mem14, align 4
  store i64 %.reload12, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.._crit_edge_crit_edge:                           ; preds = %1
  store i64 0, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 1, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph..lr.ph_crit_edge, %..lr.ph_crit_edge
  %.in.reload = load i64, ptr %.in.reg2mem, align 4
  %.reload15 = load i64, ptr %.reg2mem14, align 4
  %.reg2mem22.011.reload = load i64, ptr %.reg2mem22.011.reg2mem, align 4
  %.reg2mem20.010.reload = load i64, ptr %.reg2mem20.010.reg2mem, align 4
  %5 = inttoptr i64 %.in.reload to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 72
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reload)
  store i64 %12, ptr %.reg2mem8, align 4
  %13 = urem i64 %.reg2mem22.011.reload, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reload
  %18 = add i64 %17, %16
  store i64 %18, ptr %.reg2mem5, align 4
  %19 = add i64 %.reload15, 1
  store i64 %19, ptr %.reg2mem2, align 4
  %.reload3 = load i64, ptr %.reg2mem2, align 4
  %20 = getelementptr ptr, ptr %0, i64 %.reload3
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %.reg2mem, align 4
  %.reload = load i64, ptr %.reg2mem, align 4
  %22 = icmp eq i64 %.reload, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph..lr.ph_crit_edge

.lr.ph..lr.ph_crit_edge:                          ; preds = %.lr.ph
  %.reload1 = load i64, ptr %.reg2mem, align 4
  %.reload4 = load i64, ptr %.reg2mem2, align 4
  %.reload7 = load i64, ptr %.reg2mem5, align 4
  %.reload10 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload10, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 %.reload7, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 %.reload4, ptr %.reg2mem14, align 4
  store i64 %.reload1, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %.reload6 = load i64, ptr %.reg2mem5, align 4
  %.reload9 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload6, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 %.reload9, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.._crit_edge_crit_edge, %.._crit_edge_crit_edge
  %.reg2mem20.0.lcssa.reload = load i64, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  %.reg2mem22.0.lcssa.reload = load i64, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  %23 = urem i64 %.reg2mem22.0.lcssa.reload, %.reg2mem20.0.lcssa.reload
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reload, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %.reg2mem22.0.lcssa.reload
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reload, 1
  ret { i64, i64 } %29
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #2

define { i64, i64 } @_data_size_union_typ(ptr %0) {
  %.reg2mem = alloca i64, align 8
  %.reg2mem2 = alloca i64, align 8
  %.reg2mem5 = alloca i64, align 8
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem11 = alloca i64, align 8
  %.reg2mem22.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.010.reg2mem = alloca i64, align 8
  %.reg2mem22.011.reg2mem = alloca i64, align 8
  %.reg2mem14 = alloca i64, align 8
  %.in.reg2mem = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  store i64 %3, ptr %.reg2mem11, align 4
  %.reload13 = load i64, ptr %.reg2mem11, align 4
  %4 = icmp eq i64 %.reload13, 0
  br i1 %4, label %.._crit_edge_crit_edge, label %..lr.ph_crit_edge

..lr.ph_crit_edge:                                ; preds = %1
  %.reload12 = load i64, ptr %.reg2mem11, align 4
  store i64 1, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 0, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 1, ptr %.reg2mem14, align 4
  store i64 %.reload12, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.._crit_edge_crit_edge:                           ; preds = %1
  store i64 0, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 1, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph..lr.ph_crit_edge, %..lr.ph_crit_edge
  %.in.reload = load i64, ptr %.in.reg2mem, align 4
  %.reload15 = load i64, ptr %.reg2mem14, align 4
  %.reg2mem22.011.reload = load i64, ptr %.reg2mem22.011.reg2mem, align 4
  %.reg2mem20.010.reload = load i64, ptr %.reg2mem20.010.reg2mem, align 4
  %5 = inttoptr i64 %.in.reload to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 72
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 noundef %11, i64 noundef %.reg2mem20.010.reload)
  store i64 %12, ptr %.reg2mem8, align 4
  %13 = urem i64 %.reg2mem22.011.reload, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reload
  %18 = tail call i64 @llvm.umax.i64(i64 noundef %17, i64 noundef %16)
  store i64 %18, ptr %.reg2mem5, align 4
  %19 = add i64 %.reload15, 1
  store i64 %19, ptr %.reg2mem2, align 4
  %.reload3 = load i64, ptr %.reg2mem2, align 4
  %20 = getelementptr ptr, ptr %0, i64 %.reload3
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %.reg2mem, align 4
  %.reload = load i64, ptr %.reg2mem, align 4
  %22 = icmp eq i64 %.reload, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph..lr.ph_crit_edge

.lr.ph..lr.ph_crit_edge:                          ; preds = %.lr.ph
  %.reload1 = load i64, ptr %.reg2mem, align 4
  %.reload4 = load i64, ptr %.reg2mem2, align 4
  %.reload7 = load i64, ptr %.reg2mem5, align 4
  %.reload10 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload10, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 %.reload7, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 %.reload4, ptr %.reg2mem14, align 4
  store i64 %.reload1, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %.reload6 = load i64, ptr %.reg2mem5, align 4
  %.reload9 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload6, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 %.reload9, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.._crit_edge_crit_edge, %.._crit_edge_crit_edge
  %.reg2mem20.0.lcssa.reload = load i64, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  %.reg2mem22.0.lcssa.reload = load i64, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  %right_size = icmp eq i64 %.reg2mem22.0.lcssa.reload, 32
  %flag_size = select i1 %right_size, i64 0, i64 8
  %final_size = add i64 %.reg2mem22.0.lcssa.reload, %flag_size
  %23 = urem i64 %final_size, %.reg2mem20.0.lcssa.reload
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reload, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %final_size
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reload, 1
  ret { i64, i64 } %29
}

define void @_unbox_union_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @_data_size_union_typ(ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = icmp eq i64 %8, 32
  %11 = select i1 %9, ptr %5, ptr %6
  %12 = select i1 %10, ptr %4, ptr %11
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %12, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_Default(ptr %parameterization) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 32, i64 8 }
}

define { ptr, i160 } @_box_Default(ptr %fat_ptr, ptr %parameterization) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %1 = insertvalue { ptr, i160 } undef, ptr %vptr, 0
  %2 = getelementptr i8, ptr %fat_ptr, i64 8
  %3 = load i160, ptr %2, align 4
  %4 = insertvalue { ptr, i160 } %1, i160 %3, 1
  ret { ptr, i160 } %4
}

define void @_unbox_Default({ ptr, i160 } %fat_ptr, ptr %parameterization, ptr %destination) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = extractvalue { ptr, i160 } %fat_ptr, 0
  %data = extractvalue { ptr, i160 } %fat_ptr, 1
  %dest_data = getelementptr i8, ptr %destination, i64 8
  store ptr %vptr, ptr %destination, align 8
  store i160 %data, ptr %dest_data, align 4
  ret void
}

define void @anoint_trampoline(ptr %tramp) {
  %oldProtect = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr %oldProtect) #9
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) #9

define ptr @coroutine_create(ptr %func, ptr %arg_passer) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %stack = call noalias ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #22
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 0
  store ptr %func, ptr %func_ptr, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 1
  %arg_passer_slot = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 2
  %into_callee_first_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 0
  %into_callee_second_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 1
  %into_callee_third_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 2
  store i64 %stack_top_aligned, ptr %into_callee_first_word, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 3
  store i1 false, ptr %is_finished, align 1
  call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1)
declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) #10

declare void @coroutine_trampoline(ptr)

define void @setup_landing_pad() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %region = call noalias ptr @VirtualAlloc(ptr null, i64 5368709120, i32 12288, i32 4) #22
  store ptr %region, ptr @current_ptr, align 8
  %buf_first_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 0
  %buf_second_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 1
  %buf_third_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 2
  %sp = call ptr @llvm.stacksave.p0() #23
  store ptr %sp, ptr %buf_first_word, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr %buf_second_word, align 8
  store ptr %sp, ptr %buf_third_word, align 8
  %current_coroutine = call ptr @coroutine_create(ptr @setup_landing_pad, ptr @arg_passer)
  store ptr %current_coroutine, ptr @current_coroutine, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = call i32 @printf(ptr @string_string.119, ptr @exception_message)
  %cc = load { ptr }, ptr @current_coroutine, align 8
  call void @report_exception({ ptr } %cc)
  call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #11

define void @arg_passer(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 0
  %func = load ptr, ptr %func_ptr, align 8
  call void %func()
  ret void
}

define i1 @returns_one() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

declare void @exit()

define i32 @get_offset(ptr %vptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %id = load i64, ptr %id_ptr, align 4
  %id_of_casted = load i64, ptr %vptr, align 4
  %hash_coef_ptr = getelementptr i64, ptr %vptr, i32 1
  %tbl_size_ptr = getelementptr i64, ptr %vptr, i32 2
  %offset_tbl_ptr = getelementptr ptr, ptr %vptr, i32 5
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %index = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %id)
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %index
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %product, %shifted
  %hash = and i64 %xored, %tbl_size
  %bug = icmp sgt i64 %hash, %tbl_size
  ret i64 %hash
}

define void @assume_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  %dest_value = load i32, ptr %destination, align 4
  %slot = alloca i32, align 4
  store i32 %dest_value, ptr %slot, align 4
  %slotval = load i32, ptr %slot, align 4
  %eq = icmp eq i32 %slotval, %offset
  call void @llvm.assume(i1 %eq) #24
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #12

define void @set_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  store i32 %offset, ptr %destination, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %hash = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id)
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #18
  ret i1 %result
}

define void @arg_buffer_filler(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define ptr @get_current_coroutine() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

; Function Attrs: noinline nounwind memory(readwrite)
define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #13 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %from_buf_first_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 0
  %from_buf_second_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 1
  %from_buf_third_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 2
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = call ptr @llvm.stacksave.p0() #23
  store ptr %sp, ptr %from_buf_first_word, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %is_first_time = call i1 @returns_one()
  br i1 %is_first_time, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #14
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #14

define void @coroutine_yield(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr @into_caller_buf) #25
  ret void
}

define void @coroutine_call(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %old_into_caller = load [3 x ptr], ptr @into_caller_buf, align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly @into_caller_buf, ptr %into_callee_buf) #25
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store [3 x ptr] %old_into_caller, ptr @into_caller_buf, align 8
  ret void
}

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #4 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #5 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none) }
attributes #6 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #7 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #8 = { mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #9 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #10 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1) "alloc-family"="malloc" }
attributes #11 = { nocallback nofree nosync nounwind willreturn }
attributes #12 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #13 = { noinline nounwind memory(readwrite) }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind willreturn memory(argmem: readwrite) }
attributes #16 = { nounwind willreturn memory(argmem: read, inaccessiblemem: readwrite) }
attributes #17 = { nounwind }
attributes #18 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #19 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #20 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
attributes #21 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
attributes #22 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1) "alloc-family"="malloc" }
attributes #23 = { mustprogress nofree nosync nounwind willreturn }
attributes #24 = { mustprogress nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #25 = { nounwind memory(readwrite) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
