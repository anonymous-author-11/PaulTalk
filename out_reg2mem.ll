; ModuleID = '<stdin>'
source_filename = "llvm-link"

@jvapi__Benchmarks_Complete_ = internal constant [27 x i8] c"--- Benchmarks Complete ---"
@mmtbh__Map_Benchmarks_ = internal constant [22 x i8] c"--- Map Benchmarks ---"
@bkuio_ = internal constant [1 x i8] c")"
@wdzhj_____Items_removed_ = internal constant [20 x i8] c"    (Items removed: "
@dfwvt_FAIL = internal constant [4 x i8] c"FAIL"
@imods_PASS = internal constant [4 x i8] c"PASS"
@xbozs_____Verification_ = internal constant [18 x i8] c"    Verification: "
@iarao_Remove_Random = internal constant [13 x i8] c"Remove Random"
@lmasg_Warning_Remove_returned_Nil_for_key_ = internal constant [37 x i8] c"Warning: Remove returned Nil for key "
@fcfel_Warning_Remove_returned_wrong_value_for_key_ = internal constant [45 x i8] c"Warning: Remove returned wrong value for key "
@kgrpt__unique_keys_for_remove_test = internal constant [29 x i8] c" unique keys for remove test."
@pdxpr_Warning_Could_only_generate_ = internal constant [29 x i8] c"Warning: Could only generate "
@bnvrg_ = internal constant [1 x i8] c")"
@bojip__Hits_ = internal constant [8 x i8] c", Hits: "
@lhjwe_____Misses_ = internal constant [13 x i8] c"    (Misses: "
@yckrj_FAIL = internal constant [4 x i8] c"FAIL"
@hvyky_PASS = internal constant [4 x i8] c"PASS"
@nlfkp_____Verification_ = internal constant [18 x i8] c"    Verification: "
@adgtt_Get_Random_Miss = internal constant [15 x i8] c"Get Random Miss"
@cqpyx__guaranteed_miss_keys = internal constant [22 x i8] c" guaranteed miss keys."
@ldgmw_Warning_Could_only_generate_ = internal constant [29 x i8] c"Warning: Could only generate "
@xbzcy_FAIL = internal constant [4 x i8] c"FAIL"
@bskdh_PASS = internal constant [4 x i8] c"PASS"
@qryrr_____Verification_ = internal constant [18 x i8] c"    Verification: "
@gupjo_Get_Random_Hit = internal constant [14 x i8] c"Get Random Hit"
@swkjg_Error_Nil_returned_during_random_hit_test_for_key_ = internal constant [51 x i8] c"Error: Nil returned during random hit test for key "
@fhtqp__unique_keys_for_random_hit_test = internal constant [33 x i8] c" unique keys for random hit test."
@qijxd_Warning_Could_only_generate_ = internal constant [29 x i8] c"Warning: Could only generate "
@hjjpq_FAIL = internal constant [4 x i8] c"FAIL"
@pegsm_PASS = internal constant [4 x i8] c"PASS"
@qbfps_____Verification_ = internal constant [18 x i8] c"    Verification: "
@qdhmo_Get_Sequential_Hit = internal constant [18 x i8] c"Get Sequential Hit"
@gvbps_Error_Nil_returned_during_sequential_hit_test_for_key_ = internal constant [55 x i8] c"Error: Nil returned during sequential hit test for key "
@iofgr_ = internal constant [1 x i8] c")"
@oxayi_____Expected_unique_size_ = internal constant [27 x i8] c"    (Expected unique size: "
@rogds_FAIL = internal constant [4 x i8] c"FAIL"
@wwxbx_PASS = internal constant [4 x i8] c"PASS"
@wjvwz_____Verification_ = internal constant [18 x i8] c"    Verification: "
@vmshr_Insert_Random = internal constant [13 x i8] c"Insert Random"
@_parameterization_PairPtri32._Ptri1 = linkonce_odr constant [4 x ptr] [ptr @Pair, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri1, ptr null]
@qvmbb_FAIL = internal constant [4 x i8] c"FAIL"
@gfmlq_PASS = internal constant [4 x i8] c"PASS"
@tpazw_____Verification_ = internal constant [18 x i8] c"    Verification: "
@hvkkv_Insert_Sequential = internal constant [17 x i8] c"Insert Sequential"
@_parameterization_FunctionPtri32._Ptri32_to_Ptri1 = linkonce_odr constant [5 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri1, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_FunctionPtri32_to_Ptri32 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_PairPtri32._Ptri32 = linkonce_odr constant [4 x ptr] [ptr @Pair, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@dlhez__ns = internal constant [3 x i8] c" ns"
@rjxdt___TimeOp____ = internal constant [15 x i8] c"  Time/Op:    ~"
@rycbv__ms = internal constant [3 x i8] c" ms"
@gzkyq___Total_Time_ = internal constant [14 x i8] c"  Total Time: "
@mhwio___Operations_ = internal constant [14 x i8] c"  Operations: "
@PRNG_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @PRNG, ptr null]
@PRNG_offset_tbl = constant [4 x i32] [i32 15, i32 10, i32 10, i32 0]
@PRNG = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 -4401938362882229211, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @PRNG_hashtbl, ptr @PRNG_offset_tbl, ptr @_data_size_PRNG, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @PRNG_field_seed, ptr @PRNG_B_init_initial_seedPtri32, ptr @PRNG_B_next_, ptr @PRNG_init_initial_seedPtri32, ptr @PRNG_next_] }
@PRNG_field_seed = internal constant { ptr, ptr } { ptr @PRNG_getter_seed, ptr @PRNG_setter_seed }
@bool_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i8_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i32_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@i64_typ_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @i64_typ, ptr null]
@i64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@i128_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @i128_typ, ptr @any_typ, ptr null]
@i128_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@f64_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@nil_typ_hashtbl = constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@any_typ_hashtbl = constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = constant [1 x i32] [i32 10]
@nothing_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @nothing_typ]
@nothing_typ_offset_tbl = constant [4 x i32] [i32 0, i32 10, i32 10, i32 10]
@coroutine_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @coroutine_typ]
@coroutine_typ_offset_tbl = constant [4 x i32] [i32 0, i32 10, i32 10, i32 10]
@function_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@buffer_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @buffer_typ, ptr @any_typ, ptr null]
@buffer_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@tuple_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @tuple_typ]
@tuple_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@union_typ_hashtbl = constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 10]
@Object_hashtbl = constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@_parameterization_Nil = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr null]
@Entry_hashtbl = constant [4 x ptr] [ptr @Entry, ptr @Object, ptr @any_typ, ptr null]
@Entry_offset_tbl = constant [4 x i32] [i32 10, i32 25, i32 10, i32 0]
@Entry = constant { [3 x i64], [7 x ptr], [15 x ptr] } { [3 x i64] [i64 4015701072841558310, i64 4611686018427388181, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Entry_hashtbl, ptr @Entry_offset_tbl, ptr @_data_size_Entry, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [15 x ptr] [ptr @Entry_field_Entry_0, ptr @Entry_field_Entry_1, ptr @Entry_field_primary_hash, ptr @Entry_field_key, ptr @Entry_field_value, ptr @Entry_B_init_keyK_valueV_primary_hashPtri32, ptr @Entry_B_key_, ptr @Entry_B_value_, ptr @Entry_B_primary_hash_, ptr @Entry_B_to_pair_, ptr @Entry_init_keyK_valueV_primary_hashPtri32, ptr @Entry_key_, ptr @Entry_value_, ptr @Entry_primary_hash_, ptr @Entry_to_pair_] }
@CuckooMap_hashtbl = constant [8 x ptr] [ptr null, ptr @CuckooMap, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Map, ptr @HashMap, ptr @Object]
@CuckooMap_offset_tbl = constant [8 x i32] [i32 0, i32 10, i32 259, i32 10, i32 282, i32 199, i32 79, i32 282]
@CuckooMap = constant { [3 x i64], [7 x ptr], [272 x ptr] } { [3 x i64] [i64 3547150501766965522, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @CuckooMap_hashtbl, ptr @CuckooMap_offset_tbl, ptr @_data_size_CuckooMap, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [272 x ptr] [ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_field_table1, ptr @CuckooMap_field_table2, ptr @CuckooMap_field_table_len, ptr @CuckooMap_field_size, ptr @CuckooMap_field_hasher, ptr @CuckooMap_field_eq, ptr @CuckooMap_B__Self_max_displacements_, ptr @CuckooMap_B_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1, ptr @CuckooMap_B_hash1_keyK, ptr @CuckooMap_B_hash2_from_primary_primary_hashPtri32, ptr @CuckooMap_B_index1_primary_hashPtri32, ptr @CuckooMap_B_index2_primary_hashPtri32, ptr @CuckooMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V, ptr @CuckooMap_B_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablePtri32, ptr @CuckooMap_B_resize_, ptr @CuckooMap_B_replace_in_table_keyK_valueV_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_B_get_from_table_keyK_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_B_remove_from_table_keyK_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_B_insert_keyK_valueV, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_Ptri1, ptr @CuckooMap_B_any_fFunctionT_to_Ptri1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_Ptri1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap__Self_max_displacements_, ptr @CuckooMap_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1, ptr @CuckooMap_hash1_keyK, ptr @CuckooMap_hash2_from_primary_primary_hashPtri32, ptr @CuckooMap_index1_primary_hashPtri32, ptr @CuckooMap_index2_primary_hashPtri32, ptr @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V, ptr @CuckooMap_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablePtri32, ptr @CuckooMap_resize_, ptr @CuckooMap_replace_in_table_keyK_valueV_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_get_from_table_keyK_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_remove_from_table_keyK_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_insert_keyK_valueV, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_Ptri1, ptr @CuckooMap_B_any_fFunctionT_to_Ptri1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_Ptri1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_Ptri1, ptr @CuckooMap_B_any_fFunctionT_to_Ptri1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_Ptri1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_Ptri1, ptr @CuckooMap_B_any_fFunctionT_to_Ptri1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_Ptri1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_Ptri1, ptr @CuckooMap_B_any_fFunctionT_to_Ptri1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_Ptri1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_Ptri1, ptr @CuckooMap_B_any_fFunctionT_to_Ptri1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_Ptri1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_Ptri1, ptr @CuckooMap_B_any_fFunctionT_to_Ptri1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_Ptri1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_Ptri1, ptr @CuckooMap_B_any_fFunctionT_to_Ptri1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_Ptri1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@CuckooMapIterator_hashtbl = constant [8 x ptr] [ptr @CuckooMapIterator, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr null]
@CuckooMapIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 27, i32 24, i32 27, i32 0, i32 10, i32 0]
@CuckooMapIterator = constant { [3 x i64], [7 x ptr], [17 x ptr] } { [3 x i64] [i64 -1975748647346050920, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @CuckooMapIterator_hashtbl, ptr @CuckooMapIterator_offset_tbl, ptr @_data_size_CuckooMapIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [17 x ptr] [ptr @CuckooMapIterator_field_CuckooMapIterator_0, ptr @CuckooMapIterator_field_CuckooMapIterator_1, ptr @CuckooMapIterator_field_CuckooMapIterator_2, ptr @CuckooMapIterator_field_map_table1, ptr @CuckooMapIterator_field_map_table2, ptr @CuckooMapIterator_field_table_len, ptr @CuckooMapIterator_field_index, ptr @CuckooMapIterator_field_on_second, ptr @CuckooMapIterator_B_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_lenPtri32, ptr @CuckooMapIterator_B_next_from_table_tableBufferEntryK._V_or_Nil, ptr @CuckooMapIterator_B_next_, ptr @CuckooMapIterator_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_lenPtri32, ptr @CuckooMapIterator_next_from_table_tableBufferEntryK._V_or_Nil, ptr @CuckooMapIterator_next_, ptr @CuckooMapIterator_field_CuckooMapIterator_2, ptr @CuckooMapIterator_B_next_, ptr @CuckooMapIterator_next_] }
@Entry_field_primary_hash = internal constant { ptr, ptr } { ptr @Entry_getter_primary_hash, ptr @Entry_setter_primary_hash }
@Entry_field_key = internal constant { ptr, ptr } { ptr @Entry_getter_key, ptr @Entry_setter_key }
@Entry_field_value = internal constant { ptr, ptr } { ptr @Entry_getter_value, ptr @Entry_setter_value }
@CuckooMap_field_table1 = internal constant { ptr, ptr } { ptr @CuckooMap_getter_table1, ptr @CuckooMap_setter_table1 }
@CuckooMap_field_table2 = internal constant { ptr, ptr } { ptr @CuckooMap_getter_table2, ptr @CuckooMap_setter_table2 }
@CuckooMap_field_table_len = internal constant { ptr, ptr } { ptr @CuckooMap_getter_table_len, ptr @CuckooMap_setter_table_len }
@CuckooMap_field_size = internal constant { ptr, ptr } { ptr @CuckooMap_getter_size, ptr @CuckooMap_setter_size }
@CuckooMap_field_hasher = internal constant { ptr, ptr } { ptr @CuckooMap_getter_hasher, ptr @CuckooMap_setter_hasher }
@CuckooMap_field_eq = internal constant { ptr, ptr } { ptr @CuckooMap_getter_eq, ptr @CuckooMap_setter_eq }
@CuckooMapIterator_field_map_table1 = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_map_table1, ptr @CuckooMapIterator_setter_map_table1 }
@CuckooMapIterator_field_map_table2 = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_map_table2, ptr @CuckooMapIterator_setter_map_table2 }
@CuckooMapIterator_field_table_len = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_table_len, ptr @CuckooMapIterator_setter_table_len }
@CuckooMapIterator_field_index = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_index, ptr @CuckooMapIterator_setter_index }
@CuckooMapIterator_field_on_second = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_on_second, ptr @CuckooMapIterator_setter_on_second }
@xzxzd_mapmini = internal constant [8 x i8] c"map.mini"
@KeyNotFound_hashtbl = constant [4 x ptr] [ptr @Object, ptr @KeyNotFound, ptr @any_typ, ptr @Exception]
@KeyNotFound_offset_tbl = constant [4 x i32] [i32 36, i32 10, i32 10, i32 23]
@KeyNotFound = constant { [3 x i64], [7 x ptr], [26 x ptr] } { [3 x i64] [i64 2946564862774055400, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @KeyNotFound_hashtbl, ptr @KeyNotFound_offset_tbl, ptr @_data_size_KeyNotFound, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [26 x ptr] [ptr @KeyNotFound_field_line_number, ptr @KeyNotFound_field_file_name, ptr @KeyNotFound_field_message, ptr @KeyNotFound_B_init_messageString, ptr @KeyNotFound_B_init_, ptr @KeyNotFound_B_set_info_line_numberPtri32_file_nameString, ptr @KeyNotFound_B_report_, ptr @KeyNotFound_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_, ptr @KeyNotFound_field_line_number, ptr @KeyNotFound_field_file_name, ptr @KeyNotFound_field_message, ptr @KeyNotFound_B_init_messageString, ptr @KeyNotFound_B_init_, ptr @KeyNotFound_B_set_info_line_numberPtri32_file_nameString, ptr @KeyNotFound_B_report_, ptr @KeyNotFound_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@Map_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Map, ptr null, ptr @Object]
@Map_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 47, i32 10, i32 70, i32 10, i32 0, i32 70]
@Map = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -5249855671126779970, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Map_hashtbl, ptr @Map_offset_tbl, ptr @_data_size_Map, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@HashMap_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Map, ptr @HashMap, ptr @Object]
@HashMap_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 107, i32 10, i32 130, i32 47, i32 10, i32 130]
@HashMap = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -2849643283898152329, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @HashMap_hashtbl, ptr @HashMap_offset_tbl, ptr @_data_size_HashMap, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@KeyNotFound_field_line_number = internal constant { ptr, ptr } { ptr @KeyNotFound_getter_line_number, ptr @KeyNotFound_setter_line_number }
@KeyNotFound_field_file_name = internal constant { ptr, ptr } { ptr @KeyNotFound_getter_file_name, ptr @KeyNotFound_setter_file_name }
@KeyNotFound_field_message = internal constant { ptr, ptr } { ptr @KeyNotFound_getter_message, ptr @KeyNotFound_setter_message }
@_parameterization_Character = linkonce_odr constant [2 x ptr] [ptr @Character, ptr null]
@xcdpc_ = internal constant [9 x i8] c"---------"
@obmib_With_message = internal constant [12 x i8] c"With message"
@raxdn_At_line = internal constant [7 x i8] c"At line"
@vxjuo_Exception_thrown_from_file = internal constant [26 x i8] c"Exception thrown from file"
@etggt_ = internal constant [9 x i8] c"---------"
@hactn_None = internal constant [6 x i8] c"<None>"
@_parameterization_Ptri8 = linkonce_odr constant [2 x ptr] [ptr @i8_typ, ptr null]
@zzebn_Object = internal constant [6 x i8] c"Object"
@Representable_hashtbl = constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 12]
@String_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr @Representable, ptr @Container, ptr @Object, ptr null, ptr null, ptr @String]
@String_offset_tbl = constant [8 x i32] [i32 10, i32 64, i32 87, i32 87, i32 87, i32 0, i32 0, i32 10]
@Character_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = constant [4 x i32] [i32 15, i32 0, i32 10, i32 10]
@StringIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @StringIterator, ptr null]
@StringIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@Exception_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = constant [4 x i32] [i32 23, i32 0, i32 10, i32 10]
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@_parameterization_Ptri1 = linkonce_odr constant [2 x ptr] [ptr @bool_typ, ptr null]
@Pair_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
@Pair_offset_tbl = constant [4 x i32] [i32 20, i32 10, i32 10, i32 0]
@Container_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container]
@Container_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@Iterator_hashtbl = constant [4 x ptr] [ptr @Iterator, ptr @any_typ, ptr @Container, ptr @Object]
@Iterator_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 13, i32 13]
@Iterable_hashtbl = constant [4 x ptr] [ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Object]
@Iterable_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 33, i32 33]
@MapIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Container, ptr @MapIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@MapIterable_offset_tbl = constant [8 x i32] [i32 0, i32 61, i32 10, i32 38, i32 61, i32 0, i32 0, i32 10]
@MapIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterator, ptr @Container, ptr null, ptr @Iterator, ptr null, ptr null]
@MapIterator_offset_tbl = constant [8 x i32] [i32 21, i32 10, i32 10, i32 21, i32 0, i32 18, i32 0, i32 0]
@FilterIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @FilterIterable, ptr null, ptr @Container, ptr @Iterable, ptr null]
@FilterIterable_offset_tbl = constant [8 x i32] [i32 0, i32 60, i32 10, i32 10, i32 0, i32 60, i32 37, i32 0]
@FilterIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @FilterIterator, ptr null]
@FilterIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@ChainIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr @ChainIterable, ptr @Container, ptr null, ptr null, ptr @Object]
@ChainIterable_offset_tbl = constant [8 x i32] [i32 10, i32 37, i32 0, i32 10, i32 60, i32 0, i32 0, i32 60]
@ChainIterator_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ChainIterator]
@ChainIterator_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 21, i32 18, i32 21, i32 0, i32 10, i32 10]
@InterleaveIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Container, ptr @InterleaveIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@InterleaveIterable_offset_tbl = constant [8 x i32] [i32 0, i32 60, i32 10, i32 37, i32 60, i32 0, i32 0, i32 10]
@InterleaveIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @InterleaveIterator, ptr @Iterator, ptr null, ptr null]
@InterleaveIterator_offset_tbl = constant [8 x i32] [i32 21, i32 10, i32 0, i32 21, i32 10, i32 18, i32 0, i32 0]
@ZipIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr null, ptr @Container, ptr null, ptr @ZipIterable, ptr @Object]
@ZipIterable_offset_tbl = constant [8 x i32] [i32 10, i32 39, i32 0, i32 0, i32 62, i32 0, i32 10, i32 62]
@ZipIterator_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ZipIterator]
@ZipIterator_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 22, i32 19, i32 22, i32 0, i32 10, i32 10]
@ProductIterable_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @ProductIterable, ptr @Container, ptr null, ptr @Iterable, ptr null, ptr null]
@ProductIterable_offset_tbl = constant [8 x i32] [i32 62, i32 10, i32 10, i32 62, i32 0, i32 39, i32 0, i32 0]
@ProductIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @Iterator, ptr null, ptr @Container, ptr @Object, ptr null, ptr @ProductIterator]
@ProductIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 21, i32 0, i32 24, i32 24, i32 0, i32 10]
@Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
@Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
@MapIterable_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable_getter_iterable, ptr @MapIterable_setter_iterable }
@MapIterable_field_f = internal constant { ptr, ptr } { ptr @MapIterable_getter_f, ptr @MapIterable_setter_f }
@MapIterator_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator_getter_iterator, ptr @MapIterator_setter_iterator }
@MapIterator_field_f = internal constant { ptr, ptr } { ptr @MapIterator_getter_f, ptr @MapIterator_setter_f }
@FilterIterable_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable_getter_iterable, ptr @FilterIterable_setter_iterable }
@FilterIterable_field_f = internal constant { ptr, ptr } { ptr @FilterIterable_getter_f, ptr @FilterIterable_setter_f }
@FilterIterator_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator_getter_iterator, ptr @FilterIterator_setter_iterator }
@FilterIterator_field_f = internal constant { ptr, ptr } { ptr @FilterIterator_getter_f, ptr @FilterIterator_setter_f }
@ChainIterable_field_first = internal constant { ptr, ptr } { ptr @ChainIterable_getter_first, ptr @ChainIterable_setter_first }
@ChainIterable_field_second = internal constant { ptr, ptr } { ptr @ChainIterable_getter_second, ptr @ChainIterable_setter_second }
@ChainIterator_field_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_first, ptr @ChainIterator_setter_first }
@ChainIterator_field_second = internal constant { ptr, ptr } { ptr @ChainIterator_getter_second, ptr @ChainIterator_setter_second }
@ChainIterator_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_on_first, ptr @ChainIterator_setter_on_first }
@InterleaveIterable_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_first, ptr @InterleaveIterable_setter_first }
@InterleaveIterable_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_second, ptr @InterleaveIterable_setter_second }
@InterleaveIterator_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_first, ptr @InterleaveIterator_setter_first }
@InterleaveIterator_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_second, ptr @InterleaveIterator_setter_second }
@InterleaveIterator_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_on_first, ptr @InterleaveIterator_setter_on_first }
@ZipIterable_field_first = internal constant { ptr, ptr } { ptr @ZipIterable_getter_first, ptr @ZipIterable_setter_first }
@ZipIterable_field_second = internal constant { ptr, ptr } { ptr @ZipIterable_getter_second, ptr @ZipIterable_setter_second }
@ZipIterator_field_first = internal constant { ptr, ptr } { ptr @ZipIterator_getter_first, ptr @ZipIterator_setter_first }
@ZipIterator_field_second = internal constant { ptr, ptr } { ptr @ZipIterator_getter_second, ptr @ZipIterator_setter_second }
@ProductIterable_field_first = internal constant { ptr, ptr } { ptr @ProductIterable_getter_first, ptr @ProductIterable_setter_first }
@ProductIterable_field_second = internal constant { ptr, ptr } { ptr @ProductIterable_getter_second, ptr @ProductIterable_setter_second }
@ProductIterator_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_first_iterator, ptr @ProductIterator_setter_first_iterator }
@ProductIterator_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterator, ptr @ProductIterator_setter_second_iterator }
@ProductIterator_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterable, ptr @ProductIterator_setter_second_iterable }
@ProductIterator_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator_getter_current_first, ptr @ProductIterator_setter_current_first }
@Math_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Math]
@Math_offset_tbl = constant [4 x i32] [i32 27, i32 0, i32 10, i32 10]
@Math = constant { [3 x i64], [7 x ptr], [17 x ptr] } { [3 x i64] [i64 8094150130346788308, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Math_hashtbl, ptr @Math_offset_tbl, ptr @_data_size_Math, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [17 x ptr] [ptr @Math_B__Self_sqrt_xPtrf64, ptr @Math_B__Self_abs_xPtrf64__Self_abs_xPtri32, ptr @Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32, ptr @Math_B__Self_min_aPtrf64_bPtrf64__Self_min_aPtri32_bPtri32, ptr @Math_B__Self_round_xPtrf64, ptr @Math_B__Self_floor_xPtrf64, ptr @Math_B__Self_ceiling_xPtrf64, ptr @Math__Self_sqrt_xPtrf64, ptr @Math__Self_abs_xPtrf64, ptr @Math__Self_abs_xPtri32, ptr @Math__Self_max_aPtrf64_bPtrf64, ptr @Math__Self_max_aPtri32_bPtri32, ptr @Math__Self_min_aPtrf64_bPtrf64, ptr @Math__Self_min_aPtri32_bPtri32, ptr @Math__Self_round_xPtrf64, ptr @Math__Self_floor_xPtrf64, ptr @Math__Self_ceiling_xPtrf64] }
@Range_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable, ptr null, ptr @Range]
@Range_offset_tbl = constant [8 x i32] [i32 65, i32 10, i32 0, i32 65, i32 0, i32 42, i32 0, i32 10]
@Range = constant { [3 x i64], [7 x ptr], [55 x ptr] } { [3 x i64] [i64 5490049236840671069, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Range_hashtbl, ptr @Range_offset_tbl, ptr @_data_size_Range, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [55 x ptr] [ptr @Range_field_start, ptr @Range_field_end, ptr @Range_field_step, ptr @Range_field_Range_0, ptr @Range_B_init_endPtri32, ptr @Range_B_init_startPtri32_endPtri32, ptr @Range_B_step_stepPtri32, ptr @Range_B_iterator_, ptr @Range_B_each_fFunctionT_to_Nothing, ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Range_B_all_fFunctionT_to_Ptri1, ptr @Range_B_any_fFunctionT_to_Ptri1, ptr @Range_B_map_fFunctionT_to_U, ptr @Range_B_filter_fFunctionT_to_Ptri1, ptr @Range_B_chain_otherIterableT, ptr @Range_B_interleave_otherIterableT, ptr @Range_B_zip_otherIterableU, ptr @Range_B_product_otherIterableU, ptr @Range_init_endPtri32, ptr @Range_init_startPtri32_endPtri32, ptr @Range_step_stepPtri32, ptr @Range_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Range_field_Range_0, ptr @Range_B_iterator_, ptr @Range_B_each_fFunctionT_to_Nothing, ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Range_B_all_fFunctionT_to_Ptri1, ptr @Range_B_any_fFunctionT_to_Ptri1, ptr @Range_B_map_fFunctionT_to_U, ptr @Range_B_filter_fFunctionT_to_Ptri1, ptr @Range_B_chain_otherIterableT, ptr @Range_B_interleave_otherIterableT, ptr @Range_B_zip_otherIterableU, ptr @Range_B_product_otherIterableU, ptr @Range_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@RangeIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @Iterator, ptr @RangeIterator, ptr @Container, ptr @Object, ptr null, ptr null]
@RangeIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 18, i32 10, i32 21, i32 21, i32 0, i32 0]
@RangeIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -913562485944406675, i64 4611686018427388157, i64 7], [7 x ptr] [ptr @subtype_test, ptr @RangeIterator_hashtbl, ptr @RangeIterator_offset_tbl, ptr @_data_size_RangeIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @RangeIterator_field_counter, ptr @RangeIterator_field_end, ptr @RangeIterator_field_step, ptr @RangeIterator_field_RangeIterator_0, ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_B_next_, ptr @RangeIterator_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_next_, ptr @RangeIterator_field_RangeIterator_0, ptr @RangeIterator_B_next_, ptr @RangeIterator_next_] }
@Range_field_start = internal constant { ptr, ptr } { ptr @Range_getter_start, ptr @Range_setter_start }
@Range_field_end = internal constant { ptr, ptr } { ptr @Range_getter_end, ptr @Range_setter_end }
@Range_field_step = internal constant { ptr, ptr } { ptr @Range_getter_step, ptr @Range_setter_step }
@RangeIterator_field_counter = internal constant { ptr, ptr } { ptr @RangeIterator_getter_counter, ptr @RangeIterator_setter_counter }
@RangeIterator_field_end = internal constant { ptr, ptr } { ptr @RangeIterator_getter_end, ptr @RangeIterator_setter_end }
@RangeIterator_field_step = internal constant { ptr, ptr } { ptr @RangeIterator_getter_step, ptr @RangeIterator_setter_step }
@vjnfb_nil = internal constant [3 x i8] c"nil"
@fszmx_false = internal constant [5 x i8] c"false"
@jdcjo_true = internal constant [4 x i8] c"true"
@IO_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 20]
@Blocking_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Blocking, ptr null]
@Blocking_offset_tbl = constant [4 x i32] [i32 12, i32 10, i32 10, i32 0]
@Blocking = constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 847773162914674935, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Blocking_hashtbl, ptr @Blocking_offset_tbl, ptr @_data_size_Blocking, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Blocking_B_init_, ptr @Blocking_init_] }
@Channel_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Channel]
@Channel_offset_tbl = constant [4 x i32] [i32 18, i32 10, i32 0, i32 10]
@Channel = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 -3668118116639750450, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Channel_hashtbl, ptr @Channel_offset_tbl, ptr @_data_size_Channel, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @Channel_field_Channel_0, ptr @Channel_field_value, ptr @Channel_B_init_, ptr @Channel_B_get_, ptr @Channel_B_put_new_valueT, ptr @Channel_init_, ptr @Channel_get_, ptr @Channel_put_new_valueT] }
@Channel_field_value = internal constant { ptr, ptr } { ptr @Channel_getter_value, ptr @Channel_setter_value }
@fbmal_Array = internal constant [5 x i8] c"Array"
@rxhre_arraymini = internal constant [10 x i8] c"array.mini"
@Array_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Array, ptr @Representable, ptr @Object]
@Array_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 68, i32 10, i32 91, i32 10, i32 91, i32 91]
@Array = constant { [3 x i64], [7 x ptr], [83 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr @_data_size_Array, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [83 x ptr] [ptr @Array_field_Array_0, ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_B__Self_from_iterable_iterableIterableT, ptr @Array_B_init_, ptr @Array_B_init_capacityPtri32, ptr @Array_B_init_lengthPtri32_capacityPtri32, ptr @Array_B_init_bufferBufferT_lengthPtri32_capacityPtri32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_extend_otherArrayT, ptr @Array_B_reserve_new_capacityPtri32, ptr @Array_B__index_xPtri32, ptr @Array_B__set_index_xPtri32_valueT, ptr @Array_B_throw_oob_xPtri32, ptr @Array_B_unchecked_index_xPtri32, ptr @Array_B_unchecked_insert_xPtri32_valueT, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_B_repr_, ptr @Array__Self_from_iterable_iterableIterableT, ptr @Array_init_, ptr @Array_init_capacityPtri32, ptr @Array_init_lengthPtri32_capacityPtri32, ptr @Array_init_bufferBufferT_lengthPtri32_capacityPtri32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_extend_otherArrayT, ptr @Array_reserve_new_capacityPtri32, ptr @Array__index_xPtri32, ptr @Array__set_index_xPtri32_valueT, ptr @Array_throw_oob_xPtri32, ptr @Array_unchecked_index_xPtri32, ptr @Array_unchecked_insert_xPtri32_valueT, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_repr_, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_B_repr_, ptr @Array_repr_] }
@ArrayIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @ArrayIterator, ptr @Iterator, ptr null, ptr null]
@ArrayIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 10, i32 17, i32 0, i32 0]
@ArrayIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr @_data_size_ArrayIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
@Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
@Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
@ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
@ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
@_parameterization_Ptri64 = linkonce_odr constant [2 x ptr] [ptr @i64_typ, ptr null]
@_parameterization_FileWriter = linkonce_odr constant [2 x ptr] [ptr @FileWriter, ptr null]
@zmusp_wb = internal constant [2 x i8] c"wb"
@_parameterization_FileReader = linkonce_odr constant [2 x ptr] [ptr @FileReader, ptr null]
@nfizp_rb = internal constant [2 x i8] c"rb"
@_parameterization_File = linkonce_odr constant [2 x ptr] [ptr @File, ptr null]
@yudhk_filesmini = internal constant [10 x i8] c"files.mini"
@gdwdi_filesmini = internal constant [10 x i8] c"files.mini"
@ttnhy_filesmini = internal constant [10 x i8] c"files.mini"
@burle_filesmini = internal constant [10 x i8] c"files.mini"
@xhmow_filesmini = internal constant [10 x i8] c"files.mini"
@rverw_filesmini = internal constant [10 x i8] c"files.mini"
@wadry_filesmini = internal constant [10 x i8] c"files.mini"
@_parameterization_String = linkonce_odr constant [2 x ptr] [ptr @String, ptr null]
@_parameterization_Ptri32 = linkonce_odr constant [2 x ptr] [ptr @i32_typ, ptr null]
@_parameterization_BufferPtri8 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@npvbj_filesmini = internal constant [10 x i8] c"files.mini"
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@string_string = linkonce_odr constant [4 x i8] c"%s\0A\00"
@bool_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr @_data_size_bool_typ, ptr @_box_bool_typ, ptr @_unbox_bool_typ, ptr @_data_size_bool_typ], [0 x ptr] undef }
@i8_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr @_data_size_i8_typ, ptr @_box_i8_typ, ptr @_unbox_i8_typ, ptr @_data_size_i8_typ], [0 x ptr] undef }
@i32_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr @_data_size_i32_typ, ptr @_box_i32_typ, ptr @_unbox_i32_typ, ptr @_data_size_i32_typ], [0 x ptr] undef }
@i64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388157, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr @_data_size_i64_typ, ptr @_box_i64_typ, ptr @_unbox_i64_typ, ptr @_data_size_i64_typ], [0 x ptr] undef }
@i128_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -8755878215469463641, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i128_typ_hashtbl, ptr @i128_typ_offset_tbl, ptr @_data_size_i128_typ, ptr @_box_i128_typ, ptr @_unbox_i128_typ, ptr @_data_size_i128_typ], [0 x ptr] undef }
@f64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr @_data_size_f64_typ, ptr @_box_f64_typ, ptr @_unbox_f64_typ, ptr @_data_size_f64_typ], [0 x ptr] undef }
@nil_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr @_data_size_nil_typ, ptr @_box_nil_typ, ptr @_unbox_nil_typ, ptr @_data_size_nil_typ], [0 x ptr] undef }
@any_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [7 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr @_data_size_any_typ, ptr @_box_Default, ptr @_unbox_Default, ptr @_data_size_any_typ], [0 x ptr] undef }
@nothing_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -3334456163433371378, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @nothing_typ_hashtbl, ptr @nothing_typ_offset_tbl, ptr @_data_size_nothing_typ, ptr @_box_nothing_typ, ptr @_unbox_nothing_typ, ptr @_data_size_nothing_typ], [0 x ptr] undef }
@coroutine_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 7194361020959218064, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @coroutine_typ_hashtbl, ptr @coroutine_typ_offset_tbl, ptr @_data_size_coroutine_typ, ptr @_box_coroutine_typ, ptr @_unbox_coroutine_typ, ptr @_data_size_coroutine_typ], [0 x ptr] undef }
@function_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr @_data_size_function_typ, ptr @_box_function_typ, ptr @_unbox_function_typ, ptr @_data_size_function_typ], [0 x ptr] undef }
@buffer_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -318192747195410237, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @buffer_typ_hashtbl, ptr @buffer_typ_offset_tbl, ptr @_data_size_buffer_typ, ptr @_box_buffer_typ, ptr @_unbox_buffer_typ, ptr @_data_size_buffer_typ], [0 x ptr] undef }
@tuple_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3422634369532007740, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @tuple_typ_hashtbl, ptr @tuple_typ_offset_tbl, ptr @_data_size_tuple_typ, ptr @_box_tuple_typ, ptr @_unbox_tuple_typ, ptr @_data_size_tuple_typ], [0 x ptr] undef }
@union_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr @_data_size_union_typ, ptr @_box_union_typ, ptr @_unbox_union_typ, ptr @_data_size_union_typ], [0 x ptr] undef }
@Object = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr @_data_size_Object, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Pair = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr @_data_size_Pair, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Container = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 9056556090793359372, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Container_hashtbl, ptr @Container_offset_tbl, ptr @_data_size_Container, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterator = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388349, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr @_data_size_Iterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterable = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388477, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr @_data_size_Iterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@MapIterable = constant { [3 x i64], [7 x ptr], [51 x ptr] } { [3 x i64] [i64 -7488770571603291722, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterable_hashtbl, ptr @MapIterable_offset_tbl, ptr @_data_size_MapIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [51 x ptr] [ptr @MapIterable_field_MapIterable_0, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_field_iterable, ptr @MapIterable_field_f, ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_Ptri1, ptr @MapIterable_B_any_fFunctionT_to_Ptri1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_Ptri1, ptr @MapIterable_B_any_fFunctionT_to_Ptri1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@MapIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -146553482626734782, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterator_hashtbl, ptr @MapIterator_offset_tbl, ptr @_data_size_MapIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @MapIterator_field_MapIterator_0, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_field_iterator, ptr @MapIterator_field_f, ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_B_next_, ptr @MapIterator_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_next_, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_B_next_, ptr @MapIterator_next_] }
@FilterIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 8498466713076104350, i64 4611686018427388319, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterable_hashtbl, ptr @FilterIterable_offset_tbl, ptr @_data_size_FilterIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_field_iterable, ptr @FilterIterable_field_f, ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_Ptri1, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_init_iterableIterableT_fFunctionT_to_Ptri1, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@FilterIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -1221365496900303883, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterator_hashtbl, ptr @FilterIterator_offset_tbl, ptr @_data_size_FilterIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_field_iterator, ptr @FilterIterator_field_f, ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_Ptri1, ptr @FilterIterator_B_next_, ptr @FilterIterator_init_iteratorIteratorT_fFunctionT_to_Ptri1, ptr @FilterIterator_next_, ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_B_next_, ptr @FilterIterator_next_] }
@ChainIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 -2370247058431047815, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterable_hashtbl, ptr @ChainIterable_offset_tbl, ptr @_data_size_ChainIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_field_first, ptr @ChainIterable_field_second, ptr @ChainIterable_B_init_firstIterableT_secondIterableT, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_init_firstIterableT_secondIterableT, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ChainIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 6043157723929225452, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterator_hashtbl, ptr @ChainIterator_offset_tbl, ptr @_data_size_ChainIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_field_first, ptr @ChainIterator_field_second, ptr @ChainIterator_field_on_first, ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_B_next_, ptr @ChainIterator_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_next_, ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_B_next_, ptr @ChainIterator_next_] }
@InterleaveIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 4936782714255954462, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterable_hashtbl, ptr @InterleaveIterable_offset_tbl, ptr @_data_size_InterleaveIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_field_first, ptr @InterleaveIterable_field_second, ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@InterleaveIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -3924664358248524505, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterator_hashtbl, ptr @InterleaveIterator_offset_tbl, ptr @_data_size_InterleaveIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_field_first, ptr @InterleaveIterator_field_second, ptr @InterleaveIterator_field_on_first, ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_next_, ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_next_] }
@ZipIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 35232740166152944, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterable_hashtbl, ptr @ZipIterable_offset_tbl, ptr @_data_size_ZipIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ZipIterable_field_ZipIterable_0, ptr @ZipIterable_field_ZipIterable_1, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_field_first, ptr @ZipIterable_field_second, ptr @ZipIterable_B_init_firstIterableT_secondIterableU, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_init_firstIterableT_secondIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ZipIterator = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 -2141114445739585318, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterator_hashtbl, ptr @ZipIterator_offset_tbl, ptr @_data_size_ZipIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ZipIterator_field_ZipIterator_0, ptr @ZipIterator_field_ZipIterator_1, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_field_first, ptr @ZipIterator_field_second, ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_B_next_, ptr @ZipIterator_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_next_, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_B_next_, ptr @ZipIterator_next_] }
@ProductIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 4128338911757318636, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterable_hashtbl, ptr @ProductIterable_offset_tbl, ptr @_data_size_ProductIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ProductIterable_field_ProductIterable_0, ptr @ProductIterable_field_ProductIterable_1, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_field_first, ptr @ProductIterable_field_second, ptr @ProductIterable_B_init_firstIterableT_secondIterableU, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_init_firstIterableT_secondIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ProductIterator = constant { [3 x i64], [7 x ptr], [14 x ptr] } { [3 x i64] [i64 1697250377212095568, i64 4611686018427388157, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterator_hashtbl, ptr @ProductIterator_offset_tbl, ptr @_data_size_ProductIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [14 x ptr] [ptr @ProductIterator_field_ProductIterator_0, ptr @ProductIterator_field_ProductIterator_1, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_field_first_iterator, ptr @ProductIterator_field_second_iterator, ptr @ProductIterator_field_second_iterable, ptr @ProductIterator_field_current_first, ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_B_next_, ptr @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_next_, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_B_next_, ptr @ProductIterator_next_] }
@Representable = constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr @_data_size_Representable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@String = constant { [3 x i64], [7 x ptr], [79 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388601, i64 7], [7 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr @_data_size_String, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [79 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_field_String_0, ptr @String_B__Self_from_c_string_c_stringBufferPtri8, ptr @String_B_init_, ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_c_string_, ptr @String_B_append_xPtri8, ptr @String_B_extend_strString, ptr @String_B__index_xPtri32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_Ptri1, ptr @String_B_any_fFunctionT_to_Ptri1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_Ptri1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_B_repr_, ptr @String__Self_from_c_string_c_stringBufferPtri8, ptr @String_init_, ptr @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_c_string_, ptr @String_append_xPtri8, ptr @String_extend_strString, ptr @String__index_xPtri32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_repr_, ptr @String_field_String_0, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_Ptri1, ptr @String_B_any_fFunctionT_to_Ptri1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_Ptri1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_Ptri1, ptr @Iterable_any_fFunctionT_to_Ptri1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_Ptri1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_B_repr_, ptr @String_repr_] }
@Character = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr @_data_size_Character, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytePtri8, ptr @Character_byte_, ptr @Character_init_bytePtri8] }
@StringIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr @_data_size_StringIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_next_, ptr @StringIterator_next_] }
@Exception = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr @_data_size_Exception, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberPtri32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@IO = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [7 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr @_data_size_IO, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @IO_B__Self_print_xString__Self_print_xPtri1__Self_print_xPtri32__Self_print_xCharacter__Self_print_xRepresentable__Self_print_xPtrf64__Self_print_xNil__Self_print_xPtri64__Self_print_xPtri8, ptr @IO__Self_print_xString, ptr @IO__Self_print_xPtri1, ptr @IO__Self_print_xPtri32, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xPtrf64, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xPtri64, ptr @IO__Self_print_xPtri8] }
@FileSystemError_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @FileSystemError, ptr @Object, ptr @Exception]
@FileSystemError_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 36, i32 23]
@FileSystemError = constant { [3 x i64], [7 x ptr], [26 x ptr] } { [3 x i64] [i64 -4504708879057548074, i64 4611686018427388291, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileSystemError_hashtbl, ptr @FileSystemError_offset_tbl, ptr @_data_size_FileSystemError, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [26 x ptr] [ptr @FileSystemError_field_line_number, ptr @FileSystemError_field_file_name, ptr @FileSystemError_field_message, ptr @FileSystemError_B_init_messageString, ptr @FileSystemError_B_init_, ptr @FileSystemError_B_set_info_line_numberPtri32_file_nameString, ptr @FileSystemError_B_report_, ptr @FileSystemError_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_, ptr @FileSystemError_field_line_number, ptr @FileSystemError_field_file_name, ptr @FileSystemError_field_message, ptr @FileSystemError_B_init_messageString, ptr @FileSystemError_B_init_, ptr @FileSystemError_B_set_info_line_numberPtri32_file_nameString, ptr @FileSystemError_B_report_, ptr @FileSystemError_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@File_hashtbl = constant [4 x ptr] [ptr @File, ptr null, ptr @any_typ, ptr @Object]
@File_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 30]
@File = constant { [3 x i64], [7 x ptr], [20 x ptr] } { [3 x i64] [i64 -2227788838181535664, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @File_hashtbl, ptr @File_offset_tbl, ptr @_data_size_File, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [20 x ptr] [ptr @File_field_name, ptr @File_field_mode, ptr @File_field_handle, ptr @File_field_open, ptr @File_B_init_nameString_modeString, ptr @File_B__set_mode_modeString, ptr @File_B_reopen_, ptr @File_B_close_, ptr @File_B_size_, ptr @File_B_read_, ptr @File_B_read_byte_, ptr @File_B_write_textString, ptr @File_init_nameString_modeString, ptr @File__set_mode_modeString, ptr @File_reopen_, ptr @File_close_, ptr @File_size_, ptr @File_read_, ptr @File_read_byte_, ptr @File_write_textString] }
@FileProcessor_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr null]
@FileProcessor_offset_tbl = constant [4 x i32] [i32 13, i32 10, i32 10, i32 0]
@FileProcessor = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 4146660827496349788, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileProcessor_hashtbl, ptr @FileProcessor_offset_tbl, ptr @_data_size_FileProcessor, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@FileReader_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr @FileReader]
@FileReader_offset_tbl = constant [4 x i32] [i32 18, i32 10, i32 15, i32 10]
@FileReader = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 5641023583277533454, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileReader_hashtbl, ptr @FileReader_offset_tbl, ptr @_data_size_FileReader, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @FileReader_field_FileReader_0, ptr @FileReader_B_init_, ptr @FileReader_B_process_fileFile, ptr @FileReader_init_, ptr @FileReader_process_fileFile, ptr @FileReader_field_FileReader_0, ptr @FileReader_B_process_fileFile, ptr @FileReader_process_fileFile] }
@FileWriter_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr @FileWriter]
@FileWriter_offset_tbl = constant [4 x i32] [i32 19, i32 10, i32 16, i32 10]
@FileWriter = constant { [3 x i64], [7 x ptr], [9 x ptr] } { [3 x i64] [i64 2522433070607690589, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileWriter_hashtbl, ptr @FileWriter_offset_tbl, ptr @_data_size_FileWriter, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [9 x ptr] [ptr @FileWriter_field_text, ptr @FileWriter_field_FileWriter_0, ptr @FileWriter_B_init_textString, ptr @FileWriter_B_process_fileFile, ptr @FileWriter_init_textString, ptr @FileWriter_process_fileFile, ptr @FileWriter_field_FileWriter_0, ptr @FileWriter_B_process_fileFile, ptr @FileWriter_process_fileFile] }
@FileSystem_hashtbl = constant [4 x ptr] [ptr @Object, ptr @FileSystem, ptr @any_typ, ptr null]
@FileSystem_offset_tbl = constant [4 x i32] [i32 17, i32 10, i32 10, i32 0]
@FileSystem = constant { [3 x i64], [7 x ptr], [7 x ptr] } { [3 x i64] [i64 5344209596779946859, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileSystem_hashtbl, ptr @FileSystem_offset_tbl, ptr @_data_size_FileSystem, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [7 x ptr] [ptr @FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT, ptr @FileSystem_B__Self_read_file_file_nameString, ptr @FileSystem_B__Self_write_file_file_nameString_textString, ptr @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T, ptr @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT, ptr @FileSystem__Self_read_file_file_nameString, ptr @FileSystem__Self_write_file_file_nameString_textString] }
@FileSystemError_field_line_number = internal constant { ptr, ptr } { ptr @FileSystemError_getter_line_number, ptr @FileSystemError_setter_line_number }
@FileSystemError_field_file_name = internal constant { ptr, ptr } { ptr @FileSystemError_getter_file_name, ptr @FileSystemError_setter_file_name }
@FileSystemError_field_message = internal constant { ptr, ptr } { ptr @FileSystemError_getter_message, ptr @FileSystemError_setter_message }
@File_field_name = internal constant { ptr, ptr } { ptr @File_getter_name, ptr @File_setter_name }
@File_field_mode = internal constant { ptr, ptr } { ptr @File_getter_mode, ptr @File_setter_mode }
@File_field_handle = internal constant { ptr, ptr } { ptr @File_getter_handle, ptr @File_setter_handle }
@File_field_open = internal constant { ptr, ptr } { ptr @File_getter_open, ptr @File_setter_open }
@FileWriter_field_text = internal constant { ptr, ptr } { ptr @FileWriter_getter_text, ptr @FileWriter_setter_text }
@string_string.113 = internal constant [4 x i8] c"%s\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = linkonce_odr thread_local global [3 x ptr] zeroinitializer
@current_coroutine = linkonce_odr thread_local global ptr null
@always_one = linkonce thread_local global i1 true
@current_ptr = internal thread_local global ptr null

define { i64, i64 } @_data_size_PRNG(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @PRNG_B_init_initial_seedPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 3, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [5 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @PRNG_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 4, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [5 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @PRNG_init_initial_seedPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem3 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %8, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  store ptr %14, ptr %.reg2mem3, align 8
  %15 = load ptr, ptr %13, align 8
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store ptr %15, ptr %.reload6, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  store ptr %20, ptr %.reg2mem, align 8
  %21 = load i32, ptr %19, align 4
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  store i32 %21, ptr %.reload2, align 4
  call void @set_offset(ptr %9, ptr @PRNG)
  %22 = alloca i32, align 4
  store i32 %3, ptr %22, align 4
  %23 = alloca i32, align 4
  store i32 0, ptr %23, align 4
  %24 = load i32, ptr %22, align 4
  %25 = load i32, ptr %23, align 4
  %26 = icmp sle i32 %24, %25
  %27 = alloca i1, align 1
  store i1 %26, ptr %27, align 1
  %28 = load i1, ptr %27, align 1
  br i1 %28, label %29, label %39

29:                                               ; preds = %4
  store i32 1, ptr %5, align 4
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %30 = load ptr, ptr %.reload5, align 8
  %31 = load ptr, ptr %9, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 40, ptr %31)
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %33 = load i32, ptr %.reload1, align 4
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = load i32, ptr %5, align 4
  call void %37(ptr %30, i32 %38) #15
  br label %52

39:                                               ; preds = %4
  store i32 2147483647, ptr %6, align 4
  %40 = load i32, ptr %22, align 4
  %41 = load i32, ptr %6, align 4
  %42 = and i32 %40, %41
  store i32 %42, ptr %7, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %43 = load ptr, ptr %.reload4, align 8
  %44 = load ptr, ptr %9, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 40, ptr %44)
  %.reload = load ptr, ptr %.reg2mem, align 8
  %46 = load i32, ptr %.reload, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load i32, ptr %7, align 4
  call void %50(ptr %43, i32 %51) #15
  br label %52

52:                                               ; preds = %39, %29
  ret void
}

define i32 @PRNG_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @PRNG)
  %18 = alloca i32, align 4
  store i32 1103515245, ptr %18, align 4
  %19 = alloca i32, align 4
  store i32 12345, ptr %19, align 4
  %20 = load ptr, ptr %10, align 8
  %21 = load ptr, ptr %5, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 40, ptr %21)
  %23 = load i32, ptr %16, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %20) #16
  %29 = alloca i32, align 4
  store i32 %28, ptr %29, align 4
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %18, align 4
  %32 = mul i32 %30, %31
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = load i32, ptr %33, align 4
  %35 = load i32, ptr %19, align 4
  %36 = add i32 %34, %35
  %37 = alloca i32, align 4
  store i32 %36, ptr %37, align 4
  %38 = alloca i32, align 4
  store i32 2147483647, ptr %38, align 4
  %39 = load i32, ptr %37, align 4
  %40 = load i32, ptr %38, align 4
  %41 = and i32 %39, %40
  %42 = alloca i32, align 4
  store i32 %41, ptr %42, align 4
  %43 = load ptr, ptr %10, align 8
  %44 = load ptr, ptr %5, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 40, ptr %44)
  %46 = load i32, ptr %16, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load i32, ptr %42, align 4
  call void %50(ptr %43, i32 %51) #15
  %52 = load ptr, ptr %10, align 8
  %53 = load ptr, ptr %5, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 40, ptr %53)
  %55 = load i32, ptr %16, align 4
  %56 = getelementptr ptr, ptr %53, i32 %55
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = call i32 %59(ptr %52) #16
  %61 = alloca i32, align 4
  store i32 %60, ptr %61, align 4
  %62 = load i32, ptr %61, align 4
  ret i32 %62
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #0

define i32 @PRNG_getter_seed(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @PRNG_setter_seed(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define i1 @wgpehabsqq(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i1 %0(i32 %12, i32 %13)
  %15 = alloca i1, align 1
  store i1 %14, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  ret i1 %16
}

define i32 @jytlqghthm(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  ret i32 %10
}

define i1 @vzdjjwynyr(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i1 %0(i32 %12, i32 %13)
  %15 = alloca i1, align 1
  store i1 %14, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  ret i1 %16
}

define i32 @pycmovwgqt(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  ret i32 %10
}

define i1 @thuccbiyie(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i1 %0(i32 %12, i32 %13)
  %15 = alloca i1, align 1
  store i1 %14, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  ret i1 %16
}

define i32 @mfvrojumog(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  ret i32 %10
}

define i1 @vwrhczetrx(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i1 %0(i32 %12, i32 %13)
  %15 = alloca i1, align 1
  store i1 %14, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  ret i1 %16
}

define i32 @lystgjlake(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  ret i32 %10
}

define i1 @afcwmpmbdj(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i1 %0(i32 %12, i32 %13)
  %15 = alloca i1, align 1
  store i1 %14, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  ret i1 %16
}

define i32 @cjkjdjoefc(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  ret i32 %10
}

define i1 @cpgcncwmpd(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i1 %0(i32 %12, i32 %13)
  %15 = alloca i1, align 1
  store i1 %14, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  ret i1 %16
}

define i32 @dwgqcbbuns(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  ret i32 %10
}

define i1 @krjmirxnlg(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i1 %0(i32 %12, i32 %13)
  %15 = alloca i1, align 1
  store i1 %14, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  ret i1 %16
}

define i32 @svlbjxscwh(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  ret i32 %10
}

define i1 @sabllqfhim(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i1 %0(i32 %12, i32 %13)
  %15 = alloca i1, align 1
  store i1 %14, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  ret i1 %16
}

define i32 @nyirajlwbb(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  ret i32 %10
}

define i1 @uzenkwklxl(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i1 %0(i32 %12, i32 %13)
  %15 = alloca i1, align 1
  store i1 %14, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  ret i1 %16
}

define i32 @sztlnbvhek(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  ret i32 %10
}

define i1 @bnwmaetavp(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %8 = load i32, ptr %7, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %9, align 4
  %14 = call i1 %0(i32 %12, i32 %13)
  %15 = alloca i1, align 1
  store i1 %14, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  ret i1 %16
}

define i32 @rabbojnpqi(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 %0(i32 %7)
  %9 = alloca i32, align 4
  store i32 %8, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  ret i32 %10
}

define void @print_benchmark_result({ ptr, ptr, ptr, i32 } %0, i32 %1, i64 %2) {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = alloca i64, align 8
  %10 = alloca i1, align 1
  %11 = alloca i1, align 1
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca [1 x ptr], align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca [3 x ptr], align 8
  %26 = alloca { ptr, ptr, ptr }, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca { ptr }, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = alloca [1 x ptr], align 8
  %32 = alloca { ptr }, align 8
  %33 = alloca i32, align 4
  %34 = alloca ptr, align 8
  %35 = alloca ptr, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca [1 x ptr], align 8
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca [3 x ptr], align 8
  %44 = alloca { ptr, ptr, ptr }, align 8
  %45 = alloca [1 x ptr], align 8
  %46 = alloca { ptr }, align 8
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %47, align 8
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %60 = load i32, ptr %58, align 4
  store i32 %60, ptr %59, align 4
  call void @set_offset(ptr %48, ptr @String)
  %61 = alloca i32, align 4
  store i32 %1, ptr %61, align 4
  %62 = alloca i64, align 8
  store i64 %2, ptr %62, align 4
  %63 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 0
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, i160 } undef, ptr %64, 0
  %66 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 1
  %67 = load i160, ptr %66, align 4
  %68 = insertvalue { ptr, i160 } %65, i160 %67, 1
  %69 = alloca [1 x ptr], align 8
  %70 = getelementptr [1 x ptr], ptr %69, i32 0, i32 0
  store ptr @_parameterization_String, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 1, ptr %69)
  %72 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %73 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %74 = alloca { ptr }, align 8
  %75 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  store ptr %64, ptr %75, align 8
  %76 = call ptr @class_behavior_wrapper(ptr %73, ptr %74)
  call void %76(ptr %69, { ptr, i160 } %68) #17
  %77 = alloca i32, align 4
  store i32 15, ptr %77, align 4
  %78 = load i32, ptr %77, align 4
  %79 = sext i32 %78 to i64
  %80 = alloca ptr, align 8
  %81 = mul i64 %79, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %82 = call ptr @bump_malloc(i64 %81)
  store ptr %82, ptr %80, align 8
  %83 = alloca ptr, align 8
  %84 = getelementptr { ptr }, ptr %80, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  store ptr %85, ptr %83, align 8
  %86 = alloca i32, align 4
  store i32 0, ptr %86, align 4
  %87 = load ptr, ptr %83, align 8
  %88 = load i32, ptr %86, align 4
  %89 = sext i32 %88 to i64
  %90 = mul i64 ptrtoint (ptr getelementptr ([14 x i8], ptr null, i32 1) to i64), %89
  %91 = getelementptr i8, ptr %87, i64 %90
  %92 = load <14 x i8>, ptr @mhwio___Operations_, align 16
  store <14 x i8> %92, ptr %91, align 16
  %93 = alloca i32, align 4
  store i32 14, ptr %93, align 4
  %94 = alloca i32, align 4
  store i32 15, ptr %94, align 4
  %95 = alloca [1 x ptr], align 8
  store ptr @String, ptr %95, align 8
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr ptr, ptr %96, i32 6
  %98 = load ptr, ptr %97, align 8
  %99 = call { i64, i64 } @size_wrapper(ptr %98, ptr %95)
  %100 = extractvalue { i64, i64 } %99, 0
  %101 = call ptr @bump_malloc(i64 %100)
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  store ptr @String, ptr %102, align 8
  store ptr %101, ptr %103, align 8
  store i32 10, ptr %104, align 4
  %105 = alloca i32, align 4
  store i32 14, ptr %105, align 4
  %106 = alloca i32, align 4
  store i32 15, ptr %106, align 4
  %107 = load ptr, ptr %83, align 8
  %108 = insertvalue { ptr } undef, ptr %107, 0
  %109 = load i32, ptr %105, align 4
  %110 = load i32, ptr %106, align 4
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = load ptr, ptr %103, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = load i32, ptr %104, align 4
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %119, 3
  %121 = alloca [3 x ptr], align 8
  %122 = getelementptr [3 x ptr], ptr %121, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %122, align 8
  %123 = getelementptr [3 x ptr], ptr %121, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %124 = getelementptr [3 x ptr], ptr %121, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 9, ptr %121)
  %126 = call ptr @llvm.invariant.start.p0(i64 632, ptr %112)
  %127 = getelementptr ptr, ptr %112, i32 %119
  %128 = getelementptr ptr, ptr %127, i32 6
  %129 = load ptr, ptr %128, align 8
  %130 = alloca { ptr, ptr, ptr }, align 8
  %131 = getelementptr { ptr, ptr, ptr }, ptr %130, i32 0, i32 0
  store ptr @buffer_typ, ptr %131, align 8
  %132 = getelementptr { ptr, ptr, ptr }, ptr %130, i32 0, i32 1
  store ptr @i32_typ, ptr %132, align 8
  %133 = getelementptr { ptr, ptr, ptr }, ptr %130, i32 0, i32 2
  store ptr @i32_typ, ptr %133, align 8
  %134 = call ptr @behavior_wrapper(ptr %129, { ptr, ptr, ptr, i32 } %120, ptr %130)
  call void %134({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr %121, { ptr } %108, i32 %109, i32 %110) #17
  %135 = getelementptr { ptr, i160 }, ptr %102, i32 0, i32 0
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, i160 } undef, ptr %136, 0
  %138 = getelementptr { ptr, i160 }, ptr %102, i32 0, i32 1
  %139 = load i160, ptr %138, align 4
  %140 = insertvalue { ptr, i160 } %137, i160 %139, 1
  %141 = alloca [1 x ptr], align 8
  %142 = getelementptr [1 x ptr], ptr %141, i32 0, i32 0
  store ptr @_parameterization_String, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 1, ptr %141)
  %144 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %145 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %146 = alloca { ptr }, align 8
  %147 = getelementptr { ptr }, ptr %146, i32 0, i32 0
  store ptr %136, ptr %147, align 8
  %148 = call ptr @class_behavior_wrapper(ptr %145, ptr %146)
  call void %148(ptr %141, { ptr, i160 } %140) #17
  %149 = alloca i160, align 8
  %150 = alloca ptr, align 8
  %151 = load i32, ptr %61, align 4
  store i32 %151, ptr %149, align 4
  store ptr @i32_typ, ptr %150, align 8
  %152 = load ptr, ptr %150, align 8
  %153 = insertvalue { ptr, i160 } undef, ptr %152, 0
  %154 = load i160, ptr %149, align 4
  %155 = insertvalue { ptr, i160 } %153, i160 %154, 1
  %156 = alloca [1 x ptr], align 8
  %157 = getelementptr [1 x ptr], ptr %156, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %157, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 1, ptr %156)
  %159 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %160 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %161 = alloca { ptr }, align 8
  %162 = getelementptr { ptr }, ptr %161, i32 0, i32 0
  store ptr %152, ptr %162, align 8
  %163 = call ptr @class_behavior_wrapper(ptr %160, ptr %161)
  call void %163(ptr %156, { ptr, i160 } %155) #17
  %164 = alloca i32, align 4
  store i32 15, ptr %164, align 4
  %165 = load i32, ptr %164, align 4
  %166 = sext i32 %165 to i64
  %167 = alloca ptr, align 8
  %168 = mul i64 %166, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %169 = call ptr @bump_malloc(i64 %168)
  store ptr %169, ptr %167, align 8
  %170 = alloca ptr, align 8
  %171 = getelementptr { ptr }, ptr %167, i32 0, i32 0
  %172 = load ptr, ptr %171, align 8
  store ptr %172, ptr %170, align 8
  %173 = alloca i32, align 4
  store i32 0, ptr %173, align 4
  %174 = load ptr, ptr %170, align 8
  %175 = load i32, ptr %173, align 4
  %176 = sext i32 %175 to i64
  %177 = mul i64 ptrtoint (ptr getelementptr ([14 x i8], ptr null, i32 1) to i64), %176
  %178 = getelementptr i8, ptr %174, i64 %177
  %179 = load <14 x i8>, ptr @gzkyq___Total_Time_, align 16
  store <14 x i8> %179, ptr %178, align 16
  %180 = alloca i32, align 4
  store i32 14, ptr %180, align 4
  %181 = alloca i32, align 4
  store i32 15, ptr %181, align 4
  %182 = alloca [1 x ptr], align 8
  store ptr @String, ptr %182, align 8
  %183 = load ptr, ptr %182, align 8
  %184 = getelementptr ptr, ptr %183, i32 6
  %185 = load ptr, ptr %184, align 8
  %186 = call { i64, i64 } @size_wrapper(ptr %185, ptr %182)
  %187 = extractvalue { i64, i64 } %186, 0
  %188 = call ptr @bump_malloc(i64 %187)
  %189 = alloca { ptr, ptr, ptr, i32 }, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %189, i32 0, i32 1
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %189, i32 0, i32 3
  store ptr @String, ptr %189, align 8
  store ptr %188, ptr %190, align 8
  store i32 10, ptr %191, align 4
  %192 = alloca i32, align 4
  store i32 14, ptr %192, align 4
  %193 = alloca i32, align 4
  store i32 15, ptr %193, align 4
  %194 = load ptr, ptr %170, align 8
  %195 = insertvalue { ptr } undef, ptr %194, 0
  %196 = load i32, ptr %192, align 4
  %197 = load i32, ptr %193, align 4
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %189, i32 0, i32 0
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %199, 0
  %201 = load ptr, ptr %190, align 8
  %202 = insertvalue { ptr, ptr, ptr, i32 } %200, ptr %201, 1
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %189, i32 0, i32 2
  %204 = load ptr, ptr %203, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } %202, ptr %204, 2
  %206 = load i32, ptr %191, align 4
  %207 = insertvalue { ptr, ptr, ptr, i32 } %205, i32 %206, 3
  %208 = alloca [3 x ptr], align 8
  %209 = getelementptr [3 x ptr], ptr %208, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %209, align 8
  %210 = getelementptr [3 x ptr], ptr %208, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %210, align 8
  %211 = getelementptr [3 x ptr], ptr %208, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %211, align 8
  %212 = call ptr @llvm.invariant.start.p0(i64 9, ptr %208)
  %213 = call ptr @llvm.invariant.start.p0(i64 632, ptr %199)
  %214 = getelementptr ptr, ptr %199, i32 %206
  %215 = getelementptr ptr, ptr %214, i32 6
  %216 = load ptr, ptr %215, align 8
  %217 = alloca { ptr, ptr, ptr }, align 8
  %218 = getelementptr { ptr, ptr, ptr }, ptr %217, i32 0, i32 0
  store ptr @buffer_typ, ptr %218, align 8
  %219 = getelementptr { ptr, ptr, ptr }, ptr %217, i32 0, i32 1
  store ptr @i32_typ, ptr %219, align 8
  %220 = getelementptr { ptr, ptr, ptr }, ptr %217, i32 0, i32 2
  store ptr @i32_typ, ptr %220, align 8
  %221 = call ptr @behavior_wrapper(ptr %216, { ptr, ptr, ptr, i32 } %207, ptr %217)
  call void %221({ ptr, ptr, ptr, i32 } %207, { ptr, ptr, ptr, i32 } %207, ptr %208, { ptr } %195, i32 %196, i32 %197) #17
  %222 = getelementptr { ptr, i160 }, ptr %189, i32 0, i32 0
  %223 = load ptr, ptr %222, align 8
  %224 = insertvalue { ptr, i160 } undef, ptr %223, 0
  %225 = getelementptr { ptr, i160 }, ptr %189, i32 0, i32 1
  %226 = load i160, ptr %225, align 4
  %227 = insertvalue { ptr, i160 } %224, i160 %226, 1
  %228 = alloca [1 x ptr], align 8
  %229 = getelementptr [1 x ptr], ptr %228, i32 0, i32 0
  store ptr @_parameterization_String, ptr %229, align 8
  %230 = call ptr @llvm.invariant.start.p0(i64 1, ptr %228)
  %231 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %232 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %233 = alloca { ptr }, align 8
  %234 = getelementptr { ptr }, ptr %233, i32 0, i32 0
  store ptr %223, ptr %234, align 8
  %235 = call ptr @class_behavior_wrapper(ptr %232, ptr %233)
  call void %235(ptr %228, { ptr, i160 } %227) #17
  %236 = alloca i160, align 8
  %237 = alloca ptr, align 8
  %238 = load i64, ptr %62, align 4
  store i64 %238, ptr %236, align 4
  store ptr @i64_typ, ptr %237, align 8
  %239 = load ptr, ptr %237, align 8
  %240 = insertvalue { ptr, i160 } undef, ptr %239, 0
  %241 = load i160, ptr %236, align 4
  %242 = insertvalue { ptr, i160 } %240, i160 %241, 1
  %243 = alloca [1 x ptr], align 8
  %244 = getelementptr [1 x ptr], ptr %243, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %244, align 8
  %245 = call ptr @llvm.invariant.start.p0(i64 1, ptr %243)
  %246 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %247 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %248 = alloca { ptr }, align 8
  %249 = getelementptr { ptr }, ptr %248, i32 0, i32 0
  store ptr %239, ptr %249, align 8
  %250 = call ptr @class_behavior_wrapper(ptr %247, ptr %248)
  call void %250(ptr %243, { ptr, i160 } %242) #17
  %251 = alloca i32, align 4
  store i32 4, ptr %251, align 4
  %252 = load i32, ptr %251, align 4
  %253 = sext i32 %252 to i64
  %254 = alloca ptr, align 8
  %255 = mul i64 %253, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %256 = call ptr @bump_malloc(i64 %255)
  store ptr %256, ptr %254, align 8
  %257 = alloca ptr, align 8
  %258 = getelementptr { ptr }, ptr %254, i32 0, i32 0
  %259 = load ptr, ptr %258, align 8
  store ptr %259, ptr %257, align 8
  %260 = alloca i32, align 4
  store i32 0, ptr %260, align 4
  %261 = load ptr, ptr %257, align 8
  %262 = load i32, ptr %260, align 4
  %263 = sext i32 %262 to i64
  %264 = mul i64 ptrtoint (ptr getelementptr ([3 x i8], ptr null, i32 1) to i64), %263
  %265 = getelementptr i8, ptr %261, i64 %264
  %266 = load <3 x i8>, ptr @rycbv__ms, align 4
  store <3 x i8> %266, ptr %265, align 4
  %267 = alloca i32, align 4
  store i32 3, ptr %267, align 4
  %268 = alloca i32, align 4
  store i32 4, ptr %268, align 4
  %269 = alloca [1 x ptr], align 8
  store ptr @String, ptr %269, align 8
  %270 = load ptr, ptr %269, align 8
  %271 = getelementptr ptr, ptr %270, i32 6
  %272 = load ptr, ptr %271, align 8
  %273 = call { i64, i64 } @size_wrapper(ptr %272, ptr %269)
  %274 = extractvalue { i64, i64 } %273, 0
  %275 = call ptr @bump_malloc(i64 %274)
  %276 = alloca { ptr, ptr, ptr, i32 }, align 8
  %277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %276, i32 0, i32 1
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %276, i32 0, i32 3
  store ptr @String, ptr %276, align 8
  store ptr %275, ptr %277, align 8
  store i32 10, ptr %278, align 4
  %279 = alloca i32, align 4
  store i32 3, ptr %279, align 4
  %280 = alloca i32, align 4
  store i32 4, ptr %280, align 4
  %281 = load ptr, ptr %257, align 8
  %282 = insertvalue { ptr } undef, ptr %281, 0
  %283 = load i32, ptr %279, align 4
  %284 = load i32, ptr %280, align 4
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %276, i32 0, i32 0
  %286 = load ptr, ptr %285, align 8
  %287 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %286, 0
  %288 = load ptr, ptr %277, align 8
  %289 = insertvalue { ptr, ptr, ptr, i32 } %287, ptr %288, 1
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %276, i32 0, i32 2
  %291 = load ptr, ptr %290, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } %289, ptr %291, 2
  %293 = load i32, ptr %278, align 4
  %294 = insertvalue { ptr, ptr, ptr, i32 } %292, i32 %293, 3
  %295 = alloca [3 x ptr], align 8
  %296 = getelementptr [3 x ptr], ptr %295, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %296, align 8
  %297 = getelementptr [3 x ptr], ptr %295, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %297, align 8
  %298 = getelementptr [3 x ptr], ptr %295, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %298, align 8
  %299 = call ptr @llvm.invariant.start.p0(i64 9, ptr %295)
  %300 = call ptr @llvm.invariant.start.p0(i64 632, ptr %286)
  %301 = getelementptr ptr, ptr %286, i32 %293
  %302 = getelementptr ptr, ptr %301, i32 6
  %303 = load ptr, ptr %302, align 8
  %304 = alloca { ptr, ptr, ptr }, align 8
  %305 = getelementptr { ptr, ptr, ptr }, ptr %304, i32 0, i32 0
  store ptr @buffer_typ, ptr %305, align 8
  %306 = getelementptr { ptr, ptr, ptr }, ptr %304, i32 0, i32 1
  store ptr @i32_typ, ptr %306, align 8
  %307 = getelementptr { ptr, ptr, ptr }, ptr %304, i32 0, i32 2
  store ptr @i32_typ, ptr %307, align 8
  %308 = call ptr @behavior_wrapper(ptr %303, { ptr, ptr, ptr, i32 } %294, ptr %304)
  call void %308({ ptr, ptr, ptr, i32 } %294, { ptr, ptr, ptr, i32 } %294, ptr %295, { ptr } %282, i32 %283, i32 %284) #17
  %309 = getelementptr { ptr, i160 }, ptr %276, i32 0, i32 0
  %310 = load ptr, ptr %309, align 8
  %311 = insertvalue { ptr, i160 } undef, ptr %310, 0
  %312 = getelementptr { ptr, i160 }, ptr %276, i32 0, i32 1
  %313 = load i160, ptr %312, align 4
  %314 = insertvalue { ptr, i160 } %311, i160 %313, 1
  %315 = alloca [1 x ptr], align 8
  %316 = getelementptr [1 x ptr], ptr %315, i32 0, i32 0
  store ptr @_parameterization_String, ptr %316, align 8
  %317 = call ptr @llvm.invariant.start.p0(i64 1, ptr %315)
  %318 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %319 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %320 = alloca { ptr }, align 8
  %321 = getelementptr { ptr }, ptr %320, i32 0, i32 0
  store ptr %310, ptr %321, align 8
  %322 = call ptr @class_behavior_wrapper(ptr %319, ptr %320)
  call void %322(ptr %315, { ptr, i160 } %314) #17
  %323 = alloca i32, align 4
  store i32 0, ptr %323, align 4
  %324 = load i32, ptr %61, align 4
  %325 = load i32, ptr %323, align 4
  %326 = icmp sgt i32 %324, %325
  %327 = alloca i1, align 1
  store i1 %326, ptr %327, align 1
  %328 = load i1, ptr %327, align 1
  br i1 %328, label %329, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %482

329:                                              ; preds = %3
  store i64 0, ptr %4, align 4
  store i64 0, ptr %5, align 4
  store i64 1000000, ptr %6, align 4
  %330 = load i64, ptr %62, align 4
  %331 = load i64, ptr %5, align 4
  %332 = icmp sgt i64 %330, %331
  store i1 %332, ptr %7, align 1
  %333 = load i1, ptr %7, align 1
  store i1 %333, ptr %8, align 1
  br i1 %333, label %334, label %._crit_edge1

._crit_edge1:                                     ; preds = %329
  br label %341

334:                                              ; preds = %329
  %335 = load i32, ptr %61, align 4
  %336 = sext i32 %335 to i64
  store i64 %336, ptr %9, align 4
  %337 = load i64, ptr %9, align 4
  %338 = load i64, ptr %5, align 4
  %339 = icmp sgt i64 %337, %338
  store i1 %339, ptr %10, align 1
  %340 = load i1, ptr %10, align 1
  store i1 %340, ptr %8, align 1
  br label %341

341:                                              ; preds = %._crit_edge1, %334
  %342 = load i1, ptr %8, align 1
  store i1 %342, ptr %11, align 1
  %343 = load i1, ptr %11, align 1
  br i1 %343, label %344, label %._crit_edge2

._crit_edge2:                                     ; preds = %341
  br label %354

344:                                              ; preds = %341
  %345 = load i64, ptr %62, align 4
  %346 = load i64, ptr %6, align 4
  %347 = mul i64 %345, %346
  store i64 %347, ptr %12, align 4
  %348 = load i32, ptr %61, align 4
  %349 = sext i32 %348 to i64
  store i64 %349, ptr %13, align 4
  %350 = load i64, ptr %12, align 4
  %351 = load i64, ptr %13, align 4
  %352 = sdiv i64 %350, %351
  store i64 %352, ptr %14, align 4
  %353 = load i64, ptr %14, align 4
  store i64 %353, ptr %4, align 4
  br label %354

354:                                              ; preds = %._crit_edge2, %344
  store i32 16, ptr %15, align 4
  %355 = load i32, ptr %15, align 4
  %356 = sext i32 %355 to i64
  %357 = mul i64 %356, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %358 = call ptr @bump_malloc(i64 %357)
  store ptr %358, ptr %16, align 8
  %359 = getelementptr { ptr }, ptr %16, i32 0, i32 0
  %360 = load ptr, ptr %359, align 8
  store ptr %360, ptr %17, align 8
  store i32 0, ptr %18, align 4
  %361 = load ptr, ptr %17, align 8
  %362 = load i32, ptr %18, align 4
  %363 = sext i32 %362 to i64
  %364 = mul i64 ptrtoint (ptr getelementptr ([15 x i8], ptr null, i32 1) to i64), %363
  %365 = getelementptr i8, ptr %361, i64 %364
  %366 = load <15 x i8>, ptr @rjxdt___TimeOp____, align 16
  store <15 x i8> %366, ptr %365, align 16
  store i32 15, ptr %19, align 4
  store i32 16, ptr %20, align 4
  store ptr @String, ptr %21, align 8
  %367 = load ptr, ptr %21, align 8
  %368 = getelementptr ptr, ptr %367, i32 6
  %369 = load ptr, ptr %368, align 8
  %370 = call { i64, i64 } @size_wrapper(ptr %369, ptr %21)
  %371 = extractvalue { i64, i64 } %370, 0
  %372 = call ptr @bump_malloc(i64 %371)
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  store ptr @String, ptr %22, align 8
  store ptr %372, ptr %373, align 8
  store i32 10, ptr %374, align 4
  store i32 15, ptr %23, align 4
  store i32 16, ptr %24, align 4
  %375 = load ptr, ptr %17, align 8
  %376 = insertvalue { ptr } undef, ptr %375, 0
  %377 = load i32, ptr %23, align 4
  %378 = load i32, ptr %24, align 4
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %380 = load ptr, ptr %379, align 8
  %381 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %380, 0
  %382 = load ptr, ptr %373, align 8
  %383 = insertvalue { ptr, ptr, ptr, i32 } %381, ptr %382, 1
  %384 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %385 = load ptr, ptr %384, align 8
  %386 = insertvalue { ptr, ptr, ptr, i32 } %383, ptr %385, 2
  %387 = load i32, ptr %374, align 4
  %388 = insertvalue { ptr, ptr, ptr, i32 } %386, i32 %387, 3
  %389 = getelementptr [3 x ptr], ptr %25, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %389, align 8
  %390 = getelementptr [3 x ptr], ptr %25, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %390, align 8
  %391 = getelementptr [3 x ptr], ptr %25, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %391, align 8
  %392 = call ptr @llvm.invariant.start.p0(i64 9, ptr %25)
  %393 = call ptr @llvm.invariant.start.p0(i64 632, ptr %380)
  %394 = getelementptr ptr, ptr %380, i32 %387
  %395 = getelementptr ptr, ptr %394, i32 6
  %396 = load ptr, ptr %395, align 8
  %397 = getelementptr { ptr, ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr @buffer_typ, ptr %397, align 8
  %398 = getelementptr { ptr, ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr @i32_typ, ptr %398, align 8
  %399 = getelementptr { ptr, ptr, ptr }, ptr %26, i32 0, i32 2
  store ptr @i32_typ, ptr %399, align 8
  %400 = call ptr @behavior_wrapper(ptr %396, { ptr, ptr, ptr, i32 } %388, ptr %26)
  call void %400({ ptr, ptr, ptr, i32 } %388, { ptr, ptr, ptr, i32 } %388, ptr %25, { ptr } %376, i32 %377, i32 %378) #17
  %401 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 0
  %402 = load ptr, ptr %401, align 8
  %403 = insertvalue { ptr, i160 } undef, ptr %402, 0
  %404 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %405 = load i160, ptr %404, align 4
  %406 = insertvalue { ptr, i160 } %403, i160 %405, 1
  %407 = getelementptr [1 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_String, ptr %407, align 8
  %408 = call ptr @llvm.invariant.start.p0(i64 1, ptr %27)
  %409 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %410 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %411 = getelementptr { ptr }, ptr %28, i32 0, i32 0
  store ptr %402, ptr %411, align 8
  %412 = call ptr @class_behavior_wrapper(ptr %410, ptr %28)
  call void %412(ptr %27, { ptr, i160 } %406) #17
  %413 = load i64, ptr %4, align 4
  store i64 %413, ptr %29, align 4
  store ptr @i64_typ, ptr %30, align 8
  %414 = load ptr, ptr %30, align 8
  %415 = insertvalue { ptr, i160 } undef, ptr %414, 0
  %416 = load i160, ptr %29, align 4
  %417 = insertvalue { ptr, i160 } %415, i160 %416, 1
  %418 = getelementptr [1 x ptr], ptr %31, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %418, align 8
  %419 = call ptr @llvm.invariant.start.p0(i64 1, ptr %31)
  %420 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %421 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %422 = getelementptr { ptr }, ptr %32, i32 0, i32 0
  store ptr %414, ptr %422, align 8
  %423 = call ptr @class_behavior_wrapper(ptr %421, ptr %32)
  call void %423(ptr %31, { ptr, i160 } %417) #17
  store i32 4, ptr %33, align 4
  %424 = load i32, ptr %33, align 4
  %425 = sext i32 %424 to i64
  %426 = mul i64 %425, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %427 = call ptr @bump_malloc(i64 %426)
  store ptr %427, ptr %34, align 8
  %428 = getelementptr { ptr }, ptr %34, i32 0, i32 0
  %429 = load ptr, ptr %428, align 8
  store ptr %429, ptr %35, align 8
  store i32 0, ptr %36, align 4
  %430 = load ptr, ptr %35, align 8
  %431 = load i32, ptr %36, align 4
  %432 = sext i32 %431 to i64
  %433 = mul i64 ptrtoint (ptr getelementptr ([3 x i8], ptr null, i32 1) to i64), %432
  %434 = getelementptr i8, ptr %430, i64 %433
  %435 = load <3 x i8>, ptr @dlhez__ns, align 4
  store <3 x i8> %435, ptr %434, align 4
  store i32 3, ptr %37, align 4
  store i32 4, ptr %38, align 4
  store ptr @String, ptr %39, align 8
  %436 = load ptr, ptr %39, align 8
  %437 = getelementptr ptr, ptr %436, i32 6
  %438 = load ptr, ptr %437, align 8
  %439 = call { i64, i64 } @size_wrapper(ptr %438, ptr %39)
  %440 = extractvalue { i64, i64 } %439, 0
  %441 = call ptr @bump_malloc(i64 %440)
  %442 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %443 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  store ptr @String, ptr %40, align 8
  store ptr %441, ptr %442, align 8
  store i32 10, ptr %443, align 4
  store i32 3, ptr %41, align 4
  store i32 4, ptr %42, align 4
  %444 = load ptr, ptr %35, align 8
  %445 = insertvalue { ptr } undef, ptr %444, 0
  %446 = load i32, ptr %41, align 4
  %447 = load i32, ptr %42, align 4
  %448 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %449 = load ptr, ptr %448, align 8
  %450 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %449, 0
  %451 = load ptr, ptr %442, align 8
  %452 = insertvalue { ptr, ptr, ptr, i32 } %450, ptr %451, 1
  %453 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %454 = load ptr, ptr %453, align 8
  %455 = insertvalue { ptr, ptr, ptr, i32 } %452, ptr %454, 2
  %456 = load i32, ptr %443, align 4
  %457 = insertvalue { ptr, ptr, ptr, i32 } %455, i32 %456, 3
  %458 = getelementptr [3 x ptr], ptr %43, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %458, align 8
  %459 = getelementptr [3 x ptr], ptr %43, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %459, align 8
  %460 = getelementptr [3 x ptr], ptr %43, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %460, align 8
  %461 = call ptr @llvm.invariant.start.p0(i64 9, ptr %43)
  %462 = call ptr @llvm.invariant.start.p0(i64 632, ptr %449)
  %463 = getelementptr ptr, ptr %449, i32 %456
  %464 = getelementptr ptr, ptr %463, i32 6
  %465 = load ptr, ptr %464, align 8
  %466 = getelementptr { ptr, ptr, ptr }, ptr %44, i32 0, i32 0
  store ptr @buffer_typ, ptr %466, align 8
  %467 = getelementptr { ptr, ptr, ptr }, ptr %44, i32 0, i32 1
  store ptr @i32_typ, ptr %467, align 8
  %468 = getelementptr { ptr, ptr, ptr }, ptr %44, i32 0, i32 2
  store ptr @i32_typ, ptr %468, align 8
  %469 = call ptr @behavior_wrapper(ptr %465, { ptr, ptr, ptr, i32 } %457, ptr %44)
  call void %469({ ptr, ptr, ptr, i32 } %457, { ptr, ptr, ptr, i32 } %457, ptr %43, { ptr } %445, i32 %446, i32 %447) #17
  %470 = getelementptr { ptr, i160 }, ptr %40, i32 0, i32 0
  %471 = load ptr, ptr %470, align 8
  %472 = insertvalue { ptr, i160 } undef, ptr %471, 0
  %473 = getelementptr { ptr, i160 }, ptr %40, i32 0, i32 1
  %474 = load i160, ptr %473, align 4
  %475 = insertvalue { ptr, i160 } %472, i160 %474, 1
  %476 = getelementptr [1 x ptr], ptr %45, i32 0, i32 0
  store ptr @_parameterization_String, ptr %476, align 8
  %477 = call ptr @llvm.invariant.start.p0(i64 1, ptr %45)
  %478 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %479 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %480 = getelementptr { ptr }, ptr %46, i32 0, i32 0
  store ptr %471, ptr %480, align 8
  %481 = call ptr @class_behavior_wrapper(ptr %479, ptr %46)
  call void %481(ptr %45, { ptr, i160 } %475) #17
  br label %482

482:                                              ; preds = %._crit_edge, %354
  ret void
}

define void @benchmark_insert_sequential(i32 %0) {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca [2 x ptr], align 8
  %10 = alloca { ptr, ptr }, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i1, align 1
  %15 = alloca i32, align 4
  %16 = alloca i1, align 1
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca [1 x ptr], align 8
  %22 = alloca { ptr }, align 8
  %23 = alloca { ptr, i160 }, align 8
  %24 = alloca i32, align 4
  %25 = alloca ptr, align 8
  %26 = alloca i1, align 1
  %27 = alloca [0 x i8], align 1
  %28 = alloca i1, align 1
  %29 = alloca i32, align 4
  %30 = alloca ptr, align 8
  %31 = alloca i1, align 1
  %32 = alloca i32, align 4
  %33 = alloca i1, align 1
  %34 = alloca i1, align 1
  %35 = alloca i32, align 4
  %36 = alloca ptr, align 8
  %37 = alloca i1, align 1
  %38 = alloca i1, align 1
  %39 = alloca i1, align 1
  %40 = alloca i1, align 1
  %41 = alloca [0 x ptr], align 8
  %42 = alloca {}, align 8
  %43 = alloca i32, align 4
  %44 = alloca i1, align 1
  %45 = alloca i1, align 1
  %46 = alloca [0 x ptr], align 8
  %47 = alloca {}, align 8
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i1, align 1
  %51 = alloca i1, align 1
  %52 = alloca i32, align 4
  %53 = alloca ptr, align 8
  %54 = alloca ptr, align 8
  %55 = alloca i32, align 4
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %58 = alloca [1 x ptr], align 8
  %59 = alloca i32, align 4
  %60 = alloca ptr, align 8
  %61 = alloca ptr, align 8
  %62 = alloca ptr, align 8
  %63 = alloca i32, align 4
  %64 = alloca i32, align 4
  %65 = alloca [3 x ptr], align 8
  %66 = alloca { ptr, ptr, ptr }, align 8
  %67 = alloca i64, align 8
  %68 = alloca i32, align 4
  %69 = alloca ptr, align 8
  %70 = alloca ptr, align 8
  %71 = alloca i32, align 4
  %72 = alloca i32, align 4
  %73 = alloca i32, align 4
  %74 = alloca [1 x ptr], align 8
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = alloca i32, align 4
  %77 = alloca i32, align 4
  %78 = alloca [3 x ptr], align 8
  %79 = alloca { ptr, ptr, ptr }, align 8
  %80 = alloca [1 x ptr], align 8
  %81 = alloca { ptr }, align 8
  %82 = alloca i32, align 4
  %83 = alloca ptr, align 8
  %84 = alloca ptr, align 8
  %85 = alloca i32, align 4
  %86 = alloca i32, align 4
  %87 = alloca i32, align 4
  %88 = alloca [1 x ptr], align 8
  %89 = alloca { ptr, ptr, ptr, i32 }, align 8
  %90 = alloca i32, align 4
  %91 = alloca i32, align 4
  %92 = alloca [3 x ptr], align 8
  %93 = alloca { ptr, ptr, ptr }, align 8
  %94 = alloca [1 x ptr], align 8
  %95 = alloca { ptr }, align 8
  %96 = alloca i32, align 4
  %97 = alloca ptr, align 8
  %98 = alloca ptr, align 8
  %99 = alloca i32, align 4
  %100 = alloca i32, align 4
  %101 = alloca i32, align 4
  %102 = alloca [1 x ptr], align 8
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  %104 = alloca i32, align 4
  %105 = alloca i32, align 4
  %106 = alloca [3 x ptr], align 8
  %107 = alloca { ptr, ptr, ptr }, align 8
  %108 = alloca [1 x ptr], align 8
  %109 = alloca { ptr }, align 8
  %110 = alloca i32, align 4
  %.reg2mem = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i1, align 1
  %.reg2mem12 = alloca i1, align 1
  %.reg2mem15 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %110, align 4
  %111 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %111, align 8
  %112 = alloca ptr, align 8
  store ptr @i32_eq, ptr %112, align 8
  %113 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %113, align 8
  %114 = getelementptr ptr, ptr %113, i32 1
  store ptr @_parameterization_Ptri32, ptr %114, align 8
  %115 = getelementptr ptr, ptr %113, i32 2
  store ptr @_parameterization_Ptri32, ptr %115, align 8
  %116 = getelementptr ptr, ptr %113, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %116, align 8
  %117 = load ptr, ptr %113, align 8
  %118 = getelementptr ptr, ptr %117, i32 6
  %119 = load ptr, ptr %118, align 8
  %120 = call { i64, i64 } @size_wrapper(ptr %119, ptr %113)
  %121 = extractvalue { i64, i64 } %120, 0
  %122 = call ptr @bump_malloc(i64 %121)
  store ptr @_parameterization_Ptri32, ptr %122, align 8
  %123 = getelementptr ptr, ptr %122, i32 1
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %124 = getelementptr ptr, ptr %122, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 24, ptr %122)
  %126 = alloca i32, align 4
  %127 = alloca ptr, align 8
  %128 = alloca ptr, align 8
  %129 = alloca ptr, align 8
  store ptr @CuckooMap, ptr %129, align 8
  store ptr %122, ptr %128, align 8
  store i32 10, ptr %126, align 4
  %130 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %130, align 8
  %131 = alloca ptr, align 8
  store ptr @i32_eq, ptr %131, align 8
  %132 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %132)
  %133 = load ptr, ptr %130, align 8
  call void @llvm.init.trampoline(ptr %132, ptr @rabbojnpqi, ptr %133)
  %134 = alloca ptr, align 8
  %135 = call ptr @adjust_trampoline(ptr %132)
  store ptr %135, ptr %134, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 24, ptr %132)
  %137 = getelementptr { ptr }, ptr %134, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr } undef, ptr %138, 0
  %140 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %140)
  %141 = load ptr, ptr %131, align 8
  call void @llvm.init.trampoline(ptr %140, ptr @bnwmaetavp, ptr %141)
  %142 = alloca ptr, align 8
  %143 = call ptr @adjust_trampoline(ptr %140)
  store ptr %143, ptr %142, align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 24, ptr %140)
  %145 = getelementptr { ptr }, ptr %142, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr } undef, ptr %146, 0
  %148 = load ptr, ptr %129, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %148, 0
  %150 = load ptr, ptr %128, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %149, ptr %150, 1
  %152 = load ptr, ptr %127, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %152, 2
  %154 = load i32, ptr %126, align 4
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, i32 %154, 3
  %156 = alloca [2 x ptr], align 8
  %157 = getelementptr [2 x ptr], ptr %156, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %157, align 8
  %158 = getelementptr [2 x ptr], ptr %156, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %158, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 4, ptr %156)
  %160 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %148)
  %161 = getelementptr ptr, ptr %148, i32 %154
  %162 = getelementptr ptr, ptr %161, i32 10
  %163 = load ptr, ptr %162, align 8
  %164 = alloca { ptr, ptr }, align 8
  %165 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 0
  store ptr @function_typ, ptr %165, align 8
  %166 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 1
  store ptr @function_typ, ptr %166, align 8
  %167 = call ptr @behavior_wrapper(ptr %163, { ptr, ptr, ptr, i32 } %155, ptr %164)
  call void %167({ ptr, ptr, ptr, i32 } %155, { ptr, ptr, ptr, i32 } %155, ptr %156, { ptr } %139, { ptr } %147) #17
  %168 = alloca { ptr, ptr, ptr, i32 }, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 0
  %170 = load ptr, ptr %129, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 1
  %172 = load ptr, ptr %128, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 2
  %174 = load ptr, ptr %127, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 3
  %176 = load i32, ptr %126, align 4
  store i32 %176, ptr %175, align 4
  call void @set_offset(ptr %168, ptr @CuckooMap)
  %177 = alloca i32, align 4
  %178 = alloca ptr, align 8
  %179 = alloca ptr, align 8
  %180 = alloca ptr, align 8
  %181 = load ptr, ptr %169, align 8
  store ptr %181, ptr %180, align 8
  %182 = load ptr, ptr %171, align 8
  store ptr %182, ptr %179, align 8
  %183 = load ptr, ptr %173, align 8
  store ptr %183, ptr %178, align 8
  %184 = load i32, ptr %175, align 4
  store i32 %184, ptr %177, align 4
  %185 = call i64 @clock()
  %186 = alloca i64, align 8
  store i64 %185, ptr %186, align 4
  %187 = alloca i32, align 4
  store i32 0, ptr %187, align 4
  br label %188

188:                                              ; preds = %._crit_edge1, %1
  %189 = load i32, ptr %187, align 4
  %190 = load i32, ptr %110, align 4
  %191 = icmp slt i32 %189, %190
  store i1 %191, ptr %2, align 1
  %192 = load i1, ptr %2, align 1
  store i1 %192, ptr %.reg2mem12, align 1
  %.reload14 = load i1, ptr %.reg2mem12, align 1
  br i1 %.reload14, label %193, label %._crit_edge

._crit_edge:                                      ; preds = %188
  br label %229

193:                                              ; preds = %188
  store i32 1, ptr %3, align 4
  %194 = load i32, ptr %187, align 4
  %195 = load i32, ptr %3, align 4
  %196 = add i32 %194, %195
  store i32 %196, ptr %4, align 4
  store ptr @i32_typ, ptr %6, align 8
  %197 = load i32, ptr %187, align 4
  store i32 %197, ptr %5, align 4
  %198 = load ptr, ptr %6, align 8
  %199 = insertvalue { ptr, i160 } undef, ptr %198, 0
  %200 = load i160, ptr %5, align 4
  %201 = insertvalue { ptr, i160 } %199, i160 %200, 1
  store ptr @i32_typ, ptr %8, align 8
  %202 = load i32, ptr %4, align 4
  store i32 %202, ptr %7, align 4
  %203 = load ptr, ptr %8, align 8
  %204 = insertvalue { ptr, i160 } undef, ptr %203, 0
  %205 = load i160, ptr %7, align 4
  %206 = insertvalue { ptr, i160 } %204, i160 %205, 1
  %207 = load ptr, ptr %180, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %207, 0
  %209 = load ptr, ptr %179, align 8
  %210 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %209, 1
  %211 = load ptr, ptr %178, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %211, 2
  %213 = load i32, ptr %177, align 4
  %214 = insertvalue { ptr, ptr, ptr, i32 } %212, i32 %213, 3
  %215 = getelementptr [2 x ptr], ptr %9, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %215, align 8
  %216 = getelementptr [2 x ptr], ptr %9, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %216, align 8
  %217 = call ptr @llvm.invariant.start.p0(i64 4, ptr %9)
  %218 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %207)
  %219 = getelementptr ptr, ptr %207, i32 %213
  %220 = getelementptr ptr, ptr %219, i32 21
  %221 = load ptr, ptr %220, align 8
  %222 = getelementptr { ptr, ptr }, ptr %10, i32 0, i32 0
  store ptr %198, ptr %222, align 8
  %223 = getelementptr { ptr, ptr }, ptr %10, i32 0, i32 1
  store ptr %203, ptr %223, align 8
  %224 = call ptr @behavior_wrapper(ptr %221, { ptr, ptr, ptr, i32 } %214, ptr %10)
  call void %224({ ptr, ptr, ptr, i32 } %214, { ptr, ptr, ptr, i32 } %214, ptr %9, { ptr, i160 } %201, { ptr, i160 } %206) #17
  store i32 1, ptr %11, align 4
  %225 = load i32, ptr %187, align 4
  %226 = load i32, ptr %11, align 4
  %227 = add i32 %225, %226
  store i32 %227, ptr %12, align 4
  %228 = load i32, ptr %12, align 4
  store i32 %228, ptr %187, align 4
  br label %229

229:                                              ; preds = %._crit_edge, %193
  %.reload13 = load i1, ptr %.reg2mem12, align 1
  br i1 %.reload13, label %._crit_edge1, label %230

._crit_edge1:                                     ; preds = %229
  br label %188

230:                                              ; preds = %229
  %231 = call i64 @clock()
  store i64 %231, ptr %13, align 4
  store i1 true, ptr %14, align 1
  store i32 0, ptr %15, align 4
  %232 = load i32, ptr %110, align 4
  %233 = load i32, ptr %15, align 4
  %234 = icmp sgt i32 %232, %233
  store i1 %234, ptr %16, align 1
  %235 = load i1, ptr %16, align 1
  store i1 %235, ptr %.reg2mem9, align 1
  %.reload11 = load i1, ptr %.reg2mem9, align 1
  br i1 %.reload11, label %236, label %335

236:                                              ; preds = %230
  store i32 1, ptr %17, align 4
  %237 = load i32, ptr %110, align 4
  %238 = load i32, ptr %17, align 4
  %239 = sub i32 %237, %238
  store i32 %239, ptr %18, align 4
  store ptr @i32_typ, ptr %20, align 8
  %240 = load i32, ptr %18, align 4
  store i32 %240, ptr %19, align 4
  %241 = load ptr, ptr %20, align 8
  %242 = insertvalue { ptr, i160 } undef, ptr %241, 0
  %243 = load i160, ptr %19, align 4
  %244 = insertvalue { ptr, i160 } %242, i160 %243, 1
  %245 = load ptr, ptr %180, align 8
  %246 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %245, 0
  %247 = load ptr, ptr %179, align 8
  %248 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %247, 1
  %249 = load ptr, ptr %178, align 8
  %250 = insertvalue { ptr, ptr, ptr, i32 } %248, ptr %249, 2
  %251 = load i32, ptr %177, align 4
  %252 = insertvalue { ptr, ptr, ptr, i32 } %250, i32 %251, 3
  %253 = getelementptr [1 x ptr], ptr %21, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %253, align 8
  %254 = call ptr @llvm.invariant.start.p0(i64 1, ptr %21)
  %255 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %245)
  %256 = getelementptr ptr, ptr %245, i32 %251
  %257 = getelementptr ptr, ptr %256, i32 23
  %258 = load ptr, ptr %257, align 8
  %259 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  store ptr %241, ptr %259, align 8
  %260 = call ptr @behavior_wrapper(ptr %258, { ptr, ptr, ptr, i32 } %252, ptr %22)
  %261 = call { ptr, i160 } %260({ ptr, ptr, ptr, i32 } %252, { ptr, ptr, ptr, i32 } %252, ptr %21, { ptr, i160 } %244) #17
  store { ptr, i160 } %261, ptr %23, align 8
  %262 = getelementptr { ptr, i32 }, ptr %23, i32 0, i32 0
  %263 = load ptr, ptr %262, align 8
  store ptr %263, ptr %25, align 8
  %264 = getelementptr { ptr, i32 }, ptr %23, i32 0, i32 1
  %265 = load i32, ptr %264, align 4
  store i32 %265, ptr %24, align 4
  %266 = load ptr, ptr %25, align 8
  %267 = ptrtoint ptr %266 to i64
  %268 = icmp eq i64 %267, ptrtoint (ptr @nil_typ to i64)
  %269 = icmp eq i64 %267, 0
  %270 = or i1 %268, %269
  store i1 %270, ptr %26, align 1
  %271 = load i1, ptr %26, align 1
  br i1 %271, label %272, label %._crit_edge2

._crit_edge2:                                     ; preds = %236
  br label %278

272:                                              ; preds = %236
  %273 = load [0 x i8], ptr %24, align 1
  store [0 x i8] %273, ptr %27, align 1
  store i1 false, ptr %28, align 1
  %274 = load i1, ptr %28, align 1
  store i1 %274, ptr %14, align 1
  %275 = load [0 x i8], ptr %27, align 1
  store [0 x i8] %275, ptr %29, align 1
  store ptr @nil_typ, ptr %30, align 8
  %276 = load ptr, ptr %30, align 8
  store ptr %276, ptr %25, align 8
  %277 = load i32, ptr %29, align 4
  store i32 %277, ptr %24, align 4
  br label %278

278:                                              ; preds = %._crit_edge2, %272
  %279 = load ptr, ptr %25, align 8
  %280 = ptrtoint ptr %279 to i64
  %281 = icmp eq i64 %280, ptrtoint (ptr @nil_typ to i64)
  %282 = icmp eq i64 %280, 0
  %283 = or i1 %281, %282
  %284 = icmp eq i1 %283, false
  store i1 %284, ptr %31, align 1
  %285 = load i1, ptr %31, align 1
  br i1 %285, label %286, label %298

286:                                              ; preds = %278
  %287 = load i32, ptr %24, align 4
  store i32 %287, ptr %32, align 4
  %288 = load i32, ptr %32, align 4
  %289 = load i32, ptr %110, align 4
  %290 = icmp ne i32 %288, %289
  store i1 %290, ptr %33, align 1
  %291 = load i1, ptr %33, align 1
  br i1 %291, label %292, label %._crit_edge3

._crit_edge3:                                     ; preds = %286
  br label %294

292:                                              ; preds = %286
  store i1 false, ptr %34, align 1
  %293 = load i1, ptr %34, align 1
  store i1 %293, ptr %14, align 1
  br label %294

294:                                              ; preds = %._crit_edge3, %292
  %295 = load i32, ptr %32, align 4
  store i32 %295, ptr %35, align 4
  store ptr @i32_typ, ptr %36, align 8
  %296 = load ptr, ptr %36, align 8
  store ptr %296, ptr %25, align 8
  %297 = load i32, ptr %35, align 4
  store i32 %297, ptr %24, align 4
  br label %313

298:                                              ; preds = %278
  store i1 false, ptr %37, align 1
  %299 = load ptr, ptr %25, align 8
  %300 = ptrtoint ptr %299 to i64
  %301 = icmp eq i64 %300, ptrtoint (ptr @nil_typ to i64)
  %302 = icmp eq i64 %300, 0
  %303 = or i1 %301, %302
  store i1 %303, ptr %38, align 1
  %304 = load i1, ptr %37, align 1
  %305 = load i1, ptr %38, align 1
  %306 = icmp eq i1 %304, %305
  store i1 %306, ptr %39, align 1
  %307 = load i1, ptr %39, align 1
  br i1 %307, label %308, label %._crit_edge4

._crit_edge4:                                     ; preds = %298
  br label %310

308:                                              ; preds = %298
  store i1 false, ptr %40, align 1
  %309 = load i1, ptr %40, align 1
  store i1 %309, ptr %14, align 1
  br label %310

310:                                              ; preds = %._crit_edge4, %308
  %311 = load ptr, ptr %25, align 8
  store ptr %311, ptr %25, align 8
  %312 = load i32, ptr %24, align 4
  store i32 %312, ptr %24, align 4
  br label %313

313:                                              ; preds = %310, %294
  %314 = load ptr, ptr %180, align 8
  %315 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %314, 0
  %316 = load ptr, ptr %179, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } %315, ptr %316, 1
  %318 = load ptr, ptr %178, align 8
  %319 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr %318, 2
  %320 = load i32, ptr %177, align 4
  %321 = insertvalue { ptr, ptr, ptr, i32 } %319, i32 %320, 3
  %322 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %323 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %314)
  %324 = getelementptr ptr, ptr %314, i32 %320
  %325 = getelementptr ptr, ptr %324, i32 22
  %326 = load ptr, ptr %325, align 8
  %327 = call ptr @behavior_wrapper(ptr %326, { ptr, ptr, ptr, i32 } %321, ptr %42)
  %328 = call i32 %327({ ptr, ptr, ptr, i32 } %321, { ptr, ptr, ptr, i32 } %321, ptr %41) #17
  store i32 %328, ptr %43, align 4
  %329 = load i32, ptr %43, align 4
  %330 = load i32, ptr %110, align 4
  %331 = icmp ne i32 %329, %330
  store i1 %331, ptr %44, align 1
  %332 = load i1, ptr %44, align 1
  %333 = xor i1 %332, true
  %334 = zext i1 %333 to i32
  store i32 %334, ptr %.reg2mem7, align 4
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem15, align 4
  br label %357

335:                                              ; preds = %230
  %336 = load ptr, ptr %180, align 8
  %337 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %336, 0
  %338 = load ptr, ptr %179, align 8
  %339 = insertvalue { ptr, ptr, ptr, i32 } %337, ptr %338, 1
  %340 = load ptr, ptr %178, align 8
  %341 = insertvalue { ptr, ptr, ptr, i32 } %339, ptr %340, 2
  %342 = load i32, ptr %177, align 4
  %343 = insertvalue { ptr, ptr, ptr, i32 } %341, i32 %342, 3
  %344 = call ptr @llvm.invariant.start.p0(i64 0, ptr %46)
  %345 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %336)
  %346 = getelementptr ptr, ptr %336, i32 %342
  %347 = getelementptr ptr, ptr %346, i32 22
  %348 = load ptr, ptr %347, align 8
  %349 = call ptr @behavior_wrapper(ptr %348, { ptr, ptr, ptr, i32 } %343, ptr %47)
  %350 = call i32 %349({ ptr, ptr, ptr, i32 } %343, { ptr, ptr, ptr, i32 } %343, ptr %46) #17
  store i32 %350, ptr %48, align 4
  store i32 0, ptr %49, align 4
  %351 = load i32, ptr %48, align 4
  %352 = load i32, ptr %49, align 4
  %353 = icmp ne i32 %351, %352
  store i1 %353, ptr %50, align 1
  %354 = load i1, ptr %50, align 1
  %355 = xor i1 %354, true
  %356 = zext i1 %355 to i32
  store i32 %356, ptr %.reg2mem5, align 4
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem15, align 4
  br label %357

357:                                              ; preds = %335, %313
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %358

358:                                              ; preds = %357
  %.reload = load i32, ptr %.reg2mem, align 4
  %359 = zext i32 %.reload to i64
  %360 = trunc i64 %359 to i32
  switch i32 %360, label %364 [
    i32 0, label %361
  ]

361:                                              ; preds = %358
  %.reload10 = load i1, ptr %.reg2mem9, align 1
  %362 = select i1 %.reload10, ptr %45, ptr %51
  store i1 false, ptr %362, align 1
  %363 = load i1, ptr %362, align 1
  store i1 %363, ptr %14, align 1
  br label %365

364:                                              ; preds = %358
  br label %365

365:                                              ; preds = %364, %361
  store i32 18, ptr %52, align 4
  %366 = load i32, ptr %52, align 4
  %367 = sext i32 %366 to i64
  %368 = mul i64 %367, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %369 = call ptr @bump_malloc(i64 %368)
  store ptr %369, ptr %53, align 8
  %370 = getelementptr { ptr }, ptr %53, i32 0, i32 0
  %371 = load ptr, ptr %370, align 8
  store ptr %371, ptr %54, align 8
  store i32 0, ptr %55, align 4
  %372 = load ptr, ptr %54, align 8
  %373 = load i32, ptr %55, align 4
  %374 = sext i32 %373 to i64
  %375 = mul i64 ptrtoint (ptr getelementptr ([17 x i8], ptr null, i32 1) to i64), %374
  %376 = getelementptr i8, ptr %372, i64 %375
  %377 = load <17 x i8>, ptr @hvkkv_Insert_Sequential, align 32
  store <17 x i8> %377, ptr %376, align 32
  store i32 17, ptr %56, align 4
  store i32 18, ptr %57, align 4
  store ptr @String, ptr %58, align 8
  %378 = load ptr, ptr %58, align 8
  %379 = getelementptr ptr, ptr %378, i32 6
  %380 = load ptr, ptr %379, align 8
  %381 = call { i64, i64 } @size_wrapper(ptr %380, ptr %58)
  %382 = extractvalue { i64, i64 } %381, 0
  %383 = call ptr @bump_malloc(i64 %382)
  store ptr @String, ptr %62, align 8
  store ptr %383, ptr %61, align 8
  store i32 10, ptr %59, align 4
  store i32 17, ptr %63, align 4
  store i32 18, ptr %64, align 4
  %384 = load ptr, ptr %54, align 8
  %385 = insertvalue { ptr } undef, ptr %384, 0
  %386 = load i32, ptr %63, align 4
  %387 = load i32, ptr %64, align 4
  %388 = load ptr, ptr %62, align 8
  %389 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %388, 0
  %390 = load ptr, ptr %61, align 8
  %391 = insertvalue { ptr, ptr, ptr, i32 } %389, ptr %390, 1
  %392 = load ptr, ptr %60, align 8
  %393 = insertvalue { ptr, ptr, ptr, i32 } %391, ptr %392, 2
  %394 = load i32, ptr %59, align 4
  %395 = insertvalue { ptr, ptr, ptr, i32 } %393, i32 %394, 3
  %396 = getelementptr [3 x ptr], ptr %65, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %396, align 8
  %397 = getelementptr [3 x ptr], ptr %65, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %397, align 8
  %398 = getelementptr [3 x ptr], ptr %65, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %398, align 8
  %399 = call ptr @llvm.invariant.start.p0(i64 9, ptr %65)
  %400 = call ptr @llvm.invariant.start.p0(i64 632, ptr %388)
  %401 = getelementptr ptr, ptr %388, i32 %394
  %402 = getelementptr ptr, ptr %401, i32 6
  %403 = load ptr, ptr %402, align 8
  %404 = getelementptr { ptr, ptr, ptr }, ptr %66, i32 0, i32 0
  store ptr @buffer_typ, ptr %404, align 8
  %405 = getelementptr { ptr, ptr, ptr }, ptr %66, i32 0, i32 1
  store ptr @i32_typ, ptr %405, align 8
  %406 = getelementptr { ptr, ptr, ptr }, ptr %66, i32 0, i32 2
  store ptr @i32_typ, ptr %406, align 8
  %407 = call ptr @behavior_wrapper(ptr %403, { ptr, ptr, ptr, i32 } %395, ptr %66)
  call void %407({ ptr, ptr, ptr, i32 } %395, { ptr, ptr, ptr, i32 } %395, ptr %65, { ptr } %385, i32 %386, i32 %387) #17
  %408 = load i64, ptr %13, align 4
  %409 = load i64, ptr %186, align 4
  %410 = sub i64 %408, %409
  store i64 %410, ptr %67, align 4
  %411 = load ptr, ptr %62, align 8
  %412 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %411, 0
  %413 = load ptr, ptr %61, align 8
  %414 = insertvalue { ptr, ptr, ptr, i32 } %412, ptr %413, 1
  %415 = load ptr, ptr %60, align 8
  %416 = insertvalue { ptr, ptr, ptr, i32 } %414, ptr %415, 2
  %417 = load i32, ptr %59, align 4
  %418 = insertvalue { ptr, ptr, ptr, i32 } %416, i32 %417, 3
  %419 = load i32, ptr %110, align 4
  %420 = load i64, ptr %67, align 4
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %418, i32 %419, i64 %420)
  store i32 19, ptr %68, align 4
  %421 = load i32, ptr %68, align 4
  %422 = sext i32 %421 to i64
  %423 = mul i64 %422, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %424 = call ptr @bump_malloc(i64 %423)
  store ptr %424, ptr %69, align 8
  %425 = getelementptr { ptr }, ptr %69, i32 0, i32 0
  %426 = load ptr, ptr %425, align 8
  store ptr %426, ptr %70, align 8
  store i32 0, ptr %71, align 4
  %427 = load ptr, ptr %70, align 8
  %428 = load i32, ptr %71, align 4
  %429 = sext i32 %428 to i64
  %430 = mul i64 ptrtoint (ptr getelementptr ([18 x i8], ptr null, i32 1) to i64), %429
  %431 = getelementptr i8, ptr %427, i64 %430
  %432 = load <18 x i8>, ptr @tpazw_____Verification_, align 32
  store <18 x i8> %432, ptr %431, align 32
  store i32 18, ptr %72, align 4
  store i32 19, ptr %73, align 4
  store ptr @String, ptr %74, align 8
  %433 = load ptr, ptr %74, align 8
  %434 = getelementptr ptr, ptr %433, i32 6
  %435 = load ptr, ptr %434, align 8
  %436 = call { i64, i64 } @size_wrapper(ptr %435, ptr %74)
  %437 = extractvalue { i64, i64 } %436, 0
  %438 = call ptr @bump_malloc(i64 %437)
  %439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %440 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  store ptr @String, ptr %75, align 8
  store ptr %438, ptr %439, align 8
  store i32 10, ptr %440, align 4
  store i32 18, ptr %76, align 4
  store i32 19, ptr %77, align 4
  %441 = load ptr, ptr %70, align 8
  %442 = insertvalue { ptr } undef, ptr %441, 0
  %443 = load i32, ptr %76, align 4
  %444 = load i32, ptr %77, align 4
  %445 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %446 = load ptr, ptr %445, align 8
  %447 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %446, 0
  %448 = load ptr, ptr %439, align 8
  %449 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr %448, 1
  %450 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %451 = load ptr, ptr %450, align 8
  %452 = insertvalue { ptr, ptr, ptr, i32 } %449, ptr %451, 2
  %453 = load i32, ptr %440, align 4
  %454 = insertvalue { ptr, ptr, ptr, i32 } %452, i32 %453, 3
  %455 = getelementptr [3 x ptr], ptr %78, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %455, align 8
  %456 = getelementptr [3 x ptr], ptr %78, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %456, align 8
  %457 = getelementptr [3 x ptr], ptr %78, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %457, align 8
  %458 = call ptr @llvm.invariant.start.p0(i64 9, ptr %78)
  %459 = call ptr @llvm.invariant.start.p0(i64 632, ptr %446)
  %460 = getelementptr ptr, ptr %446, i32 %453
  %461 = getelementptr ptr, ptr %460, i32 6
  %462 = load ptr, ptr %461, align 8
  %463 = getelementptr { ptr, ptr, ptr }, ptr %79, i32 0, i32 0
  store ptr @buffer_typ, ptr %463, align 8
  %464 = getelementptr { ptr, ptr, ptr }, ptr %79, i32 0, i32 1
  store ptr @i32_typ, ptr %464, align 8
  %465 = getelementptr { ptr, ptr, ptr }, ptr %79, i32 0, i32 2
  store ptr @i32_typ, ptr %465, align 8
  %466 = call ptr @behavior_wrapper(ptr %462, { ptr, ptr, ptr, i32 } %454, ptr %79)
  call void %466({ ptr, ptr, ptr, i32 } %454, { ptr, ptr, ptr, i32 } %454, ptr %78, { ptr } %442, i32 %443, i32 %444) #17
  %467 = getelementptr { ptr, i160 }, ptr %75, i32 0, i32 0
  %468 = load ptr, ptr %467, align 8
  %469 = insertvalue { ptr, i160 } undef, ptr %468, 0
  %470 = getelementptr { ptr, i160 }, ptr %75, i32 0, i32 1
  %471 = load i160, ptr %470, align 4
  %472 = insertvalue { ptr, i160 } %469, i160 %471, 1
  %473 = getelementptr [1 x ptr], ptr %80, i32 0, i32 0
  store ptr @_parameterization_String, ptr %473, align 8
  %474 = call ptr @llvm.invariant.start.p0(i64 1, ptr %80)
  %475 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %476 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %477 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  store ptr %468, ptr %477, align 8
  %478 = call ptr @class_behavior_wrapper(ptr %476, ptr %81)
  call void %478(ptr %80, { ptr, i160 } %472) #17
  %479 = load i1, ptr %14, align 1
  br i1 %479, label %480, label %539

480:                                              ; preds = %365
  store i32 5, ptr %82, align 4
  %481 = load i32, ptr %82, align 4
  %482 = sext i32 %481 to i64
  %483 = mul i64 %482, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %484 = call ptr @bump_malloc(i64 %483)
  store ptr %484, ptr %83, align 8
  %485 = getelementptr { ptr }, ptr %83, i32 0, i32 0
  %486 = load ptr, ptr %485, align 8
  store ptr %486, ptr %84, align 8
  store i32 0, ptr %85, align 4
  %487 = load ptr, ptr %84, align 8
  %488 = load i32, ptr %85, align 4
  %489 = sext i32 %488 to i64
  %490 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %489
  %491 = getelementptr i8, ptr %487, i64 %490
  %492 = load <4 x i8>, ptr @gfmlq_PASS, align 4
  store <4 x i8> %492, ptr %491, align 4
  store i32 4, ptr %86, align 4
  store i32 5, ptr %87, align 4
  store ptr @String, ptr %88, align 8
  %493 = load ptr, ptr %88, align 8
  %494 = getelementptr ptr, ptr %493, i32 6
  %495 = load ptr, ptr %494, align 8
  %496 = call { i64, i64 } @size_wrapper(ptr %495, ptr %88)
  %497 = extractvalue { i64, i64 } %496, 0
  %498 = call ptr @bump_malloc(i64 %497)
  %499 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %500 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  store ptr @String, ptr %89, align 8
  store ptr %498, ptr %499, align 8
  store i32 10, ptr %500, align 4
  store i32 4, ptr %90, align 4
  store i32 5, ptr %91, align 4
  %501 = load ptr, ptr %84, align 8
  %502 = insertvalue { ptr } undef, ptr %501, 0
  %503 = load i32, ptr %90, align 4
  %504 = load i32, ptr %91, align 4
  %505 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 0
  %506 = load ptr, ptr %505, align 8
  %507 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %506, 0
  %508 = load ptr, ptr %499, align 8
  %509 = insertvalue { ptr, ptr, ptr, i32 } %507, ptr %508, 1
  %510 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 2
  %511 = load ptr, ptr %510, align 8
  %512 = insertvalue { ptr, ptr, ptr, i32 } %509, ptr %511, 2
  %513 = load i32, ptr %500, align 4
  %514 = insertvalue { ptr, ptr, ptr, i32 } %512, i32 %513, 3
  %515 = getelementptr [3 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %515, align 8
  %516 = getelementptr [3 x ptr], ptr %92, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %516, align 8
  %517 = getelementptr [3 x ptr], ptr %92, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %517, align 8
  %518 = call ptr @llvm.invariant.start.p0(i64 9, ptr %92)
  %519 = call ptr @llvm.invariant.start.p0(i64 632, ptr %506)
  %520 = getelementptr ptr, ptr %506, i32 %513
  %521 = getelementptr ptr, ptr %520, i32 6
  %522 = load ptr, ptr %521, align 8
  %523 = getelementptr { ptr, ptr, ptr }, ptr %93, i32 0, i32 0
  store ptr @buffer_typ, ptr %523, align 8
  %524 = getelementptr { ptr, ptr, ptr }, ptr %93, i32 0, i32 1
  store ptr @i32_typ, ptr %524, align 8
  %525 = getelementptr { ptr, ptr, ptr }, ptr %93, i32 0, i32 2
  store ptr @i32_typ, ptr %525, align 8
  %526 = call ptr @behavior_wrapper(ptr %522, { ptr, ptr, ptr, i32 } %514, ptr %93)
  call void %526({ ptr, ptr, ptr, i32 } %514, { ptr, ptr, ptr, i32 } %514, ptr %92, { ptr } %502, i32 %503, i32 %504) #17
  %527 = getelementptr { ptr, i160 }, ptr %89, i32 0, i32 0
  %528 = load ptr, ptr %527, align 8
  %529 = insertvalue { ptr, i160 } undef, ptr %528, 0
  %530 = getelementptr { ptr, i160 }, ptr %89, i32 0, i32 1
  %531 = load i160, ptr %530, align 4
  %532 = insertvalue { ptr, i160 } %529, i160 %531, 1
  %533 = getelementptr [1 x ptr], ptr %94, i32 0, i32 0
  store ptr @_parameterization_String, ptr %533, align 8
  %534 = call ptr @llvm.invariant.start.p0(i64 1, ptr %94)
  %535 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %536 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %537 = getelementptr { ptr }, ptr %95, i32 0, i32 0
  store ptr %528, ptr %537, align 8
  %538 = call ptr @class_behavior_wrapper(ptr %536, ptr %95)
  call void %538(ptr %94, { ptr, i160 } %532) #17
  br label %598

539:                                              ; preds = %365
  store i32 5, ptr %96, align 4
  %540 = load i32, ptr %96, align 4
  %541 = sext i32 %540 to i64
  %542 = mul i64 %541, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %543 = call ptr @bump_malloc(i64 %542)
  store ptr %543, ptr %97, align 8
  %544 = getelementptr { ptr }, ptr %97, i32 0, i32 0
  %545 = load ptr, ptr %544, align 8
  store ptr %545, ptr %98, align 8
  store i32 0, ptr %99, align 4
  %546 = load ptr, ptr %98, align 8
  %547 = load i32, ptr %99, align 4
  %548 = sext i32 %547 to i64
  %549 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %548
  %550 = getelementptr i8, ptr %546, i64 %549
  %551 = load <4 x i8>, ptr @qvmbb_FAIL, align 4
  store <4 x i8> %551, ptr %550, align 4
  store i32 4, ptr %100, align 4
  store i32 5, ptr %101, align 4
  store ptr @String, ptr %102, align 8
  %552 = load ptr, ptr %102, align 8
  %553 = getelementptr ptr, ptr %552, i32 6
  %554 = load ptr, ptr %553, align 8
  %555 = call { i64, i64 } @size_wrapper(ptr %554, ptr %102)
  %556 = extractvalue { i64, i64 } %555, 0
  %557 = call ptr @bump_malloc(i64 %556)
  %558 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %559 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  store ptr @String, ptr %103, align 8
  store ptr %557, ptr %558, align 8
  store i32 10, ptr %559, align 4
  store i32 4, ptr %104, align 4
  store i32 5, ptr %105, align 4
  %560 = load ptr, ptr %98, align 8
  %561 = insertvalue { ptr } undef, ptr %560, 0
  %562 = load i32, ptr %104, align 4
  %563 = load i32, ptr %105, align 4
  %564 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %565 = load ptr, ptr %564, align 8
  %566 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %565, 0
  %567 = load ptr, ptr %558, align 8
  %568 = insertvalue { ptr, ptr, ptr, i32 } %566, ptr %567, 1
  %569 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %570 = load ptr, ptr %569, align 8
  %571 = insertvalue { ptr, ptr, ptr, i32 } %568, ptr %570, 2
  %572 = load i32, ptr %559, align 4
  %573 = insertvalue { ptr, ptr, ptr, i32 } %571, i32 %572, 3
  %574 = getelementptr [3 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %574, align 8
  %575 = getelementptr [3 x ptr], ptr %106, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %575, align 8
  %576 = getelementptr [3 x ptr], ptr %106, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %576, align 8
  %577 = call ptr @llvm.invariant.start.p0(i64 9, ptr %106)
  %578 = call ptr @llvm.invariant.start.p0(i64 632, ptr %565)
  %579 = getelementptr ptr, ptr %565, i32 %572
  %580 = getelementptr ptr, ptr %579, i32 6
  %581 = load ptr, ptr %580, align 8
  %582 = getelementptr { ptr, ptr, ptr }, ptr %107, i32 0, i32 0
  store ptr @buffer_typ, ptr %582, align 8
  %583 = getelementptr { ptr, ptr, ptr }, ptr %107, i32 0, i32 1
  store ptr @i32_typ, ptr %583, align 8
  %584 = getelementptr { ptr, ptr, ptr }, ptr %107, i32 0, i32 2
  store ptr @i32_typ, ptr %584, align 8
  %585 = call ptr @behavior_wrapper(ptr %581, { ptr, ptr, ptr, i32 } %573, ptr %107)
  call void %585({ ptr, ptr, ptr, i32 } %573, { ptr, ptr, ptr, i32 } %573, ptr %106, { ptr } %561, i32 %562, i32 %563) #17
  %586 = getelementptr { ptr, i160 }, ptr %103, i32 0, i32 0
  %587 = load ptr, ptr %586, align 8
  %588 = insertvalue { ptr, i160 } undef, ptr %587, 0
  %589 = getelementptr { ptr, i160 }, ptr %103, i32 0, i32 1
  %590 = load i160, ptr %589, align 4
  %591 = insertvalue { ptr, i160 } %588, i160 %590, 1
  %592 = getelementptr [1 x ptr], ptr %108, i32 0, i32 0
  store ptr @_parameterization_String, ptr %592, align 8
  %593 = call ptr @llvm.invariant.start.p0(i64 1, ptr %108)
  %594 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %595 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %596 = getelementptr { ptr }, ptr %109, i32 0, i32 0
  store ptr %587, ptr %596, align 8
  %597 = call ptr @class_behavior_wrapper(ptr %595, ptr %109)
  call void %597(ptr %108, { ptr, i160 } %591) #17
  br label %598

598:                                              ; preds = %539, %480
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.init.trampoline(ptr nocapture writeonly, ptr readnone, ptr readnone) #0

declare i64 @clock()

define void @benchmark_insert_random(i32 %0) {
  %2 = alloca i1, align 1
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca i32, align 4
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i1, align 1
  %13 = alloca i1, align 1
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca [2 x ptr], align 8
  %19 = alloca { ptr, ptr }, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca [0 x ptr], align 8
  %23 = alloca {}, align 8
  %24 = alloca i32, align 4
  %25 = alloca i64, align 8
  %26 = alloca i32, align 4
  %27 = alloca i1, align 1
  %28 = alloca [1 x ptr], align 8
  %29 = alloca { ptr }, align 8
  %30 = alloca { ptr, i160 }, align 8
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i160, align 8
  %35 = alloca ptr, align 8
  %36 = alloca i160, align 8
  %37 = alloca ptr, align 8
  %38 = alloca [2 x ptr], align 8
  %39 = alloca { ptr, ptr }, align 8
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i64, align 8
  %43 = alloca i1, align 1
  %44 = alloca i32, align 4
  %45 = alloca i1, align 1
  %46 = alloca i160, align 8
  %47 = alloca ptr, align 8
  %48 = alloca [1 x ptr], align 8
  %49 = alloca { ptr }, align 8
  %50 = alloca { ptr, i160 }, align 8
  %51 = alloca i32, align 4
  %52 = alloca ptr, align 8
  %53 = alloca i1, align 1
  %54 = alloca [0 x i8], align 1
  %55 = alloca i1, align 1
  %56 = alloca i32, align 4
  %57 = alloca ptr, align 8
  %58 = alloca i1, align 1
  %59 = alloca i32, align 4
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %62 = alloca i1, align 1
  %63 = alloca i1, align 1
  %64 = alloca i32, align 4
  %65 = alloca ptr, align 8
  %66 = alloca i1, align 1
  %67 = alloca i1, align 1
  %68 = alloca i1, align 1
  %69 = alloca i1, align 1
  %70 = alloca [0 x ptr], align 8
  %71 = alloca {}, align 8
  %72 = alloca i32, align 4
  %73 = alloca i1, align 1
  %74 = alloca i1, align 1
  %75 = alloca [0 x ptr], align 8
  %76 = alloca {}, align 8
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  %79 = alloca i1, align 1
  %80 = alloca i1, align 1
  %81 = alloca i32, align 4
  %82 = alloca ptr, align 8
  %83 = alloca ptr, align 8
  %84 = alloca i32, align 4
  %85 = alloca i32, align 4
  %86 = alloca i32, align 4
  %87 = alloca [1 x ptr], align 8
  %88 = alloca i32, align 4
  %89 = alloca ptr, align 8
  %90 = alloca ptr, align 8
  %91 = alloca ptr, align 8
  %92 = alloca i32, align 4
  %93 = alloca i32, align 4
  %94 = alloca [3 x ptr], align 8
  %95 = alloca { ptr, ptr, ptr }, align 8
  %96 = alloca i64, align 8
  %97 = alloca i32, align 4
  %98 = alloca ptr, align 8
  %99 = alloca ptr, align 8
  %100 = alloca i32, align 4
  %101 = alloca i32, align 4
  %102 = alloca i32, align 4
  %103 = alloca [1 x ptr], align 8
  %104 = alloca { ptr, ptr, ptr, i32 }, align 8
  %105 = alloca i32, align 4
  %106 = alloca i32, align 4
  %107 = alloca [3 x ptr], align 8
  %108 = alloca { ptr, ptr, ptr }, align 8
  %109 = alloca [1 x ptr], align 8
  %110 = alloca { ptr }, align 8
  %111 = alloca i32, align 4
  %112 = alloca ptr, align 8
  %113 = alloca ptr, align 8
  %114 = alloca i32, align 4
  %115 = alloca i32, align 4
  %116 = alloca i32, align 4
  %117 = alloca [1 x ptr], align 8
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = alloca i32, align 4
  %120 = alloca i32, align 4
  %121 = alloca [3 x ptr], align 8
  %122 = alloca { ptr, ptr, ptr }, align 8
  %123 = alloca [1 x ptr], align 8
  %124 = alloca { ptr }, align 8
  %125 = alloca i32, align 4
  %126 = alloca ptr, align 8
  %127 = alloca ptr, align 8
  %128 = alloca i32, align 4
  %129 = alloca i32, align 4
  %130 = alloca i32, align 4
  %131 = alloca [1 x ptr], align 8
  %132 = alloca { ptr, ptr, ptr, i32 }, align 8
  %133 = alloca i32, align 4
  %134 = alloca i32, align 4
  %135 = alloca [3 x ptr], align 8
  %136 = alloca { ptr, ptr, ptr }, align 8
  %137 = alloca [1 x ptr], align 8
  %138 = alloca { ptr }, align 8
  %139 = alloca i32, align 4
  %140 = alloca ptr, align 8
  %141 = alloca ptr, align 8
  %142 = alloca i32, align 4
  %143 = alloca i32, align 4
  %144 = alloca i32, align 4
  %145 = alloca [1 x ptr], align 8
  %146 = alloca { ptr, ptr, ptr, i32 }, align 8
  %147 = alloca i32, align 4
  %148 = alloca i32, align 4
  %149 = alloca [3 x ptr], align 8
  %150 = alloca { ptr, ptr, ptr }, align 8
  %151 = alloca [1 x ptr], align 8
  %152 = alloca { ptr }, align 8
  %153 = alloca i160, align 8
  %154 = alloca ptr, align 8
  %155 = alloca [1 x ptr], align 8
  %156 = alloca { ptr }, align 8
  %157 = alloca i32, align 4
  %158 = alloca ptr, align 8
  %159 = alloca ptr, align 8
  %160 = alloca i32, align 4
  %161 = alloca i32, align 4
  %162 = alloca i32, align 4
  %163 = alloca [1 x ptr], align 8
  %164 = alloca { ptr, ptr, ptr, i32 }, align 8
  %165 = alloca i32, align 4
  %166 = alloca i32, align 4
  %167 = alloca [3 x ptr], align 8
  %168 = alloca { ptr, ptr, ptr }, align 8
  %169 = alloca [1 x ptr], align 8
  %170 = alloca { ptr }, align 8
  %171 = alloca i32, align 4
  %.reg2mem = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca i1, align 1
  %.reg2mem15 = alloca i1, align 1
  %.reg2mem18 = alloca i1, align 1
  %.reg2mem21 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %171, align 4
  %172 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %172, align 8
  %173 = alloca ptr, align 8
  store ptr @i32_eq, ptr %173, align 8
  %174 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %174, align 8
  %175 = getelementptr ptr, ptr %174, i32 1
  store ptr @_parameterization_Ptri32, ptr %175, align 8
  %176 = getelementptr ptr, ptr %174, i32 2
  store ptr @_parameterization_Ptri32, ptr %176, align 8
  %177 = getelementptr ptr, ptr %174, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %177, align 8
  %178 = load ptr, ptr %174, align 8
  %179 = getelementptr ptr, ptr %178, i32 6
  %180 = load ptr, ptr %179, align 8
  %181 = call { i64, i64 } @size_wrapper(ptr %180, ptr %174)
  %182 = extractvalue { i64, i64 } %181, 0
  %183 = call ptr @bump_malloc(i64 %182)
  store ptr @_parameterization_Ptri32, ptr %183, align 8
  %184 = getelementptr ptr, ptr %183, i32 1
  store ptr @_parameterization_Ptri32, ptr %184, align 8
  %185 = getelementptr ptr, ptr %183, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %185, align 8
  %186 = call ptr @llvm.invariant.start.p0(i64 24, ptr %183)
  %187 = alloca i32, align 4
  %188 = alloca ptr, align 8
  %189 = alloca ptr, align 8
  %190 = alloca ptr, align 8
  store ptr @CuckooMap, ptr %190, align 8
  store ptr %183, ptr %189, align 8
  store i32 10, ptr %187, align 4
  %191 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %191, align 8
  %192 = alloca ptr, align 8
  store ptr @i32_eq, ptr %192, align 8
  %193 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %193)
  %194 = load ptr, ptr %191, align 8
  call void @llvm.init.trampoline(ptr %193, ptr @sztlnbvhek, ptr %194)
  %195 = alloca ptr, align 8
  %196 = call ptr @adjust_trampoline(ptr %193)
  store ptr %196, ptr %195, align 8
  %197 = call ptr @llvm.invariant.start.p0(i64 24, ptr %193)
  %198 = getelementptr { ptr }, ptr %195, i32 0, i32 0
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr } undef, ptr %199, 0
  %201 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %201)
  %202 = load ptr, ptr %192, align 8
  call void @llvm.init.trampoline(ptr %201, ptr @uzenkwklxl, ptr %202)
  %203 = alloca ptr, align 8
  %204 = call ptr @adjust_trampoline(ptr %201)
  store ptr %204, ptr %203, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 24, ptr %201)
  %206 = getelementptr { ptr }, ptr %203, i32 0, i32 0
  %207 = load ptr, ptr %206, align 8
  %208 = insertvalue { ptr } undef, ptr %207, 0
  %209 = load ptr, ptr %190, align 8
  %210 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %209, 0
  %211 = load ptr, ptr %189, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %211, 1
  %213 = load ptr, ptr %188, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %212, ptr %213, 2
  %215 = load i32, ptr %187, align 4
  %216 = insertvalue { ptr, ptr, ptr, i32 } %214, i32 %215, 3
  %217 = alloca [2 x ptr], align 8
  %218 = getelementptr [2 x ptr], ptr %217, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %218, align 8
  %219 = getelementptr [2 x ptr], ptr %217, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %219, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 4, ptr %217)
  %221 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %209)
  %222 = getelementptr ptr, ptr %209, i32 %215
  %223 = getelementptr ptr, ptr %222, i32 10
  %224 = load ptr, ptr %223, align 8
  %225 = alloca { ptr, ptr }, align 8
  %226 = getelementptr { ptr, ptr }, ptr %225, i32 0, i32 0
  store ptr @function_typ, ptr %226, align 8
  %227 = getelementptr { ptr, ptr }, ptr %225, i32 0, i32 1
  store ptr @function_typ, ptr %227, align 8
  %228 = call ptr @behavior_wrapper(ptr %224, { ptr, ptr, ptr, i32 } %216, ptr %225)
  call void %228({ ptr, ptr, ptr, i32 } %216, { ptr, ptr, ptr, i32 } %216, ptr %217, { ptr } %200, { ptr } %208) #17
  %229 = alloca { ptr, ptr, ptr, i32 }, align 8
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 0
  %231 = load ptr, ptr %190, align 8
  store ptr %231, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 1
  %233 = load ptr, ptr %189, align 8
  store ptr %233, ptr %232, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 2
  %235 = load ptr, ptr %188, align 8
  store ptr %235, ptr %234, align 8
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 3
  %237 = load i32, ptr %187, align 4
  store i32 %237, ptr %236, align 4
  call void @set_offset(ptr %229, ptr @CuckooMap)
  %238 = alloca i32, align 4
  %239 = alloca ptr, align 8
  %240 = alloca ptr, align 8
  %241 = alloca ptr, align 8
  %242 = load ptr, ptr %230, align 8
  store ptr %242, ptr %241, align 8
  %243 = load ptr, ptr %232, align 8
  store ptr %243, ptr %240, align 8
  %244 = load ptr, ptr %234, align 8
  store ptr %244, ptr %239, align 8
  %245 = load i32, ptr %236, align 4
  store i32 %245, ptr %238, align 4
  %246 = alloca i32, align 4
  store i32 123, ptr %246, align 4
  %247 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %247, align 8
  %248 = load ptr, ptr %247, align 8
  %249 = getelementptr ptr, ptr %248, i32 6
  %250 = load ptr, ptr %249, align 8
  %251 = call { i64, i64 } @size_wrapper(ptr %250, ptr %247)
  %252 = extractvalue { i64, i64 } %251, 0
  %253 = call ptr @bump_malloc(i64 %252)
  %254 = alloca i32, align 4
  %255 = alloca ptr, align 8
  %256 = alloca ptr, align 8
  %257 = alloca ptr, align 8
  store ptr @PRNG, ptr %257, align 8
  store ptr %253, ptr %256, align 8
  store i32 10, ptr %254, align 4
  %258 = alloca i32, align 4
  store i32 123, ptr %258, align 4
  %259 = load i32, ptr %258, align 4
  %260 = load ptr, ptr %257, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %260, 0
  %262 = load ptr, ptr %256, align 8
  %263 = insertvalue { ptr, ptr, ptr, i32 } %261, ptr %262, 1
  %264 = load ptr, ptr %255, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } %263, ptr %264, 2
  %266 = load i32, ptr %254, align 4
  %267 = insertvalue { ptr, ptr, ptr, i32 } %265, i32 %266, 3
  %268 = alloca [1 x ptr], align 8
  %269 = getelementptr [1 x ptr], ptr %268, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %269, align 8
  %270 = call ptr @llvm.invariant.start.p0(i64 1, ptr %268)
  %271 = call ptr @llvm.invariant.start.p0(i64 40, ptr %260)
  %272 = getelementptr ptr, ptr %260, i32 %266
  %273 = getelementptr ptr, ptr %272, i32 1
  %274 = load ptr, ptr %273, align 8
  %275 = alloca { ptr }, align 8
  %276 = getelementptr { ptr }, ptr %275, i32 0, i32 0
  store ptr @i32_typ, ptr %276, align 8
  %277 = call ptr @behavior_wrapper(ptr %274, { ptr, ptr, ptr, i32 } %267, ptr %275)
  call void %277({ ptr, ptr, ptr, i32 } %267, { ptr, ptr, ptr, i32 } %267, ptr %268, i32 %259) #17
  %278 = alloca { ptr, ptr, ptr, i32 }, align 8
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %278, i32 0, i32 0
  %280 = load ptr, ptr %257, align 8
  store ptr %280, ptr %279, align 8
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %278, i32 0, i32 1
  %282 = load ptr, ptr %256, align 8
  store ptr %282, ptr %281, align 8
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %278, i32 0, i32 2
  %284 = load ptr, ptr %255, align 8
  store ptr %284, ptr %283, align 8
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %278, i32 0, i32 3
  %286 = load i32, ptr %254, align 4
  store i32 %286, ptr %285, align 4
  call void @set_offset(ptr %278, ptr @PRNG)
  %287 = alloca i32, align 4
  %288 = alloca ptr, align 8
  %289 = alloca ptr, align 8
  %290 = alloca ptr, align 8
  %291 = load ptr, ptr %279, align 8
  store ptr %291, ptr %290, align 8
  %292 = load ptr, ptr %281, align 8
  store ptr %292, ptr %289, align 8
  %293 = load ptr, ptr %283, align 8
  store ptr %293, ptr %288, align 8
  %294 = load i32, ptr %285, align 4
  store i32 %294, ptr %287, align 4
  %295 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %295, align 8
  %296 = getelementptr ptr, ptr %295, i32 1
  store ptr @_parameterization_Ptri32, ptr %296, align 8
  %297 = load ptr, ptr %295, align 8
  %298 = getelementptr ptr, ptr %297, i32 6
  %299 = load ptr, ptr %298, align 8
  %300 = call { i64, i64 } @size_wrapper(ptr %299, ptr %295)
  %301 = extractvalue { i64, i64 } %300, 0
  %302 = call ptr @bump_malloc(i64 %301)
  store ptr @_parameterization_Ptri32, ptr %302, align 8
  %303 = call ptr @llvm.invariant.start.p0(i64 8, ptr %302)
  %304 = alloca i32, align 4
  %305 = alloca ptr, align 8
  %306 = alloca ptr, align 8
  %307 = alloca ptr, align 8
  store ptr @Array, ptr %307, align 8
  store ptr %302, ptr %306, align 8
  store i32 10, ptr %304, align 4
  %308 = load i32, ptr %171, align 4
  %309 = load ptr, ptr %307, align 8
  %310 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %309, 0
  %311 = load ptr, ptr %306, align 8
  %312 = insertvalue { ptr, ptr, ptr, i32 } %310, ptr %311, 1
  %313 = load ptr, ptr %305, align 8
  %314 = insertvalue { ptr, ptr, ptr, i32 } %312, ptr %313, 2
  %315 = load i32, ptr %304, align 4
  %316 = insertvalue { ptr, ptr, ptr, i32 } %314, i32 %315, 3
  %317 = alloca [1 x ptr], align 8
  %318 = getelementptr [1 x ptr], ptr %317, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %318, align 8
  %319 = call ptr @llvm.invariant.start.p0(i64 1, ptr %317)
  %320 = call ptr @llvm.invariant.start.p0(i64 664, ptr %309)
  %321 = getelementptr ptr, ptr %309, i32 %315
  %322 = getelementptr ptr, ptr %321, i32 6
  %323 = load ptr, ptr %322, align 8
  %324 = alloca { ptr }, align 8
  %325 = getelementptr { ptr }, ptr %324, i32 0, i32 0
  store ptr @i32_typ, ptr %325, align 8
  %326 = call ptr @behavior_wrapper(ptr %323, { ptr, ptr, ptr, i32 } %316, ptr %324)
  call void %326({ ptr, ptr, ptr, i32 } %316, { ptr, ptr, ptr, i32 } %316, ptr %317, i32 %308) #17
  %327 = alloca { ptr, ptr, ptr, i32 }, align 8
  %328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 0
  %329 = load ptr, ptr %307, align 8
  store ptr %329, ptr %328, align 8
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 1
  %331 = load ptr, ptr %306, align 8
  store ptr %331, ptr %330, align 8
  %332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 2
  %333 = load ptr, ptr %305, align 8
  store ptr %333, ptr %332, align 8
  %334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 3
  %335 = load i32, ptr %304, align 4
  store i32 %335, ptr %334, align 4
  call void @set_offset(ptr %327, ptr @Array)
  %336 = alloca i32, align 4
  %337 = alloca ptr, align 8
  %338 = alloca ptr, align 8
  %339 = alloca ptr, align 8
  %340 = load ptr, ptr %328, align 8
  store ptr %340, ptr %339, align 8
  %341 = load ptr, ptr %330, align 8
  store ptr %341, ptr %338, align 8
  %342 = load ptr, ptr %332, align 8
  store ptr %342, ptr %337, align 8
  %343 = load i32, ptr %334, align 4
  store i32 %343, ptr %336, align 4
  %344 = alloca i32, align 4
  store i32 0, ptr %344, align 4
  %345 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %345, align 8
  %346 = alloca ptr, align 8
  store ptr @i32_eq, ptr %346, align 8
  %347 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %347, align 8
  %348 = getelementptr ptr, ptr %347, i32 1
  store ptr @_parameterization_Ptri32, ptr %348, align 8
  %349 = getelementptr ptr, ptr %347, i32 2
  store ptr @_parameterization_Ptri1, ptr %349, align 8
  %350 = getelementptr ptr, ptr %347, i32 3
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %350, align 8
  %351 = load ptr, ptr %347, align 8
  %352 = getelementptr ptr, ptr %351, i32 6
  %353 = load ptr, ptr %352, align 8
  %354 = call { i64, i64 } @size_wrapper(ptr %353, ptr %347)
  %355 = extractvalue { i64, i64 } %354, 0
  %356 = call ptr @bump_malloc(i64 %355)
  store ptr @_parameterization_Ptri32, ptr %356, align 8
  %357 = getelementptr ptr, ptr %356, i32 1
  store ptr @_parameterization_Ptri1, ptr %357, align 8
  %358 = getelementptr ptr, ptr %356, i32 2
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %358, align 8
  %359 = call ptr @llvm.invariant.start.p0(i64 24, ptr %356)
  %360 = alloca i32, align 4
  %361 = alloca ptr, align 8
  %362 = alloca ptr, align 8
  %363 = alloca ptr, align 8
  store ptr @CuckooMap, ptr %363, align 8
  store ptr %356, ptr %362, align 8
  store i32 10, ptr %360, align 4
  %364 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %364, align 8
  %365 = alloca ptr, align 8
  store ptr @i32_eq, ptr %365, align 8
  %366 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %366)
  %367 = load ptr, ptr %364, align 8
  call void @llvm.init.trampoline(ptr %366, ptr @nyirajlwbb, ptr %367)
  %368 = alloca ptr, align 8
  %369 = call ptr @adjust_trampoline(ptr %366)
  store ptr %369, ptr %368, align 8
  %370 = call ptr @llvm.invariant.start.p0(i64 24, ptr %366)
  %371 = getelementptr { ptr }, ptr %368, i32 0, i32 0
  %372 = load ptr, ptr %371, align 8
  %373 = insertvalue { ptr } undef, ptr %372, 0
  %374 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %374)
  %375 = load ptr, ptr %365, align 8
  call void @llvm.init.trampoline(ptr %374, ptr @sabllqfhim, ptr %375)
  %376 = alloca ptr, align 8
  %377 = call ptr @adjust_trampoline(ptr %374)
  store ptr %377, ptr %376, align 8
  %378 = call ptr @llvm.invariant.start.p0(i64 24, ptr %374)
  %379 = getelementptr { ptr }, ptr %376, i32 0, i32 0
  %380 = load ptr, ptr %379, align 8
  %381 = insertvalue { ptr } undef, ptr %380, 0
  %382 = load ptr, ptr %363, align 8
  %383 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %382, 0
  %384 = load ptr, ptr %362, align 8
  %385 = insertvalue { ptr, ptr, ptr, i32 } %383, ptr %384, 1
  %386 = load ptr, ptr %361, align 8
  %387 = insertvalue { ptr, ptr, ptr, i32 } %385, ptr %386, 2
  %388 = load i32, ptr %360, align 4
  %389 = insertvalue { ptr, ptr, ptr, i32 } %387, i32 %388, 3
  %390 = alloca [2 x ptr], align 8
  %391 = getelementptr [2 x ptr], ptr %390, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %391, align 8
  %392 = getelementptr [2 x ptr], ptr %390, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %392, align 8
  %393 = call ptr @llvm.invariant.start.p0(i64 4, ptr %390)
  %394 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %382)
  %395 = getelementptr ptr, ptr %382, i32 %388
  %396 = getelementptr ptr, ptr %395, i32 10
  %397 = load ptr, ptr %396, align 8
  %398 = alloca { ptr, ptr }, align 8
  %399 = getelementptr { ptr, ptr }, ptr %398, i32 0, i32 0
  store ptr @function_typ, ptr %399, align 8
  %400 = getelementptr { ptr, ptr }, ptr %398, i32 0, i32 1
  store ptr @function_typ, ptr %400, align 8
  %401 = call ptr @behavior_wrapper(ptr %397, { ptr, ptr, ptr, i32 } %389, ptr %398)
  call void %401({ ptr, ptr, ptr, i32 } %389, { ptr, ptr, ptr, i32 } %389, ptr %390, { ptr } %373, { ptr } %381) #17
  %402 = alloca { ptr, ptr, ptr, i32 }, align 8
  %403 = getelementptr { ptr, ptr, ptr, i32 }, ptr %402, i32 0, i32 0
  %404 = load ptr, ptr %363, align 8
  store ptr %404, ptr %403, align 8
  %405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %402, i32 0, i32 1
  %406 = load ptr, ptr %362, align 8
  store ptr %406, ptr %405, align 8
  %407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %402, i32 0, i32 2
  %408 = load ptr, ptr %361, align 8
  store ptr %408, ptr %407, align 8
  %409 = getelementptr { ptr, ptr, ptr, i32 }, ptr %402, i32 0, i32 3
  %410 = load i32, ptr %360, align 4
  store i32 %410, ptr %409, align 4
  call void @set_offset(ptr %402, ptr @CuckooMap)
  %411 = alloca i32, align 4
  %412 = alloca ptr, align 8
  %413 = alloca ptr, align 8
  %414 = alloca ptr, align 8
  %415 = load ptr, ptr %403, align 8
  store ptr %415, ptr %414, align 8
  %416 = load ptr, ptr %405, align 8
  store ptr %416, ptr %413, align 8
  %417 = load ptr, ptr %407, align 8
  store ptr %417, ptr %412, align 8
  %418 = load i32, ptr %409, align 4
  store i32 %418, ptr %411, align 4
  %419 = alloca i32, align 4
  store i32 0, ptr %419, align 4
  %420 = alloca i32, align 4
  store i32 -1, ptr %420, align 4
  br label %421

421:                                              ; preds = %._crit_edge2, %1
  %422 = load i32, ptr %419, align 4
  %423 = load i32, ptr %171, align 4
  %424 = icmp slt i32 %422, %423
  store i1 %424, ptr %2, align 1
  %425 = load i1, ptr %2, align 1
  store i1 %425, ptr %.reg2mem18, align 1
  %.reload20 = load i1, ptr %.reg2mem18, align 1
  br i1 %.reload20, label %426, label %._crit_edge

._crit_edge:                                      ; preds = %421
  br label %508

426:                                              ; preds = %421
  %427 = load ptr, ptr %290, align 8
  %428 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %427, 0
  %429 = load ptr, ptr %289, align 8
  %430 = insertvalue { ptr, ptr, ptr, i32 } %428, ptr %429, 1
  %431 = load ptr, ptr %288, align 8
  %432 = insertvalue { ptr, ptr, ptr, i32 } %430, ptr %431, 2
  %433 = load i32, ptr %287, align 4
  %434 = insertvalue { ptr, ptr, ptr, i32 } %432, i32 %433, 3
  %435 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %436 = call ptr @llvm.invariant.start.p0(i64 40, ptr %427)
  %437 = getelementptr ptr, ptr %427, i32 %433
  %438 = getelementptr ptr, ptr %437, i32 2
  %439 = load ptr, ptr %438, align 8
  %440 = call ptr @behavior_wrapper(ptr %439, { ptr, ptr, ptr, i32 } %434, ptr %4)
  %441 = call i32 %440({ ptr, ptr, ptr, i32 } %434, { ptr, ptr, ptr, i32 } %434, ptr %3) #17
  store i32 %441, ptr %5, align 4
  %442 = load i32, ptr %419, align 4
  store ptr @i32_typ, ptr %7, align 8
  %443 = load i32, ptr %5, align 4
  store i32 %443, ptr %6, align 4
  %444 = load ptr, ptr %7, align 8
  %445 = insertvalue { ptr, i160 } undef, ptr %444, 0
  %446 = load i160, ptr %6, align 4
  %447 = insertvalue { ptr, i160 } %445, i160 %446, 1
  %448 = load ptr, ptr %339, align 8
  %449 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %448, 0
  %450 = load ptr, ptr %338, align 8
  %451 = insertvalue { ptr, ptr, ptr, i32 } %449, ptr %450, 1
  %452 = load ptr, ptr %337, align 8
  %453 = insertvalue { ptr, ptr, ptr, i32 } %451, ptr %452, 2
  %454 = load i32, ptr %336, align 4
  %455 = insertvalue { ptr, ptr, ptr, i32 } %453, i32 %454, 3
  %456 = getelementptr [2 x ptr], ptr %8, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %456, align 8
  %457 = getelementptr [2 x ptr], ptr %8, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %457, align 8
  %458 = call ptr @llvm.invariant.start.p0(i64 4, ptr %8)
  %459 = call ptr @llvm.invariant.start.p0(i64 664, ptr %448)
  %460 = getelementptr ptr, ptr %448, i32 %454
  %461 = getelementptr ptr, ptr %460, i32 18
  %462 = load ptr, ptr %461, align 8
  %463 = getelementptr { ptr, ptr }, ptr %9, i32 0, i32 0
  store ptr @i32_typ, ptr %463, align 8
  %464 = getelementptr { ptr, ptr }, ptr %9, i32 0, i32 1
  store ptr %444, ptr %464, align 8
  %465 = call ptr @behavior_wrapper(ptr %462, { ptr, ptr, ptr, i32 } %455, ptr %9)
  call void %465({ ptr, ptr, ptr, i32 } %455, { ptr, ptr, ptr, i32 } %455, ptr %8, i32 %442, { ptr, i160 } %447) #17
  store i32 1, ptr %10, align 4
  %466 = load i32, ptr %171, align 4
  %467 = load i32, ptr %10, align 4
  %468 = sub i32 %466, %467
  store i32 %468, ptr %11, align 4
  %469 = load i32, ptr %419, align 4
  %470 = load i32, ptr %11, align 4
  %471 = icmp eq i32 %469, %470
  store i1 %471, ptr %12, align 1
  %472 = load i1, ptr %12, align 1
  br i1 %472, label %473, label %._crit_edge1

._crit_edge1:                                     ; preds = %426
  br label %475

473:                                              ; preds = %426
  %474 = load i32, ptr %5, align 4
  store i32 %474, ptr %420, align 4
  br label %475

475:                                              ; preds = %._crit_edge1, %473
  store i1 true, ptr %13, align 1
  store ptr @i32_typ, ptr %15, align 8
  %476 = load i32, ptr %5, align 4
  store i32 %476, ptr %14, align 4
  %477 = load ptr, ptr %15, align 8
  %478 = insertvalue { ptr, i160 } undef, ptr %477, 0
  %479 = load i160, ptr %14, align 4
  %480 = insertvalue { ptr, i160 } %478, i160 %479, 1
  store ptr @bool_typ, ptr %17, align 8
  %481 = load i1, ptr %13, align 1
  store i1 %481, ptr %16, align 1
  %482 = load ptr, ptr %17, align 8
  %483 = insertvalue { ptr, i160 } undef, ptr %482, 0
  %484 = load i160, ptr %16, align 4
  %485 = insertvalue { ptr, i160 } %483, i160 %484, 1
  %486 = load ptr, ptr %414, align 8
  %487 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %486, 0
  %488 = load ptr, ptr %413, align 8
  %489 = insertvalue { ptr, ptr, ptr, i32 } %487, ptr %488, 1
  %490 = load ptr, ptr %412, align 8
  %491 = insertvalue { ptr, ptr, ptr, i32 } %489, ptr %490, 2
  %492 = load i32, ptr %411, align 4
  %493 = insertvalue { ptr, ptr, ptr, i32 } %491, i32 %492, 3
  %494 = getelementptr [2 x ptr], ptr %18, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %494, align 8
  %495 = getelementptr [2 x ptr], ptr %18, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %495, align 8
  %496 = call ptr @llvm.invariant.start.p0(i64 4, ptr %18)
  %497 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %486)
  %498 = getelementptr ptr, ptr %486, i32 %492
  %499 = getelementptr ptr, ptr %498, i32 21
  %500 = load ptr, ptr %499, align 8
  %501 = getelementptr { ptr, ptr }, ptr %19, i32 0, i32 0
  store ptr %477, ptr %501, align 8
  %502 = getelementptr { ptr, ptr }, ptr %19, i32 0, i32 1
  store ptr %482, ptr %502, align 8
  %503 = call ptr @behavior_wrapper(ptr %500, { ptr, ptr, ptr, i32 } %493, ptr %19)
  call void %503({ ptr, ptr, ptr, i32 } %493, { ptr, ptr, ptr, i32 } %493, ptr %18, { ptr, i160 } %480, { ptr, i160 } %485) #17
  store i32 1, ptr %20, align 4
  %504 = load i32, ptr %419, align 4
  %505 = load i32, ptr %20, align 4
  %506 = add i32 %504, %505
  store i32 %506, ptr %21, align 4
  %507 = load i32, ptr %21, align 4
  store i32 %507, ptr %419, align 4
  br label %508

508:                                              ; preds = %._crit_edge, %475
  %.reload19 = load i1, ptr %.reg2mem18, align 1
  br i1 %.reload19, label %._crit_edge2, label %509

._crit_edge2:                                     ; preds = %508
  br label %421

509:                                              ; preds = %508
  %510 = load ptr, ptr %414, align 8
  %511 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %510, 0
  %512 = load ptr, ptr %413, align 8
  %513 = insertvalue { ptr, ptr, ptr, i32 } %511, ptr %512, 1
  %514 = load ptr, ptr %412, align 8
  %515 = insertvalue { ptr, ptr, ptr, i32 } %513, ptr %514, 2
  %516 = load i32, ptr %411, align 4
  %517 = insertvalue { ptr, ptr, ptr, i32 } %515, i32 %516, 3
  %518 = call ptr @llvm.invariant.start.p0(i64 0, ptr %22)
  %519 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %510)
  %520 = getelementptr ptr, ptr %510, i32 %516
  %521 = getelementptr ptr, ptr %520, i32 22
  %522 = load ptr, ptr %521, align 8
  %523 = call ptr @behavior_wrapper(ptr %522, { ptr, ptr, ptr, i32 } %517, ptr %23)
  %524 = call i32 %523({ ptr, ptr, ptr, i32 } %517, { ptr, ptr, ptr, i32 } %517, ptr %22) #17
  store i32 %524, ptr %24, align 4
  %525 = load i32, ptr %24, align 4
  store i32 %525, ptr %344, align 4
  %526 = call i64 @clock()
  store i64 %526, ptr %25, align 4
  store i32 0, ptr %26, align 4
  %527 = load i32, ptr %26, align 4
  store i32 %527, ptr %419, align 4
  br label %528

528:                                              ; preds = %._crit_edge4, %509
  %529 = load i32, ptr %419, align 4
  %530 = load i32, ptr %171, align 4
  %531 = icmp slt i32 %529, %530
  store i1 %531, ptr %27, align 1
  %532 = load i1, ptr %27, align 1
  store i1 %532, ptr %.reg2mem15, align 1
  %.reload17 = load i1, ptr %.reg2mem15, align 1
  br i1 %.reload17, label %533, label %._crit_edge3

._crit_edge3:                                     ; preds = %528
  br label %589

533:                                              ; preds = %528
  %534 = load i32, ptr %419, align 4
  %535 = load ptr, ptr %339, align 8
  %536 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %535, 0
  %537 = load ptr, ptr %338, align 8
  %538 = insertvalue { ptr, ptr, ptr, i32 } %536, ptr %537, 1
  %539 = load ptr, ptr %337, align 8
  %540 = insertvalue { ptr, ptr, ptr, i32 } %538, ptr %539, 2
  %541 = load i32, ptr %336, align 4
  %542 = insertvalue { ptr, ptr, ptr, i32 } %540, i32 %541, 3
  %543 = getelementptr [1 x ptr], ptr %28, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %543, align 8
  %544 = call ptr @llvm.invariant.start.p0(i64 1, ptr %28)
  %545 = call ptr @llvm.invariant.start.p0(i64 664, ptr %535)
  %546 = getelementptr ptr, ptr %535, i32 %541
  %547 = getelementptr ptr, ptr %546, i32 17
  %548 = load ptr, ptr %547, align 8
  %549 = getelementptr { ptr }, ptr %29, i32 0, i32 0
  store ptr @i32_typ, ptr %549, align 8
  %550 = call ptr @behavior_wrapper(ptr %548, { ptr, ptr, ptr, i32 } %542, ptr %29)
  %551 = call { ptr, i160 } %550({ ptr, ptr, ptr, i32 } %542, { ptr, ptr, ptr, i32 } %542, ptr %28, i32 %534) #17
  store { ptr, i160 } %551, ptr %30, align 8
  %552 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 1
  %553 = load i32, ptr %552, align 4
  store i32 %553, ptr %31, align 4
  store i32 1, ptr %32, align 4
  %554 = load i32, ptr %31, align 4
  %555 = load i32, ptr %32, align 4
  %556 = add i32 %554, %555
  store i32 %556, ptr %33, align 4
  store ptr @i32_typ, ptr %35, align 8
  %557 = load i32, ptr %31, align 4
  store i32 %557, ptr %34, align 4
  %558 = load ptr, ptr %35, align 8
  %559 = insertvalue { ptr, i160 } undef, ptr %558, 0
  %560 = load i160, ptr %34, align 4
  %561 = insertvalue { ptr, i160 } %559, i160 %560, 1
  store ptr @i32_typ, ptr %37, align 8
  %562 = load i32, ptr %33, align 4
  store i32 %562, ptr %36, align 4
  %563 = load ptr, ptr %37, align 8
  %564 = insertvalue { ptr, i160 } undef, ptr %563, 0
  %565 = load i160, ptr %36, align 4
  %566 = insertvalue { ptr, i160 } %564, i160 %565, 1
  %567 = load ptr, ptr %241, align 8
  %568 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %567, 0
  %569 = load ptr, ptr %240, align 8
  %570 = insertvalue { ptr, ptr, ptr, i32 } %568, ptr %569, 1
  %571 = load ptr, ptr %239, align 8
  %572 = insertvalue { ptr, ptr, ptr, i32 } %570, ptr %571, 2
  %573 = load i32, ptr %238, align 4
  %574 = insertvalue { ptr, ptr, ptr, i32 } %572, i32 %573, 3
  %575 = getelementptr [2 x ptr], ptr %38, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %575, align 8
  %576 = getelementptr [2 x ptr], ptr %38, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %576, align 8
  %577 = call ptr @llvm.invariant.start.p0(i64 4, ptr %38)
  %578 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %567)
  %579 = getelementptr ptr, ptr %567, i32 %573
  %580 = getelementptr ptr, ptr %579, i32 21
  %581 = load ptr, ptr %580, align 8
  %582 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 0
  store ptr %558, ptr %582, align 8
  %583 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  store ptr %563, ptr %583, align 8
  %584 = call ptr @behavior_wrapper(ptr %581, { ptr, ptr, ptr, i32 } %574, ptr %39)
  call void %584({ ptr, ptr, ptr, i32 } %574, { ptr, ptr, ptr, i32 } %574, ptr %38, { ptr, i160 } %561, { ptr, i160 } %566) #17
  store i32 1, ptr %40, align 4
  %585 = load i32, ptr %419, align 4
  %586 = load i32, ptr %40, align 4
  %587 = add i32 %585, %586
  store i32 %587, ptr %41, align 4
  %588 = load i32, ptr %41, align 4
  store i32 %588, ptr %419, align 4
  br label %589

589:                                              ; preds = %._crit_edge3, %533
  %.reload16 = load i1, ptr %.reg2mem15, align 1
  br i1 %.reload16, label %._crit_edge4, label %590

._crit_edge4:                                     ; preds = %589
  br label %528

590:                                              ; preds = %589
  %591 = call i64 @clock()
  store i64 %591, ptr %42, align 4
  store i1 true, ptr %43, align 1
  store i32 0, ptr %44, align 4
  %592 = load i32, ptr %171, align 4
  %593 = load i32, ptr %44, align 4
  %594 = icmp sgt i32 %592, %593
  store i1 %594, ptr %45, align 1
  %595 = load i1, ptr %45, align 1
  store i1 %595, ptr %.reg2mem12, align 1
  %.reload14 = load i1, ptr %.reg2mem12, align 1
  br i1 %.reload14, label %596, label %695

596:                                              ; preds = %590
  store ptr @i32_typ, ptr %47, align 8
  %597 = load i32, ptr %420, align 4
  store i32 %597, ptr %46, align 4
  %598 = load ptr, ptr %47, align 8
  %599 = insertvalue { ptr, i160 } undef, ptr %598, 0
  %600 = load i160, ptr %46, align 4
  %601 = insertvalue { ptr, i160 } %599, i160 %600, 1
  %602 = load ptr, ptr %241, align 8
  %603 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %602, 0
  %604 = load ptr, ptr %240, align 8
  %605 = insertvalue { ptr, ptr, ptr, i32 } %603, ptr %604, 1
  %606 = load ptr, ptr %239, align 8
  %607 = insertvalue { ptr, ptr, ptr, i32 } %605, ptr %606, 2
  %608 = load i32, ptr %238, align 4
  %609 = insertvalue { ptr, ptr, ptr, i32 } %607, i32 %608, 3
  %610 = getelementptr [1 x ptr], ptr %48, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %610, align 8
  %611 = call ptr @llvm.invariant.start.p0(i64 1, ptr %48)
  %612 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %602)
  %613 = getelementptr ptr, ptr %602, i32 %608
  %614 = getelementptr ptr, ptr %613, i32 23
  %615 = load ptr, ptr %614, align 8
  %616 = getelementptr { ptr }, ptr %49, i32 0, i32 0
  store ptr %598, ptr %616, align 8
  %617 = call ptr @behavior_wrapper(ptr %615, { ptr, ptr, ptr, i32 } %609, ptr %49)
  %618 = call { ptr, i160 } %617({ ptr, ptr, ptr, i32 } %609, { ptr, ptr, ptr, i32 } %609, ptr %48, { ptr, i160 } %601) #17
  store { ptr, i160 } %618, ptr %50, align 8
  %619 = getelementptr { ptr, i32 }, ptr %50, i32 0, i32 0
  %620 = load ptr, ptr %619, align 8
  store ptr %620, ptr %52, align 8
  %621 = getelementptr { ptr, i32 }, ptr %50, i32 0, i32 1
  %622 = load i32, ptr %621, align 4
  store i32 %622, ptr %51, align 4
  %623 = load ptr, ptr %52, align 8
  %624 = ptrtoint ptr %623 to i64
  %625 = icmp eq i64 %624, ptrtoint (ptr @nil_typ to i64)
  %626 = icmp eq i64 %624, 0
  %627 = or i1 %625, %626
  store i1 %627, ptr %53, align 1
  %628 = load i1, ptr %53, align 1
  br i1 %628, label %629, label %._crit_edge5

._crit_edge5:                                     ; preds = %596
  br label %635

629:                                              ; preds = %596
  %630 = load [0 x i8], ptr %51, align 1
  store [0 x i8] %630, ptr %54, align 1
  store i1 false, ptr %55, align 1
  %631 = load i1, ptr %55, align 1
  store i1 %631, ptr %43, align 1
  %632 = load [0 x i8], ptr %54, align 1
  store [0 x i8] %632, ptr %56, align 1
  store ptr @nil_typ, ptr %57, align 8
  %633 = load ptr, ptr %57, align 8
  store ptr %633, ptr %52, align 8
  %634 = load i32, ptr %56, align 4
  store i32 %634, ptr %51, align 4
  br label %635

635:                                              ; preds = %._crit_edge5, %629
  %636 = load ptr, ptr %52, align 8
  %637 = ptrtoint ptr %636 to i64
  %638 = icmp eq i64 %637, ptrtoint (ptr @nil_typ to i64)
  %639 = icmp eq i64 %637, 0
  %640 = or i1 %638, %639
  %641 = icmp eq i1 %640, false
  store i1 %641, ptr %58, align 1
  %642 = load i1, ptr %58, align 1
  br i1 %642, label %643, label %658

643:                                              ; preds = %635
  %644 = load i32, ptr %51, align 4
  store i32 %644, ptr %59, align 4
  store i32 1, ptr %60, align 4
  %645 = load i32, ptr %420, align 4
  %646 = load i32, ptr %60, align 4
  %647 = add i32 %645, %646
  store i32 %647, ptr %61, align 4
  %648 = load i32, ptr %59, align 4
  %649 = load i32, ptr %61, align 4
  %650 = icmp ne i32 %648, %649
  store i1 %650, ptr %62, align 1
  %651 = load i1, ptr %62, align 1
  br i1 %651, label %652, label %._crit_edge6

._crit_edge6:                                     ; preds = %643
  br label %654

652:                                              ; preds = %643
  store i1 false, ptr %63, align 1
  %653 = load i1, ptr %63, align 1
  store i1 %653, ptr %43, align 1
  br label %654

654:                                              ; preds = %._crit_edge6, %652
  %655 = load i32, ptr %59, align 4
  store i32 %655, ptr %64, align 4
  store ptr @i32_typ, ptr %65, align 8
  %656 = load ptr, ptr %65, align 8
  store ptr %656, ptr %52, align 8
  %657 = load i32, ptr %64, align 4
  store i32 %657, ptr %51, align 4
  br label %673

658:                                              ; preds = %635
  store i1 false, ptr %66, align 1
  %659 = load ptr, ptr %52, align 8
  %660 = ptrtoint ptr %659 to i64
  %661 = icmp eq i64 %660, ptrtoint (ptr @nil_typ to i64)
  %662 = icmp eq i64 %660, 0
  %663 = or i1 %661, %662
  store i1 %663, ptr %67, align 1
  %664 = load i1, ptr %66, align 1
  %665 = load i1, ptr %67, align 1
  %666 = icmp eq i1 %664, %665
  store i1 %666, ptr %68, align 1
  %667 = load i1, ptr %68, align 1
  br i1 %667, label %668, label %._crit_edge7

._crit_edge7:                                     ; preds = %658
  br label %670

668:                                              ; preds = %658
  store i1 false, ptr %69, align 1
  %669 = load i1, ptr %69, align 1
  store i1 %669, ptr %43, align 1
  br label %670

670:                                              ; preds = %._crit_edge7, %668
  %671 = load ptr, ptr %52, align 8
  store ptr %671, ptr %52, align 8
  %672 = load i32, ptr %51, align 4
  store i32 %672, ptr %51, align 4
  br label %673

673:                                              ; preds = %670, %654
  %674 = load ptr, ptr %241, align 8
  %675 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %674, 0
  %676 = load ptr, ptr %240, align 8
  %677 = insertvalue { ptr, ptr, ptr, i32 } %675, ptr %676, 1
  %678 = load ptr, ptr %239, align 8
  %679 = insertvalue { ptr, ptr, ptr, i32 } %677, ptr %678, 2
  %680 = load i32, ptr %238, align 4
  %681 = insertvalue { ptr, ptr, ptr, i32 } %679, i32 %680, 3
  %682 = call ptr @llvm.invariant.start.p0(i64 0, ptr %70)
  %683 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %674)
  %684 = getelementptr ptr, ptr %674, i32 %680
  %685 = getelementptr ptr, ptr %684, i32 22
  %686 = load ptr, ptr %685, align 8
  %687 = call ptr @behavior_wrapper(ptr %686, { ptr, ptr, ptr, i32 } %681, ptr %71)
  %688 = call i32 %687({ ptr, ptr, ptr, i32 } %681, { ptr, ptr, ptr, i32 } %681, ptr %70) #17
  store i32 %688, ptr %72, align 4
  %689 = load i32, ptr %72, align 4
  %690 = load i32, ptr %344, align 4
  %691 = icmp ne i32 %689, %690
  store i1 %691, ptr %73, align 1
  %692 = load i1, ptr %73, align 1
  %693 = xor i1 %692, true
  %694 = zext i1 %693 to i32
  store i32 %694, ptr %.reg2mem10, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload11, ptr %.reg2mem21, align 4
  br label %717

695:                                              ; preds = %590
  %696 = load ptr, ptr %241, align 8
  %697 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %696, 0
  %698 = load ptr, ptr %240, align 8
  %699 = insertvalue { ptr, ptr, ptr, i32 } %697, ptr %698, 1
  %700 = load ptr, ptr %239, align 8
  %701 = insertvalue { ptr, ptr, ptr, i32 } %699, ptr %700, 2
  %702 = load i32, ptr %238, align 4
  %703 = insertvalue { ptr, ptr, ptr, i32 } %701, i32 %702, 3
  %704 = call ptr @llvm.invariant.start.p0(i64 0, ptr %75)
  %705 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %696)
  %706 = getelementptr ptr, ptr %696, i32 %702
  %707 = getelementptr ptr, ptr %706, i32 22
  %708 = load ptr, ptr %707, align 8
  %709 = call ptr @behavior_wrapper(ptr %708, { ptr, ptr, ptr, i32 } %703, ptr %76)
  %710 = call i32 %709({ ptr, ptr, ptr, i32 } %703, { ptr, ptr, ptr, i32 } %703, ptr %75) #17
  store i32 %710, ptr %77, align 4
  store i32 0, ptr %78, align 4
  %711 = load i32, ptr %77, align 4
  %712 = load i32, ptr %78, align 4
  %713 = icmp ne i32 %711, %712
  store i1 %713, ptr %79, align 1
  %714 = load i1, ptr %79, align 1
  %715 = xor i1 %714, true
  %716 = zext i1 %715 to i32
  store i32 %716, ptr %.reg2mem8, align 4
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  store i32 %.reload9, ptr %.reg2mem21, align 4
  br label %717

717:                                              ; preds = %695, %673
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  store i32 %.reload22, ptr %.reg2mem, align 4
  br label %718

718:                                              ; preds = %717
  %.reload = load i32, ptr %.reg2mem, align 4
  %719 = zext i32 %.reload to i64
  %720 = trunc i64 %719 to i32
  switch i32 %720, label %724 [
    i32 0, label %721
  ]

721:                                              ; preds = %718
  %.reload13 = load i1, ptr %.reg2mem12, align 1
  %722 = select i1 %.reload13, ptr %74, ptr %80
  store i1 false, ptr %722, align 1
  %723 = load i1, ptr %722, align 1
  store i1 %723, ptr %43, align 1
  br label %725

724:                                              ; preds = %718
  br label %725

725:                                              ; preds = %724, %721
  store i32 14, ptr %81, align 4
  %726 = load i32, ptr %81, align 4
  %727 = sext i32 %726 to i64
  %728 = mul i64 %727, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %729 = call ptr @bump_malloc(i64 %728)
  store ptr %729, ptr %82, align 8
  %730 = getelementptr { ptr }, ptr %82, i32 0, i32 0
  %731 = load ptr, ptr %730, align 8
  store ptr %731, ptr %83, align 8
  store i32 0, ptr %84, align 4
  %732 = load ptr, ptr %83, align 8
  %733 = load i32, ptr %84, align 4
  %734 = sext i32 %733 to i64
  %735 = mul i64 ptrtoint (ptr getelementptr ([13 x i8], ptr null, i32 1) to i64), %734
  %736 = getelementptr i8, ptr %732, i64 %735
  %737 = load <13 x i8>, ptr @vmshr_Insert_Random, align 16
  store <13 x i8> %737, ptr %736, align 16
  store i32 13, ptr %85, align 4
  store i32 14, ptr %86, align 4
  store ptr @String, ptr %87, align 8
  %738 = load ptr, ptr %87, align 8
  %739 = getelementptr ptr, ptr %738, i32 6
  %740 = load ptr, ptr %739, align 8
  %741 = call { i64, i64 } @size_wrapper(ptr %740, ptr %87)
  %742 = extractvalue { i64, i64 } %741, 0
  %743 = call ptr @bump_malloc(i64 %742)
  store ptr @String, ptr %91, align 8
  store ptr %743, ptr %90, align 8
  store i32 10, ptr %88, align 4
  store i32 13, ptr %92, align 4
  store i32 14, ptr %93, align 4
  %744 = load ptr, ptr %83, align 8
  %745 = insertvalue { ptr } undef, ptr %744, 0
  %746 = load i32, ptr %92, align 4
  %747 = load i32, ptr %93, align 4
  %748 = load ptr, ptr %91, align 8
  %749 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %748, 0
  %750 = load ptr, ptr %90, align 8
  %751 = insertvalue { ptr, ptr, ptr, i32 } %749, ptr %750, 1
  %752 = load ptr, ptr %89, align 8
  %753 = insertvalue { ptr, ptr, ptr, i32 } %751, ptr %752, 2
  %754 = load i32, ptr %88, align 4
  %755 = insertvalue { ptr, ptr, ptr, i32 } %753, i32 %754, 3
  %756 = getelementptr [3 x ptr], ptr %94, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %756, align 8
  %757 = getelementptr [3 x ptr], ptr %94, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %757, align 8
  %758 = getelementptr [3 x ptr], ptr %94, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %758, align 8
  %759 = call ptr @llvm.invariant.start.p0(i64 9, ptr %94)
  %760 = call ptr @llvm.invariant.start.p0(i64 632, ptr %748)
  %761 = getelementptr ptr, ptr %748, i32 %754
  %762 = getelementptr ptr, ptr %761, i32 6
  %763 = load ptr, ptr %762, align 8
  %764 = getelementptr { ptr, ptr, ptr }, ptr %95, i32 0, i32 0
  store ptr @buffer_typ, ptr %764, align 8
  %765 = getelementptr { ptr, ptr, ptr }, ptr %95, i32 0, i32 1
  store ptr @i32_typ, ptr %765, align 8
  %766 = getelementptr { ptr, ptr, ptr }, ptr %95, i32 0, i32 2
  store ptr @i32_typ, ptr %766, align 8
  %767 = call ptr @behavior_wrapper(ptr %763, { ptr, ptr, ptr, i32 } %755, ptr %95)
  call void %767({ ptr, ptr, ptr, i32 } %755, { ptr, ptr, ptr, i32 } %755, ptr %94, { ptr } %745, i32 %746, i32 %747) #17
  %768 = load i64, ptr %42, align 4
  %769 = load i64, ptr %25, align 4
  %770 = sub i64 %768, %769
  store i64 %770, ptr %96, align 4
  %771 = load ptr, ptr %91, align 8
  %772 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %771, 0
  %773 = load ptr, ptr %90, align 8
  %774 = insertvalue { ptr, ptr, ptr, i32 } %772, ptr %773, 1
  %775 = load ptr, ptr %89, align 8
  %776 = insertvalue { ptr, ptr, ptr, i32 } %774, ptr %775, 2
  %777 = load i32, ptr %88, align 4
  %778 = insertvalue { ptr, ptr, ptr, i32 } %776, i32 %777, 3
  %779 = load i32, ptr %171, align 4
  %780 = load i64, ptr %96, align 4
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %778, i32 %779, i64 %780)
  store i32 19, ptr %97, align 4
  %781 = load i32, ptr %97, align 4
  %782 = sext i32 %781 to i64
  %783 = mul i64 %782, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %784 = call ptr @bump_malloc(i64 %783)
  store ptr %784, ptr %98, align 8
  %785 = getelementptr { ptr }, ptr %98, i32 0, i32 0
  %786 = load ptr, ptr %785, align 8
  store ptr %786, ptr %99, align 8
  store i32 0, ptr %100, align 4
  %787 = load ptr, ptr %99, align 8
  %788 = load i32, ptr %100, align 4
  %789 = sext i32 %788 to i64
  %790 = mul i64 ptrtoint (ptr getelementptr ([18 x i8], ptr null, i32 1) to i64), %789
  %791 = getelementptr i8, ptr %787, i64 %790
  %792 = load <18 x i8>, ptr @wjvwz_____Verification_, align 32
  store <18 x i8> %792, ptr %791, align 32
  store i32 18, ptr %101, align 4
  store i32 19, ptr %102, align 4
  store ptr @String, ptr %103, align 8
  %793 = load ptr, ptr %103, align 8
  %794 = getelementptr ptr, ptr %793, i32 6
  %795 = load ptr, ptr %794, align 8
  %796 = call { i64, i64 } @size_wrapper(ptr %795, ptr %103)
  %797 = extractvalue { i64, i64 } %796, 0
  %798 = call ptr @bump_malloc(i64 %797)
  %799 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 1
  %800 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 3
  store ptr @String, ptr %104, align 8
  store ptr %798, ptr %799, align 8
  store i32 10, ptr %800, align 4
  store i32 18, ptr %105, align 4
  store i32 19, ptr %106, align 4
  %801 = load ptr, ptr %99, align 8
  %802 = insertvalue { ptr } undef, ptr %801, 0
  %803 = load i32, ptr %105, align 4
  %804 = load i32, ptr %106, align 4
  %805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 0
  %806 = load ptr, ptr %805, align 8
  %807 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %806, 0
  %808 = load ptr, ptr %799, align 8
  %809 = insertvalue { ptr, ptr, ptr, i32 } %807, ptr %808, 1
  %810 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 2
  %811 = load ptr, ptr %810, align 8
  %812 = insertvalue { ptr, ptr, ptr, i32 } %809, ptr %811, 2
  %813 = load i32, ptr %800, align 4
  %814 = insertvalue { ptr, ptr, ptr, i32 } %812, i32 %813, 3
  %815 = getelementptr [3 x ptr], ptr %107, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %815, align 8
  %816 = getelementptr [3 x ptr], ptr %107, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %816, align 8
  %817 = getelementptr [3 x ptr], ptr %107, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %817, align 8
  %818 = call ptr @llvm.invariant.start.p0(i64 9, ptr %107)
  %819 = call ptr @llvm.invariant.start.p0(i64 632, ptr %806)
  %820 = getelementptr ptr, ptr %806, i32 %813
  %821 = getelementptr ptr, ptr %820, i32 6
  %822 = load ptr, ptr %821, align 8
  %823 = getelementptr { ptr, ptr, ptr }, ptr %108, i32 0, i32 0
  store ptr @buffer_typ, ptr %823, align 8
  %824 = getelementptr { ptr, ptr, ptr }, ptr %108, i32 0, i32 1
  store ptr @i32_typ, ptr %824, align 8
  %825 = getelementptr { ptr, ptr, ptr }, ptr %108, i32 0, i32 2
  store ptr @i32_typ, ptr %825, align 8
  %826 = call ptr @behavior_wrapper(ptr %822, { ptr, ptr, ptr, i32 } %814, ptr %108)
  call void %826({ ptr, ptr, ptr, i32 } %814, { ptr, ptr, ptr, i32 } %814, ptr %107, { ptr } %802, i32 %803, i32 %804) #17
  %827 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 0
  %828 = load ptr, ptr %827, align 8
  %829 = insertvalue { ptr, i160 } undef, ptr %828, 0
  %830 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 1
  %831 = load i160, ptr %830, align 4
  %832 = insertvalue { ptr, i160 } %829, i160 %831, 1
  %833 = getelementptr [1 x ptr], ptr %109, i32 0, i32 0
  store ptr @_parameterization_String, ptr %833, align 8
  %834 = call ptr @llvm.invariant.start.p0(i64 1, ptr %109)
  %835 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %836 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %837 = getelementptr { ptr }, ptr %110, i32 0, i32 0
  store ptr %828, ptr %837, align 8
  %838 = call ptr @class_behavior_wrapper(ptr %836, ptr %110)
  call void %838(ptr %109, { ptr, i160 } %832) #17
  %839 = load i1, ptr %43, align 1
  br i1 %839, label %840, label %899

840:                                              ; preds = %725
  store i32 5, ptr %111, align 4
  %841 = load i32, ptr %111, align 4
  %842 = sext i32 %841 to i64
  %843 = mul i64 %842, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %844 = call ptr @bump_malloc(i64 %843)
  store ptr %844, ptr %112, align 8
  %845 = getelementptr { ptr }, ptr %112, i32 0, i32 0
  %846 = load ptr, ptr %845, align 8
  store ptr %846, ptr %113, align 8
  store i32 0, ptr %114, align 4
  %847 = load ptr, ptr %113, align 8
  %848 = load i32, ptr %114, align 4
  %849 = sext i32 %848 to i64
  %850 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %849
  %851 = getelementptr i8, ptr %847, i64 %850
  %852 = load <4 x i8>, ptr @wwxbx_PASS, align 4
  store <4 x i8> %852, ptr %851, align 4
  store i32 4, ptr %115, align 4
  store i32 5, ptr %116, align 4
  store ptr @String, ptr %117, align 8
  %853 = load ptr, ptr %117, align 8
  %854 = getelementptr ptr, ptr %853, i32 6
  %855 = load ptr, ptr %854, align 8
  %856 = call { i64, i64 } @size_wrapper(ptr %855, ptr %117)
  %857 = extractvalue { i64, i64 } %856, 0
  %858 = call ptr @bump_malloc(i64 %857)
  %859 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %860 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  store ptr @String, ptr %118, align 8
  store ptr %858, ptr %859, align 8
  store i32 10, ptr %860, align 4
  store i32 4, ptr %119, align 4
  store i32 5, ptr %120, align 4
  %861 = load ptr, ptr %113, align 8
  %862 = insertvalue { ptr } undef, ptr %861, 0
  %863 = load i32, ptr %119, align 4
  %864 = load i32, ptr %120, align 4
  %865 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %866 = load ptr, ptr %865, align 8
  %867 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %866, 0
  %868 = load ptr, ptr %859, align 8
  %869 = insertvalue { ptr, ptr, ptr, i32 } %867, ptr %868, 1
  %870 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %871 = load ptr, ptr %870, align 8
  %872 = insertvalue { ptr, ptr, ptr, i32 } %869, ptr %871, 2
  %873 = load i32, ptr %860, align 4
  %874 = insertvalue { ptr, ptr, ptr, i32 } %872, i32 %873, 3
  %875 = getelementptr [3 x ptr], ptr %121, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %875, align 8
  %876 = getelementptr [3 x ptr], ptr %121, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %876, align 8
  %877 = getelementptr [3 x ptr], ptr %121, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %877, align 8
  %878 = call ptr @llvm.invariant.start.p0(i64 9, ptr %121)
  %879 = call ptr @llvm.invariant.start.p0(i64 632, ptr %866)
  %880 = getelementptr ptr, ptr %866, i32 %873
  %881 = getelementptr ptr, ptr %880, i32 6
  %882 = load ptr, ptr %881, align 8
  %883 = getelementptr { ptr, ptr, ptr }, ptr %122, i32 0, i32 0
  store ptr @buffer_typ, ptr %883, align 8
  %884 = getelementptr { ptr, ptr, ptr }, ptr %122, i32 0, i32 1
  store ptr @i32_typ, ptr %884, align 8
  %885 = getelementptr { ptr, ptr, ptr }, ptr %122, i32 0, i32 2
  store ptr @i32_typ, ptr %885, align 8
  %886 = call ptr @behavior_wrapper(ptr %882, { ptr, ptr, ptr, i32 } %874, ptr %122)
  call void %886({ ptr, ptr, ptr, i32 } %874, { ptr, ptr, ptr, i32 } %874, ptr %121, { ptr } %862, i32 %863, i32 %864) #17
  %887 = getelementptr { ptr, i160 }, ptr %118, i32 0, i32 0
  %888 = load ptr, ptr %887, align 8
  %889 = insertvalue { ptr, i160 } undef, ptr %888, 0
  %890 = getelementptr { ptr, i160 }, ptr %118, i32 0, i32 1
  %891 = load i160, ptr %890, align 4
  %892 = insertvalue { ptr, i160 } %889, i160 %891, 1
  %893 = getelementptr [1 x ptr], ptr %123, i32 0, i32 0
  store ptr @_parameterization_String, ptr %893, align 8
  %894 = call ptr @llvm.invariant.start.p0(i64 1, ptr %123)
  %895 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %896 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %897 = getelementptr { ptr }, ptr %124, i32 0, i32 0
  store ptr %888, ptr %897, align 8
  %898 = call ptr @class_behavior_wrapper(ptr %896, ptr %124)
  call void %898(ptr %123, { ptr, i160 } %892) #17
  br label %958

899:                                              ; preds = %725
  store i32 5, ptr %125, align 4
  %900 = load i32, ptr %125, align 4
  %901 = sext i32 %900 to i64
  %902 = mul i64 %901, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %903 = call ptr @bump_malloc(i64 %902)
  store ptr %903, ptr %126, align 8
  %904 = getelementptr { ptr }, ptr %126, i32 0, i32 0
  %905 = load ptr, ptr %904, align 8
  store ptr %905, ptr %127, align 8
  store i32 0, ptr %128, align 4
  %906 = load ptr, ptr %127, align 8
  %907 = load i32, ptr %128, align 4
  %908 = sext i32 %907 to i64
  %909 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %908
  %910 = getelementptr i8, ptr %906, i64 %909
  %911 = load <4 x i8>, ptr @rogds_FAIL, align 4
  store <4 x i8> %911, ptr %910, align 4
  store i32 4, ptr %129, align 4
  store i32 5, ptr %130, align 4
  store ptr @String, ptr %131, align 8
  %912 = load ptr, ptr %131, align 8
  %913 = getelementptr ptr, ptr %912, i32 6
  %914 = load ptr, ptr %913, align 8
  %915 = call { i64, i64 } @size_wrapper(ptr %914, ptr %131)
  %916 = extractvalue { i64, i64 } %915, 0
  %917 = call ptr @bump_malloc(i64 %916)
  %918 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 1
  %919 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 3
  store ptr @String, ptr %132, align 8
  store ptr %917, ptr %918, align 8
  store i32 10, ptr %919, align 4
  store i32 4, ptr %133, align 4
  store i32 5, ptr %134, align 4
  %920 = load ptr, ptr %127, align 8
  %921 = insertvalue { ptr } undef, ptr %920, 0
  %922 = load i32, ptr %133, align 4
  %923 = load i32, ptr %134, align 4
  %924 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 0
  %925 = load ptr, ptr %924, align 8
  %926 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %925, 0
  %927 = load ptr, ptr %918, align 8
  %928 = insertvalue { ptr, ptr, ptr, i32 } %926, ptr %927, 1
  %929 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 2
  %930 = load ptr, ptr %929, align 8
  %931 = insertvalue { ptr, ptr, ptr, i32 } %928, ptr %930, 2
  %932 = load i32, ptr %919, align 4
  %933 = insertvalue { ptr, ptr, ptr, i32 } %931, i32 %932, 3
  %934 = getelementptr [3 x ptr], ptr %135, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %934, align 8
  %935 = getelementptr [3 x ptr], ptr %135, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %935, align 8
  %936 = getelementptr [3 x ptr], ptr %135, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %936, align 8
  %937 = call ptr @llvm.invariant.start.p0(i64 9, ptr %135)
  %938 = call ptr @llvm.invariant.start.p0(i64 632, ptr %925)
  %939 = getelementptr ptr, ptr %925, i32 %932
  %940 = getelementptr ptr, ptr %939, i32 6
  %941 = load ptr, ptr %940, align 8
  %942 = getelementptr { ptr, ptr, ptr }, ptr %136, i32 0, i32 0
  store ptr @buffer_typ, ptr %942, align 8
  %943 = getelementptr { ptr, ptr, ptr }, ptr %136, i32 0, i32 1
  store ptr @i32_typ, ptr %943, align 8
  %944 = getelementptr { ptr, ptr, ptr }, ptr %136, i32 0, i32 2
  store ptr @i32_typ, ptr %944, align 8
  %945 = call ptr @behavior_wrapper(ptr %941, { ptr, ptr, ptr, i32 } %933, ptr %136)
  call void %945({ ptr, ptr, ptr, i32 } %933, { ptr, ptr, ptr, i32 } %933, ptr %135, { ptr } %921, i32 %922, i32 %923) #17
  %946 = getelementptr { ptr, i160 }, ptr %132, i32 0, i32 0
  %947 = load ptr, ptr %946, align 8
  %948 = insertvalue { ptr, i160 } undef, ptr %947, 0
  %949 = getelementptr { ptr, i160 }, ptr %132, i32 0, i32 1
  %950 = load i160, ptr %949, align 4
  %951 = insertvalue { ptr, i160 } %948, i160 %950, 1
  %952 = getelementptr [1 x ptr], ptr %137, i32 0, i32 0
  store ptr @_parameterization_String, ptr %952, align 8
  %953 = call ptr @llvm.invariant.start.p0(i64 1, ptr %137)
  %954 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %955 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %956 = getelementptr { ptr }, ptr %138, i32 0, i32 0
  store ptr %947, ptr %956, align 8
  %957 = call ptr @class_behavior_wrapper(ptr %955, ptr %138)
  call void %957(ptr %137, { ptr, i160 } %951) #17
  br label %958

958:                                              ; preds = %899, %840
  store i32 28, ptr %139, align 4
  %959 = load i32, ptr %139, align 4
  %960 = sext i32 %959 to i64
  %961 = mul i64 %960, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %962 = call ptr @bump_malloc(i64 %961)
  store ptr %962, ptr %140, align 8
  %963 = getelementptr { ptr }, ptr %140, i32 0, i32 0
  %964 = load ptr, ptr %963, align 8
  store ptr %964, ptr %141, align 8
  store i32 0, ptr %142, align 4
  %965 = load ptr, ptr %141, align 8
  %966 = load i32, ptr %142, align 4
  %967 = sext i32 %966 to i64
  %968 = mul i64 ptrtoint (ptr getelementptr ([27 x i8], ptr null, i32 1) to i64), %967
  %969 = getelementptr i8, ptr %965, i64 %968
  %970 = load <27 x i8>, ptr @oxayi_____Expected_unique_size_, align 32
  store <27 x i8> %970, ptr %969, align 32
  store i32 27, ptr %143, align 4
  store i32 28, ptr %144, align 4
  store ptr @String, ptr %145, align 8
  %971 = load ptr, ptr %145, align 8
  %972 = getelementptr ptr, ptr %971, i32 6
  %973 = load ptr, ptr %972, align 8
  %974 = call { i64, i64 } @size_wrapper(ptr %973, ptr %145)
  %975 = extractvalue { i64, i64 } %974, 0
  %976 = call ptr @bump_malloc(i64 %975)
  %977 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %978 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  store ptr @String, ptr %146, align 8
  store ptr %976, ptr %977, align 8
  store i32 10, ptr %978, align 4
  store i32 27, ptr %147, align 4
  store i32 28, ptr %148, align 4
  %979 = load ptr, ptr %141, align 8
  %980 = insertvalue { ptr } undef, ptr %979, 0
  %981 = load i32, ptr %147, align 4
  %982 = load i32, ptr %148, align 4
  %983 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 0
  %984 = load ptr, ptr %983, align 8
  %985 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %984, 0
  %986 = load ptr, ptr %977, align 8
  %987 = insertvalue { ptr, ptr, ptr, i32 } %985, ptr %986, 1
  %988 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 2
  %989 = load ptr, ptr %988, align 8
  %990 = insertvalue { ptr, ptr, ptr, i32 } %987, ptr %989, 2
  %991 = load i32, ptr %978, align 4
  %992 = insertvalue { ptr, ptr, ptr, i32 } %990, i32 %991, 3
  %993 = getelementptr [3 x ptr], ptr %149, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %993, align 8
  %994 = getelementptr [3 x ptr], ptr %149, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %994, align 8
  %995 = getelementptr [3 x ptr], ptr %149, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %995, align 8
  %996 = call ptr @llvm.invariant.start.p0(i64 9, ptr %149)
  %997 = call ptr @llvm.invariant.start.p0(i64 632, ptr %984)
  %998 = getelementptr ptr, ptr %984, i32 %991
  %999 = getelementptr ptr, ptr %998, i32 6
  %1000 = load ptr, ptr %999, align 8
  %1001 = getelementptr { ptr, ptr, ptr }, ptr %150, i32 0, i32 0
  store ptr @buffer_typ, ptr %1001, align 8
  %1002 = getelementptr { ptr, ptr, ptr }, ptr %150, i32 0, i32 1
  store ptr @i32_typ, ptr %1002, align 8
  %1003 = getelementptr { ptr, ptr, ptr }, ptr %150, i32 0, i32 2
  store ptr @i32_typ, ptr %1003, align 8
  %1004 = call ptr @behavior_wrapper(ptr %1000, { ptr, ptr, ptr, i32 } %992, ptr %150)
  call void %1004({ ptr, ptr, ptr, i32 } %992, { ptr, ptr, ptr, i32 } %992, ptr %149, { ptr } %980, i32 %981, i32 %982) #17
  %1005 = getelementptr { ptr, i160 }, ptr %146, i32 0, i32 0
  %1006 = load ptr, ptr %1005, align 8
  %1007 = insertvalue { ptr, i160 } undef, ptr %1006, 0
  %1008 = getelementptr { ptr, i160 }, ptr %146, i32 0, i32 1
  %1009 = load i160, ptr %1008, align 4
  %1010 = insertvalue { ptr, i160 } %1007, i160 %1009, 1
  %1011 = getelementptr [1 x ptr], ptr %151, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1011, align 8
  %1012 = call ptr @llvm.invariant.start.p0(i64 1, ptr %151)
  %1013 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1014 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1015 = getelementptr { ptr }, ptr %152, i32 0, i32 0
  store ptr %1006, ptr %1015, align 8
  %1016 = call ptr @class_behavior_wrapper(ptr %1014, ptr %152)
  call void %1016(ptr %151, { ptr, i160 } %1010) #17
  %1017 = load i32, ptr %344, align 4
  store i32 %1017, ptr %153, align 4
  store ptr @i32_typ, ptr %154, align 8
  %1018 = load ptr, ptr %154, align 8
  %1019 = insertvalue { ptr, i160 } undef, ptr %1018, 0
  %1020 = load i160, ptr %153, align 4
  %1021 = insertvalue { ptr, i160 } %1019, i160 %1020, 1
  %1022 = getelementptr [1 x ptr], ptr %155, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1022, align 8
  %1023 = call ptr @llvm.invariant.start.p0(i64 1, ptr %155)
  %1024 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1025 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1026 = getelementptr { ptr }, ptr %156, i32 0, i32 0
  store ptr %1018, ptr %1026, align 8
  %1027 = call ptr @class_behavior_wrapper(ptr %1025, ptr %156)
  call void %1027(ptr %155, { ptr, i160 } %1021) #17
  store i32 2, ptr %157, align 4
  %1028 = load i32, ptr %157, align 4
  %1029 = sext i32 %1028 to i64
  %1030 = mul i64 %1029, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1031 = call ptr @bump_malloc(i64 %1030)
  store ptr %1031, ptr %158, align 8
  %1032 = getelementptr { ptr }, ptr %158, i32 0, i32 0
  %1033 = load ptr, ptr %1032, align 8
  store ptr %1033, ptr %159, align 8
  store i32 0, ptr %160, align 4
  %1034 = load ptr, ptr %159, align 8
  %1035 = load i32, ptr %160, align 4
  %1036 = sext i32 %1035 to i64
  %1037 = mul i64 ptrtoint (ptr getelementptr ([1 x i8], ptr null, i32 1) to i64), %1036
  %1038 = getelementptr i8, ptr %1034, i64 %1037
  %1039 = load <1 x i8>, ptr @iofgr_, align 1
  store <1 x i8> %1039, ptr %1038, align 1
  store i32 1, ptr %161, align 4
  store i32 2, ptr %162, align 4
  store ptr @String, ptr %163, align 8
  %1040 = load ptr, ptr %163, align 8
  %1041 = getelementptr ptr, ptr %1040, i32 6
  %1042 = load ptr, ptr %1041, align 8
  %1043 = call { i64, i64 } @size_wrapper(ptr %1042, ptr %163)
  %1044 = extractvalue { i64, i64 } %1043, 0
  %1045 = call ptr @bump_malloc(i64 %1044)
  %1046 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 1
  %1047 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 3
  store ptr @String, ptr %164, align 8
  store ptr %1045, ptr %1046, align 8
  store i32 10, ptr %1047, align 4
  store i32 1, ptr %165, align 4
  store i32 2, ptr %166, align 4
  %1048 = load ptr, ptr %159, align 8
  %1049 = insertvalue { ptr } undef, ptr %1048, 0
  %1050 = load i32, ptr %165, align 4
  %1051 = load i32, ptr %166, align 4
  %1052 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 0
  %1053 = load ptr, ptr %1052, align 8
  %1054 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1053, 0
  %1055 = load ptr, ptr %1046, align 8
  %1056 = insertvalue { ptr, ptr, ptr, i32 } %1054, ptr %1055, 1
  %1057 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 2
  %1058 = load ptr, ptr %1057, align 8
  %1059 = insertvalue { ptr, ptr, ptr, i32 } %1056, ptr %1058, 2
  %1060 = load i32, ptr %1047, align 4
  %1061 = insertvalue { ptr, ptr, ptr, i32 } %1059, i32 %1060, 3
  %1062 = getelementptr [3 x ptr], ptr %167, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1062, align 8
  %1063 = getelementptr [3 x ptr], ptr %167, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1063, align 8
  %1064 = getelementptr [3 x ptr], ptr %167, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1064, align 8
  %1065 = call ptr @llvm.invariant.start.p0(i64 9, ptr %167)
  %1066 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1053)
  %1067 = getelementptr ptr, ptr %1053, i32 %1060
  %1068 = getelementptr ptr, ptr %1067, i32 6
  %1069 = load ptr, ptr %1068, align 8
  %1070 = getelementptr { ptr, ptr, ptr }, ptr %168, i32 0, i32 0
  store ptr @buffer_typ, ptr %1070, align 8
  %1071 = getelementptr { ptr, ptr, ptr }, ptr %168, i32 0, i32 1
  store ptr @i32_typ, ptr %1071, align 8
  %1072 = getelementptr { ptr, ptr, ptr }, ptr %168, i32 0, i32 2
  store ptr @i32_typ, ptr %1072, align 8
  %1073 = call ptr @behavior_wrapper(ptr %1069, { ptr, ptr, ptr, i32 } %1061, ptr %168)
  call void %1073({ ptr, ptr, ptr, i32 } %1061, { ptr, ptr, ptr, i32 } %1061, ptr %167, { ptr } %1049, i32 %1050, i32 %1051) #17
  %1074 = getelementptr { ptr, i160 }, ptr %164, i32 0, i32 0
  %1075 = load ptr, ptr %1074, align 8
  %1076 = insertvalue { ptr, i160 } undef, ptr %1075, 0
  %1077 = getelementptr { ptr, i160 }, ptr %164, i32 0, i32 1
  %1078 = load i160, ptr %1077, align 4
  %1079 = insertvalue { ptr, i160 } %1076, i160 %1078, 1
  %1080 = getelementptr [1 x ptr], ptr %169, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1080, align 8
  %1081 = call ptr @llvm.invariant.start.p0(i64 1, ptr %169)
  %1082 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1083 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1084 = getelementptr { ptr }, ptr %170, i32 0, i32 0
  store ptr %1075, ptr %1084, align 8
  %1085 = call ptr @class_behavior_wrapper(ptr %1083, ptr %170)
  call void %1085(ptr %169, { ptr, i160 } %1079) #17
  ret void
}

define void @benchmark_get_sequential_hit(i32 %0) {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca [2 x ptr], align 8
  %10 = alloca { ptr, ptr }, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i1, align 1
  %18 = alloca i32, align 4
  %19 = alloca i1, align 1
  %20 = alloca i160, align 8
  %21 = alloca ptr, align 8
  %22 = alloca [1 x ptr], align 8
  %23 = alloca { ptr }, align 8
  %24 = alloca { ptr, i160 }, align 8
  %25 = alloca i32, align 4
  %26 = alloca ptr, align 8
  %27 = alloca i1, align 1
  %28 = alloca i32, align 4
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i32, align 4
  %32 = alloca ptr, align 8
  %33 = alloca i1, align 1
  %34 = alloca i32, align 4
  %35 = alloca ptr, align 8
  %36 = alloca ptr, align 8
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca [1 x ptr], align 8
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca [3 x ptr], align 8
  %45 = alloca { ptr, ptr, ptr }, align 8
  %46 = alloca [1 x ptr], align 8
  %47 = alloca { ptr }, align 8
  %48 = alloca i160, align 8
  %49 = alloca ptr, align 8
  %50 = alloca [1 x ptr], align 8
  %51 = alloca { ptr }, align 8
  %52 = alloca i32, align 4
  %53 = alloca i32, align 4
  %54 = alloca i64, align 8
  %55 = alloca i1, align 1
  %56 = alloca i1, align 1
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %62 = alloca i32, align 4
  %63 = alloca [1 x ptr], align 8
  %64 = alloca i32, align 4
  %65 = alloca ptr, align 8
  %66 = alloca ptr, align 8
  %67 = alloca ptr, align 8
  %68 = alloca i32, align 4
  %69 = alloca i32, align 4
  %70 = alloca [3 x ptr], align 8
  %71 = alloca { ptr, ptr, ptr }, align 8
  %72 = alloca i64, align 8
  %73 = alloca i32, align 4
  %74 = alloca ptr, align 8
  %75 = alloca ptr, align 8
  %76 = alloca i32, align 4
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  %79 = alloca [1 x ptr], align 8
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  %81 = alloca i32, align 4
  %82 = alloca i32, align 4
  %83 = alloca [3 x ptr], align 8
  %84 = alloca { ptr, ptr, ptr }, align 8
  %85 = alloca [1 x ptr], align 8
  %86 = alloca { ptr }, align 8
  %87 = alloca i32, align 4
  %88 = alloca ptr, align 8
  %89 = alloca ptr, align 8
  %90 = alloca i32, align 4
  %91 = alloca i32, align 4
  %92 = alloca i32, align 4
  %93 = alloca [1 x ptr], align 8
  %94 = alloca { ptr, ptr, ptr, i32 }, align 8
  %95 = alloca i32, align 4
  %96 = alloca i32, align 4
  %97 = alloca [3 x ptr], align 8
  %98 = alloca { ptr, ptr, ptr }, align 8
  %99 = alloca [1 x ptr], align 8
  %100 = alloca { ptr }, align 8
  %101 = alloca i32, align 4
  %102 = alloca ptr, align 8
  %103 = alloca ptr, align 8
  %104 = alloca i32, align 4
  %105 = alloca i32, align 4
  %106 = alloca i32, align 4
  %107 = alloca [1 x ptr], align 8
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  %109 = alloca i32, align 4
  %110 = alloca i32, align 4
  %111 = alloca [3 x ptr], align 8
  %112 = alloca { ptr, ptr, ptr }, align 8
  %113 = alloca [1 x ptr], align 8
  %114 = alloca { ptr }, align 8
  %115 = alloca i32, align 4
  %.reg2mem = alloca i1, align 1
  %.reg2mem6 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %115, align 4
  %116 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %116, align 8
  %117 = alloca ptr, align 8
  store ptr @i32_eq, ptr %117, align 8
  %118 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %118, align 8
  %119 = getelementptr ptr, ptr %118, i32 1
  store ptr @_parameterization_Ptri32, ptr %119, align 8
  %120 = getelementptr ptr, ptr %118, i32 2
  store ptr @_parameterization_Ptri32, ptr %120, align 8
  %121 = getelementptr ptr, ptr %118, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %121, align 8
  %122 = load ptr, ptr %118, align 8
  %123 = getelementptr ptr, ptr %122, i32 6
  %124 = load ptr, ptr %123, align 8
  %125 = call { i64, i64 } @size_wrapper(ptr %124, ptr %118)
  %126 = extractvalue { i64, i64 } %125, 0
  %127 = call ptr @bump_malloc(i64 %126)
  store ptr @_parameterization_Ptri32, ptr %127, align 8
  %128 = getelementptr ptr, ptr %127, i32 1
  store ptr @_parameterization_Ptri32, ptr %128, align 8
  %129 = getelementptr ptr, ptr %127, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %129, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 24, ptr %127)
  %131 = alloca i32, align 4
  %132 = alloca ptr, align 8
  %133 = alloca ptr, align 8
  %134 = alloca ptr, align 8
  store ptr @CuckooMap, ptr %134, align 8
  store ptr %127, ptr %133, align 8
  store i32 10, ptr %131, align 4
  %135 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %135, align 8
  %136 = alloca ptr, align 8
  store ptr @i32_eq, ptr %136, align 8
  %137 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %137)
  %138 = load ptr, ptr %135, align 8
  call void @llvm.init.trampoline(ptr %137, ptr @svlbjxscwh, ptr %138)
  %139 = alloca ptr, align 8
  %140 = call ptr @adjust_trampoline(ptr %137)
  store ptr %140, ptr %139, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 24, ptr %137)
  %142 = getelementptr { ptr }, ptr %139, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr } undef, ptr %143, 0
  %145 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %145)
  %146 = load ptr, ptr %136, align 8
  call void @llvm.init.trampoline(ptr %145, ptr @krjmirxnlg, ptr %146)
  %147 = alloca ptr, align 8
  %148 = call ptr @adjust_trampoline(ptr %145)
  store ptr %148, ptr %147, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 24, ptr %145)
  %150 = getelementptr { ptr }, ptr %147, i32 0, i32 0
  %151 = load ptr, ptr %150, align 8
  %152 = insertvalue { ptr } undef, ptr %151, 0
  %153 = load ptr, ptr %134, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %153, 0
  %155 = load ptr, ptr %133, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } %154, ptr %155, 1
  %157 = load ptr, ptr %132, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %157, 2
  %159 = load i32, ptr %131, align 4
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, i32 %159, 3
  %161 = alloca [2 x ptr], align 8
  %162 = getelementptr [2 x ptr], ptr %161, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %162, align 8
  %163 = getelementptr [2 x ptr], ptr %161, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %163, align 8
  %164 = call ptr @llvm.invariant.start.p0(i64 4, ptr %161)
  %165 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %153)
  %166 = getelementptr ptr, ptr %153, i32 %159
  %167 = getelementptr ptr, ptr %166, i32 10
  %168 = load ptr, ptr %167, align 8
  %169 = alloca { ptr, ptr }, align 8
  %170 = getelementptr { ptr, ptr }, ptr %169, i32 0, i32 0
  store ptr @function_typ, ptr %170, align 8
  %171 = getelementptr { ptr, ptr }, ptr %169, i32 0, i32 1
  store ptr @function_typ, ptr %171, align 8
  %172 = call ptr @behavior_wrapper(ptr %168, { ptr, ptr, ptr, i32 } %160, ptr %169)
  call void %172({ ptr, ptr, ptr, i32 } %160, { ptr, ptr, ptr, i32 } %160, ptr %161, { ptr } %144, { ptr } %152) #17
  %173 = alloca { ptr, ptr, ptr, i32 }, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 0
  %175 = load ptr, ptr %134, align 8
  store ptr %175, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 1
  %177 = load ptr, ptr %133, align 8
  store ptr %177, ptr %176, align 8
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 2
  %179 = load ptr, ptr %132, align 8
  store ptr %179, ptr %178, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 3
  %181 = load i32, ptr %131, align 4
  store i32 %181, ptr %180, align 4
  call void @set_offset(ptr %173, ptr @CuckooMap)
  %182 = alloca i32, align 4
  %183 = alloca ptr, align 8
  %184 = alloca ptr, align 8
  %185 = alloca ptr, align 8
  %186 = load ptr, ptr %174, align 8
  store ptr %186, ptr %185, align 8
  %187 = load ptr, ptr %176, align 8
  store ptr %187, ptr %184, align 8
  %188 = load ptr, ptr %178, align 8
  store ptr %188, ptr %183, align 8
  %189 = load i32, ptr %180, align 4
  store i32 %189, ptr %182, align 4
  %190 = alloca i64, align 8
  store i64 0, ptr %190, align 4
  %191 = alloca i32, align 4
  store i32 0, ptr %191, align 4
  br label %192

192:                                              ; preds = %._crit_edge1, %1
  %193 = load i32, ptr %191, align 4
  %194 = load i32, ptr %115, align 4
  %195 = icmp slt i32 %193, %194
  store i1 %195, ptr %2, align 1
  %196 = load i1, ptr %2, align 1
  store i1 %196, ptr %.reg2mem6, align 1
  %.reload8 = load i1, ptr %.reg2mem6, align 1
  br i1 %.reload8, label %197, label %._crit_edge

._crit_edge:                                      ; preds = %192
  br label %239

197:                                              ; preds = %192
  store i32 1, ptr %3, align 4
  %198 = load i32, ptr %191, align 4
  %199 = load i32, ptr %3, align 4
  %200 = add i32 %198, %199
  store i32 %200, ptr %4, align 4
  store ptr @i32_typ, ptr %6, align 8
  %201 = load i32, ptr %191, align 4
  store i32 %201, ptr %5, align 4
  %202 = load ptr, ptr %6, align 8
  %203 = insertvalue { ptr, i160 } undef, ptr %202, 0
  %204 = load i160, ptr %5, align 4
  %205 = insertvalue { ptr, i160 } %203, i160 %204, 1
  store ptr @i32_typ, ptr %8, align 8
  %206 = load i32, ptr %4, align 4
  store i32 %206, ptr %7, align 4
  %207 = load ptr, ptr %8, align 8
  %208 = insertvalue { ptr, i160 } undef, ptr %207, 0
  %209 = load i160, ptr %7, align 4
  %210 = insertvalue { ptr, i160 } %208, i160 %209, 1
  %211 = load ptr, ptr %185, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %211, 0
  %213 = load ptr, ptr %184, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %212, ptr %213, 1
  %215 = load ptr, ptr %183, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %215, 2
  %217 = load i32, ptr %182, align 4
  %218 = insertvalue { ptr, ptr, ptr, i32 } %216, i32 %217, 3
  %219 = getelementptr [2 x ptr], ptr %9, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %219, align 8
  %220 = getelementptr [2 x ptr], ptr %9, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %220, align 8
  %221 = call ptr @llvm.invariant.start.p0(i64 4, ptr %9)
  %222 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %211)
  %223 = getelementptr ptr, ptr %211, i32 %217
  %224 = getelementptr ptr, ptr %223, i32 21
  %225 = load ptr, ptr %224, align 8
  %226 = getelementptr { ptr, ptr }, ptr %10, i32 0, i32 0
  store ptr %202, ptr %226, align 8
  %227 = getelementptr { ptr, ptr }, ptr %10, i32 0, i32 1
  store ptr %207, ptr %227, align 8
  %228 = call ptr @behavior_wrapper(ptr %225, { ptr, ptr, ptr, i32 } %218, ptr %10)
  call void %228({ ptr, ptr, ptr, i32 } %218, { ptr, ptr, ptr, i32 } %218, ptr %9, { ptr, i160 } %205, { ptr, i160 } %210) #17
  %229 = load i32, ptr %4, align 4
  %230 = sext i32 %229 to i64
  store i64 %230, ptr %11, align 4
  %231 = load i64, ptr %190, align 4
  %232 = load i64, ptr %11, align 4
  %233 = add i64 %231, %232
  store i64 %233, ptr %12, align 4
  %234 = load i64, ptr %12, align 4
  store i64 %234, ptr %190, align 4
  store i32 1, ptr %13, align 4
  %235 = load i32, ptr %191, align 4
  %236 = load i32, ptr %13, align 4
  %237 = add i32 %235, %236
  store i32 %237, ptr %14, align 4
  %238 = load i32, ptr %14, align 4
  store i32 %238, ptr %191, align 4
  br label %239

239:                                              ; preds = %._crit_edge, %197
  %.reload7 = load i1, ptr %.reg2mem6, align 1
  br i1 %.reload7, label %._crit_edge1, label %240

._crit_edge1:                                     ; preds = %239
  br label %192

240:                                              ; preds = %239
  %241 = call i64 @clock()
  store i64 %241, ptr %15, align 4
  store i64 0, ptr %16, align 4
  store i1 true, ptr %17, align 1
  store i32 0, ptr %18, align 4
  %242 = load i32, ptr %18, align 4
  store i32 %242, ptr %191, align 4
  br label %243

243:                                              ; preds = %._crit_edge3, %240
  %244 = load i32, ptr %191, align 4
  %245 = load i32, ptr %115, align 4
  %246 = icmp slt i32 %244, %245
  store i1 %246, ptr %19, align 1
  %247 = load i1, ptr %19, align 1
  store i1 %247, ptr %.reg2mem, align 1
  %.reload5 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload5, label %248, label %._crit_edge2

._crit_edge2:                                     ; preds = %243
  br label %371

248:                                              ; preds = %243
  store ptr @i32_typ, ptr %21, align 8
  %249 = load i32, ptr %191, align 4
  store i32 %249, ptr %20, align 4
  %250 = load ptr, ptr %21, align 8
  %251 = insertvalue { ptr, i160 } undef, ptr %250, 0
  %252 = load i160, ptr %20, align 4
  %253 = insertvalue { ptr, i160 } %251, i160 %252, 1
  %254 = load ptr, ptr %185, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %254, 0
  %256 = load ptr, ptr %184, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } %255, ptr %256, 1
  %258 = load ptr, ptr %183, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %257, ptr %258, 2
  %260 = load i32, ptr %182, align 4
  %261 = insertvalue { ptr, ptr, ptr, i32 } %259, i32 %260, 3
  %262 = getelementptr [1 x ptr], ptr %22, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %262, align 8
  %263 = call ptr @llvm.invariant.start.p0(i64 1, ptr %22)
  %264 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %254)
  %265 = getelementptr ptr, ptr %254, i32 %260
  %266 = getelementptr ptr, ptr %265, i32 23
  %267 = load ptr, ptr %266, align 8
  %268 = getelementptr { ptr }, ptr %23, i32 0, i32 0
  store ptr %250, ptr %268, align 8
  %269 = call ptr @behavior_wrapper(ptr %267, { ptr, ptr, ptr, i32 } %261, ptr %23)
  %270 = call { ptr, i160 } %269({ ptr, ptr, ptr, i32 } %261, { ptr, ptr, ptr, i32 } %261, ptr %22, { ptr, i160 } %253) #17
  store { ptr, i160 } %270, ptr %24, align 8
  %271 = getelementptr { ptr, i32 }, ptr %24, i32 0, i32 0
  %272 = load ptr, ptr %271, align 8
  store ptr %272, ptr %26, align 8
  %273 = getelementptr { ptr, i32 }, ptr %24, i32 0, i32 1
  %274 = load i32, ptr %273, align 4
  store i32 %274, ptr %25, align 4
  %275 = load ptr, ptr %26, align 8
  %276 = ptrtoint ptr %275 to i64
  %277 = icmp eq i64 %276, ptrtoint (ptr @nil_typ to i64)
  %278 = icmp eq i64 %276, 0
  %279 = or i1 %277, %278
  %280 = icmp eq i1 %279, false
  store i1 %280, ptr %27, align 1
  %281 = load i1, ptr %27, align 1
  br i1 %281, label %282, label %293

282:                                              ; preds = %248
  %283 = load i32, ptr %25, align 4
  store i32 %283, ptr %28, align 4
  %284 = load i32, ptr %28, align 4
  %285 = sext i32 %284 to i64
  store i64 %285, ptr %29, align 4
  %286 = load i64, ptr %16, align 4
  %287 = load i64, ptr %29, align 4
  %288 = add i64 %286, %287
  store i64 %288, ptr %30, align 4
  %289 = load i64, ptr %30, align 4
  store i64 %289, ptr %16, align 4
  %290 = load i32, ptr %28, align 4
  store i32 %290, ptr %31, align 4
  store ptr @i32_typ, ptr %32, align 8
  %291 = load ptr, ptr %32, align 8
  store ptr %291, ptr %26, align 8
  %292 = load i32, ptr %31, align 4
  store i32 %292, ptr %25, align 4
  br label %366

293:                                              ; preds = %248
  store i1 false, ptr %33, align 1
  %294 = load i1, ptr %33, align 1
  store i1 %294, ptr %17, align 1
  store i32 56, ptr %34, align 4
  %295 = load i32, ptr %34, align 4
  %296 = sext i32 %295 to i64
  %297 = mul i64 %296, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %298 = call ptr @bump_malloc(i64 %297)
  store ptr %298, ptr %35, align 8
  %299 = getelementptr { ptr }, ptr %35, i32 0, i32 0
  %300 = load ptr, ptr %299, align 8
  store ptr %300, ptr %36, align 8
  store i32 0, ptr %37, align 4
  %301 = load ptr, ptr %36, align 8
  %302 = load i32, ptr %37, align 4
  %303 = sext i32 %302 to i64
  %304 = mul i64 ptrtoint (ptr getelementptr ([55 x i8], ptr null, i32 1) to i64), %303
  %305 = getelementptr i8, ptr %301, i64 %304
  %306 = load <55 x i8>, ptr @gvbps_Error_Nil_returned_during_sequential_hit_test_for_key_, align 64
  store <55 x i8> %306, ptr %305, align 64
  store i32 55, ptr %38, align 4
  store i32 56, ptr %39, align 4
  store ptr @String, ptr %40, align 8
  %307 = load ptr, ptr %40, align 8
  %308 = getelementptr ptr, ptr %307, i32 6
  %309 = load ptr, ptr %308, align 8
  %310 = call { i64, i64 } @size_wrapper(ptr %309, ptr %40)
  %311 = extractvalue { i64, i64 } %310, 0
  %312 = call ptr @bump_malloc(i64 %311)
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 1
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 3
  store ptr @String, ptr %41, align 8
  store ptr %312, ptr %313, align 8
  store i32 10, ptr %314, align 4
  store i32 55, ptr %42, align 4
  store i32 56, ptr %43, align 4
  %315 = load ptr, ptr %36, align 8
  %316 = insertvalue { ptr } undef, ptr %315, 0
  %317 = load i32, ptr %42, align 4
  %318 = load i32, ptr %43, align 4
  %319 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 0
  %320 = load ptr, ptr %319, align 8
  %321 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %320, 0
  %322 = load ptr, ptr %313, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } %321, ptr %322, 1
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 2
  %325 = load ptr, ptr %324, align 8
  %326 = insertvalue { ptr, ptr, ptr, i32 } %323, ptr %325, 2
  %327 = load i32, ptr %314, align 4
  %328 = insertvalue { ptr, ptr, ptr, i32 } %326, i32 %327, 3
  %329 = getelementptr [3 x ptr], ptr %44, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %329, align 8
  %330 = getelementptr [3 x ptr], ptr %44, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %330, align 8
  %331 = getelementptr [3 x ptr], ptr %44, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %331, align 8
  %332 = call ptr @llvm.invariant.start.p0(i64 9, ptr %44)
  %333 = call ptr @llvm.invariant.start.p0(i64 632, ptr %320)
  %334 = getelementptr ptr, ptr %320, i32 %327
  %335 = getelementptr ptr, ptr %334, i32 6
  %336 = load ptr, ptr %335, align 8
  %337 = getelementptr { ptr, ptr, ptr }, ptr %45, i32 0, i32 0
  store ptr @buffer_typ, ptr %337, align 8
  %338 = getelementptr { ptr, ptr, ptr }, ptr %45, i32 0, i32 1
  store ptr @i32_typ, ptr %338, align 8
  %339 = getelementptr { ptr, ptr, ptr }, ptr %45, i32 0, i32 2
  store ptr @i32_typ, ptr %339, align 8
  %340 = call ptr @behavior_wrapper(ptr %336, { ptr, ptr, ptr, i32 } %328, ptr %45)
  call void %340({ ptr, ptr, ptr, i32 } %328, { ptr, ptr, ptr, i32 } %328, ptr %44, { ptr } %316, i32 %317, i32 %318) #17
  %341 = getelementptr { ptr, i160 }, ptr %41, i32 0, i32 0
  %342 = load ptr, ptr %341, align 8
  %343 = insertvalue { ptr, i160 } undef, ptr %342, 0
  %344 = getelementptr { ptr, i160 }, ptr %41, i32 0, i32 1
  %345 = load i160, ptr %344, align 4
  %346 = insertvalue { ptr, i160 } %343, i160 %345, 1
  %347 = getelementptr [1 x ptr], ptr %46, i32 0, i32 0
  store ptr @_parameterization_String, ptr %347, align 8
  %348 = call ptr @llvm.invariant.start.p0(i64 1, ptr %46)
  %349 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %350 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %351 = getelementptr { ptr }, ptr %47, i32 0, i32 0
  store ptr %342, ptr %351, align 8
  %352 = call ptr @class_behavior_wrapper(ptr %350, ptr %47)
  call void %352(ptr %46, { ptr, i160 } %346) #17
  %353 = load i32, ptr %191, align 4
  store i32 %353, ptr %48, align 4
  store ptr @i32_typ, ptr %49, align 8
  %354 = load ptr, ptr %49, align 8
  %355 = insertvalue { ptr, i160 } undef, ptr %354, 0
  %356 = load i160, ptr %48, align 4
  %357 = insertvalue { ptr, i160 } %355, i160 %356, 1
  %358 = getelementptr [1 x ptr], ptr %50, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %358, align 8
  %359 = call ptr @llvm.invariant.start.p0(i64 1, ptr %50)
  %360 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %361 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %362 = getelementptr { ptr }, ptr %51, i32 0, i32 0
  store ptr %354, ptr %362, align 8
  %363 = call ptr @class_behavior_wrapper(ptr %361, ptr %51)
  call void %363(ptr %50, { ptr, i160 } %357) #17
  %364 = load ptr, ptr %26, align 8
  store ptr %364, ptr %26, align 8
  %365 = load i32, ptr %25, align 4
  store i32 %365, ptr %25, align 4
  br label %366

366:                                              ; preds = %293, %282
  store i32 1, ptr %52, align 4
  %367 = load i32, ptr %191, align 4
  %368 = load i32, ptr %52, align 4
  %369 = add i32 %367, %368
  store i32 %369, ptr %53, align 4
  %370 = load i32, ptr %53, align 4
  store i32 %370, ptr %191, align 4
  br label %371

371:                                              ; preds = %._crit_edge2, %366
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge3, label %372

._crit_edge3:                                     ; preds = %371
  br label %243

372:                                              ; preds = %371
  %373 = call i64 @clock()
  store i64 %373, ptr %54, align 4
  %374 = load i64, ptr %16, align 4
  %375 = load i64, ptr %190, align 4
  %376 = icmp ne i64 %374, %375
  store i1 %376, ptr %55, align 1
  %377 = load i1, ptr %55, align 1
  br i1 %377, label %378, label %._crit_edge4

._crit_edge4:                                     ; preds = %372
  br label %380

378:                                              ; preds = %372
  store i1 false, ptr %56, align 1
  %379 = load i1, ptr %56, align 1
  store i1 %379, ptr %17, align 1
  br label %380

380:                                              ; preds = %._crit_edge4, %378
  store i32 19, ptr %57, align 4
  %381 = load i32, ptr %57, align 4
  %382 = sext i32 %381 to i64
  %383 = mul i64 %382, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %384 = call ptr @bump_malloc(i64 %383)
  store ptr %384, ptr %58, align 8
  %385 = getelementptr { ptr }, ptr %58, i32 0, i32 0
  %386 = load ptr, ptr %385, align 8
  store ptr %386, ptr %59, align 8
  store i32 0, ptr %60, align 4
  %387 = load ptr, ptr %59, align 8
  %388 = load i32, ptr %60, align 4
  %389 = sext i32 %388 to i64
  %390 = mul i64 ptrtoint (ptr getelementptr ([18 x i8], ptr null, i32 1) to i64), %389
  %391 = getelementptr i8, ptr %387, i64 %390
  %392 = load <18 x i8>, ptr @qdhmo_Get_Sequential_Hit, align 32
  store <18 x i8> %392, ptr %391, align 32
  store i32 18, ptr %61, align 4
  store i32 19, ptr %62, align 4
  store ptr @String, ptr %63, align 8
  %393 = load ptr, ptr %63, align 8
  %394 = getelementptr ptr, ptr %393, i32 6
  %395 = load ptr, ptr %394, align 8
  %396 = call { i64, i64 } @size_wrapper(ptr %395, ptr %63)
  %397 = extractvalue { i64, i64 } %396, 0
  %398 = call ptr @bump_malloc(i64 %397)
  store ptr @String, ptr %67, align 8
  store ptr %398, ptr %66, align 8
  store i32 10, ptr %64, align 4
  store i32 18, ptr %68, align 4
  store i32 19, ptr %69, align 4
  %399 = load ptr, ptr %59, align 8
  %400 = insertvalue { ptr } undef, ptr %399, 0
  %401 = load i32, ptr %68, align 4
  %402 = load i32, ptr %69, align 4
  %403 = load ptr, ptr %67, align 8
  %404 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %403, 0
  %405 = load ptr, ptr %66, align 8
  %406 = insertvalue { ptr, ptr, ptr, i32 } %404, ptr %405, 1
  %407 = load ptr, ptr %65, align 8
  %408 = insertvalue { ptr, ptr, ptr, i32 } %406, ptr %407, 2
  %409 = load i32, ptr %64, align 4
  %410 = insertvalue { ptr, ptr, ptr, i32 } %408, i32 %409, 3
  %411 = getelementptr [3 x ptr], ptr %70, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %411, align 8
  %412 = getelementptr [3 x ptr], ptr %70, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %412, align 8
  %413 = getelementptr [3 x ptr], ptr %70, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %413, align 8
  %414 = call ptr @llvm.invariant.start.p0(i64 9, ptr %70)
  %415 = call ptr @llvm.invariant.start.p0(i64 632, ptr %403)
  %416 = getelementptr ptr, ptr %403, i32 %409
  %417 = getelementptr ptr, ptr %416, i32 6
  %418 = load ptr, ptr %417, align 8
  %419 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 0
  store ptr @buffer_typ, ptr %419, align 8
  %420 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 1
  store ptr @i32_typ, ptr %420, align 8
  %421 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 2
  store ptr @i32_typ, ptr %421, align 8
  %422 = call ptr @behavior_wrapper(ptr %418, { ptr, ptr, ptr, i32 } %410, ptr %71)
  call void %422({ ptr, ptr, ptr, i32 } %410, { ptr, ptr, ptr, i32 } %410, ptr %70, { ptr } %400, i32 %401, i32 %402) #17
  %423 = load i64, ptr %54, align 4
  %424 = load i64, ptr %15, align 4
  %425 = sub i64 %423, %424
  store i64 %425, ptr %72, align 4
  %426 = load ptr, ptr %67, align 8
  %427 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %426, 0
  %428 = load ptr, ptr %66, align 8
  %429 = insertvalue { ptr, ptr, ptr, i32 } %427, ptr %428, 1
  %430 = load ptr, ptr %65, align 8
  %431 = insertvalue { ptr, ptr, ptr, i32 } %429, ptr %430, 2
  %432 = load i32, ptr %64, align 4
  %433 = insertvalue { ptr, ptr, ptr, i32 } %431, i32 %432, 3
  %434 = load i32, ptr %115, align 4
  %435 = load i64, ptr %72, align 4
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %433, i32 %434, i64 %435)
  store i32 19, ptr %73, align 4
  %436 = load i32, ptr %73, align 4
  %437 = sext i32 %436 to i64
  %438 = mul i64 %437, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %439 = call ptr @bump_malloc(i64 %438)
  store ptr %439, ptr %74, align 8
  %440 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  %441 = load ptr, ptr %440, align 8
  store ptr %441, ptr %75, align 8
  store i32 0, ptr %76, align 4
  %442 = load ptr, ptr %75, align 8
  %443 = load i32, ptr %76, align 4
  %444 = sext i32 %443 to i64
  %445 = mul i64 ptrtoint (ptr getelementptr ([18 x i8], ptr null, i32 1) to i64), %444
  %446 = getelementptr i8, ptr %442, i64 %445
  %447 = load <18 x i8>, ptr @qbfps_____Verification_, align 32
  store <18 x i8> %447, ptr %446, align 32
  store i32 18, ptr %77, align 4
  store i32 19, ptr %78, align 4
  store ptr @String, ptr %79, align 8
  %448 = load ptr, ptr %79, align 8
  %449 = getelementptr ptr, ptr %448, i32 6
  %450 = load ptr, ptr %449, align 8
  %451 = call { i64, i64 } @size_wrapper(ptr %450, ptr %79)
  %452 = extractvalue { i64, i64 } %451, 0
  %453 = call ptr @bump_malloc(i64 %452)
  %454 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %455 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  store ptr @String, ptr %80, align 8
  store ptr %453, ptr %454, align 8
  store i32 10, ptr %455, align 4
  store i32 18, ptr %81, align 4
  store i32 19, ptr %82, align 4
  %456 = load ptr, ptr %75, align 8
  %457 = insertvalue { ptr } undef, ptr %456, 0
  %458 = load i32, ptr %81, align 4
  %459 = load i32, ptr %82, align 4
  %460 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %461 = load ptr, ptr %460, align 8
  %462 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %461, 0
  %463 = load ptr, ptr %454, align 8
  %464 = insertvalue { ptr, ptr, ptr, i32 } %462, ptr %463, 1
  %465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %466 = load ptr, ptr %465, align 8
  %467 = insertvalue { ptr, ptr, ptr, i32 } %464, ptr %466, 2
  %468 = load i32, ptr %455, align 4
  %469 = insertvalue { ptr, ptr, ptr, i32 } %467, i32 %468, 3
  %470 = getelementptr [3 x ptr], ptr %83, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %470, align 8
  %471 = getelementptr [3 x ptr], ptr %83, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %471, align 8
  %472 = getelementptr [3 x ptr], ptr %83, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %472, align 8
  %473 = call ptr @llvm.invariant.start.p0(i64 9, ptr %83)
  %474 = call ptr @llvm.invariant.start.p0(i64 632, ptr %461)
  %475 = getelementptr ptr, ptr %461, i32 %468
  %476 = getelementptr ptr, ptr %475, i32 6
  %477 = load ptr, ptr %476, align 8
  %478 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 0
  store ptr @buffer_typ, ptr %478, align 8
  %479 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 1
  store ptr @i32_typ, ptr %479, align 8
  %480 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 2
  store ptr @i32_typ, ptr %480, align 8
  %481 = call ptr @behavior_wrapper(ptr %477, { ptr, ptr, ptr, i32 } %469, ptr %84)
  call void %481({ ptr, ptr, ptr, i32 } %469, { ptr, ptr, ptr, i32 } %469, ptr %83, { ptr } %457, i32 %458, i32 %459) #17
  %482 = getelementptr { ptr, i160 }, ptr %80, i32 0, i32 0
  %483 = load ptr, ptr %482, align 8
  %484 = insertvalue { ptr, i160 } undef, ptr %483, 0
  %485 = getelementptr { ptr, i160 }, ptr %80, i32 0, i32 1
  %486 = load i160, ptr %485, align 4
  %487 = insertvalue { ptr, i160 } %484, i160 %486, 1
  %488 = getelementptr [1 x ptr], ptr %85, i32 0, i32 0
  store ptr @_parameterization_String, ptr %488, align 8
  %489 = call ptr @llvm.invariant.start.p0(i64 1, ptr %85)
  %490 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %491 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %492 = getelementptr { ptr }, ptr %86, i32 0, i32 0
  store ptr %483, ptr %492, align 8
  %493 = call ptr @class_behavior_wrapper(ptr %491, ptr %86)
  call void %493(ptr %85, { ptr, i160 } %487) #17
  %494 = load i1, ptr %17, align 1
  br i1 %494, label %495, label %554

495:                                              ; preds = %380
  store i32 5, ptr %87, align 4
  %496 = load i32, ptr %87, align 4
  %497 = sext i32 %496 to i64
  %498 = mul i64 %497, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %499 = call ptr @bump_malloc(i64 %498)
  store ptr %499, ptr %88, align 8
  %500 = getelementptr { ptr }, ptr %88, i32 0, i32 0
  %501 = load ptr, ptr %500, align 8
  store ptr %501, ptr %89, align 8
  store i32 0, ptr %90, align 4
  %502 = load ptr, ptr %89, align 8
  %503 = load i32, ptr %90, align 4
  %504 = sext i32 %503 to i64
  %505 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %504
  %506 = getelementptr i8, ptr %502, i64 %505
  %507 = load <4 x i8>, ptr @pegsm_PASS, align 4
  store <4 x i8> %507, ptr %506, align 4
  store i32 4, ptr %91, align 4
  store i32 5, ptr %92, align 4
  store ptr @String, ptr %93, align 8
  %508 = load ptr, ptr %93, align 8
  %509 = getelementptr ptr, ptr %508, i32 6
  %510 = load ptr, ptr %509, align 8
  %511 = call { i64, i64 } @size_wrapper(ptr %510, ptr %93)
  %512 = extractvalue { i64, i64 } %511, 0
  %513 = call ptr @bump_malloc(i64 %512)
  %514 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 1
  %515 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 3
  store ptr @String, ptr %94, align 8
  store ptr %513, ptr %514, align 8
  store i32 10, ptr %515, align 4
  store i32 4, ptr %95, align 4
  store i32 5, ptr %96, align 4
  %516 = load ptr, ptr %89, align 8
  %517 = insertvalue { ptr } undef, ptr %516, 0
  %518 = load i32, ptr %95, align 4
  %519 = load i32, ptr %96, align 4
  %520 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 0
  %521 = load ptr, ptr %520, align 8
  %522 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %521, 0
  %523 = load ptr, ptr %514, align 8
  %524 = insertvalue { ptr, ptr, ptr, i32 } %522, ptr %523, 1
  %525 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 2
  %526 = load ptr, ptr %525, align 8
  %527 = insertvalue { ptr, ptr, ptr, i32 } %524, ptr %526, 2
  %528 = load i32, ptr %515, align 4
  %529 = insertvalue { ptr, ptr, ptr, i32 } %527, i32 %528, 3
  %530 = getelementptr [3 x ptr], ptr %97, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %530, align 8
  %531 = getelementptr [3 x ptr], ptr %97, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %531, align 8
  %532 = getelementptr [3 x ptr], ptr %97, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %532, align 8
  %533 = call ptr @llvm.invariant.start.p0(i64 9, ptr %97)
  %534 = call ptr @llvm.invariant.start.p0(i64 632, ptr %521)
  %535 = getelementptr ptr, ptr %521, i32 %528
  %536 = getelementptr ptr, ptr %535, i32 6
  %537 = load ptr, ptr %536, align 8
  %538 = getelementptr { ptr, ptr, ptr }, ptr %98, i32 0, i32 0
  store ptr @buffer_typ, ptr %538, align 8
  %539 = getelementptr { ptr, ptr, ptr }, ptr %98, i32 0, i32 1
  store ptr @i32_typ, ptr %539, align 8
  %540 = getelementptr { ptr, ptr, ptr }, ptr %98, i32 0, i32 2
  store ptr @i32_typ, ptr %540, align 8
  %541 = call ptr @behavior_wrapper(ptr %537, { ptr, ptr, ptr, i32 } %529, ptr %98)
  call void %541({ ptr, ptr, ptr, i32 } %529, { ptr, ptr, ptr, i32 } %529, ptr %97, { ptr } %517, i32 %518, i32 %519) #17
  %542 = getelementptr { ptr, i160 }, ptr %94, i32 0, i32 0
  %543 = load ptr, ptr %542, align 8
  %544 = insertvalue { ptr, i160 } undef, ptr %543, 0
  %545 = getelementptr { ptr, i160 }, ptr %94, i32 0, i32 1
  %546 = load i160, ptr %545, align 4
  %547 = insertvalue { ptr, i160 } %544, i160 %546, 1
  %548 = getelementptr [1 x ptr], ptr %99, i32 0, i32 0
  store ptr @_parameterization_String, ptr %548, align 8
  %549 = call ptr @llvm.invariant.start.p0(i64 1, ptr %99)
  %550 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %551 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %552 = getelementptr { ptr }, ptr %100, i32 0, i32 0
  store ptr %543, ptr %552, align 8
  %553 = call ptr @class_behavior_wrapper(ptr %551, ptr %100)
  call void %553(ptr %99, { ptr, i160 } %547) #17
  br label %613

554:                                              ; preds = %380
  store i32 5, ptr %101, align 4
  %555 = load i32, ptr %101, align 4
  %556 = sext i32 %555 to i64
  %557 = mul i64 %556, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %558 = call ptr @bump_malloc(i64 %557)
  store ptr %558, ptr %102, align 8
  %559 = getelementptr { ptr }, ptr %102, i32 0, i32 0
  %560 = load ptr, ptr %559, align 8
  store ptr %560, ptr %103, align 8
  store i32 0, ptr %104, align 4
  %561 = load ptr, ptr %103, align 8
  %562 = load i32, ptr %104, align 4
  %563 = sext i32 %562 to i64
  %564 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %563
  %565 = getelementptr i8, ptr %561, i64 %564
  %566 = load <4 x i8>, ptr @hjjpq_FAIL, align 4
  store <4 x i8> %566, ptr %565, align 4
  store i32 4, ptr %105, align 4
  store i32 5, ptr %106, align 4
  store ptr @String, ptr %107, align 8
  %567 = load ptr, ptr %107, align 8
  %568 = getelementptr ptr, ptr %567, i32 6
  %569 = load ptr, ptr %568, align 8
  %570 = call { i64, i64 } @size_wrapper(ptr %569, ptr %107)
  %571 = extractvalue { i64, i64 } %570, 0
  %572 = call ptr @bump_malloc(i64 %571)
  %573 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %574 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  store ptr @String, ptr %108, align 8
  store ptr %572, ptr %573, align 8
  store i32 10, ptr %574, align 4
  store i32 4, ptr %109, align 4
  store i32 5, ptr %110, align 4
  %575 = load ptr, ptr %103, align 8
  %576 = insertvalue { ptr } undef, ptr %575, 0
  %577 = load i32, ptr %109, align 4
  %578 = load i32, ptr %110, align 4
  %579 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %580 = load ptr, ptr %579, align 8
  %581 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %580, 0
  %582 = load ptr, ptr %573, align 8
  %583 = insertvalue { ptr, ptr, ptr, i32 } %581, ptr %582, 1
  %584 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %585 = load ptr, ptr %584, align 8
  %586 = insertvalue { ptr, ptr, ptr, i32 } %583, ptr %585, 2
  %587 = load i32, ptr %574, align 4
  %588 = insertvalue { ptr, ptr, ptr, i32 } %586, i32 %587, 3
  %589 = getelementptr [3 x ptr], ptr %111, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %589, align 8
  %590 = getelementptr [3 x ptr], ptr %111, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %590, align 8
  %591 = getelementptr [3 x ptr], ptr %111, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %591, align 8
  %592 = call ptr @llvm.invariant.start.p0(i64 9, ptr %111)
  %593 = call ptr @llvm.invariant.start.p0(i64 632, ptr %580)
  %594 = getelementptr ptr, ptr %580, i32 %587
  %595 = getelementptr ptr, ptr %594, i32 6
  %596 = load ptr, ptr %595, align 8
  %597 = getelementptr { ptr, ptr, ptr }, ptr %112, i32 0, i32 0
  store ptr @buffer_typ, ptr %597, align 8
  %598 = getelementptr { ptr, ptr, ptr }, ptr %112, i32 0, i32 1
  store ptr @i32_typ, ptr %598, align 8
  %599 = getelementptr { ptr, ptr, ptr }, ptr %112, i32 0, i32 2
  store ptr @i32_typ, ptr %599, align 8
  %600 = call ptr @behavior_wrapper(ptr %596, { ptr, ptr, ptr, i32 } %588, ptr %112)
  call void %600({ ptr, ptr, ptr, i32 } %588, { ptr, ptr, ptr, i32 } %588, ptr %111, { ptr } %576, i32 %577, i32 %578) #17
  %601 = getelementptr { ptr, i160 }, ptr %108, i32 0, i32 0
  %602 = load ptr, ptr %601, align 8
  %603 = insertvalue { ptr, i160 } undef, ptr %602, 0
  %604 = getelementptr { ptr, i160 }, ptr %108, i32 0, i32 1
  %605 = load i160, ptr %604, align 4
  %606 = insertvalue { ptr, i160 } %603, i160 %605, 1
  %607 = getelementptr [1 x ptr], ptr %113, i32 0, i32 0
  store ptr @_parameterization_String, ptr %607, align 8
  %608 = call ptr @llvm.invariant.start.p0(i64 1, ptr %113)
  %609 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %610 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %611 = getelementptr { ptr }, ptr %114, i32 0, i32 0
  store ptr %602, ptr %611, align 8
  %612 = call ptr @class_behavior_wrapper(ptr %610, ptr %114)
  call void %612(ptr %113, { ptr, i160 } %606) #17
  br label %613

613:                                              ; preds = %554, %495
  ret void
}

define void @benchmark_get_random_hit(i32 %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca i32, align 4
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i1, align 1
  %16 = alloca i1, align 1
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca [2 x ptr], align 8
  %24 = alloca { ptr, ptr }, align 8
  %25 = alloca i160, align 8
  %26 = alloca ptr, align 8
  %27 = alloca [2 x ptr], align 8
  %28 = alloca { ptr, ptr }, align 8
  %29 = alloca i1, align 1
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = alloca [2 x ptr], align 8
  %35 = alloca { ptr, ptr }, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i1, align 1
  %43 = alloca i32, align 4
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca [1 x ptr], align 8
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = alloca i32, align 4
  %52 = alloca i32, align 4
  %53 = alloca [3 x ptr], align 8
  %54 = alloca { ptr, ptr, ptr }, align 8
  %55 = alloca [1 x ptr], align 8
  %56 = alloca { ptr }, align 8
  %57 = alloca i160, align 8
  %58 = alloca ptr, align 8
  %59 = alloca [1 x ptr], align 8
  %60 = alloca { ptr }, align 8
  %61 = alloca i32, align 4
  %62 = alloca ptr, align 8
  %63 = alloca ptr, align 8
  %64 = alloca i32, align 4
  %65 = alloca i32, align 4
  %66 = alloca i32, align 4
  %67 = alloca [1 x ptr], align 8
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = alloca i32, align 4
  %70 = alloca i32, align 4
  %71 = alloca [3 x ptr], align 8
  %72 = alloca { ptr, ptr, ptr }, align 8
  %73 = alloca [1 x ptr], align 8
  %74 = alloca { ptr }, align 8
  %75 = alloca i64, align 8
  %76 = alloca i64, align 8
  %77 = alloca i1, align 1
  %78 = alloca i32, align 4
  %79 = alloca i1, align 1
  %80 = alloca [1 x ptr], align 8
  %81 = alloca { ptr }, align 8
  %82 = alloca { ptr, i160 }, align 8
  %83 = alloca i32, align 4
  %84 = alloca i160, align 8
  %85 = alloca ptr, align 8
  %86 = alloca [1 x ptr], align 8
  %87 = alloca { ptr }, align 8
  %88 = alloca { ptr, i160 }, align 8
  %89 = alloca i32, align 4
  %90 = alloca ptr, align 8
  %91 = alloca i1, align 1
  %92 = alloca i32, align 4
  %93 = alloca i64, align 8
  %94 = alloca i64, align 8
  %95 = alloca i32, align 4
  %96 = alloca ptr, align 8
  %97 = alloca i1, align 1
  %98 = alloca i32, align 4
  %99 = alloca ptr, align 8
  %100 = alloca ptr, align 8
  %101 = alloca i32, align 4
  %102 = alloca i32, align 4
  %103 = alloca i32, align 4
  %104 = alloca [1 x ptr], align 8
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %106 = alloca i32, align 4
  %107 = alloca i32, align 4
  %108 = alloca [3 x ptr], align 8
  %109 = alloca { ptr, ptr, ptr }, align 8
  %110 = alloca [1 x ptr], align 8
  %111 = alloca { ptr }, align 8
  %112 = alloca i160, align 8
  %113 = alloca ptr, align 8
  %114 = alloca [1 x ptr], align 8
  %115 = alloca { ptr }, align 8
  %116 = alloca i32, align 4
  %117 = alloca i32, align 4
  %118 = alloca i64, align 8
  %119 = alloca i1, align 1
  %120 = alloca i1, align 1
  %121 = alloca i32, align 4
  %122 = alloca ptr, align 8
  %123 = alloca ptr, align 8
  %124 = alloca i32, align 4
  %125 = alloca i32, align 4
  %126 = alloca i32, align 4
  %127 = alloca [1 x ptr], align 8
  %128 = alloca i32, align 4
  %129 = alloca ptr, align 8
  %130 = alloca ptr, align 8
  %131 = alloca ptr, align 8
  %132 = alloca i32, align 4
  %133 = alloca i32, align 4
  %134 = alloca [3 x ptr], align 8
  %135 = alloca { ptr, ptr, ptr }, align 8
  %136 = alloca i64, align 8
  %137 = alloca i32, align 4
  %138 = alloca ptr, align 8
  %139 = alloca ptr, align 8
  %140 = alloca i32, align 4
  %141 = alloca i32, align 4
  %142 = alloca i32, align 4
  %143 = alloca [1 x ptr], align 8
  %144 = alloca { ptr, ptr, ptr, i32 }, align 8
  %145 = alloca i32, align 4
  %146 = alloca i32, align 4
  %147 = alloca [3 x ptr], align 8
  %148 = alloca { ptr, ptr, ptr }, align 8
  %149 = alloca [1 x ptr], align 8
  %150 = alloca { ptr }, align 8
  %151 = alloca i32, align 4
  %152 = alloca ptr, align 8
  %153 = alloca ptr, align 8
  %154 = alloca i32, align 4
  %155 = alloca i32, align 4
  %156 = alloca i32, align 4
  %157 = alloca [1 x ptr], align 8
  %158 = alloca { ptr, ptr, ptr, i32 }, align 8
  %159 = alloca i32, align 4
  %160 = alloca i32, align 4
  %161 = alloca [3 x ptr], align 8
  %162 = alloca { ptr, ptr, ptr }, align 8
  %163 = alloca [1 x ptr], align 8
  %164 = alloca { ptr }, align 8
  %165 = alloca i32, align 4
  %166 = alloca ptr, align 8
  %167 = alloca ptr, align 8
  %168 = alloca i32, align 4
  %169 = alloca i32, align 4
  %170 = alloca i32, align 4
  %171 = alloca [1 x ptr], align 8
  %172 = alloca { ptr, ptr, ptr, i32 }, align 8
  %173 = alloca i32, align 4
  %174 = alloca i32, align 4
  %175 = alloca [3 x ptr], align 8
  %176 = alloca { ptr, ptr, ptr }, align 8
  %177 = alloca [1 x ptr], align 8
  %178 = alloca { ptr }, align 8
  %179 = alloca i32, align 4
  %.reg2mem = alloca i1, align 1
  %.reg2mem9 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %179, align 4
  %180 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %180, align 8
  %181 = alloca ptr, align 8
  store ptr @i32_eq, ptr %181, align 8
  %182 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %182, align 8
  %183 = getelementptr ptr, ptr %182, i32 1
  store ptr @_parameterization_Ptri32, ptr %183, align 8
  %184 = getelementptr ptr, ptr %182, i32 2
  store ptr @_parameterization_Ptri32, ptr %184, align 8
  %185 = getelementptr ptr, ptr %182, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %185, align 8
  %186 = load ptr, ptr %182, align 8
  %187 = getelementptr ptr, ptr %186, i32 6
  %188 = load ptr, ptr %187, align 8
  %189 = call { i64, i64 } @size_wrapper(ptr %188, ptr %182)
  %190 = extractvalue { i64, i64 } %189, 0
  %191 = call ptr @bump_malloc(i64 %190)
  store ptr @_parameterization_Ptri32, ptr %191, align 8
  %192 = getelementptr ptr, ptr %191, i32 1
  store ptr @_parameterization_Ptri32, ptr %192, align 8
  %193 = getelementptr ptr, ptr %191, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %193, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 24, ptr %191)
  %195 = alloca i32, align 4
  %196 = alloca ptr, align 8
  %197 = alloca ptr, align 8
  %198 = alloca ptr, align 8
  store ptr @CuckooMap, ptr %198, align 8
  store ptr %191, ptr %197, align 8
  store i32 10, ptr %195, align 4
  %199 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %199, align 8
  %200 = alloca ptr, align 8
  store ptr @i32_eq, ptr %200, align 8
  %201 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %201)
  %202 = load ptr, ptr %199, align 8
  call void @llvm.init.trampoline(ptr %201, ptr @dwgqcbbuns, ptr %202)
  %203 = alloca ptr, align 8
  %204 = call ptr @adjust_trampoline(ptr %201)
  store ptr %204, ptr %203, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 24, ptr %201)
  %206 = getelementptr { ptr }, ptr %203, i32 0, i32 0
  %207 = load ptr, ptr %206, align 8
  %208 = insertvalue { ptr } undef, ptr %207, 0
  %209 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %209)
  %210 = load ptr, ptr %200, align 8
  call void @llvm.init.trampoline(ptr %209, ptr @cpgcncwmpd, ptr %210)
  %211 = alloca ptr, align 8
  %212 = call ptr @adjust_trampoline(ptr %209)
  store ptr %212, ptr %211, align 8
  %213 = call ptr @llvm.invariant.start.p0(i64 24, ptr %209)
  %214 = getelementptr { ptr }, ptr %211, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr } undef, ptr %215, 0
  %217 = load ptr, ptr %198, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %217, 0
  %219 = load ptr, ptr %197, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %219, 1
  %221 = load ptr, ptr %196, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %221, 2
  %223 = load i32, ptr %195, align 4
  %224 = insertvalue { ptr, ptr, ptr, i32 } %222, i32 %223, 3
  %225 = alloca [2 x ptr], align 8
  %226 = getelementptr [2 x ptr], ptr %225, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %226, align 8
  %227 = getelementptr [2 x ptr], ptr %225, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %227, align 8
  %228 = call ptr @llvm.invariant.start.p0(i64 4, ptr %225)
  %229 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %217)
  %230 = getelementptr ptr, ptr %217, i32 %223
  %231 = getelementptr ptr, ptr %230, i32 10
  %232 = load ptr, ptr %231, align 8
  %233 = alloca { ptr, ptr }, align 8
  %234 = getelementptr { ptr, ptr }, ptr %233, i32 0, i32 0
  store ptr @function_typ, ptr %234, align 8
  %235 = getelementptr { ptr, ptr }, ptr %233, i32 0, i32 1
  store ptr @function_typ, ptr %235, align 8
  %236 = call ptr @behavior_wrapper(ptr %232, { ptr, ptr, ptr, i32 } %224, ptr %233)
  call void %236({ ptr, ptr, ptr, i32 } %224, { ptr, ptr, ptr, i32 } %224, ptr %225, { ptr } %208, { ptr } %216) #17
  %237 = alloca { ptr, ptr, ptr, i32 }, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 0
  %239 = load ptr, ptr %198, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 1
  %241 = load ptr, ptr %197, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 2
  %243 = load ptr, ptr %196, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 3
  %245 = load i32, ptr %195, align 4
  store i32 %245, ptr %244, align 4
  call void @set_offset(ptr %237, ptr @CuckooMap)
  %246 = alloca i32, align 4
  %247 = alloca ptr, align 8
  %248 = alloca ptr, align 8
  %249 = alloca ptr, align 8
  %250 = load ptr, ptr %238, align 8
  store ptr %250, ptr %249, align 8
  %251 = load ptr, ptr %240, align 8
  store ptr %251, ptr %248, align 8
  %252 = load ptr, ptr %242, align 8
  store ptr %252, ptr %247, align 8
  %253 = load i32, ptr %244, align 4
  store i32 %253, ptr %246, align 4
  %254 = alloca i32, align 4
  store i32 456, ptr %254, align 4
  %255 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %255, align 8
  %256 = load ptr, ptr %255, align 8
  %257 = getelementptr ptr, ptr %256, i32 6
  %258 = load ptr, ptr %257, align 8
  %259 = call { i64, i64 } @size_wrapper(ptr %258, ptr %255)
  %260 = extractvalue { i64, i64 } %259, 0
  %261 = call ptr @bump_malloc(i64 %260)
  %262 = alloca i32, align 4
  %263 = alloca ptr, align 8
  %264 = alloca ptr, align 8
  %265 = alloca ptr, align 8
  store ptr @PRNG, ptr %265, align 8
  store ptr %261, ptr %264, align 8
  store i32 10, ptr %262, align 4
  %266 = alloca i32, align 4
  store i32 456, ptr %266, align 4
  %267 = load i32, ptr %266, align 4
  %268 = load ptr, ptr %265, align 8
  %269 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %268, 0
  %270 = load ptr, ptr %264, align 8
  %271 = insertvalue { ptr, ptr, ptr, i32 } %269, ptr %270, 1
  %272 = load ptr, ptr %263, align 8
  %273 = insertvalue { ptr, ptr, ptr, i32 } %271, ptr %272, 2
  %274 = load i32, ptr %262, align 4
  %275 = insertvalue { ptr, ptr, ptr, i32 } %273, i32 %274, 3
  %276 = alloca [1 x ptr], align 8
  %277 = getelementptr [1 x ptr], ptr %276, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %277, align 8
  %278 = call ptr @llvm.invariant.start.p0(i64 1, ptr %276)
  %279 = call ptr @llvm.invariant.start.p0(i64 40, ptr %268)
  %280 = getelementptr ptr, ptr %268, i32 %274
  %281 = getelementptr ptr, ptr %280, i32 1
  %282 = load ptr, ptr %281, align 8
  %283 = alloca { ptr }, align 8
  %284 = getelementptr { ptr }, ptr %283, i32 0, i32 0
  store ptr @i32_typ, ptr %284, align 8
  %285 = call ptr @behavior_wrapper(ptr %282, { ptr, ptr, ptr, i32 } %275, ptr %283)
  call void %285({ ptr, ptr, ptr, i32 } %275, { ptr, ptr, ptr, i32 } %275, ptr %276, i32 %267) #17
  %286 = alloca { ptr, ptr, ptr, i32 }, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %286, i32 0, i32 0
  %288 = load ptr, ptr %265, align 8
  store ptr %288, ptr %287, align 8
  %289 = getelementptr { ptr, ptr, ptr, i32 }, ptr %286, i32 0, i32 1
  %290 = load ptr, ptr %264, align 8
  store ptr %290, ptr %289, align 8
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %286, i32 0, i32 2
  %292 = load ptr, ptr %263, align 8
  store ptr %292, ptr %291, align 8
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %286, i32 0, i32 3
  %294 = load i32, ptr %262, align 4
  store i32 %294, ptr %293, align 4
  call void @set_offset(ptr %286, ptr @PRNG)
  %295 = alloca i32, align 4
  %296 = alloca ptr, align 8
  %297 = alloca ptr, align 8
  %298 = alloca ptr, align 8
  %299 = load ptr, ptr %287, align 8
  store ptr %299, ptr %298, align 8
  %300 = load ptr, ptr %289, align 8
  store ptr %300, ptr %297, align 8
  %301 = load ptr, ptr %291, align 8
  store ptr %301, ptr %296, align 8
  %302 = load i32, ptr %293, align 4
  store i32 %302, ptr %295, align 4
  %303 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %303, align 8
  %304 = getelementptr ptr, ptr %303, i32 1
  store ptr @_parameterization_Ptri32, ptr %304, align 8
  %305 = load ptr, ptr %303, align 8
  %306 = getelementptr ptr, ptr %305, i32 6
  %307 = load ptr, ptr %306, align 8
  %308 = call { i64, i64 } @size_wrapper(ptr %307, ptr %303)
  %309 = extractvalue { i64, i64 } %308, 0
  %310 = call ptr @bump_malloc(i64 %309)
  store ptr @_parameterization_Ptri32, ptr %310, align 8
  %311 = call ptr @llvm.invariant.start.p0(i64 8, ptr %310)
  %312 = alloca i32, align 4
  %313 = alloca ptr, align 8
  %314 = alloca ptr, align 8
  %315 = alloca ptr, align 8
  store ptr @Array, ptr %315, align 8
  store ptr %310, ptr %314, align 8
  store i32 10, ptr %312, align 4
  %316 = load i32, ptr %179, align 4
  %317 = load ptr, ptr %315, align 8
  %318 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %317, 0
  %319 = load ptr, ptr %314, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } %318, ptr %319, 1
  %321 = load ptr, ptr %313, align 8
  %322 = insertvalue { ptr, ptr, ptr, i32 } %320, ptr %321, 2
  %323 = load i32, ptr %312, align 4
  %324 = insertvalue { ptr, ptr, ptr, i32 } %322, i32 %323, 3
  %325 = alloca [1 x ptr], align 8
  %326 = getelementptr [1 x ptr], ptr %325, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %326, align 8
  %327 = call ptr @llvm.invariant.start.p0(i64 1, ptr %325)
  %328 = call ptr @llvm.invariant.start.p0(i64 664, ptr %317)
  %329 = getelementptr ptr, ptr %317, i32 %323
  %330 = getelementptr ptr, ptr %329, i32 6
  %331 = load ptr, ptr %330, align 8
  %332 = alloca { ptr }, align 8
  %333 = getelementptr { ptr }, ptr %332, i32 0, i32 0
  store ptr @i32_typ, ptr %333, align 8
  %334 = call ptr @behavior_wrapper(ptr %331, { ptr, ptr, ptr, i32 } %324, ptr %332)
  call void %334({ ptr, ptr, ptr, i32 } %324, { ptr, ptr, ptr, i32 } %324, ptr %325, i32 %316) #17
  %335 = alloca { ptr, ptr, ptr, i32 }, align 8
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %335, i32 0, i32 0
  %337 = load ptr, ptr %315, align 8
  store ptr %337, ptr %336, align 8
  %338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %335, i32 0, i32 1
  %339 = load ptr, ptr %314, align 8
  store ptr %339, ptr %338, align 8
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %335, i32 0, i32 2
  %341 = load ptr, ptr %313, align 8
  store ptr %341, ptr %340, align 8
  %342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %335, i32 0, i32 3
  %343 = load i32, ptr %312, align 4
  store i32 %343, ptr %342, align 4
  call void @set_offset(ptr %335, ptr @Array)
  %344 = alloca i32, align 4
  %345 = alloca ptr, align 8
  %346 = alloca ptr, align 8
  %347 = alloca ptr, align 8
  %348 = load ptr, ptr %336, align 8
  store ptr %348, ptr %347, align 8
  %349 = load ptr, ptr %338, align 8
  store ptr %349, ptr %346, align 8
  %350 = load ptr, ptr %340, align 8
  store ptr %350, ptr %345, align 8
  %351 = load i32, ptr %342, align 4
  store i32 %351, ptr %344, align 4
  %352 = alloca i64, align 8
  store i64 0, ptr %352, align 4
  %353 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %353, align 8
  %354 = alloca ptr, align 8
  store ptr @i32_eq, ptr %354, align 8
  %355 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %355, align 8
  %356 = getelementptr ptr, ptr %355, i32 1
  store ptr @_parameterization_Ptri32, ptr %356, align 8
  %357 = getelementptr ptr, ptr %355, i32 2
  store ptr @_parameterization_Ptri1, ptr %357, align 8
  %358 = getelementptr ptr, ptr %355, i32 3
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %358, align 8
  %359 = load ptr, ptr %355, align 8
  %360 = getelementptr ptr, ptr %359, i32 6
  %361 = load ptr, ptr %360, align 8
  %362 = call { i64, i64 } @size_wrapper(ptr %361, ptr %355)
  %363 = extractvalue { i64, i64 } %362, 0
  %364 = call ptr @bump_malloc(i64 %363)
  store ptr @_parameterization_Ptri32, ptr %364, align 8
  %365 = getelementptr ptr, ptr %364, i32 1
  store ptr @_parameterization_Ptri1, ptr %365, align 8
  %366 = getelementptr ptr, ptr %364, i32 2
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %366, align 8
  %367 = call ptr @llvm.invariant.start.p0(i64 24, ptr %364)
  %368 = alloca i32, align 4
  %369 = alloca ptr, align 8
  %370 = alloca ptr, align 8
  %371 = alloca ptr, align 8
  store ptr @CuckooMap, ptr %371, align 8
  store ptr %364, ptr %370, align 8
  store i32 10, ptr %368, align 4
  %372 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %372, align 8
  %373 = alloca ptr, align 8
  store ptr @i32_eq, ptr %373, align 8
  %374 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %374)
  %375 = load ptr, ptr %372, align 8
  call void @llvm.init.trampoline(ptr %374, ptr @cjkjdjoefc, ptr %375)
  %376 = alloca ptr, align 8
  %377 = call ptr @adjust_trampoline(ptr %374)
  store ptr %377, ptr %376, align 8
  %378 = call ptr @llvm.invariant.start.p0(i64 24, ptr %374)
  %379 = getelementptr { ptr }, ptr %376, i32 0, i32 0
  %380 = load ptr, ptr %379, align 8
  %381 = insertvalue { ptr } undef, ptr %380, 0
  %382 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %382)
  %383 = load ptr, ptr %373, align 8
  call void @llvm.init.trampoline(ptr %382, ptr @afcwmpmbdj, ptr %383)
  %384 = alloca ptr, align 8
  %385 = call ptr @adjust_trampoline(ptr %382)
  store ptr %385, ptr %384, align 8
  %386 = call ptr @llvm.invariant.start.p0(i64 24, ptr %382)
  %387 = getelementptr { ptr }, ptr %384, i32 0, i32 0
  %388 = load ptr, ptr %387, align 8
  %389 = insertvalue { ptr } undef, ptr %388, 0
  %390 = load ptr, ptr %371, align 8
  %391 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %390, 0
  %392 = load ptr, ptr %370, align 8
  %393 = insertvalue { ptr, ptr, ptr, i32 } %391, ptr %392, 1
  %394 = load ptr, ptr %369, align 8
  %395 = insertvalue { ptr, ptr, ptr, i32 } %393, ptr %394, 2
  %396 = load i32, ptr %368, align 4
  %397 = insertvalue { ptr, ptr, ptr, i32 } %395, i32 %396, 3
  %398 = alloca [2 x ptr], align 8
  %399 = getelementptr [2 x ptr], ptr %398, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %399, align 8
  %400 = getelementptr [2 x ptr], ptr %398, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %400, align 8
  %401 = call ptr @llvm.invariant.start.p0(i64 4, ptr %398)
  %402 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %390)
  %403 = getelementptr ptr, ptr %390, i32 %396
  %404 = getelementptr ptr, ptr %403, i32 10
  %405 = load ptr, ptr %404, align 8
  %406 = alloca { ptr, ptr }, align 8
  %407 = getelementptr { ptr, ptr }, ptr %406, i32 0, i32 0
  store ptr @function_typ, ptr %407, align 8
  %408 = getelementptr { ptr, ptr }, ptr %406, i32 0, i32 1
  store ptr @function_typ, ptr %408, align 8
  %409 = call ptr @behavior_wrapper(ptr %405, { ptr, ptr, ptr, i32 } %397, ptr %406)
  call void %409({ ptr, ptr, ptr, i32 } %397, { ptr, ptr, ptr, i32 } %397, ptr %398, { ptr } %381, { ptr } %389) #17
  %410 = alloca { ptr, ptr, ptr, i32 }, align 8
  %411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 0
  %412 = load ptr, ptr %371, align 8
  store ptr %412, ptr %411, align 8
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 1
  %414 = load ptr, ptr %370, align 8
  store ptr %414, ptr %413, align 8
  %415 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 2
  %416 = load ptr, ptr %369, align 8
  store ptr %416, ptr %415, align 8
  %417 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 3
  %418 = load i32, ptr %368, align 4
  store i32 %418, ptr %417, align 4
  call void @set_offset(ptr %410, ptr @CuckooMap)
  %419 = alloca i32, align 4
  %420 = alloca ptr, align 8
  %421 = alloca ptr, align 8
  %422 = alloca ptr, align 8
  %423 = load ptr, ptr %411, align 8
  store ptr %423, ptr %422, align 8
  %424 = load ptr, ptr %413, align 8
  store ptr %424, ptr %421, align 8
  %425 = load ptr, ptr %415, align 8
  store ptr %425, ptr %420, align 8
  %426 = load i32, ptr %417, align 4
  store i32 %426, ptr %419, align 4
  %427 = alloca i32, align 4
  store i32 0, ptr %427, align 4
  %428 = alloca i32, align 4
  store i32 0, ptr %428, align 4
  %429 = alloca i32, align 4
  store i32 10, ptr %429, align 4
  %430 = load i32, ptr %179, align 4
  %431 = load i32, ptr %429, align 4
  %432 = mul i32 %430, %431
  %433 = alloca i32, align 4
  store i32 %432, ptr %433, align 4
  br label %434

434:                                              ; preds = %._crit_edge3, %1
  %435 = load i32, ptr %427, align 4
  %436 = load i32, ptr %179, align 4
  %437 = icmp slt i32 %435, %436
  store i1 %437, ptr %2, align 1
  %438 = load i1, ptr %2, align 1
  store i1 %438, ptr %3, align 1
  br i1 %438, label %439, label %._crit_edge

._crit_edge:                                      ; preds = %434
  br label %444

439:                                              ; preds = %434
  %440 = load i32, ptr %428, align 4
  %441 = load i32, ptr %433, align 4
  %442 = icmp slt i32 %440, %441
  store i1 %442, ptr %4, align 1
  %443 = load i1, ptr %4, align 1
  store i1 %443, ptr %3, align 1
  br label %444

444:                                              ; preds = %._crit_edge, %439
  %445 = load i1, ptr %3, align 1
  store i1 %445, ptr %5, align 1
  %446 = load i1, ptr %5, align 1
  store i1 %446, ptr %.reg2mem9, align 1
  %.reload11 = load i1, ptr %.reg2mem9, align 1
  br i1 %.reload11, label %447, label %._crit_edge1

._crit_edge1:                                     ; preds = %444
  br label %594

447:                                              ; preds = %444
  %448 = load ptr, ptr %298, align 8
  %449 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %448, 0
  %450 = load ptr, ptr %297, align 8
  %451 = insertvalue { ptr, ptr, ptr, i32 } %449, ptr %450, 1
  %452 = load ptr, ptr %296, align 8
  %453 = insertvalue { ptr, ptr, ptr, i32 } %451, ptr %452, 2
  %454 = load i32, ptr %295, align 4
  %455 = insertvalue { ptr, ptr, ptr, i32 } %453, i32 %454, 3
  %456 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %457 = call ptr @llvm.invariant.start.p0(i64 40, ptr %448)
  %458 = getelementptr ptr, ptr %448, i32 %454
  %459 = getelementptr ptr, ptr %458, i32 2
  %460 = load ptr, ptr %459, align 8
  %461 = call ptr @behavior_wrapper(ptr %460, { ptr, ptr, ptr, i32 } %455, ptr %7)
  %462 = call i32 %461({ ptr, ptr, ptr, i32 } %455, { ptr, ptr, ptr, i32 } %455, ptr %6) #17
  store i32 %462, ptr %8, align 4
  store ptr @i32_typ, ptr %10, align 8
  %463 = load i32, ptr %8, align 4
  store i32 %463, ptr %9, align 4
  %464 = load ptr, ptr %10, align 8
  %465 = insertvalue { ptr, i160 } undef, ptr %464, 0
  %466 = load i160, ptr %9, align 4
  %467 = insertvalue { ptr, i160 } %465, i160 %466, 1
  %468 = load ptr, ptr %422, align 8
  %469 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %468, 0
  %470 = load ptr, ptr %421, align 8
  %471 = insertvalue { ptr, ptr, ptr, i32 } %469, ptr %470, 1
  %472 = load ptr, ptr %420, align 8
  %473 = insertvalue { ptr, ptr, ptr, i32 } %471, ptr %472, 2
  %474 = load i32, ptr %419, align 4
  %475 = insertvalue { ptr, ptr, ptr, i32 } %473, i32 %474, 3
  %476 = getelementptr [1 x ptr], ptr %11, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %476, align 8
  %477 = call ptr @llvm.invariant.start.p0(i64 1, ptr %11)
  %478 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %468)
  %479 = getelementptr ptr, ptr %468, i32 %474
  %480 = getelementptr ptr, ptr %479, i32 23
  %481 = load ptr, ptr %480, align 8
  %482 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  store ptr %464, ptr %482, align 8
  %483 = call ptr @behavior_wrapper(ptr %481, { ptr, ptr, ptr, i32 } %475, ptr %12)
  %484 = call { ptr, i160 } %483({ ptr, ptr, ptr, i32 } %475, { ptr, ptr, ptr, i32 } %475, ptr %11, { ptr, i160 } %467) #17
  store { ptr, i160 } %484, ptr %13, align 8
  %485 = getelementptr { ptr, i1 }, ptr %13, i32 0, i32 0
  %486 = load ptr, ptr %485, align 8
  store ptr %486, ptr %14, align 8
  %487 = getelementptr { ptr, i1 }, ptr %13, i32 0, i32 1
  %488 = load i1, ptr %487, align 1
  store i1 %488, ptr %15, align 1
  %489 = load ptr, ptr %14, align 8
  %490 = ptrtoint ptr %489 to i64
  %491 = icmp eq i64 %490, ptrtoint (ptr @nil_typ to i64)
  %492 = icmp eq i64 %490, 0
  %493 = or i1 %491, %492
  store i1 %493, ptr %16, align 1
  %494 = load i1, ptr %16, align 1
  br i1 %494, label %495, label %._crit_edge2

._crit_edge2:                                     ; preds = %447
  br label %589

495:                                              ; preds = %447
  store i32 1, ptr %17, align 4
  %496 = load i32, ptr %8, align 4
  %497 = load i32, ptr %17, align 4
  %498 = add i32 %496, %497
  store i32 %498, ptr %18, align 4
  store ptr @i32_typ, ptr %20, align 8
  %499 = load i32, ptr %8, align 4
  store i32 %499, ptr %19, align 4
  %500 = load ptr, ptr %20, align 8
  %501 = insertvalue { ptr, i160 } undef, ptr %500, 0
  %502 = load i160, ptr %19, align 4
  %503 = insertvalue { ptr, i160 } %501, i160 %502, 1
  store ptr @i32_typ, ptr %22, align 8
  %504 = load i32, ptr %18, align 4
  store i32 %504, ptr %21, align 4
  %505 = load ptr, ptr %22, align 8
  %506 = insertvalue { ptr, i160 } undef, ptr %505, 0
  %507 = load i160, ptr %21, align 4
  %508 = insertvalue { ptr, i160 } %506, i160 %507, 1
  %509 = load ptr, ptr %249, align 8
  %510 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %509, 0
  %511 = load ptr, ptr %248, align 8
  %512 = insertvalue { ptr, ptr, ptr, i32 } %510, ptr %511, 1
  %513 = load ptr, ptr %247, align 8
  %514 = insertvalue { ptr, ptr, ptr, i32 } %512, ptr %513, 2
  %515 = load i32, ptr %246, align 4
  %516 = insertvalue { ptr, ptr, ptr, i32 } %514, i32 %515, 3
  %517 = getelementptr [2 x ptr], ptr %23, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %517, align 8
  %518 = getelementptr [2 x ptr], ptr %23, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %518, align 8
  %519 = call ptr @llvm.invariant.start.p0(i64 4, ptr %23)
  %520 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %509)
  %521 = getelementptr ptr, ptr %509, i32 %515
  %522 = getelementptr ptr, ptr %521, i32 21
  %523 = load ptr, ptr %522, align 8
  %524 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  store ptr %500, ptr %524, align 8
  %525 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 1
  store ptr %505, ptr %525, align 8
  %526 = call ptr @behavior_wrapper(ptr %523, { ptr, ptr, ptr, i32 } %516, ptr %24)
  call void %526({ ptr, ptr, ptr, i32 } %516, { ptr, ptr, ptr, i32 } %516, ptr %23, { ptr, i160 } %503, { ptr, i160 } %508) #17
  %527 = load i32, ptr %427, align 4
  store ptr @i32_typ, ptr %26, align 8
  %528 = load i32, ptr %8, align 4
  store i32 %528, ptr %25, align 4
  %529 = load ptr, ptr %26, align 8
  %530 = insertvalue { ptr, i160 } undef, ptr %529, 0
  %531 = load i160, ptr %25, align 4
  %532 = insertvalue { ptr, i160 } %530, i160 %531, 1
  %533 = load ptr, ptr %347, align 8
  %534 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %533, 0
  %535 = load ptr, ptr %346, align 8
  %536 = insertvalue { ptr, ptr, ptr, i32 } %534, ptr %535, 1
  %537 = load ptr, ptr %345, align 8
  %538 = insertvalue { ptr, ptr, ptr, i32 } %536, ptr %537, 2
  %539 = load i32, ptr %344, align 4
  %540 = insertvalue { ptr, ptr, ptr, i32 } %538, i32 %539, 3
  %541 = getelementptr [2 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %541, align 8
  %542 = getelementptr [2 x ptr], ptr %27, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %542, align 8
  %543 = call ptr @llvm.invariant.start.p0(i64 4, ptr %27)
  %544 = call ptr @llvm.invariant.start.p0(i64 664, ptr %533)
  %545 = getelementptr ptr, ptr %533, i32 %539
  %546 = getelementptr ptr, ptr %545, i32 18
  %547 = load ptr, ptr %546, align 8
  %548 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  store ptr @i32_typ, ptr %548, align 8
  %549 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  store ptr %529, ptr %549, align 8
  %550 = call ptr @behavior_wrapper(ptr %547, { ptr, ptr, ptr, i32 } %540, ptr %28)
  call void %550({ ptr, ptr, ptr, i32 } %540, { ptr, ptr, ptr, i32 } %540, ptr %27, i32 %527, { ptr, i160 } %532) #17
  store i1 true, ptr %29, align 1
  store ptr @i32_typ, ptr %31, align 8
  %551 = load i32, ptr %8, align 4
  store i32 %551, ptr %30, align 4
  %552 = load ptr, ptr %31, align 8
  %553 = insertvalue { ptr, i160 } undef, ptr %552, 0
  %554 = load i160, ptr %30, align 4
  %555 = insertvalue { ptr, i160 } %553, i160 %554, 1
  store ptr @bool_typ, ptr %33, align 8
  %556 = load i1, ptr %29, align 1
  store i1 %556, ptr %32, align 1
  %557 = load ptr, ptr %33, align 8
  %558 = insertvalue { ptr, i160 } undef, ptr %557, 0
  %559 = load i160, ptr %32, align 4
  %560 = insertvalue { ptr, i160 } %558, i160 %559, 1
  %561 = load ptr, ptr %422, align 8
  %562 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %561, 0
  %563 = load ptr, ptr %421, align 8
  %564 = insertvalue { ptr, ptr, ptr, i32 } %562, ptr %563, 1
  %565 = load ptr, ptr %420, align 8
  %566 = insertvalue { ptr, ptr, ptr, i32 } %564, ptr %565, 2
  %567 = load i32, ptr %419, align 4
  %568 = insertvalue { ptr, ptr, ptr, i32 } %566, i32 %567, 3
  %569 = getelementptr [2 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %569, align 8
  %570 = getelementptr [2 x ptr], ptr %34, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %570, align 8
  %571 = call ptr @llvm.invariant.start.p0(i64 4, ptr %34)
  %572 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %561)
  %573 = getelementptr ptr, ptr %561, i32 %567
  %574 = getelementptr ptr, ptr %573, i32 21
  %575 = load ptr, ptr %574, align 8
  %576 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  store ptr %552, ptr %576, align 8
  %577 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 1
  store ptr %557, ptr %577, align 8
  %578 = call ptr @behavior_wrapper(ptr %575, { ptr, ptr, ptr, i32 } %568, ptr %35)
  call void %578({ ptr, ptr, ptr, i32 } %568, { ptr, ptr, ptr, i32 } %568, ptr %34, { ptr, i160 } %555, { ptr, i160 } %560) #17
  %579 = load i32, ptr %18, align 4
  %580 = sext i32 %579 to i64
  store i64 %580, ptr %36, align 4
  %581 = load i64, ptr %352, align 4
  %582 = load i64, ptr %36, align 4
  %583 = add i64 %581, %582
  store i64 %583, ptr %37, align 4
  %584 = load i64, ptr %37, align 4
  store i64 %584, ptr %352, align 4
  store i32 1, ptr %38, align 4
  %585 = load i32, ptr %427, align 4
  %586 = load i32, ptr %38, align 4
  %587 = add i32 %585, %586
  store i32 %587, ptr %39, align 4
  %588 = load i32, ptr %39, align 4
  store i32 %588, ptr %427, align 4
  br label %589

589:                                              ; preds = %._crit_edge2, %495
  store i32 1, ptr %40, align 4
  %590 = load i32, ptr %428, align 4
  %591 = load i32, ptr %40, align 4
  %592 = add i32 %590, %591
  store i32 %592, ptr %41, align 4
  %593 = load i32, ptr %41, align 4
  store i32 %593, ptr %428, align 4
  br label %594

594:                                              ; preds = %._crit_edge1, %589
  %.reload10 = load i1, ptr %.reg2mem9, align 1
  br i1 %.reload10, label %._crit_edge3, label %595

._crit_edge3:                                     ; preds = %594
  br label %434

595:                                              ; preds = %594
  %596 = load i32, ptr %427, align 4
  %597 = load i32, ptr %179, align 4
  %598 = icmp slt i32 %596, %597
  store i1 %598, ptr %42, align 1
  %599 = load i1, ptr %42, align 1
  br i1 %599, label %600, label %._crit_edge4

._crit_edge4:                                     ; preds = %595
  br label %729

600:                                              ; preds = %595
  store i32 30, ptr %43, align 4
  %601 = load i32, ptr %43, align 4
  %602 = sext i32 %601 to i64
  %603 = mul i64 %602, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %604 = call ptr @bump_malloc(i64 %603)
  store ptr %604, ptr %44, align 8
  %605 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  %606 = load ptr, ptr %605, align 8
  store ptr %606, ptr %45, align 8
  store i32 0, ptr %46, align 4
  %607 = load ptr, ptr %45, align 8
  %608 = load i32, ptr %46, align 4
  %609 = sext i32 %608 to i64
  %610 = mul i64 ptrtoint (ptr getelementptr ([29 x i8], ptr null, i32 1) to i64), %609
  %611 = getelementptr i8, ptr %607, i64 %610
  %612 = load <29 x i8>, ptr @qijxd_Warning_Could_only_generate_, align 32
  store <29 x i8> %612, ptr %611, align 32
  store i32 29, ptr %47, align 4
  store i32 30, ptr %48, align 4
  store ptr @String, ptr %49, align 8
  %613 = load ptr, ptr %49, align 8
  %614 = getelementptr ptr, ptr %613, i32 6
  %615 = load ptr, ptr %614, align 8
  %616 = call { i64, i64 } @size_wrapper(ptr %615, ptr %49)
  %617 = extractvalue { i64, i64 } %616, 0
  %618 = call ptr @bump_malloc(i64 %617)
  %619 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %620 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  store ptr @String, ptr %50, align 8
  store ptr %618, ptr %619, align 8
  store i32 10, ptr %620, align 4
  store i32 29, ptr %51, align 4
  store i32 30, ptr %52, align 4
  %621 = load ptr, ptr %45, align 8
  %622 = insertvalue { ptr } undef, ptr %621, 0
  %623 = load i32, ptr %51, align 4
  %624 = load i32, ptr %52, align 4
  %625 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %626 = load ptr, ptr %625, align 8
  %627 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %626, 0
  %628 = load ptr, ptr %619, align 8
  %629 = insertvalue { ptr, ptr, ptr, i32 } %627, ptr %628, 1
  %630 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %631 = load ptr, ptr %630, align 8
  %632 = insertvalue { ptr, ptr, ptr, i32 } %629, ptr %631, 2
  %633 = load i32, ptr %620, align 4
  %634 = insertvalue { ptr, ptr, ptr, i32 } %632, i32 %633, 3
  %635 = getelementptr [3 x ptr], ptr %53, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %635, align 8
  %636 = getelementptr [3 x ptr], ptr %53, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %636, align 8
  %637 = getelementptr [3 x ptr], ptr %53, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %637, align 8
  %638 = call ptr @llvm.invariant.start.p0(i64 9, ptr %53)
  %639 = call ptr @llvm.invariant.start.p0(i64 632, ptr %626)
  %640 = getelementptr ptr, ptr %626, i32 %633
  %641 = getelementptr ptr, ptr %640, i32 6
  %642 = load ptr, ptr %641, align 8
  %643 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 0
  store ptr @buffer_typ, ptr %643, align 8
  %644 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 1
  store ptr @i32_typ, ptr %644, align 8
  %645 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 2
  store ptr @i32_typ, ptr %645, align 8
  %646 = call ptr @behavior_wrapper(ptr %642, { ptr, ptr, ptr, i32 } %634, ptr %54)
  call void %646({ ptr, ptr, ptr, i32 } %634, { ptr, ptr, ptr, i32 } %634, ptr %53, { ptr } %622, i32 %623, i32 %624) #17
  %647 = getelementptr { ptr, i160 }, ptr %50, i32 0, i32 0
  %648 = load ptr, ptr %647, align 8
  %649 = insertvalue { ptr, i160 } undef, ptr %648, 0
  %650 = getelementptr { ptr, i160 }, ptr %50, i32 0, i32 1
  %651 = load i160, ptr %650, align 4
  %652 = insertvalue { ptr, i160 } %649, i160 %651, 1
  %653 = getelementptr [1 x ptr], ptr %55, i32 0, i32 0
  store ptr @_parameterization_String, ptr %653, align 8
  %654 = call ptr @llvm.invariant.start.p0(i64 1, ptr %55)
  %655 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %656 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %657 = getelementptr { ptr }, ptr %56, i32 0, i32 0
  store ptr %648, ptr %657, align 8
  %658 = call ptr @class_behavior_wrapper(ptr %656, ptr %56)
  call void %658(ptr %55, { ptr, i160 } %652) #17
  %659 = load i32, ptr %427, align 4
  store i32 %659, ptr %57, align 4
  store ptr @i32_typ, ptr %58, align 8
  %660 = load ptr, ptr %58, align 8
  %661 = insertvalue { ptr, i160 } undef, ptr %660, 0
  %662 = load i160, ptr %57, align 4
  %663 = insertvalue { ptr, i160 } %661, i160 %662, 1
  %664 = getelementptr [1 x ptr], ptr %59, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %664, align 8
  %665 = call ptr @llvm.invariant.start.p0(i64 1, ptr %59)
  %666 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %667 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %668 = getelementptr { ptr }, ptr %60, i32 0, i32 0
  store ptr %660, ptr %668, align 8
  %669 = call ptr @class_behavior_wrapper(ptr %667, ptr %60)
  call void %669(ptr %59, { ptr, i160 } %663) #17
  store i32 34, ptr %61, align 4
  %670 = load i32, ptr %61, align 4
  %671 = sext i32 %670 to i64
  %672 = mul i64 %671, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %673 = call ptr @bump_malloc(i64 %672)
  store ptr %673, ptr %62, align 8
  %674 = getelementptr { ptr }, ptr %62, i32 0, i32 0
  %675 = load ptr, ptr %674, align 8
  store ptr %675, ptr %63, align 8
  store i32 0, ptr %64, align 4
  %676 = load ptr, ptr %63, align 8
  %677 = load i32, ptr %64, align 4
  %678 = sext i32 %677 to i64
  %679 = mul i64 ptrtoint (ptr getelementptr ([33 x i8], ptr null, i32 1) to i64), %678
  %680 = getelementptr i8, ptr %676, i64 %679
  %681 = load <33 x i8>, ptr @fhtqp__unique_keys_for_random_hit_test, align 64
  store <33 x i8> %681, ptr %680, align 64
  store i32 33, ptr %65, align 4
  store i32 34, ptr %66, align 4
  store ptr @String, ptr %67, align 8
  %682 = load ptr, ptr %67, align 8
  %683 = getelementptr ptr, ptr %682, i32 6
  %684 = load ptr, ptr %683, align 8
  %685 = call { i64, i64 } @size_wrapper(ptr %684, ptr %67)
  %686 = extractvalue { i64, i64 } %685, 0
  %687 = call ptr @bump_malloc(i64 %686)
  %688 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %689 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  store ptr @String, ptr %68, align 8
  store ptr %687, ptr %688, align 8
  store i32 10, ptr %689, align 4
  store i32 33, ptr %69, align 4
  store i32 34, ptr %70, align 4
  %690 = load ptr, ptr %63, align 8
  %691 = insertvalue { ptr } undef, ptr %690, 0
  %692 = load i32, ptr %69, align 4
  %693 = load i32, ptr %70, align 4
  %694 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %695 = load ptr, ptr %694, align 8
  %696 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %695, 0
  %697 = load ptr, ptr %688, align 8
  %698 = insertvalue { ptr, ptr, ptr, i32 } %696, ptr %697, 1
  %699 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %700 = load ptr, ptr %699, align 8
  %701 = insertvalue { ptr, ptr, ptr, i32 } %698, ptr %700, 2
  %702 = load i32, ptr %689, align 4
  %703 = insertvalue { ptr, ptr, ptr, i32 } %701, i32 %702, 3
  %704 = getelementptr [3 x ptr], ptr %71, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %704, align 8
  %705 = getelementptr [3 x ptr], ptr %71, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %705, align 8
  %706 = getelementptr [3 x ptr], ptr %71, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %706, align 8
  %707 = call ptr @llvm.invariant.start.p0(i64 9, ptr %71)
  %708 = call ptr @llvm.invariant.start.p0(i64 632, ptr %695)
  %709 = getelementptr ptr, ptr %695, i32 %702
  %710 = getelementptr ptr, ptr %709, i32 6
  %711 = load ptr, ptr %710, align 8
  %712 = getelementptr { ptr, ptr, ptr }, ptr %72, i32 0, i32 0
  store ptr @buffer_typ, ptr %712, align 8
  %713 = getelementptr { ptr, ptr, ptr }, ptr %72, i32 0, i32 1
  store ptr @i32_typ, ptr %713, align 8
  %714 = getelementptr { ptr, ptr, ptr }, ptr %72, i32 0, i32 2
  store ptr @i32_typ, ptr %714, align 8
  %715 = call ptr @behavior_wrapper(ptr %711, { ptr, ptr, ptr, i32 } %703, ptr %72)
  call void %715({ ptr, ptr, ptr, i32 } %703, { ptr, ptr, ptr, i32 } %703, ptr %71, { ptr } %691, i32 %692, i32 %693) #17
  %716 = getelementptr { ptr, i160 }, ptr %68, i32 0, i32 0
  %717 = load ptr, ptr %716, align 8
  %718 = insertvalue { ptr, i160 } undef, ptr %717, 0
  %719 = getelementptr { ptr, i160 }, ptr %68, i32 0, i32 1
  %720 = load i160, ptr %719, align 4
  %721 = insertvalue { ptr, i160 } %718, i160 %720, 1
  %722 = getelementptr [1 x ptr], ptr %73, i32 0, i32 0
  store ptr @_parameterization_String, ptr %722, align 8
  %723 = call ptr @llvm.invariant.start.p0(i64 1, ptr %73)
  %724 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %725 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %726 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  store ptr %717, ptr %726, align 8
  %727 = call ptr @class_behavior_wrapper(ptr %725, ptr %74)
  call void %727(ptr %73, { ptr, i160 } %721) #17
  %728 = load i32, ptr %427, align 4
  store i32 %728, ptr %179, align 4
  br label %729

729:                                              ; preds = %._crit_edge4, %600
  %730 = call i64 @clock()
  store i64 %730, ptr %75, align 4
  store i64 0, ptr %76, align 4
  store i1 true, ptr %77, align 1
  store i32 0, ptr %78, align 4
  br label %731

731:                                              ; preds = %._crit_edge6, %729
  %732 = load i32, ptr %78, align 4
  %733 = load i32, ptr %179, align 4
  %734 = icmp slt i32 %732, %733
  store i1 %734, ptr %79, align 1
  %735 = load i1, ptr %79, align 1
  store i1 %735, ptr %.reg2mem, align 1
  %.reload8 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload8, label %736, label %._crit_edge5

._crit_edge5:                                     ; preds = %731
  br label %879

736:                                              ; preds = %731
  %737 = load i32, ptr %78, align 4
  %738 = load ptr, ptr %347, align 8
  %739 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %738, 0
  %740 = load ptr, ptr %346, align 8
  %741 = insertvalue { ptr, ptr, ptr, i32 } %739, ptr %740, 1
  %742 = load ptr, ptr %345, align 8
  %743 = insertvalue { ptr, ptr, ptr, i32 } %741, ptr %742, 2
  %744 = load i32, ptr %344, align 4
  %745 = insertvalue { ptr, ptr, ptr, i32 } %743, i32 %744, 3
  %746 = getelementptr [1 x ptr], ptr %80, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %746, align 8
  %747 = call ptr @llvm.invariant.start.p0(i64 1, ptr %80)
  %748 = call ptr @llvm.invariant.start.p0(i64 664, ptr %738)
  %749 = getelementptr ptr, ptr %738, i32 %744
  %750 = getelementptr ptr, ptr %749, i32 17
  %751 = load ptr, ptr %750, align 8
  %752 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  store ptr @i32_typ, ptr %752, align 8
  %753 = call ptr @behavior_wrapper(ptr %751, { ptr, ptr, ptr, i32 } %745, ptr %81)
  %754 = call { ptr, i160 } %753({ ptr, ptr, ptr, i32 } %745, { ptr, ptr, ptr, i32 } %745, ptr %80, i32 %737) #17
  store { ptr, i160 } %754, ptr %82, align 8
  %755 = getelementptr { ptr, i160 }, ptr %82, i32 0, i32 1
  %756 = load i32, ptr %755, align 4
  store i32 %756, ptr %83, align 4
  store ptr @i32_typ, ptr %85, align 8
  %757 = load i32, ptr %83, align 4
  store i32 %757, ptr %84, align 4
  %758 = load ptr, ptr %85, align 8
  %759 = insertvalue { ptr, i160 } undef, ptr %758, 0
  %760 = load i160, ptr %84, align 4
  %761 = insertvalue { ptr, i160 } %759, i160 %760, 1
  %762 = load ptr, ptr %249, align 8
  %763 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %762, 0
  %764 = load ptr, ptr %248, align 8
  %765 = insertvalue { ptr, ptr, ptr, i32 } %763, ptr %764, 1
  %766 = load ptr, ptr %247, align 8
  %767 = insertvalue { ptr, ptr, ptr, i32 } %765, ptr %766, 2
  %768 = load i32, ptr %246, align 4
  %769 = insertvalue { ptr, ptr, ptr, i32 } %767, i32 %768, 3
  %770 = getelementptr [1 x ptr], ptr %86, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %770, align 8
  %771 = call ptr @llvm.invariant.start.p0(i64 1, ptr %86)
  %772 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %762)
  %773 = getelementptr ptr, ptr %762, i32 %768
  %774 = getelementptr ptr, ptr %773, i32 23
  %775 = load ptr, ptr %774, align 8
  %776 = getelementptr { ptr }, ptr %87, i32 0, i32 0
  store ptr %758, ptr %776, align 8
  %777 = call ptr @behavior_wrapper(ptr %775, { ptr, ptr, ptr, i32 } %769, ptr %87)
  %778 = call { ptr, i160 } %777({ ptr, ptr, ptr, i32 } %769, { ptr, ptr, ptr, i32 } %769, ptr %86, { ptr, i160 } %761) #17
  store { ptr, i160 } %778, ptr %88, align 8
  %779 = getelementptr { ptr, i32 }, ptr %88, i32 0, i32 0
  %780 = load ptr, ptr %779, align 8
  store ptr %780, ptr %90, align 8
  %781 = getelementptr { ptr, i32 }, ptr %88, i32 0, i32 1
  %782 = load i32, ptr %781, align 4
  store i32 %782, ptr %89, align 4
  %783 = load ptr, ptr %90, align 8
  %784 = ptrtoint ptr %783 to i64
  %785 = icmp eq i64 %784, ptrtoint (ptr @nil_typ to i64)
  %786 = icmp eq i64 %784, 0
  %787 = or i1 %785, %786
  %788 = icmp eq i1 %787, false
  store i1 %788, ptr %91, align 1
  %789 = load i1, ptr %91, align 1
  br i1 %789, label %790, label %801

790:                                              ; preds = %736
  %791 = load i32, ptr %89, align 4
  store i32 %791, ptr %92, align 4
  %792 = load i32, ptr %92, align 4
  %793 = sext i32 %792 to i64
  store i64 %793, ptr %93, align 4
  %794 = load i64, ptr %76, align 4
  %795 = load i64, ptr %93, align 4
  %796 = add i64 %794, %795
  store i64 %796, ptr %94, align 4
  %797 = load i64, ptr %94, align 4
  store i64 %797, ptr %76, align 4
  %798 = load i32, ptr %92, align 4
  store i32 %798, ptr %95, align 4
  store ptr @i32_typ, ptr %96, align 8
  %799 = load ptr, ptr %96, align 8
  store ptr %799, ptr %90, align 8
  %800 = load i32, ptr %95, align 4
  store i32 %800, ptr %89, align 4
  br label %874

801:                                              ; preds = %736
  store i1 false, ptr %97, align 1
  %802 = load i1, ptr %97, align 1
  store i1 %802, ptr %77, align 1
  store i32 52, ptr %98, align 4
  %803 = load i32, ptr %98, align 4
  %804 = sext i32 %803 to i64
  %805 = mul i64 %804, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %806 = call ptr @bump_malloc(i64 %805)
  store ptr %806, ptr %99, align 8
  %807 = getelementptr { ptr }, ptr %99, i32 0, i32 0
  %808 = load ptr, ptr %807, align 8
  store ptr %808, ptr %100, align 8
  store i32 0, ptr %101, align 4
  %809 = load ptr, ptr %100, align 8
  %810 = load i32, ptr %101, align 4
  %811 = sext i32 %810 to i64
  %812 = mul i64 ptrtoint (ptr getelementptr ([51 x i8], ptr null, i32 1) to i64), %811
  %813 = getelementptr i8, ptr %809, i64 %812
  %814 = load <51 x i8>, ptr @swkjg_Error_Nil_returned_during_random_hit_test_for_key_, align 64
  store <51 x i8> %814, ptr %813, align 64
  store i32 51, ptr %102, align 4
  store i32 52, ptr %103, align 4
  store ptr @String, ptr %104, align 8
  %815 = load ptr, ptr %104, align 8
  %816 = getelementptr ptr, ptr %815, i32 6
  %817 = load ptr, ptr %816, align 8
  %818 = call { i64, i64 } @size_wrapper(ptr %817, ptr %104)
  %819 = extractvalue { i64, i64 } %818, 0
  %820 = call ptr @bump_malloc(i64 %819)
  %821 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %822 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  store ptr @String, ptr %105, align 8
  store ptr %820, ptr %821, align 8
  store i32 10, ptr %822, align 4
  store i32 51, ptr %106, align 4
  store i32 52, ptr %107, align 4
  %823 = load ptr, ptr %100, align 8
  %824 = insertvalue { ptr } undef, ptr %823, 0
  %825 = load i32, ptr %106, align 4
  %826 = load i32, ptr %107, align 4
  %827 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %828 = load ptr, ptr %827, align 8
  %829 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %828, 0
  %830 = load ptr, ptr %821, align 8
  %831 = insertvalue { ptr, ptr, ptr, i32 } %829, ptr %830, 1
  %832 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %833 = load ptr, ptr %832, align 8
  %834 = insertvalue { ptr, ptr, ptr, i32 } %831, ptr %833, 2
  %835 = load i32, ptr %822, align 4
  %836 = insertvalue { ptr, ptr, ptr, i32 } %834, i32 %835, 3
  %837 = getelementptr [3 x ptr], ptr %108, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %837, align 8
  %838 = getelementptr [3 x ptr], ptr %108, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %838, align 8
  %839 = getelementptr [3 x ptr], ptr %108, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %839, align 8
  %840 = call ptr @llvm.invariant.start.p0(i64 9, ptr %108)
  %841 = call ptr @llvm.invariant.start.p0(i64 632, ptr %828)
  %842 = getelementptr ptr, ptr %828, i32 %835
  %843 = getelementptr ptr, ptr %842, i32 6
  %844 = load ptr, ptr %843, align 8
  %845 = getelementptr { ptr, ptr, ptr }, ptr %109, i32 0, i32 0
  store ptr @buffer_typ, ptr %845, align 8
  %846 = getelementptr { ptr, ptr, ptr }, ptr %109, i32 0, i32 1
  store ptr @i32_typ, ptr %846, align 8
  %847 = getelementptr { ptr, ptr, ptr }, ptr %109, i32 0, i32 2
  store ptr @i32_typ, ptr %847, align 8
  %848 = call ptr @behavior_wrapper(ptr %844, { ptr, ptr, ptr, i32 } %836, ptr %109)
  call void %848({ ptr, ptr, ptr, i32 } %836, { ptr, ptr, ptr, i32 } %836, ptr %108, { ptr } %824, i32 %825, i32 %826) #17
  %849 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 0
  %850 = load ptr, ptr %849, align 8
  %851 = insertvalue { ptr, i160 } undef, ptr %850, 0
  %852 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 1
  %853 = load i160, ptr %852, align 4
  %854 = insertvalue { ptr, i160 } %851, i160 %853, 1
  %855 = getelementptr [1 x ptr], ptr %110, i32 0, i32 0
  store ptr @_parameterization_String, ptr %855, align 8
  %856 = call ptr @llvm.invariant.start.p0(i64 1, ptr %110)
  %857 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %858 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %859 = getelementptr { ptr }, ptr %111, i32 0, i32 0
  store ptr %850, ptr %859, align 8
  %860 = call ptr @class_behavior_wrapper(ptr %858, ptr %111)
  call void %860(ptr %110, { ptr, i160 } %854) #17
  %861 = load i32, ptr %83, align 4
  store i32 %861, ptr %112, align 4
  store ptr @i32_typ, ptr %113, align 8
  %862 = load ptr, ptr %113, align 8
  %863 = insertvalue { ptr, i160 } undef, ptr %862, 0
  %864 = load i160, ptr %112, align 4
  %865 = insertvalue { ptr, i160 } %863, i160 %864, 1
  %866 = getelementptr [1 x ptr], ptr %114, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %866, align 8
  %867 = call ptr @llvm.invariant.start.p0(i64 1, ptr %114)
  %868 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %869 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %870 = getelementptr { ptr }, ptr %115, i32 0, i32 0
  store ptr %862, ptr %870, align 8
  %871 = call ptr @class_behavior_wrapper(ptr %869, ptr %115)
  call void %871(ptr %114, { ptr, i160 } %865) #17
  %872 = load ptr, ptr %90, align 8
  store ptr %872, ptr %90, align 8
  %873 = load i32, ptr %89, align 4
  store i32 %873, ptr %89, align 4
  br label %874

874:                                              ; preds = %801, %790
  store i32 1, ptr %116, align 4
  %875 = load i32, ptr %78, align 4
  %876 = load i32, ptr %116, align 4
  %877 = add i32 %875, %876
  store i32 %877, ptr %117, align 4
  %878 = load i32, ptr %117, align 4
  store i32 %878, ptr %78, align 4
  br label %879

879:                                              ; preds = %._crit_edge5, %874
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge6, label %880

._crit_edge6:                                     ; preds = %879
  br label %731

880:                                              ; preds = %879
  %881 = call i64 @clock()
  store i64 %881, ptr %118, align 4
  %882 = load i64, ptr %76, align 4
  %883 = load i64, ptr %352, align 4
  %884 = icmp ne i64 %882, %883
  store i1 %884, ptr %119, align 1
  %885 = load i1, ptr %119, align 1
  br i1 %885, label %886, label %._crit_edge7

._crit_edge7:                                     ; preds = %880
  br label %888

886:                                              ; preds = %880
  store i1 false, ptr %120, align 1
  %887 = load i1, ptr %120, align 1
  store i1 %887, ptr %77, align 1
  br label %888

888:                                              ; preds = %._crit_edge7, %886
  store i32 15, ptr %121, align 4
  %889 = load i32, ptr %121, align 4
  %890 = sext i32 %889 to i64
  %891 = mul i64 %890, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %892 = call ptr @bump_malloc(i64 %891)
  store ptr %892, ptr %122, align 8
  %893 = getelementptr { ptr }, ptr %122, i32 0, i32 0
  %894 = load ptr, ptr %893, align 8
  store ptr %894, ptr %123, align 8
  store i32 0, ptr %124, align 4
  %895 = load ptr, ptr %123, align 8
  %896 = load i32, ptr %124, align 4
  %897 = sext i32 %896 to i64
  %898 = mul i64 ptrtoint (ptr getelementptr ([14 x i8], ptr null, i32 1) to i64), %897
  %899 = getelementptr i8, ptr %895, i64 %898
  %900 = load <14 x i8>, ptr @gupjo_Get_Random_Hit, align 16
  store <14 x i8> %900, ptr %899, align 16
  store i32 14, ptr %125, align 4
  store i32 15, ptr %126, align 4
  store ptr @String, ptr %127, align 8
  %901 = load ptr, ptr %127, align 8
  %902 = getelementptr ptr, ptr %901, i32 6
  %903 = load ptr, ptr %902, align 8
  %904 = call { i64, i64 } @size_wrapper(ptr %903, ptr %127)
  %905 = extractvalue { i64, i64 } %904, 0
  %906 = call ptr @bump_malloc(i64 %905)
  store ptr @String, ptr %131, align 8
  store ptr %906, ptr %130, align 8
  store i32 10, ptr %128, align 4
  store i32 14, ptr %132, align 4
  store i32 15, ptr %133, align 4
  %907 = load ptr, ptr %123, align 8
  %908 = insertvalue { ptr } undef, ptr %907, 0
  %909 = load i32, ptr %132, align 4
  %910 = load i32, ptr %133, align 4
  %911 = load ptr, ptr %131, align 8
  %912 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %911, 0
  %913 = load ptr, ptr %130, align 8
  %914 = insertvalue { ptr, ptr, ptr, i32 } %912, ptr %913, 1
  %915 = load ptr, ptr %129, align 8
  %916 = insertvalue { ptr, ptr, ptr, i32 } %914, ptr %915, 2
  %917 = load i32, ptr %128, align 4
  %918 = insertvalue { ptr, ptr, ptr, i32 } %916, i32 %917, 3
  %919 = getelementptr [3 x ptr], ptr %134, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %919, align 8
  %920 = getelementptr [3 x ptr], ptr %134, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %920, align 8
  %921 = getelementptr [3 x ptr], ptr %134, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %921, align 8
  %922 = call ptr @llvm.invariant.start.p0(i64 9, ptr %134)
  %923 = call ptr @llvm.invariant.start.p0(i64 632, ptr %911)
  %924 = getelementptr ptr, ptr %911, i32 %917
  %925 = getelementptr ptr, ptr %924, i32 6
  %926 = load ptr, ptr %925, align 8
  %927 = getelementptr { ptr, ptr, ptr }, ptr %135, i32 0, i32 0
  store ptr @buffer_typ, ptr %927, align 8
  %928 = getelementptr { ptr, ptr, ptr }, ptr %135, i32 0, i32 1
  store ptr @i32_typ, ptr %928, align 8
  %929 = getelementptr { ptr, ptr, ptr }, ptr %135, i32 0, i32 2
  store ptr @i32_typ, ptr %929, align 8
  %930 = call ptr @behavior_wrapper(ptr %926, { ptr, ptr, ptr, i32 } %918, ptr %135)
  call void %930({ ptr, ptr, ptr, i32 } %918, { ptr, ptr, ptr, i32 } %918, ptr %134, { ptr } %908, i32 %909, i32 %910) #17
  %931 = load i64, ptr %118, align 4
  %932 = load i64, ptr %75, align 4
  %933 = sub i64 %931, %932
  store i64 %933, ptr %136, align 4
  %934 = load ptr, ptr %131, align 8
  %935 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %934, 0
  %936 = load ptr, ptr %130, align 8
  %937 = insertvalue { ptr, ptr, ptr, i32 } %935, ptr %936, 1
  %938 = load ptr, ptr %129, align 8
  %939 = insertvalue { ptr, ptr, ptr, i32 } %937, ptr %938, 2
  %940 = load i32, ptr %128, align 4
  %941 = insertvalue { ptr, ptr, ptr, i32 } %939, i32 %940, 3
  %942 = load i32, ptr %179, align 4
  %943 = load i64, ptr %136, align 4
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %941, i32 %942, i64 %943)
  store i32 19, ptr %137, align 4
  %944 = load i32, ptr %137, align 4
  %945 = sext i32 %944 to i64
  %946 = mul i64 %945, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %947 = call ptr @bump_malloc(i64 %946)
  store ptr %947, ptr %138, align 8
  %948 = getelementptr { ptr }, ptr %138, i32 0, i32 0
  %949 = load ptr, ptr %948, align 8
  store ptr %949, ptr %139, align 8
  store i32 0, ptr %140, align 4
  %950 = load ptr, ptr %139, align 8
  %951 = load i32, ptr %140, align 4
  %952 = sext i32 %951 to i64
  %953 = mul i64 ptrtoint (ptr getelementptr ([18 x i8], ptr null, i32 1) to i64), %952
  %954 = getelementptr i8, ptr %950, i64 %953
  %955 = load <18 x i8>, ptr @qryrr_____Verification_, align 32
  store <18 x i8> %955, ptr %954, align 32
  store i32 18, ptr %141, align 4
  store i32 19, ptr %142, align 4
  store ptr @String, ptr %143, align 8
  %956 = load ptr, ptr %143, align 8
  %957 = getelementptr ptr, ptr %956, i32 6
  %958 = load ptr, ptr %957, align 8
  %959 = call { i64, i64 } @size_wrapper(ptr %958, ptr %143)
  %960 = extractvalue { i64, i64 } %959, 0
  %961 = call ptr @bump_malloc(i64 %960)
  %962 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %963 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  store ptr @String, ptr %144, align 8
  store ptr %961, ptr %962, align 8
  store i32 10, ptr %963, align 4
  store i32 18, ptr %145, align 4
  store i32 19, ptr %146, align 4
  %964 = load ptr, ptr %139, align 8
  %965 = insertvalue { ptr } undef, ptr %964, 0
  %966 = load i32, ptr %145, align 4
  %967 = load i32, ptr %146, align 4
  %968 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %969 = load ptr, ptr %968, align 8
  %970 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %969, 0
  %971 = load ptr, ptr %962, align 8
  %972 = insertvalue { ptr, ptr, ptr, i32 } %970, ptr %971, 1
  %973 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %974 = load ptr, ptr %973, align 8
  %975 = insertvalue { ptr, ptr, ptr, i32 } %972, ptr %974, 2
  %976 = load i32, ptr %963, align 4
  %977 = insertvalue { ptr, ptr, ptr, i32 } %975, i32 %976, 3
  %978 = getelementptr [3 x ptr], ptr %147, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %978, align 8
  %979 = getelementptr [3 x ptr], ptr %147, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %979, align 8
  %980 = getelementptr [3 x ptr], ptr %147, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %980, align 8
  %981 = call ptr @llvm.invariant.start.p0(i64 9, ptr %147)
  %982 = call ptr @llvm.invariant.start.p0(i64 632, ptr %969)
  %983 = getelementptr ptr, ptr %969, i32 %976
  %984 = getelementptr ptr, ptr %983, i32 6
  %985 = load ptr, ptr %984, align 8
  %986 = getelementptr { ptr, ptr, ptr }, ptr %148, i32 0, i32 0
  store ptr @buffer_typ, ptr %986, align 8
  %987 = getelementptr { ptr, ptr, ptr }, ptr %148, i32 0, i32 1
  store ptr @i32_typ, ptr %987, align 8
  %988 = getelementptr { ptr, ptr, ptr }, ptr %148, i32 0, i32 2
  store ptr @i32_typ, ptr %988, align 8
  %989 = call ptr @behavior_wrapper(ptr %985, { ptr, ptr, ptr, i32 } %977, ptr %148)
  call void %989({ ptr, ptr, ptr, i32 } %977, { ptr, ptr, ptr, i32 } %977, ptr %147, { ptr } %965, i32 %966, i32 %967) #17
  %990 = getelementptr { ptr, i160 }, ptr %144, i32 0, i32 0
  %991 = load ptr, ptr %990, align 8
  %992 = insertvalue { ptr, i160 } undef, ptr %991, 0
  %993 = getelementptr { ptr, i160 }, ptr %144, i32 0, i32 1
  %994 = load i160, ptr %993, align 4
  %995 = insertvalue { ptr, i160 } %992, i160 %994, 1
  %996 = getelementptr [1 x ptr], ptr %149, i32 0, i32 0
  store ptr @_parameterization_String, ptr %996, align 8
  %997 = call ptr @llvm.invariant.start.p0(i64 1, ptr %149)
  %998 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %999 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1000 = getelementptr { ptr }, ptr %150, i32 0, i32 0
  store ptr %991, ptr %1000, align 8
  %1001 = call ptr @class_behavior_wrapper(ptr %999, ptr %150)
  call void %1001(ptr %149, { ptr, i160 } %995) #17
  %1002 = load i1, ptr %77, align 1
  br i1 %1002, label %1003, label %1062

1003:                                             ; preds = %888
  store i32 5, ptr %151, align 4
  %1004 = load i32, ptr %151, align 4
  %1005 = sext i32 %1004 to i64
  %1006 = mul i64 %1005, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1007 = call ptr @bump_malloc(i64 %1006)
  store ptr %1007, ptr %152, align 8
  %1008 = getelementptr { ptr }, ptr %152, i32 0, i32 0
  %1009 = load ptr, ptr %1008, align 8
  store ptr %1009, ptr %153, align 8
  store i32 0, ptr %154, align 4
  %1010 = load ptr, ptr %153, align 8
  %1011 = load i32, ptr %154, align 4
  %1012 = sext i32 %1011 to i64
  %1013 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %1012
  %1014 = getelementptr i8, ptr %1010, i64 %1013
  %1015 = load <4 x i8>, ptr @bskdh_PASS, align 4
  store <4 x i8> %1015, ptr %1014, align 4
  store i32 4, ptr %155, align 4
  store i32 5, ptr %156, align 4
  store ptr @String, ptr %157, align 8
  %1016 = load ptr, ptr %157, align 8
  %1017 = getelementptr ptr, ptr %1016, i32 6
  %1018 = load ptr, ptr %1017, align 8
  %1019 = call { i64, i64 } @size_wrapper(ptr %1018, ptr %157)
  %1020 = extractvalue { i64, i64 } %1019, 0
  %1021 = call ptr @bump_malloc(i64 %1020)
  %1022 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 1
  %1023 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 3
  store ptr @String, ptr %158, align 8
  store ptr %1021, ptr %1022, align 8
  store i32 10, ptr %1023, align 4
  store i32 4, ptr %159, align 4
  store i32 5, ptr %160, align 4
  %1024 = load ptr, ptr %153, align 8
  %1025 = insertvalue { ptr } undef, ptr %1024, 0
  %1026 = load i32, ptr %159, align 4
  %1027 = load i32, ptr %160, align 4
  %1028 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 0
  %1029 = load ptr, ptr %1028, align 8
  %1030 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1029, 0
  %1031 = load ptr, ptr %1022, align 8
  %1032 = insertvalue { ptr, ptr, ptr, i32 } %1030, ptr %1031, 1
  %1033 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 2
  %1034 = load ptr, ptr %1033, align 8
  %1035 = insertvalue { ptr, ptr, ptr, i32 } %1032, ptr %1034, 2
  %1036 = load i32, ptr %1023, align 4
  %1037 = insertvalue { ptr, ptr, ptr, i32 } %1035, i32 %1036, 3
  %1038 = getelementptr [3 x ptr], ptr %161, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1038, align 8
  %1039 = getelementptr [3 x ptr], ptr %161, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1039, align 8
  %1040 = getelementptr [3 x ptr], ptr %161, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1040, align 8
  %1041 = call ptr @llvm.invariant.start.p0(i64 9, ptr %161)
  %1042 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1029)
  %1043 = getelementptr ptr, ptr %1029, i32 %1036
  %1044 = getelementptr ptr, ptr %1043, i32 6
  %1045 = load ptr, ptr %1044, align 8
  %1046 = getelementptr { ptr, ptr, ptr }, ptr %162, i32 0, i32 0
  store ptr @buffer_typ, ptr %1046, align 8
  %1047 = getelementptr { ptr, ptr, ptr }, ptr %162, i32 0, i32 1
  store ptr @i32_typ, ptr %1047, align 8
  %1048 = getelementptr { ptr, ptr, ptr }, ptr %162, i32 0, i32 2
  store ptr @i32_typ, ptr %1048, align 8
  %1049 = call ptr @behavior_wrapper(ptr %1045, { ptr, ptr, ptr, i32 } %1037, ptr %162)
  call void %1049({ ptr, ptr, ptr, i32 } %1037, { ptr, ptr, ptr, i32 } %1037, ptr %161, { ptr } %1025, i32 %1026, i32 %1027) #17
  %1050 = getelementptr { ptr, i160 }, ptr %158, i32 0, i32 0
  %1051 = load ptr, ptr %1050, align 8
  %1052 = insertvalue { ptr, i160 } undef, ptr %1051, 0
  %1053 = getelementptr { ptr, i160 }, ptr %158, i32 0, i32 1
  %1054 = load i160, ptr %1053, align 4
  %1055 = insertvalue { ptr, i160 } %1052, i160 %1054, 1
  %1056 = getelementptr [1 x ptr], ptr %163, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1056, align 8
  %1057 = call ptr @llvm.invariant.start.p0(i64 1, ptr %163)
  %1058 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1059 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1060 = getelementptr { ptr }, ptr %164, i32 0, i32 0
  store ptr %1051, ptr %1060, align 8
  %1061 = call ptr @class_behavior_wrapper(ptr %1059, ptr %164)
  call void %1061(ptr %163, { ptr, i160 } %1055) #17
  br label %1121

1062:                                             ; preds = %888
  store i32 5, ptr %165, align 4
  %1063 = load i32, ptr %165, align 4
  %1064 = sext i32 %1063 to i64
  %1065 = mul i64 %1064, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1066 = call ptr @bump_malloc(i64 %1065)
  store ptr %1066, ptr %166, align 8
  %1067 = getelementptr { ptr }, ptr %166, i32 0, i32 0
  %1068 = load ptr, ptr %1067, align 8
  store ptr %1068, ptr %167, align 8
  store i32 0, ptr %168, align 4
  %1069 = load ptr, ptr %167, align 8
  %1070 = load i32, ptr %168, align 4
  %1071 = sext i32 %1070 to i64
  %1072 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %1071
  %1073 = getelementptr i8, ptr %1069, i64 %1072
  %1074 = load <4 x i8>, ptr @xbzcy_FAIL, align 4
  store <4 x i8> %1074, ptr %1073, align 4
  store i32 4, ptr %169, align 4
  store i32 5, ptr %170, align 4
  store ptr @String, ptr %171, align 8
  %1075 = load ptr, ptr %171, align 8
  %1076 = getelementptr ptr, ptr %1075, i32 6
  %1077 = load ptr, ptr %1076, align 8
  %1078 = call { i64, i64 } @size_wrapper(ptr %1077, ptr %171)
  %1079 = extractvalue { i64, i64 } %1078, 0
  %1080 = call ptr @bump_malloc(i64 %1079)
  %1081 = getelementptr { ptr, ptr, ptr, i32 }, ptr %172, i32 0, i32 1
  %1082 = getelementptr { ptr, ptr, ptr, i32 }, ptr %172, i32 0, i32 3
  store ptr @String, ptr %172, align 8
  store ptr %1080, ptr %1081, align 8
  store i32 10, ptr %1082, align 4
  store i32 4, ptr %173, align 4
  store i32 5, ptr %174, align 4
  %1083 = load ptr, ptr %167, align 8
  %1084 = insertvalue { ptr } undef, ptr %1083, 0
  %1085 = load i32, ptr %173, align 4
  %1086 = load i32, ptr %174, align 4
  %1087 = getelementptr { ptr, ptr, ptr, i32 }, ptr %172, i32 0, i32 0
  %1088 = load ptr, ptr %1087, align 8
  %1089 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1088, 0
  %1090 = load ptr, ptr %1081, align 8
  %1091 = insertvalue { ptr, ptr, ptr, i32 } %1089, ptr %1090, 1
  %1092 = getelementptr { ptr, ptr, ptr, i32 }, ptr %172, i32 0, i32 2
  %1093 = load ptr, ptr %1092, align 8
  %1094 = insertvalue { ptr, ptr, ptr, i32 } %1091, ptr %1093, 2
  %1095 = load i32, ptr %1082, align 4
  %1096 = insertvalue { ptr, ptr, ptr, i32 } %1094, i32 %1095, 3
  %1097 = getelementptr [3 x ptr], ptr %175, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1097, align 8
  %1098 = getelementptr [3 x ptr], ptr %175, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1098, align 8
  %1099 = getelementptr [3 x ptr], ptr %175, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1099, align 8
  %1100 = call ptr @llvm.invariant.start.p0(i64 9, ptr %175)
  %1101 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1088)
  %1102 = getelementptr ptr, ptr %1088, i32 %1095
  %1103 = getelementptr ptr, ptr %1102, i32 6
  %1104 = load ptr, ptr %1103, align 8
  %1105 = getelementptr { ptr, ptr, ptr }, ptr %176, i32 0, i32 0
  store ptr @buffer_typ, ptr %1105, align 8
  %1106 = getelementptr { ptr, ptr, ptr }, ptr %176, i32 0, i32 1
  store ptr @i32_typ, ptr %1106, align 8
  %1107 = getelementptr { ptr, ptr, ptr }, ptr %176, i32 0, i32 2
  store ptr @i32_typ, ptr %1107, align 8
  %1108 = call ptr @behavior_wrapper(ptr %1104, { ptr, ptr, ptr, i32 } %1096, ptr %176)
  call void %1108({ ptr, ptr, ptr, i32 } %1096, { ptr, ptr, ptr, i32 } %1096, ptr %175, { ptr } %1084, i32 %1085, i32 %1086) #17
  %1109 = getelementptr { ptr, i160 }, ptr %172, i32 0, i32 0
  %1110 = load ptr, ptr %1109, align 8
  %1111 = insertvalue { ptr, i160 } undef, ptr %1110, 0
  %1112 = getelementptr { ptr, i160 }, ptr %172, i32 0, i32 1
  %1113 = load i160, ptr %1112, align 4
  %1114 = insertvalue { ptr, i160 } %1111, i160 %1113, 1
  %1115 = getelementptr [1 x ptr], ptr %177, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1115, align 8
  %1116 = call ptr @llvm.invariant.start.p0(i64 1, ptr %177)
  %1117 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1118 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1119 = getelementptr { ptr }, ptr %178, i32 0, i32 0
  store ptr %1110, ptr %1119, align 8
  %1120 = call ptr @class_behavior_wrapper(ptr %1118, ptr %178)
  call void %1120(ptr %177, { ptr, i160 } %1114) #17
  br label %1121

1121:                                             ; preds = %1062, %1003
  ret void
}

define void @benchmark_get_random_miss(i32 %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca i32, align 4
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i1, align 1
  %16 = alloca i1, align 1
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca [2 x ptr], align 8
  %24 = alloca { ptr, ptr }, align 8
  %25 = alloca i1, align 1
  %26 = alloca i160, align 8
  %27 = alloca ptr, align 8
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = alloca [2 x ptr], align 8
  %31 = alloca { ptr, ptr }, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca [2 x ptr], align 8
  %37 = alloca i32, align 4
  %38 = alloca ptr, align 8
  %39 = alloca ptr, align 8
  %40 = alloca ptr, align 8
  %41 = alloca [1 x ptr], align 8
  %42 = alloca { ptr }, align 8
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = alloca i32, align 4
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  %47 = alloca ptr, align 8
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca i1, align 1
  %53 = alloca i1, align 1
  %54 = alloca i1, align 1
  %55 = alloca i1, align 1
  %56 = alloca [0 x ptr], align 8
  %57 = alloca {}, align 8
  %58 = alloca i32, align 4
  %59 = alloca i160, align 8
  %60 = alloca ptr, align 8
  %61 = alloca [1 x ptr], align 8
  %62 = alloca { ptr }, align 8
  %63 = alloca { ptr, i160 }, align 8
  %64 = alloca ptr, align 8
  %65 = alloca i1, align 1
  %66 = alloca i1, align 1
  %67 = alloca i160, align 8
  %68 = alloca ptr, align 8
  %69 = alloca [2 x ptr], align 8
  %70 = alloca { ptr, ptr }, align 8
  %71 = alloca i32, align 4
  %72 = alloca i32, align 4
  %73 = alloca i32, align 4
  %74 = alloca i32, align 4
  %75 = alloca i1, align 1
  %76 = alloca i32, align 4
  %77 = alloca ptr, align 8
  %78 = alloca ptr, align 8
  %79 = alloca i32, align 4
  %80 = alloca i32, align 4
  %81 = alloca i32, align 4
  %82 = alloca [1 x ptr], align 8
  %83 = alloca { ptr, ptr, ptr, i32 }, align 8
  %84 = alloca i32, align 4
  %85 = alloca i32, align 4
  %86 = alloca [3 x ptr], align 8
  %87 = alloca { ptr, ptr, ptr }, align 8
  %88 = alloca [1 x ptr], align 8
  %89 = alloca { ptr }, align 8
  %90 = alloca i160, align 8
  %91 = alloca ptr, align 8
  %92 = alloca [1 x ptr], align 8
  %93 = alloca { ptr }, align 8
  %94 = alloca i32, align 4
  %95 = alloca ptr, align 8
  %96 = alloca ptr, align 8
  %97 = alloca i32, align 4
  %98 = alloca i32, align 4
  %99 = alloca i32, align 4
  %100 = alloca [1 x ptr], align 8
  %101 = alloca { ptr, ptr, ptr, i32 }, align 8
  %102 = alloca i32, align 4
  %103 = alloca i32, align 4
  %104 = alloca [3 x ptr], align 8
  %105 = alloca { ptr, ptr, ptr }, align 8
  %106 = alloca [1 x ptr], align 8
  %107 = alloca { ptr }, align 8
  %108 = alloca i64, align 8
  %109 = alloca i32, align 4
  %110 = alloca i32, align 4
  %111 = alloca i32, align 4
  %112 = alloca i1, align 1
  %113 = alloca [1 x ptr], align 8
  %114 = alloca { ptr }, align 8
  %115 = alloca { ptr, i160 }, align 8
  %116 = alloca i32, align 4
  %117 = alloca i160, align 8
  %118 = alloca ptr, align 8
  %119 = alloca [1 x ptr], align 8
  %120 = alloca { ptr }, align 8
  %121 = alloca { ptr, i160 }, align 8
  %122 = alloca ptr, align 8
  %123 = alloca i32, align 4
  %124 = alloca i1, align 1
  %125 = alloca i32, align 4
  %126 = alloca i32, align 4
  %127 = alloca i32, align 4
  %128 = alloca i32, align 4
  %129 = alloca i32, align 4
  %130 = alloca i32, align 4
  %131 = alloca i64, align 8
  %132 = alloca i1, align 1
  %133 = alloca i32, align 4
  %134 = alloca i1, align 1
  %135 = alloca i32, align 4
  %136 = alloca i32, align 4
  %137 = alloca i32, align 4
  %138 = alloca i32, align 4
  %139 = alloca i1, align 1
  %140 = alloca i1, align 1
  %141 = alloca i32, align 4
  %142 = alloca i1, align 1
  %143 = alloca i1, align 1
  %144 = alloca i32, align 4
  %145 = alloca ptr, align 8
  %146 = alloca ptr, align 8
  %147 = alloca i32, align 4
  %148 = alloca i32, align 4
  %149 = alloca i32, align 4
  %150 = alloca [1 x ptr], align 8
  %151 = alloca i32, align 4
  %152 = alloca ptr, align 8
  %153 = alloca ptr, align 8
  %154 = alloca ptr, align 8
  %155 = alloca i32, align 4
  %156 = alloca i32, align 4
  %157 = alloca [3 x ptr], align 8
  %158 = alloca { ptr, ptr, ptr }, align 8
  %159 = alloca i64, align 8
  %160 = alloca i32, align 4
  %161 = alloca ptr, align 8
  %162 = alloca ptr, align 8
  %163 = alloca i32, align 4
  %164 = alloca i32, align 4
  %165 = alloca i32, align 4
  %166 = alloca [1 x ptr], align 8
  %167 = alloca { ptr, ptr, ptr, i32 }, align 8
  %168 = alloca i32, align 4
  %169 = alloca i32, align 4
  %170 = alloca [3 x ptr], align 8
  %171 = alloca { ptr, ptr, ptr }, align 8
  %172 = alloca [1 x ptr], align 8
  %173 = alloca { ptr }, align 8
  %174 = alloca i32, align 4
  %175 = alloca ptr, align 8
  %176 = alloca ptr, align 8
  %177 = alloca i32, align 4
  %178 = alloca i32, align 4
  %179 = alloca i32, align 4
  %180 = alloca [1 x ptr], align 8
  %181 = alloca { ptr, ptr, ptr, i32 }, align 8
  %182 = alloca i32, align 4
  %183 = alloca i32, align 4
  %184 = alloca [3 x ptr], align 8
  %185 = alloca { ptr, ptr, ptr }, align 8
  %186 = alloca [1 x ptr], align 8
  %187 = alloca { ptr }, align 8
  %188 = alloca i32, align 4
  %189 = alloca ptr, align 8
  %190 = alloca ptr, align 8
  %191 = alloca i32, align 4
  %192 = alloca i32, align 4
  %193 = alloca i32, align 4
  %194 = alloca [1 x ptr], align 8
  %195 = alloca { ptr, ptr, ptr, i32 }, align 8
  %196 = alloca i32, align 4
  %197 = alloca i32, align 4
  %198 = alloca [3 x ptr], align 8
  %199 = alloca { ptr, ptr, ptr }, align 8
  %200 = alloca [1 x ptr], align 8
  %201 = alloca { ptr }, align 8
  %202 = alloca i32, align 4
  %203 = alloca ptr, align 8
  %204 = alloca ptr, align 8
  %205 = alloca i32, align 4
  %206 = alloca i32, align 4
  %207 = alloca i32, align 4
  %208 = alloca [1 x ptr], align 8
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = alloca i32, align 4
  %211 = alloca i32, align 4
  %212 = alloca [3 x ptr], align 8
  %213 = alloca { ptr, ptr, ptr }, align 8
  %214 = alloca [1 x ptr], align 8
  %215 = alloca { ptr }, align 8
  %216 = alloca i160, align 8
  %217 = alloca ptr, align 8
  %218 = alloca [1 x ptr], align 8
  %219 = alloca { ptr }, align 8
  %220 = alloca i32, align 4
  %221 = alloca ptr, align 8
  %222 = alloca ptr, align 8
  %223 = alloca i32, align 4
  %224 = alloca i32, align 4
  %225 = alloca i32, align 4
  %226 = alloca [1 x ptr], align 8
  %227 = alloca { ptr, ptr, ptr, i32 }, align 8
  %228 = alloca i32, align 4
  %229 = alloca i32, align 4
  %230 = alloca [3 x ptr], align 8
  %231 = alloca { ptr, ptr, ptr }, align 8
  %232 = alloca [1 x ptr], align 8
  %233 = alloca { ptr }, align 8
  %234 = alloca i160, align 8
  %235 = alloca ptr, align 8
  %236 = alloca [1 x ptr], align 8
  %237 = alloca { ptr }, align 8
  %238 = alloca i32, align 4
  %239 = alloca ptr, align 8
  %240 = alloca ptr, align 8
  %241 = alloca i32, align 4
  %242 = alloca i32, align 4
  %243 = alloca i32, align 4
  %244 = alloca [1 x ptr], align 8
  %245 = alloca { ptr, ptr, ptr, i32 }, align 8
  %246 = alloca i32, align 4
  %247 = alloca i32, align 4
  %248 = alloca [3 x ptr], align 8
  %249 = alloca { ptr, ptr, ptr }, align 8
  %250 = alloca [1 x ptr], align 8
  %251 = alloca { ptr }, align 8
  %252 = alloca i32, align 4
  %.reg2mem = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i1, align 1
  %.reg2mem18 = alloca i1, align 1
  %.reg2mem21 = alloca i1, align 1
  %.reg2mem24 = alloca i1, align 1
  %.reg2mem27 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %252, align 4
  %253 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %253, align 8
  %254 = alloca ptr, align 8
  store ptr @i32_eq, ptr %254, align 8
  %255 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %255, align 8
  %256 = getelementptr ptr, ptr %255, i32 1
  store ptr @_parameterization_Ptri32, ptr %256, align 8
  %257 = getelementptr ptr, ptr %255, i32 2
  store ptr @_parameterization_Ptri32, ptr %257, align 8
  %258 = getelementptr ptr, ptr %255, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %258, align 8
  %259 = load ptr, ptr %255, align 8
  %260 = getelementptr ptr, ptr %259, i32 6
  %261 = load ptr, ptr %260, align 8
  %262 = call { i64, i64 } @size_wrapper(ptr %261, ptr %255)
  %263 = extractvalue { i64, i64 } %262, 0
  %264 = call ptr @bump_malloc(i64 %263)
  store ptr @_parameterization_Ptri32, ptr %264, align 8
  %265 = getelementptr ptr, ptr %264, i32 1
  store ptr @_parameterization_Ptri32, ptr %265, align 8
  %266 = getelementptr ptr, ptr %264, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %266, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 24, ptr %264)
  %268 = alloca i32, align 4
  %269 = alloca ptr, align 8
  %270 = alloca ptr, align 8
  %271 = alloca ptr, align 8
  store ptr @CuckooMap, ptr %271, align 8
  store ptr %264, ptr %270, align 8
  store i32 10, ptr %268, align 4
  %272 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %272, align 8
  %273 = alloca ptr, align 8
  store ptr @i32_eq, ptr %273, align 8
  %274 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %274)
  %275 = load ptr, ptr %272, align 8
  call void @llvm.init.trampoline(ptr %274, ptr @lystgjlake, ptr %275)
  %276 = alloca ptr, align 8
  %277 = call ptr @adjust_trampoline(ptr %274)
  store ptr %277, ptr %276, align 8
  %278 = call ptr @llvm.invariant.start.p0(i64 24, ptr %274)
  %279 = getelementptr { ptr }, ptr %276, i32 0, i32 0
  %280 = load ptr, ptr %279, align 8
  %281 = insertvalue { ptr } undef, ptr %280, 0
  %282 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %282)
  %283 = load ptr, ptr %273, align 8
  call void @llvm.init.trampoline(ptr %282, ptr @vwrhczetrx, ptr %283)
  %284 = alloca ptr, align 8
  %285 = call ptr @adjust_trampoline(ptr %282)
  store ptr %285, ptr %284, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 24, ptr %282)
  %287 = getelementptr { ptr }, ptr %284, i32 0, i32 0
  %288 = load ptr, ptr %287, align 8
  %289 = insertvalue { ptr } undef, ptr %288, 0
  %290 = load ptr, ptr %271, align 8
  %291 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %290, 0
  %292 = load ptr, ptr %270, align 8
  %293 = insertvalue { ptr, ptr, ptr, i32 } %291, ptr %292, 1
  %294 = load ptr, ptr %269, align 8
  %295 = insertvalue { ptr, ptr, ptr, i32 } %293, ptr %294, 2
  %296 = load i32, ptr %268, align 4
  %297 = insertvalue { ptr, ptr, ptr, i32 } %295, i32 %296, 3
  %298 = alloca [2 x ptr], align 8
  %299 = getelementptr [2 x ptr], ptr %298, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %299, align 8
  %300 = getelementptr [2 x ptr], ptr %298, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %300, align 8
  %301 = call ptr @llvm.invariant.start.p0(i64 4, ptr %298)
  %302 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %290)
  %303 = getelementptr ptr, ptr %290, i32 %296
  %304 = getelementptr ptr, ptr %303, i32 10
  %305 = load ptr, ptr %304, align 8
  %306 = alloca { ptr, ptr }, align 8
  %307 = getelementptr { ptr, ptr }, ptr %306, i32 0, i32 0
  store ptr @function_typ, ptr %307, align 8
  %308 = getelementptr { ptr, ptr }, ptr %306, i32 0, i32 1
  store ptr @function_typ, ptr %308, align 8
  %309 = call ptr @behavior_wrapper(ptr %305, { ptr, ptr, ptr, i32 } %297, ptr %306)
  call void %309({ ptr, ptr, ptr, i32 } %297, { ptr, ptr, ptr, i32 } %297, ptr %298, { ptr } %281, { ptr } %289) #17
  %310 = alloca { ptr, ptr, ptr, i32 }, align 8
  %311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 0
  %312 = load ptr, ptr %271, align 8
  store ptr %312, ptr %311, align 8
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 1
  %314 = load ptr, ptr %270, align 8
  store ptr %314, ptr %313, align 8
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 2
  %316 = load ptr, ptr %269, align 8
  store ptr %316, ptr %315, align 8
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 3
  %318 = load i32, ptr %268, align 4
  store i32 %318, ptr %317, align 4
  call void @set_offset(ptr %310, ptr @CuckooMap)
  %319 = alloca i32, align 4
  %320 = alloca ptr, align 8
  %321 = alloca ptr, align 8
  %322 = alloca ptr, align 8
  %323 = load ptr, ptr %311, align 8
  store ptr %323, ptr %322, align 8
  %324 = load ptr, ptr %313, align 8
  store ptr %324, ptr %321, align 8
  %325 = load ptr, ptr %315, align 8
  store ptr %325, ptr %320, align 8
  %326 = load i32, ptr %317, align 4
  store i32 %326, ptr %319, align 4
  %327 = alloca i32, align 4
  store i32 789, ptr %327, align 4
  %328 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %328, align 8
  %329 = load ptr, ptr %328, align 8
  %330 = getelementptr ptr, ptr %329, i32 6
  %331 = load ptr, ptr %330, align 8
  %332 = call { i64, i64 } @size_wrapper(ptr %331, ptr %328)
  %333 = extractvalue { i64, i64 } %332, 0
  %334 = call ptr @bump_malloc(i64 %333)
  %335 = alloca i32, align 4
  %336 = alloca ptr, align 8
  %337 = alloca ptr, align 8
  %338 = alloca ptr, align 8
  store ptr @PRNG, ptr %338, align 8
  store ptr %334, ptr %337, align 8
  store i32 10, ptr %335, align 4
  %339 = alloca i32, align 4
  store i32 789, ptr %339, align 4
  %340 = load i32, ptr %339, align 4
  %341 = load ptr, ptr %338, align 8
  %342 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %341, 0
  %343 = load ptr, ptr %337, align 8
  %344 = insertvalue { ptr, ptr, ptr, i32 } %342, ptr %343, 1
  %345 = load ptr, ptr %336, align 8
  %346 = insertvalue { ptr, ptr, ptr, i32 } %344, ptr %345, 2
  %347 = load i32, ptr %335, align 4
  %348 = insertvalue { ptr, ptr, ptr, i32 } %346, i32 %347, 3
  %349 = alloca [1 x ptr], align 8
  %350 = getelementptr [1 x ptr], ptr %349, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %350, align 8
  %351 = call ptr @llvm.invariant.start.p0(i64 1, ptr %349)
  %352 = call ptr @llvm.invariant.start.p0(i64 40, ptr %341)
  %353 = getelementptr ptr, ptr %341, i32 %347
  %354 = getelementptr ptr, ptr %353, i32 1
  %355 = load ptr, ptr %354, align 8
  %356 = alloca { ptr }, align 8
  %357 = getelementptr { ptr }, ptr %356, i32 0, i32 0
  store ptr @i32_typ, ptr %357, align 8
  %358 = call ptr @behavior_wrapper(ptr %355, { ptr, ptr, ptr, i32 } %348, ptr %356)
  call void %358({ ptr, ptr, ptr, i32 } %348, { ptr, ptr, ptr, i32 } %348, ptr %349, i32 %340) #17
  %359 = alloca { ptr, ptr, ptr, i32 }, align 8
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 0
  %361 = load ptr, ptr %338, align 8
  store ptr %361, ptr %360, align 8
  %362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 1
  %363 = load ptr, ptr %337, align 8
  store ptr %363, ptr %362, align 8
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 2
  %365 = load ptr, ptr %336, align 8
  store ptr %365, ptr %364, align 8
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 3
  %367 = load i32, ptr %335, align 4
  store i32 %367, ptr %366, align 4
  call void @set_offset(ptr %359, ptr @PRNG)
  %368 = alloca i32, align 4
  %369 = alloca ptr, align 8
  %370 = alloca ptr, align 8
  %371 = alloca ptr, align 8
  %372 = load ptr, ptr %360, align 8
  store ptr %372, ptr %371, align 8
  %373 = load ptr, ptr %362, align 8
  store ptr %373, ptr %370, align 8
  %374 = load ptr, ptr %364, align 8
  store ptr %374, ptr %369, align 8
  %375 = load i32, ptr %366, align 4
  store i32 %375, ptr %368, align 4
  %376 = alloca i32, align 4
  store i32 987, ptr %376, align 4
  %377 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %377, align 8
  %378 = load ptr, ptr %377, align 8
  %379 = getelementptr ptr, ptr %378, i32 6
  %380 = load ptr, ptr %379, align 8
  %381 = call { i64, i64 } @size_wrapper(ptr %380, ptr %377)
  %382 = extractvalue { i64, i64 } %381, 0
  %383 = call ptr @bump_malloc(i64 %382)
  %384 = alloca i32, align 4
  %385 = alloca ptr, align 8
  %386 = alloca ptr, align 8
  %387 = alloca ptr, align 8
  store ptr @PRNG, ptr %387, align 8
  store ptr %383, ptr %386, align 8
  store i32 10, ptr %384, align 4
  %388 = alloca i32, align 4
  store i32 987, ptr %388, align 4
  %389 = load i32, ptr %388, align 4
  %390 = load ptr, ptr %387, align 8
  %391 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %390, 0
  %392 = load ptr, ptr %386, align 8
  %393 = insertvalue { ptr, ptr, ptr, i32 } %391, ptr %392, 1
  %394 = load ptr, ptr %385, align 8
  %395 = insertvalue { ptr, ptr, ptr, i32 } %393, ptr %394, 2
  %396 = load i32, ptr %384, align 4
  %397 = insertvalue { ptr, ptr, ptr, i32 } %395, i32 %396, 3
  %398 = alloca [1 x ptr], align 8
  %399 = getelementptr [1 x ptr], ptr %398, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %399, align 8
  %400 = call ptr @llvm.invariant.start.p0(i64 1, ptr %398)
  %401 = call ptr @llvm.invariant.start.p0(i64 40, ptr %390)
  %402 = getelementptr ptr, ptr %390, i32 %396
  %403 = getelementptr ptr, ptr %402, i32 1
  %404 = load ptr, ptr %403, align 8
  %405 = alloca { ptr }, align 8
  %406 = getelementptr { ptr }, ptr %405, i32 0, i32 0
  store ptr @i32_typ, ptr %406, align 8
  %407 = call ptr @behavior_wrapper(ptr %404, { ptr, ptr, ptr, i32 } %397, ptr %405)
  call void %407({ ptr, ptr, ptr, i32 } %397, { ptr, ptr, ptr, i32 } %397, ptr %398, i32 %389) #17
  %408 = alloca { ptr, ptr, ptr, i32 }, align 8
  %409 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 0
  %410 = load ptr, ptr %387, align 8
  store ptr %410, ptr %409, align 8
  %411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 1
  %412 = load ptr, ptr %386, align 8
  store ptr %412, ptr %411, align 8
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 2
  %414 = load ptr, ptr %385, align 8
  store ptr %414, ptr %413, align 8
  %415 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 3
  %416 = load i32, ptr %384, align 4
  store i32 %416, ptr %415, align 4
  call void @set_offset(ptr %408, ptr @PRNG)
  %417 = alloca i32, align 4
  %418 = alloca ptr, align 8
  %419 = alloca ptr, align 8
  %420 = alloca ptr, align 8
  %421 = load ptr, ptr %409, align 8
  store ptr %421, ptr %420, align 8
  %422 = load ptr, ptr %411, align 8
  store ptr %422, ptr %419, align 8
  %423 = load ptr, ptr %413, align 8
  store ptr %423, ptr %418, align 8
  %424 = load i32, ptr %415, align 4
  store i32 %424, ptr %417, align 4
  %425 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %425, align 8
  %426 = alloca ptr, align 8
  store ptr @i32_eq, ptr %426, align 8
  %427 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %427, align 8
  %428 = getelementptr ptr, ptr %427, i32 1
  store ptr @_parameterization_Ptri32, ptr %428, align 8
  %429 = getelementptr ptr, ptr %427, i32 2
  store ptr @_parameterization_Ptri1, ptr %429, align 8
  %430 = getelementptr ptr, ptr %427, i32 3
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %430, align 8
  %431 = load ptr, ptr %427, align 8
  %432 = getelementptr ptr, ptr %431, i32 6
  %433 = load ptr, ptr %432, align 8
  %434 = call { i64, i64 } @size_wrapper(ptr %433, ptr %427)
  %435 = extractvalue { i64, i64 } %434, 0
  %436 = call ptr @bump_malloc(i64 %435)
  store ptr @_parameterization_Ptri32, ptr %436, align 8
  %437 = getelementptr ptr, ptr %436, i32 1
  store ptr @_parameterization_Ptri1, ptr %437, align 8
  %438 = getelementptr ptr, ptr %436, i32 2
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %438, align 8
  %439 = call ptr @llvm.invariant.start.p0(i64 24, ptr %436)
  %440 = alloca i32, align 4
  %441 = alloca ptr, align 8
  %442 = alloca ptr, align 8
  %443 = alloca ptr, align 8
  store ptr @CuckooMap, ptr %443, align 8
  store ptr %436, ptr %442, align 8
  store i32 10, ptr %440, align 4
  %444 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %444, align 8
  %445 = alloca ptr, align 8
  store ptr @i32_eq, ptr %445, align 8
  %446 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %446)
  %447 = load ptr, ptr %444, align 8
  call void @llvm.init.trampoline(ptr %446, ptr @mfvrojumog, ptr %447)
  %448 = alloca ptr, align 8
  %449 = call ptr @adjust_trampoline(ptr %446)
  store ptr %449, ptr %448, align 8
  %450 = call ptr @llvm.invariant.start.p0(i64 24, ptr %446)
  %451 = getelementptr { ptr }, ptr %448, i32 0, i32 0
  %452 = load ptr, ptr %451, align 8
  %453 = insertvalue { ptr } undef, ptr %452, 0
  %454 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %454)
  %455 = load ptr, ptr %445, align 8
  call void @llvm.init.trampoline(ptr %454, ptr @thuccbiyie, ptr %455)
  %456 = alloca ptr, align 8
  %457 = call ptr @adjust_trampoline(ptr %454)
  store ptr %457, ptr %456, align 8
  %458 = call ptr @llvm.invariant.start.p0(i64 24, ptr %454)
  %459 = getelementptr { ptr }, ptr %456, i32 0, i32 0
  %460 = load ptr, ptr %459, align 8
  %461 = insertvalue { ptr } undef, ptr %460, 0
  %462 = load ptr, ptr %443, align 8
  %463 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %462, 0
  %464 = load ptr, ptr %442, align 8
  %465 = insertvalue { ptr, ptr, ptr, i32 } %463, ptr %464, 1
  %466 = load ptr, ptr %441, align 8
  %467 = insertvalue { ptr, ptr, ptr, i32 } %465, ptr %466, 2
  %468 = load i32, ptr %440, align 4
  %469 = insertvalue { ptr, ptr, ptr, i32 } %467, i32 %468, 3
  %470 = alloca [2 x ptr], align 8
  %471 = getelementptr [2 x ptr], ptr %470, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %471, align 8
  %472 = getelementptr [2 x ptr], ptr %470, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %472, align 8
  %473 = call ptr @llvm.invariant.start.p0(i64 4, ptr %470)
  %474 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %462)
  %475 = getelementptr ptr, ptr %462, i32 %468
  %476 = getelementptr ptr, ptr %475, i32 10
  %477 = load ptr, ptr %476, align 8
  %478 = alloca { ptr, ptr }, align 8
  %479 = getelementptr { ptr, ptr }, ptr %478, i32 0, i32 0
  store ptr @function_typ, ptr %479, align 8
  %480 = getelementptr { ptr, ptr }, ptr %478, i32 0, i32 1
  store ptr @function_typ, ptr %480, align 8
  %481 = call ptr @behavior_wrapper(ptr %477, { ptr, ptr, ptr, i32 } %469, ptr %478)
  call void %481({ ptr, ptr, ptr, i32 } %469, { ptr, ptr, ptr, i32 } %469, ptr %470, { ptr } %453, { ptr } %461) #17
  %482 = alloca { ptr, ptr, ptr, i32 }, align 8
  %483 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 0
  %484 = load ptr, ptr %443, align 8
  store ptr %484, ptr %483, align 8
  %485 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 1
  %486 = load ptr, ptr %442, align 8
  store ptr %486, ptr %485, align 8
  %487 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 2
  %488 = load ptr, ptr %441, align 8
  store ptr %488, ptr %487, align 8
  %489 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 3
  %490 = load i32, ptr %440, align 4
  store i32 %490, ptr %489, align 4
  call void @set_offset(ptr %482, ptr @CuckooMap)
  %491 = alloca i32, align 4
  %492 = alloca ptr, align 8
  %493 = alloca ptr, align 8
  %494 = alloca ptr, align 8
  %495 = load ptr, ptr %483, align 8
  store ptr %495, ptr %494, align 8
  %496 = load ptr, ptr %485, align 8
  store ptr %496, ptr %493, align 8
  %497 = load ptr, ptr %487, align 8
  store ptr %497, ptr %492, align 8
  %498 = load i32, ptr %489, align 4
  store i32 %498, ptr %491, align 4
  %499 = alloca i32, align 4
  store i32 0, ptr %499, align 4
  %500 = alloca i32, align 4
  store i32 0, ptr %500, align 4
  %501 = alloca i32, align 4
  store i32 10, ptr %501, align 4
  %502 = load i32, ptr %252, align 4
  %503 = load i32, ptr %501, align 4
  %504 = mul i32 %502, %503
  %505 = alloca i32, align 4
  store i32 %504, ptr %505, align 4
  br label %506

506:                                              ; preds = %._crit_edge3, %1
  %507 = load i32, ptr %499, align 4
  %508 = load i32, ptr %252, align 4
  %509 = icmp slt i32 %507, %508
  store i1 %509, ptr %2, align 1
  %510 = load i1, ptr %2, align 1
  store i1 %510, ptr %3, align 1
  br i1 %510, label %511, label %._crit_edge

._crit_edge:                                      ; preds = %506
  br label %516

511:                                              ; preds = %506
  %512 = load i32, ptr %500, align 4
  %513 = load i32, ptr %505, align 4
  %514 = icmp slt i32 %512, %513
  store i1 %514, ptr %4, align 1
  %515 = load i1, ptr %4, align 1
  store i1 %515, ptr %3, align 1
  br label %516

516:                                              ; preds = %._crit_edge, %511
  %517 = load i1, ptr %3, align 1
  store i1 %517, ptr %5, align 1
  %518 = load i1, ptr %5, align 1
  store i1 %518, ptr %.reg2mem24, align 1
  %.reload26 = load i1, ptr %.reg2mem24, align 1
  br i1 %.reload26, label %519, label %._crit_edge1

._crit_edge1:                                     ; preds = %516
  br label %636

519:                                              ; preds = %516
  %520 = load ptr, ptr %371, align 8
  %521 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %520, 0
  %522 = load ptr, ptr %370, align 8
  %523 = insertvalue { ptr, ptr, ptr, i32 } %521, ptr %522, 1
  %524 = load ptr, ptr %369, align 8
  %525 = insertvalue { ptr, ptr, ptr, i32 } %523, ptr %524, 2
  %526 = load i32, ptr %368, align 4
  %527 = insertvalue { ptr, ptr, ptr, i32 } %525, i32 %526, 3
  %528 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %529 = call ptr @llvm.invariant.start.p0(i64 40, ptr %520)
  %530 = getelementptr ptr, ptr %520, i32 %526
  %531 = getelementptr ptr, ptr %530, i32 2
  %532 = load ptr, ptr %531, align 8
  %533 = call ptr @behavior_wrapper(ptr %532, { ptr, ptr, ptr, i32 } %527, ptr %7)
  %534 = call i32 %533({ ptr, ptr, ptr, i32 } %527, { ptr, ptr, ptr, i32 } %527, ptr %6) #17
  store i32 %534, ptr %8, align 4
  store ptr @i32_typ, ptr %10, align 8
  %535 = load i32, ptr %8, align 4
  store i32 %535, ptr %9, align 4
  %536 = load ptr, ptr %10, align 8
  %537 = insertvalue { ptr, i160 } undef, ptr %536, 0
  %538 = load i160, ptr %9, align 4
  %539 = insertvalue { ptr, i160 } %537, i160 %538, 1
  %540 = load ptr, ptr %494, align 8
  %541 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %540, 0
  %542 = load ptr, ptr %493, align 8
  %543 = insertvalue { ptr, ptr, ptr, i32 } %541, ptr %542, 1
  %544 = load ptr, ptr %492, align 8
  %545 = insertvalue { ptr, ptr, ptr, i32 } %543, ptr %544, 2
  %546 = load i32, ptr %491, align 4
  %547 = insertvalue { ptr, ptr, ptr, i32 } %545, i32 %546, 3
  %548 = getelementptr [1 x ptr], ptr %11, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %548, align 8
  %549 = call ptr @llvm.invariant.start.p0(i64 1, ptr %11)
  %550 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %540)
  %551 = getelementptr ptr, ptr %540, i32 %546
  %552 = getelementptr ptr, ptr %551, i32 23
  %553 = load ptr, ptr %552, align 8
  %554 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  store ptr %536, ptr %554, align 8
  %555 = call ptr @behavior_wrapper(ptr %553, { ptr, ptr, ptr, i32 } %547, ptr %12)
  %556 = call { ptr, i160 } %555({ ptr, ptr, ptr, i32 } %547, { ptr, ptr, ptr, i32 } %547, ptr %11, { ptr, i160 } %539) #17
  store { ptr, i160 } %556, ptr %13, align 8
  %557 = getelementptr { ptr, i1 }, ptr %13, i32 0, i32 0
  %558 = load ptr, ptr %557, align 8
  store ptr %558, ptr %14, align 8
  %559 = getelementptr { ptr, i1 }, ptr %13, i32 0, i32 1
  %560 = load i1, ptr %559, align 1
  store i1 %560, ptr %15, align 1
  %561 = load ptr, ptr %14, align 8
  %562 = ptrtoint ptr %561 to i64
  %563 = icmp eq i64 %562, ptrtoint (ptr @nil_typ to i64)
  %564 = icmp eq i64 %562, 0
  %565 = or i1 %563, %564
  store i1 %565, ptr %16, align 1
  %566 = load i1, ptr %16, align 1
  br i1 %566, label %567, label %._crit_edge2

._crit_edge2:                                     ; preds = %519
  br label %631

567:                                              ; preds = %519
  store i32 1, ptr %17, align 4
  %568 = load i32, ptr %8, align 4
  %569 = load i32, ptr %17, align 4
  %570 = add i32 %568, %569
  store i32 %570, ptr %18, align 4
  store ptr @i32_typ, ptr %20, align 8
  %571 = load i32, ptr %8, align 4
  store i32 %571, ptr %19, align 4
  %572 = load ptr, ptr %20, align 8
  %573 = insertvalue { ptr, i160 } undef, ptr %572, 0
  %574 = load i160, ptr %19, align 4
  %575 = insertvalue { ptr, i160 } %573, i160 %574, 1
  store ptr @i32_typ, ptr %22, align 8
  %576 = load i32, ptr %18, align 4
  store i32 %576, ptr %21, align 4
  %577 = load ptr, ptr %22, align 8
  %578 = insertvalue { ptr, i160 } undef, ptr %577, 0
  %579 = load i160, ptr %21, align 4
  %580 = insertvalue { ptr, i160 } %578, i160 %579, 1
  %581 = load ptr, ptr %322, align 8
  %582 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %581, 0
  %583 = load ptr, ptr %321, align 8
  %584 = insertvalue { ptr, ptr, ptr, i32 } %582, ptr %583, 1
  %585 = load ptr, ptr %320, align 8
  %586 = insertvalue { ptr, ptr, ptr, i32 } %584, ptr %585, 2
  %587 = load i32, ptr %319, align 4
  %588 = insertvalue { ptr, ptr, ptr, i32 } %586, i32 %587, 3
  %589 = getelementptr [2 x ptr], ptr %23, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %589, align 8
  %590 = getelementptr [2 x ptr], ptr %23, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %590, align 8
  %591 = call ptr @llvm.invariant.start.p0(i64 4, ptr %23)
  %592 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %581)
  %593 = getelementptr ptr, ptr %581, i32 %587
  %594 = getelementptr ptr, ptr %593, i32 21
  %595 = load ptr, ptr %594, align 8
  %596 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  store ptr %572, ptr %596, align 8
  %597 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 1
  store ptr %577, ptr %597, align 8
  %598 = call ptr @behavior_wrapper(ptr %595, { ptr, ptr, ptr, i32 } %588, ptr %24)
  call void %598({ ptr, ptr, ptr, i32 } %588, { ptr, ptr, ptr, i32 } %588, ptr %23, { ptr, i160 } %575, { ptr, i160 } %580) #17
  store i1 true, ptr %25, align 1
  store ptr @i32_typ, ptr %27, align 8
  %599 = load i32, ptr %8, align 4
  store i32 %599, ptr %26, align 4
  %600 = load ptr, ptr %27, align 8
  %601 = insertvalue { ptr, i160 } undef, ptr %600, 0
  %602 = load i160, ptr %26, align 4
  %603 = insertvalue { ptr, i160 } %601, i160 %602, 1
  store ptr @bool_typ, ptr %29, align 8
  %604 = load i1, ptr %25, align 1
  store i1 %604, ptr %28, align 1
  %605 = load ptr, ptr %29, align 8
  %606 = insertvalue { ptr, i160 } undef, ptr %605, 0
  %607 = load i160, ptr %28, align 4
  %608 = insertvalue { ptr, i160 } %606, i160 %607, 1
  %609 = load ptr, ptr %494, align 8
  %610 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %609, 0
  %611 = load ptr, ptr %493, align 8
  %612 = insertvalue { ptr, ptr, ptr, i32 } %610, ptr %611, 1
  %613 = load ptr, ptr %492, align 8
  %614 = insertvalue { ptr, ptr, ptr, i32 } %612, ptr %613, 2
  %615 = load i32, ptr %491, align 4
  %616 = insertvalue { ptr, ptr, ptr, i32 } %614, i32 %615, 3
  %617 = getelementptr [2 x ptr], ptr %30, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %617, align 8
  %618 = getelementptr [2 x ptr], ptr %30, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %618, align 8
  %619 = call ptr @llvm.invariant.start.p0(i64 4, ptr %30)
  %620 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %609)
  %621 = getelementptr ptr, ptr %609, i32 %615
  %622 = getelementptr ptr, ptr %621, i32 21
  %623 = load ptr, ptr %622, align 8
  %624 = getelementptr { ptr, ptr }, ptr %31, i32 0, i32 0
  store ptr %600, ptr %624, align 8
  %625 = getelementptr { ptr, ptr }, ptr %31, i32 0, i32 1
  store ptr %605, ptr %625, align 8
  %626 = call ptr @behavior_wrapper(ptr %623, { ptr, ptr, ptr, i32 } %616, ptr %31)
  call void %626({ ptr, ptr, ptr, i32 } %616, { ptr, ptr, ptr, i32 } %616, ptr %30, { ptr, i160 } %603, { ptr, i160 } %608) #17
  store i32 1, ptr %32, align 4
  %627 = load i32, ptr %499, align 4
  %628 = load i32, ptr %32, align 4
  %629 = add i32 %627, %628
  store i32 %629, ptr %33, align 4
  %630 = load i32, ptr %33, align 4
  store i32 %630, ptr %499, align 4
  br label %631

631:                                              ; preds = %._crit_edge2, %567
  store i32 1, ptr %34, align 4
  %632 = load i32, ptr %500, align 4
  %633 = load i32, ptr %34, align 4
  %634 = add i32 %632, %633
  store i32 %634, ptr %35, align 4
  %635 = load i32, ptr %35, align 4
  store i32 %635, ptr %500, align 4
  br label %636

636:                                              ; preds = %._crit_edge1, %631
  %.reload25 = load i1, ptr %.reg2mem24, align 1
  br i1 %.reload25, label %._crit_edge3, label %637

._crit_edge3:                                     ; preds = %636
  br label %506

637:                                              ; preds = %636
  store ptr @Array, ptr %36, align 8
  %638 = getelementptr ptr, ptr %36, i32 1
  store ptr @_parameterization_Ptri32, ptr %638, align 8
  %639 = load ptr, ptr %36, align 8
  %640 = getelementptr ptr, ptr %639, i32 6
  %641 = load ptr, ptr %640, align 8
  %642 = call { i64, i64 } @size_wrapper(ptr %641, ptr %36)
  %643 = extractvalue { i64, i64 } %642, 0
  %644 = call ptr @bump_malloc(i64 %643)
  store ptr @_parameterization_Ptri32, ptr %644, align 8
  %645 = call ptr @llvm.invariant.start.p0(i64 8, ptr %644)
  store ptr @Array, ptr %40, align 8
  store ptr %644, ptr %39, align 8
  store i32 10, ptr %37, align 4
  %646 = load i32, ptr %252, align 4
  %647 = load ptr, ptr %40, align 8
  %648 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %647, 0
  %649 = load ptr, ptr %39, align 8
  %650 = insertvalue { ptr, ptr, ptr, i32 } %648, ptr %649, 1
  %651 = load ptr, ptr %38, align 8
  %652 = insertvalue { ptr, ptr, ptr, i32 } %650, ptr %651, 2
  %653 = load i32, ptr %37, align 4
  %654 = insertvalue { ptr, ptr, ptr, i32 } %652, i32 %653, 3
  %655 = getelementptr [1 x ptr], ptr %41, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %655, align 8
  %656 = call ptr @llvm.invariant.start.p0(i64 1, ptr %41)
  %657 = call ptr @llvm.invariant.start.p0(i64 664, ptr %647)
  %658 = getelementptr ptr, ptr %647, i32 %653
  %659 = getelementptr ptr, ptr %658, i32 6
  %660 = load ptr, ptr %659, align 8
  %661 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  store ptr @i32_typ, ptr %661, align 8
  %662 = call ptr @behavior_wrapper(ptr %660, { ptr, ptr, ptr, i32 } %654, ptr %42)
  call void %662({ ptr, ptr, ptr, i32 } %654, { ptr, ptr, ptr, i32 } %654, ptr %41, i32 %646) #17
  %663 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %664 = load ptr, ptr %40, align 8
  store ptr %664, ptr %663, align 8
  %665 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %666 = load ptr, ptr %39, align 8
  store ptr %666, ptr %665, align 8
  %667 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %668 = load ptr, ptr %38, align 8
  store ptr %668, ptr %667, align 8
  %669 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %670 = load i32, ptr %37, align 4
  store i32 %670, ptr %669, align 4
  call void @set_offset(ptr %43, ptr @Array)
  %671 = load ptr, ptr %663, align 8
  store ptr %671, ptr %47, align 8
  %672 = load ptr, ptr %665, align 8
  store ptr %672, ptr %46, align 8
  %673 = load ptr, ptr %667, align 8
  store ptr %673, ptr %45, align 8
  %674 = load i32, ptr %669, align 4
  store i32 %674, ptr %44, align 4
  store i32 0, ptr %48, align 4
  store i32 0, ptr %49, align 4
  %675 = load i32, ptr %49, align 4
  store i32 %675, ptr %500, align 4
  store i32 20, ptr %50, align 4
  %676 = load i32, ptr %252, align 4
  %677 = load i32, ptr %50, align 4
  %678 = mul i32 %676, %677
  store i32 %678, ptr %51, align 4
  br label %679

679:                                              ; preds = %._crit_edge7, %637
  %680 = load i32, ptr %48, align 4
  %681 = load i32, ptr %252, align 4
  %682 = icmp slt i32 %680, %681
  store i1 %682, ptr %52, align 1
  %683 = load i1, ptr %52, align 1
  store i1 %683, ptr %53, align 1
  br i1 %683, label %684, label %._crit_edge4

._crit_edge4:                                     ; preds = %679
  br label %689

684:                                              ; preds = %679
  %685 = load i32, ptr %500, align 4
  %686 = load i32, ptr %51, align 4
  %687 = icmp slt i32 %685, %686
  store i1 %687, ptr %54, align 1
  %688 = load i1, ptr %54, align 1
  store i1 %688, ptr %53, align 1
  br label %689

689:                                              ; preds = %._crit_edge4, %684
  %690 = load i1, ptr %53, align 1
  store i1 %690, ptr %55, align 1
  %691 = load i1, ptr %55, align 1
  store i1 %691, ptr %.reg2mem21, align 1
  %.reload23 = load i1, ptr %.reg2mem21, align 1
  br i1 %.reload23, label %692, label %._crit_edge5

._crit_edge5:                                     ; preds = %689
  br label %774

692:                                              ; preds = %689
  %693 = load ptr, ptr %420, align 8
  %694 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %693, 0
  %695 = load ptr, ptr %419, align 8
  %696 = insertvalue { ptr, ptr, ptr, i32 } %694, ptr %695, 1
  %697 = load ptr, ptr %418, align 8
  %698 = insertvalue { ptr, ptr, ptr, i32 } %696, ptr %697, 2
  %699 = load i32, ptr %417, align 4
  %700 = insertvalue { ptr, ptr, ptr, i32 } %698, i32 %699, 3
  %701 = call ptr @llvm.invariant.start.p0(i64 0, ptr %56)
  %702 = call ptr @llvm.invariant.start.p0(i64 40, ptr %693)
  %703 = getelementptr ptr, ptr %693, i32 %699
  %704 = getelementptr ptr, ptr %703, i32 2
  %705 = load ptr, ptr %704, align 8
  %706 = call ptr @behavior_wrapper(ptr %705, { ptr, ptr, ptr, i32 } %700, ptr %57)
  %707 = call i32 %706({ ptr, ptr, ptr, i32 } %700, { ptr, ptr, ptr, i32 } %700, ptr %56) #17
  store i32 %707, ptr %58, align 4
  store ptr @i32_typ, ptr %60, align 8
  %708 = load i32, ptr %58, align 4
  store i32 %708, ptr %59, align 4
  %709 = load ptr, ptr %60, align 8
  %710 = insertvalue { ptr, i160 } undef, ptr %709, 0
  %711 = load i160, ptr %59, align 4
  %712 = insertvalue { ptr, i160 } %710, i160 %711, 1
  %713 = load ptr, ptr %494, align 8
  %714 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %713, 0
  %715 = load ptr, ptr %493, align 8
  %716 = insertvalue { ptr, ptr, ptr, i32 } %714, ptr %715, 1
  %717 = load ptr, ptr %492, align 8
  %718 = insertvalue { ptr, ptr, ptr, i32 } %716, ptr %717, 2
  %719 = load i32, ptr %491, align 4
  %720 = insertvalue { ptr, ptr, ptr, i32 } %718, i32 %719, 3
  %721 = getelementptr [1 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %721, align 8
  %722 = call ptr @llvm.invariant.start.p0(i64 1, ptr %61)
  %723 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %713)
  %724 = getelementptr ptr, ptr %713, i32 %719
  %725 = getelementptr ptr, ptr %724, i32 23
  %726 = load ptr, ptr %725, align 8
  %727 = getelementptr { ptr }, ptr %62, i32 0, i32 0
  store ptr %709, ptr %727, align 8
  %728 = call ptr @behavior_wrapper(ptr %726, { ptr, ptr, ptr, i32 } %720, ptr %62)
  %729 = call { ptr, i160 } %728({ ptr, ptr, ptr, i32 } %720, { ptr, ptr, ptr, i32 } %720, ptr %61, { ptr, i160 } %712) #17
  store { ptr, i160 } %729, ptr %63, align 8
  %730 = getelementptr { ptr, i1 }, ptr %63, i32 0, i32 0
  %731 = load ptr, ptr %730, align 8
  store ptr %731, ptr %64, align 8
  %732 = getelementptr { ptr, i1 }, ptr %63, i32 0, i32 1
  %733 = load i1, ptr %732, align 1
  store i1 %733, ptr %65, align 1
  %734 = load ptr, ptr %64, align 8
  %735 = ptrtoint ptr %734 to i64
  %736 = icmp eq i64 %735, ptrtoint (ptr @nil_typ to i64)
  %737 = icmp eq i64 %735, 0
  %738 = or i1 %736, %737
  store i1 %738, ptr %66, align 1
  %739 = load i1, ptr %66, align 1
  br i1 %739, label %740, label %._crit_edge6

._crit_edge6:                                     ; preds = %692
  br label %769

740:                                              ; preds = %692
  %741 = load i32, ptr %48, align 4
  store ptr @i32_typ, ptr %68, align 8
  %742 = load i32, ptr %58, align 4
  store i32 %742, ptr %67, align 4
  %743 = load ptr, ptr %68, align 8
  %744 = insertvalue { ptr, i160 } undef, ptr %743, 0
  %745 = load i160, ptr %67, align 4
  %746 = insertvalue { ptr, i160 } %744, i160 %745, 1
  %747 = load ptr, ptr %47, align 8
  %748 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %747, 0
  %749 = load ptr, ptr %46, align 8
  %750 = insertvalue { ptr, ptr, ptr, i32 } %748, ptr %749, 1
  %751 = load ptr, ptr %45, align 8
  %752 = insertvalue { ptr, ptr, ptr, i32 } %750, ptr %751, 2
  %753 = load i32, ptr %44, align 4
  %754 = insertvalue { ptr, ptr, ptr, i32 } %752, i32 %753, 3
  %755 = getelementptr [2 x ptr], ptr %69, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %755, align 8
  %756 = getelementptr [2 x ptr], ptr %69, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %756, align 8
  %757 = call ptr @llvm.invariant.start.p0(i64 4, ptr %69)
  %758 = call ptr @llvm.invariant.start.p0(i64 664, ptr %747)
  %759 = getelementptr ptr, ptr %747, i32 %753
  %760 = getelementptr ptr, ptr %759, i32 18
  %761 = load ptr, ptr %760, align 8
  %762 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @i32_typ, ptr %762, align 8
  %763 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr %743, ptr %763, align 8
  %764 = call ptr @behavior_wrapper(ptr %761, { ptr, ptr, ptr, i32 } %754, ptr %70)
  call void %764({ ptr, ptr, ptr, i32 } %754, { ptr, ptr, ptr, i32 } %754, ptr %69, i32 %741, { ptr, i160 } %746) #17
  store i32 1, ptr %71, align 4
  %765 = load i32, ptr %48, align 4
  %766 = load i32, ptr %71, align 4
  %767 = add i32 %765, %766
  store i32 %767, ptr %72, align 4
  %768 = load i32, ptr %72, align 4
  store i32 %768, ptr %48, align 4
  br label %769

769:                                              ; preds = %._crit_edge6, %740
  store i32 1, ptr %73, align 4
  %770 = load i32, ptr %500, align 4
  %771 = load i32, ptr %73, align 4
  %772 = add i32 %770, %771
  store i32 %772, ptr %74, align 4
  %773 = load i32, ptr %74, align 4
  store i32 %773, ptr %500, align 4
  br label %774

774:                                              ; preds = %._crit_edge5, %769
  %.reload22 = load i1, ptr %.reg2mem21, align 1
  br i1 %.reload22, label %._crit_edge7, label %775

._crit_edge7:                                     ; preds = %774
  br label %679

775:                                              ; preds = %774
  %776 = load i32, ptr %48, align 4
  %777 = load i32, ptr %252, align 4
  %778 = icmp slt i32 %776, %777
  store i1 %778, ptr %75, align 1
  %779 = load i1, ptr %75, align 1
  br i1 %779, label %780, label %._crit_edge8

._crit_edge8:                                     ; preds = %775
  br label %909

780:                                              ; preds = %775
  store i32 30, ptr %76, align 4
  %781 = load i32, ptr %76, align 4
  %782 = sext i32 %781 to i64
  %783 = mul i64 %782, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %784 = call ptr @bump_malloc(i64 %783)
  store ptr %784, ptr %77, align 8
  %785 = getelementptr { ptr }, ptr %77, i32 0, i32 0
  %786 = load ptr, ptr %785, align 8
  store ptr %786, ptr %78, align 8
  store i32 0, ptr %79, align 4
  %787 = load ptr, ptr %78, align 8
  %788 = load i32, ptr %79, align 4
  %789 = sext i32 %788 to i64
  %790 = mul i64 ptrtoint (ptr getelementptr ([29 x i8], ptr null, i32 1) to i64), %789
  %791 = getelementptr i8, ptr %787, i64 %790
  %792 = load <29 x i8>, ptr @ldgmw_Warning_Could_only_generate_, align 32
  store <29 x i8> %792, ptr %791, align 32
  store i32 29, ptr %80, align 4
  store i32 30, ptr %81, align 4
  store ptr @String, ptr %82, align 8
  %793 = load ptr, ptr %82, align 8
  %794 = getelementptr ptr, ptr %793, i32 6
  %795 = load ptr, ptr %794, align 8
  %796 = call { i64, i64 } @size_wrapper(ptr %795, ptr %82)
  %797 = extractvalue { i64, i64 } %796, 0
  %798 = call ptr @bump_malloc(i64 %797)
  %799 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %800 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  store ptr @String, ptr %83, align 8
  store ptr %798, ptr %799, align 8
  store i32 10, ptr %800, align 4
  store i32 29, ptr %84, align 4
  store i32 30, ptr %85, align 4
  %801 = load ptr, ptr %78, align 8
  %802 = insertvalue { ptr } undef, ptr %801, 0
  %803 = load i32, ptr %84, align 4
  %804 = load i32, ptr %85, align 4
  %805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %806 = load ptr, ptr %805, align 8
  %807 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %806, 0
  %808 = load ptr, ptr %799, align 8
  %809 = insertvalue { ptr, ptr, ptr, i32 } %807, ptr %808, 1
  %810 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %811 = load ptr, ptr %810, align 8
  %812 = insertvalue { ptr, ptr, ptr, i32 } %809, ptr %811, 2
  %813 = load i32, ptr %800, align 4
  %814 = insertvalue { ptr, ptr, ptr, i32 } %812, i32 %813, 3
  %815 = getelementptr [3 x ptr], ptr %86, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %815, align 8
  %816 = getelementptr [3 x ptr], ptr %86, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %816, align 8
  %817 = getelementptr [3 x ptr], ptr %86, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %817, align 8
  %818 = call ptr @llvm.invariant.start.p0(i64 9, ptr %86)
  %819 = call ptr @llvm.invariant.start.p0(i64 632, ptr %806)
  %820 = getelementptr ptr, ptr %806, i32 %813
  %821 = getelementptr ptr, ptr %820, i32 6
  %822 = load ptr, ptr %821, align 8
  %823 = getelementptr { ptr, ptr, ptr }, ptr %87, i32 0, i32 0
  store ptr @buffer_typ, ptr %823, align 8
  %824 = getelementptr { ptr, ptr, ptr }, ptr %87, i32 0, i32 1
  store ptr @i32_typ, ptr %824, align 8
  %825 = getelementptr { ptr, ptr, ptr }, ptr %87, i32 0, i32 2
  store ptr @i32_typ, ptr %825, align 8
  %826 = call ptr @behavior_wrapper(ptr %822, { ptr, ptr, ptr, i32 } %814, ptr %87)
  call void %826({ ptr, ptr, ptr, i32 } %814, { ptr, ptr, ptr, i32 } %814, ptr %86, { ptr } %802, i32 %803, i32 %804) #17
  %827 = getelementptr { ptr, i160 }, ptr %83, i32 0, i32 0
  %828 = load ptr, ptr %827, align 8
  %829 = insertvalue { ptr, i160 } undef, ptr %828, 0
  %830 = getelementptr { ptr, i160 }, ptr %83, i32 0, i32 1
  %831 = load i160, ptr %830, align 4
  %832 = insertvalue { ptr, i160 } %829, i160 %831, 1
  %833 = getelementptr [1 x ptr], ptr %88, i32 0, i32 0
  store ptr @_parameterization_String, ptr %833, align 8
  %834 = call ptr @llvm.invariant.start.p0(i64 1, ptr %88)
  %835 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %836 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %837 = getelementptr { ptr }, ptr %89, i32 0, i32 0
  store ptr %828, ptr %837, align 8
  %838 = call ptr @class_behavior_wrapper(ptr %836, ptr %89)
  call void %838(ptr %88, { ptr, i160 } %832) #17
  %839 = load i32, ptr %48, align 4
  store i32 %839, ptr %90, align 4
  store ptr @i32_typ, ptr %91, align 8
  %840 = load ptr, ptr %91, align 8
  %841 = insertvalue { ptr, i160 } undef, ptr %840, 0
  %842 = load i160, ptr %90, align 4
  %843 = insertvalue { ptr, i160 } %841, i160 %842, 1
  %844 = getelementptr [1 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %844, align 8
  %845 = call ptr @llvm.invariant.start.p0(i64 1, ptr %92)
  %846 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %847 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %848 = getelementptr { ptr }, ptr %93, i32 0, i32 0
  store ptr %840, ptr %848, align 8
  %849 = call ptr @class_behavior_wrapper(ptr %847, ptr %93)
  call void %849(ptr %92, { ptr, i160 } %843) #17
  store i32 23, ptr %94, align 4
  %850 = load i32, ptr %94, align 4
  %851 = sext i32 %850 to i64
  %852 = mul i64 %851, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %853 = call ptr @bump_malloc(i64 %852)
  store ptr %853, ptr %95, align 8
  %854 = getelementptr { ptr }, ptr %95, i32 0, i32 0
  %855 = load ptr, ptr %854, align 8
  store ptr %855, ptr %96, align 8
  store i32 0, ptr %97, align 4
  %856 = load ptr, ptr %96, align 8
  %857 = load i32, ptr %97, align 4
  %858 = sext i32 %857 to i64
  %859 = mul i64 ptrtoint (ptr getelementptr ([22 x i8], ptr null, i32 1) to i64), %858
  %860 = getelementptr i8, ptr %856, i64 %859
  %861 = load <22 x i8>, ptr @cqpyx__guaranteed_miss_keys, align 32
  store <22 x i8> %861, ptr %860, align 32
  store i32 22, ptr %98, align 4
  store i32 23, ptr %99, align 4
  store ptr @String, ptr %100, align 8
  %862 = load ptr, ptr %100, align 8
  %863 = getelementptr ptr, ptr %862, i32 6
  %864 = load ptr, ptr %863, align 8
  %865 = call { i64, i64 } @size_wrapper(ptr %864, ptr %100)
  %866 = extractvalue { i64, i64 } %865, 0
  %867 = call ptr @bump_malloc(i64 %866)
  %868 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 1
  %869 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 3
  store ptr @String, ptr %101, align 8
  store ptr %867, ptr %868, align 8
  store i32 10, ptr %869, align 4
  store i32 22, ptr %102, align 4
  store i32 23, ptr %103, align 4
  %870 = load ptr, ptr %96, align 8
  %871 = insertvalue { ptr } undef, ptr %870, 0
  %872 = load i32, ptr %102, align 4
  %873 = load i32, ptr %103, align 4
  %874 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 0
  %875 = load ptr, ptr %874, align 8
  %876 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %875, 0
  %877 = load ptr, ptr %868, align 8
  %878 = insertvalue { ptr, ptr, ptr, i32 } %876, ptr %877, 1
  %879 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 2
  %880 = load ptr, ptr %879, align 8
  %881 = insertvalue { ptr, ptr, ptr, i32 } %878, ptr %880, 2
  %882 = load i32, ptr %869, align 4
  %883 = insertvalue { ptr, ptr, ptr, i32 } %881, i32 %882, 3
  %884 = getelementptr [3 x ptr], ptr %104, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %884, align 8
  %885 = getelementptr [3 x ptr], ptr %104, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %885, align 8
  %886 = getelementptr [3 x ptr], ptr %104, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %886, align 8
  %887 = call ptr @llvm.invariant.start.p0(i64 9, ptr %104)
  %888 = call ptr @llvm.invariant.start.p0(i64 632, ptr %875)
  %889 = getelementptr ptr, ptr %875, i32 %882
  %890 = getelementptr ptr, ptr %889, i32 6
  %891 = load ptr, ptr %890, align 8
  %892 = getelementptr { ptr, ptr, ptr }, ptr %105, i32 0, i32 0
  store ptr @buffer_typ, ptr %892, align 8
  %893 = getelementptr { ptr, ptr, ptr }, ptr %105, i32 0, i32 1
  store ptr @i32_typ, ptr %893, align 8
  %894 = getelementptr { ptr, ptr, ptr }, ptr %105, i32 0, i32 2
  store ptr @i32_typ, ptr %894, align 8
  %895 = call ptr @behavior_wrapper(ptr %891, { ptr, ptr, ptr, i32 } %883, ptr %105)
  call void %895({ ptr, ptr, ptr, i32 } %883, { ptr, ptr, ptr, i32 } %883, ptr %104, { ptr } %871, i32 %872, i32 %873) #17
  %896 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 0
  %897 = load ptr, ptr %896, align 8
  %898 = insertvalue { ptr, i160 } undef, ptr %897, 0
  %899 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 1
  %900 = load i160, ptr %899, align 4
  %901 = insertvalue { ptr, i160 } %898, i160 %900, 1
  %902 = getelementptr [1 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_String, ptr %902, align 8
  %903 = call ptr @llvm.invariant.start.p0(i64 1, ptr %106)
  %904 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %905 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %906 = getelementptr { ptr }, ptr %107, i32 0, i32 0
  store ptr %897, ptr %906, align 8
  %907 = call ptr @class_behavior_wrapper(ptr %905, ptr %107)
  call void %907(ptr %106, { ptr, i160 } %901) #17
  %908 = load i32, ptr %48, align 4
  store i32 %908, ptr %252, align 4
  br label %909

909:                                              ; preds = %._crit_edge8, %780
  %910 = call i64 @clock()
  store i64 %910, ptr %108, align 4
  store i32 0, ptr %109, align 4
  store i32 0, ptr %110, align 4
  store i32 0, ptr %111, align 4
  br label %911

911:                                              ; preds = %._crit_edge10, %909
  %912 = load i32, ptr %111, align 4
  %913 = load i32, ptr %252, align 4
  %914 = icmp slt i32 %912, %913
  store i1 %914, ptr %112, align 1
  %915 = load i1, ptr %112, align 1
  store i1 %915, ptr %.reg2mem18, align 1
  %.reload20 = load i1, ptr %.reg2mem18, align 1
  br i1 %.reload20, label %916, label %._crit_edge9

._crit_edge9:                                     ; preds = %911
  br label %980

916:                                              ; preds = %911
  %917 = load i32, ptr %111, align 4
  %918 = load ptr, ptr %47, align 8
  %919 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %918, 0
  %920 = load ptr, ptr %46, align 8
  %921 = insertvalue { ptr, ptr, ptr, i32 } %919, ptr %920, 1
  %922 = load ptr, ptr %45, align 8
  %923 = insertvalue { ptr, ptr, ptr, i32 } %921, ptr %922, 2
  %924 = load i32, ptr %44, align 4
  %925 = insertvalue { ptr, ptr, ptr, i32 } %923, i32 %924, 3
  %926 = getelementptr [1 x ptr], ptr %113, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %926, align 8
  %927 = call ptr @llvm.invariant.start.p0(i64 1, ptr %113)
  %928 = call ptr @llvm.invariant.start.p0(i64 664, ptr %918)
  %929 = getelementptr ptr, ptr %918, i32 %924
  %930 = getelementptr ptr, ptr %929, i32 17
  %931 = load ptr, ptr %930, align 8
  %932 = getelementptr { ptr }, ptr %114, i32 0, i32 0
  store ptr @i32_typ, ptr %932, align 8
  %933 = call ptr @behavior_wrapper(ptr %931, { ptr, ptr, ptr, i32 } %925, ptr %114)
  %934 = call { ptr, i160 } %933({ ptr, ptr, ptr, i32 } %925, { ptr, ptr, ptr, i32 } %925, ptr %113, i32 %917) #17
  store { ptr, i160 } %934, ptr %115, align 8
  %935 = getelementptr { ptr, i160 }, ptr %115, i32 0, i32 1
  %936 = load i32, ptr %935, align 4
  store i32 %936, ptr %116, align 4
  store ptr @i32_typ, ptr %118, align 8
  %937 = load i32, ptr %116, align 4
  store i32 %937, ptr %117, align 4
  %938 = load ptr, ptr %118, align 8
  %939 = insertvalue { ptr, i160 } undef, ptr %938, 0
  %940 = load i160, ptr %117, align 4
  %941 = insertvalue { ptr, i160 } %939, i160 %940, 1
  %942 = load ptr, ptr %322, align 8
  %943 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %942, 0
  %944 = load ptr, ptr %321, align 8
  %945 = insertvalue { ptr, ptr, ptr, i32 } %943, ptr %944, 1
  %946 = load ptr, ptr %320, align 8
  %947 = insertvalue { ptr, ptr, ptr, i32 } %945, ptr %946, 2
  %948 = load i32, ptr %319, align 4
  %949 = insertvalue { ptr, ptr, ptr, i32 } %947, i32 %948, 3
  %950 = getelementptr [1 x ptr], ptr %119, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %950, align 8
  %951 = call ptr @llvm.invariant.start.p0(i64 1, ptr %119)
  %952 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %942)
  %953 = getelementptr ptr, ptr %942, i32 %948
  %954 = getelementptr ptr, ptr %953, i32 23
  %955 = load ptr, ptr %954, align 8
  %956 = getelementptr { ptr }, ptr %120, i32 0, i32 0
  store ptr %938, ptr %956, align 8
  %957 = call ptr @behavior_wrapper(ptr %955, { ptr, ptr, ptr, i32 } %949, ptr %120)
  %958 = call { ptr, i160 } %957({ ptr, ptr, ptr, i32 } %949, { ptr, ptr, ptr, i32 } %949, ptr %119, { ptr, i160 } %941) #17
  store { ptr, i160 } %958, ptr %121, align 8
  %959 = getelementptr { ptr, i32 }, ptr %121, i32 0, i32 0
  %960 = load ptr, ptr %959, align 8
  store ptr %960, ptr %122, align 8
  %961 = getelementptr { ptr, i32 }, ptr %121, i32 0, i32 1
  %962 = load i32, ptr %961, align 4
  store i32 %962, ptr %123, align 4
  %963 = load ptr, ptr %122, align 8
  %964 = ptrtoint ptr %963 to i64
  %965 = icmp eq i64 %964, ptrtoint (ptr @nil_typ to i64)
  %966 = icmp eq i64 %964, 0
  %967 = or i1 %965, %966
  store i1 %967, ptr %124, align 1
  %968 = load i1, ptr %124, align 1
  %969 = select i1 %968, ptr %125, ptr %127
  %970 = select i1 %968, ptr %109, ptr %110
  %971 = select i1 %968, ptr %126, ptr %128
  store i32 1, ptr %969, align 4
  %972 = load i32, ptr %970, align 4
  %973 = load i32, ptr %969, align 4
  %974 = add i32 %972, %973
  store i32 %974, ptr %971, align 4
  %975 = load i32, ptr %971, align 4
  store i32 %975, ptr %970, align 4
  store i32 1, ptr %129, align 4
  %976 = load i32, ptr %111, align 4
  %977 = load i32, ptr %129, align 4
  %978 = add i32 %976, %977
  store i32 %978, ptr %130, align 4
  %979 = load i32, ptr %130, align 4
  store i32 %979, ptr %111, align 4
  br label %980

980:                                              ; preds = %._crit_edge9, %916
  %.reload19 = load i1, ptr %.reg2mem18, align 1
  br i1 %.reload19, label %._crit_edge10, label %981

._crit_edge10:                                    ; preds = %980
  br label %911

981:                                              ; preds = %980
  %982 = call i64 @clock()
  store i64 %982, ptr %131, align 4
  store i1 true, ptr %132, align 1
  store i32 0, ptr %133, align 4
  %983 = load i32, ptr %252, align 4
  %984 = load i32, ptr %133, align 4
  %985 = icmp sgt i32 %983, %984
  store i1 %985, ptr %134, align 1
  %986 = load i1, ptr %134, align 1
  store i1 %986, ptr %.reg2mem15, align 1
  %.reload17 = load i1, ptr %.reg2mem15, align 1
  br i1 %.reload17, label %987, label %1000

987:                                              ; preds = %981
  store i32 100, ptr %135, align 4
  %988 = load i32, ptr %110, align 4
  %989 = load i32, ptr %135, align 4
  %990 = mul i32 %988, %989
  store i32 %990, ptr %136, align 4
  %991 = load i32, ptr %136, align 4
  %992 = load i32, ptr %252, align 4
  %993 = sdiv i32 %991, %992
  store i32 %993, ptr %137, align 4
  store i32 5, ptr %138, align 4
  %994 = load i32, ptr %137, align 4
  %995 = load i32, ptr %138, align 4
  %996 = icmp sge i32 %994, %995
  store i1 %996, ptr %139, align 1
  %997 = load i1, ptr %139, align 1
  %998 = xor i1 %997, true
  %999 = zext i1 %998 to i32
  store i32 %999, ptr %.reg2mem13, align 4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem27, align 4
  br label %1007

1000:                                             ; preds = %981
  store i32 0, ptr %141, align 4
  %1001 = load i32, ptr %110, align 4
  %1002 = load i32, ptr %141, align 4
  %1003 = icmp ne i32 %1001, %1002
  store i1 %1003, ptr %142, align 1
  %1004 = load i1, ptr %142, align 1
  %1005 = xor i1 %1004, true
  %1006 = zext i1 %1005 to i32
  store i32 %1006, ptr %.reg2mem11, align 4
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem27, align 4
  br label %1007

1007:                                             ; preds = %1000, %987
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store i32 %.reload28, ptr %.reg2mem, align 4
  br label %1008

1008:                                             ; preds = %1007
  %.reload = load i32, ptr %.reg2mem, align 4
  %1009 = zext i32 %.reload to i64
  %1010 = trunc i64 %1009 to i32
  switch i32 %1010, label %1014 [
    i32 0, label %1011
  ]

1011:                                             ; preds = %1008
  %.reload16 = load i1, ptr %.reg2mem15, align 1
  %1012 = select i1 %.reload16, ptr %140, ptr %143
  store i1 false, ptr %1012, align 1
  %1013 = load i1, ptr %1012, align 1
  store i1 %1013, ptr %132, align 1
  br label %1015

1014:                                             ; preds = %1008
  br label %1015

1015:                                             ; preds = %1014, %1011
  store i32 16, ptr %144, align 4
  %1016 = load i32, ptr %144, align 4
  %1017 = sext i32 %1016 to i64
  %1018 = mul i64 %1017, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1019 = call ptr @bump_malloc(i64 %1018)
  store ptr %1019, ptr %145, align 8
  %1020 = getelementptr { ptr }, ptr %145, i32 0, i32 0
  %1021 = load ptr, ptr %1020, align 8
  store ptr %1021, ptr %146, align 8
  store i32 0, ptr %147, align 4
  %1022 = load ptr, ptr %146, align 8
  %1023 = load i32, ptr %147, align 4
  %1024 = sext i32 %1023 to i64
  %1025 = mul i64 ptrtoint (ptr getelementptr ([15 x i8], ptr null, i32 1) to i64), %1024
  %1026 = getelementptr i8, ptr %1022, i64 %1025
  %1027 = load <15 x i8>, ptr @adgtt_Get_Random_Miss, align 16
  store <15 x i8> %1027, ptr %1026, align 16
  store i32 15, ptr %148, align 4
  store i32 16, ptr %149, align 4
  store ptr @String, ptr %150, align 8
  %1028 = load ptr, ptr %150, align 8
  %1029 = getelementptr ptr, ptr %1028, i32 6
  %1030 = load ptr, ptr %1029, align 8
  %1031 = call { i64, i64 } @size_wrapper(ptr %1030, ptr %150)
  %1032 = extractvalue { i64, i64 } %1031, 0
  %1033 = call ptr @bump_malloc(i64 %1032)
  store ptr @String, ptr %154, align 8
  store ptr %1033, ptr %153, align 8
  store i32 10, ptr %151, align 4
  store i32 15, ptr %155, align 4
  store i32 16, ptr %156, align 4
  %1034 = load ptr, ptr %146, align 8
  %1035 = insertvalue { ptr } undef, ptr %1034, 0
  %1036 = load i32, ptr %155, align 4
  %1037 = load i32, ptr %156, align 4
  %1038 = load ptr, ptr %154, align 8
  %1039 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1038, 0
  %1040 = load ptr, ptr %153, align 8
  %1041 = insertvalue { ptr, ptr, ptr, i32 } %1039, ptr %1040, 1
  %1042 = load ptr, ptr %152, align 8
  %1043 = insertvalue { ptr, ptr, ptr, i32 } %1041, ptr %1042, 2
  %1044 = load i32, ptr %151, align 4
  %1045 = insertvalue { ptr, ptr, ptr, i32 } %1043, i32 %1044, 3
  %1046 = getelementptr [3 x ptr], ptr %157, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1046, align 8
  %1047 = getelementptr [3 x ptr], ptr %157, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1047, align 8
  %1048 = getelementptr [3 x ptr], ptr %157, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1048, align 8
  %1049 = call ptr @llvm.invariant.start.p0(i64 9, ptr %157)
  %1050 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1038)
  %1051 = getelementptr ptr, ptr %1038, i32 %1044
  %1052 = getelementptr ptr, ptr %1051, i32 6
  %1053 = load ptr, ptr %1052, align 8
  %1054 = getelementptr { ptr, ptr, ptr }, ptr %158, i32 0, i32 0
  store ptr @buffer_typ, ptr %1054, align 8
  %1055 = getelementptr { ptr, ptr, ptr }, ptr %158, i32 0, i32 1
  store ptr @i32_typ, ptr %1055, align 8
  %1056 = getelementptr { ptr, ptr, ptr }, ptr %158, i32 0, i32 2
  store ptr @i32_typ, ptr %1056, align 8
  %1057 = call ptr @behavior_wrapper(ptr %1053, { ptr, ptr, ptr, i32 } %1045, ptr %158)
  call void %1057({ ptr, ptr, ptr, i32 } %1045, { ptr, ptr, ptr, i32 } %1045, ptr %157, { ptr } %1035, i32 %1036, i32 %1037) #17
  %1058 = load i64, ptr %131, align 4
  %1059 = load i64, ptr %108, align 4
  %1060 = sub i64 %1058, %1059
  store i64 %1060, ptr %159, align 4
  %1061 = load ptr, ptr %154, align 8
  %1062 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1061, 0
  %1063 = load ptr, ptr %153, align 8
  %1064 = insertvalue { ptr, ptr, ptr, i32 } %1062, ptr %1063, 1
  %1065 = load ptr, ptr %152, align 8
  %1066 = insertvalue { ptr, ptr, ptr, i32 } %1064, ptr %1065, 2
  %1067 = load i32, ptr %151, align 4
  %1068 = insertvalue { ptr, ptr, ptr, i32 } %1066, i32 %1067, 3
  %1069 = load i32, ptr %252, align 4
  %1070 = load i64, ptr %159, align 4
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %1068, i32 %1069, i64 %1070)
  store i32 19, ptr %160, align 4
  %1071 = load i32, ptr %160, align 4
  %1072 = sext i32 %1071 to i64
  %1073 = mul i64 %1072, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1074 = call ptr @bump_malloc(i64 %1073)
  store ptr %1074, ptr %161, align 8
  %1075 = getelementptr { ptr }, ptr %161, i32 0, i32 0
  %1076 = load ptr, ptr %1075, align 8
  store ptr %1076, ptr %162, align 8
  store i32 0, ptr %163, align 4
  %1077 = load ptr, ptr %162, align 8
  %1078 = load i32, ptr %163, align 4
  %1079 = sext i32 %1078 to i64
  %1080 = mul i64 ptrtoint (ptr getelementptr ([18 x i8], ptr null, i32 1) to i64), %1079
  %1081 = getelementptr i8, ptr %1077, i64 %1080
  %1082 = load <18 x i8>, ptr @nlfkp_____Verification_, align 32
  store <18 x i8> %1082, ptr %1081, align 32
  store i32 18, ptr %164, align 4
  store i32 19, ptr %165, align 4
  store ptr @String, ptr %166, align 8
  %1083 = load ptr, ptr %166, align 8
  %1084 = getelementptr ptr, ptr %1083, i32 6
  %1085 = load ptr, ptr %1084, align 8
  %1086 = call { i64, i64 } @size_wrapper(ptr %1085, ptr %166)
  %1087 = extractvalue { i64, i64 } %1086, 0
  %1088 = call ptr @bump_malloc(i64 %1087)
  %1089 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 1
  %1090 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 3
  store ptr @String, ptr %167, align 8
  store ptr %1088, ptr %1089, align 8
  store i32 10, ptr %1090, align 4
  store i32 18, ptr %168, align 4
  store i32 19, ptr %169, align 4
  %1091 = load ptr, ptr %162, align 8
  %1092 = insertvalue { ptr } undef, ptr %1091, 0
  %1093 = load i32, ptr %168, align 4
  %1094 = load i32, ptr %169, align 4
  %1095 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 0
  %1096 = load ptr, ptr %1095, align 8
  %1097 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1096, 0
  %1098 = load ptr, ptr %1089, align 8
  %1099 = insertvalue { ptr, ptr, ptr, i32 } %1097, ptr %1098, 1
  %1100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 2
  %1101 = load ptr, ptr %1100, align 8
  %1102 = insertvalue { ptr, ptr, ptr, i32 } %1099, ptr %1101, 2
  %1103 = load i32, ptr %1090, align 4
  %1104 = insertvalue { ptr, ptr, ptr, i32 } %1102, i32 %1103, 3
  %1105 = getelementptr [3 x ptr], ptr %170, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1105, align 8
  %1106 = getelementptr [3 x ptr], ptr %170, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1106, align 8
  %1107 = getelementptr [3 x ptr], ptr %170, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1107, align 8
  %1108 = call ptr @llvm.invariant.start.p0(i64 9, ptr %170)
  %1109 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1096)
  %1110 = getelementptr ptr, ptr %1096, i32 %1103
  %1111 = getelementptr ptr, ptr %1110, i32 6
  %1112 = load ptr, ptr %1111, align 8
  %1113 = getelementptr { ptr, ptr, ptr }, ptr %171, i32 0, i32 0
  store ptr @buffer_typ, ptr %1113, align 8
  %1114 = getelementptr { ptr, ptr, ptr }, ptr %171, i32 0, i32 1
  store ptr @i32_typ, ptr %1114, align 8
  %1115 = getelementptr { ptr, ptr, ptr }, ptr %171, i32 0, i32 2
  store ptr @i32_typ, ptr %1115, align 8
  %1116 = call ptr @behavior_wrapper(ptr %1112, { ptr, ptr, ptr, i32 } %1104, ptr %171)
  call void %1116({ ptr, ptr, ptr, i32 } %1104, { ptr, ptr, ptr, i32 } %1104, ptr %170, { ptr } %1092, i32 %1093, i32 %1094) #17
  %1117 = getelementptr { ptr, i160 }, ptr %167, i32 0, i32 0
  %1118 = load ptr, ptr %1117, align 8
  %1119 = insertvalue { ptr, i160 } undef, ptr %1118, 0
  %1120 = getelementptr { ptr, i160 }, ptr %167, i32 0, i32 1
  %1121 = load i160, ptr %1120, align 4
  %1122 = insertvalue { ptr, i160 } %1119, i160 %1121, 1
  %1123 = getelementptr [1 x ptr], ptr %172, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1123, align 8
  %1124 = call ptr @llvm.invariant.start.p0(i64 1, ptr %172)
  %1125 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1126 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1127 = getelementptr { ptr }, ptr %173, i32 0, i32 0
  store ptr %1118, ptr %1127, align 8
  %1128 = call ptr @class_behavior_wrapper(ptr %1126, ptr %173)
  call void %1128(ptr %172, { ptr, i160 } %1122) #17
  %1129 = load i1, ptr %132, align 1
  br i1 %1129, label %1130, label %1189

1130:                                             ; preds = %1015
  store i32 5, ptr %174, align 4
  %1131 = load i32, ptr %174, align 4
  %1132 = sext i32 %1131 to i64
  %1133 = mul i64 %1132, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1134 = call ptr @bump_malloc(i64 %1133)
  store ptr %1134, ptr %175, align 8
  %1135 = getelementptr { ptr }, ptr %175, i32 0, i32 0
  %1136 = load ptr, ptr %1135, align 8
  store ptr %1136, ptr %176, align 8
  store i32 0, ptr %177, align 4
  %1137 = load ptr, ptr %176, align 8
  %1138 = load i32, ptr %177, align 4
  %1139 = sext i32 %1138 to i64
  %1140 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %1139
  %1141 = getelementptr i8, ptr %1137, i64 %1140
  %1142 = load <4 x i8>, ptr @hvyky_PASS, align 4
  store <4 x i8> %1142, ptr %1141, align 4
  store i32 4, ptr %178, align 4
  store i32 5, ptr %179, align 4
  store ptr @String, ptr %180, align 8
  %1143 = load ptr, ptr %180, align 8
  %1144 = getelementptr ptr, ptr %1143, i32 6
  %1145 = load ptr, ptr %1144, align 8
  %1146 = call { i64, i64 } @size_wrapper(ptr %1145, ptr %180)
  %1147 = extractvalue { i64, i64 } %1146, 0
  %1148 = call ptr @bump_malloc(i64 %1147)
  %1149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %181, i32 0, i32 1
  %1150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %181, i32 0, i32 3
  store ptr @String, ptr %181, align 8
  store ptr %1148, ptr %1149, align 8
  store i32 10, ptr %1150, align 4
  store i32 4, ptr %182, align 4
  store i32 5, ptr %183, align 4
  %1151 = load ptr, ptr %176, align 8
  %1152 = insertvalue { ptr } undef, ptr %1151, 0
  %1153 = load i32, ptr %182, align 4
  %1154 = load i32, ptr %183, align 4
  %1155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %181, i32 0, i32 0
  %1156 = load ptr, ptr %1155, align 8
  %1157 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1156, 0
  %1158 = load ptr, ptr %1149, align 8
  %1159 = insertvalue { ptr, ptr, ptr, i32 } %1157, ptr %1158, 1
  %1160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %181, i32 0, i32 2
  %1161 = load ptr, ptr %1160, align 8
  %1162 = insertvalue { ptr, ptr, ptr, i32 } %1159, ptr %1161, 2
  %1163 = load i32, ptr %1150, align 4
  %1164 = insertvalue { ptr, ptr, ptr, i32 } %1162, i32 %1163, 3
  %1165 = getelementptr [3 x ptr], ptr %184, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1165, align 8
  %1166 = getelementptr [3 x ptr], ptr %184, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1166, align 8
  %1167 = getelementptr [3 x ptr], ptr %184, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1167, align 8
  %1168 = call ptr @llvm.invariant.start.p0(i64 9, ptr %184)
  %1169 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1156)
  %1170 = getelementptr ptr, ptr %1156, i32 %1163
  %1171 = getelementptr ptr, ptr %1170, i32 6
  %1172 = load ptr, ptr %1171, align 8
  %1173 = getelementptr { ptr, ptr, ptr }, ptr %185, i32 0, i32 0
  store ptr @buffer_typ, ptr %1173, align 8
  %1174 = getelementptr { ptr, ptr, ptr }, ptr %185, i32 0, i32 1
  store ptr @i32_typ, ptr %1174, align 8
  %1175 = getelementptr { ptr, ptr, ptr }, ptr %185, i32 0, i32 2
  store ptr @i32_typ, ptr %1175, align 8
  %1176 = call ptr @behavior_wrapper(ptr %1172, { ptr, ptr, ptr, i32 } %1164, ptr %185)
  call void %1176({ ptr, ptr, ptr, i32 } %1164, { ptr, ptr, ptr, i32 } %1164, ptr %184, { ptr } %1152, i32 %1153, i32 %1154) #17
  %1177 = getelementptr { ptr, i160 }, ptr %181, i32 0, i32 0
  %1178 = load ptr, ptr %1177, align 8
  %1179 = insertvalue { ptr, i160 } undef, ptr %1178, 0
  %1180 = getelementptr { ptr, i160 }, ptr %181, i32 0, i32 1
  %1181 = load i160, ptr %1180, align 4
  %1182 = insertvalue { ptr, i160 } %1179, i160 %1181, 1
  %1183 = getelementptr [1 x ptr], ptr %186, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1183, align 8
  %1184 = call ptr @llvm.invariant.start.p0(i64 1, ptr %186)
  %1185 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1186 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1187 = getelementptr { ptr }, ptr %187, i32 0, i32 0
  store ptr %1178, ptr %1187, align 8
  %1188 = call ptr @class_behavior_wrapper(ptr %1186, ptr %187)
  call void %1188(ptr %186, { ptr, i160 } %1182) #17
  br label %1248

1189:                                             ; preds = %1015
  store i32 5, ptr %188, align 4
  %1190 = load i32, ptr %188, align 4
  %1191 = sext i32 %1190 to i64
  %1192 = mul i64 %1191, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1193 = call ptr @bump_malloc(i64 %1192)
  store ptr %1193, ptr %189, align 8
  %1194 = getelementptr { ptr }, ptr %189, i32 0, i32 0
  %1195 = load ptr, ptr %1194, align 8
  store ptr %1195, ptr %190, align 8
  store i32 0, ptr %191, align 4
  %1196 = load ptr, ptr %190, align 8
  %1197 = load i32, ptr %191, align 4
  %1198 = sext i32 %1197 to i64
  %1199 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %1198
  %1200 = getelementptr i8, ptr %1196, i64 %1199
  %1201 = load <4 x i8>, ptr @yckrj_FAIL, align 4
  store <4 x i8> %1201, ptr %1200, align 4
  store i32 4, ptr %192, align 4
  store i32 5, ptr %193, align 4
  store ptr @String, ptr %194, align 8
  %1202 = load ptr, ptr %194, align 8
  %1203 = getelementptr ptr, ptr %1202, i32 6
  %1204 = load ptr, ptr %1203, align 8
  %1205 = call { i64, i64 } @size_wrapper(ptr %1204, ptr %194)
  %1206 = extractvalue { i64, i64 } %1205, 0
  %1207 = call ptr @bump_malloc(i64 %1206)
  %1208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 1
  %1209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 3
  store ptr @String, ptr %195, align 8
  store ptr %1207, ptr %1208, align 8
  store i32 10, ptr %1209, align 4
  store i32 4, ptr %196, align 4
  store i32 5, ptr %197, align 4
  %1210 = load ptr, ptr %190, align 8
  %1211 = insertvalue { ptr } undef, ptr %1210, 0
  %1212 = load i32, ptr %196, align 4
  %1213 = load i32, ptr %197, align 4
  %1214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 0
  %1215 = load ptr, ptr %1214, align 8
  %1216 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1215, 0
  %1217 = load ptr, ptr %1208, align 8
  %1218 = insertvalue { ptr, ptr, ptr, i32 } %1216, ptr %1217, 1
  %1219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 2
  %1220 = load ptr, ptr %1219, align 8
  %1221 = insertvalue { ptr, ptr, ptr, i32 } %1218, ptr %1220, 2
  %1222 = load i32, ptr %1209, align 4
  %1223 = insertvalue { ptr, ptr, ptr, i32 } %1221, i32 %1222, 3
  %1224 = getelementptr [3 x ptr], ptr %198, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1224, align 8
  %1225 = getelementptr [3 x ptr], ptr %198, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1225, align 8
  %1226 = getelementptr [3 x ptr], ptr %198, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1226, align 8
  %1227 = call ptr @llvm.invariant.start.p0(i64 9, ptr %198)
  %1228 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1215)
  %1229 = getelementptr ptr, ptr %1215, i32 %1222
  %1230 = getelementptr ptr, ptr %1229, i32 6
  %1231 = load ptr, ptr %1230, align 8
  %1232 = getelementptr { ptr, ptr, ptr }, ptr %199, i32 0, i32 0
  store ptr @buffer_typ, ptr %1232, align 8
  %1233 = getelementptr { ptr, ptr, ptr }, ptr %199, i32 0, i32 1
  store ptr @i32_typ, ptr %1233, align 8
  %1234 = getelementptr { ptr, ptr, ptr }, ptr %199, i32 0, i32 2
  store ptr @i32_typ, ptr %1234, align 8
  %1235 = call ptr @behavior_wrapper(ptr %1231, { ptr, ptr, ptr, i32 } %1223, ptr %199)
  call void %1235({ ptr, ptr, ptr, i32 } %1223, { ptr, ptr, ptr, i32 } %1223, ptr %198, { ptr } %1211, i32 %1212, i32 %1213) #17
  %1236 = getelementptr { ptr, i160 }, ptr %195, i32 0, i32 0
  %1237 = load ptr, ptr %1236, align 8
  %1238 = insertvalue { ptr, i160 } undef, ptr %1237, 0
  %1239 = getelementptr { ptr, i160 }, ptr %195, i32 0, i32 1
  %1240 = load i160, ptr %1239, align 4
  %1241 = insertvalue { ptr, i160 } %1238, i160 %1240, 1
  %1242 = getelementptr [1 x ptr], ptr %200, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1242, align 8
  %1243 = call ptr @llvm.invariant.start.p0(i64 1, ptr %200)
  %1244 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1245 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1246 = getelementptr { ptr }, ptr %201, i32 0, i32 0
  store ptr %1237, ptr %1246, align 8
  %1247 = call ptr @class_behavior_wrapper(ptr %1245, ptr %201)
  call void %1247(ptr %200, { ptr, i160 } %1241) #17
  br label %1248

1248:                                             ; preds = %1189, %1130
  store i32 14, ptr %202, align 4
  %1249 = load i32, ptr %202, align 4
  %1250 = sext i32 %1249 to i64
  %1251 = mul i64 %1250, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1252 = call ptr @bump_malloc(i64 %1251)
  store ptr %1252, ptr %203, align 8
  %1253 = getelementptr { ptr }, ptr %203, i32 0, i32 0
  %1254 = load ptr, ptr %1253, align 8
  store ptr %1254, ptr %204, align 8
  store i32 0, ptr %205, align 4
  %1255 = load ptr, ptr %204, align 8
  %1256 = load i32, ptr %205, align 4
  %1257 = sext i32 %1256 to i64
  %1258 = mul i64 ptrtoint (ptr getelementptr ([13 x i8], ptr null, i32 1) to i64), %1257
  %1259 = getelementptr i8, ptr %1255, i64 %1258
  %1260 = load <13 x i8>, ptr @lhjwe_____Misses_, align 16
  store <13 x i8> %1260, ptr %1259, align 16
  store i32 13, ptr %206, align 4
  store i32 14, ptr %207, align 4
  store ptr @String, ptr %208, align 8
  %1261 = load ptr, ptr %208, align 8
  %1262 = getelementptr ptr, ptr %1261, i32 6
  %1263 = load ptr, ptr %1262, align 8
  %1264 = call { i64, i64 } @size_wrapper(ptr %1263, ptr %208)
  %1265 = extractvalue { i64, i64 } %1264, 0
  %1266 = call ptr @bump_malloc(i64 %1265)
  %1267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %1268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  store ptr @String, ptr %209, align 8
  store ptr %1266, ptr %1267, align 8
  store i32 10, ptr %1268, align 4
  store i32 13, ptr %210, align 4
  store i32 14, ptr %211, align 4
  %1269 = load ptr, ptr %204, align 8
  %1270 = insertvalue { ptr } undef, ptr %1269, 0
  %1271 = load i32, ptr %210, align 4
  %1272 = load i32, ptr %211, align 4
  %1273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %1274 = load ptr, ptr %1273, align 8
  %1275 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1274, 0
  %1276 = load ptr, ptr %1267, align 8
  %1277 = insertvalue { ptr, ptr, ptr, i32 } %1275, ptr %1276, 1
  %1278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %1279 = load ptr, ptr %1278, align 8
  %1280 = insertvalue { ptr, ptr, ptr, i32 } %1277, ptr %1279, 2
  %1281 = load i32, ptr %1268, align 4
  %1282 = insertvalue { ptr, ptr, ptr, i32 } %1280, i32 %1281, 3
  %1283 = getelementptr [3 x ptr], ptr %212, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1283, align 8
  %1284 = getelementptr [3 x ptr], ptr %212, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1284, align 8
  %1285 = getelementptr [3 x ptr], ptr %212, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1285, align 8
  %1286 = call ptr @llvm.invariant.start.p0(i64 9, ptr %212)
  %1287 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1274)
  %1288 = getelementptr ptr, ptr %1274, i32 %1281
  %1289 = getelementptr ptr, ptr %1288, i32 6
  %1290 = load ptr, ptr %1289, align 8
  %1291 = getelementptr { ptr, ptr, ptr }, ptr %213, i32 0, i32 0
  store ptr @buffer_typ, ptr %1291, align 8
  %1292 = getelementptr { ptr, ptr, ptr }, ptr %213, i32 0, i32 1
  store ptr @i32_typ, ptr %1292, align 8
  %1293 = getelementptr { ptr, ptr, ptr }, ptr %213, i32 0, i32 2
  store ptr @i32_typ, ptr %1293, align 8
  %1294 = call ptr @behavior_wrapper(ptr %1290, { ptr, ptr, ptr, i32 } %1282, ptr %213)
  call void %1294({ ptr, ptr, ptr, i32 } %1282, { ptr, ptr, ptr, i32 } %1282, ptr %212, { ptr } %1270, i32 %1271, i32 %1272) #17
  %1295 = getelementptr { ptr, i160 }, ptr %209, i32 0, i32 0
  %1296 = load ptr, ptr %1295, align 8
  %1297 = insertvalue { ptr, i160 } undef, ptr %1296, 0
  %1298 = getelementptr { ptr, i160 }, ptr %209, i32 0, i32 1
  %1299 = load i160, ptr %1298, align 4
  %1300 = insertvalue { ptr, i160 } %1297, i160 %1299, 1
  %1301 = getelementptr [1 x ptr], ptr %214, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1301, align 8
  %1302 = call ptr @llvm.invariant.start.p0(i64 1, ptr %214)
  %1303 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1304 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1305 = getelementptr { ptr }, ptr %215, i32 0, i32 0
  store ptr %1296, ptr %1305, align 8
  %1306 = call ptr @class_behavior_wrapper(ptr %1304, ptr %215)
  call void %1306(ptr %214, { ptr, i160 } %1300) #17
  %1307 = load i32, ptr %109, align 4
  store i32 %1307, ptr %216, align 4
  store ptr @i32_typ, ptr %217, align 8
  %1308 = load ptr, ptr %217, align 8
  %1309 = insertvalue { ptr, i160 } undef, ptr %1308, 0
  %1310 = load i160, ptr %216, align 4
  %1311 = insertvalue { ptr, i160 } %1309, i160 %1310, 1
  %1312 = getelementptr [1 x ptr], ptr %218, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1312, align 8
  %1313 = call ptr @llvm.invariant.start.p0(i64 1, ptr %218)
  %1314 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1315 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1316 = getelementptr { ptr }, ptr %219, i32 0, i32 0
  store ptr %1308, ptr %1316, align 8
  %1317 = call ptr @class_behavior_wrapper(ptr %1315, ptr %219)
  call void %1317(ptr %218, { ptr, i160 } %1311) #17
  store i32 9, ptr %220, align 4
  %1318 = load i32, ptr %220, align 4
  %1319 = sext i32 %1318 to i64
  %1320 = mul i64 %1319, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1321 = call ptr @bump_malloc(i64 %1320)
  store ptr %1321, ptr %221, align 8
  %1322 = getelementptr { ptr }, ptr %221, i32 0, i32 0
  %1323 = load ptr, ptr %1322, align 8
  store ptr %1323, ptr %222, align 8
  store i32 0, ptr %223, align 4
  %1324 = load ptr, ptr %222, align 8
  %1325 = load i32, ptr %223, align 4
  %1326 = sext i32 %1325 to i64
  %1327 = mul i64 ptrtoint (ptr getelementptr ([8 x i8], ptr null, i32 1) to i64), %1326
  %1328 = getelementptr i8, ptr %1324, i64 %1327
  %1329 = load <8 x i8>, ptr @bojip__Hits_, align 8
  store <8 x i8> %1329, ptr %1328, align 8
  store i32 8, ptr %224, align 4
  store i32 9, ptr %225, align 4
  store ptr @String, ptr %226, align 8
  %1330 = load ptr, ptr %226, align 8
  %1331 = getelementptr ptr, ptr %1330, i32 6
  %1332 = load ptr, ptr %1331, align 8
  %1333 = call { i64, i64 } @size_wrapper(ptr %1332, ptr %226)
  %1334 = extractvalue { i64, i64 } %1333, 0
  %1335 = call ptr @bump_malloc(i64 %1334)
  %1336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 1
  %1337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 3
  store ptr @String, ptr %227, align 8
  store ptr %1335, ptr %1336, align 8
  store i32 10, ptr %1337, align 4
  store i32 8, ptr %228, align 4
  store i32 9, ptr %229, align 4
  %1338 = load ptr, ptr %222, align 8
  %1339 = insertvalue { ptr } undef, ptr %1338, 0
  %1340 = load i32, ptr %228, align 4
  %1341 = load i32, ptr %229, align 4
  %1342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 0
  %1343 = load ptr, ptr %1342, align 8
  %1344 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1343, 0
  %1345 = load ptr, ptr %1336, align 8
  %1346 = insertvalue { ptr, ptr, ptr, i32 } %1344, ptr %1345, 1
  %1347 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 2
  %1348 = load ptr, ptr %1347, align 8
  %1349 = insertvalue { ptr, ptr, ptr, i32 } %1346, ptr %1348, 2
  %1350 = load i32, ptr %1337, align 4
  %1351 = insertvalue { ptr, ptr, ptr, i32 } %1349, i32 %1350, 3
  %1352 = getelementptr [3 x ptr], ptr %230, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1352, align 8
  %1353 = getelementptr [3 x ptr], ptr %230, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1353, align 8
  %1354 = getelementptr [3 x ptr], ptr %230, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1354, align 8
  %1355 = call ptr @llvm.invariant.start.p0(i64 9, ptr %230)
  %1356 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1343)
  %1357 = getelementptr ptr, ptr %1343, i32 %1350
  %1358 = getelementptr ptr, ptr %1357, i32 6
  %1359 = load ptr, ptr %1358, align 8
  %1360 = getelementptr { ptr, ptr, ptr }, ptr %231, i32 0, i32 0
  store ptr @buffer_typ, ptr %1360, align 8
  %1361 = getelementptr { ptr, ptr, ptr }, ptr %231, i32 0, i32 1
  store ptr @i32_typ, ptr %1361, align 8
  %1362 = getelementptr { ptr, ptr, ptr }, ptr %231, i32 0, i32 2
  store ptr @i32_typ, ptr %1362, align 8
  %1363 = call ptr @behavior_wrapper(ptr %1359, { ptr, ptr, ptr, i32 } %1351, ptr %231)
  call void %1363({ ptr, ptr, ptr, i32 } %1351, { ptr, ptr, ptr, i32 } %1351, ptr %230, { ptr } %1339, i32 %1340, i32 %1341) #17
  %1364 = getelementptr { ptr, i160 }, ptr %227, i32 0, i32 0
  %1365 = load ptr, ptr %1364, align 8
  %1366 = insertvalue { ptr, i160 } undef, ptr %1365, 0
  %1367 = getelementptr { ptr, i160 }, ptr %227, i32 0, i32 1
  %1368 = load i160, ptr %1367, align 4
  %1369 = insertvalue { ptr, i160 } %1366, i160 %1368, 1
  %1370 = getelementptr [1 x ptr], ptr %232, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1370, align 8
  %1371 = call ptr @llvm.invariant.start.p0(i64 1, ptr %232)
  %1372 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1373 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1374 = getelementptr { ptr }, ptr %233, i32 0, i32 0
  store ptr %1365, ptr %1374, align 8
  %1375 = call ptr @class_behavior_wrapper(ptr %1373, ptr %233)
  call void %1375(ptr %232, { ptr, i160 } %1369) #17
  %1376 = load i32, ptr %110, align 4
  store i32 %1376, ptr %234, align 4
  store ptr @i32_typ, ptr %235, align 8
  %1377 = load ptr, ptr %235, align 8
  %1378 = insertvalue { ptr, i160 } undef, ptr %1377, 0
  %1379 = load i160, ptr %234, align 4
  %1380 = insertvalue { ptr, i160 } %1378, i160 %1379, 1
  %1381 = getelementptr [1 x ptr], ptr %236, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1381, align 8
  %1382 = call ptr @llvm.invariant.start.p0(i64 1, ptr %236)
  %1383 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1384 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1385 = getelementptr { ptr }, ptr %237, i32 0, i32 0
  store ptr %1377, ptr %1385, align 8
  %1386 = call ptr @class_behavior_wrapper(ptr %1384, ptr %237)
  call void %1386(ptr %236, { ptr, i160 } %1380) #17
  store i32 2, ptr %238, align 4
  %1387 = load i32, ptr %238, align 4
  %1388 = sext i32 %1387 to i64
  %1389 = mul i64 %1388, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1390 = call ptr @bump_malloc(i64 %1389)
  store ptr %1390, ptr %239, align 8
  %1391 = getelementptr { ptr }, ptr %239, i32 0, i32 0
  %1392 = load ptr, ptr %1391, align 8
  store ptr %1392, ptr %240, align 8
  store i32 0, ptr %241, align 4
  %1393 = load ptr, ptr %240, align 8
  %1394 = load i32, ptr %241, align 4
  %1395 = sext i32 %1394 to i64
  %1396 = mul i64 ptrtoint (ptr getelementptr ([1 x i8], ptr null, i32 1) to i64), %1395
  %1397 = getelementptr i8, ptr %1393, i64 %1396
  %1398 = load <1 x i8>, ptr @bnvrg_, align 1
  store <1 x i8> %1398, ptr %1397, align 1
  store i32 1, ptr %242, align 4
  store i32 2, ptr %243, align 4
  store ptr @String, ptr %244, align 8
  %1399 = load ptr, ptr %244, align 8
  %1400 = getelementptr ptr, ptr %1399, i32 6
  %1401 = load ptr, ptr %1400, align 8
  %1402 = call { i64, i64 } @size_wrapper(ptr %1401, ptr %244)
  %1403 = extractvalue { i64, i64 } %1402, 0
  %1404 = call ptr @bump_malloc(i64 %1403)
  %1405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 1
  %1406 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 3
  store ptr @String, ptr %245, align 8
  store ptr %1404, ptr %1405, align 8
  store i32 10, ptr %1406, align 4
  store i32 1, ptr %246, align 4
  store i32 2, ptr %247, align 4
  %1407 = load ptr, ptr %240, align 8
  %1408 = insertvalue { ptr } undef, ptr %1407, 0
  %1409 = load i32, ptr %246, align 4
  %1410 = load i32, ptr %247, align 4
  %1411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 0
  %1412 = load ptr, ptr %1411, align 8
  %1413 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1412, 0
  %1414 = load ptr, ptr %1405, align 8
  %1415 = insertvalue { ptr, ptr, ptr, i32 } %1413, ptr %1414, 1
  %1416 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 2
  %1417 = load ptr, ptr %1416, align 8
  %1418 = insertvalue { ptr, ptr, ptr, i32 } %1415, ptr %1417, 2
  %1419 = load i32, ptr %1406, align 4
  %1420 = insertvalue { ptr, ptr, ptr, i32 } %1418, i32 %1419, 3
  %1421 = getelementptr [3 x ptr], ptr %248, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1421, align 8
  %1422 = getelementptr [3 x ptr], ptr %248, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1422, align 8
  %1423 = getelementptr [3 x ptr], ptr %248, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1423, align 8
  %1424 = call ptr @llvm.invariant.start.p0(i64 9, ptr %248)
  %1425 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1412)
  %1426 = getelementptr ptr, ptr %1412, i32 %1419
  %1427 = getelementptr ptr, ptr %1426, i32 6
  %1428 = load ptr, ptr %1427, align 8
  %1429 = getelementptr { ptr, ptr, ptr }, ptr %249, i32 0, i32 0
  store ptr @buffer_typ, ptr %1429, align 8
  %1430 = getelementptr { ptr, ptr, ptr }, ptr %249, i32 0, i32 1
  store ptr @i32_typ, ptr %1430, align 8
  %1431 = getelementptr { ptr, ptr, ptr }, ptr %249, i32 0, i32 2
  store ptr @i32_typ, ptr %1431, align 8
  %1432 = call ptr @behavior_wrapper(ptr %1428, { ptr, ptr, ptr, i32 } %1420, ptr %249)
  call void %1432({ ptr, ptr, ptr, i32 } %1420, { ptr, ptr, ptr, i32 } %1420, ptr %248, { ptr } %1408, i32 %1409, i32 %1410) #17
  %1433 = getelementptr { ptr, i160 }, ptr %245, i32 0, i32 0
  %1434 = load ptr, ptr %1433, align 8
  %1435 = insertvalue { ptr, i160 } undef, ptr %1434, 0
  %1436 = getelementptr { ptr, i160 }, ptr %245, i32 0, i32 1
  %1437 = load i160, ptr %1436, align 4
  %1438 = insertvalue { ptr, i160 } %1435, i160 %1437, 1
  %1439 = getelementptr [1 x ptr], ptr %250, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1439, align 8
  %1440 = call ptr @llvm.invariant.start.p0(i64 1, ptr %250)
  %1441 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1442 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1443 = getelementptr { ptr }, ptr %251, i32 0, i32 0
  store ptr %1434, ptr %1443, align 8
  %1444 = call ptr @class_behavior_wrapper(ptr %1442, ptr %251)
  call void %1444(ptr %250, { ptr, i160 } %1438) #17
  ret void
}

define void @benchmark_remove_random(i32 %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca i32, align 4
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i1, align 1
  %16 = alloca i1, align 1
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca [2 x ptr], align 8
  %24 = alloca { ptr, ptr }, align 8
  %25 = alloca i160, align 8
  %26 = alloca ptr, align 8
  %27 = alloca [2 x ptr], align 8
  %28 = alloca { ptr, ptr }, align 8
  %29 = alloca i1, align 1
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = alloca [2 x ptr], align 8
  %35 = alloca { ptr, ptr }, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i1, align 1
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca [1 x ptr], align 8
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca [3 x ptr], align 8
  %52 = alloca { ptr, ptr, ptr }, align 8
  %53 = alloca [1 x ptr], align 8
  %54 = alloca { ptr }, align 8
  %55 = alloca i160, align 8
  %56 = alloca ptr, align 8
  %57 = alloca [1 x ptr], align 8
  %58 = alloca { ptr }, align 8
  %59 = alloca i32, align 4
  %60 = alloca ptr, align 8
  %61 = alloca ptr, align 8
  %62 = alloca i32, align 4
  %63 = alloca i32, align 4
  %64 = alloca i32, align 4
  %65 = alloca [1 x ptr], align 8
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = alloca i32, align 4
  %68 = alloca i32, align 4
  %69 = alloca [3 x ptr], align 8
  %70 = alloca { ptr, ptr, ptr }, align 8
  %71 = alloca [1 x ptr], align 8
  %72 = alloca { ptr }, align 8
  %73 = alloca i64, align 8
  %74 = alloca i32, align 4
  %75 = alloca i1, align 1
  %76 = alloca i32, align 4
  %77 = alloca i1, align 1
  %78 = alloca [1 x ptr], align 8
  %79 = alloca { ptr }, align 8
  %80 = alloca { ptr, i160 }, align 8
  %81 = alloca i32, align 4
  %82 = alloca i160, align 8
  %83 = alloca ptr, align 8
  %84 = alloca [1 x ptr], align 8
  %85 = alloca { ptr }, align 8
  %86 = alloca { ptr, i160 }, align 8
  %87 = alloca i32, align 4
  %88 = alloca ptr, align 8
  %89 = alloca i1, align 1
  %90 = alloca i32, align 4
  %91 = alloca i32, align 4
  %92 = alloca i32, align 4
  %93 = alloca i1, align 1
  %94 = alloca i1, align 1
  %95 = alloca i32, align 4
  %96 = alloca ptr, align 8
  %97 = alloca ptr, align 8
  %98 = alloca i32, align 4
  %99 = alloca i32, align 4
  %100 = alloca i32, align 4
  %101 = alloca [1 x ptr], align 8
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = alloca i32, align 4
  %104 = alloca i32, align 4
  %105 = alloca [3 x ptr], align 8
  %106 = alloca { ptr, ptr, ptr }, align 8
  %107 = alloca [1 x ptr], align 8
  %108 = alloca { ptr }, align 8
  %109 = alloca i160, align 8
  %110 = alloca ptr, align 8
  %111 = alloca [1 x ptr], align 8
  %112 = alloca { ptr }, align 8
  %113 = alloca i32, align 4
  %114 = alloca i32, align 4
  %115 = alloca i32, align 4
  %116 = alloca ptr, align 8
  %117 = alloca i1, align 1
  %118 = alloca i32, align 4
  %119 = alloca ptr, align 8
  %120 = alloca ptr, align 8
  %121 = alloca i32, align 4
  %122 = alloca i32, align 4
  %123 = alloca i32, align 4
  %124 = alloca [1 x ptr], align 8
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  %126 = alloca i32, align 4
  %127 = alloca i32, align 4
  %128 = alloca [3 x ptr], align 8
  %129 = alloca { ptr, ptr, ptr }, align 8
  %130 = alloca [1 x ptr], align 8
  %131 = alloca { ptr }, align 8
  %132 = alloca i160, align 8
  %133 = alloca ptr, align 8
  %134 = alloca [1 x ptr], align 8
  %135 = alloca { ptr }, align 8
  %136 = alloca i32, align 4
  %137 = alloca i32, align 4
  %138 = alloca i64, align 8
  %139 = alloca i1, align 1
  %140 = alloca i1, align 1
  %141 = alloca [0 x ptr], align 8
  %142 = alloca {}, align 8
  %143 = alloca i32, align 4
  %144 = alloca i32, align 4
  %145 = alloca i1, align 1
  %146 = alloca i1, align 1
  %147 = alloca i32, align 4
  %148 = alloca i1, align 1
  %149 = alloca i32, align 4
  %150 = alloca [1 x ptr], align 8
  %151 = alloca { ptr }, align 8
  %152 = alloca { ptr, i160 }, align 8
  %153 = alloca i32, align 4
  %154 = alloca i160, align 8
  %155 = alloca ptr, align 8
  %156 = alloca [1 x ptr], align 8
  %157 = alloca { ptr }, align 8
  %158 = alloca { ptr, i160 }, align 8
  %159 = alloca i32, align 4
  %160 = alloca ptr, align 8
  %161 = alloca i1, align 1
  %162 = alloca i32, align 4
  %163 = alloca i1, align 1
  %164 = alloca i32, align 4
  %165 = alloca ptr, align 8
  %166 = alloca i32, align 4
  %167 = alloca ptr, align 8
  %168 = alloca ptr, align 8
  %169 = alloca i32, align 4
  %170 = alloca i32, align 4
  %171 = alloca i32, align 4
  %172 = alloca [1 x ptr], align 8
  %173 = alloca i32, align 4
  %174 = alloca ptr, align 8
  %175 = alloca ptr, align 8
  %176 = alloca ptr, align 8
  %177 = alloca i32, align 4
  %178 = alloca i32, align 4
  %179 = alloca [3 x ptr], align 8
  %180 = alloca { ptr, ptr, ptr }, align 8
  %181 = alloca i64, align 8
  %182 = alloca i32, align 4
  %183 = alloca ptr, align 8
  %184 = alloca ptr, align 8
  %185 = alloca i32, align 4
  %186 = alloca i32, align 4
  %187 = alloca i32, align 4
  %188 = alloca [1 x ptr], align 8
  %189 = alloca { ptr, ptr, ptr, i32 }, align 8
  %190 = alloca i32, align 4
  %191 = alloca i32, align 4
  %192 = alloca [3 x ptr], align 8
  %193 = alloca { ptr, ptr, ptr }, align 8
  %194 = alloca [1 x ptr], align 8
  %195 = alloca { ptr }, align 8
  %196 = alloca i32, align 4
  %197 = alloca ptr, align 8
  %198 = alloca ptr, align 8
  %199 = alloca i32, align 4
  %200 = alloca i32, align 4
  %201 = alloca i32, align 4
  %202 = alloca [1 x ptr], align 8
  %203 = alloca { ptr, ptr, ptr, i32 }, align 8
  %204 = alloca i32, align 4
  %205 = alloca i32, align 4
  %206 = alloca [3 x ptr], align 8
  %207 = alloca { ptr, ptr, ptr }, align 8
  %208 = alloca [1 x ptr], align 8
  %209 = alloca { ptr }, align 8
  %210 = alloca i32, align 4
  %211 = alloca ptr, align 8
  %212 = alloca ptr, align 8
  %213 = alloca i32, align 4
  %214 = alloca i32, align 4
  %215 = alloca i32, align 4
  %216 = alloca [1 x ptr], align 8
  %217 = alloca { ptr, ptr, ptr, i32 }, align 8
  %218 = alloca i32, align 4
  %219 = alloca i32, align 4
  %220 = alloca [3 x ptr], align 8
  %221 = alloca { ptr, ptr, ptr }, align 8
  %222 = alloca [1 x ptr], align 8
  %223 = alloca { ptr }, align 8
  %224 = alloca i32, align 4
  %225 = alloca ptr, align 8
  %226 = alloca ptr, align 8
  %227 = alloca i32, align 4
  %228 = alloca i32, align 4
  %229 = alloca i32, align 4
  %230 = alloca [1 x ptr], align 8
  %231 = alloca { ptr, ptr, ptr, i32 }, align 8
  %232 = alloca i32, align 4
  %233 = alloca i32, align 4
  %234 = alloca [3 x ptr], align 8
  %235 = alloca { ptr, ptr, ptr }, align 8
  %236 = alloca [1 x ptr], align 8
  %237 = alloca { ptr }, align 8
  %238 = alloca i160, align 8
  %239 = alloca ptr, align 8
  %240 = alloca [1 x ptr], align 8
  %241 = alloca { ptr }, align 8
  %242 = alloca i32, align 4
  %243 = alloca ptr, align 8
  %244 = alloca ptr, align 8
  %245 = alloca i32, align 4
  %246 = alloca i32, align 4
  %247 = alloca i32, align 4
  %248 = alloca [1 x ptr], align 8
  %249 = alloca { ptr, ptr, ptr, i32 }, align 8
  %250 = alloca i32, align 4
  %251 = alloca i32, align 4
  %252 = alloca [3 x ptr], align 8
  %253 = alloca { ptr, ptr, ptr }, align 8
  %254 = alloca [1 x ptr], align 8
  %255 = alloca { ptr }, align 8
  %256 = alloca i32, align 4
  %.reg2mem = alloca i1, align 1
  %.reg2mem13 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %256, align 4
  %257 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %257, align 8
  %258 = alloca ptr, align 8
  store ptr @i32_eq, ptr %258, align 8
  %259 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %259, align 8
  %260 = getelementptr ptr, ptr %259, i32 1
  store ptr @_parameterization_Ptri32, ptr %260, align 8
  %261 = getelementptr ptr, ptr %259, i32 2
  store ptr @_parameterization_Ptri32, ptr %261, align 8
  %262 = getelementptr ptr, ptr %259, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %262, align 8
  %263 = load ptr, ptr %259, align 8
  %264 = getelementptr ptr, ptr %263, i32 6
  %265 = load ptr, ptr %264, align 8
  %266 = call { i64, i64 } @size_wrapper(ptr %265, ptr %259)
  %267 = extractvalue { i64, i64 } %266, 0
  %268 = call ptr @bump_malloc(i64 %267)
  store ptr @_parameterization_Ptri32, ptr %268, align 8
  %269 = getelementptr ptr, ptr %268, i32 1
  store ptr @_parameterization_Ptri32, ptr %269, align 8
  %270 = getelementptr ptr, ptr %268, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %270, align 8
  %271 = call ptr @llvm.invariant.start.p0(i64 24, ptr %268)
  %272 = alloca i32, align 4
  %273 = alloca ptr, align 8
  %274 = alloca ptr, align 8
  %275 = alloca ptr, align 8
  store ptr @CuckooMap, ptr %275, align 8
  store ptr %268, ptr %274, align 8
  store i32 10, ptr %272, align 4
  %276 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %276, align 8
  %277 = alloca ptr, align 8
  store ptr @i32_eq, ptr %277, align 8
  %278 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %278)
  %279 = load ptr, ptr %276, align 8
  call void @llvm.init.trampoline(ptr %278, ptr @pycmovwgqt, ptr %279)
  %280 = alloca ptr, align 8
  %281 = call ptr @adjust_trampoline(ptr %278)
  store ptr %281, ptr %280, align 8
  %282 = call ptr @llvm.invariant.start.p0(i64 24, ptr %278)
  %283 = getelementptr { ptr }, ptr %280, i32 0, i32 0
  %284 = load ptr, ptr %283, align 8
  %285 = insertvalue { ptr } undef, ptr %284, 0
  %286 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %286)
  %287 = load ptr, ptr %277, align 8
  call void @llvm.init.trampoline(ptr %286, ptr @vzdjjwynyr, ptr %287)
  %288 = alloca ptr, align 8
  %289 = call ptr @adjust_trampoline(ptr %286)
  store ptr %289, ptr %288, align 8
  %290 = call ptr @llvm.invariant.start.p0(i64 24, ptr %286)
  %291 = getelementptr { ptr }, ptr %288, i32 0, i32 0
  %292 = load ptr, ptr %291, align 8
  %293 = insertvalue { ptr } undef, ptr %292, 0
  %294 = load ptr, ptr %275, align 8
  %295 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %294, 0
  %296 = load ptr, ptr %274, align 8
  %297 = insertvalue { ptr, ptr, ptr, i32 } %295, ptr %296, 1
  %298 = load ptr, ptr %273, align 8
  %299 = insertvalue { ptr, ptr, ptr, i32 } %297, ptr %298, 2
  %300 = load i32, ptr %272, align 4
  %301 = insertvalue { ptr, ptr, ptr, i32 } %299, i32 %300, 3
  %302 = alloca [2 x ptr], align 8
  %303 = getelementptr [2 x ptr], ptr %302, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %303, align 8
  %304 = getelementptr [2 x ptr], ptr %302, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %304, align 8
  %305 = call ptr @llvm.invariant.start.p0(i64 4, ptr %302)
  %306 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %294)
  %307 = getelementptr ptr, ptr %294, i32 %300
  %308 = getelementptr ptr, ptr %307, i32 10
  %309 = load ptr, ptr %308, align 8
  %310 = alloca { ptr, ptr }, align 8
  %311 = getelementptr { ptr, ptr }, ptr %310, i32 0, i32 0
  store ptr @function_typ, ptr %311, align 8
  %312 = getelementptr { ptr, ptr }, ptr %310, i32 0, i32 1
  store ptr @function_typ, ptr %312, align 8
  %313 = call ptr @behavior_wrapper(ptr %309, { ptr, ptr, ptr, i32 } %301, ptr %310)
  call void %313({ ptr, ptr, ptr, i32 } %301, { ptr, ptr, ptr, i32 } %301, ptr %302, { ptr } %285, { ptr } %293) #17
  %314 = alloca { ptr, ptr, ptr, i32 }, align 8
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 0
  %316 = load ptr, ptr %275, align 8
  store ptr %316, ptr %315, align 8
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 1
  %318 = load ptr, ptr %274, align 8
  store ptr %318, ptr %317, align 8
  %319 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 2
  %320 = load ptr, ptr %273, align 8
  store ptr %320, ptr %319, align 8
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 3
  %322 = load i32, ptr %272, align 4
  store i32 %322, ptr %321, align 4
  call void @set_offset(ptr %314, ptr @CuckooMap)
  %323 = alloca i32, align 4
  %324 = alloca ptr, align 8
  %325 = alloca ptr, align 8
  %326 = alloca ptr, align 8
  %327 = load ptr, ptr %315, align 8
  store ptr %327, ptr %326, align 8
  %328 = load ptr, ptr %317, align 8
  store ptr %328, ptr %325, align 8
  %329 = load ptr, ptr %319, align 8
  store ptr %329, ptr %324, align 8
  %330 = load i32, ptr %321, align 4
  store i32 %330, ptr %323, align 4
  %331 = alloca i32, align 4
  store i32 101112, ptr %331, align 4
  %332 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %332, align 8
  %333 = load ptr, ptr %332, align 8
  %334 = getelementptr ptr, ptr %333, i32 6
  %335 = load ptr, ptr %334, align 8
  %336 = call { i64, i64 } @size_wrapper(ptr %335, ptr %332)
  %337 = extractvalue { i64, i64 } %336, 0
  %338 = call ptr @bump_malloc(i64 %337)
  %339 = alloca i32, align 4
  %340 = alloca ptr, align 8
  %341 = alloca ptr, align 8
  %342 = alloca ptr, align 8
  store ptr @PRNG, ptr %342, align 8
  store ptr %338, ptr %341, align 8
  store i32 10, ptr %339, align 4
  %343 = alloca i32, align 4
  store i32 101112, ptr %343, align 4
  %344 = load i32, ptr %343, align 4
  %345 = load ptr, ptr %342, align 8
  %346 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %345, 0
  %347 = load ptr, ptr %341, align 8
  %348 = insertvalue { ptr, ptr, ptr, i32 } %346, ptr %347, 1
  %349 = load ptr, ptr %340, align 8
  %350 = insertvalue { ptr, ptr, ptr, i32 } %348, ptr %349, 2
  %351 = load i32, ptr %339, align 4
  %352 = insertvalue { ptr, ptr, ptr, i32 } %350, i32 %351, 3
  %353 = alloca [1 x ptr], align 8
  %354 = getelementptr [1 x ptr], ptr %353, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %354, align 8
  %355 = call ptr @llvm.invariant.start.p0(i64 1, ptr %353)
  %356 = call ptr @llvm.invariant.start.p0(i64 40, ptr %345)
  %357 = getelementptr ptr, ptr %345, i32 %351
  %358 = getelementptr ptr, ptr %357, i32 1
  %359 = load ptr, ptr %358, align 8
  %360 = alloca { ptr }, align 8
  %361 = getelementptr { ptr }, ptr %360, i32 0, i32 0
  store ptr @i32_typ, ptr %361, align 8
  %362 = call ptr @behavior_wrapper(ptr %359, { ptr, ptr, ptr, i32 } %352, ptr %360)
  call void %362({ ptr, ptr, ptr, i32 } %352, { ptr, ptr, ptr, i32 } %352, ptr %353, i32 %344) #17
  %363 = alloca { ptr, ptr, ptr, i32 }, align 8
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %363, i32 0, i32 0
  %365 = load ptr, ptr %342, align 8
  store ptr %365, ptr %364, align 8
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %363, i32 0, i32 1
  %367 = load ptr, ptr %341, align 8
  store ptr %367, ptr %366, align 8
  %368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %363, i32 0, i32 2
  %369 = load ptr, ptr %340, align 8
  store ptr %369, ptr %368, align 8
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %363, i32 0, i32 3
  %371 = load i32, ptr %339, align 4
  store i32 %371, ptr %370, align 4
  call void @set_offset(ptr %363, ptr @PRNG)
  %372 = alloca i32, align 4
  %373 = alloca ptr, align 8
  %374 = alloca ptr, align 8
  %375 = alloca ptr, align 8
  %376 = load ptr, ptr %364, align 8
  store ptr %376, ptr %375, align 8
  %377 = load ptr, ptr %366, align 8
  store ptr %377, ptr %374, align 8
  %378 = load ptr, ptr %368, align 8
  store ptr %378, ptr %373, align 8
  %379 = load i32, ptr %370, align 4
  store i32 %379, ptr %372, align 4
  %380 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %380, align 8
  %381 = getelementptr ptr, ptr %380, i32 1
  store ptr @_parameterization_Ptri32, ptr %381, align 8
  %382 = load ptr, ptr %380, align 8
  %383 = getelementptr ptr, ptr %382, i32 6
  %384 = load ptr, ptr %383, align 8
  %385 = call { i64, i64 } @size_wrapper(ptr %384, ptr %380)
  %386 = extractvalue { i64, i64 } %385, 0
  %387 = call ptr @bump_malloc(i64 %386)
  store ptr @_parameterization_Ptri32, ptr %387, align 8
  %388 = call ptr @llvm.invariant.start.p0(i64 8, ptr %387)
  %389 = alloca i32, align 4
  %390 = alloca ptr, align 8
  %391 = alloca ptr, align 8
  %392 = alloca ptr, align 8
  store ptr @Array, ptr %392, align 8
  store ptr %387, ptr %391, align 8
  store i32 10, ptr %389, align 4
  %393 = load i32, ptr %256, align 4
  %394 = load ptr, ptr %392, align 8
  %395 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %394, 0
  %396 = load ptr, ptr %391, align 8
  %397 = insertvalue { ptr, ptr, ptr, i32 } %395, ptr %396, 1
  %398 = load ptr, ptr %390, align 8
  %399 = insertvalue { ptr, ptr, ptr, i32 } %397, ptr %398, 2
  %400 = load i32, ptr %389, align 4
  %401 = insertvalue { ptr, ptr, ptr, i32 } %399, i32 %400, 3
  %402 = alloca [1 x ptr], align 8
  %403 = getelementptr [1 x ptr], ptr %402, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %403, align 8
  %404 = call ptr @llvm.invariant.start.p0(i64 1, ptr %402)
  %405 = call ptr @llvm.invariant.start.p0(i64 664, ptr %394)
  %406 = getelementptr ptr, ptr %394, i32 %400
  %407 = getelementptr ptr, ptr %406, i32 6
  %408 = load ptr, ptr %407, align 8
  %409 = alloca { ptr }, align 8
  %410 = getelementptr { ptr }, ptr %409, i32 0, i32 0
  store ptr @i32_typ, ptr %410, align 8
  %411 = call ptr @behavior_wrapper(ptr %408, { ptr, ptr, ptr, i32 } %401, ptr %409)
  call void %411({ ptr, ptr, ptr, i32 } %401, { ptr, ptr, ptr, i32 } %401, ptr %402, i32 %393) #17
  %412 = alloca { ptr, ptr, ptr, i32 }, align 8
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 0
  %414 = load ptr, ptr %392, align 8
  store ptr %414, ptr %413, align 8
  %415 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 1
  %416 = load ptr, ptr %391, align 8
  store ptr %416, ptr %415, align 8
  %417 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 2
  %418 = load ptr, ptr %390, align 8
  store ptr %418, ptr %417, align 8
  %419 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 3
  %420 = load i32, ptr %389, align 4
  store i32 %420, ptr %419, align 4
  call void @set_offset(ptr %412, ptr @Array)
  %421 = alloca i32, align 4
  %422 = alloca ptr, align 8
  %423 = alloca ptr, align 8
  %424 = alloca ptr, align 8
  %425 = load ptr, ptr %413, align 8
  store ptr %425, ptr %424, align 8
  %426 = load ptr, ptr %415, align 8
  store ptr %426, ptr %423, align 8
  %427 = load ptr, ptr %417, align 8
  store ptr %427, ptr %422, align 8
  %428 = load i32, ptr %419, align 4
  store i32 %428, ptr %421, align 4
  %429 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %429, align 8
  %430 = alloca ptr, align 8
  store ptr @i32_eq, ptr %430, align 8
  %431 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %431, align 8
  %432 = getelementptr ptr, ptr %431, i32 1
  store ptr @_parameterization_Ptri32, ptr %432, align 8
  %433 = getelementptr ptr, ptr %431, i32 2
  store ptr @_parameterization_Ptri1, ptr %433, align 8
  %434 = getelementptr ptr, ptr %431, i32 3
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %434, align 8
  %435 = load ptr, ptr %431, align 8
  %436 = getelementptr ptr, ptr %435, i32 6
  %437 = load ptr, ptr %436, align 8
  %438 = call { i64, i64 } @size_wrapper(ptr %437, ptr %431)
  %439 = extractvalue { i64, i64 } %438, 0
  %440 = call ptr @bump_malloc(i64 %439)
  store ptr @_parameterization_Ptri32, ptr %440, align 8
  %441 = getelementptr ptr, ptr %440, i32 1
  store ptr @_parameterization_Ptri1, ptr %441, align 8
  %442 = getelementptr ptr, ptr %440, i32 2
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %442, align 8
  %443 = call ptr @llvm.invariant.start.p0(i64 24, ptr %440)
  %444 = alloca i32, align 4
  %445 = alloca ptr, align 8
  %446 = alloca ptr, align 8
  %447 = alloca ptr, align 8
  store ptr @CuckooMap, ptr %447, align 8
  store ptr %440, ptr %446, align 8
  store i32 10, ptr %444, align 4
  %448 = alloca ptr, align 8
  store ptr @i32_hasher, ptr %448, align 8
  %449 = alloca ptr, align 8
  store ptr @i32_eq, ptr %449, align 8
  %450 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %450)
  %451 = load ptr, ptr %448, align 8
  call void @llvm.init.trampoline(ptr %450, ptr @jytlqghthm, ptr %451)
  %452 = alloca ptr, align 8
  %453 = call ptr @adjust_trampoline(ptr %450)
  store ptr %453, ptr %452, align 8
  %454 = call ptr @llvm.invariant.start.p0(i64 24, ptr %450)
  %455 = getelementptr { ptr }, ptr %452, i32 0, i32 0
  %456 = load ptr, ptr %455, align 8
  %457 = insertvalue { ptr } undef, ptr %456, 0
  %458 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %458)
  %459 = load ptr, ptr %449, align 8
  call void @llvm.init.trampoline(ptr %458, ptr @wgpehabsqq, ptr %459)
  %460 = alloca ptr, align 8
  %461 = call ptr @adjust_trampoline(ptr %458)
  store ptr %461, ptr %460, align 8
  %462 = call ptr @llvm.invariant.start.p0(i64 24, ptr %458)
  %463 = getelementptr { ptr }, ptr %460, i32 0, i32 0
  %464 = load ptr, ptr %463, align 8
  %465 = insertvalue { ptr } undef, ptr %464, 0
  %466 = load ptr, ptr %447, align 8
  %467 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %466, 0
  %468 = load ptr, ptr %446, align 8
  %469 = insertvalue { ptr, ptr, ptr, i32 } %467, ptr %468, 1
  %470 = load ptr, ptr %445, align 8
  %471 = insertvalue { ptr, ptr, ptr, i32 } %469, ptr %470, 2
  %472 = load i32, ptr %444, align 4
  %473 = insertvalue { ptr, ptr, ptr, i32 } %471, i32 %472, 3
  %474 = alloca [2 x ptr], align 8
  %475 = getelementptr [2 x ptr], ptr %474, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %475, align 8
  %476 = getelementptr [2 x ptr], ptr %474, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %476, align 8
  %477 = call ptr @llvm.invariant.start.p0(i64 4, ptr %474)
  %478 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %466)
  %479 = getelementptr ptr, ptr %466, i32 %472
  %480 = getelementptr ptr, ptr %479, i32 10
  %481 = load ptr, ptr %480, align 8
  %482 = alloca { ptr, ptr }, align 8
  %483 = getelementptr { ptr, ptr }, ptr %482, i32 0, i32 0
  store ptr @function_typ, ptr %483, align 8
  %484 = getelementptr { ptr, ptr }, ptr %482, i32 0, i32 1
  store ptr @function_typ, ptr %484, align 8
  %485 = call ptr @behavior_wrapper(ptr %481, { ptr, ptr, ptr, i32 } %473, ptr %482)
  call void %485({ ptr, ptr, ptr, i32 } %473, { ptr, ptr, ptr, i32 } %473, ptr %474, { ptr } %457, { ptr } %465) #17
  %486 = alloca { ptr, ptr, ptr, i32 }, align 8
  %487 = getelementptr { ptr, ptr, ptr, i32 }, ptr %486, i32 0, i32 0
  %488 = load ptr, ptr %447, align 8
  store ptr %488, ptr %487, align 8
  %489 = getelementptr { ptr, ptr, ptr, i32 }, ptr %486, i32 0, i32 1
  %490 = load ptr, ptr %446, align 8
  store ptr %490, ptr %489, align 8
  %491 = getelementptr { ptr, ptr, ptr, i32 }, ptr %486, i32 0, i32 2
  %492 = load ptr, ptr %445, align 8
  store ptr %492, ptr %491, align 8
  %493 = getelementptr { ptr, ptr, ptr, i32 }, ptr %486, i32 0, i32 3
  %494 = load i32, ptr %444, align 4
  store i32 %494, ptr %493, align 4
  call void @set_offset(ptr %486, ptr @CuckooMap)
  %495 = alloca i32, align 4
  %496 = alloca ptr, align 8
  %497 = alloca ptr, align 8
  %498 = alloca ptr, align 8
  %499 = load ptr, ptr %487, align 8
  store ptr %499, ptr %498, align 8
  %500 = load ptr, ptr %489, align 8
  store ptr %500, ptr %497, align 8
  %501 = load ptr, ptr %491, align 8
  store ptr %501, ptr %496, align 8
  %502 = load i32, ptr %493, align 4
  store i32 %502, ptr %495, align 4
  %503 = alloca i32, align 4
  store i32 0, ptr %503, align 4
  %504 = alloca i32, align 4
  store i32 0, ptr %504, align 4
  %505 = alloca i32, align 4
  store i32 10, ptr %505, align 4
  %506 = load i32, ptr %256, align 4
  %507 = load i32, ptr %505, align 4
  %508 = mul i32 %506, %507
  %509 = alloca i32, align 4
  store i32 %508, ptr %509, align 4
  br label %510

510:                                              ; preds = %._crit_edge3, %1
  %511 = load i32, ptr %503, align 4
  %512 = load i32, ptr %256, align 4
  %513 = icmp slt i32 %511, %512
  store i1 %513, ptr %2, align 1
  %514 = load i1, ptr %2, align 1
  store i1 %514, ptr %3, align 1
  br i1 %514, label %515, label %._crit_edge

._crit_edge:                                      ; preds = %510
  br label %520

515:                                              ; preds = %510
  %516 = load i32, ptr %504, align 4
  %517 = load i32, ptr %509, align 4
  %518 = icmp slt i32 %516, %517
  store i1 %518, ptr %4, align 1
  %519 = load i1, ptr %4, align 1
  store i1 %519, ptr %3, align 1
  br label %520

520:                                              ; preds = %._crit_edge, %515
  %521 = load i1, ptr %3, align 1
  store i1 %521, ptr %5, align 1
  %522 = load i1, ptr %5, align 1
  store i1 %522, ptr %.reg2mem13, align 1
  %.reload15 = load i1, ptr %.reg2mem13, align 1
  br i1 %.reload15, label %523, label %._crit_edge1

._crit_edge1:                                     ; preds = %520
  br label %664

523:                                              ; preds = %520
  %524 = load ptr, ptr %375, align 8
  %525 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %524, 0
  %526 = load ptr, ptr %374, align 8
  %527 = insertvalue { ptr, ptr, ptr, i32 } %525, ptr %526, 1
  %528 = load ptr, ptr %373, align 8
  %529 = insertvalue { ptr, ptr, ptr, i32 } %527, ptr %528, 2
  %530 = load i32, ptr %372, align 4
  %531 = insertvalue { ptr, ptr, ptr, i32 } %529, i32 %530, 3
  %532 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %533 = call ptr @llvm.invariant.start.p0(i64 40, ptr %524)
  %534 = getelementptr ptr, ptr %524, i32 %530
  %535 = getelementptr ptr, ptr %534, i32 2
  %536 = load ptr, ptr %535, align 8
  %537 = call ptr @behavior_wrapper(ptr %536, { ptr, ptr, ptr, i32 } %531, ptr %7)
  %538 = call i32 %537({ ptr, ptr, ptr, i32 } %531, { ptr, ptr, ptr, i32 } %531, ptr %6) #17
  store i32 %538, ptr %8, align 4
  store ptr @i32_typ, ptr %10, align 8
  %539 = load i32, ptr %8, align 4
  store i32 %539, ptr %9, align 4
  %540 = load ptr, ptr %10, align 8
  %541 = insertvalue { ptr, i160 } undef, ptr %540, 0
  %542 = load i160, ptr %9, align 4
  %543 = insertvalue { ptr, i160 } %541, i160 %542, 1
  %544 = load ptr, ptr %498, align 8
  %545 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %544, 0
  %546 = load ptr, ptr %497, align 8
  %547 = insertvalue { ptr, ptr, ptr, i32 } %545, ptr %546, 1
  %548 = load ptr, ptr %496, align 8
  %549 = insertvalue { ptr, ptr, ptr, i32 } %547, ptr %548, 2
  %550 = load i32, ptr %495, align 4
  %551 = insertvalue { ptr, ptr, ptr, i32 } %549, i32 %550, 3
  %552 = getelementptr [1 x ptr], ptr %11, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %552, align 8
  %553 = call ptr @llvm.invariant.start.p0(i64 1, ptr %11)
  %554 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %544)
  %555 = getelementptr ptr, ptr %544, i32 %550
  %556 = getelementptr ptr, ptr %555, i32 23
  %557 = load ptr, ptr %556, align 8
  %558 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  store ptr %540, ptr %558, align 8
  %559 = call ptr @behavior_wrapper(ptr %557, { ptr, ptr, ptr, i32 } %551, ptr %12)
  %560 = call { ptr, i160 } %559({ ptr, ptr, ptr, i32 } %551, { ptr, ptr, ptr, i32 } %551, ptr %11, { ptr, i160 } %543) #17
  store { ptr, i160 } %560, ptr %13, align 8
  %561 = getelementptr { ptr, i1 }, ptr %13, i32 0, i32 0
  %562 = load ptr, ptr %561, align 8
  store ptr %562, ptr %14, align 8
  %563 = getelementptr { ptr, i1 }, ptr %13, i32 0, i32 1
  %564 = load i1, ptr %563, align 1
  store i1 %564, ptr %15, align 1
  %565 = load ptr, ptr %14, align 8
  %566 = ptrtoint ptr %565 to i64
  %567 = icmp eq i64 %566, ptrtoint (ptr @nil_typ to i64)
  %568 = icmp eq i64 %566, 0
  %569 = or i1 %567, %568
  store i1 %569, ptr %16, align 1
  %570 = load i1, ptr %16, align 1
  br i1 %570, label %571, label %._crit_edge2

._crit_edge2:                                     ; preds = %523
  br label %659

571:                                              ; preds = %523
  store i32 1, ptr %17, align 4
  %572 = load i32, ptr %8, align 4
  %573 = load i32, ptr %17, align 4
  %574 = add i32 %572, %573
  store i32 %574, ptr %18, align 4
  store ptr @i32_typ, ptr %20, align 8
  %575 = load i32, ptr %8, align 4
  store i32 %575, ptr %19, align 4
  %576 = load ptr, ptr %20, align 8
  %577 = insertvalue { ptr, i160 } undef, ptr %576, 0
  %578 = load i160, ptr %19, align 4
  %579 = insertvalue { ptr, i160 } %577, i160 %578, 1
  store ptr @i32_typ, ptr %22, align 8
  %580 = load i32, ptr %18, align 4
  store i32 %580, ptr %21, align 4
  %581 = load ptr, ptr %22, align 8
  %582 = insertvalue { ptr, i160 } undef, ptr %581, 0
  %583 = load i160, ptr %21, align 4
  %584 = insertvalue { ptr, i160 } %582, i160 %583, 1
  %585 = load ptr, ptr %326, align 8
  %586 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %585, 0
  %587 = load ptr, ptr %325, align 8
  %588 = insertvalue { ptr, ptr, ptr, i32 } %586, ptr %587, 1
  %589 = load ptr, ptr %324, align 8
  %590 = insertvalue { ptr, ptr, ptr, i32 } %588, ptr %589, 2
  %591 = load i32, ptr %323, align 4
  %592 = insertvalue { ptr, ptr, ptr, i32 } %590, i32 %591, 3
  %593 = getelementptr [2 x ptr], ptr %23, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %593, align 8
  %594 = getelementptr [2 x ptr], ptr %23, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %594, align 8
  %595 = call ptr @llvm.invariant.start.p0(i64 4, ptr %23)
  %596 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %585)
  %597 = getelementptr ptr, ptr %585, i32 %591
  %598 = getelementptr ptr, ptr %597, i32 21
  %599 = load ptr, ptr %598, align 8
  %600 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  store ptr %576, ptr %600, align 8
  %601 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 1
  store ptr %581, ptr %601, align 8
  %602 = call ptr @behavior_wrapper(ptr %599, { ptr, ptr, ptr, i32 } %592, ptr %24)
  call void %602({ ptr, ptr, ptr, i32 } %592, { ptr, ptr, ptr, i32 } %592, ptr %23, { ptr, i160 } %579, { ptr, i160 } %584) #17
  %603 = load i32, ptr %503, align 4
  store ptr @i32_typ, ptr %26, align 8
  %604 = load i32, ptr %8, align 4
  store i32 %604, ptr %25, align 4
  %605 = load ptr, ptr %26, align 8
  %606 = insertvalue { ptr, i160 } undef, ptr %605, 0
  %607 = load i160, ptr %25, align 4
  %608 = insertvalue { ptr, i160 } %606, i160 %607, 1
  %609 = load ptr, ptr %424, align 8
  %610 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %609, 0
  %611 = load ptr, ptr %423, align 8
  %612 = insertvalue { ptr, ptr, ptr, i32 } %610, ptr %611, 1
  %613 = load ptr, ptr %422, align 8
  %614 = insertvalue { ptr, ptr, ptr, i32 } %612, ptr %613, 2
  %615 = load i32, ptr %421, align 4
  %616 = insertvalue { ptr, ptr, ptr, i32 } %614, i32 %615, 3
  %617 = getelementptr [2 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %617, align 8
  %618 = getelementptr [2 x ptr], ptr %27, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %618, align 8
  %619 = call ptr @llvm.invariant.start.p0(i64 4, ptr %27)
  %620 = call ptr @llvm.invariant.start.p0(i64 664, ptr %609)
  %621 = getelementptr ptr, ptr %609, i32 %615
  %622 = getelementptr ptr, ptr %621, i32 18
  %623 = load ptr, ptr %622, align 8
  %624 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  store ptr @i32_typ, ptr %624, align 8
  %625 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  store ptr %605, ptr %625, align 8
  %626 = call ptr @behavior_wrapper(ptr %623, { ptr, ptr, ptr, i32 } %616, ptr %28)
  call void %626({ ptr, ptr, ptr, i32 } %616, { ptr, ptr, ptr, i32 } %616, ptr %27, i32 %603, { ptr, i160 } %608) #17
  store i1 true, ptr %29, align 1
  store ptr @i32_typ, ptr %31, align 8
  %627 = load i32, ptr %8, align 4
  store i32 %627, ptr %30, align 4
  %628 = load ptr, ptr %31, align 8
  %629 = insertvalue { ptr, i160 } undef, ptr %628, 0
  %630 = load i160, ptr %30, align 4
  %631 = insertvalue { ptr, i160 } %629, i160 %630, 1
  store ptr @bool_typ, ptr %33, align 8
  %632 = load i1, ptr %29, align 1
  store i1 %632, ptr %32, align 1
  %633 = load ptr, ptr %33, align 8
  %634 = insertvalue { ptr, i160 } undef, ptr %633, 0
  %635 = load i160, ptr %32, align 4
  %636 = insertvalue { ptr, i160 } %634, i160 %635, 1
  %637 = load ptr, ptr %498, align 8
  %638 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %637, 0
  %639 = load ptr, ptr %497, align 8
  %640 = insertvalue { ptr, ptr, ptr, i32 } %638, ptr %639, 1
  %641 = load ptr, ptr %496, align 8
  %642 = insertvalue { ptr, ptr, ptr, i32 } %640, ptr %641, 2
  %643 = load i32, ptr %495, align 4
  %644 = insertvalue { ptr, ptr, ptr, i32 } %642, i32 %643, 3
  %645 = getelementptr [2 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %645, align 8
  %646 = getelementptr [2 x ptr], ptr %34, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %646, align 8
  %647 = call ptr @llvm.invariant.start.p0(i64 4, ptr %34)
  %648 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %637)
  %649 = getelementptr ptr, ptr %637, i32 %643
  %650 = getelementptr ptr, ptr %649, i32 21
  %651 = load ptr, ptr %650, align 8
  %652 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  store ptr %628, ptr %652, align 8
  %653 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 1
  store ptr %633, ptr %653, align 8
  %654 = call ptr @behavior_wrapper(ptr %651, { ptr, ptr, ptr, i32 } %644, ptr %35)
  call void %654({ ptr, ptr, ptr, i32 } %644, { ptr, ptr, ptr, i32 } %644, ptr %34, { ptr, i160 } %631, { ptr, i160 } %636) #17
  store i32 1, ptr %36, align 4
  %655 = load i32, ptr %503, align 4
  %656 = load i32, ptr %36, align 4
  %657 = add i32 %655, %656
  store i32 %657, ptr %37, align 4
  %658 = load i32, ptr %37, align 4
  store i32 %658, ptr %503, align 4
  br label %659

659:                                              ; preds = %._crit_edge2, %571
  store i32 1, ptr %38, align 4
  %660 = load i32, ptr %504, align 4
  %661 = load i32, ptr %38, align 4
  %662 = add i32 %660, %661
  store i32 %662, ptr %39, align 4
  %663 = load i32, ptr %39, align 4
  store i32 %663, ptr %504, align 4
  br label %664

664:                                              ; preds = %._crit_edge1, %659
  %.reload14 = load i1, ptr %.reg2mem13, align 1
  br i1 %.reload14, label %._crit_edge3, label %665

._crit_edge3:                                     ; preds = %664
  br label %510

665:                                              ; preds = %664
  %666 = load i32, ptr %503, align 4
  %667 = load i32, ptr %256, align 4
  %668 = icmp slt i32 %666, %667
  store i1 %668, ptr %40, align 1
  %669 = load i1, ptr %40, align 1
  br i1 %669, label %670, label %._crit_edge4

._crit_edge4:                                     ; preds = %665
  br label %799

670:                                              ; preds = %665
  store i32 30, ptr %41, align 4
  %671 = load i32, ptr %41, align 4
  %672 = sext i32 %671 to i64
  %673 = mul i64 %672, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %674 = call ptr @bump_malloc(i64 %673)
  store ptr %674, ptr %42, align 8
  %675 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  %676 = load ptr, ptr %675, align 8
  store ptr %676, ptr %43, align 8
  store i32 0, ptr %44, align 4
  %677 = load ptr, ptr %43, align 8
  %678 = load i32, ptr %44, align 4
  %679 = sext i32 %678 to i64
  %680 = mul i64 ptrtoint (ptr getelementptr ([29 x i8], ptr null, i32 1) to i64), %679
  %681 = getelementptr i8, ptr %677, i64 %680
  %682 = load <29 x i8>, ptr @pdxpr_Warning_Could_only_generate_, align 32
  store <29 x i8> %682, ptr %681, align 32
  store i32 29, ptr %45, align 4
  store i32 30, ptr %46, align 4
  store ptr @String, ptr %47, align 8
  %683 = load ptr, ptr %47, align 8
  %684 = getelementptr ptr, ptr %683, i32 6
  %685 = load ptr, ptr %684, align 8
  %686 = call { i64, i64 } @size_wrapper(ptr %685, ptr %47)
  %687 = extractvalue { i64, i64 } %686, 0
  %688 = call ptr @bump_malloc(i64 %687)
  %689 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %690 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  store ptr @String, ptr %48, align 8
  store ptr %688, ptr %689, align 8
  store i32 10, ptr %690, align 4
  store i32 29, ptr %49, align 4
  store i32 30, ptr %50, align 4
  %691 = load ptr, ptr %43, align 8
  %692 = insertvalue { ptr } undef, ptr %691, 0
  %693 = load i32, ptr %49, align 4
  %694 = load i32, ptr %50, align 4
  %695 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %696 = load ptr, ptr %695, align 8
  %697 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %696, 0
  %698 = load ptr, ptr %689, align 8
  %699 = insertvalue { ptr, ptr, ptr, i32 } %697, ptr %698, 1
  %700 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %701 = load ptr, ptr %700, align 8
  %702 = insertvalue { ptr, ptr, ptr, i32 } %699, ptr %701, 2
  %703 = load i32, ptr %690, align 4
  %704 = insertvalue { ptr, ptr, ptr, i32 } %702, i32 %703, 3
  %705 = getelementptr [3 x ptr], ptr %51, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %705, align 8
  %706 = getelementptr [3 x ptr], ptr %51, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %706, align 8
  %707 = getelementptr [3 x ptr], ptr %51, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %707, align 8
  %708 = call ptr @llvm.invariant.start.p0(i64 9, ptr %51)
  %709 = call ptr @llvm.invariant.start.p0(i64 632, ptr %696)
  %710 = getelementptr ptr, ptr %696, i32 %703
  %711 = getelementptr ptr, ptr %710, i32 6
  %712 = load ptr, ptr %711, align 8
  %713 = getelementptr { ptr, ptr, ptr }, ptr %52, i32 0, i32 0
  store ptr @buffer_typ, ptr %713, align 8
  %714 = getelementptr { ptr, ptr, ptr }, ptr %52, i32 0, i32 1
  store ptr @i32_typ, ptr %714, align 8
  %715 = getelementptr { ptr, ptr, ptr }, ptr %52, i32 0, i32 2
  store ptr @i32_typ, ptr %715, align 8
  %716 = call ptr @behavior_wrapper(ptr %712, { ptr, ptr, ptr, i32 } %704, ptr %52)
  call void %716({ ptr, ptr, ptr, i32 } %704, { ptr, ptr, ptr, i32 } %704, ptr %51, { ptr } %692, i32 %693, i32 %694) #17
  %717 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 0
  %718 = load ptr, ptr %717, align 8
  %719 = insertvalue { ptr, i160 } undef, ptr %718, 0
  %720 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 1
  %721 = load i160, ptr %720, align 4
  %722 = insertvalue { ptr, i160 } %719, i160 %721, 1
  %723 = getelementptr [1 x ptr], ptr %53, i32 0, i32 0
  store ptr @_parameterization_String, ptr %723, align 8
  %724 = call ptr @llvm.invariant.start.p0(i64 1, ptr %53)
  %725 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %726 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %727 = getelementptr { ptr }, ptr %54, i32 0, i32 0
  store ptr %718, ptr %727, align 8
  %728 = call ptr @class_behavior_wrapper(ptr %726, ptr %54)
  call void %728(ptr %53, { ptr, i160 } %722) #17
  %729 = load i32, ptr %503, align 4
  store i32 %729, ptr %55, align 4
  store ptr @i32_typ, ptr %56, align 8
  %730 = load ptr, ptr %56, align 8
  %731 = insertvalue { ptr, i160 } undef, ptr %730, 0
  %732 = load i160, ptr %55, align 4
  %733 = insertvalue { ptr, i160 } %731, i160 %732, 1
  %734 = getelementptr [1 x ptr], ptr %57, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %734, align 8
  %735 = call ptr @llvm.invariant.start.p0(i64 1, ptr %57)
  %736 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %737 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %738 = getelementptr { ptr }, ptr %58, i32 0, i32 0
  store ptr %730, ptr %738, align 8
  %739 = call ptr @class_behavior_wrapper(ptr %737, ptr %58)
  call void %739(ptr %57, { ptr, i160 } %733) #17
  store i32 30, ptr %59, align 4
  %740 = load i32, ptr %59, align 4
  %741 = sext i32 %740 to i64
  %742 = mul i64 %741, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %743 = call ptr @bump_malloc(i64 %742)
  store ptr %743, ptr %60, align 8
  %744 = getelementptr { ptr }, ptr %60, i32 0, i32 0
  %745 = load ptr, ptr %744, align 8
  store ptr %745, ptr %61, align 8
  store i32 0, ptr %62, align 4
  %746 = load ptr, ptr %61, align 8
  %747 = load i32, ptr %62, align 4
  %748 = sext i32 %747 to i64
  %749 = mul i64 ptrtoint (ptr getelementptr ([29 x i8], ptr null, i32 1) to i64), %748
  %750 = getelementptr i8, ptr %746, i64 %749
  %751 = load <29 x i8>, ptr @kgrpt__unique_keys_for_remove_test, align 32
  store <29 x i8> %751, ptr %750, align 32
  store i32 29, ptr %63, align 4
  store i32 30, ptr %64, align 4
  store ptr @String, ptr %65, align 8
  %752 = load ptr, ptr %65, align 8
  %753 = getelementptr ptr, ptr %752, i32 6
  %754 = load ptr, ptr %753, align 8
  %755 = call { i64, i64 } @size_wrapper(ptr %754, ptr %65)
  %756 = extractvalue { i64, i64 } %755, 0
  %757 = call ptr @bump_malloc(i64 %756)
  %758 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %759 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  store ptr @String, ptr %66, align 8
  store ptr %757, ptr %758, align 8
  store i32 10, ptr %759, align 4
  store i32 29, ptr %67, align 4
  store i32 30, ptr %68, align 4
  %760 = load ptr, ptr %61, align 8
  %761 = insertvalue { ptr } undef, ptr %760, 0
  %762 = load i32, ptr %67, align 4
  %763 = load i32, ptr %68, align 4
  %764 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %765 = load ptr, ptr %764, align 8
  %766 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %765, 0
  %767 = load ptr, ptr %758, align 8
  %768 = insertvalue { ptr, ptr, ptr, i32 } %766, ptr %767, 1
  %769 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %770 = load ptr, ptr %769, align 8
  %771 = insertvalue { ptr, ptr, ptr, i32 } %768, ptr %770, 2
  %772 = load i32, ptr %759, align 4
  %773 = insertvalue { ptr, ptr, ptr, i32 } %771, i32 %772, 3
  %774 = getelementptr [3 x ptr], ptr %69, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %774, align 8
  %775 = getelementptr [3 x ptr], ptr %69, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %775, align 8
  %776 = getelementptr [3 x ptr], ptr %69, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %776, align 8
  %777 = call ptr @llvm.invariant.start.p0(i64 9, ptr %69)
  %778 = call ptr @llvm.invariant.start.p0(i64 632, ptr %765)
  %779 = getelementptr ptr, ptr %765, i32 %772
  %780 = getelementptr ptr, ptr %779, i32 6
  %781 = load ptr, ptr %780, align 8
  %782 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @buffer_typ, ptr %782, align 8
  %783 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr @i32_typ, ptr %783, align 8
  %784 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 2
  store ptr @i32_typ, ptr %784, align 8
  %785 = call ptr @behavior_wrapper(ptr %781, { ptr, ptr, ptr, i32 } %773, ptr %70)
  call void %785({ ptr, ptr, ptr, i32 } %773, { ptr, ptr, ptr, i32 } %773, ptr %69, { ptr } %761, i32 %762, i32 %763) #17
  %786 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 0
  %787 = load ptr, ptr %786, align 8
  %788 = insertvalue { ptr, i160 } undef, ptr %787, 0
  %789 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 1
  %790 = load i160, ptr %789, align 4
  %791 = insertvalue { ptr, i160 } %788, i160 %790, 1
  %792 = getelementptr [1 x ptr], ptr %71, i32 0, i32 0
  store ptr @_parameterization_String, ptr %792, align 8
  %793 = call ptr @llvm.invariant.start.p0(i64 1, ptr %71)
  %794 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %795 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %796 = getelementptr { ptr }, ptr %72, i32 0, i32 0
  store ptr %787, ptr %796, align 8
  %797 = call ptr @class_behavior_wrapper(ptr %795, ptr %72)
  call void %797(ptr %71, { ptr, i160 } %791) #17
  %798 = load i32, ptr %503, align 4
  store i32 %798, ptr %256, align 4
  br label %799

799:                                              ; preds = %._crit_edge4, %670
  %800 = call i64 @clock()
  store i64 %800, ptr %73, align 4
  store i32 0, ptr %74, align 4
  store i1 true, ptr %75, align 1
  store i32 0, ptr %76, align 4
  br label %801

801:                                              ; preds = %._crit_edge7, %799
  %802 = load i32, ptr %76, align 4
  %803 = load i32, ptr %256, align 4
  %804 = icmp slt i32 %802, %803
  store i1 %804, ptr %77, align 1
  %805 = load i1, ptr %77, align 1
  store i1 %805, ptr %.reg2mem, align 1
  %.reload12 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload12, label %806, label %._crit_edge5

._crit_edge5:                                     ; preds = %801
  br label %1026

806:                                              ; preds = %801
  %807 = load i32, ptr %76, align 4
  %808 = load ptr, ptr %424, align 8
  %809 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %808, 0
  %810 = load ptr, ptr %423, align 8
  %811 = insertvalue { ptr, ptr, ptr, i32 } %809, ptr %810, 1
  %812 = load ptr, ptr %422, align 8
  %813 = insertvalue { ptr, ptr, ptr, i32 } %811, ptr %812, 2
  %814 = load i32, ptr %421, align 4
  %815 = insertvalue { ptr, ptr, ptr, i32 } %813, i32 %814, 3
  %816 = getelementptr [1 x ptr], ptr %78, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %816, align 8
  %817 = call ptr @llvm.invariant.start.p0(i64 1, ptr %78)
  %818 = call ptr @llvm.invariant.start.p0(i64 664, ptr %808)
  %819 = getelementptr ptr, ptr %808, i32 %814
  %820 = getelementptr ptr, ptr %819, i32 17
  %821 = load ptr, ptr %820, align 8
  %822 = getelementptr { ptr }, ptr %79, i32 0, i32 0
  store ptr @i32_typ, ptr %822, align 8
  %823 = call ptr @behavior_wrapper(ptr %821, { ptr, ptr, ptr, i32 } %815, ptr %79)
  %824 = call { ptr, i160 } %823({ ptr, ptr, ptr, i32 } %815, { ptr, ptr, ptr, i32 } %815, ptr %78, i32 %807) #17
  store { ptr, i160 } %824, ptr %80, align 8
  %825 = getelementptr { ptr, i160 }, ptr %80, i32 0, i32 1
  %826 = load i32, ptr %825, align 4
  store i32 %826, ptr %81, align 4
  store ptr @i32_typ, ptr %83, align 8
  %827 = load i32, ptr %81, align 4
  store i32 %827, ptr %82, align 4
  %828 = load ptr, ptr %83, align 8
  %829 = insertvalue { ptr, i160 } undef, ptr %828, 0
  %830 = load i160, ptr %82, align 4
  %831 = insertvalue { ptr, i160 } %829, i160 %830, 1
  %832 = load ptr, ptr %326, align 8
  %833 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %832, 0
  %834 = load ptr, ptr %325, align 8
  %835 = insertvalue { ptr, ptr, ptr, i32 } %833, ptr %834, 1
  %836 = load ptr, ptr %324, align 8
  %837 = insertvalue { ptr, ptr, ptr, i32 } %835, ptr %836, 2
  %838 = load i32, ptr %323, align 4
  %839 = insertvalue { ptr, ptr, ptr, i32 } %837, i32 %838, 3
  %840 = getelementptr [1 x ptr], ptr %84, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %840, align 8
  %841 = call ptr @llvm.invariant.start.p0(i64 1, ptr %84)
  %842 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %832)
  %843 = getelementptr ptr, ptr %832, i32 %838
  %844 = getelementptr ptr, ptr %843, i32 25
  %845 = load ptr, ptr %844, align 8
  %846 = getelementptr { ptr }, ptr %85, i32 0, i32 0
  store ptr %828, ptr %846, align 8
  %847 = call ptr @behavior_wrapper(ptr %845, { ptr, ptr, ptr, i32 } %839, ptr %85)
  %848 = call { ptr, i160 } %847({ ptr, ptr, ptr, i32 } %839, { ptr, ptr, ptr, i32 } %839, ptr %84, { ptr, i160 } %831) #17
  store { ptr, i160 } %848, ptr %86, align 8
  %849 = getelementptr { ptr, i32 }, ptr %86, i32 0, i32 0
  %850 = load ptr, ptr %849, align 8
  store ptr %850, ptr %88, align 8
  %851 = getelementptr { ptr, i32 }, ptr %86, i32 0, i32 1
  %852 = load i32, ptr %851, align 4
  store i32 %852, ptr %87, align 4
  %853 = load ptr, ptr %88, align 8
  %854 = ptrtoint ptr %853 to i64
  %855 = icmp eq i64 %854, ptrtoint (ptr @nil_typ to i64)
  %856 = icmp eq i64 %854, 0
  %857 = or i1 %855, %856
  %858 = icmp eq i1 %857, false
  store i1 %858, ptr %89, align 1
  %859 = load i1, ptr %89, align 1
  br i1 %859, label %860, label %948

860:                                              ; preds = %806
  %861 = load i32, ptr %87, align 4
  store i32 %861, ptr %90, align 4
  store i32 1, ptr %91, align 4
  %862 = load i32, ptr %81, align 4
  %863 = load i32, ptr %91, align 4
  %864 = add i32 %862, %863
  store i32 %864, ptr %92, align 4
  %865 = load i32, ptr %90, align 4
  %866 = load i32, ptr %92, align 4
  %867 = icmp ne i32 %865, %866
  store i1 %867, ptr %93, align 1
  %868 = load i1, ptr %93, align 1
  br i1 %868, label %869, label %._crit_edge6

._crit_edge6:                                     ; preds = %860
  br label %940

869:                                              ; preds = %860
  store i1 false, ptr %94, align 1
  %870 = load i1, ptr %94, align 1
  store i1 %870, ptr %75, align 1
  store i32 46, ptr %95, align 4
  %871 = load i32, ptr %95, align 4
  %872 = sext i32 %871 to i64
  %873 = mul i64 %872, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %874 = call ptr @bump_malloc(i64 %873)
  store ptr %874, ptr %96, align 8
  %875 = getelementptr { ptr }, ptr %96, i32 0, i32 0
  %876 = load ptr, ptr %875, align 8
  store ptr %876, ptr %97, align 8
  store i32 0, ptr %98, align 4
  %877 = load ptr, ptr %97, align 8
  %878 = load i32, ptr %98, align 4
  %879 = sext i32 %878 to i64
  %880 = mul i64 ptrtoint (ptr getelementptr ([45 x i8], ptr null, i32 1) to i64), %879
  %881 = getelementptr i8, ptr %877, i64 %880
  %882 = load <45 x i8>, ptr @fcfel_Warning_Remove_returned_wrong_value_for_key_, align 64
  store <45 x i8> %882, ptr %881, align 64
  store i32 45, ptr %99, align 4
  store i32 46, ptr %100, align 4
  store ptr @String, ptr %101, align 8
  %883 = load ptr, ptr %101, align 8
  %884 = getelementptr ptr, ptr %883, i32 6
  %885 = load ptr, ptr %884, align 8
  %886 = call { i64, i64 } @size_wrapper(ptr %885, ptr %101)
  %887 = extractvalue { i64, i64 } %886, 0
  %888 = call ptr @bump_malloc(i64 %887)
  %889 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %890 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  store ptr @String, ptr %102, align 8
  store ptr %888, ptr %889, align 8
  store i32 10, ptr %890, align 4
  store i32 45, ptr %103, align 4
  store i32 46, ptr %104, align 4
  %891 = load ptr, ptr %97, align 8
  %892 = insertvalue { ptr } undef, ptr %891, 0
  %893 = load i32, ptr %103, align 4
  %894 = load i32, ptr %104, align 4
  %895 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %896 = load ptr, ptr %895, align 8
  %897 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %896, 0
  %898 = load ptr, ptr %889, align 8
  %899 = insertvalue { ptr, ptr, ptr, i32 } %897, ptr %898, 1
  %900 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %901 = load ptr, ptr %900, align 8
  %902 = insertvalue { ptr, ptr, ptr, i32 } %899, ptr %901, 2
  %903 = load i32, ptr %890, align 4
  %904 = insertvalue { ptr, ptr, ptr, i32 } %902, i32 %903, 3
  %905 = getelementptr [3 x ptr], ptr %105, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %905, align 8
  %906 = getelementptr [3 x ptr], ptr %105, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %906, align 8
  %907 = getelementptr [3 x ptr], ptr %105, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %907, align 8
  %908 = call ptr @llvm.invariant.start.p0(i64 9, ptr %105)
  %909 = call ptr @llvm.invariant.start.p0(i64 632, ptr %896)
  %910 = getelementptr ptr, ptr %896, i32 %903
  %911 = getelementptr ptr, ptr %910, i32 6
  %912 = load ptr, ptr %911, align 8
  %913 = getelementptr { ptr, ptr, ptr }, ptr %106, i32 0, i32 0
  store ptr @buffer_typ, ptr %913, align 8
  %914 = getelementptr { ptr, ptr, ptr }, ptr %106, i32 0, i32 1
  store ptr @i32_typ, ptr %914, align 8
  %915 = getelementptr { ptr, ptr, ptr }, ptr %106, i32 0, i32 2
  store ptr @i32_typ, ptr %915, align 8
  %916 = call ptr @behavior_wrapper(ptr %912, { ptr, ptr, ptr, i32 } %904, ptr %106)
  call void %916({ ptr, ptr, ptr, i32 } %904, { ptr, ptr, ptr, i32 } %904, ptr %105, { ptr } %892, i32 %893, i32 %894) #17
  %917 = getelementptr { ptr, i160 }, ptr %102, i32 0, i32 0
  %918 = load ptr, ptr %917, align 8
  %919 = insertvalue { ptr, i160 } undef, ptr %918, 0
  %920 = getelementptr { ptr, i160 }, ptr %102, i32 0, i32 1
  %921 = load i160, ptr %920, align 4
  %922 = insertvalue { ptr, i160 } %919, i160 %921, 1
  %923 = getelementptr [1 x ptr], ptr %107, i32 0, i32 0
  store ptr @_parameterization_String, ptr %923, align 8
  %924 = call ptr @llvm.invariant.start.p0(i64 1, ptr %107)
  %925 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %926 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %927 = getelementptr { ptr }, ptr %108, i32 0, i32 0
  store ptr %918, ptr %927, align 8
  %928 = call ptr @class_behavior_wrapper(ptr %926, ptr %108)
  call void %928(ptr %107, { ptr, i160 } %922) #17
  %929 = load i32, ptr %81, align 4
  store i32 %929, ptr %109, align 4
  store ptr @i32_typ, ptr %110, align 8
  %930 = load ptr, ptr %110, align 8
  %931 = insertvalue { ptr, i160 } undef, ptr %930, 0
  %932 = load i160, ptr %109, align 4
  %933 = insertvalue { ptr, i160 } %931, i160 %932, 1
  %934 = getelementptr [1 x ptr], ptr %111, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %934, align 8
  %935 = call ptr @llvm.invariant.start.p0(i64 1, ptr %111)
  %936 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %937 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %938 = getelementptr { ptr }, ptr %112, i32 0, i32 0
  store ptr %930, ptr %938, align 8
  %939 = call ptr @class_behavior_wrapper(ptr %937, ptr %112)
  call void %939(ptr %111, { ptr, i160 } %933) #17
  br label %940

940:                                              ; preds = %._crit_edge6, %869
  store i32 1, ptr %113, align 4
  %941 = load i32, ptr %74, align 4
  %942 = load i32, ptr %113, align 4
  %943 = add i32 %941, %942
  store i32 %943, ptr %114, align 4
  %944 = load i32, ptr %114, align 4
  store i32 %944, ptr %74, align 4
  %945 = load i32, ptr %90, align 4
  store i32 %945, ptr %115, align 4
  store ptr @i32_typ, ptr %116, align 8
  %946 = load ptr, ptr %116, align 8
  store ptr %946, ptr %88, align 8
  %947 = load i32, ptr %115, align 4
  store i32 %947, ptr %87, align 4
  br label %1021

948:                                              ; preds = %806
  store i1 false, ptr %117, align 1
  %949 = load i1, ptr %117, align 1
  store i1 %949, ptr %75, align 1
  store i32 38, ptr %118, align 4
  %950 = load i32, ptr %118, align 4
  %951 = sext i32 %950 to i64
  %952 = mul i64 %951, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %953 = call ptr @bump_malloc(i64 %952)
  store ptr %953, ptr %119, align 8
  %954 = getelementptr { ptr }, ptr %119, i32 0, i32 0
  %955 = load ptr, ptr %954, align 8
  store ptr %955, ptr %120, align 8
  store i32 0, ptr %121, align 4
  %956 = load ptr, ptr %120, align 8
  %957 = load i32, ptr %121, align 4
  %958 = sext i32 %957 to i64
  %959 = mul i64 ptrtoint (ptr getelementptr ([37 x i8], ptr null, i32 1) to i64), %958
  %960 = getelementptr i8, ptr %956, i64 %959
  %961 = load <37 x i8>, ptr @lmasg_Warning_Remove_returned_Nil_for_key_, align 64
  store <37 x i8> %961, ptr %960, align 64
  store i32 37, ptr %122, align 4
  store i32 38, ptr %123, align 4
  store ptr @String, ptr %124, align 8
  %962 = load ptr, ptr %124, align 8
  %963 = getelementptr ptr, ptr %962, i32 6
  %964 = load ptr, ptr %963, align 8
  %965 = call { i64, i64 } @size_wrapper(ptr %964, ptr %124)
  %966 = extractvalue { i64, i64 } %965, 0
  %967 = call ptr @bump_malloc(i64 %966)
  %968 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %969 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  store ptr @String, ptr %125, align 8
  store ptr %967, ptr %968, align 8
  store i32 10, ptr %969, align 4
  store i32 37, ptr %126, align 4
  store i32 38, ptr %127, align 4
  %970 = load ptr, ptr %120, align 8
  %971 = insertvalue { ptr } undef, ptr %970, 0
  %972 = load i32, ptr %126, align 4
  %973 = load i32, ptr %127, align 4
  %974 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %975 = load ptr, ptr %974, align 8
  %976 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %975, 0
  %977 = load ptr, ptr %968, align 8
  %978 = insertvalue { ptr, ptr, ptr, i32 } %976, ptr %977, 1
  %979 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %980 = load ptr, ptr %979, align 8
  %981 = insertvalue { ptr, ptr, ptr, i32 } %978, ptr %980, 2
  %982 = load i32, ptr %969, align 4
  %983 = insertvalue { ptr, ptr, ptr, i32 } %981, i32 %982, 3
  %984 = getelementptr [3 x ptr], ptr %128, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %984, align 8
  %985 = getelementptr [3 x ptr], ptr %128, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %985, align 8
  %986 = getelementptr [3 x ptr], ptr %128, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %986, align 8
  %987 = call ptr @llvm.invariant.start.p0(i64 9, ptr %128)
  %988 = call ptr @llvm.invariant.start.p0(i64 632, ptr %975)
  %989 = getelementptr ptr, ptr %975, i32 %982
  %990 = getelementptr ptr, ptr %989, i32 6
  %991 = load ptr, ptr %990, align 8
  %992 = getelementptr { ptr, ptr, ptr }, ptr %129, i32 0, i32 0
  store ptr @buffer_typ, ptr %992, align 8
  %993 = getelementptr { ptr, ptr, ptr }, ptr %129, i32 0, i32 1
  store ptr @i32_typ, ptr %993, align 8
  %994 = getelementptr { ptr, ptr, ptr }, ptr %129, i32 0, i32 2
  store ptr @i32_typ, ptr %994, align 8
  %995 = call ptr @behavior_wrapper(ptr %991, { ptr, ptr, ptr, i32 } %983, ptr %129)
  call void %995({ ptr, ptr, ptr, i32 } %983, { ptr, ptr, ptr, i32 } %983, ptr %128, { ptr } %971, i32 %972, i32 %973) #17
  %996 = getelementptr { ptr, i160 }, ptr %125, i32 0, i32 0
  %997 = load ptr, ptr %996, align 8
  %998 = insertvalue { ptr, i160 } undef, ptr %997, 0
  %999 = getelementptr { ptr, i160 }, ptr %125, i32 0, i32 1
  %1000 = load i160, ptr %999, align 4
  %1001 = insertvalue { ptr, i160 } %998, i160 %1000, 1
  %1002 = getelementptr [1 x ptr], ptr %130, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1002, align 8
  %1003 = call ptr @llvm.invariant.start.p0(i64 1, ptr %130)
  %1004 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1005 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1006 = getelementptr { ptr }, ptr %131, i32 0, i32 0
  store ptr %997, ptr %1006, align 8
  %1007 = call ptr @class_behavior_wrapper(ptr %1005, ptr %131)
  call void %1007(ptr %130, { ptr, i160 } %1001) #17
  %1008 = load i32, ptr %81, align 4
  store i32 %1008, ptr %132, align 4
  store ptr @i32_typ, ptr %133, align 8
  %1009 = load ptr, ptr %133, align 8
  %1010 = insertvalue { ptr, i160 } undef, ptr %1009, 0
  %1011 = load i160, ptr %132, align 4
  %1012 = insertvalue { ptr, i160 } %1010, i160 %1011, 1
  %1013 = getelementptr [1 x ptr], ptr %134, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1013, align 8
  %1014 = call ptr @llvm.invariant.start.p0(i64 1, ptr %134)
  %1015 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1016 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1017 = getelementptr { ptr }, ptr %135, i32 0, i32 0
  store ptr %1009, ptr %1017, align 8
  %1018 = call ptr @class_behavior_wrapper(ptr %1016, ptr %135)
  call void %1018(ptr %134, { ptr, i160 } %1012) #17
  %1019 = load ptr, ptr %88, align 8
  store ptr %1019, ptr %88, align 8
  %1020 = load i32, ptr %87, align 4
  store i32 %1020, ptr %87, align 4
  br label %1021

1021:                                             ; preds = %948, %940
  store i32 1, ptr %136, align 4
  %1022 = load i32, ptr %76, align 4
  %1023 = load i32, ptr %136, align 4
  %1024 = add i32 %1022, %1023
  store i32 %1024, ptr %137, align 4
  %1025 = load i32, ptr %137, align 4
  store i32 %1025, ptr %76, align 4
  br label %1026

1026:                                             ; preds = %._crit_edge5, %1021
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge7, label %1027

._crit_edge7:                                     ; preds = %1026
  br label %801

1027:                                             ; preds = %1026
  %1028 = call i64 @clock()
  store i64 %1028, ptr %138, align 4
  %1029 = load i32, ptr %74, align 4
  %1030 = load i32, ptr %256, align 4
  %1031 = icmp ne i32 %1029, %1030
  store i1 %1031, ptr %139, align 1
  %1032 = load i1, ptr %139, align 1
  br i1 %1032, label %1033, label %._crit_edge8

._crit_edge8:                                     ; preds = %1027
  br label %1035

1033:                                             ; preds = %1027
  store i1 false, ptr %140, align 1
  %1034 = load i1, ptr %140, align 1
  store i1 %1034, ptr %75, align 1
  br label %1035

1035:                                             ; preds = %._crit_edge8, %1033
  %1036 = load ptr, ptr %326, align 8
  %1037 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1036, 0
  %1038 = load ptr, ptr %325, align 8
  %1039 = insertvalue { ptr, ptr, ptr, i32 } %1037, ptr %1038, 1
  %1040 = load ptr, ptr %324, align 8
  %1041 = insertvalue { ptr, ptr, ptr, i32 } %1039, ptr %1040, 2
  %1042 = load i32, ptr %323, align 4
  %1043 = insertvalue { ptr, ptr, ptr, i32 } %1041, i32 %1042, 3
  %1044 = call ptr @llvm.invariant.start.p0(i64 0, ptr %141)
  %1045 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %1036)
  %1046 = getelementptr ptr, ptr %1036, i32 %1042
  %1047 = getelementptr ptr, ptr %1046, i32 22
  %1048 = load ptr, ptr %1047, align 8
  %1049 = call ptr @behavior_wrapper(ptr %1048, { ptr, ptr, ptr, i32 } %1043, ptr %142)
  %1050 = call i32 %1049({ ptr, ptr, ptr, i32 } %1043, { ptr, ptr, ptr, i32 } %1043, ptr %141) #17
  store i32 %1050, ptr %143, align 4
  store i32 0, ptr %144, align 4
  %1051 = load i32, ptr %143, align 4
  %1052 = load i32, ptr %144, align 4
  %1053 = icmp ne i32 %1051, %1052
  store i1 %1053, ptr %145, align 1
  %1054 = load i1, ptr %145, align 1
  br i1 %1054, label %1055, label %._crit_edge9

._crit_edge9:                                     ; preds = %1035
  br label %1057

1055:                                             ; preds = %1035
  store i1 false, ptr %146, align 1
  %1056 = load i1, ptr %146, align 1
  store i1 %1056, ptr %75, align 1
  br label %1057

1057:                                             ; preds = %._crit_edge9, %1055
  store i32 0, ptr %147, align 4
  %1058 = load i32, ptr %256, align 4
  %1059 = load i32, ptr %147, align 4
  %1060 = icmp sgt i32 %1058, %1059
  store i1 %1060, ptr %148, align 1
  %1061 = load i1, ptr %148, align 1
  br i1 %1061, label %1062, label %._crit_edge10

._crit_edge10:                                    ; preds = %1057
  br label %1123

1062:                                             ; preds = %1057
  store i32 0, ptr %149, align 4
  %1063 = load i32, ptr %149, align 4
  %1064 = load ptr, ptr %424, align 8
  %1065 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1064, 0
  %1066 = load ptr, ptr %423, align 8
  %1067 = insertvalue { ptr, ptr, ptr, i32 } %1065, ptr %1066, 1
  %1068 = load ptr, ptr %422, align 8
  %1069 = insertvalue { ptr, ptr, ptr, i32 } %1067, ptr %1068, 2
  %1070 = load i32, ptr %421, align 4
  %1071 = insertvalue { ptr, ptr, ptr, i32 } %1069, i32 %1070, 3
  %1072 = getelementptr [1 x ptr], ptr %150, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1072, align 8
  %1073 = call ptr @llvm.invariant.start.p0(i64 1, ptr %150)
  %1074 = call ptr @llvm.invariant.start.p0(i64 664, ptr %1064)
  %1075 = getelementptr ptr, ptr %1064, i32 %1070
  %1076 = getelementptr ptr, ptr %1075, i32 17
  %1077 = load ptr, ptr %1076, align 8
  %1078 = getelementptr { ptr }, ptr %151, i32 0, i32 0
  store ptr @i32_typ, ptr %1078, align 8
  %1079 = call ptr @behavior_wrapper(ptr %1077, { ptr, ptr, ptr, i32 } %1071, ptr %151)
  %1080 = call { ptr, i160 } %1079({ ptr, ptr, ptr, i32 } %1071, { ptr, ptr, ptr, i32 } %1071, ptr %150, i32 %1063) #17
  store { ptr, i160 } %1080, ptr %152, align 8
  %1081 = getelementptr { ptr, i160 }, ptr %152, i32 0, i32 1
  %1082 = load i32, ptr %1081, align 4
  store i32 %1082, ptr %153, align 4
  store ptr @i32_typ, ptr %155, align 8
  %1083 = load i32, ptr %153, align 4
  store i32 %1083, ptr %154, align 4
  %1084 = load ptr, ptr %155, align 8
  %1085 = insertvalue { ptr, i160 } undef, ptr %1084, 0
  %1086 = load i160, ptr %154, align 4
  %1087 = insertvalue { ptr, i160 } %1085, i160 %1086, 1
  %1088 = load ptr, ptr %326, align 8
  %1089 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1088, 0
  %1090 = load ptr, ptr %325, align 8
  %1091 = insertvalue { ptr, ptr, ptr, i32 } %1089, ptr %1090, 1
  %1092 = load ptr, ptr %324, align 8
  %1093 = insertvalue { ptr, ptr, ptr, i32 } %1091, ptr %1092, 2
  %1094 = load i32, ptr %323, align 4
  %1095 = insertvalue { ptr, ptr, ptr, i32 } %1093, i32 %1094, 3
  %1096 = getelementptr [1 x ptr], ptr %156, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1096, align 8
  %1097 = call ptr @llvm.invariant.start.p0(i64 1, ptr %156)
  %1098 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %1088)
  %1099 = getelementptr ptr, ptr %1088, i32 %1094
  %1100 = getelementptr ptr, ptr %1099, i32 23
  %1101 = load ptr, ptr %1100, align 8
  %1102 = getelementptr { ptr }, ptr %157, i32 0, i32 0
  store ptr %1084, ptr %1102, align 8
  %1103 = call ptr @behavior_wrapper(ptr %1101, { ptr, ptr, ptr, i32 } %1095, ptr %157)
  %1104 = call { ptr, i160 } %1103({ ptr, ptr, ptr, i32 } %1095, { ptr, ptr, ptr, i32 } %1095, ptr %156, { ptr, i160 } %1087) #17
  store { ptr, i160 } %1104, ptr %158, align 8
  %1105 = getelementptr { ptr, i32 }, ptr %158, i32 0, i32 0
  %1106 = load ptr, ptr %1105, align 8
  store ptr %1106, ptr %160, align 8
  %1107 = getelementptr { ptr, i32 }, ptr %158, i32 0, i32 1
  %1108 = load i32, ptr %1107, align 4
  store i32 %1108, ptr %159, align 4
  %1109 = load ptr, ptr %160, align 8
  %1110 = ptrtoint ptr %1109 to i64
  %1111 = icmp eq i64 %1110, ptrtoint (ptr @nil_typ to i64)
  %1112 = icmp eq i64 %1110, 0
  %1113 = or i1 %1111, %1112
  %1114 = icmp eq i1 %1113, false
  store i1 %1114, ptr %161, align 1
  %1115 = load i1, ptr %161, align 1
  br i1 %1115, label %1116, label %._crit_edge11

._crit_edge11:                                    ; preds = %1062
  br label %1122

1116:                                             ; preds = %1062
  %1117 = load i32, ptr %159, align 4
  store i32 %1117, ptr %162, align 4
  store i1 false, ptr %163, align 1
  %1118 = load i1, ptr %163, align 1
  store i1 %1118, ptr %75, align 1
  %1119 = load i32, ptr %162, align 4
  store i32 %1119, ptr %164, align 4
  store ptr @i32_typ, ptr %165, align 8
  %1120 = load ptr, ptr %165, align 8
  store ptr %1120, ptr %160, align 8
  %1121 = load i32, ptr %164, align 4
  store i32 %1121, ptr %159, align 4
  br label %1122

1122:                                             ; preds = %._crit_edge11, %1116
  br label %1123

1123:                                             ; preds = %._crit_edge10, %1122
  store i32 14, ptr %166, align 4
  %1124 = load i32, ptr %166, align 4
  %1125 = sext i32 %1124 to i64
  %1126 = mul i64 %1125, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1127 = call ptr @bump_malloc(i64 %1126)
  store ptr %1127, ptr %167, align 8
  %1128 = getelementptr { ptr }, ptr %167, i32 0, i32 0
  %1129 = load ptr, ptr %1128, align 8
  store ptr %1129, ptr %168, align 8
  store i32 0, ptr %169, align 4
  %1130 = load ptr, ptr %168, align 8
  %1131 = load i32, ptr %169, align 4
  %1132 = sext i32 %1131 to i64
  %1133 = mul i64 ptrtoint (ptr getelementptr ([13 x i8], ptr null, i32 1) to i64), %1132
  %1134 = getelementptr i8, ptr %1130, i64 %1133
  %1135 = load <13 x i8>, ptr @iarao_Remove_Random, align 16
  store <13 x i8> %1135, ptr %1134, align 16
  store i32 13, ptr %170, align 4
  store i32 14, ptr %171, align 4
  store ptr @String, ptr %172, align 8
  %1136 = load ptr, ptr %172, align 8
  %1137 = getelementptr ptr, ptr %1136, i32 6
  %1138 = load ptr, ptr %1137, align 8
  %1139 = call { i64, i64 } @size_wrapper(ptr %1138, ptr %172)
  %1140 = extractvalue { i64, i64 } %1139, 0
  %1141 = call ptr @bump_malloc(i64 %1140)
  store ptr @String, ptr %176, align 8
  store ptr %1141, ptr %175, align 8
  store i32 10, ptr %173, align 4
  store i32 13, ptr %177, align 4
  store i32 14, ptr %178, align 4
  %1142 = load ptr, ptr %168, align 8
  %1143 = insertvalue { ptr } undef, ptr %1142, 0
  %1144 = load i32, ptr %177, align 4
  %1145 = load i32, ptr %178, align 4
  %1146 = load ptr, ptr %176, align 8
  %1147 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1146, 0
  %1148 = load ptr, ptr %175, align 8
  %1149 = insertvalue { ptr, ptr, ptr, i32 } %1147, ptr %1148, 1
  %1150 = load ptr, ptr %174, align 8
  %1151 = insertvalue { ptr, ptr, ptr, i32 } %1149, ptr %1150, 2
  %1152 = load i32, ptr %173, align 4
  %1153 = insertvalue { ptr, ptr, ptr, i32 } %1151, i32 %1152, 3
  %1154 = getelementptr [3 x ptr], ptr %179, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1154, align 8
  %1155 = getelementptr [3 x ptr], ptr %179, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1155, align 8
  %1156 = getelementptr [3 x ptr], ptr %179, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1156, align 8
  %1157 = call ptr @llvm.invariant.start.p0(i64 9, ptr %179)
  %1158 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1146)
  %1159 = getelementptr ptr, ptr %1146, i32 %1152
  %1160 = getelementptr ptr, ptr %1159, i32 6
  %1161 = load ptr, ptr %1160, align 8
  %1162 = getelementptr { ptr, ptr, ptr }, ptr %180, i32 0, i32 0
  store ptr @buffer_typ, ptr %1162, align 8
  %1163 = getelementptr { ptr, ptr, ptr }, ptr %180, i32 0, i32 1
  store ptr @i32_typ, ptr %1163, align 8
  %1164 = getelementptr { ptr, ptr, ptr }, ptr %180, i32 0, i32 2
  store ptr @i32_typ, ptr %1164, align 8
  %1165 = call ptr @behavior_wrapper(ptr %1161, { ptr, ptr, ptr, i32 } %1153, ptr %180)
  call void %1165({ ptr, ptr, ptr, i32 } %1153, { ptr, ptr, ptr, i32 } %1153, ptr %179, { ptr } %1143, i32 %1144, i32 %1145) #17
  %1166 = load i64, ptr %138, align 4
  %1167 = load i64, ptr %73, align 4
  %1168 = sub i64 %1166, %1167
  store i64 %1168, ptr %181, align 4
  %1169 = load ptr, ptr %176, align 8
  %1170 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1169, 0
  %1171 = load ptr, ptr %175, align 8
  %1172 = insertvalue { ptr, ptr, ptr, i32 } %1170, ptr %1171, 1
  %1173 = load ptr, ptr %174, align 8
  %1174 = insertvalue { ptr, ptr, ptr, i32 } %1172, ptr %1173, 2
  %1175 = load i32, ptr %173, align 4
  %1176 = insertvalue { ptr, ptr, ptr, i32 } %1174, i32 %1175, 3
  %1177 = load i32, ptr %256, align 4
  %1178 = load i64, ptr %181, align 4
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %1176, i32 %1177, i64 %1178)
  store i32 19, ptr %182, align 4
  %1179 = load i32, ptr %182, align 4
  %1180 = sext i32 %1179 to i64
  %1181 = mul i64 %1180, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1182 = call ptr @bump_malloc(i64 %1181)
  store ptr %1182, ptr %183, align 8
  %1183 = getelementptr { ptr }, ptr %183, i32 0, i32 0
  %1184 = load ptr, ptr %1183, align 8
  store ptr %1184, ptr %184, align 8
  store i32 0, ptr %185, align 4
  %1185 = load ptr, ptr %184, align 8
  %1186 = load i32, ptr %185, align 4
  %1187 = sext i32 %1186 to i64
  %1188 = mul i64 ptrtoint (ptr getelementptr ([18 x i8], ptr null, i32 1) to i64), %1187
  %1189 = getelementptr i8, ptr %1185, i64 %1188
  %1190 = load <18 x i8>, ptr @xbozs_____Verification_, align 32
  store <18 x i8> %1190, ptr %1189, align 32
  store i32 18, ptr %186, align 4
  store i32 19, ptr %187, align 4
  store ptr @String, ptr %188, align 8
  %1191 = load ptr, ptr %188, align 8
  %1192 = getelementptr ptr, ptr %1191, i32 6
  %1193 = load ptr, ptr %1192, align 8
  %1194 = call { i64, i64 } @size_wrapper(ptr %1193, ptr %188)
  %1195 = extractvalue { i64, i64 } %1194, 0
  %1196 = call ptr @bump_malloc(i64 %1195)
  %1197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %189, i32 0, i32 1
  %1198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %189, i32 0, i32 3
  store ptr @String, ptr %189, align 8
  store ptr %1196, ptr %1197, align 8
  store i32 10, ptr %1198, align 4
  store i32 18, ptr %190, align 4
  store i32 19, ptr %191, align 4
  %1199 = load ptr, ptr %184, align 8
  %1200 = insertvalue { ptr } undef, ptr %1199, 0
  %1201 = load i32, ptr %190, align 4
  %1202 = load i32, ptr %191, align 4
  %1203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %189, i32 0, i32 0
  %1204 = load ptr, ptr %1203, align 8
  %1205 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1204, 0
  %1206 = load ptr, ptr %1197, align 8
  %1207 = insertvalue { ptr, ptr, ptr, i32 } %1205, ptr %1206, 1
  %1208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %189, i32 0, i32 2
  %1209 = load ptr, ptr %1208, align 8
  %1210 = insertvalue { ptr, ptr, ptr, i32 } %1207, ptr %1209, 2
  %1211 = load i32, ptr %1198, align 4
  %1212 = insertvalue { ptr, ptr, ptr, i32 } %1210, i32 %1211, 3
  %1213 = getelementptr [3 x ptr], ptr %192, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1213, align 8
  %1214 = getelementptr [3 x ptr], ptr %192, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1214, align 8
  %1215 = getelementptr [3 x ptr], ptr %192, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1215, align 8
  %1216 = call ptr @llvm.invariant.start.p0(i64 9, ptr %192)
  %1217 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1204)
  %1218 = getelementptr ptr, ptr %1204, i32 %1211
  %1219 = getelementptr ptr, ptr %1218, i32 6
  %1220 = load ptr, ptr %1219, align 8
  %1221 = getelementptr { ptr, ptr, ptr }, ptr %193, i32 0, i32 0
  store ptr @buffer_typ, ptr %1221, align 8
  %1222 = getelementptr { ptr, ptr, ptr }, ptr %193, i32 0, i32 1
  store ptr @i32_typ, ptr %1222, align 8
  %1223 = getelementptr { ptr, ptr, ptr }, ptr %193, i32 0, i32 2
  store ptr @i32_typ, ptr %1223, align 8
  %1224 = call ptr @behavior_wrapper(ptr %1220, { ptr, ptr, ptr, i32 } %1212, ptr %193)
  call void %1224({ ptr, ptr, ptr, i32 } %1212, { ptr, ptr, ptr, i32 } %1212, ptr %192, { ptr } %1200, i32 %1201, i32 %1202) #17
  %1225 = getelementptr { ptr, i160 }, ptr %189, i32 0, i32 0
  %1226 = load ptr, ptr %1225, align 8
  %1227 = insertvalue { ptr, i160 } undef, ptr %1226, 0
  %1228 = getelementptr { ptr, i160 }, ptr %189, i32 0, i32 1
  %1229 = load i160, ptr %1228, align 4
  %1230 = insertvalue { ptr, i160 } %1227, i160 %1229, 1
  %1231 = getelementptr [1 x ptr], ptr %194, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1231, align 8
  %1232 = call ptr @llvm.invariant.start.p0(i64 1, ptr %194)
  %1233 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1234 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1235 = getelementptr { ptr }, ptr %195, i32 0, i32 0
  store ptr %1226, ptr %1235, align 8
  %1236 = call ptr @class_behavior_wrapper(ptr %1234, ptr %195)
  call void %1236(ptr %194, { ptr, i160 } %1230) #17
  %1237 = load i1, ptr %75, align 1
  br i1 %1237, label %1238, label %1297

1238:                                             ; preds = %1123
  store i32 5, ptr %196, align 4
  %1239 = load i32, ptr %196, align 4
  %1240 = sext i32 %1239 to i64
  %1241 = mul i64 %1240, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1242 = call ptr @bump_malloc(i64 %1241)
  store ptr %1242, ptr %197, align 8
  %1243 = getelementptr { ptr }, ptr %197, i32 0, i32 0
  %1244 = load ptr, ptr %1243, align 8
  store ptr %1244, ptr %198, align 8
  store i32 0, ptr %199, align 4
  %1245 = load ptr, ptr %198, align 8
  %1246 = load i32, ptr %199, align 4
  %1247 = sext i32 %1246 to i64
  %1248 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %1247
  %1249 = getelementptr i8, ptr %1245, i64 %1248
  %1250 = load <4 x i8>, ptr @imods_PASS, align 4
  store <4 x i8> %1250, ptr %1249, align 4
  store i32 4, ptr %200, align 4
  store i32 5, ptr %201, align 4
  store ptr @String, ptr %202, align 8
  %1251 = load ptr, ptr %202, align 8
  %1252 = getelementptr ptr, ptr %1251, i32 6
  %1253 = load ptr, ptr %1252, align 8
  %1254 = call { i64, i64 } @size_wrapper(ptr %1253, ptr %202)
  %1255 = extractvalue { i64, i64 } %1254, 0
  %1256 = call ptr @bump_malloc(i64 %1255)
  %1257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 1
  %1258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 3
  store ptr @String, ptr %203, align 8
  store ptr %1256, ptr %1257, align 8
  store i32 10, ptr %1258, align 4
  store i32 4, ptr %204, align 4
  store i32 5, ptr %205, align 4
  %1259 = load ptr, ptr %198, align 8
  %1260 = insertvalue { ptr } undef, ptr %1259, 0
  %1261 = load i32, ptr %204, align 4
  %1262 = load i32, ptr %205, align 4
  %1263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 0
  %1264 = load ptr, ptr %1263, align 8
  %1265 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1264, 0
  %1266 = load ptr, ptr %1257, align 8
  %1267 = insertvalue { ptr, ptr, ptr, i32 } %1265, ptr %1266, 1
  %1268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 2
  %1269 = load ptr, ptr %1268, align 8
  %1270 = insertvalue { ptr, ptr, ptr, i32 } %1267, ptr %1269, 2
  %1271 = load i32, ptr %1258, align 4
  %1272 = insertvalue { ptr, ptr, ptr, i32 } %1270, i32 %1271, 3
  %1273 = getelementptr [3 x ptr], ptr %206, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1273, align 8
  %1274 = getelementptr [3 x ptr], ptr %206, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1274, align 8
  %1275 = getelementptr [3 x ptr], ptr %206, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1275, align 8
  %1276 = call ptr @llvm.invariant.start.p0(i64 9, ptr %206)
  %1277 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1264)
  %1278 = getelementptr ptr, ptr %1264, i32 %1271
  %1279 = getelementptr ptr, ptr %1278, i32 6
  %1280 = load ptr, ptr %1279, align 8
  %1281 = getelementptr { ptr, ptr, ptr }, ptr %207, i32 0, i32 0
  store ptr @buffer_typ, ptr %1281, align 8
  %1282 = getelementptr { ptr, ptr, ptr }, ptr %207, i32 0, i32 1
  store ptr @i32_typ, ptr %1282, align 8
  %1283 = getelementptr { ptr, ptr, ptr }, ptr %207, i32 0, i32 2
  store ptr @i32_typ, ptr %1283, align 8
  %1284 = call ptr @behavior_wrapper(ptr %1280, { ptr, ptr, ptr, i32 } %1272, ptr %207)
  call void %1284({ ptr, ptr, ptr, i32 } %1272, { ptr, ptr, ptr, i32 } %1272, ptr %206, { ptr } %1260, i32 %1261, i32 %1262) #17
  %1285 = getelementptr { ptr, i160 }, ptr %203, i32 0, i32 0
  %1286 = load ptr, ptr %1285, align 8
  %1287 = insertvalue { ptr, i160 } undef, ptr %1286, 0
  %1288 = getelementptr { ptr, i160 }, ptr %203, i32 0, i32 1
  %1289 = load i160, ptr %1288, align 4
  %1290 = insertvalue { ptr, i160 } %1287, i160 %1289, 1
  %1291 = getelementptr [1 x ptr], ptr %208, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1291, align 8
  %1292 = call ptr @llvm.invariant.start.p0(i64 1, ptr %208)
  %1293 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1294 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1295 = getelementptr { ptr }, ptr %209, i32 0, i32 0
  store ptr %1286, ptr %1295, align 8
  %1296 = call ptr @class_behavior_wrapper(ptr %1294, ptr %209)
  call void %1296(ptr %208, { ptr, i160 } %1290) #17
  br label %1356

1297:                                             ; preds = %1123
  store i32 5, ptr %210, align 4
  %1298 = load i32, ptr %210, align 4
  %1299 = sext i32 %1298 to i64
  %1300 = mul i64 %1299, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1301 = call ptr @bump_malloc(i64 %1300)
  store ptr %1301, ptr %211, align 8
  %1302 = getelementptr { ptr }, ptr %211, i32 0, i32 0
  %1303 = load ptr, ptr %1302, align 8
  store ptr %1303, ptr %212, align 8
  store i32 0, ptr %213, align 4
  %1304 = load ptr, ptr %212, align 8
  %1305 = load i32, ptr %213, align 4
  %1306 = sext i32 %1305 to i64
  %1307 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %1306
  %1308 = getelementptr i8, ptr %1304, i64 %1307
  %1309 = load <4 x i8>, ptr @dfwvt_FAIL, align 4
  store <4 x i8> %1309, ptr %1308, align 4
  store i32 4, ptr %214, align 4
  store i32 5, ptr %215, align 4
  store ptr @String, ptr %216, align 8
  %1310 = load ptr, ptr %216, align 8
  %1311 = getelementptr ptr, ptr %1310, i32 6
  %1312 = load ptr, ptr %1311, align 8
  %1313 = call { i64, i64 } @size_wrapper(ptr %1312, ptr %216)
  %1314 = extractvalue { i64, i64 } %1313, 0
  %1315 = call ptr @bump_malloc(i64 %1314)
  %1316 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 1
  %1317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 3
  store ptr @String, ptr %217, align 8
  store ptr %1315, ptr %1316, align 8
  store i32 10, ptr %1317, align 4
  store i32 4, ptr %218, align 4
  store i32 5, ptr %219, align 4
  %1318 = load ptr, ptr %212, align 8
  %1319 = insertvalue { ptr } undef, ptr %1318, 0
  %1320 = load i32, ptr %218, align 4
  %1321 = load i32, ptr %219, align 4
  %1322 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 0
  %1323 = load ptr, ptr %1322, align 8
  %1324 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1323, 0
  %1325 = load ptr, ptr %1316, align 8
  %1326 = insertvalue { ptr, ptr, ptr, i32 } %1324, ptr %1325, 1
  %1327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 2
  %1328 = load ptr, ptr %1327, align 8
  %1329 = insertvalue { ptr, ptr, ptr, i32 } %1326, ptr %1328, 2
  %1330 = load i32, ptr %1317, align 4
  %1331 = insertvalue { ptr, ptr, ptr, i32 } %1329, i32 %1330, 3
  %1332 = getelementptr [3 x ptr], ptr %220, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1332, align 8
  %1333 = getelementptr [3 x ptr], ptr %220, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1333, align 8
  %1334 = getelementptr [3 x ptr], ptr %220, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1334, align 8
  %1335 = call ptr @llvm.invariant.start.p0(i64 9, ptr %220)
  %1336 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1323)
  %1337 = getelementptr ptr, ptr %1323, i32 %1330
  %1338 = getelementptr ptr, ptr %1337, i32 6
  %1339 = load ptr, ptr %1338, align 8
  %1340 = getelementptr { ptr, ptr, ptr }, ptr %221, i32 0, i32 0
  store ptr @buffer_typ, ptr %1340, align 8
  %1341 = getelementptr { ptr, ptr, ptr }, ptr %221, i32 0, i32 1
  store ptr @i32_typ, ptr %1341, align 8
  %1342 = getelementptr { ptr, ptr, ptr }, ptr %221, i32 0, i32 2
  store ptr @i32_typ, ptr %1342, align 8
  %1343 = call ptr @behavior_wrapper(ptr %1339, { ptr, ptr, ptr, i32 } %1331, ptr %221)
  call void %1343({ ptr, ptr, ptr, i32 } %1331, { ptr, ptr, ptr, i32 } %1331, ptr %220, { ptr } %1319, i32 %1320, i32 %1321) #17
  %1344 = getelementptr { ptr, i160 }, ptr %217, i32 0, i32 0
  %1345 = load ptr, ptr %1344, align 8
  %1346 = insertvalue { ptr, i160 } undef, ptr %1345, 0
  %1347 = getelementptr { ptr, i160 }, ptr %217, i32 0, i32 1
  %1348 = load i160, ptr %1347, align 4
  %1349 = insertvalue { ptr, i160 } %1346, i160 %1348, 1
  %1350 = getelementptr [1 x ptr], ptr %222, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1350, align 8
  %1351 = call ptr @llvm.invariant.start.p0(i64 1, ptr %222)
  %1352 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1353 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1354 = getelementptr { ptr }, ptr %223, i32 0, i32 0
  store ptr %1345, ptr %1354, align 8
  %1355 = call ptr @class_behavior_wrapper(ptr %1353, ptr %223)
  call void %1355(ptr %222, { ptr, i160 } %1349) #17
  br label %1356

1356:                                             ; preds = %1297, %1238
  store i32 21, ptr %224, align 4
  %1357 = load i32, ptr %224, align 4
  %1358 = sext i32 %1357 to i64
  %1359 = mul i64 %1358, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1360 = call ptr @bump_malloc(i64 %1359)
  store ptr %1360, ptr %225, align 8
  %1361 = getelementptr { ptr }, ptr %225, i32 0, i32 0
  %1362 = load ptr, ptr %1361, align 8
  store ptr %1362, ptr %226, align 8
  store i32 0, ptr %227, align 4
  %1363 = load ptr, ptr %226, align 8
  %1364 = load i32, ptr %227, align 4
  %1365 = sext i32 %1364 to i64
  %1366 = mul i64 ptrtoint (ptr getelementptr ([20 x i8], ptr null, i32 1) to i64), %1365
  %1367 = getelementptr i8, ptr %1363, i64 %1366
  %1368 = load <20 x i8>, ptr @wdzhj_____Items_removed_, align 32
  store <20 x i8> %1368, ptr %1367, align 32
  store i32 20, ptr %228, align 4
  store i32 21, ptr %229, align 4
  store ptr @String, ptr %230, align 8
  %1369 = load ptr, ptr %230, align 8
  %1370 = getelementptr ptr, ptr %1369, i32 6
  %1371 = load ptr, ptr %1370, align 8
  %1372 = call { i64, i64 } @size_wrapper(ptr %1371, ptr %230)
  %1373 = extractvalue { i64, i64 } %1372, 0
  %1374 = call ptr @bump_malloc(i64 %1373)
  %1375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %231, i32 0, i32 1
  %1376 = getelementptr { ptr, ptr, ptr, i32 }, ptr %231, i32 0, i32 3
  store ptr @String, ptr %231, align 8
  store ptr %1374, ptr %1375, align 8
  store i32 10, ptr %1376, align 4
  store i32 20, ptr %232, align 4
  store i32 21, ptr %233, align 4
  %1377 = load ptr, ptr %226, align 8
  %1378 = insertvalue { ptr } undef, ptr %1377, 0
  %1379 = load i32, ptr %232, align 4
  %1380 = load i32, ptr %233, align 4
  %1381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %231, i32 0, i32 0
  %1382 = load ptr, ptr %1381, align 8
  %1383 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1382, 0
  %1384 = load ptr, ptr %1375, align 8
  %1385 = insertvalue { ptr, ptr, ptr, i32 } %1383, ptr %1384, 1
  %1386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %231, i32 0, i32 2
  %1387 = load ptr, ptr %1386, align 8
  %1388 = insertvalue { ptr, ptr, ptr, i32 } %1385, ptr %1387, 2
  %1389 = load i32, ptr %1376, align 4
  %1390 = insertvalue { ptr, ptr, ptr, i32 } %1388, i32 %1389, 3
  %1391 = getelementptr [3 x ptr], ptr %234, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1391, align 8
  %1392 = getelementptr [3 x ptr], ptr %234, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1392, align 8
  %1393 = getelementptr [3 x ptr], ptr %234, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1393, align 8
  %1394 = call ptr @llvm.invariant.start.p0(i64 9, ptr %234)
  %1395 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1382)
  %1396 = getelementptr ptr, ptr %1382, i32 %1389
  %1397 = getelementptr ptr, ptr %1396, i32 6
  %1398 = load ptr, ptr %1397, align 8
  %1399 = getelementptr { ptr, ptr, ptr }, ptr %235, i32 0, i32 0
  store ptr @buffer_typ, ptr %1399, align 8
  %1400 = getelementptr { ptr, ptr, ptr }, ptr %235, i32 0, i32 1
  store ptr @i32_typ, ptr %1400, align 8
  %1401 = getelementptr { ptr, ptr, ptr }, ptr %235, i32 0, i32 2
  store ptr @i32_typ, ptr %1401, align 8
  %1402 = call ptr @behavior_wrapper(ptr %1398, { ptr, ptr, ptr, i32 } %1390, ptr %235)
  call void %1402({ ptr, ptr, ptr, i32 } %1390, { ptr, ptr, ptr, i32 } %1390, ptr %234, { ptr } %1378, i32 %1379, i32 %1380) #17
  %1403 = getelementptr { ptr, i160 }, ptr %231, i32 0, i32 0
  %1404 = load ptr, ptr %1403, align 8
  %1405 = insertvalue { ptr, i160 } undef, ptr %1404, 0
  %1406 = getelementptr { ptr, i160 }, ptr %231, i32 0, i32 1
  %1407 = load i160, ptr %1406, align 4
  %1408 = insertvalue { ptr, i160 } %1405, i160 %1407, 1
  %1409 = getelementptr [1 x ptr], ptr %236, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1409, align 8
  %1410 = call ptr @llvm.invariant.start.p0(i64 1, ptr %236)
  %1411 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1412 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1413 = getelementptr { ptr }, ptr %237, i32 0, i32 0
  store ptr %1404, ptr %1413, align 8
  %1414 = call ptr @class_behavior_wrapper(ptr %1412, ptr %237)
  call void %1414(ptr %236, { ptr, i160 } %1408) #17
  %1415 = load i32, ptr %74, align 4
  store i32 %1415, ptr %238, align 4
  store ptr @i32_typ, ptr %239, align 8
  %1416 = load ptr, ptr %239, align 8
  %1417 = insertvalue { ptr, i160 } undef, ptr %1416, 0
  %1418 = load i160, ptr %238, align 4
  %1419 = insertvalue { ptr, i160 } %1417, i160 %1418, 1
  %1420 = getelementptr [1 x ptr], ptr %240, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1420, align 8
  %1421 = call ptr @llvm.invariant.start.p0(i64 1, ptr %240)
  %1422 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1423 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1424 = getelementptr { ptr }, ptr %241, i32 0, i32 0
  store ptr %1416, ptr %1424, align 8
  %1425 = call ptr @class_behavior_wrapper(ptr %1423, ptr %241)
  call void %1425(ptr %240, { ptr, i160 } %1419) #17
  store i32 2, ptr %242, align 4
  %1426 = load i32, ptr %242, align 4
  %1427 = sext i32 %1426 to i64
  %1428 = mul i64 %1427, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1429 = call ptr @bump_malloc(i64 %1428)
  store ptr %1429, ptr %243, align 8
  %1430 = getelementptr { ptr }, ptr %243, i32 0, i32 0
  %1431 = load ptr, ptr %1430, align 8
  store ptr %1431, ptr %244, align 8
  store i32 0, ptr %245, align 4
  %1432 = load ptr, ptr %244, align 8
  %1433 = load i32, ptr %245, align 4
  %1434 = sext i32 %1433 to i64
  %1435 = mul i64 ptrtoint (ptr getelementptr ([1 x i8], ptr null, i32 1) to i64), %1434
  %1436 = getelementptr i8, ptr %1432, i64 %1435
  %1437 = load <1 x i8>, ptr @bkuio_, align 1
  store <1 x i8> %1437, ptr %1436, align 1
  store i32 1, ptr %246, align 4
  store i32 2, ptr %247, align 4
  store ptr @String, ptr %248, align 8
  %1438 = load ptr, ptr %248, align 8
  %1439 = getelementptr ptr, ptr %1438, i32 6
  %1440 = load ptr, ptr %1439, align 8
  %1441 = call { i64, i64 } @size_wrapper(ptr %1440, ptr %248)
  %1442 = extractvalue { i64, i64 } %1441, 0
  %1443 = call ptr @bump_malloc(i64 %1442)
  %1444 = getelementptr { ptr, ptr, ptr, i32 }, ptr %249, i32 0, i32 1
  %1445 = getelementptr { ptr, ptr, ptr, i32 }, ptr %249, i32 0, i32 3
  store ptr @String, ptr %249, align 8
  store ptr %1443, ptr %1444, align 8
  store i32 10, ptr %1445, align 4
  store i32 1, ptr %250, align 4
  store i32 2, ptr %251, align 4
  %1446 = load ptr, ptr %244, align 8
  %1447 = insertvalue { ptr } undef, ptr %1446, 0
  %1448 = load i32, ptr %250, align 4
  %1449 = load i32, ptr %251, align 4
  %1450 = getelementptr { ptr, ptr, ptr, i32 }, ptr %249, i32 0, i32 0
  %1451 = load ptr, ptr %1450, align 8
  %1452 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1451, 0
  %1453 = load ptr, ptr %1444, align 8
  %1454 = insertvalue { ptr, ptr, ptr, i32 } %1452, ptr %1453, 1
  %1455 = getelementptr { ptr, ptr, ptr, i32 }, ptr %249, i32 0, i32 2
  %1456 = load ptr, ptr %1455, align 8
  %1457 = insertvalue { ptr, ptr, ptr, i32 } %1454, ptr %1456, 2
  %1458 = load i32, ptr %1445, align 4
  %1459 = insertvalue { ptr, ptr, ptr, i32 } %1457, i32 %1458, 3
  %1460 = getelementptr [3 x ptr], ptr %252, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1460, align 8
  %1461 = getelementptr [3 x ptr], ptr %252, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1461, align 8
  %1462 = getelementptr [3 x ptr], ptr %252, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1462, align 8
  %1463 = call ptr @llvm.invariant.start.p0(i64 9, ptr %252)
  %1464 = call ptr @llvm.invariant.start.p0(i64 632, ptr %1451)
  %1465 = getelementptr ptr, ptr %1451, i32 %1458
  %1466 = getelementptr ptr, ptr %1465, i32 6
  %1467 = load ptr, ptr %1466, align 8
  %1468 = getelementptr { ptr, ptr, ptr }, ptr %253, i32 0, i32 0
  store ptr @buffer_typ, ptr %1468, align 8
  %1469 = getelementptr { ptr, ptr, ptr }, ptr %253, i32 0, i32 1
  store ptr @i32_typ, ptr %1469, align 8
  %1470 = getelementptr { ptr, ptr, ptr }, ptr %253, i32 0, i32 2
  store ptr @i32_typ, ptr %1470, align 8
  %1471 = call ptr @behavior_wrapper(ptr %1467, { ptr, ptr, ptr, i32 } %1459, ptr %253)
  call void %1471({ ptr, ptr, ptr, i32 } %1459, { ptr, ptr, ptr, i32 } %1459, ptr %252, { ptr } %1447, i32 %1448, i32 %1449) #17
  %1472 = getelementptr { ptr, i160 }, ptr %249, i32 0, i32 0
  %1473 = load ptr, ptr %1472, align 8
  %1474 = insertvalue { ptr, i160 } undef, ptr %1473, 0
  %1475 = getelementptr { ptr, i160 }, ptr %249, i32 0, i32 1
  %1476 = load i160, ptr %1475, align 4
  %1477 = insertvalue { ptr, i160 } %1474, i160 %1476, 1
  %1478 = getelementptr [1 x ptr], ptr %254, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1478, align 8
  %1479 = call ptr @llvm.invariant.start.p0(i64 1, ptr %254)
  %1480 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1481 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1482 = getelementptr { ptr }, ptr %255, i32 0, i32 0
  store ptr %1473, ptr %1482, align 8
  %1483 = call ptr @class_behavior_wrapper(ptr %1481, ptr %255)
  call void %1483(ptr %254, { ptr, i160 } %1477) #17
  ret void
}

define i32 @main() {
  %1 = alloca i32, align 4
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [3 x ptr], align 8
  %12 = alloca { ptr, ptr, ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca [1 x ptr], align 8
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca [3 x ptr], align 8
  %27 = alloca { ptr, ptr, ptr }, align 8
  %28 = alloca [1 x ptr], align 8
  %29 = alloca { ptr }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void @setup_landing_pad()
  store i32 23, ptr %1, align 4
  %30 = load i32, ptr %1, align 4
  %31 = sext i32 %30 to i64
  %32 = mul i64 %31, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %33 = call ptr @bump_malloc(i64 %32)
  store ptr %33, ptr %2, align 8
  %34 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  store ptr %35, ptr %3, align 8
  store i32 0, ptr %4, align 4
  %36 = load ptr, ptr %3, align 8
  %37 = load i32, ptr %4, align 4
  %38 = sext i32 %37 to i64
  %39 = mul i64 ptrtoint (ptr getelementptr ([22 x i8], ptr null, i32 1) to i64), %38
  %40 = getelementptr i8, ptr %36, i64 %39
  %41 = load <22 x i8>, ptr @mmtbh__Map_Benchmarks_, align 32
  store <22 x i8> %41, ptr %40, align 32
  store i32 22, ptr %5, align 4
  store i32 23, ptr %6, align 4
  store ptr @String, ptr %7, align 8
  %42 = load ptr, ptr %7, align 8
  %43 = getelementptr ptr, ptr %42, i32 6
  %44 = load ptr, ptr %43, align 8
  %45 = call { i64, i64 } @size_wrapper(ptr %44, ptr %7)
  %46 = extractvalue { i64, i64 } %45, 0
  %47 = call ptr @bump_malloc(i64 %46)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  store ptr @String, ptr %8, align 8
  store ptr %47, ptr %48, align 8
  store i32 10, ptr %49, align 4
  store i32 22, ptr %9, align 4
  store i32 23, ptr %10, align 4
  %50 = load ptr, ptr %3, align 8
  %51 = insertvalue { ptr } undef, ptr %50, 0
  %52 = load i32, ptr %9, align 4
  %53 = load i32, ptr %10, align 4
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = load ptr, ptr %48, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = load i32, ptr %49, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %62, 3
  %64 = getelementptr [3 x ptr], ptr %11, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %64, align 8
  %65 = getelementptr [3 x ptr], ptr %11, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %65, align 8
  %66 = getelementptr [3 x ptr], ptr %11, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 9, ptr %11)
  %68 = call ptr @llvm.invariant.start.p0(i64 632, ptr %55)
  %69 = getelementptr ptr, ptr %55, i32 %62
  %70 = getelementptr ptr, ptr %69, i32 6
  %71 = load ptr, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %12, i32 0, i32 0
  store ptr @buffer_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %12, i32 0, i32 1
  store ptr @i32_typ, ptr %73, align 8
  %74 = getelementptr { ptr, ptr, ptr }, ptr %12, i32 0, i32 2
  store ptr @i32_typ, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr %71, { ptr, ptr, ptr, i32 } %63, ptr %12)
  call void %75({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr %11, { ptr } %51, i32 %52, i32 %53) #17
  %76 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, i160 } undef, ptr %77, 0
  %79 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %80 = load i160, ptr %79, align 4
  %81 = insertvalue { ptr, i160 } %78, i160 %80, 1
  %82 = getelementptr [1 x ptr], ptr %13, i32 0, i32 0
  store ptr @_parameterization_String, ptr %82, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 1, ptr %13)
  %84 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %85 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %86 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  store ptr %77, ptr %86, align 8
  %87 = call ptr @class_behavior_wrapper(ptr %85, ptr %14)
  call void %87(ptr %13, { ptr, i160 } %81) #17
  store i32 1000000, ptr %15, align 4
  %88 = load i32, ptr %15, align 4
  call void @benchmark_insert_sequential(i32 %88)
  %89 = load i32, ptr %15, align 4
  call void @benchmark_insert_random(i32 %89)
  %90 = load i32, ptr %15, align 4
  call void @benchmark_get_sequential_hit(i32 %90)
  %91 = load i32, ptr %15, align 4
  call void @benchmark_get_random_hit(i32 %91)
  %92 = load i32, ptr %15, align 4
  call void @benchmark_get_random_miss(i32 %92)
  %93 = load i32, ptr %15, align 4
  call void @benchmark_remove_random(i32 %93)
  store i32 28, ptr %16, align 4
  %94 = load i32, ptr %16, align 4
  %95 = sext i32 %94 to i64
  %96 = mul i64 %95, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %97 = call ptr @bump_malloc(i64 %96)
  store ptr %97, ptr %17, align 8
  %98 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  store ptr %99, ptr %18, align 8
  store i32 0, ptr %19, align 4
  %100 = load ptr, ptr %18, align 8
  %101 = load i32, ptr %19, align 4
  %102 = sext i32 %101 to i64
  %103 = mul i64 ptrtoint (ptr getelementptr ([27 x i8], ptr null, i32 1) to i64), %102
  %104 = getelementptr i8, ptr %100, i64 %103
  %105 = load <27 x i8>, ptr @jvapi__Benchmarks_Complete_, align 32
  store <27 x i8> %105, ptr %104, align 32
  store i32 27, ptr %20, align 4
  store i32 28, ptr %21, align 4
  store ptr @String, ptr %22, align 8
  %106 = load ptr, ptr %22, align 8
  %107 = getelementptr ptr, ptr %106, i32 6
  %108 = load ptr, ptr %107, align 8
  %109 = call { i64, i64 } @size_wrapper(ptr %108, ptr %22)
  %110 = extractvalue { i64, i64 } %109, 0
  %111 = call ptr @bump_malloc(i64 %110)
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr @String, ptr %23, align 8
  store ptr %111, ptr %112, align 8
  store i32 10, ptr %113, align 4
  store i32 27, ptr %24, align 4
  store i32 28, ptr %25, align 4
  %114 = load ptr, ptr %18, align 8
  %115 = insertvalue { ptr } undef, ptr %114, 0
  %116 = load i32, ptr %24, align 4
  %117 = load i32, ptr %25, align 4
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %121 = load ptr, ptr %112, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 2
  %126 = load i32, ptr %113, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %126, 3
  %128 = getelementptr [3 x ptr], ptr %26, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %128, align 8
  %129 = getelementptr [3 x ptr], ptr %26, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %129, align 8
  %130 = getelementptr [3 x ptr], ptr %26, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %130, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 9, ptr %26)
  %132 = call ptr @llvm.invariant.start.p0(i64 632, ptr %119)
  %133 = getelementptr ptr, ptr %119, i32 %126
  %134 = getelementptr ptr, ptr %133, i32 6
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr, ptr, ptr }, ptr %27, i32 0, i32 0
  store ptr @buffer_typ, ptr %136, align 8
  %137 = getelementptr { ptr, ptr, ptr }, ptr %27, i32 0, i32 1
  store ptr @i32_typ, ptr %137, align 8
  %138 = getelementptr { ptr, ptr, ptr }, ptr %27, i32 0, i32 2
  store ptr @i32_typ, ptr %138, align 8
  %139 = call ptr @behavior_wrapper(ptr %135, { ptr, ptr, ptr, i32 } %127, ptr %27)
  call void %139({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %26, { ptr } %115, i32 %116, i32 %117) #17
  %140 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, i160 } undef, ptr %141, 0
  %143 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %144 = load i160, ptr %143, align 4
  %145 = insertvalue { ptr, i160 } %142, i160 %144, 1
  %146 = getelementptr [1 x ptr], ptr %28, i32 0, i32 0
  store ptr @_parameterization_String, ptr %146, align 8
  %147 = call ptr @llvm.invariant.start.p0(i64 1, ptr %28)
  %148 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %149 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %150 = getelementptr { ptr }, ptr %29, i32 0, i32 0
  store ptr %141, ptr %150, align 8
  %151 = call ptr @class_behavior_wrapper(ptr %149, ptr %29)
  call void %151(ptr %28, { ptr, i160 } %145) #17
  ret i32 0
}

define { i64, i64 } @_data_size_bool_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_bool_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @bool_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_bool_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_bool_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_bool_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

define { i64, i64 } @_data_size_any_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_data_size_Object(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_data_size_i8_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i8_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i8_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i8_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i8_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i8_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_i32_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i32_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i32_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i32_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i32_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i32_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_i64_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i64 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i64 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i64_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i64_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i64_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_i128_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i128 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i128 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i128, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i128, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i128_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i128_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i128_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i128_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i128_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_f64_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_f64_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @f64_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_f64_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_f64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_f64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_nil_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_nil_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @nil_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_nil_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_nil_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_nil_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_nothing_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_nothing_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @nothing_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_nothing_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_nothing_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_nothing_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_coroutine_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_coroutine_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @coroutine_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_coroutine_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_coroutine_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_coroutine_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_function_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_function_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @function_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_function_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_function_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_function_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_buffer_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_buffer_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @buffer_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_buffer_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_buffer_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_buffer_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_tuple_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @tuple_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_tuple_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_tuple_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_tuple_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_union_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem6, align 8
  store ptr @union_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_union_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload5 = load i64, ptr %.reg2mem, align 4
  %7 = icmp eq i64 %.reload5, 32
  br i1 %7, label %._crit_edge, label %9

._crit_edge:                                      ; preds = %2
  store ptr %3, ptr %.reg2mem10, align 8
  br label %8

8:                                                ; preds = %._crit_edge1, %._crit_edge
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %.reload4 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload11, ptr %0, i64 %.reload4, i1 false)
  br label %13

9:                                                ; preds = %2
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %10 = icmp sle i64 %.reload3, 16
  br i1 %10, label %._crit_edge1, label %11

._crit_edge1:                                     ; preds = %9
  %.reload9 = load ptr, ptr %.reg2mem6, align 8
  store ptr %.reload9, ptr %.reg2mem10, align 8
  br label %8

11:                                               ; preds = %9
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %12 = call ptr @bump_malloc(i64 %.reload2)
  %.reload = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %12, ptr %0, i64 %.reload, i1 false)
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  store ptr %12, ptr %.reload8, align 8
  br label %13

13:                                               ; preds = %11, %8
  %14 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, i160 } undef, ptr %15, 0
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %17 = load i160, ptr %.reload7, align 4
  %18 = insertvalue { ptr, i160 } %16, i160 %17, 1
  ret { ptr, i160 } %18
}

define { i64, i64 } @_data_size_Entry(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = getelementptr ptr, ptr %0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 9
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = extractvalue { i64, i64 } %25, 1
  %28 = icmp ugt i64 %27, %13
  %29 = select i1 %28, i64 %27, i64 %13
  %30 = urem i64 %19, %27
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 %27, %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 %26, %33
  %35 = add i64 %19, %34
  %36 = getelementptr ptr, ptr %0, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr ptr, ptr %38, i32 9
  %40 = load ptr, ptr %39, align 8
  %41 = call { i64, i64 } @size_wrapper(ptr %40, ptr %37)
  %42 = extractvalue { i64, i64 } %41, 0
  %43 = extractvalue { i64, i64 } %41, 1
  %44 = icmp ugt i64 %43, %29
  %45 = select i1 %44, i64 %43, i64 %29
  %46 = urem i64 %35, %43
  %47 = icmp eq i64 %46, 0
  %48 = sub i64 %43, %46
  %49 = select i1 %47, i64 0, i64 %48
  %50 = add i64 %42, %49
  %51 = add i64 %35, %50
  %52 = urem i64 %51, %45
  %53 = icmp eq i64 %52, 0
  %54 = sub i64 %45, %52
  %55 = select i1 %53, i64 0, i64 %54
  %56 = add i64 %51, %55
  %57 = insertvalue { i64, i64 } undef, i64 %56, 0
  %58 = insertvalue { i64, i64 } %57, i64 %45, 1
  ret { i64, i64 } %58
}

define ptr @Entry_field_Entry_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Entry_field_Entry_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @Entry_B_init_keyK_valueV_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 0, i32 1
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 0, i32 2
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 1, i32 0
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 1, i32 1
  %13 = load i64, ptr %9, align 4
  %14 = load i64, ptr %10, align 4
  %15 = load ptr, ptr %11, align 8
  %16 = load ptr, ptr %12, align 8
  %17 = load i64, ptr @any_typ, align 4
  %18 = call i1 @subtype_test_wrapper(ptr %15, i64 %14, i64 %13, i64 %17, i64 ptrtoint (ptr @any_typ to i64), ptr %16)
  store i1 %18, ptr %5, align 1
  %19 = getelementptr ptr, ptr %1, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 0, i32 1
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 0, i32 2
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 1, i32 0
  %24 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 1, i32 1
  %25 = load i64, ptr %21, align 4
  %26 = load i64, ptr %22, align 4
  %27 = load ptr, ptr %23, align 8
  %28 = load ptr, ptr %24, align 8
  %29 = load i64, ptr @any_typ, align 4
  %30 = call i1 @subtype_test_wrapper(ptr %27, i64 %26, i64 %25, i64 %29, i64 ptrtoint (ptr @any_typ to i64), ptr %28)
  store i1 %30, ptr %4, align 1
  %31 = getelementptr ptr, ptr %1, i32 2
  %32 = load ptr, ptr %31, align 8
  %33 = ptrtoint ptr %32 to i64
  %34 = icmp eq i64 %33, ptrtoint (ptr @i32_typ to i64)
  store i1 %34, ptr %3, align 1
  store i32 10, ptr %7, align 4
  %35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %36 = load i32, ptr %7, align 4
  %37 = getelementptr [15 x ptr], ptr %35, i32 0, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 10
  %39 = load ptr, ptr %38, align 8
  ret ptr %39
}

define ptr @Entry_B_key_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 11, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [15 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Entry_B_value_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [15 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Entry_B_primary_hash_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 13, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [15 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Entry_B_to_pair_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 14, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [15 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Entry_init_keyK_valueV_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Entry)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = alloca i160, align 8
  %23 = alloca ptr, align 8
  %24 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  store ptr %25, ptr %23, align 8
  %26 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %27 = load i160, ptr %26, align 4
  store i160 %27, ptr %22, align 4
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load ptr, ptr %23, align 8
  store ptr %30, ptr %29, align 8
  %31 = load i160, ptr %22, align 4
  store i160 %31, ptr %28, align 4
  %32 = load ptr, ptr %13, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 120, ptr %33)
  %35 = load i32, ptr %19, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 3
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = load ptr, ptr %29, align 8
  %42 = insertvalue { ptr, i160 } undef, ptr %41, 0
  %43 = load i160, ptr %28, align 4
  %44 = insertvalue { ptr, i160 } %42, i160 %43, 1
  call void %40(ptr %32, { ptr, i160 } %44) #15
  %45 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %45, align 8
  %46 = alloca i160, align 8
  %47 = alloca ptr, align 8
  %48 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  store ptr %49, ptr %47, align 8
  %50 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 1
  %51 = load i160, ptr %50, align 4
  store i160 %51, ptr %46, align 4
  %52 = alloca i160, align 8
  %53 = alloca ptr, align 8
  %54 = load ptr, ptr %47, align 8
  store ptr %54, ptr %53, align 8
  %55 = load i160, ptr %46, align 4
  store i160 %55, ptr %52, align 4
  %56 = load ptr, ptr %13, align 8
  %57 = load ptr, ptr %8, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 120, ptr %57)
  %59 = load i32, ptr %19, align 4
  %60 = getelementptr ptr, ptr %57, i32 %59
  %61 = getelementptr ptr, ptr %60, i32 4
  %62 = load ptr, ptr %61, align 8
  %63 = getelementptr { ptr, ptr }, ptr %62, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = load ptr, ptr %53, align 8
  %66 = insertvalue { ptr, i160 } undef, ptr %65, 0
  %67 = load i160, ptr %52, align 4
  %68 = insertvalue { ptr, i160 } %66, i160 %67, 1
  call void %64(ptr %56, { ptr, i160 } %68) #15
  %69 = alloca i32, align 4
  store i32 %5, ptr %69, align 4
  %70 = load ptr, ptr %13, align 8
  %71 = load ptr, ptr %8, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 120, ptr %71)
  %73 = load i32, ptr %19, align 4
  %74 = getelementptr ptr, ptr %71, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 2
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = load i32, ptr %69, align 4
  call void %78(ptr %70, i32 %79) #15
  ret void
}

define { ptr, i160 } @Entry_key_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Entry)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 120, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, i160 } %26(ptr %18) #16
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %27, ptr %28, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  store ptr %32, ptr %30, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %33, align 4
  store i160 %34, ptr %29, align 4
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = load ptr, ptr %30, align 8
  store ptr %37, ptr %36, align 8
  %38 = load i160, ptr %29, align 4
  store i160 %38, ptr %35, align 4
  %39 = load ptr, ptr %36, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = load i160, ptr %35, align 4
  %42 = insertvalue { ptr, i160 } %40, i160 %41, 1
  ret { ptr, i160 } %42
}

define { ptr, i160 } @Entry_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Entry)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 120, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 4
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, i160 } %26(ptr %18) #16
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %27, ptr %28, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  store ptr %32, ptr %30, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %33, align 4
  store i160 %34, ptr %29, align 4
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = load ptr, ptr %30, align 8
  store ptr %37, ptr %36, align 8
  %38 = load i160, ptr %29, align 4
  store i160 %38, ptr %35, align 4
  %39 = load ptr, ptr %36, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = load i160, ptr %35, align 4
  %42 = insertvalue { ptr, i160 } %40, i160 %41, 1
  ret { ptr, i160 } %42
}

define i32 @Entry_primary_hash_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Entry)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 120, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #16
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr, ptr, ptr, i32 } @Entry_to_pair_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Entry)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 120, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, i160 } %26(ptr %18) #16
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %27, ptr %28, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  store ptr %32, ptr %30, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %33, align 4
  store i160 %34, ptr %29, align 4
  %35 = load ptr, ptr %10, align 8
  %36 = load ptr, ptr %5, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 120, ptr %36)
  %38 = load i32, ptr %16, align 4
  %39 = getelementptr ptr, ptr %36, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 4
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call { ptr, i160 } %43(ptr %35) #16
  %45 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %44, ptr %45, align 8
  %46 = alloca i160, align 8
  %47 = alloca ptr, align 8
  %48 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  store ptr %49, ptr %47, align 8
  %50 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 1
  %51 = load i160, ptr %50, align 4
  store i160 %51, ptr %46, align 4
  %52 = load ptr, ptr %10, align 8
  %53 = load ptr, ptr %5, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 120, ptr %53)
  %55 = load i32, ptr %16, align 4
  %56 = getelementptr ptr, ptr %53, i32 %55
  %57 = load ptr, ptr %56, align 8
  %58 = call ptr @typegetter_wrapper(ptr %57, ptr %52)
  %59 = load ptr, ptr %10, align 8
  %60 = load ptr, ptr %5, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 120, ptr %60)
  %62 = load i32, ptr %16, align 4
  %63 = getelementptr ptr, ptr %60, i32 %62
  %64 = getelementptr ptr, ptr %63, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr @typegetter_wrapper(ptr %65, ptr %59)
  %67 = alloca [3 x ptr], align 8
  store ptr @Pair, ptr %67, align 8
  %68 = getelementptr ptr, ptr %67, i32 1
  store ptr %58, ptr %68, align 8
  %69 = getelementptr ptr, ptr %67, i32 2
  store ptr %66, ptr %69, align 8
  %70 = load ptr, ptr %67, align 8
  %71 = getelementptr ptr, ptr %70, i32 6
  %72 = load ptr, ptr %71, align 8
  %73 = call { i64, i64 } @size_wrapper(ptr %72, ptr %67)
  %74 = extractvalue { i64, i64 } %73, 0
  %75 = call ptr @bump_malloc(i64 %74)
  store ptr %58, ptr %75, align 8
  %76 = getelementptr ptr, ptr %75, i32 1
  store ptr %66, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %78 = alloca i32, align 4
  %79 = alloca ptr, align 8
  %80 = alloca ptr, align 8
  %81 = alloca ptr, align 8
  store ptr @Pair, ptr %81, align 8
  store ptr %75, ptr %80, align 8
  store i32 10, ptr %78, align 4
  %82 = load ptr, ptr %10, align 8
  %83 = load ptr, ptr %5, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 120, ptr %83)
  %85 = load i32, ptr %16, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 3
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = call { ptr, i160 } %90(ptr %82) #16
  %92 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %91, ptr %92, align 8
  %93 = alloca i160, align 8
  %94 = alloca ptr, align 8
  %95 = getelementptr { ptr, i160 }, ptr %92, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  store ptr %96, ptr %94, align 8
  %97 = getelementptr { ptr, i160 }, ptr %92, i32 0, i32 1
  %98 = load i160, ptr %97, align 4
  store i160 %98, ptr %93, align 4
  %99 = load ptr, ptr %10, align 8
  %100 = load ptr, ptr %5, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 120, ptr %100)
  %102 = load i32, ptr %16, align 4
  %103 = getelementptr ptr, ptr %100, i32 %102
  %104 = getelementptr ptr, ptr %103, i32 4
  %105 = load ptr, ptr %104, align 8
  %106 = getelementptr { ptr, ptr }, ptr %105, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = call { ptr, i160 } %107(ptr %99) #16
  %109 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %108, ptr %109, align 8
  %110 = alloca i160, align 8
  %111 = alloca ptr, align 8
  %112 = getelementptr { ptr, i160 }, ptr %109, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  store ptr %113, ptr %111, align 8
  %114 = getelementptr { ptr, i160 }, ptr %109, i32 0, i32 1
  %115 = load i160, ptr %114, align 4
  store i160 %115, ptr %110, align 4
  %116 = alloca i160, align 8
  %117 = alloca ptr, align 8
  %118 = load ptr, ptr %94, align 8
  store ptr %118, ptr %117, align 8
  %119 = load i160, ptr %93, align 4
  store i160 %119, ptr %116, align 4
  %120 = load ptr, ptr %117, align 8
  %121 = insertvalue { ptr, i160 } undef, ptr %120, 0
  %122 = load i160, ptr %116, align 4
  %123 = insertvalue { ptr, i160 } %121, i160 %122, 1
  %124 = alloca i160, align 8
  %125 = alloca ptr, align 8
  %126 = load ptr, ptr %111, align 8
  store ptr %126, ptr %125, align 8
  %127 = load i160, ptr %110, align 4
  store i160 %127, ptr %124, align 4
  %128 = load ptr, ptr %125, align 8
  %129 = insertvalue { ptr, i160 } undef, ptr %128, 0
  %130 = load i160, ptr %124, align 4
  %131 = insertvalue { ptr, i160 } %129, i160 %130, 1
  %132 = load ptr, ptr %81, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %132, 0
  %134 = load ptr, ptr %80, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %134, 1
  %136 = load ptr, ptr %79, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %136, 2
  %138 = load i32, ptr %78, align 4
  %139 = insertvalue { ptr, ptr, ptr, i32 } %137, i32 %138, 3
  %140 = load ptr, ptr %10, align 8
  %141 = load ptr, ptr %5, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 120, ptr %141)
  %143 = load i32, ptr %16, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = load ptr, ptr %144, align 8
  %146 = call ptr @typegetter_wrapper(ptr %145, ptr %140)
  %147 = load ptr, ptr %10, align 8
  %148 = load ptr, ptr %5, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 120, ptr %148)
  %150 = load i32, ptr %16, align 4
  %151 = getelementptr ptr, ptr %148, i32 %150
  %152 = getelementptr ptr, ptr %151, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = call ptr @typegetter_wrapper(ptr %153, ptr %147)
  %155 = alloca [2 x ptr], align 8
  %156 = getelementptr [2 x ptr], ptr %155, i32 0, i32 0
  store ptr %146, ptr %156, align 8
  %157 = getelementptr [2 x ptr], ptr %155, i32 0, i32 1
  store ptr %154, ptr %157, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 4, ptr %155)
  %159 = call ptr @llvm.invariant.start.p0(i64 80, ptr %132)
  %160 = getelementptr ptr, ptr %132, i32 %138
  %161 = getelementptr ptr, ptr %160, i32 4
  %162 = load ptr, ptr %161, align 8
  %163 = alloca { ptr, ptr }, align 8
  %164 = getelementptr { ptr, ptr }, ptr %163, i32 0, i32 0
  store ptr %120, ptr %164, align 8
  %165 = getelementptr { ptr, ptr }, ptr %163, i32 0, i32 1
  store ptr %128, ptr %165, align 8
  %166 = call ptr @behavior_wrapper(ptr %162, { ptr, ptr, ptr, i32 } %139, ptr %163)
  call void %166({ ptr, ptr, ptr, i32 } %139, { ptr, ptr, ptr, i32 } %139, ptr %155, { ptr, i160 } %123, { ptr, i160 } %131) #17
  %167 = alloca { ptr, ptr, ptr, i32 }, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 0
  %169 = load ptr, ptr %81, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 1
  %171 = load ptr, ptr %80, align 8
  store ptr %171, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 2
  %173 = load ptr, ptr %79, align 8
  store ptr %173, ptr %172, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 3
  %175 = load i32, ptr %78, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %167, ptr @Pair)
  %176 = load ptr, ptr %168, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %176, 0
  %178 = load ptr, ptr %170, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } %177, ptr %178, 1
  %180 = load ptr, ptr %172, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %180, 2
  %182 = load i32, ptr %174, align 4
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %182, 3
  ret { ptr, ptr, ptr, i32 } %183
}

define { ptr, i160 } @Entry_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr ptr, ptr %15, i32 9
  %17 = load ptr, ptr %16, align 8
  %18 = call { i64, i64 } @size_wrapper(ptr %17, ptr %14)
  %19 = extractvalue { i64, i64 } %18, 0
  %20 = extractvalue { i64, i64 } %18, 1
  %21 = urem i64 %13, %20
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 %20, %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %19, %24
  %26 = add i64 %13, %25
  %27 = getelementptr ptr, ptr %0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 9
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %28)
  %33 = extractvalue { i64, i64 } %32, 1
  %34 = urem i64 %26, %33
  %35 = icmp eq i64 %34, 0
  %36 = sub i64 %33, %34
  %37 = select i1 %35, i64 0, i64 %36
  %38 = add i64 %26, %37
  %39 = getelementptr i8, ptr %0, i64 %38
  %40 = load ptr, ptr %27, align 8
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr ptr, ptr %41, i32 7
  %43 = load ptr, ptr %42, align 8
  %44 = call { ptr, i160 } @box_wrapper(ptr %43, ptr %39, ptr %40)
  ret { ptr, i160 } %44
}

define void @Entry_setter_value(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = load ptr, ptr %0, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr %18, ptr %15)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = extractvalue { i64, i64 } %19, 1
  %22 = urem i64 %14, %21
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %21, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 %20, %25
  %27 = add i64 %14, %26
  %28 = getelementptr ptr, ptr %0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 9
  %32 = load ptr, ptr %31, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr %32, ptr %29)
  %34 = extractvalue { i64, i64 } %33, 1
  %35 = urem i64 %27, %34
  %36 = icmp eq i64 %35, 0
  %37 = sub i64 %34, %35
  %38 = select i1 %36, i64 0, i64 %37
  %39 = add i64 %27, %38
  %40 = getelementptr i8, ptr %0, i64 %39
  %41 = load ptr, ptr %28, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr ptr, ptr %42, i32 8
  %44 = load ptr, ptr %43, align 8
  call void @unbox_wrapper(ptr %44, { ptr, i160 } %1, ptr %41, ptr %40)
  ret void
}

define { ptr, i160 } @Entry_getter_key(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr ptr, ptr %15, i32 9
  %17 = load ptr, ptr %16, align 8
  %18 = call { i64, i64 } @size_wrapper(ptr %17, ptr %14)
  %19 = extractvalue { i64, i64 } %18, 1
  %20 = urem i64 %13, %19
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %19, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %13, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = load ptr, ptr %0, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } @box_wrapper(ptr %29, ptr %25, ptr %26)
  ret { ptr, i160 } %30
}

define void @Entry_setter_key(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = load ptr, ptr %0, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr %18, ptr %15)
  %20 = extractvalue { i64, i64 } %19, 1
  %21 = urem i64 %14, %20
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 %20, %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %14, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = load ptr, ptr %0, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr ptr, ptr %28, i32 8
  %30 = load ptr, ptr %29, align 8
  call void @unbox_wrapper(ptr %30, { ptr, i160 } %1, ptr %27, ptr %26)
  ret void
}

define i32 @Entry_getter_primary_hash(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Entry_setter_primary_hash(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define { i64, i64 } @_data_size_CuckooMap(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %29
  %37 = select i1 %36, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %29
  %38 = urem i64 %35, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %41
  %43 = add i64 %35, %42
  %44 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %37
  %45 = select i1 %44, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %37
  %46 = urem i64 %43, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %47 = icmp eq i64 %46, 0
  %48 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %46
  %49 = select i1 %47, i64 0, i64 %48
  %50 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %49
  %51 = add i64 %43, %50
  %52 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %45
  %53 = select i1 %52, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %45
  %54 = urem i64 %51, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %55 = icmp eq i64 %54, 0
  %56 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %54
  %57 = select i1 %55, i64 0, i64 %56
  %58 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %57
  %59 = add i64 %51, %58
  %60 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %53
  %61 = select i1 %60, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %53
  %62 = urem i64 %59, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %63 = icmp eq i64 %62, 0
  %64 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %62
  %65 = select i1 %63, i64 0, i64 %64
  %66 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %65
  %67 = add i64 %59, %66
  %68 = urem i64 %67, %61
  %69 = icmp eq i64 %68, 0
  %70 = sub i64 %61, %68
  %71 = select i1 %69, i64 0, i64 %70
  %72 = add i64 %67, %71
  %73 = insertvalue { i64, i64 } undef, i64 %72, 0
  %74 = insertvalue { i64, i64 } %73, i64 %61, 1
  ret { i64, i64 } %74
}

define ptr @CuckooMap_field_CuckooMap_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @CuckooMap_field_CuckooMap_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @CuckooMap_field_CuckooMap_6(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @CuckooMap_B__Self_max_displacements_(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 0, ptr %0)
  %3 = alloca ptr, align 8
  store i32 39, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr [272 x ptr], ptr @CuckooMap, i32 0, i32 %4
  %6 = getelementptr ptr, ptr %5, i32 10
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @CuckooMap_B_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @function_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @function_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 40, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [272 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @CuckooMap_B_hash1_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 41, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [272 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @CuckooMap_B_hash2_from_primary_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 42, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [272 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @CuckooMap_B_index1_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 43, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [272 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @CuckooMap_B_index2_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 44, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [272 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @CuckooMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Entry, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Entry to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 45, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [272 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @CuckooMap_B_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @buffer_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @i32_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 46, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [272 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @CuckooMap_B_resize_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 47, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [272 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @CuckooMap_B_replace_in_table_keyK_valueV_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %8 = call ptr @llvm.invariant.start.p0(i64 40, ptr %1)
  %9 = alloca ptr, align 8
  %10 = load ptr, ptr %1, align 8
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %10, i32 0, i32 0, i32 1
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %10, i32 0, i32 0, i32 2
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %10, i32 0, i32 1, i32 0
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %10, i32 0, i32 1, i32 1
  %15 = load i64, ptr %11, align 4
  %16 = load i64, ptr %12, align 4
  %17 = load ptr, ptr %13, align 8
  %18 = load ptr, ptr %14, align 8
  %19 = load i64, ptr @any_typ, align 4
  %20 = call i1 @subtype_test_wrapper(ptr %17, i64 %16, i64 %15, i64 %19, i64 ptrtoint (ptr @any_typ to i64), ptr %18)
  store i1 %20, ptr %7, align 1
  %21 = getelementptr ptr, ptr %1, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %22, i32 0, i32 0, i32 1
  %24 = getelementptr { [3 x i64], [3 x ptr] }, ptr %22, i32 0, i32 0, i32 2
  %25 = getelementptr { [3 x i64], [3 x ptr] }, ptr %22, i32 0, i32 1, i32 0
  %26 = getelementptr { [3 x i64], [3 x ptr] }, ptr %22, i32 0, i32 1, i32 1
  %27 = load i64, ptr %23, align 4
  %28 = load i64, ptr %24, align 4
  %29 = load ptr, ptr %25, align 8
  %30 = load ptr, ptr %26, align 8
  %31 = load i64, ptr @any_typ, align 4
  %32 = call i1 @subtype_test_wrapper(ptr %29, i64 %28, i64 %27, i64 %31, i64 ptrtoint (ptr @any_typ to i64), ptr %30)
  store i1 %32, ptr %6, align 1
  %33 = getelementptr ptr, ptr %1, i32 2
  %34 = load ptr, ptr %33, align 8
  %35 = ptrtoint ptr %34 to i64
  %36 = icmp eq i64 %35, ptrtoint (ptr @i32_typ to i64)
  store i1 %36, ptr %5, align 1
  %37 = getelementptr ptr, ptr %1, i32 3
  %38 = load ptr, ptr %37, align 8
  %39 = ptrtoint ptr %38 to i64
  %40 = icmp eq i64 %39, ptrtoint (ptr @i32_typ to i64)
  store i1 %40, ptr %4, align 1
  %41 = getelementptr ptr, ptr %1, i32 4
  %42 = load ptr, ptr %41, align 8
  %43 = ptrtoint ptr %42 to i64
  %44 = icmp eq i64 %43, ptrtoint (ptr @buffer_typ to i64)
  store i1 %44, ptr %3, align 1
  store i32 48, ptr %9, align 4
  %45 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %46 = load i32, ptr %9, align 4
  %47 = getelementptr [272 x ptr], ptr %45, i32 0, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 10
  %49 = load ptr, ptr %48, align 8
  ret ptr %49
}

define ptr @CuckooMap_B_get_from_table_keyK_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %7 = call ptr @llvm.invariant.start.p0(i64 32, ptr %1)
  %8 = alloca ptr, align 8
  %9 = load ptr, ptr %1, align 8
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %9, i32 0, i32 0, i32 1
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %9, i32 0, i32 0, i32 2
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %9, i32 0, i32 1, i32 0
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %9, i32 0, i32 1, i32 1
  %14 = load i64, ptr %10, align 4
  %15 = load i64, ptr %11, align 4
  %16 = load ptr, ptr %12, align 8
  %17 = load ptr, ptr %13, align 8
  %18 = load i64, ptr @any_typ, align 4
  %19 = call i1 @subtype_test_wrapper(ptr %16, i64 %15, i64 %14, i64 %18, i64 ptrtoint (ptr @any_typ to i64), ptr %17)
  store i1 %19, ptr %6, align 1
  %20 = getelementptr ptr, ptr %1, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = ptrtoint ptr %21 to i64
  %23 = icmp eq i64 %22, ptrtoint (ptr @i32_typ to i64)
  store i1 %23, ptr %5, align 1
  %24 = getelementptr ptr, ptr %1, i32 2
  %25 = load ptr, ptr %24, align 8
  %26 = ptrtoint ptr %25 to i64
  %27 = icmp eq i64 %26, ptrtoint (ptr @i32_typ to i64)
  store i1 %27, ptr %4, align 1
  %28 = getelementptr ptr, ptr %1, i32 3
  %29 = load ptr, ptr %28, align 8
  %30 = ptrtoint ptr %29 to i64
  %31 = icmp eq i64 %30, ptrtoint (ptr @buffer_typ to i64)
  store i1 %31, ptr %3, align 1
  store i32 49, ptr %8, align 4
  %32 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %33 = load i32, ptr %8, align 4
  %34 = getelementptr [272 x ptr], ptr %32, i32 0, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 10
  %36 = load ptr, ptr %35, align 8
  ret ptr %36
}

define ptr @CuckooMap_B_remove_from_table_keyK_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %7 = call ptr @llvm.invariant.start.p0(i64 32, ptr %1)
  %8 = alloca ptr, align 8
  %9 = load ptr, ptr %1, align 8
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %9, i32 0, i32 0, i32 1
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %9, i32 0, i32 0, i32 2
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %9, i32 0, i32 1, i32 0
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %9, i32 0, i32 1, i32 1
  %14 = load i64, ptr %10, align 4
  %15 = load i64, ptr %11, align 4
  %16 = load ptr, ptr %12, align 8
  %17 = load ptr, ptr %13, align 8
  %18 = load i64, ptr @any_typ, align 4
  %19 = call i1 @subtype_test_wrapper(ptr %16, i64 %15, i64 %14, i64 %18, i64 ptrtoint (ptr @any_typ to i64), ptr %17)
  store i1 %19, ptr %6, align 1
  %20 = getelementptr ptr, ptr %1, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = ptrtoint ptr %21 to i64
  %23 = icmp eq i64 %22, ptrtoint (ptr @i32_typ to i64)
  store i1 %23, ptr %5, align 1
  %24 = getelementptr ptr, ptr %1, i32 2
  %25 = load ptr, ptr %24, align 8
  %26 = ptrtoint ptr %25 to i64
  %27 = icmp eq i64 %26, ptrtoint (ptr @i32_typ to i64)
  store i1 %27, ptr %4, align 1
  %28 = getelementptr ptr, ptr %1, i32 3
  %29 = load ptr, ptr %28, align 8
  %30 = ptrtoint ptr %29 to i64
  %31 = icmp eq i64 %30, ptrtoint (ptr @buffer_typ to i64)
  store i1 %31, ptr %3, align 1
  store i32 50, ptr %8, align 4
  %32 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %33 = load i32, ptr %8, align 4
  %34 = getelementptr [272 x ptr], ptr %32, i32 0, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 10
  %36 = load ptr, ptr %35, align 8
  ret ptr %36
}

define ptr @CuckooMap_B_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @any_typ, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @any_typ to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 51, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [272 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @CuckooMap_B_size_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 52, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [272 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @CuckooMap_B_get_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 53, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [272 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @CuckooMap_B__set_index_keyK_valueV({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @any_typ, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @any_typ to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 54, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [272 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @CuckooMap_B_remove_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 55, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [272 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @CuckooMap_B_clear_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 56, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [272 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @CuckooMap_B__index_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 57, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [272 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @CuckooMap_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 58, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [272 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @CuckooMap_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 59, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [272 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Pair, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Pair to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 60, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [272 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @CuckooMap_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 61, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [272 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @CuckooMap_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 62, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [272 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @CuckooMap_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 63, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [272 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @CuckooMap_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 64, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [272 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @CuckooMap_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 65, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [272 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @CuckooMap_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 66, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [272 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @CuckooMap_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 67, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [272 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @CuckooMap_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 68, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [272 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define i32 @CuckooMap__Self_max_displacements_(ptr %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 100, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @CuckooMap_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @CuckooMap)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 7
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %20, align 8
  %31 = insertvalue { ptr } undef, ptr %30, 0
  call void %29(ptr %21, { ptr } %31) #15
  %32 = alloca ptr, align 8
  store { ptr } %4, ptr %32, align 8
  %33 = load ptr, ptr %12, align 8
  %34 = load ptr, ptr %7, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %34)
  %36 = load i32, ptr %18, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 8
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %32, align 8
  %43 = insertvalue { ptr } undef, ptr %42, 0
  call void %41(ptr %33, { ptr } %43) #15
  %44 = alloca i32, align 4
  store i32 8, ptr %44, align 4
  %45 = load ptr, ptr %12, align 8
  %46 = load ptr, ptr %7, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %46)
  %48 = load i32, ptr %18, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 5
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = load i32, ptr %44, align 4
  call void %53(ptr %45, i32 %54) #15
  %55 = load i32, ptr %44, align 4
  %56 = sext i32 %55 to i64
  %57 = alloca ptr, align 8
  %58 = mul i64 %56, ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64)
  %59 = call ptr @bump_malloc(i64 %58)
  store ptr %59, ptr %57, align 8
  %60 = load ptr, ptr %12, align 8
  %61 = load ptr, ptr %7, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %61)
  %63 = load i32, ptr %18, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 3
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %68(ptr %60, { ptr } %71) #15
  %72 = load i32, ptr %44, align 4
  %73 = sext i32 %72 to i64
  %74 = alloca ptr, align 8
  %75 = mul i64 %73, ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64)
  %76 = call ptr @bump_malloc(i64 %75)
  store ptr %76, ptr %74, align 8
  %77 = load ptr, ptr %12, align 8
  %78 = load ptr, ptr %7, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %78)
  %80 = load i32, ptr %18, align 4
  %81 = getelementptr ptr, ptr %78, i32 %80
  %82 = getelementptr ptr, ptr %81, i32 4
  %83 = load ptr, ptr %82, align 8
  %84 = getelementptr { ptr, ptr }, ptr %83, i32 0, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr } undef, ptr %87, 0
  call void %85(ptr %77, { ptr } %88) #15
  %89 = alloca i32, align 4
  store i32 0, ptr %89, align 4
  %90 = load ptr, ptr %12, align 8
  %91 = load ptr, ptr %7, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %91)
  %93 = load i32, ptr %18, align 4
  %94 = getelementptr ptr, ptr %91, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 6
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = load i32, ptr %89, align 4
  call void %98(ptr %90, i32 %99) #15
  ret void
}

define i32 @CuckooMap_hash1_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @CuckooMap)
  %19 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %19, align 8
  %20 = alloca i160, align 8
  %21 = alloca ptr, align 8
  %22 = getelementptr { ptr, i160 }, ptr %19, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  store ptr %23, ptr %21, align 8
  %24 = getelementptr { ptr, i160 }, ptr %19, i32 0, i32 1
  %25 = load i160, ptr %24, align 4
  store i160 %25, ptr %20, align 4
  %26 = alloca i160, align 8
  %27 = alloca ptr, align 8
  %28 = load ptr, ptr %21, align 8
  store ptr %28, ptr %27, align 8
  %29 = load i160, ptr %20, align 4
  store i160 %29, ptr %26, align 4
  %30 = load ptr, ptr %27, align 8
  %31 = insertvalue { ptr, i160 } undef, ptr %30, 0
  %32 = load i160, ptr %26, align 4
  %33 = insertvalue { ptr, i160 } %31, i160 %32, 1
  %34 = load ptr, ptr %11, align 8
  %35 = load ptr, ptr %6, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %35)
  %37 = load i32, ptr %17, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 7
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = call { ptr } %42(ptr %34) #16
  %44 = alloca ptr, align 8
  store { ptr } %43, ptr %44, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = call i32 %45({ ptr, i160 } %33)
  %47 = alloca i32, align 4
  store i32 %46, ptr %47, align 4
  %48 = load i32, ptr %47, align 4
  ret i32 %48
}

define i32 @CuckooMap_hash2_from_primary_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @CuckooMap)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load i32, ptr %19, align 4
  %21 = call i32 @i32_hasher(i32 %20)
  %22 = alloca i32, align 4
  store i32 %21, ptr %22, align 4
  %23 = load i32, ptr %22, align 4
  ret i32 %23
}

define i32 @CuckooMap_index1_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @CuckooMap)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 5
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20) #16
  %30 = alloca i32, align 4
  store i32 %29, ptr %30, align 4
  %31 = alloca i32, align 4
  store i32 1, ptr %31, align 4
  %32 = load i32, ptr %30, align 4
  %33 = load i32, ptr %31, align 4
  %34 = sub i32 %32, %33
  %35 = alloca i32, align 4
  store i32 %34, ptr %35, align 4
  %36 = load i32, ptr %19, align 4
  %37 = load i32, ptr %35, align 4
  %38 = and i32 %36, %37
  %39 = alloca i32, align 4
  store i32 %38, ptr %39, align 4
  %40 = load i32, ptr %39, align 4
  ret i32 %40
}

define i32 @CuckooMap_index2_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @CuckooMap)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load i32, ptr %19, align 4
  %21 = load ptr, ptr %8, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = load ptr, ptr %11, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %23, 1
  %25 = load ptr, ptr %14, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %25, 2
  %27 = load i32, ptr %17, align 4
  %28 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %27, 3
  %29 = alloca [1 x ptr], align 8
  %30 = getelementptr [1 x ptr], ptr %29, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 1, ptr %29)
  %32 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %21)
  %33 = getelementptr ptr, ptr %21, i32 %27
  %34 = getelementptr ptr, ptr %33, i32 12
  %35 = load ptr, ptr %34, align 8
  %36 = alloca { ptr }, align 8
  %37 = getelementptr { ptr }, ptr %36, i32 0, i32 0
  store ptr @i32_typ, ptr %37, align 8
  %38 = call ptr @behavior_wrapper(ptr %35, { ptr, ptr, ptr, i32 } %28, ptr %36)
  %39 = call i32 %38({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr %29, i32 %20) #17
  %40 = alloca i32, align 4
  store i32 %39, ptr %40, align 4
  %41 = load ptr, ptr %11, align 8
  %42 = load ptr, ptr %6, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %42)
  %44 = load i32, ptr %17, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 5
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = call i32 %49(ptr %41) #16
  %51 = alloca i32, align 4
  store i32 %50, ptr %51, align 4
  %52 = alloca i32, align 4
  store i32 1, ptr %52, align 4
  %53 = load i32, ptr %51, align 4
  %54 = load i32, ptr %52, align 4
  %55 = sub i32 %53, %54
  %56 = alloca i32, align 4
  store i32 %55, ptr %56, align 4
  %57 = load i32, ptr %40, align 4
  %58 = load i32, ptr %56, align 4
  %59 = and i32 %57, %58
  %60 = alloca i32, align 4
  store i32 %59, ptr %60, align 4
  %61 = load i32, ptr %60, align 4
  ret i32 %61
}

define { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [2 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca i32, align 4
  %8 = alloca i1, align 1
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca i32, align 4
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca i32, align 4
  %17 = alloca ptr, align 8
  %18 = alloca { ptr, i160 }, align 8
  %19 = alloca ptr, align 8
  %20 = alloca i1, align 1
  %21 = alloca [0 x i8], align 1
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca [0 x i8], align 1
  %26 = alloca { ptr, i160 }, align 8
  %27 = alloca i1, align 1
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca i1, align 1
  %31 = alloca [1 x ptr], align 8
  %32 = alloca { ptr }, align 8
  %33 = alloca i32, align 4
  %34 = alloca ptr, align 8
  %35 = alloca { ptr, i160 }, align 8
  %36 = alloca ptr, align 8
  %37 = alloca i1, align 1
  %38 = alloca [0 x i8], align 1
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca [0 x i8], align 1
  %43 = alloca { ptr, i160 }, align 8
  %44 = alloca i1, align 1
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = alloca i1, align 1
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem28 = alloca ptr, align 8
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem34 = alloca i32, align 4
  %.reg2mem36 = alloca i32, align 4
  %.reg2mem38 = alloca ptr, align 8
  %.reg2mem40 = alloca ptr, align 8
  %.reg2mem42 = alloca ptr, align 8
  %.reg2mem44 = alloca ptr, align 8
  %.reg2mem46 = alloca ptr, align 8
  %.reg2mem48 = alloca ptr, align 8
  %.reg2mem50 = alloca ptr, align 8
  %.reg2mem52 = alloca ptr, align 8
  %.reg2mem54 = alloca ptr, align 8
  %.reg2mem56 = alloca ptr, align 8
  %.reg2mem58 = alloca ptr, align 8
  %.reg2mem60 = alloca ptr, align 8
  %.reg2mem62 = alloca ptr, align 8
  %.reg2mem64 = alloca i32, align 4
  %.reg2mem66 = alloca i32, align 4
  %.reg2mem68 = alloca i32, align 4
  %.reg2mem70 = alloca ptr, align 8
  %.reg2mem75 = alloca i1, align 1
  %.reg2mem89 = alloca ptr, align 8
  %.reg2mem91 = alloca ptr, align 8
  %.reg2mem93 = alloca ptr, align 8
  %.reg2mem97 = alloca ptr, align 8
  %.reg2mem101 = alloca ptr, align 8
  %.reg2mem105 = alloca ptr, align 8
  %.reg2mem109 = alloca ptr, align 8
  %.reg2mem121 = alloca ptr, align 8
  %.reg2mem125 = alloca ptr, align 8
  %.reg2mem137 = alloca ptr, align 8
  %.reg2mem141 = alloca { ptr, i160 }, align 8
  %.reg2mem143 = alloca i32, align 4
  %.reg2mem145 = alloca i32, align 4
  %.reg2mem147 = alloca ptr, align 8
  %.reg2mem149 = alloca ptr, align 8
  %.reg2mem151 = alloca ptr, align 8
  %.reg2mem153 = alloca ptr, align 8
  %.reg2mem155 = alloca ptr, align 8
  %.reg2mem157 = alloca ptr, align 8
  %.reg2mem159 = alloca ptr, align 8
  %.reg2mem161 = alloca i32, align 4
  %.reg2mem163 = alloca i32, align 4
  %.reg2mem165 = alloca ptr, align 8
  %.reg2mem167 = alloca ptr, align 8
  %.reg2mem169 = alloca ptr, align 8
  %.reg2mem171 = alloca ptr, align 8
  %.reg2mem173 = alloca ptr, align 8
  %.reg2mem175 = alloca ptr, align 8
  %.reg2mem177 = alloca ptr, align 8
  %.reg2mem179 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %48, align 8
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  store ptr %51, ptr %.reg2mem137, align 8
  %52 = load ptr, ptr %50, align 8
  %.reload140 = load ptr, ptr %.reg2mem137, align 8
  store ptr %52, ptr %.reload140, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  store ptr %54, ptr %.reg2mem125, align 8
  %55 = load ptr, ptr %53, align 8
  %.reload136 = load ptr, ptr %.reg2mem125, align 8
  store ptr %55, ptr %.reload136, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  store ptr %57, ptr %.reg2mem121, align 8
  %58 = load ptr, ptr %56, align 8
  %.reload124 = load ptr, ptr %.reg2mem121, align 8
  store ptr %58, ptr %.reload124, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  store ptr %60, ptr %.reg2mem109, align 8
  %61 = load i32, ptr %59, align 4
  %.reload120 = load ptr, ptr %.reg2mem109, align 8
  store i32 %61, ptr %.reload120, align 4
  call void @set_offset(ptr %49, ptr @CuckooMap)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %62, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %75 = load i32, ptr %73, align 4
  store i32 %75, ptr %74, align 4
  call void @set_offset(ptr %63, ptr @Entry)
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %65, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %80 = load ptr, ptr %68, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %82 = load ptr, ptr %71, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %84 = load i32, ptr %74, align 4
  store i32 %84, ptr %83, align 4
  call void @set_offset(ptr %76, ptr @Entry)
  %85 = alloca { ptr, ptr, ptr, i32 }, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 0
  store ptr %86, ptr %.reg2mem105, align 8
  %87 = load ptr, ptr %77, align 8
  %.reload108 = load ptr, ptr %.reg2mem105, align 8
  store ptr %87, ptr %.reload108, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 1
  store ptr %88, ptr %.reg2mem101, align 8
  %89 = load ptr, ptr %79, align 8
  %.reload104 = load ptr, ptr %.reg2mem101, align 8
  store ptr %89, ptr %.reload104, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 2
  store ptr %90, ptr %.reg2mem97, align 8
  %91 = load ptr, ptr %81, align 8
  %.reload100 = load ptr, ptr %.reg2mem97, align 8
  store ptr %91, ptr %.reload100, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 3
  store ptr %92, ptr %.reg2mem93, align 8
  %93 = load i32, ptr %83, align 4
  %.reload96 = load ptr, ptr %.reg2mem93, align 8
  store i32 %93, ptr %.reload96, align 4
  %94 = alloca i1, align 1
  store i1 true, ptr %94, align 1
  %95 = alloca i32, align 4
  store i32 0, ptr %95, align 4
  %96 = getelementptr [2 x ptr], ptr %5, i32 0, i32 0
  store ptr %96, ptr %.reg2mem91, align 8
  %97 = getelementptr [2 x ptr], ptr %5, i32 0, i32 1
  store ptr %97, ptr %.reg2mem89, align 8
  br label %98

98:                                               ; preds = %339, %4
  %.reload135 = load ptr, ptr %.reg2mem125, align 8
  %99 = load ptr, ptr %.reload135, align 8
  %100 = load ptr, ptr %49, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %100)
  %.reload119 = load ptr, ptr %.reg2mem109, align 8
  %102 = load i32, ptr %.reload119, align 4
  %103 = getelementptr ptr, ptr %100, i32 %102
  %104 = load ptr, ptr %103, align 8
  %105 = call ptr @typegetter_wrapper(ptr %104, ptr %99)
  %.reload134 = load ptr, ptr %.reg2mem125, align 8
  %106 = load ptr, ptr %.reload134, align 8
  %107 = load ptr, ptr %49, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %107)
  %.reload118 = load ptr, ptr %.reg2mem109, align 8
  %109 = load i32, ptr %.reload118, align 4
  %110 = getelementptr ptr, ptr %107, i32 %109
  %111 = getelementptr ptr, ptr %110, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = call ptr @typegetter_wrapper(ptr %112, ptr %106)
  %.reload92 = load ptr, ptr %.reg2mem91, align 8
  store ptr %105, ptr %.reload92, align 8
  %.reload90 = load ptr, ptr %.reg2mem89, align 8
  store ptr %113, ptr %.reload90, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 4, ptr %5)
  %115 = call ptr @llvm.invariant.start.p0(i64 2176, ptr @CuckooMap)
  %116 = load ptr, ptr getelementptr (ptr, ptr getelementptr (ptr, ptr @CuckooMap, i32 10), i32 9), align 8
  %117 = call ptr @class_behavior_wrapper(ptr %116, ptr %6)
  %118 = call i32 %117(ptr %5) #17
  store i32 %118, ptr %7, align 4
  %119 = load i32, ptr %95, align 4
  %120 = load i32, ptr %7, align 4
  %121 = icmp slt i32 %119, %120
  store i1 %121, ptr %8, align 1
  %122 = load i1, ptr %8, align 1
  br i1 %122, label %123, label %335

123:                                              ; preds = %98
  store i32 1, ptr %9, align 4
  %124 = load i32, ptr %95, align 4
  %125 = load i32, ptr %9, align 4
  %126 = add i32 %124, %125
  store i32 %126, ptr %10, align 4
  %127 = load i32, ptr %10, align 4
  store i32 %127, ptr %95, align 4
  %.reload107 = load ptr, ptr %.reg2mem105, align 8
  %128 = load ptr, ptr %.reload107, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %.reload103 = load ptr, ptr %.reg2mem101, align 8
  %130 = load ptr, ptr %.reload103, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %130, 1
  %.reload99 = load ptr, ptr %.reg2mem97, align 8
  %132 = load ptr, ptr %.reload99, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %132, 2
  %.reload95 = load ptr, ptr %.reg2mem93, align 8
  %134 = load i32, ptr %.reload95, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %134, 3
  %136 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %137 = call ptr @llvm.invariant.start.p0(i64 120, ptr %128)
  %138 = getelementptr ptr, ptr %128, i32 %134
  %139 = getelementptr ptr, ptr %138, i32 8
  %140 = load ptr, ptr %139, align 8
  %141 = call ptr @behavior_wrapper(ptr %140, { ptr, ptr, ptr, i32 } %135, ptr %12)
  %142 = call i32 %141({ ptr, ptr, ptr, i32 } %135, { ptr, ptr, ptr, i32 } %135, ptr %11) #17
  store i32 %142, ptr %13, align 4
  %143 = load i1, ptr %94, align 1
  store i1 %143, ptr %.reg2mem75, align 1
  %.reload88 = load i1, ptr %.reg2mem75, align 1
  %144 = select i1 %.reload88, ptr %18, ptr %35
  store ptr %144, ptr %.reg2mem70, align 8
  %.reload87 = load i1, ptr %.reg2mem75, align 1
  br i1 %.reload87, label %145, label %214

145:                                              ; preds = %123
  %146 = load i32, ptr %13, align 4
  %.reload139 = load ptr, ptr %.reg2mem137, align 8
  %147 = load ptr, ptr %.reload139, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %147, 0
  %.reload133 = load ptr, ptr %.reg2mem125, align 8
  %149 = load ptr, ptr %.reload133, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %149, 1
  %.reload123 = load ptr, ptr %.reg2mem121, align 8
  %151 = load ptr, ptr %.reload123, align 8
  %152 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %151, 2
  %.reload117 = load ptr, ptr %.reg2mem109, align 8
  %153 = load i32, ptr %.reload117, align 4
  %154 = insertvalue { ptr, ptr, ptr, i32 } %152, i32 %153, 3
  %155 = getelementptr [1 x ptr], ptr %14, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %155, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 1, ptr %14)
  %157 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %147)
  %158 = getelementptr ptr, ptr %147, i32 %153
  %159 = getelementptr ptr, ptr %158, i32 13
  %160 = load ptr, ptr %159, align 8
  %161 = getelementptr { ptr }, ptr %15, i32 0, i32 0
  store ptr @i32_typ, ptr %161, align 8
  %162 = call ptr @behavior_wrapper(ptr %160, { ptr, ptr, ptr, i32 } %154, ptr %15)
  %163 = call i32 %162({ ptr, ptr, ptr, i32 } %154, { ptr, ptr, ptr, i32 } %154, ptr %14, i32 %146) #17
  store i32 %163, ptr %16, align 4
  %.reload132 = load ptr, ptr %.reg2mem125, align 8
  %164 = load ptr, ptr %.reload132, align 8
  %165 = load ptr, ptr %49, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %165)
  %.reload116 = load ptr, ptr %.reg2mem109, align 8
  %167 = load i32, ptr %.reload116, align 4
  %168 = getelementptr ptr, ptr %165, i32 %167
  %169 = getelementptr ptr, ptr %168, i32 3
  %170 = load ptr, ptr %169, align 8
  %171 = getelementptr { ptr, ptr }, ptr %170, i32 0, i32 0
  %172 = load ptr, ptr %171, align 8
  %173 = call { ptr } %172(ptr %164) #16
  store { ptr } %173, ptr %17, align 8
  %174 = load ptr, ptr %17, align 8
  %175 = load i32, ptr %16, align 4
  %176 = sext i32 %175 to i64
  %177 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %176
  %178 = getelementptr i8, ptr %174, i64 %177
  %179 = getelementptr { ptr, i160 }, ptr %178, i32 0, i32 0
  %180 = getelementptr { ptr, i160 }, ptr %18, i32 0, i32 0
  %181 = load ptr, ptr %179, align 8
  store ptr %181, ptr %180, align 8
  %182 = getelementptr { ptr, i160 }, ptr %178, i32 0, i32 1
  %183 = getelementptr { ptr, i160 }, ptr %18, i32 0, i32 1
  %184 = load i160, ptr %182, align 4
  store i160 %184, ptr %183, align 4
  %.reload131 = load ptr, ptr %.reg2mem125, align 8
  %185 = load ptr, ptr %.reload131, align 8
  %186 = load ptr, ptr %49, align 8
  %187 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %186)
  %.reload115 = load ptr, ptr %.reg2mem109, align 8
  %188 = load i32, ptr %.reload115, align 4
  %189 = getelementptr ptr, ptr %186, i32 %188
  %190 = getelementptr ptr, ptr %189, i32 3
  %191 = load ptr, ptr %190, align 8
  %192 = getelementptr { ptr, ptr }, ptr %191, i32 0, i32 0
  %193 = load ptr, ptr %192, align 8
  %194 = call { ptr } %193(ptr %185) #16
  store { ptr } %194, ptr %19, align 8
  %195 = load ptr, ptr %19, align 8
  %196 = load i32, ptr %16, align 4
  %197 = sext i32 %196 to i64
  %198 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %197
  %199 = getelementptr i8, ptr %195, i64 %198
  %200 = getelementptr { ptr, i160 }, ptr %85, i32 0, i32 0
  %201 = getelementptr { ptr, i160 }, ptr %199, i32 0, i32 0
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, i160 }, ptr %85, i32 0, i32 1
  %204 = getelementptr { ptr, i160 }, ptr %199, i32 0, i32 1
  %205 = load i160, ptr %203, align 4
  store i160 %205, ptr %204, align 4
  %206 = load ptr, ptr %18, align 8
  %207 = ptrtoint ptr %206 to i64
  %208 = icmp eq i64 %207, ptrtoint (ptr @nil_typ to i64)
  %209 = icmp eq i64 %207, 0
  %210 = or i1 %208, %209
  store i1 %210, ptr %20, align 1
  %211 = load i1, ptr %20, align 1
  %212 = xor i1 %211, true
  %213 = zext i1 %212 to i32
  store i32 %213, ptr %.reg2mem68, align 4
  %.reload69 = load i32, ptr %.reg2mem68, align 4
  store i32 %.reload69, ptr %.reg2mem179, align 4
  br label %283

214:                                              ; preds = %123
  %215 = load i32, ptr %13, align 4
  %.reload138 = load ptr, ptr %.reg2mem137, align 8
  %216 = load ptr, ptr %.reload138, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %216, 0
  %.reload130 = load ptr, ptr %.reg2mem125, align 8
  %218 = load ptr, ptr %.reload130, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %217, ptr %218, 1
  %.reload122 = load ptr, ptr %.reg2mem121, align 8
  %220 = load ptr, ptr %.reload122, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } %219, ptr %220, 2
  %.reload114 = load ptr, ptr %.reg2mem109, align 8
  %222 = load i32, ptr %.reload114, align 4
  %223 = insertvalue { ptr, ptr, ptr, i32 } %221, i32 %222, 3
  %224 = getelementptr [1 x ptr], ptr %31, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %224, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 1, ptr %31)
  %226 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %216)
  %227 = getelementptr ptr, ptr %216, i32 %222
  %228 = getelementptr ptr, ptr %227, i32 14
  %229 = load ptr, ptr %228, align 8
  %230 = getelementptr { ptr }, ptr %32, i32 0, i32 0
  store ptr @i32_typ, ptr %230, align 8
  %231 = call ptr @behavior_wrapper(ptr %229, { ptr, ptr, ptr, i32 } %223, ptr %32)
  %232 = call i32 %231({ ptr, ptr, ptr, i32 } %223, { ptr, ptr, ptr, i32 } %223, ptr %31, i32 %215) #17
  store i32 %232, ptr %33, align 4
  %.reload129 = load ptr, ptr %.reg2mem125, align 8
  %233 = load ptr, ptr %.reload129, align 8
  %234 = load ptr, ptr %49, align 8
  %235 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %234)
  %.reload113 = load ptr, ptr %.reg2mem109, align 8
  %236 = load i32, ptr %.reload113, align 4
  %237 = getelementptr ptr, ptr %234, i32 %236
  %238 = getelementptr ptr, ptr %237, i32 4
  %239 = load ptr, ptr %238, align 8
  %240 = getelementptr { ptr, ptr }, ptr %239, i32 0, i32 0
  %241 = load ptr, ptr %240, align 8
  %242 = call { ptr } %241(ptr %233) #16
  store { ptr } %242, ptr %34, align 8
  %243 = load ptr, ptr %34, align 8
  %244 = load i32, ptr %33, align 4
  %245 = sext i32 %244 to i64
  %246 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %245
  %247 = getelementptr i8, ptr %243, i64 %246
  %248 = getelementptr { ptr, i160 }, ptr %247, i32 0, i32 0
  %249 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 0
  %250 = load ptr, ptr %248, align 8
  store ptr %250, ptr %249, align 8
  %251 = getelementptr { ptr, i160 }, ptr %247, i32 0, i32 1
  %252 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 1
  %253 = load i160, ptr %251, align 4
  store i160 %253, ptr %252, align 4
  %.reload128 = load ptr, ptr %.reg2mem125, align 8
  %254 = load ptr, ptr %.reload128, align 8
  %255 = load ptr, ptr %49, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %255)
  %.reload112 = load ptr, ptr %.reg2mem109, align 8
  %257 = load i32, ptr %.reload112, align 4
  %258 = getelementptr ptr, ptr %255, i32 %257
  %259 = getelementptr ptr, ptr %258, i32 4
  %260 = load ptr, ptr %259, align 8
  %261 = getelementptr { ptr, ptr }, ptr %260, i32 0, i32 0
  %262 = load ptr, ptr %261, align 8
  %263 = call { ptr } %262(ptr %254) #16
  store { ptr } %263, ptr %36, align 8
  %264 = load ptr, ptr %36, align 8
  %265 = load i32, ptr %33, align 4
  %266 = sext i32 %265 to i64
  %267 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %266
  %268 = getelementptr i8, ptr %264, i64 %267
  %269 = getelementptr { ptr, i160 }, ptr %85, i32 0, i32 0
  %270 = getelementptr { ptr, i160 }, ptr %268, i32 0, i32 0
  %271 = load ptr, ptr %269, align 8
  store ptr %271, ptr %270, align 8
  %272 = getelementptr { ptr, i160 }, ptr %85, i32 0, i32 1
  %273 = getelementptr { ptr, i160 }, ptr %268, i32 0, i32 1
  %274 = load i160, ptr %272, align 4
  store i160 %274, ptr %273, align 4
  %275 = load ptr, ptr %35, align 8
  %276 = ptrtoint ptr %275 to i64
  %277 = icmp eq i64 %276, ptrtoint (ptr @nil_typ to i64)
  %278 = icmp eq i64 %276, 0
  %279 = or i1 %277, %278
  store i1 %279, ptr %37, align 1
  %280 = load i1, ptr %37, align 1
  %281 = xor i1 %280, true
  %282 = zext i1 %281 to i32
  store i32 %282, ptr %.reg2mem66, align 4
  %.reload67 = load i32, ptr %.reg2mem66, align 4
  store i32 %.reload67, ptr %.reg2mem179, align 4
  br label %283

283:                                              ; preds = %214, %145
  %.reload180 = load i32, ptr %.reg2mem179, align 4
  store i32 %.reload180, ptr %.reg2mem64, align 4
  br label %284

284:                                              ; preds = %283
  %.reload65 = load i32, ptr %.reg2mem64, align 4
  %285 = zext i32 %.reload65 to i64
  %286 = trunc i64 %285 to i32
  switch i32 %286, label %294 [
    i32 0, label %287
  ]

287:                                              ; preds = %284
  %.reload86 = load i1, ptr %.reg2mem75, align 1
  %288 = select i1 %.reload86, ptr %25, ptr %42
  store ptr %288, ptr %.reg2mem62, align 8
  %.reload85 = load i1, ptr %.reg2mem75, align 1
  %289 = select i1 %.reload85, ptr %26, ptr %43
  store ptr %289, ptr %.reg2mem60, align 8
  %.reload84 = load i1, ptr %.reg2mem75, align 1
  %290 = select i1 %.reload84, ptr %24, ptr %41
  store ptr %290, ptr %.reg2mem58, align 8
  %.reload83 = load i1, ptr %.reg2mem75, align 1
  %291 = select i1 %.reload83, ptr %23, ptr %40
  store ptr %291, ptr %.reg2mem56, align 8
  %.reload82 = load i1, ptr %.reg2mem75, align 1
  %292 = select i1 %.reload82, ptr %22, ptr %39
  store ptr %292, ptr %.reg2mem54, align 8
  %.reload81 = load i1, ptr %.reg2mem75, align 1
  %293 = select i1 %.reload81, ptr %21, ptr %38
  store ptr %293, ptr %.reg2mem52, align 8
  %.reload53 = load ptr, ptr %.reg2mem52, align 8
  %.reload55 = load ptr, ptr %.reg2mem54, align 8
  %.reload57 = load ptr, ptr %.reg2mem56, align 8
  %.reload59 = load ptr, ptr %.reg2mem58, align 8
  %.reload61 = load ptr, ptr %.reg2mem60, align 8
  %.reload63 = load ptr, ptr %.reg2mem62, align 8
  %.reload71 = load ptr, ptr %.reg2mem70, align 8
  store i32 0, ptr %.reg2mem161, align 4
  store i32 1, ptr %.reg2mem163, align 4
  store ptr %.reload63, ptr %.reg2mem165, align 8
  store ptr %.reload61, ptr %.reg2mem167, align 8
  store ptr %.reload59, ptr %.reg2mem169, align 8
  store ptr %.reload57, ptr %.reg2mem171, align 8
  store ptr %.reload55, ptr %.reg2mem173, align 8
  store ptr %.reload53, ptr %.reg2mem175, align 8
  store ptr %.reload71, ptr %.reg2mem177, align 8
  br label %334

294:                                              ; preds = %284
  %.reload80 = load i1, ptr %.reg2mem75, align 1
  %295 = select i1 %.reload80, ptr %27, ptr %44
  %.reload74 = load ptr, ptr %.reg2mem70, align 8
  %296 = load ptr, ptr %.reload74, align 8
  %297 = ptrtoint ptr %296 to i64
  %298 = icmp eq i64 %297, ptrtoint (ptr @nil_typ to i64)
  %299 = icmp eq i64 %297, 0
  %300 = or i1 %298, %299
  %301 = icmp eq i1 %300, false
  store i1 %301, ptr %295, align 1
  %302 = load i1, ptr %295, align 1
  br i1 %302, label %303, label %._crit_edge

._crit_edge:                                      ; preds = %294
  br label %333

303:                                              ; preds = %294
  %.reload79 = load i1, ptr %.reg2mem75, align 1
  %304 = select i1 %.reload79, ptr %28, ptr %45
  %.reload78 = load i1, ptr %.reg2mem75, align 1
  %305 = select i1 %.reload78, ptr %29, ptr %46
  %.reload77 = load i1, ptr %.reg2mem75, align 1
  %306 = xor i1 %.reload77, true
  %.reload76 = load i1, ptr %.reg2mem75, align 1
  %307 = select i1 %.reload76, ptr %30, ptr %47
  %.reload73 = load ptr, ptr %.reg2mem70, align 8
  %308 = getelementptr { ptr, i160 }, ptr %.reload73, i32 0, i32 0
  %309 = getelementptr { ptr, i160 }, ptr %304, i32 0, i32 0
  %310 = load ptr, ptr %308, align 8
  store ptr %310, ptr %309, align 8
  %.reload72 = load ptr, ptr %.reg2mem70, align 8
  %311 = getelementptr { ptr, i160 }, ptr %.reload72, i32 0, i32 1
  %312 = getelementptr { ptr, i160 }, ptr %304, i32 0, i32 1
  %313 = load i160, ptr %311, align 4
  store i160 %313, ptr %312, align 4
  call void @set_offset(ptr %304, ptr @Entry)
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 0
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %305, i32 0, i32 0
  %316 = load ptr, ptr %314, align 8
  store ptr %316, ptr %315, align 8
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 1
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %305, i32 0, i32 1
  %319 = load ptr, ptr %317, align 8
  store ptr %319, ptr %318, align 8
  %320 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 2
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %305, i32 0, i32 2
  %322 = load ptr, ptr %320, align 8
  store ptr %322, ptr %321, align 8
  %323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 3
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %305, i32 0, i32 3
  %325 = load i32, ptr %323, align 4
  store i32 %325, ptr %324, align 4
  call void @set_offset(ptr %305, ptr @Entry)
  %326 = load ptr, ptr %315, align 8
  %.reload106 = load ptr, ptr %.reg2mem105, align 8
  store ptr %326, ptr %.reload106, align 8
  %327 = load ptr, ptr %318, align 8
  %.reload102 = load ptr, ptr %.reg2mem101, align 8
  store ptr %327, ptr %.reload102, align 8
  %328 = load ptr, ptr %321, align 8
  %.reload98 = load ptr, ptr %.reg2mem97, align 8
  store ptr %328, ptr %.reload98, align 8
  %329 = load i32, ptr %324, align 4
  %.reload94 = load ptr, ptr %.reg2mem93, align 8
  store i32 %329, ptr %.reload94, align 4
  store i1 %306, ptr %307, align 1
  %330 = load i1, ptr %307, align 1
  store i1 %330, ptr %94, align 1
  %331 = load ptr, ptr %309, align 8
  store ptr %331, ptr %308, align 8
  %332 = load i160, ptr %312, align 4
  store i160 %332, ptr %311, align 4
  br label %333

333:                                              ; preds = %._crit_edge, %303
  store i32 1, ptr %.reg2mem161, align 4
  store i32 0, ptr %.reg2mem163, align 4
  store ptr poison, ptr %.reg2mem165, align 8
  store ptr poison, ptr %.reg2mem167, align 8
  store ptr poison, ptr %.reg2mem169, align 8
  store ptr poison, ptr %.reg2mem171, align 8
  store ptr poison, ptr %.reg2mem173, align 8
  store ptr poison, ptr %.reg2mem175, align 8
  store ptr poison, ptr %.reg2mem177, align 8
  br label %334

334:                                              ; preds = %333, %287
  %.reload178 = load ptr, ptr %.reg2mem177, align 8
  %.reload176 = load ptr, ptr %.reg2mem175, align 8
  %.reload174 = load ptr, ptr %.reg2mem173, align 8
  %.reload172 = load ptr, ptr %.reg2mem171, align 8
  %.reload170 = load ptr, ptr %.reg2mem169, align 8
  %.reload168 = load ptr, ptr %.reg2mem167, align 8
  %.reload166 = load ptr, ptr %.reg2mem165, align 8
  %.reload164 = load i32, ptr %.reg2mem163, align 4
  %.reload162 = load i32, ptr %.reg2mem161, align 4
  store ptr %.reload178, ptr %.reg2mem50, align 8
  store ptr %.reload176, ptr %.reg2mem48, align 8
  store ptr %.reload174, ptr %.reg2mem46, align 8
  store ptr %.reload172, ptr %.reg2mem44, align 8
  store ptr %.reload170, ptr %.reg2mem42, align 8
  store ptr %.reload168, ptr %.reg2mem40, align 8
  store ptr %.reload166, ptr %.reg2mem38, align 8
  store i32 %.reload164, ptr %.reg2mem36, align 4
  store i32 %.reload162, ptr %.reg2mem34, align 4
  %.reload35 = load i32, ptr %.reg2mem34, align 4
  %.reload37 = load i32, ptr %.reg2mem36, align 4
  %.reload39 = load ptr, ptr %.reg2mem38, align 8
  %.reload41 = load ptr, ptr %.reg2mem40, align 8
  %.reload43 = load ptr, ptr %.reg2mem42, align 8
  %.reload45 = load ptr, ptr %.reg2mem44, align 8
  %.reload47 = load ptr, ptr %.reg2mem46, align 8
  %.reload49 = load ptr, ptr %.reg2mem48, align 8
  %.reload51 = load ptr, ptr %.reg2mem50, align 8
  store i32 %.reload35, ptr %.reg2mem143, align 4
  store i32 %.reload37, ptr %.reg2mem145, align 4
  store ptr %.reload39, ptr %.reg2mem147, align 8
  store ptr %.reload41, ptr %.reg2mem149, align 8
  store ptr %.reload43, ptr %.reg2mem151, align 8
  store ptr %.reload45, ptr %.reg2mem153, align 8
  store ptr %.reload47, ptr %.reg2mem155, align 8
  store ptr %.reload49, ptr %.reg2mem157, align 8
  store ptr %.reload51, ptr %.reg2mem159, align 8
  br label %336

335:                                              ; preds = %98
  store i32 0, ptr %.reg2mem143, align 4
  store i32 2, ptr %.reg2mem145, align 4
  store ptr poison, ptr %.reg2mem147, align 8
  store ptr poison, ptr %.reg2mem149, align 8
  store ptr poison, ptr %.reg2mem151, align 8
  store ptr poison, ptr %.reg2mem153, align 8
  store ptr poison, ptr %.reg2mem155, align 8
  store ptr poison, ptr %.reg2mem157, align 8
  store ptr poison, ptr %.reg2mem159, align 8
  br label %336

336:                                              ; preds = %335, %334
  %.reload160 = load ptr, ptr %.reg2mem159, align 8
  %.reload158 = load ptr, ptr %.reg2mem157, align 8
  %.reload156 = load ptr, ptr %.reg2mem155, align 8
  %.reload154 = load ptr, ptr %.reg2mem153, align 8
  %.reload152 = load ptr, ptr %.reg2mem151, align 8
  %.reload150 = load ptr, ptr %.reg2mem149, align 8
  %.reload148 = load ptr, ptr %.reg2mem147, align 8
  %.reload146 = load i32, ptr %.reg2mem145, align 4
  %.reload144 = load i32, ptr %.reg2mem143, align 4
  store ptr %.reload160, ptr %.reg2mem31, align 8
  store ptr %.reload158, ptr %.reg2mem28, align 8
  store ptr %.reload156, ptr %.reg2mem24, align 8
  store ptr %.reload154, ptr %.reg2mem20, align 8
  store ptr %.reload152, ptr %.reg2mem16, align 8
  store ptr %.reload150, ptr %.reg2mem11, align 8
  store ptr %.reload148, ptr %.reg2mem8, align 8
  store i32 %.reload146, ptr %.reg2mem5, align 4
  store i32 %.reload144, ptr %.reg2mem3, align 4
  br label %337

337:                                              ; preds = %336
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %338 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %.reload15 = load ptr, ptr %.reg2mem11, align 8
  %.reload19 = load ptr, ptr %.reg2mem16, align 8
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %.reload30 = load ptr, ptr %.reg2mem28, align 8
  %.reload33 = load ptr, ptr %.reg2mem31, align 8
  br i1 %338, label %339, label %340

339:                                              ; preds = %337
  br label %98

340:                                              ; preds = %337
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %341 = zext i32 %.reload6 to i64
  %342 = trunc i64 %341 to i32
  switch i32 %342, label %376 [
    i32 1, label %343
  ]

343:                                              ; preds = %340
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %344 = getelementptr { ptr, i160 }, ptr %.reload32, i32 0, i32 1
  %345 = load [0 x i8], ptr %344, align 1
  %.reload29 = load ptr, ptr %.reg2mem28, align 8
  store [0 x i8] %345, ptr %.reload29, align 1
  %.reload127 = load ptr, ptr %.reg2mem125, align 8
  %346 = load ptr, ptr %.reload127, align 8
  %347 = load ptr, ptr %49, align 8
  %348 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %347)
  %.reload111 = load ptr, ptr %.reg2mem109, align 8
  %349 = load i32, ptr %.reload111, align 4
  %350 = getelementptr ptr, ptr %347, i32 %349
  %351 = getelementptr ptr, ptr %350, i32 6
  %352 = load ptr, ptr %351, align 8
  %353 = getelementptr { ptr, ptr }, ptr %352, i32 0, i32 0
  %354 = load ptr, ptr %353, align 8
  %355 = call i32 %354(ptr %346) #16
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  store i32 %355, ptr %.reload26, align 4
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  store i32 1, ptr %.reload22, align 4
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %356 = load i32, ptr %.reload25, align 4
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %357 = load i32, ptr %.reload21, align 4
  %358 = add i32 %356, %357
  %.reload18 = load ptr, ptr %.reg2mem16, align 8
  store i32 %358, ptr %.reload18, align 4
  %.reload126 = load ptr, ptr %.reg2mem125, align 8
  %359 = load ptr, ptr %.reload126, align 8
  %360 = load ptr, ptr %49, align 8
  %361 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %360)
  %.reload110 = load ptr, ptr %.reg2mem109, align 8
  %362 = load i32, ptr %.reload110, align 4
  %363 = getelementptr ptr, ptr %360, i32 %362
  %364 = getelementptr ptr, ptr %363, i32 6
  %365 = load ptr, ptr %364, align 8
  %366 = getelementptr { ptr, ptr }, ptr %365, i32 0, i32 1
  %367 = load ptr, ptr %366, align 8
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %368 = load i32, ptr %.reload17, align 4
  call void %367(ptr %359, i32 %368) #15
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %369 = getelementptr { ptr, i160 }, ptr %.reload14, i32 0, i32 1
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %370 = load [0 x i8], ptr %.reload9, align 1
  store [0 x i8] %370, ptr %369, align 1
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  store ptr @nil_typ, ptr %.reload13, align 8
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %371 = getelementptr { ptr, i160 }, ptr %.reload12, i32 0, i32 0
  %372 = load ptr, ptr %371, align 8
  %373 = insertvalue { ptr, i160 } undef, ptr %372, 0
  %374 = load i160, ptr %369, align 4
  %375 = insertvalue { ptr, i160 } %373, i160 %374, 1
  store { ptr, i160 } %375, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem141, align 8
  br label %383

376:                                              ; preds = %340
  %377 = getelementptr { ptr, i160 }, ptr %85, i32 0, i32 0
  %378 = load ptr, ptr %377, align 8
  %379 = insertvalue { ptr, i160 } undef, ptr %378, 0
  %380 = getelementptr { ptr, i160 }, ptr %85, i32 0, i32 1
  %381 = load i160, ptr %380, align 4
  %382 = insertvalue { ptr, i160 } %379, i160 %381, 1
  store { ptr, i160 } %382, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem141, align 8
  br label %383

383:                                              ; preds = %376, %343
  %.reload142 = load { ptr, i160 }, ptr %.reg2mem141, align 8
  ret { ptr, i160 } %.reload142
}

define void @CuckooMap_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4) {
  %6 = alloca i1, align 1
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i1, align 1
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca [1 x ptr], align 8
  %13 = alloca { ptr }, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem4 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %17, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  store ptr %20, ptr %.reg2mem16, align 8
  %21 = load ptr, ptr %19, align 8
  %.reload18 = load ptr, ptr %.reg2mem16, align 8
  store ptr %21, ptr %.reload18, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  store ptr %23, ptr %.reg2mem12, align 8
  %24 = load ptr, ptr %22, align 8
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  store ptr %24, ptr %.reload15, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  store ptr %26, ptr %.reg2mem9, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  store ptr %27, ptr %.reload11, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  store ptr %29, ptr %.reg2mem4, align 8
  %30 = load i32, ptr %28, align 4
  %.reload8 = load ptr, ptr %.reg2mem4, align 8
  store i32 %30, ptr %.reload8, align 4
  call void @set_offset(ptr %18, ptr @CuckooMap)
  %31 = alloca ptr, align 8
  store { ptr } %3, ptr %31, align 8
  %32 = alloca i32, align 4
  store i32 %4, ptr %32, align 4
  %33 = alloca i32, align 4
  store i32 0, ptr %33, align 4
  br label %34

34:                                               ; preds = %._crit_edge2, %5
  %35 = load i32, ptr %33, align 4
  %36 = load i32, ptr %32, align 4
  %37 = icmp slt i32 %35, %36
  store i1 %37, ptr %6, align 1
  %38 = load i1, ptr %6, align 1
  store i1 %38, ptr %.reg2mem, align 1
  %.reload3 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload3, label %39, label %._crit_edge

._crit_edge:                                      ; preds = %34
  br label %124

39:                                               ; preds = %34
  %40 = load ptr, ptr %31, align 8
  %41 = load i32, ptr %33, align 4
  %42 = sext i32 %41 to i64
  %43 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %42
  %44 = getelementptr i8, ptr %40, i64 %43
  %45 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  store ptr %46, ptr %8, align 8
  %47 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 1
  %48 = load i160, ptr %47, align 4
  store i160 %48, ptr %7, align 4
  %49 = load ptr, ptr %8, align 8
  %50 = ptrtoint ptr %49 to i64
  %51 = icmp eq i64 %50, ptrtoint (ptr @nil_typ to i64)
  %52 = icmp eq i64 %50, 0
  %53 = or i1 %51, %52
  %54 = icmp eq i1 %53, false
  store i1 %54, ptr %9, align 1
  %55 = load i1, ptr %9, align 1
  br i1 %55, label %56, label %._crit_edge1

._crit_edge1:                                     ; preds = %39
  br label %119

56:                                               ; preds = %39
  %57 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 0
  %58 = load ptr, ptr %8, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 1
  %60 = load i160, ptr %7, align 4
  store i160 %60, ptr %59, align 4
  call void @set_offset(ptr %10, ptr @Entry)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %11, ptr @Entry)
  %73 = load ptr, ptr %62, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %65, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %68, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %71, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %81 = load ptr, ptr %.reload17, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %83 = load ptr, ptr %.reload14, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 1
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %85 = load ptr, ptr %.reload10, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 2
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  %87 = load i32, ptr %.reload7, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %87, 3
  %89 = load ptr, ptr %18, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %89)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  %91 = load i32, ptr %.reload6, align 4
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @typegetter_wrapper(ptr %93, ptr %83)
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %95 = load ptr, ptr %.reload13, align 8
  %96 = load ptr, ptr %18, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %96)
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %98 = load i32, ptr %.reload5, align 4
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = getelementptr ptr, ptr %99, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = call ptr @typegetter_wrapper(ptr %101, ptr %95)
  %103 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %104 = getelementptr [4 x ptr], ptr %103, i32 0, i32 2
  store ptr %102, ptr %104, align 8
  %105 = getelementptr [4 x ptr], ptr %103, i32 0, i32 1
  store ptr %94, ptr %105, align 8
  %106 = getelementptr [4 x ptr], ptr %103, i32 0, i32 3
  store ptr null, ptr %106, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 24, ptr %103)
  store ptr @Entry, ptr %103, align 8
  %108 = getelementptr [1 x ptr], ptr %12, i32 0, i32 0
  store ptr %103, ptr %108, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 1, ptr %12)
  %110 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %81)
  %111 = getelementptr ptr, ptr %81, i32 %87
  %112 = getelementptr ptr, ptr %111, i32 15
  %113 = load ptr, ptr %112, align 8
  %114 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  store ptr %73, ptr %114, align 8
  %115 = call ptr @behavior_wrapper(ptr %113, { ptr, ptr, ptr, i32 } %88, ptr %13)
  %116 = call { ptr, i160 } %115({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %12, { ptr, ptr, ptr, i32 } %80) #17
  store { ptr, i160 } %116, ptr %14, align 8
  %117 = load ptr, ptr %57, align 8
  store ptr %117, ptr %8, align 8
  %118 = load i160, ptr %59, align 4
  store i160 %118, ptr %7, align 4
  br label %119

119:                                              ; preds = %._crit_edge1, %56
  store i32 1, ptr %15, align 4
  %120 = load i32, ptr %33, align 4
  %121 = load i32, ptr %15, align 4
  %122 = add i32 %120, %121
  store i32 %122, ptr %16, align 4
  %123 = load i32, ptr %16, align 4
  store i32 %123, ptr %33, align 4
  br label %124

124:                                              ; preds = %._crit_edge, %119
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge2, label %125

._crit_edge2:                                     ; preds = %124
  br label %34

125:                                              ; preds = %124
  ret void
}

define void @CuckooMap_resize_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  store ptr %15, ptr %.reg2mem25, align 8
  %16 = load ptr, ptr %14, align 8
  %.reload28 = load ptr, ptr %.reg2mem25, align 8
  store ptr %16, ptr %.reload28, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  store ptr %18, ptr %.reg2mem14, align 8
  %19 = load ptr, ptr %17, align 8
  %.reload24 = load ptr, ptr %.reg2mem14, align 8
  store ptr %19, ptr %.reload24, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  store ptr %21, ptr %.reg2mem10, align 8
  %22 = load ptr, ptr %20, align 8
  %.reload13 = load ptr, ptr %.reg2mem10, align 8
  store ptr %22, ptr %.reload13, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  store ptr %24, ptr %.reg2mem, align 8
  %25 = load i32, ptr %23, align 4
  %.reload9 = load ptr, ptr %.reg2mem, align 8
  store i32 %25, ptr %.reload9, align 4
  call void @set_offset(ptr %13, ptr @CuckooMap)
  %.reload23 = load ptr, ptr %.reg2mem14, align 8
  %26 = load ptr, ptr %.reload23, align 8
  %27 = load ptr, ptr %13, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %27)
  %.reload8 = load ptr, ptr %.reg2mem, align 8
  %29 = load i32, ptr %.reload8, align 4
  %30 = getelementptr ptr, ptr %27, i32 %29
  %31 = getelementptr ptr, ptr %30, i32 3
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr { ptr, ptr }, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr } %34(ptr %26) #16
  %36 = alloca ptr, align 8
  store { ptr } %35, ptr %36, align 8
  %37 = alloca ptr, align 8
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %.reload22 = load ptr, ptr %.reg2mem14, align 8
  %39 = load ptr, ptr %.reload22, align 8
  %40 = load ptr, ptr %13, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %40)
  %.reload7 = load ptr, ptr %.reg2mem, align 8
  %42 = load i32, ptr %.reload7, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 4
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, ptr }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = call { ptr } %47(ptr %39) #16
  %49 = alloca ptr, align 8
  store { ptr } %48, ptr %49, align 8
  %50 = alloca ptr, align 8
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %.reload21 = load ptr, ptr %.reg2mem14, align 8
  %52 = load ptr, ptr %.reload21, align 8
  %53 = load ptr, ptr %13, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %53)
  %.reload6 = load ptr, ptr %.reg2mem, align 8
  %55 = load i32, ptr %.reload6, align 4
  %56 = getelementptr ptr, ptr %53, i32 %55
  %57 = getelementptr ptr, ptr %56, i32 5
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr }, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = call i32 %60(ptr %52) #16
  %62 = alloca i32, align 4
  store i32 %61, ptr %62, align 4
  %63 = alloca i32, align 4
  store i32 2, ptr %63, align 4
  %64 = load i32, ptr %62, align 4
  %65 = load i32, ptr %63, align 4
  %66 = mul i32 %64, %65
  %67 = alloca i32, align 4
  store i32 %66, ptr %67, align 4
  %68 = alloca i32, align 4
  store i32 16, ptr %68, align 4
  %69 = load i32, ptr %67, align 4
  %70 = load i32, ptr %68, align 4
  %71 = icmp slt i32 %69, %70
  %72 = alloca i1, align 1
  store i1 %71, ptr %72, align 1
  %73 = load i1, ptr %72, align 1
  br i1 %73, label %74, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %76

74:                                               ; preds = %3
  store i32 16, ptr %4, align 4
  %75 = load i32, ptr %4, align 4
  store i32 %75, ptr %67, align 4
  br label %76

76:                                               ; preds = %._crit_edge, %74
  %.reload20 = load ptr, ptr %.reg2mem14, align 8
  %77 = load ptr, ptr %.reload20, align 8
  %78 = load ptr, ptr %13, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %78)
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  %80 = load i32, ptr %.reload5, align 4
  %81 = getelementptr ptr, ptr %78, i32 %80
  %82 = getelementptr ptr, ptr %81, i32 5
  %83 = load ptr, ptr %82, align 8
  %84 = getelementptr { ptr, ptr }, ptr %83, i32 0, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = load i32, ptr %67, align 4
  call void %85(ptr %77, i32 %86) #15
  %87 = load i32, ptr %67, align 4
  %88 = sext i32 %87 to i64
  %89 = mul i64 %88, ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64)
  %90 = call ptr @bump_malloc(i64 %89)
  store ptr %90, ptr %5, align 8
  %.reload19 = load ptr, ptr %.reg2mem14, align 8
  %91 = load ptr, ptr %.reload19, align 8
  %92 = load ptr, ptr %13, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %92)
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %94 = load i32, ptr %.reload4, align 4
  %95 = getelementptr ptr, ptr %92, i32 %94
  %96 = getelementptr ptr, ptr %95, i32 3
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr { ptr, ptr }, ptr %97, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr }, ptr %5, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr } undef, ptr %101, 0
  call void %99(ptr %91, { ptr } %102) #15
  %103 = load i32, ptr %67, align 4
  %104 = sext i32 %103 to i64
  %105 = mul i64 %104, ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64)
  %106 = call ptr @bump_malloc(i64 %105)
  store ptr %106, ptr %6, align 8
  %.reload18 = load ptr, ptr %.reg2mem14, align 8
  %107 = load ptr, ptr %.reload18, align 8
  %108 = load ptr, ptr %13, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %108)
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %110 = load i32, ptr %.reload3, align 4
  %111 = getelementptr ptr, ptr %108, i32 %110
  %112 = getelementptr ptr, ptr %111, i32 4
  %113 = load ptr, ptr %112, align 8
  %114 = getelementptr { ptr, ptr }, ptr %113, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr } undef, ptr %117, 0
  call void %115(ptr %107, { ptr } %118) #15
  store i32 0, ptr %7, align 4
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  %119 = load ptr, ptr %.reload17, align 8
  %120 = load ptr, ptr %13, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %120)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %122 = load i32, ptr %.reload2, align 4
  %123 = getelementptr ptr, ptr %120, i32 %122
  %124 = getelementptr ptr, ptr %123, i32 6
  %125 = load ptr, ptr %124, align 8
  %126 = getelementptr { ptr, ptr }, ptr %125, i32 0, i32 1
  %127 = load ptr, ptr %126, align 8
  %128 = load i32, ptr %7, align 4
  call void %127(ptr %119, i32 %128) #15
  %129 = load ptr, ptr %37, align 8
  %130 = insertvalue { ptr } undef, ptr %129, 0
  %131 = load i32, ptr %62, align 4
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  %132 = load ptr, ptr %.reload27, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %132, 0
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %134 = load ptr, ptr %.reload16, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %134, 1
  %.reload12 = load ptr, ptr %.reg2mem10, align 8
  %136 = load ptr, ptr %.reload12, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %136, 2
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %138 = load i32, ptr %.reload1, align 4
  %139 = insertvalue { ptr, ptr, ptr, i32 } %137, i32 %138, 3
  %140 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %141 = getelementptr [2 x ptr], ptr %140, i32 0, i32 1
  store ptr null, ptr %141, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 8, ptr %140)
  store ptr @buffer_typ, ptr %140, align 8
  %143 = getelementptr [2 x ptr], ptr %8, i32 0, i32 0
  store ptr %140, ptr %143, align 8
  %144 = getelementptr [2 x ptr], ptr %8, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %144, align 8
  %145 = call ptr @llvm.invariant.start.p0(i64 4, ptr %8)
  %146 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %132)
  %147 = getelementptr ptr, ptr %132, i32 %138
  %148 = getelementptr ptr, ptr %147, i32 16
  %149 = load ptr, ptr %148, align 8
  %150 = getelementptr { ptr, ptr }, ptr %9, i32 0, i32 0
  store ptr @buffer_typ, ptr %150, align 8
  %151 = getelementptr { ptr, ptr }, ptr %9, i32 0, i32 1
  store ptr @i32_typ, ptr %151, align 8
  %152 = call ptr @behavior_wrapper(ptr %149, { ptr, ptr, ptr, i32 } %139, ptr %9)
  call void %152({ ptr, ptr, ptr, i32 } %139, { ptr, ptr, ptr, i32 } %139, ptr %8, { ptr } %130, i32 %131) #17
  %153 = load ptr, ptr %50, align 8
  %154 = insertvalue { ptr } undef, ptr %153, 0
  %155 = load i32, ptr %62, align 4
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %156 = load ptr, ptr %.reload26, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %156, 0
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %158 = load ptr, ptr %.reload15, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %158, 1
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %160 = load ptr, ptr %.reload11, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %160, 2
  %.reload = load ptr, ptr %.reg2mem, align 8
  %162 = load i32, ptr %.reload, align 4
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, i32 %162, 3
  %164 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %165 = getelementptr [2 x ptr], ptr %164, i32 0, i32 1
  store ptr null, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 8, ptr %164)
  store ptr @buffer_typ, ptr %164, align 8
  %167 = getelementptr [2 x ptr], ptr %10, i32 0, i32 0
  store ptr %164, ptr %167, align 8
  %168 = getelementptr [2 x ptr], ptr %10, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %168, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 4, ptr %10)
  %170 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %156)
  %171 = getelementptr ptr, ptr %156, i32 %162
  %172 = getelementptr ptr, ptr %171, i32 16
  %173 = load ptr, ptr %172, align 8
  %174 = getelementptr { ptr, ptr }, ptr %11, i32 0, i32 0
  store ptr @buffer_typ, ptr %174, align 8
  %175 = getelementptr { ptr, ptr }, ptr %11, i32 0, i32 1
  store ptr @i32_typ, ptr %175, align 8
  %176 = call ptr @behavior_wrapper(ptr %173, { ptr, ptr, ptr, i32 } %163, ptr %11)
  call void %176({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr %10, { ptr } %154, i32 %155) #17
  ret void
}

define i1 @CuckooMap_replace_in_table_keyK_valueV_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5, i32 %6, { ptr } %7) {
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [0 x ptr], align 8
  %11 = alloca {}, align 8
  %12 = alloca i32, align 4
  %13 = alloca i1, align 1
  %14 = alloca i1, align 1
  %15 = alloca [0 x ptr], align 8
  %16 = alloca {}, align 8
  %17 = alloca { ptr, i160 }, align 8
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca i160, align 8
  %21 = alloca ptr, align 8
  %22 = alloca i160, align 8
  %23 = alloca ptr, align 8
  %24 = alloca ptr, align 8
  %25 = alloca i1, align 1
  %26 = alloca i1, align 1
  %27 = alloca [3 x ptr], align 8
  %28 = alloca i32, align 4
  %29 = alloca ptr, align 8
  %30 = alloca ptr, align 8
  %31 = alloca ptr, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = alloca i160, align 8
  %35 = alloca ptr, align 8
  %36 = alloca [3 x ptr], align 8
  %37 = alloca { ptr, ptr, ptr }, align 8
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  %40 = alloca i1, align 1
  %41 = alloca i1, align 1
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem23 = alloca ptr, align 8
  %.reg2mem26 = alloca ptr, align 8
  %.reg2mem29 = alloca ptr, align 8
  %.reg2mem36 = alloca ptr, align 8
  %.reg2mem43 = alloca i1, align 1
  %.reg2mem45 = alloca i32, align 4
  %.reg2mem47 = alloca i1, align 1
  %.reg2mem49 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %42, align 8
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  store ptr %48, ptr %.reg2mem36, align 8
  %49 = load ptr, ptr %47, align 8
  %.reload42 = load ptr, ptr %.reg2mem36, align 8
  store ptr %49, ptr %.reload42, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  store ptr %54, ptr %.reg2mem29, align 8
  %55 = load i32, ptr %53, align 4
  %.reload35 = load ptr, ptr %.reg2mem29, align 8
  store i32 %55, ptr %.reload35, align 4
  call void @set_offset(ptr %43, ptr @CuckooMap)
  %56 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %56, align 8
  %57 = alloca i160, align 8
  %58 = alloca ptr, align 8
  %59 = getelementptr { ptr, i160 }, ptr %56, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  store ptr %60, ptr %58, align 8
  %61 = getelementptr { ptr, i160 }, ptr %56, i32 0, i32 1
  %62 = load i160, ptr %61, align 4
  store i160 %62, ptr %57, align 4
  %63 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %63, align 8
  %64 = alloca i160, align 8
  %65 = alloca ptr, align 8
  %66 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 0
  %67 = load ptr, ptr %66, align 8
  store ptr %67, ptr %65, align 8
  %68 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 1
  %69 = load i160, ptr %68, align 4
  store i160 %69, ptr %64, align 4
  %70 = alloca i32, align 4
  store i32 %5, ptr %70, align 4
  %71 = alloca i32, align 4
  store i32 %6, ptr %71, align 4
  %72 = alloca ptr, align 8
  store { ptr } %7, ptr %72, align 8
  %73 = alloca i160, align 8
  %74 = alloca ptr, align 8
  %75 = load ptr, ptr %72, align 8
  %76 = load i32, ptr %71, align 4
  %77 = sext i32 %76 to i64
  %78 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %77
  %79 = getelementptr i8, ptr %75, i64 %78
  %80 = getelementptr { ptr, i160 }, ptr %79, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  store ptr %81, ptr %74, align 8
  %82 = getelementptr { ptr, i160 }, ptr %79, i32 0, i32 1
  %83 = load i160, ptr %82, align 4
  store i160 %83, ptr %73, align 4
  %84 = load ptr, ptr %74, align 8
  %85 = ptrtoint ptr %84 to i64
  %86 = icmp eq i64 %85, ptrtoint (ptr @nil_typ to i64)
  %87 = icmp eq i64 %85, 0
  %88 = or i1 %86, %87
  %89 = icmp eq i1 %88, false
  %90 = alloca i1, align 1
  store i1 %89, ptr %90, align 1
  %91 = load i1, ptr %90, align 1
  br i1 %91, label %92, label %277

92:                                               ; preds = %8
  %93 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  store ptr %93, ptr %.reg2mem26, align 8
  %94 = load ptr, ptr %74, align 8
  %.reload28 = load ptr, ptr %.reg2mem26, align 8
  store ptr %94, ptr %.reload28, align 8
  %95 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  store ptr %95, ptr %.reg2mem23, align 8
  %96 = load i160, ptr %73, align 4
  %.reload25 = load ptr, ptr %.reg2mem23, align 8
  store i160 %96, ptr %.reload25, align 4
  call void @set_offset(ptr %9, ptr @Entry)
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  store ptr %97, ptr %.reg2mem20, align 8
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %98 = load ptr, ptr %.reload22, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  store ptr %100, ptr %.reg2mem17, align 8
  %.reload19 = load ptr, ptr %.reg2mem17, align 8
  %101 = load ptr, ptr %.reload19, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 1
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  store ptr %103, ptr %.reg2mem14, align 8
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %104 = load ptr, ptr %.reload16, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %104, 2
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  store ptr %106, ptr %.reg2mem11, align 8
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %107 = load i32, ptr %.reload13, align 4
  %108 = insertvalue { ptr, ptr, ptr, i32 } %105, i32 %107, 3
  %109 = call ptr @llvm.invariant.start.p0(i64 0, ptr %10)
  %110 = call ptr @llvm.invariant.start.p0(i64 120, ptr %98)
  %111 = getelementptr ptr, ptr %98, i32 %107
  %112 = getelementptr ptr, ptr %111, i32 8
  %113 = load ptr, ptr %112, align 8
  %114 = call ptr @behavior_wrapper(ptr %113, { ptr, ptr, ptr, i32 } %108, ptr %11)
  %115 = call i32 %114({ ptr, ptr, ptr, i32 } %108, { ptr, ptr, ptr, i32 } %108, ptr %10) #17
  store i32 %115, ptr %12, align 4
  %116 = load i32, ptr %12, align 4
  %117 = load i32, ptr %70, align 4
  %118 = icmp eq i32 %116, %117
  store i1 %118, ptr %13, align 1
  %119 = load i1, ptr %13, align 1
  store i1 %119, ptr %14, align 1
  br i1 %119, label %120, label %._crit_edge

._crit_edge:                                      ; preds = %92
  br label %165

120:                                              ; preds = %92
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %121 = load ptr, ptr %.reload21, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %121, 0
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %123 = load ptr, ptr %.reload18, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %123, 1
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %125 = load ptr, ptr %.reload15, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %125, 2
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %127 = load i32, ptr %.reload12, align 4
  %128 = insertvalue { ptr, ptr, ptr, i32 } %126, i32 %127, 3
  %129 = call ptr @llvm.invariant.start.p0(i64 0, ptr %15)
  %130 = call ptr @llvm.invariant.start.p0(i64 120, ptr %121)
  %131 = getelementptr ptr, ptr %121, i32 %127
  %132 = getelementptr ptr, ptr %131, i32 6
  %133 = load ptr, ptr %132, align 8
  %134 = call ptr @behavior_wrapper(ptr %133, { ptr, ptr, ptr, i32 } %128, ptr %16)
  %135 = call { ptr, i160 } %134({ ptr, ptr, ptr, i32 } %128, { ptr, ptr, ptr, i32 } %128, ptr %15) #17
  store { ptr, i160 } %135, ptr %17, align 8
  %136 = getelementptr { ptr, i160 }, ptr %17, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  store ptr %137, ptr %19, align 8
  %138 = getelementptr { ptr, i160 }, ptr %17, i32 0, i32 1
  %139 = load i160, ptr %138, align 4
  store i160 %139, ptr %18, align 4
  %140 = load ptr, ptr %19, align 8
  store ptr %140, ptr %21, align 8
  %141 = load i160, ptr %18, align 4
  store i160 %141, ptr %20, align 4
  %142 = load ptr, ptr %21, align 8
  %143 = insertvalue { ptr, i160 } undef, ptr %142, 0
  %144 = load i160, ptr %20, align 4
  %145 = insertvalue { ptr, i160 } %143, i160 %144, 1
  %146 = load ptr, ptr %58, align 8
  store ptr %146, ptr %23, align 8
  %147 = load i160, ptr %57, align 4
  store i160 %147, ptr %22, align 4
  %148 = load ptr, ptr %23, align 8
  %149 = insertvalue { ptr, i160 } undef, ptr %148, 0
  %150 = load i160, ptr %22, align 4
  %151 = insertvalue { ptr, i160 } %149, i160 %150, 1
  %.reload41 = load ptr, ptr %.reg2mem36, align 8
  %152 = load ptr, ptr %.reload41, align 8
  %153 = load ptr, ptr %43, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %153)
  %.reload34 = load ptr, ptr %.reg2mem29, align 8
  %155 = load i32, ptr %.reload34, align 4
  %156 = getelementptr ptr, ptr %153, i32 %155
  %157 = getelementptr ptr, ptr %156, i32 8
  %158 = load ptr, ptr %157, align 8
  %159 = getelementptr { ptr, ptr }, ptr %158, i32 0, i32 0
  %160 = load ptr, ptr %159, align 8
  %161 = call { ptr } %160(ptr %152) #16
  store { ptr } %161, ptr %24, align 8
  %162 = load ptr, ptr %24, align 8
  %163 = call i1 %162({ ptr, i160 } %145, { ptr, i160 } %151)
  store i1 %163, ptr %25, align 1
  %164 = load i1, ptr %25, align 1
  store i1 %164, ptr %14, align 1
  br label %165

165:                                              ; preds = %._crit_edge, %120
  %166 = load i1, ptr %14, align 1
  store i1 %166, ptr %26, align 1
  %167 = load i1, ptr %26, align 1
  %168 = xor i1 %167, true
  %169 = zext i1 %168 to i32
  store i32 %169, ptr %.reg2mem9, align 4
  br i1 %167, label %170, label %272

170:                                              ; preds = %165
  %.reload40 = load ptr, ptr %.reg2mem36, align 8
  %171 = load ptr, ptr %.reload40, align 8
  %172 = load ptr, ptr %43, align 8
  %173 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %172)
  %.reload33 = load ptr, ptr %.reg2mem29, align 8
  %174 = load i32, ptr %.reload33, align 4
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = load ptr, ptr %175, align 8
  %177 = call ptr @typegetter_wrapper(ptr %176, ptr %171)
  %.reload39 = load ptr, ptr %.reg2mem36, align 8
  %178 = load ptr, ptr %.reload39, align 8
  %179 = load ptr, ptr %43, align 8
  %180 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %179)
  %.reload32 = load ptr, ptr %.reg2mem29, align 8
  %181 = load i32, ptr %.reload32, align 4
  %182 = getelementptr ptr, ptr %179, i32 %181
  %183 = getelementptr ptr, ptr %182, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = call ptr @typegetter_wrapper(ptr %184, ptr %178)
  store ptr @Entry, ptr %27, align 8
  %186 = getelementptr ptr, ptr %27, i32 1
  store ptr %177, ptr %186, align 8
  %187 = getelementptr ptr, ptr %27, i32 2
  store ptr %185, ptr %187, align 8
  %188 = load ptr, ptr %27, align 8
  %189 = getelementptr ptr, ptr %188, i32 6
  %190 = load ptr, ptr %189, align 8
  %191 = call { i64, i64 } @size_wrapper(ptr %190, ptr %27)
  %192 = extractvalue { i64, i64 } %191, 0
  %193 = call ptr @bump_malloc(i64 %192)
  store ptr %177, ptr %193, align 8
  %194 = getelementptr ptr, ptr %193, i32 1
  store ptr %185, ptr %194, align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 16, ptr %193)
  store ptr @Entry, ptr %31, align 8
  store ptr %193, ptr %30, align 8
  store i32 10, ptr %28, align 4
  %196 = load ptr, ptr %58, align 8
  store ptr %196, ptr %33, align 8
  %197 = load i160, ptr %57, align 4
  store i160 %197, ptr %32, align 4
  %198 = load ptr, ptr %33, align 8
  %199 = insertvalue { ptr, i160 } undef, ptr %198, 0
  %200 = load i160, ptr %32, align 4
  %201 = insertvalue { ptr, i160 } %199, i160 %200, 1
  %202 = load ptr, ptr %65, align 8
  store ptr %202, ptr %35, align 8
  %203 = load i160, ptr %64, align 4
  store i160 %203, ptr %34, align 4
  %204 = load ptr, ptr %35, align 8
  %205 = insertvalue { ptr, i160 } undef, ptr %204, 0
  %206 = load i160, ptr %34, align 4
  %207 = insertvalue { ptr, i160 } %205, i160 %206, 1
  %208 = load i32, ptr %70, align 4
  %209 = load ptr, ptr %31, align 8
  %210 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %209, 0
  %211 = load ptr, ptr %30, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %211, 1
  %213 = load ptr, ptr %29, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %212, ptr %213, 2
  %215 = load i32, ptr %28, align 4
  %216 = insertvalue { ptr, ptr, ptr, i32 } %214, i32 %215, 3
  %.reload38 = load ptr, ptr %.reg2mem36, align 8
  %217 = load ptr, ptr %.reload38, align 8
  %218 = load ptr, ptr %43, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %218)
  %.reload31 = load ptr, ptr %.reg2mem29, align 8
  %220 = load i32, ptr %.reload31, align 4
  %221 = getelementptr ptr, ptr %218, i32 %220
  %222 = load ptr, ptr %221, align 8
  %223 = call ptr @typegetter_wrapper(ptr %222, ptr %217)
  %.reload37 = load ptr, ptr %.reg2mem36, align 8
  %224 = load ptr, ptr %.reload37, align 8
  %225 = load ptr, ptr %43, align 8
  %226 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %225)
  %.reload30 = load ptr, ptr %.reg2mem29, align 8
  %227 = load i32, ptr %.reload30, align 4
  %228 = getelementptr ptr, ptr %225, i32 %227
  %229 = getelementptr ptr, ptr %228, i32 1
  %230 = load ptr, ptr %229, align 8
  %231 = call ptr @typegetter_wrapper(ptr %230, ptr %224)
  %232 = getelementptr [3 x ptr], ptr %36, i32 0, i32 0
  store ptr %223, ptr %232, align 8
  %233 = getelementptr [3 x ptr], ptr %36, i32 0, i32 1
  store ptr %231, ptr %233, align 8
  %234 = getelementptr [3 x ptr], ptr %36, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %234, align 8
  %235 = call ptr @llvm.invariant.start.p0(i64 9, ptr %36)
  %236 = call ptr @llvm.invariant.start.p0(i64 120, ptr %209)
  %237 = getelementptr ptr, ptr %209, i32 %215
  %238 = getelementptr ptr, ptr %237, i32 5
  %239 = load ptr, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr }, ptr %37, i32 0, i32 0
  store ptr %198, ptr %240, align 8
  %241 = getelementptr { ptr, ptr, ptr }, ptr %37, i32 0, i32 1
  store ptr %204, ptr %241, align 8
  %242 = getelementptr { ptr, ptr, ptr }, ptr %37, i32 0, i32 2
  store ptr @i32_typ, ptr %242, align 8
  %243 = call ptr @behavior_wrapper(ptr %239, { ptr, ptr, ptr, i32 } %216, ptr %37)
  call void %243({ ptr, ptr, ptr, i32 } %216, { ptr, ptr, ptr, i32 } %216, ptr %36, { ptr, i160 } %201, { ptr, i160 } %207, i32 %208) #17
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %245 = load ptr, ptr %31, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %247 = load ptr, ptr %30, align 8
  store ptr %247, ptr %246, align 8
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %249 = load ptr, ptr %29, align 8
  store ptr %249, ptr %248, align 8
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %251 = load i32, ptr %28, align 4
  store i32 %251, ptr %250, align 4
  call void @set_offset(ptr %38, ptr @Entry)
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %253 = load ptr, ptr %244, align 8
  store ptr %253, ptr %252, align 8
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %255 = load ptr, ptr %246, align 8
  store ptr %255, ptr %254, align 8
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %257 = load ptr, ptr %248, align 8
  store ptr %257, ptr %256, align 8
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %259 = load i32, ptr %250, align 4
  store i32 %259, ptr %258, align 4
  %260 = load ptr, ptr %72, align 8
  %261 = load i32, ptr %71, align 4
  %262 = sext i32 %261 to i64
  %263 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %262
  %264 = getelementptr i8, ptr %260, i64 %263
  %265 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 0
  %266 = getelementptr { ptr, i160 }, ptr %264, i32 0, i32 0
  %267 = load ptr, ptr %265, align 8
  store ptr %267, ptr %266, align 8
  %268 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %269 = getelementptr { ptr, i160 }, ptr %264, i32 0, i32 1
  %270 = load i160, ptr %268, align 4
  store i160 %270, ptr %269, align 4
  store i1 true, ptr %40, align 1
  %271 = load i1, ptr %40, align 1
  store i1 %271, ptr %.reg2mem7, align 1
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  store i1 %.reload8, ptr %.reg2mem49, align 1
  br label %275

272:                                              ; preds = %165
  %.reload27 = load ptr, ptr %.reg2mem26, align 8
  %273 = load ptr, ptr %.reload27, align 8
  store ptr %273, ptr %74, align 8
  %.reload24 = load ptr, ptr %.reg2mem23, align 8
  %274 = load i160, ptr %.reload24, align 4
  store i160 %274, ptr %73, align 4
  store i1 poison, ptr %.reg2mem49, align 1
  br label %275

275:                                              ; preds = %272, %170
  %.reload50 = load i1, ptr %.reg2mem49, align 1
  store i1 %.reload50, ptr %.reg2mem5, align 1
  br label %276

276:                                              ; preds = %275
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem45, align 4
  store i1 %.reload6, ptr %.reg2mem47, align 1
  br label %278

277:                                              ; preds = %8
  store i32 1, ptr %.reg2mem45, align 4
  store i1 poison, ptr %.reg2mem47, align 1
  br label %278

278:                                              ; preds = %277, %276
  %.reload48 = load i1, ptr %.reg2mem47, align 1
  %.reload46 = load i32, ptr %.reg2mem45, align 4
  store i1 %.reload48, ptr %.reg2mem3, align 1
  store i32 %.reload46, ptr %.reg2mem1, align 4
  br label %279

279:                                              ; preds = %278
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %280 = zext i32 %.reload2 to i64
  %281 = trunc i64 %280 to i32
  switch i32 %281, label %283 [
    i32 0, label %282
  ]

282:                                              ; preds = %279
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  store i1 %.reload4, ptr %.reg2mem43, align 1
  br label %285

283:                                              ; preds = %279
  store i1 false, ptr %41, align 1
  %284 = load i1, ptr %41, align 1
  store i1 %284, ptr %.reg2mem, align 1
  %.reload = load i1, ptr %.reg2mem, align 1
  store i1 %.reload, ptr %.reg2mem43, align 1
  br label %285

285:                                              ; preds = %283, %282
  %.reload44 = load i1, ptr %.reg2mem43, align 1
  ret i1 %.reload44
}

define { ptr, i160 } @CuckooMap_get_from_table_keyK_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, i32 %4, i32 %5, { ptr } %6) {
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca i32, align 4
  %12 = alloca i1, align 1
  %13 = alloca i1, align 1
  %14 = alloca [0 x ptr], align 8
  %15 = alloca {}, align 8
  %16 = alloca { ptr, i160 }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca ptr, align 8
  %24 = alloca i1, align 1
  %25 = alloca i1, align 1
  %26 = alloca [0 x ptr], align 8
  %27 = alloca {}, align 8
  %28 = alloca { ptr, i160 }, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = alloca [0 x i8], align 1
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem23 = alloca ptr, align 8
  %.reg2mem27 = alloca ptr, align 8
  %.reg2mem30 = alloca ptr, align 8
  %.reg2mem33 = alloca ptr, align 8
  %.reg2mem36 = alloca ptr, align 8
  %.reg2mem39 = alloca { ptr, i160 }, align 8
  %.reg2mem41 = alloca i32, align 4
  %.reg2mem43 = alloca { ptr, i160 }, align 8
  %.reg2mem45 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %34, align 8
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  store ptr %40, ptr %.reg2mem36, align 8
  %41 = load ptr, ptr %39, align 8
  %.reload38 = load ptr, ptr %.reg2mem36, align 8
  store ptr %41, ptr %.reload38, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr %46, ptr %.reg2mem33, align 8
  %47 = load i32, ptr %45, align 4
  %.reload35 = load ptr, ptr %.reg2mem33, align 8
  store i32 %47, ptr %.reload35, align 4
  call void @set_offset(ptr %35, ptr @CuckooMap)
  %48 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %48, align 8
  %49 = alloca i160, align 8
  %50 = alloca ptr, align 8
  %51 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  store ptr %52, ptr %50, align 8
  %53 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 1
  %54 = load i160, ptr %53, align 4
  store i160 %54, ptr %49, align 4
  %55 = alloca i32, align 4
  store i32 %4, ptr %55, align 4
  %56 = alloca i32, align 4
  store i32 %5, ptr %56, align 4
  %57 = alloca ptr, align 8
  store { ptr } %6, ptr %57, align 8
  %58 = alloca i160, align 8
  %59 = alloca ptr, align 8
  %60 = load ptr, ptr %57, align 8
  %61 = load i32, ptr %56, align 4
  %62 = sext i32 %61 to i64
  %63 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %62
  %64 = getelementptr i8, ptr %60, i64 %63
  %65 = getelementptr { ptr, i160 }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  store ptr %66, ptr %59, align 8
  %67 = getelementptr { ptr, i160 }, ptr %64, i32 0, i32 1
  %68 = load i160, ptr %67, align 4
  store i160 %68, ptr %58, align 4
  %69 = load ptr, ptr %59, align 8
  %70 = ptrtoint ptr %69 to i64
  %71 = icmp eq i64 %70, ptrtoint (ptr @nil_typ to i64)
  %72 = icmp eq i64 %70, 0
  %73 = or i1 %71, %72
  %74 = icmp eq i1 %73, false
  %75 = alloca i1, align 1
  store i1 %74, ptr %75, align 1
  %76 = load i1, ptr %75, align 1
  br i1 %76, label %77, label %184

77:                                               ; preds = %7
  %78 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  store ptr %78, ptr %.reg2mem30, align 8
  %79 = load ptr, ptr %59, align 8
  %.reload32 = load ptr, ptr %.reg2mem30, align 8
  store ptr %79, ptr %.reload32, align 8
  %80 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  store ptr %80, ptr %.reg2mem27, align 8
  %81 = load i160, ptr %58, align 4
  %.reload29 = load ptr, ptr %.reg2mem27, align 8
  store i160 %81, ptr %.reload29, align 4
  call void @set_offset(ptr %8, ptr @Entry)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  store ptr %82, ptr %.reg2mem23, align 8
  %.reload26 = load ptr, ptr %.reg2mem23, align 8
  %83 = load ptr, ptr %.reload26, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  store ptr %85, ptr %.reg2mem19, align 8
  %.reload22 = load ptr, ptr %.reg2mem19, align 8
  %86 = load ptr, ptr %.reload22, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  store ptr %88, ptr %.reg2mem15, align 8
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %89 = load ptr, ptr %.reload18, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  store ptr %91, ptr %.reg2mem11, align 8
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %92 = load i32, ptr %.reload14, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %95 = call ptr @llvm.invariant.start.p0(i64 120, ptr %83)
  %96 = getelementptr ptr, ptr %83, i32 %92
  %97 = getelementptr ptr, ptr %96, i32 8
  %98 = load ptr, ptr %97, align 8
  %99 = call ptr @behavior_wrapper(ptr %98, { ptr, ptr, ptr, i32 } %93, ptr %10)
  %100 = call i32 %99({ ptr, ptr, ptr, i32 } %93, { ptr, ptr, ptr, i32 } %93, ptr %9) #17
  store i32 %100, ptr %11, align 4
  %101 = load i32, ptr %11, align 4
  %102 = load i32, ptr %55, align 4
  %103 = icmp eq i32 %101, %102
  store i1 %103, ptr %12, align 1
  %104 = load i1, ptr %12, align 1
  store i1 %104, ptr %13, align 1
  br i1 %104, label %105, label %._crit_edge

._crit_edge:                                      ; preds = %77
  br label %150

105:                                              ; preds = %77
  %.reload25 = load ptr, ptr %.reg2mem23, align 8
  %106 = load ptr, ptr %.reload25, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %106, 0
  %.reload21 = load ptr, ptr %.reg2mem19, align 8
  %108 = load ptr, ptr %.reload21, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %108, 1
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %110 = load ptr, ptr %.reload17, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 2
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %112 = load i32, ptr %.reload13, align 4
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, i32 %112, 3
  %114 = call ptr @llvm.invariant.start.p0(i64 0, ptr %14)
  %115 = call ptr @llvm.invariant.start.p0(i64 120, ptr %106)
  %116 = getelementptr ptr, ptr %106, i32 %112
  %117 = getelementptr ptr, ptr %116, i32 6
  %118 = load ptr, ptr %117, align 8
  %119 = call ptr @behavior_wrapper(ptr %118, { ptr, ptr, ptr, i32 } %113, ptr %15)
  %120 = call { ptr, i160 } %119({ ptr, ptr, ptr, i32 } %113, { ptr, ptr, ptr, i32 } %113, ptr %14) #17
  store { ptr, i160 } %120, ptr %16, align 8
  %121 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  store ptr %122, ptr %18, align 8
  %123 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %124 = load i160, ptr %123, align 4
  store i160 %124, ptr %17, align 4
  %125 = load ptr, ptr %18, align 8
  store ptr %125, ptr %20, align 8
  %126 = load i160, ptr %17, align 4
  store i160 %126, ptr %19, align 4
  %127 = load ptr, ptr %20, align 8
  %128 = insertvalue { ptr, i160 } undef, ptr %127, 0
  %129 = load i160, ptr %19, align 4
  %130 = insertvalue { ptr, i160 } %128, i160 %129, 1
  %131 = load ptr, ptr %50, align 8
  store ptr %131, ptr %22, align 8
  %132 = load i160, ptr %49, align 4
  store i160 %132, ptr %21, align 4
  %133 = load ptr, ptr %22, align 8
  %134 = insertvalue { ptr, i160 } undef, ptr %133, 0
  %135 = load i160, ptr %21, align 4
  %136 = insertvalue { ptr, i160 } %134, i160 %135, 1
  %.reload37 = load ptr, ptr %.reg2mem36, align 8
  %137 = load ptr, ptr %.reload37, align 8
  %138 = load ptr, ptr %35, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %138)
  %.reload34 = load ptr, ptr %.reg2mem33, align 8
  %140 = load i32, ptr %.reload34, align 4
  %141 = getelementptr ptr, ptr %138, i32 %140
  %142 = getelementptr ptr, ptr %141, i32 8
  %143 = load ptr, ptr %142, align 8
  %144 = getelementptr { ptr, ptr }, ptr %143, i32 0, i32 0
  %145 = load ptr, ptr %144, align 8
  %146 = call { ptr } %145(ptr %137) #16
  store { ptr } %146, ptr %23, align 8
  %147 = load ptr, ptr %23, align 8
  %148 = call i1 %147({ ptr, i160 } %130, { ptr, i160 } %136)
  store i1 %148, ptr %24, align 1
  %149 = load i1, ptr %24, align 1
  store i1 %149, ptr %13, align 1
  br label %150

150:                                              ; preds = %._crit_edge, %105
  %151 = load i1, ptr %13, align 1
  store i1 %151, ptr %25, align 1
  %152 = load i1, ptr %25, align 1
  %153 = xor i1 %152, true
  %154 = zext i1 %153 to i32
  store i32 %154, ptr %.reg2mem9, align 4
  br i1 %152, label %155, label %179

155:                                              ; preds = %150
  %.reload24 = load ptr, ptr %.reg2mem23, align 8
  %156 = load ptr, ptr %.reload24, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %156, 0
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  %158 = load ptr, ptr %.reload20, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %158, 1
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %160 = load ptr, ptr %.reload16, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %160, 2
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %162 = load i32, ptr %.reload12, align 4
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, i32 %162, 3
  %164 = call ptr @llvm.invariant.start.p0(i64 0, ptr %26)
  %165 = call ptr @llvm.invariant.start.p0(i64 120, ptr %156)
  %166 = getelementptr ptr, ptr %156, i32 %162
  %167 = getelementptr ptr, ptr %166, i32 7
  %168 = load ptr, ptr %167, align 8
  %169 = call ptr @behavior_wrapper(ptr %168, { ptr, ptr, ptr, i32 } %163, ptr %27)
  %170 = call { ptr, i160 } %169({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr %26) #17
  store { ptr, i160 } %170, ptr %28, align 8
  %171 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %172 = load ptr, ptr %171, align 8
  store ptr %172, ptr %30, align 8
  %173 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %174 = load i160, ptr %173, align 4
  store i160 %174, ptr %29, align 4
  %175 = load ptr, ptr %30, align 8
  %176 = insertvalue { ptr, i160 } undef, ptr %175, 0
  %177 = load i160, ptr %29, align 4
  %178 = insertvalue { ptr, i160 } %176, i160 %177, 1
  store { ptr, i160 } %178, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem45, align 8
  br label %182

179:                                              ; preds = %150
  %.reload31 = load ptr, ptr %.reg2mem30, align 8
  %180 = load ptr, ptr %.reload31, align 8
  store ptr %180, ptr %59, align 8
  %.reload28 = load ptr, ptr %.reg2mem27, align 8
  %181 = load i160, ptr %.reload28, align 4
  store i160 %181, ptr %58, align 4
  store { ptr, i160 } poison, ptr %.reg2mem45, align 8
  br label %182

182:                                              ; preds = %179, %155
  %.reload46 = load { ptr, i160 }, ptr %.reg2mem45, align 8
  store { ptr, i160 } %.reload46, ptr %.reg2mem5, align 8
  br label %183

183:                                              ; preds = %182
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem41, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem43, align 8
  br label %185

184:                                              ; preds = %7
  store i32 1, ptr %.reg2mem41, align 4
  store { ptr, i160 } poison, ptr %.reg2mem43, align 8
  br label %185

185:                                              ; preds = %184, %183
  %.reload44 = load { ptr, i160 }, ptr %.reg2mem43, align 8
  %.reload42 = load i32, ptr %.reg2mem41, align 4
  store { ptr, i160 } %.reload44, ptr %.reg2mem3, align 8
  store i32 %.reload42, ptr %.reg2mem1, align 4
  br label %186

186:                                              ; preds = %185
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %187 = zext i32 %.reload2 to i64
  %188 = trunc i64 %187 to i32
  switch i32 %188, label %190 [
    i32 0, label %189
  ]

189:                                              ; preds = %186
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem39, align 8
  br label %196

190:                                              ; preds = %186
  %191 = load [0 x i8], ptr %31, align 1
  store [0 x i8] %191, ptr %32, align 1
  store ptr @nil_typ, ptr %33, align 8
  %192 = load ptr, ptr %33, align 8
  %193 = insertvalue { ptr, i160 } undef, ptr %192, 0
  %194 = load i160, ptr %32, align 4
  %195 = insertvalue { ptr, i160 } %193, i160 %194, 1
  store { ptr, i160 } %195, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem39, align 8
  br label %196

196:                                              ; preds = %190, %189
  %.reload40 = load { ptr, i160 }, ptr %.reg2mem39, align 8
  ret { ptr, i160 } %.reload40
}

define { ptr, i160 } @CuckooMap_remove_from_table_keyK_h1Ptri32_idxPtri32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, i32 %4, i32 %5, { ptr } %6) {
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca i32, align 4
  %12 = alloca i1, align 1
  %13 = alloca i1, align 1
  %14 = alloca [0 x ptr], align 8
  %15 = alloca {}, align 8
  %16 = alloca { ptr, i160 }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca ptr, align 8
  %24 = alloca i1, align 1
  %25 = alloca i1, align 1
  %26 = alloca [0 x ptr], align 8
  %27 = alloca {}, align 8
  %28 = alloca { ptr, i160 }, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = alloca [0 x i8], align 1
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca [0 x i8], align 1
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem23 = alloca ptr, align 8
  %.reg2mem27 = alloca ptr, align 8
  %.reg2mem30 = alloca ptr, align 8
  %.reg2mem33 = alloca ptr, align 8
  %.reg2mem38 = alloca ptr, align 8
  %.reg2mem43 = alloca { ptr, i160 }, align 8
  %.reg2mem45 = alloca i32, align 4
  %.reg2mem47 = alloca { ptr, i160 }, align 8
  %.reg2mem49 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %40, align 8
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 0
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 1
  store ptr %46, ptr %.reg2mem38, align 8
  %47 = load ptr, ptr %45, align 8
  %.reload42 = load ptr, ptr %.reg2mem38, align 8
  store ptr %47, ptr %.reload42, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 2
  %50 = load ptr, ptr %48, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 3
  store ptr %52, ptr %.reg2mem33, align 8
  %53 = load i32, ptr %51, align 4
  %.reload37 = load ptr, ptr %.reg2mem33, align 8
  store i32 %53, ptr %.reload37, align 4
  call void @set_offset(ptr %41, ptr @CuckooMap)
  %54 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %54, align 8
  %55 = alloca i160, align 8
  %56 = alloca ptr, align 8
  %57 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  store ptr %58, ptr %56, align 8
  %59 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 1
  %60 = load i160, ptr %59, align 4
  store i160 %60, ptr %55, align 4
  %61 = alloca i32, align 4
  store i32 %4, ptr %61, align 4
  %62 = alloca i32, align 4
  store i32 %5, ptr %62, align 4
  %63 = alloca ptr, align 8
  store { ptr } %6, ptr %63, align 8
  %64 = alloca i160, align 8
  %65 = alloca ptr, align 8
  %66 = load ptr, ptr %63, align 8
  %67 = load i32, ptr %62, align 4
  %68 = sext i32 %67 to i64
  %69 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %68
  %70 = getelementptr i8, ptr %66, i64 %69
  %71 = getelementptr { ptr, i160 }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  store ptr %72, ptr %65, align 8
  %73 = getelementptr { ptr, i160 }, ptr %70, i32 0, i32 1
  %74 = load i160, ptr %73, align 4
  store i160 %74, ptr %64, align 4
  %75 = load ptr, ptr %65, align 8
  %76 = ptrtoint ptr %75 to i64
  %77 = icmp eq i64 %76, ptrtoint (ptr @nil_typ to i64)
  %78 = icmp eq i64 %76, 0
  %79 = or i1 %77, %78
  %80 = icmp eq i1 %79, false
  %81 = alloca i1, align 1
  store i1 %80, ptr %81, align 1
  %82 = load i1, ptr %81, align 1
  br i1 %82, label %83, label %223

83:                                               ; preds = %7
  %84 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  store ptr %84, ptr %.reg2mem30, align 8
  %85 = load ptr, ptr %65, align 8
  %.reload32 = load ptr, ptr %.reg2mem30, align 8
  store ptr %85, ptr %.reload32, align 8
  %86 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  store ptr %86, ptr %.reg2mem27, align 8
  %87 = load i160, ptr %64, align 4
  %.reload29 = load ptr, ptr %.reg2mem27, align 8
  store i160 %87, ptr %.reload29, align 4
  call void @set_offset(ptr %8, ptr @Entry)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  store ptr %88, ptr %.reg2mem23, align 8
  %.reload26 = load ptr, ptr %.reg2mem23, align 8
  %89 = load ptr, ptr %.reload26, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %89, 0
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  store ptr %91, ptr %.reg2mem19, align 8
  %.reload22 = load ptr, ptr %.reg2mem19, align 8
  %92 = load ptr, ptr %.reload22, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %92, 1
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  store ptr %94, ptr %.reg2mem15, align 8
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %95 = load ptr, ptr %.reload18, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %95, 2
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  store ptr %97, ptr %.reg2mem11, align 8
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %98 = load i32, ptr %.reload14, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %98, 3
  %100 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %101 = call ptr @llvm.invariant.start.p0(i64 120, ptr %89)
  %102 = getelementptr ptr, ptr %89, i32 %98
  %103 = getelementptr ptr, ptr %102, i32 8
  %104 = load ptr, ptr %103, align 8
  %105 = call ptr @behavior_wrapper(ptr %104, { ptr, ptr, ptr, i32 } %99, ptr %10)
  %106 = call i32 %105({ ptr, ptr, ptr, i32 } %99, { ptr, ptr, ptr, i32 } %99, ptr %9) #17
  store i32 %106, ptr %11, align 4
  %107 = load i32, ptr %11, align 4
  %108 = load i32, ptr %61, align 4
  %109 = icmp eq i32 %107, %108
  store i1 %109, ptr %12, align 1
  %110 = load i1, ptr %12, align 1
  store i1 %110, ptr %13, align 1
  br i1 %110, label %111, label %._crit_edge

._crit_edge:                                      ; preds = %83
  br label %156

111:                                              ; preds = %83
  %.reload25 = load ptr, ptr %.reg2mem23, align 8
  %112 = load ptr, ptr %.reload25, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %.reload21 = load ptr, ptr %.reg2mem19, align 8
  %114 = load ptr, ptr %.reload21, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 1
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %116 = load ptr, ptr %.reload17, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %116, 2
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %118 = load i32, ptr %.reload13, align 4
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %118, 3
  %120 = call ptr @llvm.invariant.start.p0(i64 0, ptr %14)
  %121 = call ptr @llvm.invariant.start.p0(i64 120, ptr %112)
  %122 = getelementptr ptr, ptr %112, i32 %118
  %123 = getelementptr ptr, ptr %122, i32 6
  %124 = load ptr, ptr %123, align 8
  %125 = call ptr @behavior_wrapper(ptr %124, { ptr, ptr, ptr, i32 } %119, ptr %15)
  %126 = call { ptr, i160 } %125({ ptr, ptr, ptr, i32 } %119, { ptr, ptr, ptr, i32 } %119, ptr %14) #17
  store { ptr, i160 } %126, ptr %16, align 8
  %127 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  store ptr %128, ptr %18, align 8
  %129 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %130 = load i160, ptr %129, align 4
  store i160 %130, ptr %17, align 4
  %131 = load ptr, ptr %18, align 8
  store ptr %131, ptr %20, align 8
  %132 = load i160, ptr %17, align 4
  store i160 %132, ptr %19, align 4
  %133 = load ptr, ptr %20, align 8
  %134 = insertvalue { ptr, i160 } undef, ptr %133, 0
  %135 = load i160, ptr %19, align 4
  %136 = insertvalue { ptr, i160 } %134, i160 %135, 1
  %137 = load ptr, ptr %56, align 8
  store ptr %137, ptr %22, align 8
  %138 = load i160, ptr %55, align 4
  store i160 %138, ptr %21, align 4
  %139 = load ptr, ptr %22, align 8
  %140 = insertvalue { ptr, i160 } undef, ptr %139, 0
  %141 = load i160, ptr %21, align 4
  %142 = insertvalue { ptr, i160 } %140, i160 %141, 1
  %.reload41 = load ptr, ptr %.reg2mem38, align 8
  %143 = load ptr, ptr %.reload41, align 8
  %144 = load ptr, ptr %41, align 8
  %145 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %144)
  %.reload36 = load ptr, ptr %.reg2mem33, align 8
  %146 = load i32, ptr %.reload36, align 4
  %147 = getelementptr ptr, ptr %144, i32 %146
  %148 = getelementptr ptr, ptr %147, i32 8
  %149 = load ptr, ptr %148, align 8
  %150 = getelementptr { ptr, ptr }, ptr %149, i32 0, i32 0
  %151 = load ptr, ptr %150, align 8
  %152 = call { ptr } %151(ptr %143) #16
  store { ptr } %152, ptr %23, align 8
  %153 = load ptr, ptr %23, align 8
  %154 = call i1 %153({ ptr, i160 } %136, { ptr, i160 } %142)
  store i1 %154, ptr %24, align 1
  %155 = load i1, ptr %24, align 1
  store i1 %155, ptr %13, align 1
  br label %156

156:                                              ; preds = %._crit_edge, %111
  %157 = load i1, ptr %13, align 1
  store i1 %157, ptr %25, align 1
  %158 = load i1, ptr %25, align 1
  %159 = xor i1 %158, true
  %160 = zext i1 %159 to i32
  store i32 %160, ptr %.reg2mem9, align 4
  br i1 %158, label %161, label %218

161:                                              ; preds = %156
  %.reload24 = load ptr, ptr %.reg2mem23, align 8
  %162 = load ptr, ptr %.reload24, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  %164 = load ptr, ptr %.reload20, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 1
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %166 = load ptr, ptr %.reload16, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 2
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %168 = load i32, ptr %.reload12, align 4
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %168, 3
  %170 = call ptr @llvm.invariant.start.p0(i64 0, ptr %26)
  %171 = call ptr @llvm.invariant.start.p0(i64 120, ptr %162)
  %172 = getelementptr ptr, ptr %162, i32 %168
  %173 = getelementptr ptr, ptr %172, i32 7
  %174 = load ptr, ptr %173, align 8
  %175 = call ptr @behavior_wrapper(ptr %174, { ptr, ptr, ptr, i32 } %169, ptr %27)
  %176 = call { ptr, i160 } %175({ ptr, ptr, ptr, i32 } %169, { ptr, ptr, ptr, i32 } %169, ptr %26) #17
  store { ptr, i160 } %176, ptr %28, align 8
  %177 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %178 = load ptr, ptr %177, align 8
  store ptr %178, ptr %30, align 8
  %179 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %180 = load i160, ptr %179, align 4
  store i160 %180, ptr %29, align 4
  %181 = load [0 x i8], ptr %31, align 1
  store [0 x i8] %181, ptr %32, align 1
  store ptr @nil_typ, ptr %33, align 8
  %182 = load ptr, ptr %63, align 8
  %183 = load i32, ptr %62, align 4
  %184 = sext i32 %183 to i64
  %185 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %184
  %186 = getelementptr i8, ptr %182, i64 %185
  %187 = getelementptr { ptr, i160 }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %33, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, i160 }, ptr %186, i32 0, i32 1
  %190 = load i160, ptr %32, align 4
  store i160 %190, ptr %189, align 4
  %.reload40 = load ptr, ptr %.reg2mem38, align 8
  %191 = load ptr, ptr %.reload40, align 8
  %192 = load ptr, ptr %41, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %192)
  %.reload35 = load ptr, ptr %.reg2mem33, align 8
  %194 = load i32, ptr %.reload35, align 4
  %195 = getelementptr ptr, ptr %192, i32 %194
  %196 = getelementptr ptr, ptr %195, i32 6
  %197 = load ptr, ptr %196, align 8
  %198 = getelementptr { ptr, ptr }, ptr %197, i32 0, i32 0
  %199 = load ptr, ptr %198, align 8
  %200 = call i32 %199(ptr %191) #16
  store i32 %200, ptr %34, align 4
  store i32 1, ptr %35, align 4
  %201 = load i32, ptr %34, align 4
  %202 = load i32, ptr %35, align 4
  %203 = sub i32 %201, %202
  store i32 %203, ptr %36, align 4
  %.reload39 = load ptr, ptr %.reg2mem38, align 8
  %204 = load ptr, ptr %.reload39, align 8
  %205 = load ptr, ptr %41, align 8
  %206 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %205)
  %.reload34 = load ptr, ptr %.reg2mem33, align 8
  %207 = load i32, ptr %.reload34, align 4
  %208 = getelementptr ptr, ptr %205, i32 %207
  %209 = getelementptr ptr, ptr %208, i32 6
  %210 = load ptr, ptr %209, align 8
  %211 = getelementptr { ptr, ptr }, ptr %210, i32 0, i32 1
  %212 = load ptr, ptr %211, align 8
  %213 = load i32, ptr %36, align 4
  call void %212(ptr %204, i32 %213) #15
  %214 = load ptr, ptr %30, align 8
  %215 = insertvalue { ptr, i160 } undef, ptr %214, 0
  %216 = load i160, ptr %29, align 4
  %217 = insertvalue { ptr, i160 } %215, i160 %216, 1
  store { ptr, i160 } %217, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem49, align 8
  br label %221

218:                                              ; preds = %156
  %.reload31 = load ptr, ptr %.reg2mem30, align 8
  %219 = load ptr, ptr %.reload31, align 8
  store ptr %219, ptr %65, align 8
  %.reload28 = load ptr, ptr %.reg2mem27, align 8
  %220 = load i160, ptr %.reload28, align 4
  store i160 %220, ptr %64, align 4
  store { ptr, i160 } poison, ptr %.reg2mem49, align 8
  br label %221

221:                                              ; preds = %218, %161
  %.reload50 = load { ptr, i160 }, ptr %.reg2mem49, align 8
  store { ptr, i160 } %.reload50, ptr %.reg2mem5, align 8
  br label %222

222:                                              ; preds = %221
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem45, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem47, align 8
  br label %224

223:                                              ; preds = %7
  store i32 1, ptr %.reg2mem45, align 4
  store { ptr, i160 } poison, ptr %.reg2mem47, align 8
  br label %224

224:                                              ; preds = %223, %222
  %.reload48 = load { ptr, i160 }, ptr %.reg2mem47, align 8
  %.reload46 = load i32, ptr %.reg2mem45, align 4
  store { ptr, i160 } %.reload48, ptr %.reg2mem3, align 8
  store i32 %.reload46, ptr %.reg2mem1, align 4
  br label %225

225:                                              ; preds = %224
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %226 = zext i32 %.reload2 to i64
  %227 = trunc i64 %226 to i32
  switch i32 %227, label %229 [
    i32 0, label %228
  ]

228:                                              ; preds = %225
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem43, align 8
  br label %235

229:                                              ; preds = %225
  %230 = load [0 x i8], ptr %37, align 1
  store [0 x i8] %230, ptr %38, align 1
  store ptr @nil_typ, ptr %39, align 8
  %231 = load ptr, ptr %39, align 8
  %232 = insertvalue { ptr, i160 } undef, ptr %231, 0
  %233 = load i160, ptr %38, align 4
  %234 = insertvalue { ptr, i160 } %232, i160 %233, 1
  store { ptr, i160 } %234, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem43, align 8
  br label %235

235:                                              ; preds = %229, %228
  %.reload44 = load { ptr, i160 }, ptr %.reg2mem43, align 8
  ret { ptr, i160 } %.reload44
}

define void @CuckooMap_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [5 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr, ptr, ptr }, align 8
  %16 = alloca i1, align 1
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i1, align 1
  %20 = alloca [0 x ptr], align 8
  %21 = alloca {}, align 8
  %22 = alloca [3 x ptr], align 8
  %23 = alloca i32, align 4
  %24 = alloca ptr, align 8
  %25 = alloca ptr, align 8
  %26 = alloca ptr, align 8
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = alloca [3 x ptr], align 8
  %32 = alloca { ptr, ptr, ptr }, align 8
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = alloca [0 x i8], align 1
  %36 = alloca i160, align 8
  %37 = alloca ptr, align 8
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i1, align 1
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  %42 = alloca [1 x ptr], align 8
  %43 = alloca { ptr }, align 8
  %44 = alloca { ptr, i160 }, align 8
  %45 = alloca i1, align 1
  %46 = alloca [0 x i8], align 1
  %47 = alloca [0 x ptr], align 8
  %48 = alloca {}, align 8
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem43 = alloca ptr, align 8
  %.reg2mem53 = alloca ptr, align 8
  %.reg2mem74 = alloca ptr, align 8
  %.reg2mem84 = alloca i32, align 4
  %.reg2mem86 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %51, align 8
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  store ptr %54, ptr %.reg2mem74, align 8
  %55 = load ptr, ptr %53, align 8
  %.reload83 = load ptr, ptr %.reg2mem74, align 8
  store ptr %55, ptr %.reload83, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  store ptr %57, ptr %.reg2mem53, align 8
  %58 = load ptr, ptr %56, align 8
  %.reload73 = load ptr, ptr %.reg2mem53, align 8
  store ptr %58, ptr %.reload73, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  store ptr %60, ptr %.reg2mem43, align 8
  %61 = load ptr, ptr %59, align 8
  %.reload52 = load ptr, ptr %.reg2mem43, align 8
  store ptr %61, ptr %.reload52, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  store ptr %63, ptr %.reg2mem18, align 8
  %64 = load i32, ptr %62, align 4
  %.reload42 = load ptr, ptr %.reg2mem18, align 8
  store i32 %64, ptr %.reload42, align 4
  call void @set_offset(ptr %52, ptr @CuckooMap)
  %65 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %65, align 8
  %66 = alloca i160, align 8
  %67 = alloca ptr, align 8
  %68 = getelementptr { ptr, i160 }, ptr %65, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  store ptr %69, ptr %67, align 8
  %70 = getelementptr { ptr, i160 }, ptr %65, i32 0, i32 1
  %71 = load i160, ptr %70, align 4
  store i160 %71, ptr %66, align 4
  %72 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %72, align 8
  %73 = alloca i160, align 8
  %74 = alloca ptr, align 8
  %75 = getelementptr { ptr, i160 }, ptr %72, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  store ptr %76, ptr %74, align 8
  %77 = getelementptr { ptr, i160 }, ptr %72, i32 0, i32 1
  %78 = load i160, ptr %77, align 4
  store i160 %78, ptr %73, align 4
  %79 = alloca i160, align 8
  %80 = alloca ptr, align 8
  %81 = load ptr, ptr %67, align 8
  store ptr %81, ptr %80, align 8
  %82 = load i160, ptr %66, align 4
  store i160 %82, ptr %79, align 4
  %83 = load ptr, ptr %80, align 8
  %84 = insertvalue { ptr, i160 } undef, ptr %83, 0
  %85 = load i160, ptr %79, align 4
  %86 = insertvalue { ptr, i160 } %84, i160 %85, 1
  %.reload82 = load ptr, ptr %.reg2mem74, align 8
  %87 = load ptr, ptr %.reload82, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %.reload72 = load ptr, ptr %.reg2mem53, align 8
  %89 = load ptr, ptr %.reload72, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %.reload51 = load ptr, ptr %.reg2mem43, align 8
  %91 = load ptr, ptr %.reload51, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %.reload41 = load ptr, ptr %.reg2mem18, align 8
  %93 = load i32, ptr %.reload41, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = load ptr, ptr %52, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %95)
  %.reload40 = load ptr, ptr %.reg2mem18, align 8
  %97 = load i32, ptr %.reload40, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = load ptr, ptr %98, align 8
  %100 = call ptr @typegetter_wrapper(ptr %99, ptr %89)
  %101 = alloca [1 x ptr], align 8
  %102 = getelementptr [1 x ptr], ptr %101, i32 0, i32 0
  store ptr %100, ptr %102, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 1, ptr %101)
  %104 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %87)
  %105 = getelementptr ptr, ptr %87, i32 %93
  %106 = getelementptr ptr, ptr %105, i32 11
  %107 = load ptr, ptr %106, align 8
  %108 = alloca { ptr }, align 8
  %109 = getelementptr { ptr }, ptr %108, i32 0, i32 0
  store ptr %83, ptr %109, align 8
  %110 = call ptr @behavior_wrapper(ptr %107, { ptr, ptr, ptr, i32 } %94, ptr %108)
  %111 = call i32 %110({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %101, { ptr, i160 } %86) #17
  %112 = alloca i32, align 4
  store i32 %111, ptr %112, align 4
  %113 = load i32, ptr %112, align 4
  %.reload81 = load ptr, ptr %.reg2mem74, align 8
  %114 = load ptr, ptr %.reload81, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %114, 0
  %.reload71 = load ptr, ptr %.reg2mem53, align 8
  %116 = load ptr, ptr %.reload71, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %116, 1
  %.reload50 = load ptr, ptr %.reg2mem43, align 8
  %118 = load ptr, ptr %.reload50, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %118, 2
  %.reload39 = load ptr, ptr %.reg2mem18, align 8
  %120 = load i32, ptr %.reload39, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %120, 3
  %122 = alloca [1 x ptr], align 8
  %123 = getelementptr [1 x ptr], ptr %122, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 1, ptr %122)
  %125 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %114)
  %126 = getelementptr ptr, ptr %114, i32 %120
  %127 = getelementptr ptr, ptr %126, i32 13
  %128 = load ptr, ptr %127, align 8
  %129 = alloca { ptr }, align 8
  %130 = getelementptr { ptr }, ptr %129, i32 0, i32 0
  store ptr @i32_typ, ptr %130, align 8
  %131 = call ptr @behavior_wrapper(ptr %128, { ptr, ptr, ptr, i32 } %121, ptr %129)
  %132 = call i32 %131({ ptr, ptr, ptr, i32 } %121, { ptr, ptr, ptr, i32 } %121, ptr %122, i32 %113) #17
  %133 = alloca i32, align 4
  store i32 %132, ptr %133, align 4
  %.reload70 = load ptr, ptr %.reg2mem53, align 8
  %134 = load ptr, ptr %.reload70, align 8
  %135 = load ptr, ptr %52, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %135)
  %.reload38 = load ptr, ptr %.reg2mem18, align 8
  %137 = load i32, ptr %.reload38, align 4
  %138 = getelementptr ptr, ptr %135, i32 %137
  %139 = getelementptr ptr, ptr %138, i32 3
  %140 = load ptr, ptr %139, align 8
  %141 = getelementptr { ptr, ptr }, ptr %140, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = call { ptr } %142(ptr %134) #16
  %144 = alloca ptr, align 8
  store { ptr } %143, ptr %144, align 8
  %145 = alloca i160, align 8
  %146 = alloca ptr, align 8
  %147 = load ptr, ptr %67, align 8
  store ptr %147, ptr %146, align 8
  %148 = load i160, ptr %66, align 4
  store i160 %148, ptr %145, align 4
  %149 = load ptr, ptr %146, align 8
  %150 = insertvalue { ptr, i160 } undef, ptr %149, 0
  %151 = load i160, ptr %145, align 4
  %152 = insertvalue { ptr, i160 } %150, i160 %151, 1
  %153 = alloca i160, align 8
  %154 = alloca ptr, align 8
  %155 = load ptr, ptr %74, align 8
  store ptr %155, ptr %154, align 8
  %156 = load i160, ptr %73, align 4
  store i160 %156, ptr %153, align 4
  %157 = load ptr, ptr %154, align 8
  %158 = insertvalue { ptr, i160 } undef, ptr %157, 0
  %159 = load i160, ptr %153, align 4
  %160 = insertvalue { ptr, i160 } %158, i160 %159, 1
  %161 = load i32, ptr %112, align 4
  %162 = load i32, ptr %133, align 4
  %163 = load ptr, ptr %144, align 8
  %164 = insertvalue { ptr } undef, ptr %163, 0
  %.reload80 = load ptr, ptr %.reg2mem74, align 8
  %165 = load ptr, ptr %.reload80, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %165, 0
  %.reload69 = load ptr, ptr %.reg2mem53, align 8
  %167 = load ptr, ptr %.reload69, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %167, 1
  %.reload49 = load ptr, ptr %.reg2mem43, align 8
  %169 = load ptr, ptr %.reload49, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %169, 2
  %.reload37 = load ptr, ptr %.reg2mem18, align 8
  %171 = load i32, ptr %.reload37, align 4
  %172 = insertvalue { ptr, ptr, ptr, i32 } %170, i32 %171, 3
  %173 = load ptr, ptr %52, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %173)
  %.reload36 = load ptr, ptr %.reg2mem18, align 8
  %175 = load i32, ptr %.reload36, align 4
  %176 = getelementptr ptr, ptr %173, i32 %175
  %177 = load ptr, ptr %176, align 8
  %178 = call ptr @typegetter_wrapper(ptr %177, ptr %167)
  %.reload68 = load ptr, ptr %.reg2mem53, align 8
  %179 = load ptr, ptr %.reload68, align 8
  %180 = load ptr, ptr %52, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %180)
  %.reload35 = load ptr, ptr %.reg2mem18, align 8
  %182 = load i32, ptr %.reload35, align 4
  %183 = getelementptr ptr, ptr %180, i32 %182
  %184 = getelementptr ptr, ptr %183, i32 1
  %185 = load ptr, ptr %184, align 8
  %186 = call ptr @typegetter_wrapper(ptr %185, ptr %179)
  %187 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %188 = getelementptr [2 x ptr], ptr %187, i32 0, i32 1
  store ptr null, ptr %188, align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 8, ptr %187)
  store ptr @buffer_typ, ptr %187, align 8
  %190 = alloca [5 x ptr], align 8
  %191 = getelementptr [5 x ptr], ptr %190, i32 0, i32 0
  store ptr %178, ptr %191, align 8
  %192 = getelementptr [5 x ptr], ptr %190, i32 0, i32 1
  store ptr %186, ptr %192, align 8
  %193 = getelementptr [5 x ptr], ptr %190, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %193, align 8
  %194 = getelementptr [5 x ptr], ptr %190, i32 0, i32 3
  store ptr @_parameterization_Ptri32, ptr %194, align 8
  %195 = getelementptr [5 x ptr], ptr %190, i32 0, i32 4
  store ptr %187, ptr %195, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 25, ptr %190)
  %197 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %165)
  %198 = getelementptr ptr, ptr %165, i32 %171
  %199 = getelementptr ptr, ptr %198, i32 18
  %200 = load ptr, ptr %199, align 8
  %201 = alloca { ptr, ptr, ptr, ptr, ptr }, align 8
  %202 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %201, i32 0, i32 0
  store ptr %149, ptr %202, align 8
  %203 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %201, i32 0, i32 1
  store ptr %157, ptr %203, align 8
  %204 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %201, i32 0, i32 2
  store ptr @i32_typ, ptr %204, align 8
  %205 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %201, i32 0, i32 3
  store ptr @i32_typ, ptr %205, align 8
  %206 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %201, i32 0, i32 4
  store ptr @buffer_typ, ptr %206, align 8
  %207 = call ptr @behavior_wrapper(ptr %200, { ptr, ptr, ptr, i32 } %172, ptr %201)
  %208 = call i1 %207({ ptr, ptr, ptr, i32 } %172, { ptr, ptr, ptr, i32 } %172, ptr %190, { ptr, i160 } %152, { ptr, i160 } %160, i32 %161, i32 %162, { ptr } %164) #17
  %209 = alloca i1, align 1
  store i1 %208, ptr %209, align 1
  %210 = load i1, ptr %209, align 1
  br i1 %210, label %211, label %212

211:                                              ; preds = %5
  br label %549

212:                                              ; preds = %5
  %213 = load i32, ptr %112, align 4
  %.reload79 = load ptr, ptr %.reg2mem74, align 8
  %214 = load ptr, ptr %.reload79, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %214, 0
  %.reload67 = load ptr, ptr %.reg2mem53, align 8
  %216 = load ptr, ptr %.reload67, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %215, ptr %216, 1
  %.reload48 = load ptr, ptr %.reg2mem43, align 8
  %218 = load ptr, ptr %.reload48, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %217, ptr %218, 2
  %.reload34 = load ptr, ptr %.reg2mem18, align 8
  %220 = load i32, ptr %.reload34, align 4
  %221 = insertvalue { ptr, ptr, ptr, i32 } %219, i32 %220, 3
  %222 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %222, align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %224 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %214)
  %225 = getelementptr ptr, ptr %214, i32 %220
  %226 = getelementptr ptr, ptr %225, i32 14
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %228, align 8
  %229 = call ptr @behavior_wrapper(ptr %227, { ptr, ptr, ptr, i32 } %221, ptr %7)
  %230 = call i32 %229({ ptr, ptr, ptr, i32 } %221, { ptr, ptr, ptr, i32 } %221, ptr %6, i32 %213) #17
  store i32 %230, ptr %8, align 4
  %.reload66 = load ptr, ptr %.reg2mem53, align 8
  %231 = load ptr, ptr %.reload66, align 8
  %232 = load ptr, ptr %52, align 8
  %233 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %232)
  %.reload33 = load ptr, ptr %.reg2mem18, align 8
  %234 = load i32, ptr %.reload33, align 4
  %235 = getelementptr ptr, ptr %232, i32 %234
  %236 = getelementptr ptr, ptr %235, i32 4
  %237 = load ptr, ptr %236, align 8
  %238 = getelementptr { ptr, ptr }, ptr %237, i32 0, i32 0
  %239 = load ptr, ptr %238, align 8
  %240 = call { ptr } %239(ptr %231) #16
  store { ptr } %240, ptr %9, align 8
  %241 = load ptr, ptr %67, align 8
  store ptr %241, ptr %11, align 8
  %242 = load i160, ptr %66, align 4
  store i160 %242, ptr %10, align 4
  %243 = load ptr, ptr %11, align 8
  %244 = insertvalue { ptr, i160 } undef, ptr %243, 0
  %245 = load i160, ptr %10, align 4
  %246 = insertvalue { ptr, i160 } %244, i160 %245, 1
  %247 = load ptr, ptr %74, align 8
  store ptr %247, ptr %13, align 8
  %248 = load i160, ptr %73, align 4
  store i160 %248, ptr %12, align 4
  %249 = load ptr, ptr %13, align 8
  %250 = insertvalue { ptr, i160 } undef, ptr %249, 0
  %251 = load i160, ptr %12, align 4
  %252 = insertvalue { ptr, i160 } %250, i160 %251, 1
  %253 = load i32, ptr %112, align 4
  %254 = load i32, ptr %8, align 4
  %255 = load ptr, ptr %9, align 8
  %256 = insertvalue { ptr } undef, ptr %255, 0
  %.reload78 = load ptr, ptr %.reg2mem74, align 8
  %257 = load ptr, ptr %.reload78, align 8
  %258 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %257, 0
  %.reload65 = load ptr, ptr %.reg2mem53, align 8
  %259 = load ptr, ptr %.reload65, align 8
  %260 = insertvalue { ptr, ptr, ptr, i32 } %258, ptr %259, 1
  %.reload47 = load ptr, ptr %.reg2mem43, align 8
  %261 = load ptr, ptr %.reload47, align 8
  %262 = insertvalue { ptr, ptr, ptr, i32 } %260, ptr %261, 2
  %.reload32 = load ptr, ptr %.reg2mem18, align 8
  %263 = load i32, ptr %.reload32, align 4
  %264 = insertvalue { ptr, ptr, ptr, i32 } %262, i32 %263, 3
  %265 = load ptr, ptr %52, align 8
  %266 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %265)
  %.reload31 = load ptr, ptr %.reg2mem18, align 8
  %267 = load i32, ptr %.reload31, align 4
  %268 = getelementptr ptr, ptr %265, i32 %267
  %269 = load ptr, ptr %268, align 8
  %270 = call ptr @typegetter_wrapper(ptr %269, ptr %259)
  %.reload64 = load ptr, ptr %.reg2mem53, align 8
  %271 = load ptr, ptr %.reload64, align 8
  %272 = load ptr, ptr %52, align 8
  %273 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %272)
  %.reload30 = load ptr, ptr %.reg2mem18, align 8
  %274 = load i32, ptr %.reload30, align 4
  %275 = getelementptr ptr, ptr %272, i32 %274
  %276 = getelementptr ptr, ptr %275, i32 1
  %277 = load ptr, ptr %276, align 8
  %278 = call ptr @typegetter_wrapper(ptr %277, ptr %271)
  %279 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %280 = getelementptr [2 x ptr], ptr %279, i32 0, i32 1
  store ptr null, ptr %280, align 8
  %281 = call ptr @llvm.invariant.start.p0(i64 8, ptr %279)
  store ptr @buffer_typ, ptr %279, align 8
  %282 = getelementptr [5 x ptr], ptr %14, i32 0, i32 0
  store ptr %270, ptr %282, align 8
  %283 = getelementptr [5 x ptr], ptr %14, i32 0, i32 1
  store ptr %278, ptr %283, align 8
  %284 = getelementptr [5 x ptr], ptr %14, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %284, align 8
  %285 = getelementptr [5 x ptr], ptr %14, i32 0, i32 3
  store ptr @_parameterization_Ptri32, ptr %285, align 8
  %286 = getelementptr [5 x ptr], ptr %14, i32 0, i32 4
  store ptr %279, ptr %286, align 8
  %287 = call ptr @llvm.invariant.start.p0(i64 25, ptr %14)
  %288 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %257)
  %289 = getelementptr ptr, ptr %257, i32 %263
  %290 = getelementptr ptr, ptr %289, i32 18
  %291 = load ptr, ptr %290, align 8
  %292 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %15, i32 0, i32 0
  store ptr %243, ptr %292, align 8
  %293 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %15, i32 0, i32 1
  store ptr %249, ptr %293, align 8
  %294 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %15, i32 0, i32 2
  store ptr @i32_typ, ptr %294, align 8
  %295 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %15, i32 0, i32 3
  store ptr @i32_typ, ptr %295, align 8
  %296 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %15, i32 0, i32 4
  store ptr @buffer_typ, ptr %296, align 8
  %297 = call ptr @behavior_wrapper(ptr %291, { ptr, ptr, ptr, i32 } %264, ptr %15)
  %298 = call i1 %297({ ptr, ptr, ptr, i32 } %264, { ptr, ptr, ptr, i32 } %264, ptr %14, { ptr, i160 } %246, { ptr, i160 } %252, i32 %253, i32 %254, { ptr } %256) #17
  store i1 %298, ptr %16, align 1
  %299 = load i1, ptr %16, align 1
  store i1 %299, ptr %209, align 1
  %300 = load i1, ptr %209, align 1
  br i1 %300, label %301, label %302

301:                                              ; preds = %212
  br label %548

302:                                              ; preds = %212
  %.reload63 = load ptr, ptr %.reg2mem53, align 8
  %303 = load ptr, ptr %.reload63, align 8
  %304 = load ptr, ptr %52, align 8
  %305 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %304)
  %.reload29 = load ptr, ptr %.reg2mem18, align 8
  %306 = load i32, ptr %.reload29, align 4
  %307 = getelementptr ptr, ptr %304, i32 %306
  %308 = getelementptr ptr, ptr %307, i32 6
  %309 = load ptr, ptr %308, align 8
  %310 = getelementptr { ptr, ptr }, ptr %309, i32 0, i32 0
  %311 = load ptr, ptr %310, align 8
  %312 = call i32 %311(ptr %303) #16
  store i32 %312, ptr %17, align 4
  %.reload62 = load ptr, ptr %.reg2mem53, align 8
  %313 = load ptr, ptr %.reload62, align 8
  %314 = load ptr, ptr %52, align 8
  %315 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %314)
  %.reload28 = load ptr, ptr %.reg2mem18, align 8
  %316 = load i32, ptr %.reload28, align 4
  %317 = getelementptr ptr, ptr %314, i32 %316
  %318 = getelementptr ptr, ptr %317, i32 5
  %319 = load ptr, ptr %318, align 8
  %320 = getelementptr { ptr, ptr }, ptr %319, i32 0, i32 0
  %321 = load ptr, ptr %320, align 8
  %322 = call i32 %321(ptr %313) #16
  store i32 %322, ptr %18, align 4
  %323 = load i32, ptr %17, align 4
  %324 = load i32, ptr %18, align 4
  %325 = icmp sge i32 %323, %324
  store i1 %325, ptr %19, align 1
  %326 = load i1, ptr %19, align 1
  br i1 %326, label %327, label %._crit_edge

._crit_edge:                                      ; preds = %302
  br label %342

327:                                              ; preds = %302
  %.reload77 = load ptr, ptr %.reg2mem74, align 8
  %328 = load ptr, ptr %.reload77, align 8
  %329 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %328, 0
  %.reload61 = load ptr, ptr %.reg2mem53, align 8
  %330 = load ptr, ptr %.reload61, align 8
  %331 = insertvalue { ptr, ptr, ptr, i32 } %329, ptr %330, 1
  %.reload46 = load ptr, ptr %.reg2mem43, align 8
  %332 = load ptr, ptr %.reload46, align 8
  %333 = insertvalue { ptr, ptr, ptr, i32 } %331, ptr %332, 2
  %.reload27 = load ptr, ptr %.reg2mem18, align 8
  %334 = load i32, ptr %.reload27, align 4
  %335 = insertvalue { ptr, ptr, ptr, i32 } %333, i32 %334, 3
  %336 = call ptr @llvm.invariant.start.p0(i64 0, ptr %20)
  %337 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %328)
  %338 = getelementptr ptr, ptr %328, i32 %334
  %339 = getelementptr ptr, ptr %338, i32 17
  %340 = load ptr, ptr %339, align 8
  %341 = call ptr @behavior_wrapper(ptr %340, { ptr, ptr, ptr, i32 } %335, ptr %21)
  call void %341({ ptr, ptr, ptr, i32 } %335, { ptr, ptr, ptr, i32 } %335, ptr %20) #17
  br label %342

342:                                              ; preds = %._crit_edge, %327
  %.reload60 = load ptr, ptr %.reg2mem53, align 8
  %343 = load ptr, ptr %.reload60, align 8
  %344 = load ptr, ptr %52, align 8
  %345 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %344)
  %.reload26 = load ptr, ptr %.reg2mem18, align 8
  %346 = load i32, ptr %.reload26, align 4
  %347 = getelementptr ptr, ptr %344, i32 %346
  %348 = load ptr, ptr %347, align 8
  %349 = call ptr @typegetter_wrapper(ptr %348, ptr %343)
  %.reload59 = load ptr, ptr %.reg2mem53, align 8
  %350 = load ptr, ptr %.reload59, align 8
  %351 = load ptr, ptr %52, align 8
  %352 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %351)
  %.reload25 = load ptr, ptr %.reg2mem18, align 8
  %353 = load i32, ptr %.reload25, align 4
  %354 = getelementptr ptr, ptr %351, i32 %353
  %355 = getelementptr ptr, ptr %354, i32 1
  %356 = load ptr, ptr %355, align 8
  %357 = call ptr @typegetter_wrapper(ptr %356, ptr %350)
  store ptr @Entry, ptr %22, align 8
  %358 = getelementptr ptr, ptr %22, i32 1
  store ptr %349, ptr %358, align 8
  %359 = getelementptr ptr, ptr %22, i32 2
  store ptr %357, ptr %359, align 8
  %360 = load ptr, ptr %22, align 8
  %361 = getelementptr ptr, ptr %360, i32 6
  %362 = load ptr, ptr %361, align 8
  %363 = call { i64, i64 } @size_wrapper(ptr %362, ptr %22)
  %364 = extractvalue { i64, i64 } %363, 0
  %365 = call ptr @bump_malloc(i64 %364)
  store ptr %349, ptr %365, align 8
  %366 = getelementptr ptr, ptr %365, i32 1
  store ptr %357, ptr %366, align 8
  %367 = call ptr @llvm.invariant.start.p0(i64 16, ptr %365)
  store ptr @Entry, ptr %26, align 8
  store ptr %365, ptr %25, align 8
  store i32 10, ptr %23, align 4
  %368 = load ptr, ptr %67, align 8
  store ptr %368, ptr %28, align 8
  %369 = load i160, ptr %66, align 4
  store i160 %369, ptr %27, align 4
  %370 = load ptr, ptr %28, align 8
  %371 = insertvalue { ptr, i160 } undef, ptr %370, 0
  %372 = load i160, ptr %27, align 4
  %373 = insertvalue { ptr, i160 } %371, i160 %372, 1
  %374 = load ptr, ptr %74, align 8
  store ptr %374, ptr %30, align 8
  %375 = load i160, ptr %73, align 4
  store i160 %375, ptr %29, align 4
  %376 = load ptr, ptr %30, align 8
  %377 = insertvalue { ptr, i160 } undef, ptr %376, 0
  %378 = load i160, ptr %29, align 4
  %379 = insertvalue { ptr, i160 } %377, i160 %378, 1
  %380 = load i32, ptr %112, align 4
  %381 = load ptr, ptr %26, align 8
  %382 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %381, 0
  %383 = load ptr, ptr %25, align 8
  %384 = insertvalue { ptr, ptr, ptr, i32 } %382, ptr %383, 1
  %385 = load ptr, ptr %24, align 8
  %386 = insertvalue { ptr, ptr, ptr, i32 } %384, ptr %385, 2
  %387 = load i32, ptr %23, align 4
  %388 = insertvalue { ptr, ptr, ptr, i32 } %386, i32 %387, 3
  %.reload58 = load ptr, ptr %.reg2mem53, align 8
  %389 = load ptr, ptr %.reload58, align 8
  %390 = load ptr, ptr %52, align 8
  %391 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %390)
  %.reload24 = load ptr, ptr %.reg2mem18, align 8
  %392 = load i32, ptr %.reload24, align 4
  %393 = getelementptr ptr, ptr %390, i32 %392
  %394 = load ptr, ptr %393, align 8
  %395 = call ptr @typegetter_wrapper(ptr %394, ptr %389)
  %.reload57 = load ptr, ptr %.reg2mem53, align 8
  %396 = load ptr, ptr %.reload57, align 8
  %397 = load ptr, ptr %52, align 8
  %398 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %397)
  %.reload23 = load ptr, ptr %.reg2mem18, align 8
  %399 = load i32, ptr %.reload23, align 4
  %400 = getelementptr ptr, ptr %397, i32 %399
  %401 = getelementptr ptr, ptr %400, i32 1
  %402 = load ptr, ptr %401, align 8
  %403 = call ptr @typegetter_wrapper(ptr %402, ptr %396)
  %404 = getelementptr [3 x ptr], ptr %31, i32 0, i32 0
  store ptr %395, ptr %404, align 8
  %405 = getelementptr [3 x ptr], ptr %31, i32 0, i32 1
  store ptr %403, ptr %405, align 8
  %406 = getelementptr [3 x ptr], ptr %31, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %406, align 8
  %407 = call ptr @llvm.invariant.start.p0(i64 9, ptr %31)
  %408 = call ptr @llvm.invariant.start.p0(i64 120, ptr %381)
  %409 = getelementptr ptr, ptr %381, i32 %387
  %410 = getelementptr ptr, ptr %409, i32 5
  %411 = load ptr, ptr %410, align 8
  %412 = getelementptr { ptr, ptr, ptr }, ptr %32, i32 0, i32 0
  store ptr %370, ptr %412, align 8
  %413 = getelementptr { ptr, ptr, ptr }, ptr %32, i32 0, i32 1
  store ptr %376, ptr %413, align 8
  %414 = getelementptr { ptr, ptr, ptr }, ptr %32, i32 0, i32 2
  store ptr @i32_typ, ptr %414, align 8
  %415 = call ptr @behavior_wrapper(ptr %411, { ptr, ptr, ptr, i32 } %388, ptr %32)
  call void %415({ ptr, ptr, ptr, i32 } %388, { ptr, ptr, ptr, i32 } %388, ptr %31, { ptr, i160 } %373, { ptr, i160 } %379, i32 %380) #17
  %416 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %417 = load ptr, ptr %26, align 8
  store ptr %417, ptr %416, align 8
  %418 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %419 = load ptr, ptr %25, align 8
  store ptr %419, ptr %418, align 8
  %420 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %421 = load ptr, ptr %24, align 8
  store ptr %421, ptr %420, align 8
  %422 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %423 = load i32, ptr %23, align 4
  store i32 %423, ptr %422, align 4
  call void @set_offset(ptr %33, ptr @Entry)
  %424 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %425 = load ptr, ptr %416, align 8
  store ptr %425, ptr %424, align 8
  %426 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %427 = load ptr, ptr %418, align 8
  store ptr %427, ptr %426, align 8
  %428 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %429 = load ptr, ptr %420, align 8
  store ptr %429, ptr %428, align 8
  %430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %431 = load i32, ptr %422, align 4
  store i32 %431, ptr %430, align 4
  %432 = load [0 x i8], ptr %35, align 1
  store [0 x i8] %432, ptr %36, align 1
  store ptr @nil_typ, ptr %37, align 8
  store i32 2, ptr %38, align 4
  store i32 0, ptr %39, align 4
  br label %433

433:                                              ; preds = %540, %342
  %434 = load i32, ptr %39, align 4
  %435 = load i32, ptr %38, align 4
  %436 = icmp slt i32 %434, %435
  store i1 %436, ptr %40, align 1
  %437 = load i1, ptr %40, align 1
  br i1 %437, label %438, label %536

438:                                              ; preds = %433
  %439 = getelementptr { ptr, i160 }, ptr %34, i32 0, i32 0
  store ptr %439, ptr %.reg2mem13, align 8
  %440 = getelementptr { ptr, i160 }, ptr %41, i32 0, i32 0
  %.reload17 = load ptr, ptr %.reg2mem13, align 8
  %441 = load ptr, ptr %.reload17, align 8
  store ptr %441, ptr %440, align 8
  %442 = getelementptr { ptr, i160 }, ptr %34, i32 0, i32 1
  store ptr %442, ptr %.reg2mem8, align 8
  %443 = getelementptr { ptr, i160 }, ptr %41, i32 0, i32 1
  %.reload12 = load ptr, ptr %.reg2mem8, align 8
  %444 = load i160, ptr %.reload12, align 4
  store i160 %444, ptr %443, align 4
  call void @set_offset(ptr %41, ptr @Entry)
  %445 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 0
  %446 = load ptr, ptr %445, align 8
  %447 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %446, 0
  %448 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 1
  %449 = load ptr, ptr %448, align 8
  %450 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr %449, 1
  %451 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 2
  %452 = load ptr, ptr %451, align 8
  %453 = insertvalue { ptr, ptr, ptr, i32 } %450, ptr %452, 2
  %454 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 3
  %455 = load i32, ptr %454, align 4
  %456 = insertvalue { ptr, ptr, ptr, i32 } %453, i32 %455, 3
  %.reload76 = load ptr, ptr %.reg2mem74, align 8
  %457 = load ptr, ptr %.reload76, align 8
  %458 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %457, 0
  %.reload56 = load ptr, ptr %.reg2mem53, align 8
  %459 = load ptr, ptr %.reload56, align 8
  %460 = insertvalue { ptr, ptr, ptr, i32 } %458, ptr %459, 1
  %.reload45 = load ptr, ptr %.reg2mem43, align 8
  %461 = load ptr, ptr %.reload45, align 8
  %462 = insertvalue { ptr, ptr, ptr, i32 } %460, ptr %461, 2
  %.reload22 = load ptr, ptr %.reg2mem18, align 8
  %463 = load i32, ptr %.reload22, align 4
  %464 = insertvalue { ptr, ptr, ptr, i32 } %462, i32 %463, 3
  %465 = load ptr, ptr %52, align 8
  %466 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %465)
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  %467 = load i32, ptr %.reload21, align 4
  %468 = getelementptr ptr, ptr %465, i32 %467
  %469 = load ptr, ptr %468, align 8
  %470 = call ptr @typegetter_wrapper(ptr %469, ptr %459)
  %.reload55 = load ptr, ptr %.reg2mem53, align 8
  %471 = load ptr, ptr %.reload55, align 8
  %472 = load ptr, ptr %52, align 8
  %473 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %472)
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %474 = load i32, ptr %.reload20, align 4
  %475 = getelementptr ptr, ptr %472, i32 %474
  %476 = getelementptr ptr, ptr %475, i32 1
  %477 = load ptr, ptr %476, align 8
  %478 = call ptr @typegetter_wrapper(ptr %477, ptr %471)
  %479 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %480 = getelementptr [4 x ptr], ptr %479, i32 0, i32 2
  store ptr @_parameterization_Nil, ptr %480, align 8
  %481 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %482 = getelementptr [4 x ptr], ptr %481, i32 0, i32 2
  store ptr %478, ptr %482, align 8
  %483 = getelementptr [4 x ptr], ptr %481, i32 0, i32 1
  store ptr %470, ptr %483, align 8
  %484 = getelementptr [4 x ptr], ptr %481, i32 0, i32 3
  store ptr null, ptr %484, align 8
  %485 = call ptr @llvm.invariant.start.p0(i64 24, ptr %481)
  store ptr @Entry, ptr %481, align 8
  %486 = getelementptr [4 x ptr], ptr %479, i32 0, i32 1
  store ptr %481, ptr %486, align 8
  %487 = getelementptr [4 x ptr], ptr %479, i32 0, i32 3
  store ptr null, ptr %487, align 8
  %488 = call ptr @llvm.invariant.start.p0(i64 24, ptr %479)
  store ptr @union_typ, ptr %479, align 8
  %489 = getelementptr [1 x ptr], ptr %42, i32 0, i32 0
  store ptr %479, ptr %489, align 8
  %490 = call ptr @llvm.invariant.start.p0(i64 1, ptr %42)
  %491 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %457)
  %492 = getelementptr ptr, ptr %457, i32 %463
  %493 = getelementptr ptr, ptr %492, i32 15
  %494 = load ptr, ptr %493, align 8
  %495 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  store ptr @union_typ, ptr %495, align 8
  %496 = call ptr @behavior_wrapper(ptr %494, { ptr, ptr, ptr, i32 } %464, ptr %43)
  %497 = call { ptr, i160 } %496({ ptr, ptr, ptr, i32 } %464, { ptr, ptr, ptr, i32 } %464, ptr %42, { ptr, ptr, ptr, i32 } %456) #17
  store { ptr, i160 } %497, ptr %44, align 8
  %498 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 0
  %499 = load ptr, ptr %498, align 8
  store ptr %499, ptr %37, align 8
  %500 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 1
  %501 = load i160, ptr %500, align 4
  store i160 %501, ptr %36, align 4
  %502 = load ptr, ptr %37, align 8
  %503 = ptrtoint ptr %502 to i64
  %504 = icmp eq i64 %503, ptrtoint (ptr @nil_typ to i64)
  %505 = icmp eq i64 %503, 0
  %506 = or i1 %504, %505
  store i1 %506, ptr %45, align 1
  %507 = load i1, ptr %45, align 1
  %508 = zext i1 %507 to i32
  store i32 %508, ptr %.reg2mem6, align 4
  %509 = xor i1 %507, true
  %510 = zext i1 %509 to i32
  store i32 %510, ptr %.reg2mem4, align 4
  br i1 %507, label %511, label %512

511:                                              ; preds = %438
  br label %535

512:                                              ; preds = %438
  %.reload75 = load ptr, ptr %.reg2mem74, align 8
  %513 = load ptr, ptr %.reload75, align 8
  %514 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %513, 0
  %.reload54 = load ptr, ptr %.reg2mem53, align 8
  %515 = load ptr, ptr %.reload54, align 8
  %516 = insertvalue { ptr, ptr, ptr, i32 } %514, ptr %515, 1
  %.reload44 = load ptr, ptr %.reg2mem43, align 8
  %517 = load ptr, ptr %.reload44, align 8
  %518 = insertvalue { ptr, ptr, ptr, i32 } %516, ptr %517, 2
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %519 = load i32, ptr %.reload19, align 4
  %520 = insertvalue { ptr, ptr, ptr, i32 } %518, i32 %519, 3
  %521 = call ptr @llvm.invariant.start.p0(i64 0, ptr %47)
  %522 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %513)
  %523 = getelementptr ptr, ptr %513, i32 %519
  %524 = getelementptr ptr, ptr %523, i32 17
  %525 = load ptr, ptr %524, align 8
  %526 = call ptr @behavior_wrapper(ptr %525, { ptr, ptr, ptr, i32 } %520, ptr %48)
  call void %526({ ptr, ptr, ptr, i32 } %520, { ptr, ptr, ptr, i32 } %520, ptr %47) #17
  %527 = load ptr, ptr %37, align 8
  %.reload16 = load ptr, ptr %.reg2mem13, align 8
  store ptr %527, ptr %.reload16, align 8
  %528 = load i160, ptr %36, align 4
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  store i160 %528, ptr %.reload11, align 4
  store i32 1, ptr %49, align 4
  %529 = load i32, ptr %39, align 4
  %530 = load i32, ptr %49, align 4
  %531 = add i32 %529, %530
  store i32 %531, ptr %50, align 4
  %532 = load i32, ptr %50, align 4
  store i32 %532, ptr %39, align 4
  %.reload15 = load ptr, ptr %.reg2mem13, align 8
  %533 = load ptr, ptr %.reload15, align 8
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  store ptr %533, ptr %.reload14, align 8
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %534 = load i160, ptr %.reload10, align 4
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  store i160 %534, ptr %.reload9, align 4
  br label %535

535:                                              ; preds = %512, %511
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload5, ptr %.reg2mem84, align 4
  store i32 %.reload7, ptr %.reg2mem86, align 4
  br label %537

536:                                              ; preds = %433
  store i32 0, ptr %.reg2mem84, align 4
  store i32 2, ptr %.reg2mem86, align 4
  br label %537

537:                                              ; preds = %536, %535
  %.reload87 = load i32, ptr %.reg2mem86, align 4
  %.reload85 = load i32, ptr %.reg2mem84, align 4
  store i32 %.reload87, ptr %.reg2mem1, align 4
  store i32 %.reload85, ptr %.reg2mem, align 4
  br label %538

538:                                              ; preds = %537
  %.reload = load i32, ptr %.reg2mem, align 4
  %539 = trunc i32 %.reload to i1
  %.reload3 = load i32, ptr %.reg2mem1, align 4
  br i1 %539, label %540, label %541

540:                                              ; preds = %538
  br label %433

541:                                              ; preds = %538
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %542 = zext i32 %.reload2 to i64
  %543 = trunc i64 %542 to i32
  switch i32 %543, label %546 [
    i32 1, label %544
  ]

544:                                              ; preds = %541
  %545 = load [0 x i8], ptr %36, align 1
  store [0 x i8] %545, ptr %46, align 1
  br label %547

546:                                              ; preds = %541
  br label %547

547:                                              ; preds = %546, %544
  br label %548

548:                                              ; preds = %547, %301
  br label %549

549:                                              ; preds = %548, %211
  ret void
}

define i32 @CuckooMap_size_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @CuckooMap)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 6
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #16
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr, i160 } @CuckooMap_get_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca { ptr, i160 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca [4 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr, ptr }, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca i1, align 1
  %16 = alloca { ptr, i160 }, align 8
  %17 = alloca [0 x i8], align 1
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem29 = alloca ptr, align 8
  %.reg2mem36 = alloca ptr, align 8
  %.reg2mem47 = alloca ptr, align 8
  %.reg2mem54 = alloca { ptr, i160 }, align 8
  %.reg2mem56 = alloca i32, align 4
  %.reg2mem58 = alloca { ptr, i160 }, align 8
  %.reg2mem60 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  store ptr %23, ptr %.reg2mem47, align 8
  %24 = load ptr, ptr %22, align 8
  %.reload53 = load ptr, ptr %.reg2mem47, align 8
  store ptr %24, ptr %.reload53, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  store ptr %26, ptr %.reg2mem36, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload46 = load ptr, ptr %.reg2mem36, align 8
  store ptr %27, ptr %.reload46, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  store ptr %29, ptr %.reg2mem29, align 8
  %30 = load ptr, ptr %28, align 8
  %.reload35 = load ptr, ptr %.reg2mem29, align 8
  store ptr %30, ptr %.reload35, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr %32, ptr %.reg2mem15, align 8
  %33 = load i32, ptr %31, align 4
  %.reload28 = load ptr, ptr %.reg2mem15, align 8
  store i32 %33, ptr %.reload28, align 4
  call void @set_offset(ptr %21, ptr @CuckooMap)
  %34 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %34, align 8
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = getelementptr { ptr, i160 }, ptr %34, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  store ptr %38, ptr %36, align 8
  %39 = getelementptr { ptr, i160 }, ptr %34, i32 0, i32 1
  %40 = load i160, ptr %39, align 4
  store i160 %40, ptr %35, align 4
  %41 = alloca i160, align 8
  %42 = alloca ptr, align 8
  %43 = load ptr, ptr %36, align 8
  store ptr %43, ptr %42, align 8
  %44 = load i160, ptr %35, align 4
  store i160 %44, ptr %41, align 4
  %45 = load ptr, ptr %42, align 8
  %46 = insertvalue { ptr, i160 } undef, ptr %45, 0
  %47 = load i160, ptr %41, align 4
  %48 = insertvalue { ptr, i160 } %46, i160 %47, 1
  %.reload52 = load ptr, ptr %.reg2mem47, align 8
  %49 = load ptr, ptr %.reload52, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %.reload45 = load ptr, ptr %.reg2mem36, align 8
  %51 = load ptr, ptr %.reload45, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 1
  %.reload34 = load ptr, ptr %.reg2mem29, align 8
  %53 = load ptr, ptr %.reload34, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 2
  %.reload27 = load ptr, ptr %.reg2mem15, align 8
  %55 = load i32, ptr %.reload27, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %55, 3
  %57 = load ptr, ptr %21, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %57)
  %.reload26 = load ptr, ptr %.reg2mem15, align 8
  %59 = load i32, ptr %.reload26, align 4
  %60 = getelementptr ptr, ptr %57, i32 %59
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @typegetter_wrapper(ptr %61, ptr %51)
  %63 = alloca [1 x ptr], align 8
  %64 = getelementptr [1 x ptr], ptr %63, i32 0, i32 0
  store ptr %62, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 1, ptr %63)
  %66 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %49)
  %67 = getelementptr ptr, ptr %49, i32 %55
  %68 = getelementptr ptr, ptr %67, i32 11
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr }, align 8
  %71 = getelementptr { ptr }, ptr %70, i32 0, i32 0
  store ptr %45, ptr %71, align 8
  %72 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %56, ptr %70)
  %73 = call i32 %72({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr %63, { ptr, i160 } %48) #17
  %74 = alloca i32, align 4
  store i32 %73, ptr %74, align 4
  %75 = load i32, ptr %74, align 4
  %.reload51 = load ptr, ptr %.reg2mem47, align 8
  %76 = load ptr, ptr %.reload51, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %.reload44 = load ptr, ptr %.reg2mem36, align 8
  %78 = load ptr, ptr %.reload44, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %.reload33 = load ptr, ptr %.reg2mem29, align 8
  %80 = load ptr, ptr %.reload33, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %.reload25 = load ptr, ptr %.reg2mem15, align 8
  %82 = load i32, ptr %.reload25, align 4
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = alloca [1 x ptr], align 8
  %85 = getelementptr [1 x ptr], ptr %84, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %85, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 1, ptr %84)
  %87 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %76)
  %88 = getelementptr ptr, ptr %76, i32 %82
  %89 = getelementptr ptr, ptr %88, i32 13
  %90 = load ptr, ptr %89, align 8
  %91 = alloca { ptr }, align 8
  %92 = getelementptr { ptr }, ptr %91, i32 0, i32 0
  store ptr @i32_typ, ptr %92, align 8
  %93 = call ptr @behavior_wrapper(ptr %90, { ptr, ptr, ptr, i32 } %83, ptr %91)
  %94 = call i32 %93({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr %84, i32 %75) #17
  %95 = alloca i32, align 4
  store i32 %94, ptr %95, align 4
  %.reload43 = load ptr, ptr %.reg2mem36, align 8
  %96 = load ptr, ptr %.reload43, align 8
  %97 = load ptr, ptr %21, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %97)
  %.reload24 = load ptr, ptr %.reg2mem15, align 8
  %99 = load i32, ptr %.reload24, align 4
  %100 = getelementptr ptr, ptr %97, i32 %99
  %101 = getelementptr ptr, ptr %100, i32 3
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = call { ptr } %104(ptr %96) #16
  %106 = alloca ptr, align 8
  store { ptr } %105, ptr %106, align 8
  %107 = alloca i160, align 8
  %108 = alloca ptr, align 8
  %109 = load ptr, ptr %36, align 8
  store ptr %109, ptr %108, align 8
  %110 = load i160, ptr %35, align 4
  store i160 %110, ptr %107, align 4
  %111 = load ptr, ptr %108, align 8
  %112 = insertvalue { ptr, i160 } undef, ptr %111, 0
  %113 = load i160, ptr %107, align 4
  %114 = insertvalue { ptr, i160 } %112, i160 %113, 1
  %115 = load i32, ptr %74, align 4
  %116 = load i32, ptr %95, align 4
  %117 = load ptr, ptr %106, align 8
  %118 = insertvalue { ptr } undef, ptr %117, 0
  %.reload50 = load ptr, ptr %.reg2mem47, align 8
  %119 = load ptr, ptr %.reload50, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %.reload42 = load ptr, ptr %.reg2mem36, align 8
  %121 = load ptr, ptr %.reload42, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 1
  %.reload32 = load ptr, ptr %.reg2mem29, align 8
  %123 = load ptr, ptr %.reload32, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %123, 2
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  %125 = load i32, ptr %.reload23, align 4
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %125, 3
  %127 = load ptr, ptr %21, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %127)
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %129 = load i32, ptr %.reload22, align 4
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @typegetter_wrapper(ptr %131, ptr %121)
  %133 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %134 = getelementptr [2 x ptr], ptr %133, i32 0, i32 1
  store ptr null, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 8, ptr %133)
  store ptr @buffer_typ, ptr %133, align 8
  %136 = alloca [4 x ptr], align 8
  %137 = getelementptr [4 x ptr], ptr %136, i32 0, i32 0
  store ptr %132, ptr %137, align 8
  %138 = getelementptr [4 x ptr], ptr %136, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %138, align 8
  %139 = getelementptr [4 x ptr], ptr %136, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %139, align 8
  %140 = getelementptr [4 x ptr], ptr %136, i32 0, i32 3
  store ptr %133, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %136)
  %142 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %119)
  %143 = getelementptr ptr, ptr %119, i32 %125
  %144 = getelementptr ptr, ptr %143, i32 19
  %145 = load ptr, ptr %144, align 8
  %146 = alloca { ptr, ptr, ptr, ptr }, align 8
  %147 = getelementptr { ptr, ptr, ptr, ptr }, ptr %146, i32 0, i32 0
  store ptr %111, ptr %147, align 8
  %148 = getelementptr { ptr, ptr, ptr, ptr }, ptr %146, i32 0, i32 1
  store ptr @i32_typ, ptr %148, align 8
  %149 = getelementptr { ptr, ptr, ptr, ptr }, ptr %146, i32 0, i32 2
  store ptr @i32_typ, ptr %149, align 8
  %150 = getelementptr { ptr, ptr, ptr, ptr }, ptr %146, i32 0, i32 3
  store ptr @buffer_typ, ptr %150, align 8
  %151 = call ptr @behavior_wrapper(ptr %145, { ptr, ptr, ptr, i32 } %126, ptr %146)
  %152 = call { ptr, i160 } %151({ ptr, ptr, ptr, i32 } %126, { ptr, ptr, ptr, i32 } %126, ptr %136, { ptr, i160 } %114, i32 %115, i32 %116, { ptr } %118) #17
  %153 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %152, ptr %153, align 8
  %.reload41 = load ptr, ptr %.reg2mem36, align 8
  %154 = load ptr, ptr %.reload41, align 8
  %155 = load ptr, ptr %21, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %155)
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %157 = load i32, ptr %.reload21, align 4
  %158 = getelementptr ptr, ptr %155, i32 %157
  %159 = getelementptr ptr, ptr %158, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = call ptr @typegetter_wrapper(ptr %160, ptr %154)
  %162 = load ptr, ptr %153, align 8
  %163 = ptrtoint ptr %162 to i64
  %164 = icmp eq i64 %163, ptrtoint (ptr @nil_typ to i64)
  %165 = icmp eq i64 %163, 0
  %166 = or i1 %164, %165
  %167 = icmp eq i1 %166, false
  %168 = alloca i1, align 1
  store i1 %167, ptr %168, align 1
  %169 = load i1, ptr %168, align 1
  store i1 %169, ptr %.reg2mem11, align 1
  %.reload14 = load i1, ptr %.reg2mem11, align 1
  br i1 %.reload14, label %170, label %171

170:                                              ; preds = %4
  store i32 0, ptr %.reg2mem56, align 4
  store { ptr, i160 } poison, ptr %.reg2mem58, align 8
  br label %268

171:                                              ; preds = %4
  %172 = load i32, ptr %74, align 4
  %.reload49 = load ptr, ptr %.reg2mem47, align 8
  %173 = load ptr, ptr %.reload49, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %173, 0
  %.reload40 = load ptr, ptr %.reg2mem36, align 8
  %175 = load ptr, ptr %.reload40, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 1
  %.reload31 = load ptr, ptr %.reg2mem29, align 8
  %177 = load ptr, ptr %.reload31, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %177, 2
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  %179 = load i32, ptr %.reload20, align 4
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, i32 %179, 3
  %181 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %181, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %183 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %173)
  %184 = getelementptr ptr, ptr %173, i32 %179
  %185 = getelementptr ptr, ptr %184, i32 14
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %187, align 8
  %188 = call ptr @behavior_wrapper(ptr %186, { ptr, ptr, ptr, i32 } %180, ptr %7)
  %189 = call i32 %188({ ptr, ptr, ptr, i32 } %180, { ptr, ptr, ptr, i32 } %180, ptr %6, i32 %172) #17
  store i32 %189, ptr %8, align 4
  %.reload39 = load ptr, ptr %.reg2mem36, align 8
  %190 = load ptr, ptr %.reload39, align 8
  %191 = load ptr, ptr %21, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %191)
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %193 = load i32, ptr %.reload19, align 4
  %194 = getelementptr ptr, ptr %191, i32 %193
  %195 = getelementptr ptr, ptr %194, i32 4
  %196 = load ptr, ptr %195, align 8
  %197 = getelementptr { ptr, ptr }, ptr %196, i32 0, i32 0
  %198 = load ptr, ptr %197, align 8
  %199 = call { ptr } %198(ptr %190) #16
  store { ptr } %199, ptr %9, align 8
  %200 = load ptr, ptr %36, align 8
  store ptr %200, ptr %11, align 8
  %201 = load i160, ptr %35, align 4
  store i160 %201, ptr %10, align 4
  %202 = load ptr, ptr %11, align 8
  %203 = insertvalue { ptr, i160 } undef, ptr %202, 0
  %204 = load i160, ptr %10, align 4
  %205 = insertvalue { ptr, i160 } %203, i160 %204, 1
  %206 = load i32, ptr %74, align 4
  %207 = load i32, ptr %8, align 4
  %208 = load ptr, ptr %9, align 8
  %209 = insertvalue { ptr } undef, ptr %208, 0
  %.reload48 = load ptr, ptr %.reg2mem47, align 8
  %210 = load ptr, ptr %.reload48, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %210, 0
  %.reload38 = load ptr, ptr %.reg2mem36, align 8
  %212 = load ptr, ptr %.reload38, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } %211, ptr %212, 1
  %.reload30 = load ptr, ptr %.reg2mem29, align 8
  %214 = load ptr, ptr %.reload30, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } %213, ptr %214, 2
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %216 = load i32, ptr %.reload18, align 4
  %217 = insertvalue { ptr, ptr, ptr, i32 } %215, i32 %216, 3
  %218 = load ptr, ptr %21, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %218)
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %220 = load i32, ptr %.reload17, align 4
  %221 = getelementptr ptr, ptr %218, i32 %220
  %222 = load ptr, ptr %221, align 8
  %223 = call ptr @typegetter_wrapper(ptr %222, ptr %212)
  %224 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %225 = getelementptr [2 x ptr], ptr %224, i32 0, i32 1
  store ptr null, ptr %225, align 8
  %226 = call ptr @llvm.invariant.start.p0(i64 8, ptr %224)
  store ptr @buffer_typ, ptr %224, align 8
  %227 = getelementptr [4 x ptr], ptr %12, i32 0, i32 0
  store ptr %223, ptr %227, align 8
  %228 = getelementptr [4 x ptr], ptr %12, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %228, align 8
  %229 = getelementptr [4 x ptr], ptr %12, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %229, align 8
  %230 = getelementptr [4 x ptr], ptr %12, i32 0, i32 3
  store ptr %224, ptr %230, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %232 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %210)
  %233 = getelementptr ptr, ptr %210, i32 %216
  %234 = getelementptr ptr, ptr %233, i32 19
  %235 = load ptr, ptr %234, align 8
  %236 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 0
  store ptr %202, ptr %236, align 8
  %237 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 1
  store ptr @i32_typ, ptr %237, align 8
  %238 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 2
  store ptr @i32_typ, ptr %238, align 8
  %239 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 3
  store ptr @buffer_typ, ptr %239, align 8
  %240 = call ptr @behavior_wrapper(ptr %235, { ptr, ptr, ptr, i32 } %217, ptr %13)
  %241 = call { ptr, i160 } %240({ ptr, ptr, ptr, i32 } %217, { ptr, ptr, ptr, i32 } %217, ptr %12, { ptr, i160 } %205, i32 %206, i32 %207, { ptr } %209) #17
  store { ptr, i160 } %241, ptr %14, align 8
  %.reload37 = load ptr, ptr %.reg2mem36, align 8
  %242 = load ptr, ptr %.reload37, align 8
  %243 = load ptr, ptr %21, align 8
  %244 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %243)
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %245 = load i32, ptr %.reload16, align 4
  %246 = getelementptr ptr, ptr %243, i32 %245
  %247 = getelementptr ptr, ptr %246, i32 1
  %248 = load ptr, ptr %247, align 8
  %249 = call ptr @typegetter_wrapper(ptr %248, ptr %242)
  %250 = load ptr, ptr %14, align 8
  %251 = ptrtoint ptr %250 to i64
  %252 = icmp eq i64 %251, ptrtoint (ptr @nil_typ to i64)
  %253 = icmp eq i64 %251, 0
  %254 = or i1 %252, %253
  %255 = icmp eq i1 %254, false
  store i1 %255, ptr %15, align 1
  %256 = load i1, ptr %15, align 1
  %257 = xor i1 %256, true
  %258 = zext i1 %257 to i32
  store i32 %258, ptr %.reg2mem9, align 4
  br i1 %256, label %259, label %260

259:                                              ; preds = %171
  store { ptr, i160 } poison, ptr %.reg2mem60, align 8
  br label %266

260:                                              ; preds = %171
  %261 = load [0 x i8], ptr %17, align 1
  store [0 x i8] %261, ptr %18, align 1
  store ptr @nil_typ, ptr %19, align 8
  %262 = load ptr, ptr %19, align 8
  %263 = insertvalue { ptr, i160 } undef, ptr %262, 0
  %264 = load i160, ptr %18, align 4
  %265 = insertvalue { ptr, i160 } %263, i160 %264, 1
  store { ptr, i160 } %265, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem60, align 8
  br label %266

266:                                              ; preds = %260, %259
  %.reload61 = load { ptr, i160 }, ptr %.reg2mem60, align 8
  store { ptr, i160 } %.reload61, ptr %.reg2mem5, align 8
  br label %267

267:                                              ; preds = %266
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem56, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem58, align 8
  br label %268

268:                                              ; preds = %267, %170
  %.reload59 = load { ptr, i160 }, ptr %.reg2mem58, align 8
  %.reload57 = load i32, ptr %.reg2mem56, align 4
  store { ptr, i160 } %.reload59, ptr %.reg2mem3, align 8
  store i32 %.reload57, ptr %.reg2mem1, align 4
  br label %269

269:                                              ; preds = %268
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %270 = zext i32 %.reload2 to i64
  %271 = trunc i64 %270 to i32
  switch i32 %271, label %285 [
    i32 0, label %272
  ]

272:                                              ; preds = %269
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  %273 = select i1 %.reload13, ptr %153, ptr %14
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  %274 = select i1 %.reload12, ptr %5, ptr %16
  %275 = getelementptr { ptr, i160 }, ptr %273, i32 0, i32 0
  %276 = getelementptr { ptr, i160 }, ptr %274, i32 0, i32 0
  %277 = load ptr, ptr %275, align 8
  store ptr %277, ptr %276, align 8
  %278 = getelementptr { ptr, i160 }, ptr %273, i32 0, i32 1
  %279 = getelementptr { ptr, i160 }, ptr %274, i32 0, i32 1
  %280 = load i160, ptr %278, align 4
  store i160 %280, ptr %279, align 4
  %281 = load ptr, ptr %276, align 8
  %282 = insertvalue { ptr, i160 } undef, ptr %281, 0
  %283 = load i160, ptr %279, align 4
  %284 = insertvalue { ptr, i160 } %282, i160 %283, 1
  store { ptr, i160 } %284, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem54, align 8
  br label %286

285:                                              ; preds = %269
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem54, align 8
  br label %286

286:                                              ; preds = %285, %272
  %.reload55 = load { ptr, i160 }, ptr %.reg2mem54, align 8
  ret { ptr, i160 } %.reload55
}

define void @CuckooMap__set_index_keyK_valueV({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @CuckooMap)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  store ptr %24, ptr %22, align 8
  %25 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %26 = load i160, ptr %25, align 4
  store i160 %26, ptr %21, align 4
  %27 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %27, align 8
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  store ptr %31, ptr %29, align 8
  %32 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 1
  %33 = load i160, ptr %32, align 4
  store i160 %33, ptr %28, align 4
  %34 = alloca i160, align 8
  %35 = alloca ptr, align 8
  %36 = load ptr, ptr %22, align 8
  store ptr %36, ptr %35, align 8
  %37 = load i160, ptr %21, align 4
  store i160 %37, ptr %34, align 4
  %38 = load ptr, ptr %35, align 8
  %39 = insertvalue { ptr, i160 } undef, ptr %38, 0
  %40 = load i160, ptr %34, align 4
  %41 = insertvalue { ptr, i160 } %39, i160 %40, 1
  %42 = alloca i160, align 8
  %43 = alloca ptr, align 8
  %44 = load ptr, ptr %29, align 8
  store ptr %44, ptr %43, align 8
  %45 = load i160, ptr %28, align 4
  store i160 %45, ptr %42, align 4
  %46 = load ptr, ptr %43, align 8
  %47 = insertvalue { ptr, i160 } undef, ptr %46, 0
  %48 = load i160, ptr %42, align 4
  %49 = insertvalue { ptr, i160 } %47, i160 %48, 1
  %50 = load ptr, ptr %9, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %12, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %15, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %18, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  %58 = load ptr, ptr %7, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %58)
  %60 = load i32, ptr %18, align 4
  %61 = getelementptr ptr, ptr %58, i32 %60
  %62 = load ptr, ptr %61, align 8
  %63 = call ptr @typegetter_wrapper(ptr %62, ptr %52)
  %64 = load ptr, ptr %12, align 8
  %65 = load ptr, ptr %7, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %65)
  %67 = load i32, ptr %18, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = call ptr @typegetter_wrapper(ptr %70, ptr %64)
  %72 = alloca [2 x ptr], align 8
  %73 = getelementptr [2 x ptr], ptr %72, i32 0, i32 0
  store ptr %63, ptr %73, align 8
  %74 = getelementptr [2 x ptr], ptr %72, i32 0, i32 1
  store ptr %71, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 4, ptr %72)
  %76 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %50)
  %77 = getelementptr ptr, ptr %50, i32 %56
  %78 = getelementptr ptr, ptr %77, i32 21
  %79 = load ptr, ptr %78, align 8
  %80 = alloca { ptr, ptr }, align 8
  %81 = getelementptr { ptr, ptr }, ptr %80, i32 0, i32 0
  store ptr %38, ptr %81, align 8
  %82 = getelementptr { ptr, ptr }, ptr %80, i32 0, i32 1
  store ptr %46, ptr %82, align 8
  %83 = call ptr @behavior_wrapper(ptr %79, { ptr, ptr, ptr, i32 } %57, ptr %80)
  call void %83({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr %72, { ptr, i160 } %41, { ptr, i160 } %49) #17
  ret void
}

define { ptr, i160 } @CuckooMap_remove_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca { ptr, i160 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca [4 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr, ptr }, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca i1, align 1
  %16 = alloca { ptr, i160 }, align 8
  %17 = alloca [0 x i8], align 1
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem29 = alloca ptr, align 8
  %.reg2mem36 = alloca ptr, align 8
  %.reg2mem47 = alloca ptr, align 8
  %.reg2mem54 = alloca { ptr, i160 }, align 8
  %.reg2mem56 = alloca i32, align 4
  %.reg2mem58 = alloca { ptr, i160 }, align 8
  %.reg2mem60 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  store ptr %23, ptr %.reg2mem47, align 8
  %24 = load ptr, ptr %22, align 8
  %.reload53 = load ptr, ptr %.reg2mem47, align 8
  store ptr %24, ptr %.reload53, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  store ptr %26, ptr %.reg2mem36, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload46 = load ptr, ptr %.reg2mem36, align 8
  store ptr %27, ptr %.reload46, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  store ptr %29, ptr %.reg2mem29, align 8
  %30 = load ptr, ptr %28, align 8
  %.reload35 = load ptr, ptr %.reg2mem29, align 8
  store ptr %30, ptr %.reload35, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr %32, ptr %.reg2mem15, align 8
  %33 = load i32, ptr %31, align 4
  %.reload28 = load ptr, ptr %.reg2mem15, align 8
  store i32 %33, ptr %.reload28, align 4
  call void @set_offset(ptr %21, ptr @CuckooMap)
  %34 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %34, align 8
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = getelementptr { ptr, i160 }, ptr %34, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  store ptr %38, ptr %36, align 8
  %39 = getelementptr { ptr, i160 }, ptr %34, i32 0, i32 1
  %40 = load i160, ptr %39, align 4
  store i160 %40, ptr %35, align 4
  %41 = alloca i160, align 8
  %42 = alloca ptr, align 8
  %43 = load ptr, ptr %36, align 8
  store ptr %43, ptr %42, align 8
  %44 = load i160, ptr %35, align 4
  store i160 %44, ptr %41, align 4
  %45 = load ptr, ptr %42, align 8
  %46 = insertvalue { ptr, i160 } undef, ptr %45, 0
  %47 = load i160, ptr %41, align 4
  %48 = insertvalue { ptr, i160 } %46, i160 %47, 1
  %.reload52 = load ptr, ptr %.reg2mem47, align 8
  %49 = load ptr, ptr %.reload52, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %.reload45 = load ptr, ptr %.reg2mem36, align 8
  %51 = load ptr, ptr %.reload45, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 1
  %.reload34 = load ptr, ptr %.reg2mem29, align 8
  %53 = load ptr, ptr %.reload34, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 2
  %.reload27 = load ptr, ptr %.reg2mem15, align 8
  %55 = load i32, ptr %.reload27, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %55, 3
  %57 = load ptr, ptr %21, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %57)
  %.reload26 = load ptr, ptr %.reg2mem15, align 8
  %59 = load i32, ptr %.reload26, align 4
  %60 = getelementptr ptr, ptr %57, i32 %59
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @typegetter_wrapper(ptr %61, ptr %51)
  %63 = alloca [1 x ptr], align 8
  %64 = getelementptr [1 x ptr], ptr %63, i32 0, i32 0
  store ptr %62, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 1, ptr %63)
  %66 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %49)
  %67 = getelementptr ptr, ptr %49, i32 %55
  %68 = getelementptr ptr, ptr %67, i32 11
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr }, align 8
  %71 = getelementptr { ptr }, ptr %70, i32 0, i32 0
  store ptr %45, ptr %71, align 8
  %72 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %56, ptr %70)
  %73 = call i32 %72({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr %63, { ptr, i160 } %48) #17
  %74 = alloca i32, align 4
  store i32 %73, ptr %74, align 4
  %75 = load i32, ptr %74, align 4
  %.reload51 = load ptr, ptr %.reg2mem47, align 8
  %76 = load ptr, ptr %.reload51, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %.reload44 = load ptr, ptr %.reg2mem36, align 8
  %78 = load ptr, ptr %.reload44, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %.reload33 = load ptr, ptr %.reg2mem29, align 8
  %80 = load ptr, ptr %.reload33, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %.reload25 = load ptr, ptr %.reg2mem15, align 8
  %82 = load i32, ptr %.reload25, align 4
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = alloca [1 x ptr], align 8
  %85 = getelementptr [1 x ptr], ptr %84, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %85, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 1, ptr %84)
  %87 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %76)
  %88 = getelementptr ptr, ptr %76, i32 %82
  %89 = getelementptr ptr, ptr %88, i32 13
  %90 = load ptr, ptr %89, align 8
  %91 = alloca { ptr }, align 8
  %92 = getelementptr { ptr }, ptr %91, i32 0, i32 0
  store ptr @i32_typ, ptr %92, align 8
  %93 = call ptr @behavior_wrapper(ptr %90, { ptr, ptr, ptr, i32 } %83, ptr %91)
  %94 = call i32 %93({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr %84, i32 %75) #17
  %95 = alloca i32, align 4
  store i32 %94, ptr %95, align 4
  %.reload43 = load ptr, ptr %.reg2mem36, align 8
  %96 = load ptr, ptr %.reload43, align 8
  %97 = load ptr, ptr %21, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %97)
  %.reload24 = load ptr, ptr %.reg2mem15, align 8
  %99 = load i32, ptr %.reload24, align 4
  %100 = getelementptr ptr, ptr %97, i32 %99
  %101 = getelementptr ptr, ptr %100, i32 3
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = call { ptr } %104(ptr %96) #16
  %106 = alloca ptr, align 8
  store { ptr } %105, ptr %106, align 8
  %107 = alloca i160, align 8
  %108 = alloca ptr, align 8
  %109 = load ptr, ptr %36, align 8
  store ptr %109, ptr %108, align 8
  %110 = load i160, ptr %35, align 4
  store i160 %110, ptr %107, align 4
  %111 = load ptr, ptr %108, align 8
  %112 = insertvalue { ptr, i160 } undef, ptr %111, 0
  %113 = load i160, ptr %107, align 4
  %114 = insertvalue { ptr, i160 } %112, i160 %113, 1
  %115 = load i32, ptr %74, align 4
  %116 = load i32, ptr %95, align 4
  %117 = load ptr, ptr %106, align 8
  %118 = insertvalue { ptr } undef, ptr %117, 0
  %.reload50 = load ptr, ptr %.reg2mem47, align 8
  %119 = load ptr, ptr %.reload50, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %.reload42 = load ptr, ptr %.reg2mem36, align 8
  %121 = load ptr, ptr %.reload42, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 1
  %.reload32 = load ptr, ptr %.reg2mem29, align 8
  %123 = load ptr, ptr %.reload32, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %123, 2
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  %125 = load i32, ptr %.reload23, align 4
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %125, 3
  %127 = load ptr, ptr %21, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %127)
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %129 = load i32, ptr %.reload22, align 4
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @typegetter_wrapper(ptr %131, ptr %121)
  %133 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %134 = getelementptr [2 x ptr], ptr %133, i32 0, i32 1
  store ptr null, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 8, ptr %133)
  store ptr @buffer_typ, ptr %133, align 8
  %136 = alloca [4 x ptr], align 8
  %137 = getelementptr [4 x ptr], ptr %136, i32 0, i32 0
  store ptr %132, ptr %137, align 8
  %138 = getelementptr [4 x ptr], ptr %136, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %138, align 8
  %139 = getelementptr [4 x ptr], ptr %136, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %139, align 8
  %140 = getelementptr [4 x ptr], ptr %136, i32 0, i32 3
  store ptr %133, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %136)
  %142 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %119)
  %143 = getelementptr ptr, ptr %119, i32 %125
  %144 = getelementptr ptr, ptr %143, i32 20
  %145 = load ptr, ptr %144, align 8
  %146 = alloca { ptr, ptr, ptr, ptr }, align 8
  %147 = getelementptr { ptr, ptr, ptr, ptr }, ptr %146, i32 0, i32 0
  store ptr %111, ptr %147, align 8
  %148 = getelementptr { ptr, ptr, ptr, ptr }, ptr %146, i32 0, i32 1
  store ptr @i32_typ, ptr %148, align 8
  %149 = getelementptr { ptr, ptr, ptr, ptr }, ptr %146, i32 0, i32 2
  store ptr @i32_typ, ptr %149, align 8
  %150 = getelementptr { ptr, ptr, ptr, ptr }, ptr %146, i32 0, i32 3
  store ptr @buffer_typ, ptr %150, align 8
  %151 = call ptr @behavior_wrapper(ptr %145, { ptr, ptr, ptr, i32 } %126, ptr %146)
  %152 = call { ptr, i160 } %151({ ptr, ptr, ptr, i32 } %126, { ptr, ptr, ptr, i32 } %126, ptr %136, { ptr, i160 } %114, i32 %115, i32 %116, { ptr } %118) #17
  %153 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %152, ptr %153, align 8
  %.reload41 = load ptr, ptr %.reg2mem36, align 8
  %154 = load ptr, ptr %.reload41, align 8
  %155 = load ptr, ptr %21, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %155)
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %157 = load i32, ptr %.reload21, align 4
  %158 = getelementptr ptr, ptr %155, i32 %157
  %159 = getelementptr ptr, ptr %158, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = call ptr @typegetter_wrapper(ptr %160, ptr %154)
  %162 = load ptr, ptr %153, align 8
  %163 = ptrtoint ptr %162 to i64
  %164 = icmp eq i64 %163, ptrtoint (ptr @nil_typ to i64)
  %165 = icmp eq i64 %163, 0
  %166 = or i1 %164, %165
  %167 = icmp eq i1 %166, false
  %168 = alloca i1, align 1
  store i1 %167, ptr %168, align 1
  %169 = load i1, ptr %168, align 1
  store i1 %169, ptr %.reg2mem11, align 1
  %.reload14 = load i1, ptr %.reg2mem11, align 1
  br i1 %.reload14, label %170, label %171

170:                                              ; preds = %4
  store i32 0, ptr %.reg2mem56, align 4
  store { ptr, i160 } poison, ptr %.reg2mem58, align 8
  br label %268

171:                                              ; preds = %4
  %172 = load i32, ptr %74, align 4
  %.reload49 = load ptr, ptr %.reg2mem47, align 8
  %173 = load ptr, ptr %.reload49, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %173, 0
  %.reload40 = load ptr, ptr %.reg2mem36, align 8
  %175 = load ptr, ptr %.reload40, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 1
  %.reload31 = load ptr, ptr %.reg2mem29, align 8
  %177 = load ptr, ptr %.reload31, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %177, 2
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  %179 = load i32, ptr %.reload20, align 4
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, i32 %179, 3
  %181 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %181, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %183 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %173)
  %184 = getelementptr ptr, ptr %173, i32 %179
  %185 = getelementptr ptr, ptr %184, i32 14
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %187, align 8
  %188 = call ptr @behavior_wrapper(ptr %186, { ptr, ptr, ptr, i32 } %180, ptr %7)
  %189 = call i32 %188({ ptr, ptr, ptr, i32 } %180, { ptr, ptr, ptr, i32 } %180, ptr %6, i32 %172) #17
  store i32 %189, ptr %8, align 4
  %.reload39 = load ptr, ptr %.reg2mem36, align 8
  %190 = load ptr, ptr %.reload39, align 8
  %191 = load ptr, ptr %21, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %191)
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %193 = load i32, ptr %.reload19, align 4
  %194 = getelementptr ptr, ptr %191, i32 %193
  %195 = getelementptr ptr, ptr %194, i32 4
  %196 = load ptr, ptr %195, align 8
  %197 = getelementptr { ptr, ptr }, ptr %196, i32 0, i32 0
  %198 = load ptr, ptr %197, align 8
  %199 = call { ptr } %198(ptr %190) #16
  store { ptr } %199, ptr %9, align 8
  %200 = load ptr, ptr %36, align 8
  store ptr %200, ptr %11, align 8
  %201 = load i160, ptr %35, align 4
  store i160 %201, ptr %10, align 4
  %202 = load ptr, ptr %11, align 8
  %203 = insertvalue { ptr, i160 } undef, ptr %202, 0
  %204 = load i160, ptr %10, align 4
  %205 = insertvalue { ptr, i160 } %203, i160 %204, 1
  %206 = load i32, ptr %74, align 4
  %207 = load i32, ptr %8, align 4
  %208 = load ptr, ptr %9, align 8
  %209 = insertvalue { ptr } undef, ptr %208, 0
  %.reload48 = load ptr, ptr %.reg2mem47, align 8
  %210 = load ptr, ptr %.reload48, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %210, 0
  %.reload38 = load ptr, ptr %.reg2mem36, align 8
  %212 = load ptr, ptr %.reload38, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } %211, ptr %212, 1
  %.reload30 = load ptr, ptr %.reg2mem29, align 8
  %214 = load ptr, ptr %.reload30, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } %213, ptr %214, 2
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %216 = load i32, ptr %.reload18, align 4
  %217 = insertvalue { ptr, ptr, ptr, i32 } %215, i32 %216, 3
  %218 = load ptr, ptr %21, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %218)
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %220 = load i32, ptr %.reload17, align 4
  %221 = getelementptr ptr, ptr %218, i32 %220
  %222 = load ptr, ptr %221, align 8
  %223 = call ptr @typegetter_wrapper(ptr %222, ptr %212)
  %224 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %225 = getelementptr [2 x ptr], ptr %224, i32 0, i32 1
  store ptr null, ptr %225, align 8
  %226 = call ptr @llvm.invariant.start.p0(i64 8, ptr %224)
  store ptr @buffer_typ, ptr %224, align 8
  %227 = getelementptr [4 x ptr], ptr %12, i32 0, i32 0
  store ptr %223, ptr %227, align 8
  %228 = getelementptr [4 x ptr], ptr %12, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %228, align 8
  %229 = getelementptr [4 x ptr], ptr %12, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %229, align 8
  %230 = getelementptr [4 x ptr], ptr %12, i32 0, i32 3
  store ptr %224, ptr %230, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %232 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %210)
  %233 = getelementptr ptr, ptr %210, i32 %216
  %234 = getelementptr ptr, ptr %233, i32 20
  %235 = load ptr, ptr %234, align 8
  %236 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 0
  store ptr %202, ptr %236, align 8
  %237 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 1
  store ptr @i32_typ, ptr %237, align 8
  %238 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 2
  store ptr @i32_typ, ptr %238, align 8
  %239 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 3
  store ptr @buffer_typ, ptr %239, align 8
  %240 = call ptr @behavior_wrapper(ptr %235, { ptr, ptr, ptr, i32 } %217, ptr %13)
  %241 = call { ptr, i160 } %240({ ptr, ptr, ptr, i32 } %217, { ptr, ptr, ptr, i32 } %217, ptr %12, { ptr, i160 } %205, i32 %206, i32 %207, { ptr } %209) #17
  store { ptr, i160 } %241, ptr %14, align 8
  %.reload37 = load ptr, ptr %.reg2mem36, align 8
  %242 = load ptr, ptr %.reload37, align 8
  %243 = load ptr, ptr %21, align 8
  %244 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %243)
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %245 = load i32, ptr %.reload16, align 4
  %246 = getelementptr ptr, ptr %243, i32 %245
  %247 = getelementptr ptr, ptr %246, i32 1
  %248 = load ptr, ptr %247, align 8
  %249 = call ptr @typegetter_wrapper(ptr %248, ptr %242)
  %250 = load ptr, ptr %14, align 8
  %251 = ptrtoint ptr %250 to i64
  %252 = icmp eq i64 %251, ptrtoint (ptr @nil_typ to i64)
  %253 = icmp eq i64 %251, 0
  %254 = or i1 %252, %253
  %255 = icmp eq i1 %254, false
  store i1 %255, ptr %15, align 1
  %256 = load i1, ptr %15, align 1
  %257 = xor i1 %256, true
  %258 = zext i1 %257 to i32
  store i32 %258, ptr %.reg2mem9, align 4
  br i1 %256, label %259, label %260

259:                                              ; preds = %171
  store { ptr, i160 } poison, ptr %.reg2mem60, align 8
  br label %266

260:                                              ; preds = %171
  %261 = load [0 x i8], ptr %17, align 1
  store [0 x i8] %261, ptr %18, align 1
  store ptr @nil_typ, ptr %19, align 8
  %262 = load ptr, ptr %19, align 8
  %263 = insertvalue { ptr, i160 } undef, ptr %262, 0
  %264 = load i160, ptr %18, align 4
  %265 = insertvalue { ptr, i160 } %263, i160 %264, 1
  store { ptr, i160 } %265, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem60, align 8
  br label %266

266:                                              ; preds = %260, %259
  %.reload61 = load { ptr, i160 }, ptr %.reg2mem60, align 8
  store { ptr, i160 } %.reload61, ptr %.reg2mem5, align 8
  br label %267

267:                                              ; preds = %266
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem56, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem58, align 8
  br label %268

268:                                              ; preds = %267, %170
  %.reload59 = load { ptr, i160 }, ptr %.reg2mem58, align 8
  %.reload57 = load i32, ptr %.reg2mem56, align 4
  store { ptr, i160 } %.reload59, ptr %.reg2mem3, align 8
  store i32 %.reload57, ptr %.reg2mem1, align 4
  br label %269

269:                                              ; preds = %268
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %270 = zext i32 %.reload2 to i64
  %271 = trunc i64 %270 to i32
  switch i32 %271, label %285 [
    i32 0, label %272
  ]

272:                                              ; preds = %269
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  %273 = select i1 %.reload13, ptr %153, ptr %14
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  %274 = select i1 %.reload12, ptr %5, ptr %16
  %275 = getelementptr { ptr, i160 }, ptr %273, i32 0, i32 0
  %276 = getelementptr { ptr, i160 }, ptr %274, i32 0, i32 0
  %277 = load ptr, ptr %275, align 8
  store ptr %277, ptr %276, align 8
  %278 = getelementptr { ptr, i160 }, ptr %273, i32 0, i32 1
  %279 = getelementptr { ptr, i160 }, ptr %274, i32 0, i32 1
  %280 = load i160, ptr %278, align 4
  store i160 %280, ptr %279, align 4
  %281 = load ptr, ptr %276, align 8
  %282 = insertvalue { ptr, i160 } undef, ptr %281, 0
  %283 = load i160, ptr %279, align 4
  %284 = insertvalue { ptr, i160 } %282, i160 %283, 1
  store { ptr, i160 } %284, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem54, align 8
  br label %286

285:                                              ; preds = %269
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem54, align 8
  br label %286

286:                                              ; preds = %285, %272
  %.reload55 = load { ptr, i160 }, ptr %.reg2mem54, align 8
  ret { ptr, i160 } %.reload55
}

define void @CuckooMap_clear_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @CuckooMap)
  %18 = alloca i32, align 4
  store i32 8, ptr %18, align 4
  %19 = load ptr, ptr %10, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %20)
  %22 = load i32, ptr %16, align 4
  %23 = getelementptr ptr, ptr %20, i32 %22
  %24 = getelementptr ptr, ptr %23, i32 5
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = load i32, ptr %18, align 4
  call void %27(ptr %19, i32 %28) #15
  %29 = load i32, ptr %18, align 4
  %30 = sext i32 %29 to i64
  %31 = alloca ptr, align 8
  %32 = mul i64 %30, ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64)
  %33 = call ptr @bump_malloc(i64 %32)
  store ptr %33, ptr %31, align 8
  %34 = load ptr, ptr %10, align 8
  %35 = load ptr, ptr %5, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %35)
  %37 = load i32, ptr %16, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 3
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr } undef, ptr %44, 0
  call void %42(ptr %34, { ptr } %45) #15
  %46 = load i32, ptr %18, align 4
  %47 = sext i32 %46 to i64
  %48 = alloca ptr, align 8
  %49 = mul i64 %47, ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64)
  %50 = call ptr @bump_malloc(i64 %49)
  store ptr %50, ptr %48, align 8
  %51 = load ptr, ptr %10, align 8
  %52 = load ptr, ptr %5, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %52)
  %54 = load i32, ptr %16, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 4
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr }, ptr %48, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr } undef, ptr %61, 0
  call void %59(ptr %51, { ptr } %62) #15
  %63 = alloca i32, align 4
  store i32 0, ptr %63, align 4
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 6
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = load i32, ptr %63, align 4
  call void %72(ptr %64, i32 %73) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @CuckooMap_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @CuckooMap)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr } %26(ptr %18) #16
  %28 = alloca ptr, align 8
  store { ptr } %27, ptr %28, align 8
  %29 = load ptr, ptr %10, align 8
  %30 = load ptr, ptr %5, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %30)
  %32 = load i32, ptr %16, align 4
  %33 = getelementptr ptr, ptr %30, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 4
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr } %37(ptr %29) #16
  %39 = alloca ptr, align 8
  store { ptr } %38, ptr %39, align 8
  %40 = load ptr, ptr %10, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %41)
  %43 = load i32, ptr %16, align 4
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 5
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr { ptr, ptr }, ptr %46, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = call i32 %48(ptr %40) #16
  %50 = alloca i32, align 4
  store i32 %49, ptr %50, align 4
  %51 = load ptr, ptr %10, align 8
  %52 = load ptr, ptr %5, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %52)
  %54 = load i32, ptr %16, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = call ptr @typegetter_wrapper(ptr %56, ptr %51)
  %58 = load ptr, ptr %10, align 8
  %59 = load ptr, ptr %5, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %59)
  %61 = load i32, ptr %16, align 4
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @typegetter_wrapper(ptr %64, ptr %58)
  %66 = load ptr, ptr %10, align 8
  %67 = load ptr, ptr %5, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %67)
  %69 = load i32, ptr %16, align 4
  %70 = getelementptr ptr, ptr %67, i32 %69
  %71 = load ptr, ptr %70, align 8
  %72 = call ptr @typegetter_wrapper(ptr %71, ptr %66)
  %73 = load ptr, ptr %10, align 8
  %74 = load ptr, ptr %5, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %74)
  %76 = load i32, ptr %16, align 4
  %77 = getelementptr ptr, ptr %74, i32 %76
  %78 = getelementptr ptr, ptr %77, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = call ptr @typegetter_wrapper(ptr %79, ptr %73)
  %81 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %82 = getelementptr [4 x ptr], ptr %81, i32 0, i32 2
  store ptr %80, ptr %82, align 8
  %83 = getelementptr [4 x ptr], ptr %81, i32 0, i32 1
  store ptr %72, ptr %83, align 8
  %84 = getelementptr [4 x ptr], ptr %81, i32 0, i32 3
  store ptr null, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 24, ptr %81)
  store ptr @Pair, ptr %81, align 8
  %86 = alloca [4 x ptr], align 8
  store ptr @CuckooMapIterator, ptr %86, align 8
  %87 = getelementptr ptr, ptr %86, i32 1
  store ptr %57, ptr %87, align 8
  %88 = getelementptr ptr, ptr %86, i32 2
  store ptr %65, ptr %88, align 8
  %89 = getelementptr ptr, ptr %86, i32 3
  store ptr %81, ptr %89, align 8
  %90 = load ptr, ptr %86, align 8
  %91 = getelementptr ptr, ptr %90, i32 6
  %92 = load ptr, ptr %91, align 8
  %93 = call { i64, i64 } @size_wrapper(ptr %92, ptr %86)
  %94 = extractvalue { i64, i64 } %93, 0
  %95 = call ptr @bump_malloc(i64 %94)
  store ptr %57, ptr %95, align 8
  %96 = getelementptr ptr, ptr %95, i32 1
  store ptr %65, ptr %96, align 8
  %97 = getelementptr ptr, ptr %95, i32 2
  store ptr %81, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 24, ptr %95)
  %99 = alloca i32, align 4
  %100 = alloca ptr, align 8
  %101 = alloca ptr, align 8
  %102 = alloca ptr, align 8
  store ptr @CuckooMapIterator, ptr %102, align 8
  store ptr %95, ptr %101, align 8
  store i32 10, ptr %99, align 4
  %103 = load ptr, ptr %10, align 8
  %104 = load ptr, ptr %5, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %104)
  %106 = load i32, ptr %16, align 4
  %107 = getelementptr ptr, ptr %104, i32 %106
  %108 = getelementptr ptr, ptr %107, i32 3
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr }, ptr %109, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = call { ptr } %111(ptr %103) #16
  %113 = alloca ptr, align 8
  store { ptr } %112, ptr %113, align 8
  %114 = load ptr, ptr %10, align 8
  %115 = load ptr, ptr %5, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %115)
  %117 = load i32, ptr %16, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 4
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call { ptr } %122(ptr %114) #16
  %124 = alloca ptr, align 8
  store { ptr } %123, ptr %124, align 8
  %125 = load ptr, ptr %10, align 8
  %126 = load ptr, ptr %5, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 2176, ptr %126)
  %128 = load i32, ptr %16, align 4
  %129 = getelementptr ptr, ptr %126, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 5
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr, ptr }, ptr %131, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %134 = call i32 %133(ptr %125) #16
  %135 = alloca i32, align 4
  store i32 %134, ptr %135, align 4
  %136 = load ptr, ptr %113, align 8
  %137 = insertvalue { ptr } undef, ptr %136, 0
  %138 = load ptr, ptr %124, align 8
  %139 = insertvalue { ptr } undef, ptr %138, 0
  %140 = load i32, ptr %135, align 4
  %141 = load ptr, ptr %102, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = load ptr, ptr %101, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %143, 1
  %145 = load ptr, ptr %100, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %145, 2
  %147 = load i32, ptr %99, align 4
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, i32 %147, 3
  %149 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %150 = getelementptr [2 x ptr], ptr %149, i32 0, i32 1
  store ptr null, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 8, ptr %149)
  store ptr @buffer_typ, ptr %149, align 8
  %152 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %153 = getelementptr [2 x ptr], ptr %152, i32 0, i32 1
  store ptr null, ptr %153, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 8, ptr %152)
  store ptr @buffer_typ, ptr %152, align 8
  %155 = alloca [3 x ptr], align 8
  %156 = getelementptr [3 x ptr], ptr %155, i32 0, i32 0
  store ptr %149, ptr %156, align 8
  %157 = getelementptr [3 x ptr], ptr %155, i32 0, i32 1
  store ptr %152, ptr %157, align 8
  %158 = getelementptr [3 x ptr], ptr %155, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %158, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 9, ptr %155)
  %160 = call ptr @llvm.invariant.start.p0(i64 136, ptr %141)
  %161 = getelementptr ptr, ptr %141, i32 %147
  %162 = getelementptr ptr, ptr %161, i32 8
  %163 = load ptr, ptr %162, align 8
  %164 = alloca { ptr, ptr, ptr }, align 8
  %165 = getelementptr { ptr, ptr, ptr }, ptr %164, i32 0, i32 0
  store ptr @buffer_typ, ptr %165, align 8
  %166 = getelementptr { ptr, ptr, ptr }, ptr %164, i32 0, i32 1
  store ptr @buffer_typ, ptr %166, align 8
  %167 = getelementptr { ptr, ptr, ptr }, ptr %164, i32 0, i32 2
  store ptr @i32_typ, ptr %167, align 8
  %168 = call ptr @behavior_wrapper(ptr %163, { ptr, ptr, ptr, i32 } %148, ptr %164)
  call void %168({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr %155, { ptr } %137, { ptr } %139, i32 %140) #17
  %169 = alloca { ptr, ptr, ptr, i32 }, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 0
  %171 = load ptr, ptr %102, align 8
  store ptr %171, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 1
  %173 = load ptr, ptr %101, align 8
  store ptr %173, ptr %172, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 2
  %175 = load ptr, ptr %100, align 8
  store ptr %175, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 3
  %177 = load i32, ptr %99, align 4
  store i32 %177, ptr %176, align 4
  call void @set_offset(ptr %169, ptr @Iterator)
  %178 = load ptr, ptr %170, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %178, 0
  %180 = load ptr, ptr %172, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %180, 1
  %182 = load ptr, ptr %174, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %182, 2
  %184 = load i32, ptr %176, align 4
  %185 = insertvalue { ptr, ptr, ptr, i32 } %183, i32 %184, 3
  ret { ptr, ptr, ptr, i32 } %185
}

define { i64, i64 } @_data_size_CuckooMapIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %29
  %37 = select i1 %36, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %29
  %38 = urem i64 %35, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %41
  %43 = add i64 %35, %42
  %44 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %37
  %45 = select i1 %44, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %37
  %46 = urem i64 %43, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %47 = icmp eq i64 %46, 0
  %48 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %46
  %49 = select i1 %47, i64 0, i64 %48
  %50 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %49
  %51 = add i64 %43, %50
  %52 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %45
  %53 = select i1 %52, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %45
  %54 = urem i64 %51, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %55 = icmp eq i64 %54, 0
  %56 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %54
  %57 = select i1 %55, i64 0, i64 %56
  %58 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %57
  %59 = add i64 %51, %58
  %60 = urem i64 %59, %53
  %61 = icmp eq i64 %60, 0
  %62 = sub i64 %53, %60
  %63 = select i1 %61, i64 0, i64 %62
  %64 = add i64 %59, %63
  %65 = insertvalue { i64, i64 } undef, i64 %64, 0
  %66 = insertvalue { i64, i64 } %65, i64 %53, 1
  ret { i64, i64 } %66
}

define ptr @CuckooMapIterator_field_CuckooMapIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @CuckooMapIterator_field_CuckooMapIterator_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @CuckooMapIterator_field_CuckooMapIterator_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @CuckooMapIterator_B_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_lenPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @buffer_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @buffer_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 11, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [17 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @CuckooMapIterator_B_next_from_table_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @buffer_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 12, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [17 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @CuckooMapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 13, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [17 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @CuckooMapIterator_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_lenPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, { ptr } %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @CuckooMapIterator)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 136, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 3
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %21, align 8
  %32 = insertvalue { ptr } undef, ptr %31, 0
  call void %30(ptr %22, { ptr } %32) #15
  %33 = alloca ptr, align 8
  store { ptr } %4, ptr %33, align 8
  %34 = load ptr, ptr %13, align 8
  %35 = load ptr, ptr %8, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 136, ptr %35)
  %37 = load i32, ptr %19, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 4
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %33, align 8
  %44 = insertvalue { ptr } undef, ptr %43, 0
  call void %42(ptr %34, { ptr } %44) #15
  %45 = alloca i32, align 4
  store i32 %5, ptr %45, align 4
  %46 = load ptr, ptr %13, align 8
  %47 = load ptr, ptr %8, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 136, ptr %47)
  %49 = load i32, ptr %19, align 4
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = getelementptr ptr, ptr %50, i32 5
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = load i32, ptr %45, align 4
  call void %54(ptr %46, i32 %55) #15
  %56 = alloca i32, align 4
  store i32 0, ptr %56, align 4
  %57 = load ptr, ptr %13, align 8
  %58 = load ptr, ptr %8, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 136, ptr %58)
  %60 = load i32, ptr %19, align 4
  %61 = getelementptr ptr, ptr %58, i32 %60
  %62 = getelementptr ptr, ptr %61, i32 6
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr { ptr, ptr }, ptr %63, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = load i32, ptr %56, align 4
  call void %65(ptr %57, i32 %66) #15
  %67 = alloca i1, align 1
  store i1 false, ptr %67, align 1
  %68 = load ptr, ptr %13, align 8
  %69 = load ptr, ptr %8, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 136, ptr %69)
  %71 = load i32, ptr %19, align 4
  %72 = getelementptr ptr, ptr %69, i32 %71
  %73 = getelementptr ptr, ptr %72, i32 7
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr }, ptr %74, i32 0, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = load i1, ptr %67, align 1
  call void %76(ptr %68, i1 %77) #15
  ret void
}

define { ptr, i160 } @CuckooMapIterator_next_from_table_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i1, align 1
  %8 = alloca i32, align 4
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i1, align 1
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca [0 x ptr], align 8
  %17 = alloca {}, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = alloca [0 x i8], align 1
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem26 = alloca { ptr, i160 }, align 8
  %.reg2mem28 = alloca i32, align 4
  %.reg2mem30 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %23, align 8
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  store ptr %29, ptr %.reg2mem19, align 8
  %30 = load ptr, ptr %28, align 8
  %.reload25 = load ptr, ptr %.reg2mem19, align 8
  store ptr %30, ptr %.reload25, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  store ptr %35, ptr %.reg2mem12, align 8
  %36 = load i32, ptr %34, align 4
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  store i32 %36, ptr %.reload18, align 4
  call void @set_offset(ptr %24, ptr @CuckooMapIterator)
  %37 = alloca ptr, align 8
  store { ptr } %3, ptr %37, align 8
  br label %38

38:                                               ; preds = %120, %4
  %.reload24 = load ptr, ptr %.reg2mem19, align 8
  %39 = load ptr, ptr %.reload24, align 8
  %40 = load ptr, ptr %24, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 136, ptr %40)
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %42 = load i32, ptr %.reload17, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 6
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, ptr }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %39) #16
  store i32 %48, ptr %5, align 4
  %.reload23 = load ptr, ptr %.reg2mem19, align 8
  %49 = load ptr, ptr %.reload23, align 8
  %50 = load ptr, ptr %24, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 136, ptr %50)
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %52 = load i32, ptr %.reload16, align 4
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 5
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = call i32 %57(ptr %49) #16
  store i32 %58, ptr %6, align 4
  %59 = load i32, ptr %5, align 4
  %60 = load i32, ptr %6, align 4
  %61 = icmp slt i32 %59, %60
  store i1 %61, ptr %7, align 1
  %62 = load i1, ptr %7, align 1
  br i1 %62, label %63, label %116

63:                                               ; preds = %38
  %.reload22 = load ptr, ptr %.reg2mem19, align 8
  %64 = load ptr, ptr %.reload22, align 8
  %65 = load ptr, ptr %24, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 136, ptr %65)
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %67 = load i32, ptr %.reload15, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 6
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call i32 %72(ptr %64) #16
  store i32 %73, ptr %8, align 4
  %74 = load ptr, ptr %37, align 8
  %75 = load i32, ptr %8, align 4
  %76 = sext i32 %75 to i64
  %77 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %76
  %78 = getelementptr i8, ptr %74, i64 %77
  %79 = getelementptr { ptr, i160 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  store ptr %80, ptr %10, align 8
  %81 = getelementptr { ptr, i160 }, ptr %78, i32 0, i32 1
  %82 = load i160, ptr %81, align 4
  store i160 %82, ptr %9, align 4
  %.reload21 = load ptr, ptr %.reg2mem19, align 8
  %83 = load ptr, ptr %.reload21, align 8
  %84 = load ptr, ptr %24, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 136, ptr %84)
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %86 = load i32, ptr %.reload14, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 6
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = call i32 %91(ptr %83) #16
  store i32 %92, ptr %11, align 4
  store i32 1, ptr %12, align 4
  %93 = load i32, ptr %11, align 4
  %94 = load i32, ptr %12, align 4
  %95 = add i32 %93, %94
  store i32 %95, ptr %13, align 4
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  %96 = load ptr, ptr %.reload20, align 8
  %97 = load ptr, ptr %24, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 136, ptr %97)
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %99 = load i32, ptr %.reload13, align 4
  %100 = getelementptr ptr, ptr %97, i32 %99
  %101 = getelementptr ptr, ptr %100, i32 6
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = load i32, ptr %13, align 4
  call void %104(ptr %96, i32 %105) #15
  %106 = load ptr, ptr %10, align 8
  %107 = ptrtoint ptr %106 to i64
  %108 = icmp eq i64 %107, ptrtoint (ptr @nil_typ to i64)
  %109 = icmp eq i64 %107, 0
  %110 = or i1 %108, %109
  %111 = icmp eq i1 %110, false
  store i1 %111, ptr %14, align 1
  %112 = load i1, ptr %14, align 1
  %113 = zext i1 %112 to i32
  store i32 %113, ptr %.reg2mem10, align 4
  %114 = xor i1 %112, true
  %115 = zext i1 %114 to i32
  store i32 %115, ptr %.reg2mem8, align 4
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem28, align 4
  store i32 %.reload11, ptr %.reg2mem30, align 4
  br label %117

116:                                              ; preds = %38
  store i32 0, ptr %.reg2mem28, align 4
  store i32 2, ptr %.reg2mem30, align 4
  br label %117

117:                                              ; preds = %116, %63
  %.reload31 = load i32, ptr %.reg2mem30, align 4
  %.reload29 = load i32, ptr %.reg2mem28, align 4
  store i32 %.reload31, ptr %.reg2mem5, align 4
  store i32 %.reload29, ptr %.reg2mem3, align 4
  br label %118

118:                                              ; preds = %117
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %119 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %119, label %120, label %121

120:                                              ; preds = %118
  br label %38

121:                                              ; preds = %118
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %122 = zext i32 %.reload6 to i64
  %123 = trunc i64 %122 to i32
  switch i32 %123, label %166 [
    i32 1, label %124
  ]

124:                                              ; preds = %121
  %125 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 0
  %126 = load ptr, ptr %10, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 1
  %128 = load i160, ptr %9, align 4
  store i160 %128, ptr %127, align 4
  call void @set_offset(ptr %15, ptr @Entry)
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %133, 1
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %136, 2
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %139 = load i32, ptr %138, align 4
  %140 = insertvalue { ptr, ptr, ptr, i32 } %137, i32 %139, 3
  %141 = call ptr @llvm.invariant.start.p0(i64 0, ptr %16)
  %142 = call ptr @llvm.invariant.start.p0(i64 120, ptr %130)
  %143 = getelementptr ptr, ptr %130, i32 %139
  %144 = getelementptr ptr, ptr %143, i32 9
  %145 = load ptr, ptr %144, align 8
  %146 = call ptr @behavior_wrapper(ptr %145, { ptr, ptr, ptr, i32 } %140, ptr %17)
  %147 = call { ptr, ptr, ptr, i32 } %146({ ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %140, ptr %16) #17
  store { ptr, ptr, ptr, i32 } %147, ptr %18, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %159 = load i32, ptr %157, align 4
  store i32 %159, ptr %158, align 4
  call void @set_offset(ptr %19, ptr @Pair)
  %160 = getelementptr { ptr, i160 }, ptr %19, i32 0, i32 0
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, i160 } undef, ptr %161, 0
  %163 = getelementptr { ptr, i160 }, ptr %19, i32 0, i32 1
  %164 = load i160, ptr %163, align 4
  %165 = insertvalue { ptr, i160 } %162, i160 %164, 1
  store { ptr, i160 } %165, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem26, align 8
  br label %172

166:                                              ; preds = %121
  %167 = load [0 x i8], ptr %20, align 1
  store [0 x i8] %167, ptr %21, align 1
  store ptr @nil_typ, ptr %22, align 8
  %168 = load ptr, ptr %22, align 8
  %169 = insertvalue { ptr, i160 } undef, ptr %168, 0
  %170 = load i160, ptr %21, align 4
  %171 = insertvalue { ptr, i160 } %169, i160 %170, 1
  store { ptr, i160 } %171, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem26, align 8
  br label %172

172:                                              ; preds = %166, %124
  %.reload27 = load { ptr, i160 }, ptr %.reg2mem26, align 8
  ret { ptr, i160 } %.reload27
}

define { ptr, i160 } @CuckooMapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca ptr, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca i32, align 4
  %11 = alloca i1, align 1
  %12 = alloca ptr, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca { ptr, i160 }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem33 = alloca ptr, align 8
  %.reg2mem37 = alloca { ptr, i160 }, align 8
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca { ptr, i160 }, align 8
  %.reg2mem43 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  store ptr %19, ptr %.reg2mem33, align 8
  %20 = load ptr, ptr %18, align 8
  %.reload36 = load ptr, ptr %.reg2mem33, align 8
  store ptr %20, ptr %.reload36, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  store ptr %22, ptr %.reg2mem24, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload32 = load ptr, ptr %.reg2mem24, align 8
  store ptr %23, ptr %.reload32, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  store ptr %25, ptr %.reg2mem20, align 8
  %26 = load ptr, ptr %24, align 8
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  store ptr %26, ptr %.reload23, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr %28, ptr %.reg2mem11, align 8
  %29 = load i32, ptr %27, align 4
  %.reload19 = load ptr, ptr %.reg2mem11, align 8
  store i32 %29, ptr %.reload19, align 4
  call void @set_offset(ptr %17, ptr @CuckooMapIterator)
  %30 = alloca i1, align 1
  store i1 false, ptr %30, align 1
  %.reload31 = load ptr, ptr %.reg2mem24, align 8
  %31 = load ptr, ptr %.reload31, align 8
  %32 = load ptr, ptr %17, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 136, ptr %32)
  %.reload18 = load ptr, ptr %.reg2mem11, align 8
  %34 = load i32, ptr %.reload18, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 7
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call i1 %39(ptr %31) #16
  %41 = alloca i1, align 1
  store i1 %40, ptr %41, align 1
  %42 = load i1, ptr %30, align 1
  %43 = load i1, ptr %41, align 1
  %44 = icmp eq i1 %42, %43
  %45 = alloca i1, align 1
  store i1 %44, ptr %45, align 1
  %46 = load i1, ptr %45, align 1
  br i1 %46, label %47, label %123

47:                                               ; preds = %3
  %.reload30 = load ptr, ptr %.reg2mem24, align 8
  %48 = load ptr, ptr %.reload30, align 8
  %49 = load ptr, ptr %17, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 136, ptr %49)
  %.reload17 = load ptr, ptr %.reg2mem11, align 8
  %51 = load i32, ptr %.reload17, align 4
  %52 = getelementptr ptr, ptr %49, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 3
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = call { ptr } %56(ptr %48) #16
  store { ptr } %57, ptr %4, align 8
  %58 = load ptr, ptr %4, align 8
  %59 = insertvalue { ptr } undef, ptr %58, 0
  %.reload35 = load ptr, ptr %.reg2mem33, align 8
  %60 = load ptr, ptr %.reload35, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %.reload29 = load ptr, ptr %.reg2mem24, align 8
  %62 = load ptr, ptr %.reload29, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %64 = load ptr, ptr %.reload22, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %.reload16 = load ptr, ptr %.reg2mem11, align 8
  %66 = load i32, ptr %.reload16, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %69 = getelementptr [2 x ptr], ptr %68, i32 0, i32 1
  store ptr null, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 8, ptr %68)
  store ptr @buffer_typ, ptr %68, align 8
  %71 = getelementptr [1 x ptr], ptr %5, i32 0, i32 0
  store ptr %68, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 1, ptr %5)
  %73 = call ptr @llvm.invariant.start.p0(i64 136, ptr %60)
  %74 = getelementptr ptr, ptr %60, i32 %66
  %75 = getelementptr ptr, ptr %74, i32 9
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  store ptr @buffer_typ, ptr %77, align 8
  %78 = call ptr @behavior_wrapper(ptr %76, { ptr, ptr, ptr, i32 } %67, ptr %6)
  %79 = call { ptr, i160 } %78({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %5, { ptr } %59) #17
  store { ptr, i160 } %79, ptr %7, align 8
  %80 = load ptr, ptr %7, align 8
  %81 = ptrtoint ptr %80 to i64
  %82 = icmp eq i64 %81, ptrtoint (ptr @nil_typ to i64)
  %83 = icmp eq i64 %81, 0
  %84 = or i1 %82, %83
  %85 = icmp eq i1 %84, false
  store i1 %85, ptr %8, align 1
  %86 = load i1, ptr %8, align 1
  %87 = xor i1 %86, true
  %88 = zext i1 %87 to i32
  store i32 %88, ptr %.reg2mem9, align 4
  br i1 %86, label %89, label %100

89:                                               ; preds = %47
  %90 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %91 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %94 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %95 = load i160, ptr %93, align 4
  store i160 %95, ptr %94, align 4
  call void @set_offset(ptr %9, ptr @Pair)
  %96 = load ptr, ptr %91, align 8
  %97 = insertvalue { ptr, i160 } undef, ptr %96, 0
  %98 = load i160, ptr %94, align 4
  %99 = insertvalue { ptr, i160 } %97, i160 %98, 1
  store { ptr, i160 } %99, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem43, align 8
  br label %121

100:                                              ; preds = %47
  store i32 0, ptr %10, align 4
  %.reload28 = load ptr, ptr %.reg2mem24, align 8
  %101 = load ptr, ptr %.reload28, align 8
  %102 = load ptr, ptr %17, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 136, ptr %102)
  %.reload15 = load ptr, ptr %.reg2mem11, align 8
  %104 = load i32, ptr %.reload15, align 4
  %105 = getelementptr ptr, ptr %102, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 6
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load i32, ptr %10, align 4
  call void %109(ptr %101, i32 %110) #15
  store i1 true, ptr %11, align 1
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %111 = load ptr, ptr %.reload27, align 8
  %112 = load ptr, ptr %17, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 136, ptr %112)
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %114 = load i32, ptr %.reload14, align 4
  %115 = getelementptr ptr, ptr %112, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 7
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr { ptr, ptr }, ptr %117, i32 0, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = load i1, ptr %11, align 1
  call void %119(ptr %111, i1 %120) #15
  store { ptr, i160 } poison, ptr %.reg2mem43, align 8
  br label %121

121:                                              ; preds = %100, %89
  %.reload44 = load { ptr, i160 }, ptr %.reg2mem43, align 8
  store { ptr, i160 } %.reload44, ptr %.reg2mem5, align 8
  br label %122

122:                                              ; preds = %121
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem39, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem41, align 8
  br label %124

123:                                              ; preds = %3
  store i32 1, ptr %.reg2mem39, align 4
  store { ptr, i160 } poison, ptr %.reg2mem41, align 8
  br label %124

124:                                              ; preds = %123, %122
  %.reload42 = load { ptr, i160 }, ptr %.reg2mem41, align 8
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store { ptr, i160 } %.reload42, ptr %.reg2mem3, align 8
  store i32 %.reload40, ptr %.reg2mem1, align 4
  br label %125

125:                                              ; preds = %124
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %126 = zext i32 %.reload2 to i64
  %127 = trunc i64 %126 to i32
  switch i32 %127, label %129 [
    i32 0, label %128
  ]

128:                                              ; preds = %125
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem37, align 8
  br label %168

129:                                              ; preds = %125
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  %130 = load ptr, ptr %.reload26, align 8
  %131 = load ptr, ptr %17, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 136, ptr %131)
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %133 = load i32, ptr %.reload13, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 4
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr } %138(ptr %130) #16
  store { ptr } %139, ptr %12, align 8
  %140 = load ptr, ptr %12, align 8
  %141 = insertvalue { ptr } undef, ptr %140, 0
  %.reload34 = load ptr, ptr %.reg2mem33, align 8
  %142 = load ptr, ptr %.reload34, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %144 = load ptr, ptr %.reload25, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %144, 1
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %146 = load ptr, ptr %.reload21, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %146, 2
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %148 = load i32, ptr %.reload12, align 4
  %149 = insertvalue { ptr, ptr, ptr, i32 } %147, i32 %148, 3
  %150 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %151 = getelementptr [2 x ptr], ptr %150, i32 0, i32 1
  store ptr null, ptr %151, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 8, ptr %150)
  store ptr @buffer_typ, ptr %150, align 8
  %153 = getelementptr [1 x ptr], ptr %13, i32 0, i32 0
  store ptr %150, ptr %153, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 1, ptr %13)
  %155 = call ptr @llvm.invariant.start.p0(i64 136, ptr %142)
  %156 = getelementptr ptr, ptr %142, i32 %148
  %157 = getelementptr ptr, ptr %156, i32 9
  %158 = load ptr, ptr %157, align 8
  %159 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  store ptr @buffer_typ, ptr %159, align 8
  %160 = call ptr @behavior_wrapper(ptr %158, { ptr, ptr, ptr, i32 } %149, ptr %14)
  %161 = call { ptr, i160 } %160({ ptr, ptr, ptr, i32 } %149, { ptr, ptr, ptr, i32 } %149, ptr %13, { ptr } %141) #17
  store { ptr, i160 } %161, ptr %15, align 8
  %162 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 0
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, i160 } undef, ptr %163, 0
  %165 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 1
  %166 = load i160, ptr %165, align 4
  %167 = insertvalue { ptr, i160 } %164, i160 %166, 1
  store { ptr, i160 } %167, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem37, align 8
  br label %168

168:                                              ; preds = %129, %128
  %.reload38 = load { ptr, i160 }, ptr %.reg2mem37, align 8
  ret { ptr, i160 } %.reload38
}

define i1 @CuckooMapIterator_getter_on_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %35
  %37 = add i64 %31, %36
  %38 = urem i64 %37, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 %37, %41
  %43 = getelementptr i8, ptr %0, i64 %42
  %44 = load i1, ptr %43, align 1
  ret i1 %44
}

define void @CuckooMapIterator_setter_on_second(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %36
  %38 = add i64 %32, %37
  %39 = urem i64 %38, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %40 = icmp eq i64 %39, 0
  %41 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %39
  %42 = select i1 %40, i64 0, i64 %41
  %43 = add i64 %38, %42
  %44 = getelementptr i8, ptr %0, i64 %43
  %45 = alloca i1, align 1
  store i1 %1, ptr %45, align 1
  %46 = load i1, ptr %45, align 1
  store i1 %46, ptr %44, align 1
  ret void
}

define i32 @CuckooMapIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = getelementptr i8, ptr %0, i64 %36
  %38 = load i32, ptr %37, align 4
  ret i32 %38
}

define void @CuckooMapIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 %32, %36
  %38 = getelementptr i8, ptr %0, i64 %37
  %39 = alloca i32, align 4
  store i32 %1, ptr %39, align 4
  %40 = load i32, ptr %39, align 4
  store i32 %40, ptr %38, align 4
  ret void
}

define i32 @CuckooMapIterator_getter_table_len(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %25, %29
  %31 = getelementptr i8, ptr %0, i64 %30
  %32 = load i32, ptr %31, align 4
  ret i32 %32
}

define void @CuckooMapIterator_setter_table_len(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %26, %30
  %32 = getelementptr i8, ptr %0, i64 %31
  %33 = alloca i32, align 4
  store i32 %1, ptr %33, align 4
  %34 = load i32, ptr %33, align 4
  store i32 %34, ptr %32, align 4
  ret void
}

define { ptr } @CuckooMapIterator_getter_map_table2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr } undef, ptr %27, 0
  ret { ptr } %28
}

define void @CuckooMapIterator_setter_map_table2(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca ptr, align 8
  store { ptr } %1, ptr %27, align 8
  %28 = getelementptr { ptr }, ptr %26, i32 0, i32 0
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  ret void
}

define { ptr } @CuckooMapIterator_getter_map_table1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @CuckooMapIterator_setter_map_table1(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { ptr } @CuckooMap_getter_eq(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %35
  %37 = add i64 %31, %36
  %38 = urem i64 %37, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %41
  %43 = add i64 %37, %42
  %44 = urem i64 %43, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %45 = icmp eq i64 %44, 0
  %46 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %44
  %47 = select i1 %45, i64 0, i64 %46
  %48 = add i64 %43, %47
  %49 = getelementptr i8, ptr %0, i64 %48
  %50 = getelementptr { ptr }, ptr %49, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr } undef, ptr %51, 0
  ret { ptr } %52
}

define void @CuckooMap_setter_eq(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %36
  %38 = add i64 %32, %37
  %39 = urem i64 %38, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %40 = icmp eq i64 %39, 0
  %41 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %39
  %42 = select i1 %40, i64 0, i64 %41
  %43 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %42
  %44 = add i64 %38, %43
  %45 = urem i64 %44, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %46 = icmp eq i64 %45, 0
  %47 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %45
  %48 = select i1 %46, i64 0, i64 %47
  %49 = add i64 %44, %48
  %50 = getelementptr i8, ptr %0, i64 %49
  %51 = alloca ptr, align 8
  store { ptr } %1, ptr %51, align 8
  %52 = getelementptr { ptr }, ptr %50, i32 0, i32 0
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  ret void
}

define { ptr } @CuckooMap_getter_hasher(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %35
  %37 = add i64 %31, %36
  %38 = urem i64 %37, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 %37, %41
  %43 = getelementptr i8, ptr %0, i64 %42
  %44 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr } undef, ptr %45, 0
  ret { ptr } %46
}

define void @CuckooMap_setter_hasher(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %36
  %38 = add i64 %32, %37
  %39 = urem i64 %38, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %40 = icmp eq i64 %39, 0
  %41 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %39
  %42 = select i1 %40, i64 0, i64 %41
  %43 = add i64 %38, %42
  %44 = getelementptr i8, ptr %0, i64 %43
  %45 = alloca ptr, align 8
  store { ptr } %1, ptr %45, align 8
  %46 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  ret void
}

define i32 @CuckooMap_getter_size(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = getelementptr i8, ptr %0, i64 %36
  %38 = load i32, ptr %37, align 4
  ret i32 %38
}

define void @CuckooMap_setter_size(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 %32, %36
  %38 = getelementptr i8, ptr %0, i64 %37
  %39 = alloca i32, align 4
  store i32 %1, ptr %39, align 4
  %40 = load i32, ptr %39, align 4
  store i32 %40, ptr %38, align 4
  ret void
}

define i32 @CuckooMap_getter_table_len(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %25, %29
  %31 = getelementptr i8, ptr %0, i64 %30
  %32 = load i32, ptr %31, align 4
  ret i32 %32
}

define void @CuckooMap_setter_table_len(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %26, %30
  %32 = getelementptr i8, ptr %0, i64 %31
  %33 = alloca i32, align 4
  store i32 %1, ptr %33, align 4
  %34 = load i32, ptr %33, align 4
  store i32 %34, ptr %32, align 4
  ret void
}

define { ptr } @CuckooMap_getter_table2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr } undef, ptr %27, 0
  ret { ptr } %28
}

define void @CuckooMap_setter_table2(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca ptr, align 8
  store { ptr } %1, ptr %27, align 8
  %28 = getelementptr { ptr }, ptr %26, i32 0, i32 0
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  ret void
}

define { ptr } @CuckooMap_getter_table1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @CuckooMap_setter_table1(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { i64, i64 } @_data_size_KeyNotFound(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @KeyNotFound_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 8, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [26 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @KeyNotFound_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [26 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @KeyNotFound_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 1
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 2
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 0
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 1
  %16 = load i64, ptr %12, align 4
  %17 = load i64, ptr %13, align 4
  %18 = load ptr, ptr %14, align 8
  %19 = load ptr, ptr %15, align 8
  %20 = load i64, ptr @String, align 4
  %21 = call i1 @subtype_test_wrapper(ptr %18, i64 %17, i64 %16, i64 %20, i64 ptrtoint (ptr @String to i64), ptr %19)
  store i1 %21, ptr %3, align 1
  store i32 10, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [26 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @KeyNotFound_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 11, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [26 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @KeyNotFound_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [26 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define { ptr, ptr, ptr, i32 } @KeyNotFound_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @KeyNotFound_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @KeyNotFound_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @KeyNotFound_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define i32 @KeyNotFound_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @KeyNotFound_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_Map(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define { i64, i64 } @_data_size_HashMap(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Map_field_Map_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Map_field_Map_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @Map_field_Map_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @Map_B_size_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 20, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [60 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Map_B_get_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [60 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Map_B__set_index_keyK_valueV({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @any_typ, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @any_typ to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 22, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [60 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @Map_B_remove_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [60 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Map_B_clear_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 24, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [60 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define { ptr, i160 } @Map__index_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca [0 x i8], align 1
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [0 x ptr], align 8
  %9 = alloca {}, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca [1 x ptr], align 8
  %18 = alloca i32, align 4
  %19 = alloca ptr, align 8
  %20 = alloca ptr, align 8
  %21 = alloca ptr, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca [3 x ptr], align 8
  %25 = alloca { ptr, ptr, ptr }, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca [2 x ptr], align 8
  %28 = alloca { ptr, ptr }, align 8
  %29 = alloca { ptr, i160 }, align 8
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  %32 = alloca i1, align 1
  %33 = alloca i160, align 8
  %34 = alloca ptr, align 8
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem12 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %37, align 8
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  store ptr %43, ptr %.reg2mem8, align 8
  %44 = load ptr, ptr %42, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  store ptr %44, ptr %.reload11, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr %49, ptr %.reg2mem3, align 8
  %50 = load i32, ptr %48, align 4
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  store i32 %50, ptr %.reload7, align 4
  call void @set_offset(ptr %38, ptr @Map)
  %51 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %51, align 8
  %52 = alloca i160, align 8
  %53 = alloca ptr, align 8
  %54 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  store ptr %55, ptr %53, align 8
  %56 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 1
  %57 = load i160, ptr %56, align 4
  store i160 %57, ptr %52, align 4
  %58 = alloca i160, align 8
  %59 = alloca ptr, align 8
  %60 = load ptr, ptr %53, align 8
  store ptr %60, ptr %59, align 8
  %61 = load i160, ptr %52, align 4
  store i160 %61, ptr %58, align 4
  %62 = load ptr, ptr %59, align 8
  %63 = insertvalue { ptr, i160 } undef, ptr %62, 0
  %64 = load i160, ptr %58, align 4
  %65 = insertvalue { ptr, i160 } %63, i160 %64, 1
  %66 = load ptr, ptr %40, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %68 = load ptr, ptr %.reload10, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 1
  %70 = load ptr, ptr %46, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 2
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %72 = load i32, ptr %.reload6, align 4
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %72, 3
  %74 = load ptr, ptr %38, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 480, ptr %74)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %76 = load i32, ptr %.reload5, align 4
  %77 = getelementptr ptr, ptr %74, i32 %76
  %78 = load ptr, ptr %77, align 8
  %79 = call ptr @typegetter_wrapper(ptr %78, ptr %68)
  %80 = alloca [1 x ptr], align 8
  %81 = getelementptr [1 x ptr], ptr %80, i32 0, i32 0
  store ptr %79, ptr %81, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 1, ptr %80)
  %83 = call ptr @llvm.invariant.start.p0(i64 480, ptr %66)
  %84 = getelementptr ptr, ptr %66, i32 %72
  %85 = getelementptr ptr, ptr %84, i32 4
  %86 = load ptr, ptr %85, align 8
  %87 = alloca { ptr }, align 8
  %88 = getelementptr { ptr }, ptr %87, i32 0, i32 0
  store ptr %62, ptr %88, align 8
  %89 = call ptr @behavior_wrapper(ptr %86, { ptr, ptr, ptr, i32 } %73, ptr %87)
  %90 = call { ptr, i160 } %89({ ptr, ptr, ptr, i32 } %73, { ptr, ptr, ptr, i32 } %73, ptr %80, { ptr, i160 } %65) #17
  %91 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %90, ptr %91, align 8
  %92 = load ptr, ptr %91, align 8
  %93 = ptrtoint ptr %92 to i64
  %94 = icmp eq i64 %93, ptrtoint (ptr @nil_typ to i64)
  %95 = icmp eq i64 %93, 0
  %96 = or i1 %94, %95
  %97 = alloca i1, align 1
  store i1 %96, ptr %97, align 1
  %98 = load i1, ptr %97, align 1
  br i1 %98, label %99, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %216

99:                                               ; preds = %4
  %100 = getelementptr { ptr, i160 }, ptr %91, i32 0, i32 1
  %101 = load [0 x i8], ptr %100, align 1
  store [0 x i8] %101, ptr %5, align 1
  store ptr @KeyNotFound, ptr %6, align 8
  %102 = load ptr, ptr %6, align 8
  %103 = getelementptr ptr, ptr %102, i32 6
  %104 = load ptr, ptr %103, align 8
  %105 = call { i64, i64 } @size_wrapper(ptr %104, ptr %6)
  %106 = extractvalue { i64, i64 } %105, 0
  %107 = call ptr @bump_malloc(i64 %106)
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr @KeyNotFound, ptr %7, align 8
  store ptr %107, ptr %108, align 8
  store i32 10, ptr %109, align 4
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = load ptr, ptr %108, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %113, 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %116, 2
  %118 = load i32, ptr %109, align 4
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %118, 3
  %120 = call ptr @llvm.invariant.start.p0(i64 0, ptr %8)
  %121 = call ptr @llvm.invariant.start.p0(i64 208, ptr %111)
  %122 = getelementptr ptr, ptr %111, i32 %118
  %123 = getelementptr ptr, ptr %122, i32 4
  %124 = load ptr, ptr %123, align 8
  %125 = call ptr @behavior_wrapper(ptr %124, { ptr, ptr, ptr, i32 } %119, ptr %9)
  call void %125({ ptr, ptr, ptr, i32 } %119, { ptr, ptr, ptr, i32 } %119, ptr %8) #17
  store i32 16, ptr %10, align 4
  store i32 9, ptr %11, align 4
  %126 = load i32, ptr %11, align 4
  %127 = sext i32 %126 to i64
  %128 = mul i64 %127, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %129 = call ptr @bump_malloc(i64 %128)
  store ptr %129, ptr %12, align 8
  %130 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  store ptr %131, ptr %13, align 8
  store i32 0, ptr %14, align 4
  %132 = load ptr, ptr %13, align 8
  %133 = load i32, ptr %14, align 4
  %134 = sext i32 %133 to i64
  %135 = mul i64 ptrtoint (ptr getelementptr ([8 x i8], ptr null, i32 1) to i64), %134
  %136 = getelementptr i8, ptr %132, i64 %135
  %137 = load <8 x i8>, ptr @xzxzd_mapmini, align 8
  store <8 x i8> %137, ptr %136, align 8
  store i32 8, ptr %15, align 4
  store i32 9, ptr %16, align 4
  store ptr @String, ptr %17, align 8
  %138 = load ptr, ptr %17, align 8
  %139 = getelementptr ptr, ptr %138, i32 6
  %140 = load ptr, ptr %139, align 8
  %141 = call { i64, i64 } @size_wrapper(ptr %140, ptr %17)
  %142 = extractvalue { i64, i64 } %141, 0
  %143 = call ptr @bump_malloc(i64 %142)
  store ptr @String, ptr %21, align 8
  store ptr %143, ptr %20, align 8
  store i32 10, ptr %18, align 4
  store i32 8, ptr %22, align 4
  store i32 9, ptr %23, align 4
  %144 = load ptr, ptr %13, align 8
  %145 = insertvalue { ptr } undef, ptr %144, 0
  %146 = load i32, ptr %22, align 4
  %147 = load i32, ptr %23, align 4
  %148 = load ptr, ptr %21, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %148, 0
  %150 = load ptr, ptr %20, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %149, ptr %150, 1
  %152 = load ptr, ptr %19, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %152, 2
  %154 = load i32, ptr %18, align 4
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, i32 %154, 3
  %156 = getelementptr [3 x ptr], ptr %24, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %156, align 8
  %157 = getelementptr [3 x ptr], ptr %24, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %157, align 8
  %158 = getelementptr [3 x ptr], ptr %24, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %158, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 9, ptr %24)
  %160 = call ptr @llvm.invariant.start.p0(i64 632, ptr %148)
  %161 = getelementptr ptr, ptr %148, i32 %154
  %162 = getelementptr ptr, ptr %161, i32 6
  %163 = load ptr, ptr %162, align 8
  %164 = getelementptr { ptr, ptr, ptr }, ptr %25, i32 0, i32 0
  store ptr @buffer_typ, ptr %164, align 8
  %165 = getelementptr { ptr, ptr, ptr }, ptr %25, i32 0, i32 1
  store ptr @i32_typ, ptr %165, align 8
  %166 = getelementptr { ptr, ptr, ptr }, ptr %25, i32 0, i32 2
  store ptr @i32_typ, ptr %166, align 8
  %167 = call ptr @behavior_wrapper(ptr %163, { ptr, ptr, ptr, i32 } %155, ptr %25)
  call void %167({ ptr, ptr, ptr, i32 } %155, { ptr, ptr, ptr, i32 } %155, ptr %24, { ptr } %145, i32 %146, i32 %147) #17
  %168 = load i32, ptr %10, align 4
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %170 = load ptr, ptr %21, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %172 = load ptr, ptr %20, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %174 = load ptr, ptr %19, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %176 = load i32, ptr %18, align 4
  store i32 %176, ptr %175, align 4
  call void @set_offset(ptr %26, ptr @String)
  %177 = load ptr, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %177, 0
  %179 = load ptr, ptr %171, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %179, 1
  %181 = load ptr, ptr %173, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %180, ptr %181, 2
  %183 = load i32, ptr %175, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, i32 %183, 3
  %185 = load ptr, ptr %110, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %185, 0
  %187 = load ptr, ptr %108, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, ptr %187, 1
  %189 = load ptr, ptr %115, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %189, 2
  %191 = load i32, ptr %109, align 4
  %192 = insertvalue { ptr, ptr, ptr, i32 } %190, i32 %191, 3
  %193 = getelementptr [2 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %193, align 8
  %194 = getelementptr [2 x ptr], ptr %27, i32 0, i32 1
  store ptr @_parameterization_String, ptr %194, align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 4, ptr %27)
  %196 = call ptr @llvm.invariant.start.p0(i64 208, ptr %185)
  %197 = getelementptr ptr, ptr %185, i32 %191
  %198 = getelementptr ptr, ptr %197, i32 5
  %199 = load ptr, ptr %198, align 8
  %200 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  store ptr @i32_typ, ptr %200, align 8
  %201 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  store ptr %177, ptr %201, align 8
  %202 = call ptr @behavior_wrapper(ptr %199, { ptr, ptr, ptr, i32 } %192, ptr %28)
  call void %202({ ptr, ptr, ptr, i32 } %192, { ptr, ptr, ptr, i32 } %192, ptr %27, i32 %168, { ptr, ptr, ptr, i32 } %184) #17
  %203 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %204 = load ptr, ptr %203, align 8
  %205 = insertvalue { ptr, i160 } undef, ptr %204, 0
  %206 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %207 = load i160, ptr %206, align 4
  %208 = insertvalue { ptr, i160 } %205, i160 %207, 1
  %209 = call ptr @get_current_coroutine()
  %210 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %209, i32 0, i32 4
  store { ptr, i160 } %208, ptr %210, align 8
  call void @coroutine_yield(ptr %209)
  %211 = load { ptr, i160 }, ptr %210, align 8
  store { ptr, i160 } %211, ptr %29, align 8
  %212 = load [0 x i8], ptr %5, align 1
  store [0 x i8] %212, ptr %30, align 1
  store ptr @nil_typ, ptr %31, align 8
  %213 = getelementptr { ptr, i160 }, ptr %91, i32 0, i32 0
  %214 = load ptr, ptr %31, align 8
  store ptr %214, ptr %213, align 8
  %215 = load i160, ptr %30, align 4
  store i160 %215, ptr %100, align 4
  br label %216

216:                                              ; preds = %._crit_edge, %99
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %217 = load ptr, ptr %.reload9, align 8
  %218 = load ptr, ptr %38, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 480, ptr %218)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %220 = load i32, ptr %.reload4, align 4
  %221 = getelementptr ptr, ptr %218, i32 %220
  %222 = getelementptr ptr, ptr %221, i32 1
  %223 = load ptr, ptr %222, align 8
  %224 = call ptr @typegetter_wrapper(ptr %223, ptr %217)
  %225 = load ptr, ptr %91, align 8
  %226 = ptrtoint ptr %225 to i64
  %227 = icmp eq i64 %226, ptrtoint (ptr @nil_typ to i64)
  %228 = icmp eq i64 %226, 0
  %229 = or i1 %227, %228
  %230 = icmp eq i1 %229, false
  store i1 %230, ptr %32, align 1
  %231 = load i1, ptr %32, align 1
  br i1 %231, label %232, label %243

232:                                              ; preds = %216
  %233 = getelementptr { ptr, i160 }, ptr %91, i32 0, i32 0
  %234 = load ptr, ptr %233, align 8
  store ptr %234, ptr %34, align 8
  %235 = getelementptr { ptr, i160 }, ptr %91, i32 0, i32 1
  %236 = load i160, ptr %235, align 4
  store i160 %236, ptr %33, align 4
  %237 = load ptr, ptr %34, align 8
  store ptr %237, ptr %36, align 8
  %238 = load i160, ptr %33, align 4
  store i160 %238, ptr %35, align 4
  %239 = load ptr, ptr %36, align 8
  %240 = insertvalue { ptr, i160 } undef, ptr %239, 0
  %241 = load i160, ptr %35, align 4
  %242 = insertvalue { ptr, i160 } %240, i160 %241, 1
  store { ptr, i160 } %242, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem12, align 8
  br label %244

243:                                              ; preds = %216
  store { ptr, i160 } poison, ptr %.reg2mem12, align 8
  br label %244

244:                                              ; preds = %243, %232
  %.reload13 = load { ptr, i160 }, ptr %.reg2mem12, align 8
  store { ptr, i160 } %.reload13, ptr %.reg2mem, align 8
  br label %245

245:                                              ; preds = %244
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define ptr @Map_B__index_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [60 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Map_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 26, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [60 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Map_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [60 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Map_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Pair, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Pair to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 28, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [60 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Map_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 29, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [60 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Map_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 30, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [60 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Map_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 31, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [60 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Map_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 32, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [60 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Map_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 33, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [60 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Map_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 34, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [60 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Map_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 35, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [60 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Map_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 36, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [60 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @HashMap_field_HashMap_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @HashMap_field_HashMap_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @HashMap_field_HashMap_4(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @HashMap_B_size_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 20, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [120 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @HashMap_B_get_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [120 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @HashMap_B__set_index_keyK_valueV({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @any_typ, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @any_typ to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 22, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [120 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @HashMap_B_remove_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [120 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @HashMap_B_clear_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 24, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [120 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @HashMap_B__index_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [120 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @HashMap_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 26, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [120 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @HashMap_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [120 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Pair, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Pair to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 28, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [120 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @HashMap_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 29, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [120 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @HashMap_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 30, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [120 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @HashMap_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 31, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [120 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @HashMap_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 32, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [120 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @HashMap_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 33, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [120 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @HashMap_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 34, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [120 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @HashMap_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 35, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [120 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @HashMap_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 36, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [120 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define i32 @i32_hasher(i32 %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  %3 = alloca i32, align 4
  store i32 2127912214, ptr %3, align 4
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = add i32 %4, %5
  %7 = alloca i32, align 4
  store i32 %6, ptr %7, align 4
  %8 = alloca i32, align 4
  store i32 12, ptr %8, align 4
  %9 = load i32, ptr %2, align 4
  %10 = load i32, ptr %8, align 4
  %11 = shl i32 %9, %10
  %12 = alloca i32, align 4
  store i32 %11, ptr %12, align 4
  %13 = load i32, ptr %7, align 4
  %14 = load i32, ptr %12, align 4
  %15 = add i32 %13, %14
  %16 = alloca i32, align 4
  store i32 %15, ptr %16, align 4
  %17 = load i32, ptr %16, align 4
  store i32 %17, ptr %2, align 4
  %18 = alloca i32, align 4
  store i32 -949894596, ptr %18, align 4
  %19 = load i32, ptr %2, align 4
  %20 = load i32, ptr %18, align 4
  %21 = xor i32 %19, %20
  %22 = alloca i32, align 4
  store i32 %21, ptr %22, align 4
  %23 = alloca i32, align 4
  store i32 19, ptr %23, align 4
  %24 = load i32, ptr %2, align 4
  %25 = load i32, ptr %23, align 4
  %26 = ashr i32 %24, %25
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = load i32, ptr %22, align 4
  %29 = load i32, ptr %27, align 4
  %30 = xor i32 %28, %29
  %31 = alloca i32, align 4
  store i32 %30, ptr %31, align 4
  %32 = load i32, ptr %31, align 4
  store i32 %32, ptr %2, align 4
  %33 = alloca i32, align 4
  store i32 374761393, ptr %33, align 4
  %34 = load i32, ptr %2, align 4
  %35 = load i32, ptr %33, align 4
  %36 = add i32 %34, %35
  %37 = alloca i32, align 4
  store i32 %36, ptr %37, align 4
  %38 = alloca i32, align 4
  store i32 5, ptr %38, align 4
  %39 = load i32, ptr %2, align 4
  %40 = load i32, ptr %38, align 4
  %41 = shl i32 %39, %40
  %42 = alloca i32, align 4
  store i32 %41, ptr %42, align 4
  %43 = load i32, ptr %37, align 4
  %44 = load i32, ptr %42, align 4
  %45 = add i32 %43, %44
  %46 = alloca i32, align 4
  store i32 %45, ptr %46, align 4
  %47 = load i32, ptr %46, align 4
  store i32 %47, ptr %2, align 4
  %48 = alloca i32, align 4
  store i32 -744332180, ptr %48, align 4
  %49 = load i32, ptr %2, align 4
  %50 = load i32, ptr %48, align 4
  %51 = add i32 %49, %50
  %52 = alloca i32, align 4
  store i32 %51, ptr %52, align 4
  %53 = alloca i32, align 4
  store i32 9, ptr %53, align 4
  %54 = load i32, ptr %2, align 4
  %55 = load i32, ptr %53, align 4
  %56 = shl i32 %54, %55
  %57 = alloca i32, align 4
  store i32 %56, ptr %57, align 4
  %58 = load i32, ptr %52, align 4
  %59 = load i32, ptr %57, align 4
  %60 = xor i32 %58, %59
  %61 = alloca i32, align 4
  store i32 %60, ptr %61, align 4
  %62 = load i32, ptr %61, align 4
  store i32 %62, ptr %2, align 4
  %63 = alloca i32, align 4
  store i32 -42973499, ptr %63, align 4
  %64 = load i32, ptr %2, align 4
  %65 = load i32, ptr %63, align 4
  %66 = add i32 %64, %65
  %67 = alloca i32, align 4
  store i32 %66, ptr %67, align 4
  %68 = alloca i32, align 4
  store i32 3, ptr %68, align 4
  %69 = load i32, ptr %2, align 4
  %70 = load i32, ptr %68, align 4
  %71 = shl i32 %69, %70
  %72 = alloca i32, align 4
  store i32 %71, ptr %72, align 4
  %73 = load i32, ptr %67, align 4
  %74 = load i32, ptr %72, align 4
  %75 = add i32 %73, %74
  %76 = alloca i32, align 4
  store i32 %75, ptr %76, align 4
  %77 = load i32, ptr %76, align 4
  store i32 %77, ptr %2, align 4
  %78 = alloca i32, align 4
  store i32 -1252372727, ptr %78, align 4
  %79 = load i32, ptr %2, align 4
  %80 = load i32, ptr %78, align 4
  %81 = xor i32 %79, %80
  %82 = alloca i32, align 4
  store i32 %81, ptr %82, align 4
  %83 = alloca i32, align 4
  store i32 16, ptr %83, align 4
  %84 = load i32, ptr %2, align 4
  %85 = load i32, ptr %83, align 4
  %86 = ashr i32 %84, %85
  %87 = alloca i32, align 4
  store i32 %86, ptr %87, align 4
  %88 = load i32, ptr %82, align 4
  %89 = load i32, ptr %87, align 4
  %90 = xor i32 %88, %89
  %91 = alloca i32, align 4
  store i32 %90, ptr %91, align 4
  %92 = load i32, ptr %91, align 4
  store i32 %92, ptr %2, align 4
  %93 = load i32, ptr %2, align 4
  ret i32 %93
}

define i1 @i32_eq(i32 %0, i32 %1) {
  %3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %3, align 4
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load i32, ptr %4, align 4
  %7 = icmp eq i32 %5, %6
  %8 = alloca i1, align 1
  store i1 %7, ptr %8, align 1
  %9 = load i1, ptr %8, align 1
  ret i1 %9
}

define i32 @string_hasher({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca {}, align 8
  %4 = alloca { ptr, i160 }, align 8
  %5 = alloca i1, align 1
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [0 x ptr], align 8
  %8 = alloca {}, align 8
  %9 = alloca i8, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = load i32, ptr %27, align 4
  store i32 %29, ptr %28, align 4
  call void @set_offset(ptr %17, ptr @String)
  %30 = alloca i32, align 4
  store i32 0, ptr %30, align 4
  %31 = alloca i32, align 4
  store i32 31, ptr %31, align 4
  %32 = load ptr, ptr %19, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %22, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %25, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %28, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 632, ptr %32)
  %43 = getelementptr ptr, ptr %32, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 17
  %45 = load ptr, ptr %44, align 8
  %46 = alloca {}, align 8
  %47 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, ptr, ptr, i32 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40) #17
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %48, ptr %49, align 8
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = load i32, ptr %60, align 4
  store i32 %62, ptr %61, align 4
  call void @set_offset(ptr %50, ptr @StringIterator)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %65 = load ptr, ptr %52, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %67 = load ptr, ptr %55, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %69 = load ptr, ptr %58, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %71 = load i32, ptr %61, align 4
  store i32 %71, ptr %70, align 4
  call void @set_offset(ptr %63, ptr @StringIterator)
  %72 = alloca i32, align 4
  %73 = alloca ptr, align 8
  %74 = alloca ptr, align 8
  %75 = alloca ptr, align 8
  %76 = load ptr, ptr %64, align 8
  store ptr %76, ptr %75, align 8
  %77 = load ptr, ptr %66, align 8
  store ptr %77, ptr %74, align 8
  %78 = load ptr, ptr %68, align 8
  store ptr %78, ptr %73, align 8
  %79 = load i32, ptr %70, align 4
  store i32 %79, ptr %72, align 4
  br label %80

80:                                               ; preds = %._crit_edge1, %1
  %81 = load ptr, ptr %75, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %83 = load ptr, ptr %74, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 1
  %85 = load ptr, ptr %73, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 2
  %87 = load i32, ptr %72, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %87, 3
  %89 = call ptr @llvm.invariant.start.p0(i64 0, ptr %2)
  %90 = call ptr @llvm.invariant.start.p0(i64 80, ptr %81)
  %91 = getelementptr ptr, ptr %81, i32 %87
  %92 = getelementptr ptr, ptr %91, i32 4
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @behavior_wrapper(ptr %93, { ptr, ptr, ptr, i32 } %88, ptr %3)
  %95 = call { ptr, i160 } %94({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %2) #17
  store { ptr, i160 } %95, ptr %4, align 8
  %96 = load ptr, ptr %4, align 8
  %97 = ptrtoint ptr %96 to i64
  %98 = icmp eq i64 %97, ptrtoint (ptr @nil_typ to i64)
  %99 = icmp eq i64 %97, 0
  %100 = or i1 %98, %99
  %101 = icmp eq i1 %100, false
  store i1 %101, ptr %5, align 1
  %102 = load i1, ptr %5, align 1
  store i1 %102, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %103, label %._crit_edge

._crit_edge:                                      ; preds = %80
  br label %157

103:                                              ; preds = %80
  %104 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %105 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %108 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 1
  %109 = load i160, ptr %107, align 4
  store i160 %109, ptr %108, align 4
  call void @set_offset(ptr %6, ptr @Character)
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  %122 = call ptr @llvm.invariant.start.p0(i64 0, ptr %7)
  %123 = call ptr @llvm.invariant.start.p0(i64 40, ptr %111)
  %124 = getelementptr ptr, ptr %111, i32 %120
  %125 = getelementptr ptr, ptr %124, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = call ptr @behavior_wrapper(ptr %126, { ptr, ptr, ptr, i32 } %121, ptr %8)
  %128 = call i8 %127({ ptr, ptr, ptr, i32 } %121, { ptr, ptr, ptr, i32 } %121, ptr %7) #17
  store i8 %128, ptr %9, align 1
  %129 = load i8, ptr %9, align 1
  %130 = sext i8 %129 to i32
  store i32 %130, ptr %10, align 4
  %131 = load i32, ptr %30, align 4
  %132 = load i32, ptr %31, align 4
  %133 = mul i32 %131, %132
  store i32 %133, ptr %11, align 4
  %134 = load i32, ptr %11, align 4
  %135 = load i32, ptr %10, align 4
  %136 = add i32 %134, %135
  store i32 %136, ptr %12, align 4
  store i32 2147483647, ptr %13, align 4
  %137 = load i32, ptr %12, align 4
  %138 = load i32, ptr %13, align 4
  %139 = and i32 %137, %138
  store i32 %139, ptr %14, align 4
  %140 = load i32, ptr %14, align 4
  store i32 %140, ptr %30, align 4
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %142 = load ptr, ptr %110, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %144 = load ptr, ptr %113, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %146 = load ptr, ptr %116, align 8
  store ptr %146, ptr %145, align 8
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %148 = load i32, ptr %119, align 4
  store i32 %148, ptr %147, align 4
  call void @set_offset(ptr %15, ptr @Character)
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %150 = load ptr, ptr %141, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %152 = load ptr, ptr %143, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %154 = load ptr, ptr %145, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %156 = load i32, ptr %147, align 4
  store i32 %156, ptr %155, align 4
  br label %157

157:                                              ; preds = %._crit_edge, %103
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %158

._crit_edge1:                                     ; preds = %157
  br label %80

158:                                              ; preds = %157
  %159 = load i32, ptr %30, align 4
  ret i32 %159
}

define i1 @string_eq({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @String)
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %17, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = load i32, ptr %28, align 4
  store i32 %30, ptr %29, align 4
  call void @set_offset(ptr %18, ptr @String)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %20, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %35 = load ptr, ptr %23, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %37 = load ptr, ptr %26, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %39 = load i32, ptr %29, align 4
  store i32 %39, ptr %38, align 4
  call void @set_offset(ptr %31, ptr @String)
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
  %42 = load ptr, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 1
  %44 = load ptr, ptr %36, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %44, 2
  %46 = load i32, ptr %38, align 4
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %46, 3
  %48 = load ptr, ptr %6, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = load ptr, ptr %9, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 1
  %52 = load ptr, ptr %12, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 2
  %54 = load i32, ptr %15, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %54, 3
  %56 = alloca [1 x ptr], align 8
  %57 = getelementptr [1 x ptr], ptr %56, i32 0, i32 0
  store ptr @_parameterization_String, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 1, ptr %56)
  %59 = call ptr @llvm.invariant.start.p0(i64 632, ptr %48)
  %60 = getelementptr ptr, ptr %48, i32 %54
  %61 = getelementptr ptr, ptr %60, i32 14
  %62 = load ptr, ptr %61, align 8
  %63 = alloca { ptr }, align 8
  %64 = getelementptr { ptr }, ptr %63, i32 0, i32 0
  store ptr %40, ptr %64, align 8
  %65 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %55, ptr %63)
  %66 = call i1 %65({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %56, { ptr, ptr, ptr, i32 } %47) #17
  %67 = alloca i1, align 1
  store i1 %66, ptr %67, align 1
  %68 = load i1, ptr %67, align 1
  ret i1 %68
}

define { i64, i64 } @_data_size_Representable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 1, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [2 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Representable)
  %18 = alloca i32, align 4
  store i32 7, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([6 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <6 x i8>, ptr @zzebn_Object, align 8
  store <6 x i8> %33, ptr %32, align 8
  %34 = alloca i32, align 4
  store i32 6, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 7, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca i32, align 4
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  store ptr @String, ptr %46, align 8
  store ptr %42, ptr %45, align 8
  store i32 10, ptr %43, align 4
  %47 = alloca i32, align 4
  store i32 6, ptr %47, align 4
  %48 = alloca i32, align 4
  store i32 7, ptr %48, align 4
  %49 = load ptr, ptr %24, align 8
  %50 = insertvalue { ptr } undef, ptr %49, 0
  %51 = load i32, ptr %47, align 4
  %52 = load i32, ptr %48, align 4
  %53 = load ptr, ptr %46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %45, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %44, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %43, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca [3 x ptr], align 8
  %62 = getelementptr [3 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %61, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %61, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr %61)
  %66 = call ptr @llvm.invariant.start.p0(i64 632, ptr %53)
  %67 = getelementptr ptr, ptr %53, i32 %59
  %68 = getelementptr ptr, ptr %67, i32 6
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr, ptr, ptr }, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 2
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %60, ptr %70)
  call void %74({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr } %50, i32 %51, i32 %52) #17
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %77 = load ptr, ptr %46, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %79 = load ptr, ptr %45, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %81 = load ptr, ptr %44, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %83 = load i32, ptr %43, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %75, ptr @String)
  %84 = load ptr, ptr %76, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %78, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %80, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %82, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  ret { ptr, ptr, ptr, i32 } %91
}

define { i64, i64 } @_data_size_String(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @String_field_String_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_Character
}

define ptr @String_B__Self_from_c_string_c_stringBufferPtri8(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @buffer_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 29, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [79 x ptr], ptr @String, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 30, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [79 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @buffer_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @i32_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 31, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [79 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 32, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [79 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 33, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [79 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 34, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [79 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 35, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [79 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_append_xPtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i8_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 36, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [79 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 37, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [79 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 38, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [79 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 39, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [79 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 40, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [79 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 41, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [79 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 42, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [79 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 43, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [79 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Character, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Character to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 44, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [79 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @String_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 45, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [79 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 46, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [79 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 47, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [79 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 48, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [79 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 49, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [79 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 50, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [79 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 51, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [79 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 52, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [79 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 53, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [79 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define { ptr, ptr, ptr, i32 } @String__Self_from_c_string_c_stringBufferPtri8(ptr %0, { ptr } %1) {
  %3 = alloca i1, align 1
  %4 = alloca i8, align 1
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [1 x ptr], align 8
  %11 = alloca i32, align 4
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca [3 x ptr], align 8
  %18 = alloca { ptr, ptr, ptr }, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = alloca ptr, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr } %1, ptr %20, align 8
  %21 = alloca i8, align 1
  store i8 0, ptr %21, align 1
  %22 = alloca i32, align 4
  store i32 0, ptr %22, align 4
  br label %23

23:                                               ; preds = %._crit_edge, %2
  store i1 true, ptr %3, align 1
  %24 = load i1, ptr %3, align 1
  br i1 %24, label %25, label %45

25:                                               ; preds = %23
  %26 = load ptr, ptr %20, align 8
  %27 = load i32, ptr %22, align 4
  %28 = sext i32 %27 to i64
  %29 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %28
  %30 = getelementptr i8, ptr %26, i64 %29
  %31 = load i8, ptr %30, align 1
  store i8 %31, ptr %4, align 1
  %32 = load i8, ptr %4, align 1
  %33 = load i8, ptr %21, align 1
  %34 = icmp eq i8 %32, %33
  store i1 %34, ptr %5, align 1
  %35 = load i1, ptr %5, align 1
  %36 = xor i1 %35, true
  %37 = zext i1 %36 to i32
  store i32 %37, ptr %.reg2mem1, align 4
  br i1 %35, label %38, label %39

38:                                               ; preds = %25
  br label %44

39:                                               ; preds = %25
  store i32 1, ptr %6, align 4
  %40 = load i32, ptr %22, align 4
  %41 = load i32, ptr %6, align 4
  %42 = add i32 %40, %41
  store i32 %42, ptr %7, align 4
  %43 = load i32, ptr %7, align 4
  store i32 %43, ptr %22, align 4
  br label %44

44:                                               ; preds = %39, %38
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem3, align 4
  br label %46

45:                                               ; preds = %23
  store i32 0, ptr %.reg2mem3, align 4
  br label %46

46:                                               ; preds = %45, %44
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem, align 4
  br label %47

47:                                               ; preds = %46
  %.reload = load i32, ptr %.reg2mem, align 4
  %48 = trunc i32 %.reload to i1
  br i1 %48, label %._crit_edge, label %49

._crit_edge:                                      ; preds = %47
  br label %23

49:                                               ; preds = %47
  store i32 1, ptr %8, align 4
  %50 = load i32, ptr %22, align 4
  %51 = load i32, ptr %8, align 4
  %52 = add i32 %50, %51
  store i32 %52, ptr %9, align 4
  store ptr @String, ptr %10, align 8
  %53 = load ptr, ptr %10, align 8
  %54 = getelementptr ptr, ptr %53, i32 6
  %55 = load ptr, ptr %54, align 8
  %56 = call { i64, i64 } @size_wrapper(ptr %55, ptr %10)
  %57 = extractvalue { i64, i64 } %56, 0
  %58 = call ptr @bump_malloc(i64 %57)
  store ptr @String, ptr %14, align 8
  store ptr %58, ptr %13, align 8
  store i32 10, ptr %11, align 4
  store i32 1, ptr %15, align 4
  %59 = load i32, ptr %22, align 4
  %60 = load i32, ptr %15, align 4
  %61 = add i32 %59, %60
  store i32 %61, ptr %16, align 4
  %62 = load ptr, ptr %20, align 8
  %63 = insertvalue { ptr } undef, ptr %62, 0
  %64 = load i32, ptr %22, align 4
  %65 = load i32, ptr %16, align 4
  %66 = load ptr, ptr %14, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = load ptr, ptr %13, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 1
  %70 = load ptr, ptr %12, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 2
  %72 = load i32, ptr %11, align 4
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %72, 3
  %74 = getelementptr [3 x ptr], ptr %17, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %74, align 8
  %75 = getelementptr [3 x ptr], ptr %17, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %75, align 8
  %76 = getelementptr [3 x ptr], ptr %17, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 9, ptr %17)
  %78 = call ptr @llvm.invariant.start.p0(i64 632, ptr %66)
  %79 = getelementptr ptr, ptr %66, i32 %72
  %80 = getelementptr ptr, ptr %79, i32 6
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr }, ptr %18, i32 0, i32 0
  store ptr @buffer_typ, ptr %82, align 8
  %83 = getelementptr { ptr, ptr, ptr }, ptr %18, i32 0, i32 1
  store ptr @i32_typ, ptr %83, align 8
  %84 = getelementptr { ptr, ptr, ptr }, ptr %18, i32 0, i32 2
  store ptr @i32_typ, ptr %84, align 8
  %85 = call ptr @behavior_wrapper(ptr %81, { ptr, ptr, ptr, i32 } %73, ptr %18)
  call void %85({ ptr, ptr, ptr, i32 } %73, { ptr, ptr, ptr, i32 } %73, ptr %17, { ptr } %63, i32 %64, i32 %65) #17
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %87 = load ptr, ptr %14, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %89 = load ptr, ptr %13, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %91 = load ptr, ptr %12, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %93 = load i32, ptr %11, align 4
  store i32 %93, ptr %92, align 4
  call void @set_offset(ptr %19, ptr @String)
  %94 = load ptr, ptr %86, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %94, 0
  %96 = load ptr, ptr %88, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 1
  %98 = load ptr, ptr %90, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 2
  %100 = load i32, ptr %92, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %100, 3
  ret { ptr, ptr, ptr, i32 } %101
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca i32, align 4
  store i32 1, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = load ptr, ptr %10, align 8
  %25 = load ptr, ptr %5, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 632, ptr %25)
  %27 = load i32, ptr %16, align 4
  %28 = getelementptr ptr, ptr %25, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %31(ptr %24, { ptr } %34) #15
  %35 = alloca i32, align 4
  store i32 1, ptr %35, align 4
  %36 = load ptr, ptr %10, align 8
  %37 = load ptr, ptr %5, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 632, ptr %37)
  %39 = load i32, ptr %16, align 4
  %40 = getelementptr ptr, ptr %37, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load i32, ptr %35, align 4
  call void %44(ptr %36, i32 %45) #15
  %46 = alloca i32, align 4
  store i32 0, ptr %46, align 4
  %47 = load ptr, ptr %10, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 632, ptr %48)
  %50 = load i32, ptr %16, align 4
  %51 = getelementptr ptr, ptr %48, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = load i32, ptr %46, align 4
  call void %55(ptr %47, i32 %56) #15
  ret void
}

define void @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @String)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 632, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %21, align 8
  %31 = insertvalue { ptr } undef, ptr %30, 0
  call void %29(ptr %22, { ptr } %31) #15
  %32 = alloca i32, align 4
  store i32 %4, ptr %32, align 4
  %33 = load ptr, ptr %13, align 8
  %34 = load ptr, ptr %8, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 632, ptr %34)
  %36 = load i32, ptr %19, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load i32, ptr %32, align 4
  call void %41(ptr %33, i32 %42) #15
  %43 = alloca i32, align 4
  store i32 %5, ptr %43, align 4
  %44 = load ptr, ptr %13, align 8
  %45 = load ptr, ptr %8, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 632, ptr %45)
  %47 = load i32, ptr %19, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load i32, ptr %43, align 4
  call void %52(ptr %44, i32 %53) #15
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 632, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #16
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 632, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #16
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 632, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr } %25(ptr %18) #16
  %27 = alloca ptr, align 8
  store { ptr } %26, ptr %27, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr } undef, ptr %28, 0
  ret { ptr } %29
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca ptr, align 8
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8, align 1
  %11 = alloca i32, align 4
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  store ptr %18, ptr %.reg2mem9, align 8
  %19 = load ptr, ptr %17, align 8
  %.reload14 = load ptr, ptr %.reg2mem9, align 8
  store ptr %19, ptr %.reload14, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  store ptr %24, ptr %.reg2mem3, align 8
  %25 = load i32, ptr %23, align 4
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  store i32 %25, ptr %.reload8, align 4
  call void @set_offset(ptr %13, ptr @String)
  %.reload13 = load ptr, ptr %.reg2mem9, align 8
  %26 = load ptr, ptr %.reload13, align 8
  %27 = load ptr, ptr %13, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 632, ptr %27)
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %29 = load i32, ptr %.reload7, align 4
  %30 = getelementptr ptr, ptr %27, i32 %29
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr { ptr, ptr }, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call i32 %34(ptr %26) #16
  %36 = alloca i32, align 4
  store i32 %35, ptr %36, align 4
  %37 = alloca i32, align 4
  store i32 1, ptr %37, align 4
  %38 = load i32, ptr %36, align 4
  %39 = load i32, ptr %37, align 4
  %40 = add i32 %38, %39
  %41 = alloca i32, align 4
  store i32 %40, ptr %41, align 4
  %42 = load i32, ptr %41, align 4
  %43 = sext i32 %42 to i64
  %44 = alloca ptr, align 8
  %45 = mul i64 %43, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %46 = call ptr @bump_malloc(i64 %45)
  store ptr %46, ptr %44, align 8
  %47 = alloca ptr, align 8
  %48 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  store ptr %49, ptr %47, align 8
  %50 = alloca i32, align 4
  store i32 0, ptr %50, align 4
  br label %51

51:                                               ; preds = %._crit_edge1, %3
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %52 = load ptr, ptr %.reload12, align 8
  %53 = load ptr, ptr %13, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 632, ptr %53)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %55 = load i32, ptr %.reload6, align 4
  %56 = getelementptr ptr, ptr %53, i32 %55
  %57 = getelementptr ptr, ptr %56, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr }, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = call i32 %60(ptr %52) #16
  store i32 %61, ptr %4, align 4
  %62 = load i32, ptr %50, align 4
  %63 = load i32, ptr %4, align 4
  %64 = icmp slt i32 %62, %63
  store i1 %64, ptr %5, align 1
  %65 = load i1, ptr %5, align 1
  store i1 %65, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %66, label %._crit_edge

._crit_edge:                                      ; preds = %51
  br label %92

66:                                               ; preds = %51
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %67 = load ptr, ptr %.reload11, align 8
  %68 = load ptr, ptr %13, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 632, ptr %68)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %70 = load i32, ptr %.reload5, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr } %74(ptr %67) #16
  store { ptr } %75, ptr %6, align 8
  %76 = load ptr, ptr %6, align 8
  %77 = load i32, ptr %50, align 4
  %78 = sext i32 %77 to i64
  %79 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %78
  %80 = getelementptr i8, ptr %76, i64 %79
  %81 = load i8, ptr %80, align 1
  store i8 %81, ptr %7, align 1
  %82 = load ptr, ptr %47, align 8
  %83 = load i32, ptr %50, align 4
  %84 = sext i32 %83 to i64
  %85 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %84
  %86 = getelementptr i8, ptr %82, i64 %85
  %87 = load i8, ptr %7, align 1
  store i8 %87, ptr %86, align 1
  store i32 1, ptr %8, align 4
  %88 = load i32, ptr %50, align 4
  %89 = load i32, ptr %8, align 4
  %90 = add i32 %88, %89
  store i32 %90, ptr %9, align 4
  %91 = load i32, ptr %9, align 4
  store i32 %91, ptr %50, align 4
  br label %92

92:                                               ; preds = %._crit_edge, %66
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %93

._crit_edge1:                                     ; preds = %92
  br label %51

93:                                               ; preds = %92
  store i8 0, ptr %10, align 1
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %94 = load ptr, ptr %.reload10, align 8
  %95 = load ptr, ptr %13, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 632, ptr %95)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %97 = load i32, ptr %.reload4, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = call i32 %102(ptr %94) #16
  store i32 %103, ptr %11, align 4
  %104 = load ptr, ptr %47, align 8
  %105 = load i32, ptr %11, align 4
  %106 = sext i32 %105 to i64
  %107 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %106
  %108 = getelementptr i8, ptr %104, i64 %107
  %109 = load i8, ptr %10, align 1
  store i8 %109, ptr %108, align 1
  %110 = load ptr, ptr %47, align 8
  %111 = insertvalue { ptr } undef, ptr %110, 0
  ret { ptr } %111
}

define { ptr, ptr, ptr, i32 } @String_append_xPtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr }, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i32, align 4
  %17 = alloca ptr, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i1, align 1
  %21 = alloca i8, align 1
  %22 = alloca ptr, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca { ptr }, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem21 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem40 = alloca ptr, align 8
  %.reg2mem43 = alloca ptr, align 8
  %.reg2mem59 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %31, align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  store ptr %34, ptr %.reg2mem59, align 8
  %35 = load ptr, ptr %33, align 8
  %.reload61 = load ptr, ptr %.reg2mem59, align 8
  store ptr %35, ptr %.reload61, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  store ptr %37, ptr %.reg2mem43, align 8
  %38 = load ptr, ptr %36, align 8
  %.reload58 = load ptr, ptr %.reg2mem43, align 8
  store ptr %38, ptr %.reload58, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  store ptr %40, ptr %.reg2mem40, align 8
  %41 = load ptr, ptr %39, align 8
  %.reload42 = load ptr, ptr %.reg2mem40, align 8
  store ptr %41, ptr %.reload42, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr %43, ptr %.reg2mem24, align 8
  %44 = load i32, ptr %42, align 4
  %.reload39 = load ptr, ptr %.reg2mem24, align 8
  store i32 %44, ptr %.reload39, align 4
  call void @set_offset(ptr %32, ptr @String)
  %45 = alloca i8, align 1
  store i8 %3, ptr %45, align 1
  %.reload57 = load ptr, ptr %.reg2mem43, align 8
  %46 = load ptr, ptr %.reload57, align 8
  %47 = load ptr, ptr %32, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 632, ptr %47)
  %.reload38 = load ptr, ptr %.reg2mem24, align 8
  %49 = load i32, ptr %.reload38, align 4
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = getelementptr ptr, ptr %50, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = call i32 %54(ptr %46) #16
  %56 = alloca i32, align 4
  store i32 %55, ptr %56, align 4
  %.reload56 = load ptr, ptr %.reg2mem43, align 8
  %57 = load ptr, ptr %.reload56, align 8
  %58 = load ptr, ptr %32, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 632, ptr %58)
  %.reload37 = load ptr, ptr %.reg2mem24, align 8
  %60 = load i32, ptr %.reload37, align 4
  %61 = getelementptr ptr, ptr %58, i32 %60
  %62 = getelementptr ptr, ptr %61, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr { ptr, ptr }, ptr %63, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %66 = call i32 %65(ptr %57) #16
  %67 = alloca i32, align 4
  store i32 %66, ptr %67, align 4
  %68 = load i32, ptr %56, align 4
  %69 = load i32, ptr %67, align 4
  %70 = icmp slt i32 %68, %69
  %71 = alloca i1, align 1
  store i1 %70, ptr %71, align 1
  %72 = load i1, ptr %71, align 1
  %73 = select i1 %72, ptr %5, ptr %25
  store ptr %73, ptr %.reg2mem21, align 8
  %74 = select i1 %72, ptr %6, ptr %26
  store ptr %74, ptr %.reg2mem18, align 8
  %75 = select i1 %72, ptr %7, ptr %27
  store ptr %75, ptr %.reg2mem15, align 8
  %76 = select i1 %72, ptr %8, ptr %28
  store ptr %76, ptr %.reg2mem12, align 8
  %77 = select i1 %72, ptr %9, ptr %29
  store ptr %77, ptr %.reg2mem9, align 8
  %78 = select i1 %72, ptr %10, ptr %30
  store ptr %78, ptr %.reg2mem3, align 8
  br i1 %72, label %79, label %80

79:                                               ; preds = %4
  br label %182

80:                                               ; preds = %4
  %.reload55 = load ptr, ptr %.reg2mem43, align 8
  %81 = load ptr, ptr %.reload55, align 8
  %82 = load ptr, ptr %32, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 632, ptr %82)
  %.reload36 = load ptr, ptr %.reg2mem24, align 8
  %84 = load i32, ptr %.reload36, align 4
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 2
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr { ptr, ptr }, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = call i32 %89(ptr %81) #16
  store i32 %90, ptr %11, align 4
  store i32 2, ptr %12, align 4
  %91 = load i32, ptr %11, align 4
  %92 = load i32, ptr %12, align 4
  %93 = mul i32 %91, %92
  store i32 %93, ptr %13, align 4
  %.reload54 = load ptr, ptr %.reg2mem43, align 8
  %94 = load ptr, ptr %.reload54, align 8
  %95 = load ptr, ptr %32, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 632, ptr %95)
  %.reload35 = load ptr, ptr %.reg2mem24, align 8
  %97 = load i32, ptr %.reload35, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 2
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = load i32, ptr %13, align 4
  call void %102(ptr %94, i32 %103) #15
  %.reload53 = load ptr, ptr %.reg2mem43, align 8
  %104 = load ptr, ptr %.reload53, align 8
  %105 = load ptr, ptr %32, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 632, ptr %105)
  %.reload34 = load ptr, ptr %.reg2mem24, align 8
  %107 = load i32, ptr %.reload34, align 4
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr }, ptr %109, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = call { ptr } %111(ptr %104) #16
  store { ptr } %112, ptr %14, align 8
  %113 = load ptr, ptr %14, align 8
  store ptr %113, ptr %15, align 8
  %.reload52 = load ptr, ptr %.reg2mem43, align 8
  %114 = load ptr, ptr %.reload52, align 8
  %115 = load ptr, ptr %32, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 632, ptr %115)
  %.reload33 = load ptr, ptr %.reg2mem24, align 8
  %117 = load i32, ptr %.reload33, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 2
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call i32 %122(ptr %114) #16
  store i32 %123, ptr %16, align 4
  %124 = load i32, ptr %16, align 4
  %125 = sext i32 %124 to i64
  %126 = mul i64 %125, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %127 = call ptr @bump_malloc(i64 %126)
  store ptr %127, ptr %17, align 8
  %.reload51 = load ptr, ptr %.reg2mem43, align 8
  %128 = load ptr, ptr %.reload51, align 8
  %129 = load ptr, ptr %32, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 632, ptr %129)
  %.reload32 = load ptr, ptr %.reg2mem24, align 8
  %131 = load i32, ptr %.reload32, align 4
  %132 = getelementptr ptr, ptr %129, i32 %131
  %133 = load ptr, ptr %132, align 8
  %134 = getelementptr { ptr, ptr }, ptr %133, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr } undef, ptr %137, 0
  call void %135(ptr %128, { ptr } %138) #15
  store i32 0, ptr %18, align 4
  br label %139

139:                                              ; preds = %._crit_edge1, %80
  %.reload50 = load ptr, ptr %.reg2mem43, align 8
  %140 = load ptr, ptr %.reload50, align 8
  %141 = load ptr, ptr %32, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 632, ptr %141)
  %.reload31 = load ptr, ptr %.reg2mem24, align 8
  %143 = load i32, ptr %.reload31, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr }, ptr %146, i32 0, i32 0
  %148 = load ptr, ptr %147, align 8
  %149 = call i32 %148(ptr %140) #16
  store i32 %149, ptr %19, align 4
  %150 = load i32, ptr %18, align 4
  %151 = load i32, ptr %19, align 4
  %152 = icmp slt i32 %150, %151
  store i1 %152, ptr %20, align 1
  %153 = load i1, ptr %20, align 1
  store i1 %153, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %154, label %._crit_edge

._crit_edge:                                      ; preds = %139
  br label %180

154:                                              ; preds = %139
  %155 = load ptr, ptr %15, align 8
  %156 = load i32, ptr %18, align 4
  %157 = sext i32 %156 to i64
  %158 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %157
  %159 = getelementptr i8, ptr %155, i64 %158
  %160 = load i8, ptr %159, align 1
  store i8 %160, ptr %21, align 1
  %.reload49 = load ptr, ptr %.reg2mem43, align 8
  %161 = load ptr, ptr %.reload49, align 8
  %162 = load ptr, ptr %32, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 632, ptr %162)
  %.reload30 = load ptr, ptr %.reg2mem24, align 8
  %164 = load i32, ptr %.reload30, align 4
  %165 = getelementptr ptr, ptr %162, i32 %164
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr { ptr, ptr }, ptr %166, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %169 = call { ptr } %168(ptr %161) #16
  store { ptr } %169, ptr %22, align 8
  %170 = load ptr, ptr %22, align 8
  %171 = load i32, ptr %18, align 4
  %172 = sext i32 %171 to i64
  %173 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %172
  %174 = getelementptr i8, ptr %170, i64 %173
  %175 = load i8, ptr %21, align 1
  store i8 %175, ptr %174, align 1
  store i32 1, ptr %23, align 4
  %176 = load i32, ptr %18, align 4
  %177 = load i32, ptr %23, align 4
  %178 = add i32 %176, %177
  store i32 %178, ptr %24, align 4
  %179 = load i32, ptr %24, align 4
  store i32 %179, ptr %18, align 4
  br label %180

180:                                              ; preds = %._crit_edge, %154
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %181

._crit_edge1:                                     ; preds = %180
  br label %139

181:                                              ; preds = %180
  br label %182

182:                                              ; preds = %181, %79
  %.reload48 = load ptr, ptr %.reg2mem43, align 8
  %183 = load ptr, ptr %.reload48, align 8
  %184 = load ptr, ptr %32, align 8
  %185 = call ptr @llvm.invariant.start.p0(i64 632, ptr %184)
  %.reload29 = load ptr, ptr %.reg2mem24, align 8
  %186 = load i32, ptr %.reload29, align 4
  %187 = getelementptr ptr, ptr %184, i32 %186
  %188 = load ptr, ptr %187, align 8
  %189 = getelementptr { ptr, ptr }, ptr %188, i32 0, i32 0
  %190 = load ptr, ptr %189, align 8
  %191 = call { ptr } %190(ptr %183) #16
  %.reload23 = load ptr, ptr %.reg2mem21, align 8
  store { ptr } %191, ptr %.reload23, align 8
  %.reload47 = load ptr, ptr %.reg2mem43, align 8
  %192 = load ptr, ptr %.reload47, align 8
  %193 = load ptr, ptr %32, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 632, ptr %193)
  %.reload28 = load ptr, ptr %.reg2mem24, align 8
  %195 = load i32, ptr %.reload28, align 4
  %196 = getelementptr ptr, ptr %193, i32 %195
  %197 = getelementptr ptr, ptr %196, i32 1
  %198 = load ptr, ptr %197, align 8
  %199 = getelementptr { ptr, ptr }, ptr %198, i32 0, i32 0
  %200 = load ptr, ptr %199, align 8
  %201 = call i32 %200(ptr %192) #16
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  store i32 %201, ptr %.reload20, align 4
  %.reload22 = load ptr, ptr %.reg2mem21, align 8
  %202 = load ptr, ptr %.reload22, align 8
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %203 = load i32, ptr %.reload19, align 4
  %204 = sext i32 %203 to i64
  %205 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %204
  %206 = getelementptr i8, ptr %202, i64 %205
  %207 = load i8, ptr %45, align 1
  store i8 %207, ptr %206, align 1
  %.reload46 = load ptr, ptr %.reg2mem43, align 8
  %208 = load ptr, ptr %.reload46, align 8
  %209 = load ptr, ptr %32, align 8
  %210 = call ptr @llvm.invariant.start.p0(i64 632, ptr %209)
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %211 = load i32, ptr %.reload27, align 4
  %212 = getelementptr ptr, ptr %209, i32 %211
  %213 = getelementptr ptr, ptr %212, i32 1
  %214 = load ptr, ptr %213, align 8
  %215 = getelementptr { ptr, ptr }, ptr %214, i32 0, i32 0
  %216 = load ptr, ptr %215, align 8
  %217 = call i32 %216(ptr %208) #16
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  store i32 %217, ptr %.reload17, align 4
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  store i32 1, ptr %.reload14, align 4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %218 = load i32, ptr %.reload16, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %219 = load i32, ptr %.reload13, align 4
  %220 = add i32 %218, %219
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  store i32 %220, ptr %.reload11, align 4
  %.reload45 = load ptr, ptr %.reg2mem43, align 8
  %221 = load ptr, ptr %.reload45, align 8
  %222 = load ptr, ptr %32, align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 632, ptr %222)
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  %224 = load i32, ptr %.reload26, align 4
  %225 = getelementptr ptr, ptr %222, i32 %224
  %226 = getelementptr ptr, ptr %225, i32 1
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr { ptr, ptr }, ptr %227, i32 0, i32 1
  %229 = load ptr, ptr %228, align 8
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %230 = load i32, ptr %.reload10, align 4
  call void %229(ptr %221, i32 %230) #15
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload8, i32 0, i32 0
  %.reload60 = load ptr, ptr %.reg2mem59, align 8
  %232 = load ptr, ptr %.reload60, align 8
  store ptr %232, ptr %231, align 8
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload7, i32 0, i32 1
  %.reload44 = load ptr, ptr %.reg2mem43, align 8
  %234 = load ptr, ptr %.reload44, align 8
  store ptr %234, ptr %233, align 8
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload6, i32 0, i32 2
  %.reload41 = load ptr, ptr %.reg2mem40, align 8
  %236 = load ptr, ptr %.reload41, align 8
  store ptr %236, ptr %235, align 8
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload5, i32 0, i32 3
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %238 = load i32, ptr %.reload25, align 4
  store i32 %238, ptr %237, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  call void @set_offset(ptr %.reload4, ptr @String)
  %239 = load ptr, ptr %231, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %239, 0
  %241 = load ptr, ptr %233, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %241, 1
  %243 = load ptr, ptr %235, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %243, 2
  %245 = load i32, ptr %237, align 4
  %246 = insertvalue { ptr, ptr, ptr, i32 } %244, i32 %245, 3
  ret { ptr, ptr, ptr, i32 } %246
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i1, align 1
  %10 = alloca i8, align 1
  %11 = alloca ptr, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca ptr, align 8
  %22 = alloca ptr, align 8
  %23 = alloca i32, align 4
  %24 = alloca ptr, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i1, align 1
  %30 = alloca i32, align 4
  %31 = alloca i1, align 1
  %32 = alloca i8, align 1
  %33 = alloca ptr, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i8, align 1
  %37 = alloca ptr, align 8
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem39 = alloca ptr, align 8
  %.reg2mem42 = alloca ptr, align 8
  %.reg2mem61 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %45, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  store ptr %48, ptr %.reg2mem61, align 8
  %49 = load ptr, ptr %47, align 8
  %.reload63 = load ptr, ptr %.reg2mem61, align 8
  store ptr %49, ptr %.reload63, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  store ptr %51, ptr %.reg2mem42, align 8
  %52 = load ptr, ptr %50, align 8
  %.reload60 = load ptr, ptr %.reg2mem42, align 8
  store ptr %52, ptr %.reload60, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  store ptr %54, ptr %.reg2mem39, align 8
  %55 = load ptr, ptr %53, align 8
  %.reload41 = load ptr, ptr %.reg2mem39, align 8
  store ptr %55, ptr %.reload41, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  store ptr %57, ptr %.reg2mem20, align 8
  %58 = load i32, ptr %56, align 4
  %.reload38 = load ptr, ptr %.reg2mem20, align 8
  store i32 %58, ptr %.reload38, align 4
  call void @set_offset(ptr %46, ptr @String)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @String)
  %73 = load ptr, ptr %62, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %65, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %68, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %71, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  %81 = alloca [0 x ptr], align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 0, ptr %81)
  %83 = call ptr @llvm.invariant.start.p0(i64 632, ptr %73)
  %84 = getelementptr ptr, ptr %73, i32 %79
  %85 = getelementptr ptr, ptr %84, i32 9
  %86 = load ptr, ptr %85, align 8
  %87 = alloca {}, align 8
  %88 = call ptr @behavior_wrapper(ptr %86, { ptr, ptr, ptr, i32 } %80, ptr %87)
  %89 = call { ptr } %88({ ptr, ptr, ptr, i32 } %80, { ptr, ptr, ptr, i32 } %80, ptr %81) #17
  %90 = alloca ptr, align 8
  store { ptr } %89, ptr %90, align 8
  %91 = alloca ptr, align 8
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = load ptr, ptr %62, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = load ptr, ptr %65, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 1
  %97 = load ptr, ptr %68, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 2
  %99 = load i32, ptr %71, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %99, 3
  %101 = alloca [0 x ptr], align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 0, ptr %101)
  %103 = call ptr @llvm.invariant.start.p0(i64 632, ptr %93)
  %104 = getelementptr ptr, ptr %93, i32 %99
  %105 = getelementptr ptr, ptr %104, i32 7
  %106 = load ptr, ptr %105, align 8
  %107 = alloca {}, align 8
  %108 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %100, ptr %107)
  %109 = call i32 %108({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr %101) #17
  %110 = alloca i32, align 4
  store i32 %109, ptr %110, align 4
  %.reload59 = load ptr, ptr %.reg2mem42, align 8
  %111 = load ptr, ptr %.reload59, align 8
  %112 = load ptr, ptr %46, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 632, ptr %112)
  %.reload37 = load ptr, ptr %.reg2mem20, align 8
  %114 = load i32, ptr %.reload37, align 4
  %115 = getelementptr ptr, ptr %112, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 1
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr { ptr, ptr }, ptr %117, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = call i32 %119(ptr %111) #16
  %121 = alloca i32, align 4
  store i32 %120, ptr %121, align 4
  %122 = load i32, ptr %121, align 4
  %123 = load i32, ptr %110, align 4
  %124 = add i32 %122, %123
  %125 = alloca i32, align 4
  store i32 %124, ptr %125, align 4
  %.reload58 = load ptr, ptr %.reg2mem42, align 8
  %126 = load ptr, ptr %.reload58, align 8
  %127 = load ptr, ptr %46, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 632, ptr %127)
  %.reload36 = load ptr, ptr %.reg2mem20, align 8
  %129 = load i32, ptr %.reload36, align 4
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr, ptr }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = call i32 %134(ptr %126) #16
  %136 = alloca i32, align 4
  store i32 %135, ptr %136, align 4
  %137 = load i32, ptr %125, align 4
  %138 = load i32, ptr %136, align 4
  %139 = icmp slt i32 %137, %138
  %140 = alloca i1, align 1
  store i1 %139, ptr %140, align 1
  %141 = load i1, ptr %140, align 1
  %142 = select i1 %141, ptr %16, ptr %42
  store ptr %142, ptr %.reg2mem17, align 8
  %143 = select i1 %141, ptr %17, ptr %43
  store ptr %143, ptr %.reg2mem14, align 8
  %144 = select i1 %141, ptr %18, ptr %44
  store ptr %144, ptr %.reg2mem8, align 8
  br i1 %141, label %145, label %206

145:                                              ; preds = %4
  %.reload57 = load ptr, ptr %.reg2mem42, align 8
  %146 = load ptr, ptr %.reload57, align 8
  %147 = load ptr, ptr %46, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 632, ptr %147)
  %.reload35 = load ptr, ptr %.reg2mem20, align 8
  %149 = load i32, ptr %.reload35, align 4
  %150 = getelementptr ptr, ptr %147, i32 %149
  %151 = getelementptr ptr, ptr %150, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = getelementptr { ptr, ptr }, ptr %152, i32 0, i32 0
  %154 = load ptr, ptr %153, align 8
  %155 = call i32 %154(ptr %146) #16
  store i32 %155, ptr %5, align 4
  store i32 0, ptr %6, align 4
  br label %156

156:                                              ; preds = %._crit_edge1, %145
  %.reload56 = load ptr, ptr %.reg2mem42, align 8
  %157 = load ptr, ptr %.reload56, align 8
  %158 = load ptr, ptr %46, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 632, ptr %158)
  %.reload34 = load ptr, ptr %.reg2mem20, align 8
  %160 = load i32, ptr %.reload34, align 4
  %161 = getelementptr ptr, ptr %158, i32 %160
  %162 = getelementptr ptr, ptr %161, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = getelementptr { ptr, ptr }, ptr %163, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = call i32 %165(ptr %157) #16
  store i32 %166, ptr %7, align 4
  %167 = load i32, ptr %7, align 4
  %168 = load i32, ptr %110, align 4
  %169 = add i32 %167, %168
  store i32 %169, ptr %8, align 4
  %170 = load i32, ptr %5, align 4
  %171 = load i32, ptr %8, align 4
  %172 = icmp slt i32 %170, %171
  store i1 %172, ptr %9, align 1
  %173 = load i1, ptr %9, align 1
  store i1 %173, ptr %.reg2mem5, align 1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload7, label %174, label %._crit_edge

._crit_edge:                                      ; preds = %156
  br label %204

174:                                              ; preds = %156
  %175 = load ptr, ptr %91, align 8
  %176 = load i32, ptr %6, align 4
  %177 = sext i32 %176 to i64
  %178 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %177
  %179 = getelementptr i8, ptr %175, i64 %178
  %180 = load i8, ptr %179, align 1
  store i8 %180, ptr %10, align 1
  %.reload55 = load ptr, ptr %.reg2mem42, align 8
  %181 = load ptr, ptr %.reload55, align 8
  %182 = load ptr, ptr %46, align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 632, ptr %182)
  %.reload33 = load ptr, ptr %.reg2mem20, align 8
  %184 = load i32, ptr %.reload33, align 4
  %185 = getelementptr ptr, ptr %182, i32 %184
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr, ptr }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = call { ptr } %188(ptr %181) #16
  store { ptr } %189, ptr %11, align 8
  %190 = load ptr, ptr %11, align 8
  %191 = load i32, ptr %5, align 4
  %192 = sext i32 %191 to i64
  %193 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %192
  %194 = getelementptr i8, ptr %190, i64 %193
  %195 = load i8, ptr %10, align 1
  store i8 %195, ptr %194, align 1
  store i32 1, ptr %12, align 4
  %196 = load i32, ptr %5, align 4
  %197 = load i32, ptr %12, align 4
  %198 = add i32 %196, %197
  store i32 %198, ptr %13, align 4
  %199 = load i32, ptr %13, align 4
  store i32 %199, ptr %5, align 4
  store i32 1, ptr %14, align 4
  %200 = load i32, ptr %6, align 4
  %201 = load i32, ptr %14, align 4
  %202 = add i32 %200, %201
  store i32 %202, ptr %15, align 4
  %203 = load i32, ptr %15, align 4
  store i32 %203, ptr %6, align 4
  br label %204

204:                                              ; preds = %._crit_edge, %174
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload6, label %._crit_edge1, label %205

._crit_edge1:                                     ; preds = %204
  br label %156

205:                                              ; preds = %204
  br label %357

206:                                              ; preds = %4
  %.reload54 = load ptr, ptr %.reg2mem42, align 8
  %207 = load ptr, ptr %.reload54, align 8
  %208 = load ptr, ptr %46, align 8
  %209 = call ptr @llvm.invariant.start.p0(i64 632, ptr %208)
  %.reload32 = load ptr, ptr %.reg2mem20, align 8
  %210 = load i32, ptr %.reload32, align 4
  %211 = getelementptr ptr, ptr %208, i32 %210
  %212 = getelementptr ptr, ptr %211, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = getelementptr { ptr, ptr }, ptr %213, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  %216 = call i32 %215(ptr %207) #16
  store i32 %216, ptr %19, align 4
  %217 = load i32, ptr %19, align 4
  %218 = load i32, ptr %110, align 4
  %219 = add i32 %217, %218
  store i32 %219, ptr %20, align 4
  %.reload53 = load ptr, ptr %.reg2mem42, align 8
  %220 = load ptr, ptr %.reload53, align 8
  %221 = load ptr, ptr %46, align 8
  %222 = call ptr @llvm.invariant.start.p0(i64 632, ptr %221)
  %.reload31 = load ptr, ptr %.reg2mem20, align 8
  %223 = load i32, ptr %.reload31, align 4
  %224 = getelementptr ptr, ptr %221, i32 %223
  %225 = getelementptr ptr, ptr %224, i32 2
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr { ptr, ptr }, ptr %226, i32 0, i32 1
  %228 = load ptr, ptr %227, align 8
  %229 = load i32, ptr %20, align 4
  call void %228(ptr %220, i32 %229) #15
  %.reload52 = load ptr, ptr %.reg2mem42, align 8
  %230 = load ptr, ptr %.reload52, align 8
  %231 = load ptr, ptr %46, align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 632, ptr %231)
  %.reload30 = load ptr, ptr %.reg2mem20, align 8
  %233 = load i32, ptr %.reload30, align 4
  %234 = getelementptr ptr, ptr %231, i32 %233
  %235 = load ptr, ptr %234, align 8
  %236 = getelementptr { ptr, ptr }, ptr %235, i32 0, i32 0
  %237 = load ptr, ptr %236, align 8
  %238 = call { ptr } %237(ptr %230) #16
  store { ptr } %238, ptr %21, align 8
  %239 = load ptr, ptr %21, align 8
  store ptr %239, ptr %22, align 8
  %.reload51 = load ptr, ptr %.reg2mem42, align 8
  %240 = load ptr, ptr %.reload51, align 8
  %241 = load ptr, ptr %46, align 8
  %242 = call ptr @llvm.invariant.start.p0(i64 632, ptr %241)
  %.reload29 = load ptr, ptr %.reg2mem20, align 8
  %243 = load i32, ptr %.reload29, align 4
  %244 = getelementptr ptr, ptr %241, i32 %243
  %245 = getelementptr ptr, ptr %244, i32 2
  %246 = load ptr, ptr %245, align 8
  %247 = getelementptr { ptr, ptr }, ptr %246, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = call i32 %248(ptr %240) #16
  store i32 %249, ptr %23, align 4
  %250 = load i32, ptr %23, align 4
  %251 = sext i32 %250 to i64
  %252 = mul i64 %251, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %253 = call ptr @bump_malloc(i64 %252)
  store ptr %253, ptr %24, align 8
  %.reload50 = load ptr, ptr %.reg2mem42, align 8
  %254 = load ptr, ptr %.reload50, align 8
  %255 = load ptr, ptr %46, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 632, ptr %255)
  %.reload28 = load ptr, ptr %.reg2mem20, align 8
  %257 = load i32, ptr %.reload28, align 4
  %258 = getelementptr ptr, ptr %255, i32 %257
  %259 = load ptr, ptr %258, align 8
  %260 = getelementptr { ptr, ptr }, ptr %259, i32 0, i32 1
  %261 = load ptr, ptr %260, align 8
  %262 = getelementptr { ptr }, ptr %24, i32 0, i32 0
  %263 = load ptr, ptr %262, align 8
  %264 = insertvalue { ptr } undef, ptr %263, 0
  call void %261(ptr %254, { ptr } %264) #15
  store i32 0, ptr %25, align 4
  store i32 0, ptr %26, align 4
  br label %265

265:                                              ; preds = %._crit_edge3, %206
  %.reload49 = load ptr, ptr %.reg2mem42, align 8
  %266 = load ptr, ptr %.reload49, align 8
  %267 = load ptr, ptr %46, align 8
  %268 = call ptr @llvm.invariant.start.p0(i64 632, ptr %267)
  %.reload27 = load ptr, ptr %.reg2mem20, align 8
  %269 = load i32, ptr %.reload27, align 4
  %270 = getelementptr ptr, ptr %267, i32 %269
  %271 = getelementptr ptr, ptr %270, i32 1
  %272 = load ptr, ptr %271, align 8
  %273 = getelementptr { ptr, ptr }, ptr %272, i32 0, i32 0
  %274 = load ptr, ptr %273, align 8
  %275 = call i32 %274(ptr %266) #16
  store i32 %275, ptr %27, align 4
  %276 = load i32, ptr %27, align 4
  %277 = load i32, ptr %110, align 4
  %278 = add i32 %276, %277
  store i32 %278, ptr %28, align 4
  %279 = load i32, ptr %25, align 4
  %280 = load i32, ptr %28, align 4
  %281 = icmp slt i32 %279, %280
  store i1 %281, ptr %29, align 1
  %282 = load i1, ptr %29, align 1
  store i1 %282, ptr %.reg2mem, align 1
  %.reload4 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload4, label %283, label %._crit_edge2

._crit_edge2:                                     ; preds = %265
  br label %355

283:                                              ; preds = %265
  %.reload48 = load ptr, ptr %.reg2mem42, align 8
  %284 = load ptr, ptr %.reload48, align 8
  %285 = load ptr, ptr %46, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 632, ptr %285)
  %.reload26 = load ptr, ptr %.reg2mem20, align 8
  %287 = load i32, ptr %.reload26, align 4
  %288 = getelementptr ptr, ptr %285, i32 %287
  %289 = getelementptr ptr, ptr %288, i32 1
  %290 = load ptr, ptr %289, align 8
  %291 = getelementptr { ptr, ptr }, ptr %290, i32 0, i32 0
  %292 = load ptr, ptr %291, align 8
  %293 = call i32 %292(ptr %284) #16
  store i32 %293, ptr %30, align 4
  %294 = load i32, ptr %25, align 4
  %295 = load i32, ptr %30, align 4
  %296 = icmp slt i32 %294, %295
  store i1 %296, ptr %31, align 1
  %297 = load i1, ptr %31, align 1
  br i1 %297, label %298, label %324

298:                                              ; preds = %283
  %299 = load ptr, ptr %22, align 8
  %300 = load i32, ptr %25, align 4
  %301 = sext i32 %300 to i64
  %302 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %301
  %303 = getelementptr i8, ptr %299, i64 %302
  %304 = load i8, ptr %303, align 1
  store i8 %304, ptr %32, align 1
  %.reload47 = load ptr, ptr %.reg2mem42, align 8
  %305 = load ptr, ptr %.reload47, align 8
  %306 = load ptr, ptr %46, align 8
  %307 = call ptr @llvm.invariant.start.p0(i64 632, ptr %306)
  %.reload25 = load ptr, ptr %.reg2mem20, align 8
  %308 = load i32, ptr %.reload25, align 4
  %309 = getelementptr ptr, ptr %306, i32 %308
  %310 = load ptr, ptr %309, align 8
  %311 = getelementptr { ptr, ptr }, ptr %310, i32 0, i32 0
  %312 = load ptr, ptr %311, align 8
  %313 = call { ptr } %312(ptr %305) #16
  store { ptr } %313, ptr %33, align 8
  %314 = load ptr, ptr %33, align 8
  %315 = load i32, ptr %25, align 4
  %316 = sext i32 %315 to i64
  %317 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %316
  %318 = getelementptr i8, ptr %314, i64 %317
  %319 = load i8, ptr %32, align 1
  store i8 %319, ptr %318, align 1
  store i32 1, ptr %34, align 4
  %320 = load i32, ptr %25, align 4
  %321 = load i32, ptr %34, align 4
  %322 = add i32 %320, %321
  store i32 %322, ptr %35, align 4
  %323 = load i32, ptr %35, align 4
  store i32 %323, ptr %25, align 4
  br label %354

324:                                              ; preds = %283
  %325 = load ptr, ptr %91, align 8
  %326 = load i32, ptr %26, align 4
  %327 = sext i32 %326 to i64
  %328 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %327
  %329 = getelementptr i8, ptr %325, i64 %328
  %330 = load i8, ptr %329, align 1
  store i8 %330, ptr %36, align 1
  %.reload46 = load ptr, ptr %.reg2mem42, align 8
  %331 = load ptr, ptr %.reload46, align 8
  %332 = load ptr, ptr %46, align 8
  %333 = call ptr @llvm.invariant.start.p0(i64 632, ptr %332)
  %.reload24 = load ptr, ptr %.reg2mem20, align 8
  %334 = load i32, ptr %.reload24, align 4
  %335 = getelementptr ptr, ptr %332, i32 %334
  %336 = load ptr, ptr %335, align 8
  %337 = getelementptr { ptr, ptr }, ptr %336, i32 0, i32 0
  %338 = load ptr, ptr %337, align 8
  %339 = call { ptr } %338(ptr %331) #16
  store { ptr } %339, ptr %37, align 8
  %340 = load ptr, ptr %37, align 8
  %341 = load i32, ptr %25, align 4
  %342 = sext i32 %341 to i64
  %343 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %342
  %344 = getelementptr i8, ptr %340, i64 %343
  %345 = load i8, ptr %36, align 1
  store i8 %345, ptr %344, align 1
  store i32 1, ptr %38, align 4
  %346 = load i32, ptr %25, align 4
  %347 = load i32, ptr %38, align 4
  %348 = add i32 %346, %347
  store i32 %348, ptr %39, align 4
  %349 = load i32, ptr %39, align 4
  store i32 %349, ptr %25, align 4
  store i32 1, ptr %40, align 4
  %350 = load i32, ptr %26, align 4
  %351 = load i32, ptr %40, align 4
  %352 = add i32 %350, %351
  store i32 %352, ptr %41, align 4
  %353 = load i32, ptr %41, align 4
  store i32 %353, ptr %26, align 4
  br label %354

354:                                              ; preds = %324, %298
  br label %355

355:                                              ; preds = %._crit_edge2, %354
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge3, label %356

._crit_edge3:                                     ; preds = %355
  br label %265

356:                                              ; preds = %355
  br label %357

357:                                              ; preds = %356, %205
  %.reload45 = load ptr, ptr %.reg2mem42, align 8
  %358 = load ptr, ptr %.reload45, align 8
  %359 = load ptr, ptr %46, align 8
  %360 = call ptr @llvm.invariant.start.p0(i64 632, ptr %359)
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  %361 = load i32, ptr %.reload23, align 4
  %362 = getelementptr ptr, ptr %359, i32 %361
  %363 = getelementptr ptr, ptr %362, i32 1
  %364 = load ptr, ptr %363, align 8
  %365 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 0
  %366 = load ptr, ptr %365, align 8
  %367 = call i32 %366(ptr %358) #16
  %.reload19 = load ptr, ptr %.reg2mem17, align 8
  store i32 %367, ptr %.reload19, align 4
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %368 = load i32, ptr %.reload18, align 4
  %369 = load i32, ptr %110, align 4
  %370 = add i32 %368, %369
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  store i32 %370, ptr %.reload16, align 4
  %.reload44 = load ptr, ptr %.reg2mem42, align 8
  %371 = load ptr, ptr %.reload44, align 8
  %372 = load ptr, ptr %46, align 8
  %373 = call ptr @llvm.invariant.start.p0(i64 632, ptr %372)
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %374 = load i32, ptr %.reload22, align 4
  %375 = getelementptr ptr, ptr %372, i32 %374
  %376 = getelementptr ptr, ptr %375, i32 1
  %377 = load ptr, ptr %376, align 8
  %378 = getelementptr { ptr, ptr }, ptr %377, i32 0, i32 1
  %379 = load ptr, ptr %378, align 8
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %380 = load i32, ptr %.reload15, align 4
  call void %379(ptr %371, i32 %380) #15
  %.reload13 = load ptr, ptr %.reg2mem8, align 8
  %381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload13, i32 0, i32 0
  %.reload62 = load ptr, ptr %.reg2mem61, align 8
  %382 = load ptr, ptr %.reload62, align 8
  store ptr %382, ptr %381, align 8
  %.reload12 = load ptr, ptr %.reg2mem8, align 8
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload12, i32 0, i32 1
  %.reload43 = load ptr, ptr %.reg2mem42, align 8
  %384 = load ptr, ptr %.reload43, align 8
  store ptr %384, ptr %383, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload11, i32 0, i32 2
  %.reload40 = load ptr, ptr %.reg2mem39, align 8
  %386 = load ptr, ptr %.reload40, align 8
  store ptr %386, ptr %385, align 8
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload10, i32 0, i32 3
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %388 = load i32, ptr %.reload21, align 4
  store i32 %388, ptr %387, align 4
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  call void @set_offset(ptr %.reload9, ptr @String)
  %389 = load ptr, ptr %381, align 8
  %390 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %389, 0
  %391 = load ptr, ptr %383, align 8
  %392 = insertvalue { ptr, ptr, ptr, i32 } %390, ptr %391, 1
  %393 = load ptr, ptr %385, align 8
  %394 = insertvalue { ptr, ptr, ptr, i32 } %392, ptr %393, 2
  %395 = load i32, ptr %387, align 4
  %396 = insertvalue { ptr, ptr, ptr, i32 } %394, i32 %395, 3
  ret { ptr, ptr, ptr, i32 } %396
}

define i8 @String__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca i32, align 4
  %6 = alloca i1, align 1
  %7 = alloca ptr, align 8
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i1, align 1
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8, align 1
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i8, align 1
  %.reg2mem2 = alloca i8, align 1
  %.reg2mem4 = alloca i8, align 1
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem20 = alloca i8, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %17, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  store ptr %23, ptr %.reg2mem13, align 8
  %24 = load ptr, ptr %22, align 8
  %.reload19 = load ptr, ptr %.reg2mem13, align 8
  store ptr %24, ptr %.reload19, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  store ptr %29, ptr %.reg2mem6, align 8
  %30 = load i32, ptr %28, align 4
  %.reload12 = load ptr, ptr %.reg2mem6, align 8
  store i32 %30, ptr %.reload12, align 4
  call void @set_offset(ptr %18, ptr @String)
  %31 = alloca i32, align 4
  store i32 %3, ptr %31, align 4
  %.reload18 = load ptr, ptr %.reg2mem13, align 8
  %32 = load ptr, ptr %.reload18, align 8
  %33 = load ptr, ptr %18, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 632, ptr %33)
  %.reload11 = load ptr, ptr %.reg2mem6, align 8
  %35 = load i32, ptr %.reload11, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call i32 %40(ptr %32) #16
  %42 = alloca i32, align 4
  store i32 %41, ptr %42, align 4
  %43 = alloca i32, align 4
  store i32 1, ptr %43, align 4
  %44 = load i32, ptr %42, align 4
  %45 = load i32, ptr %43, align 4
  %46 = sub i32 %44, %45
  %47 = alloca i32, align 4
  store i32 %46, ptr %47, align 4
  %48 = load i32, ptr %31, align 4
  %49 = load i32, ptr %47, align 4
  %50 = icmp sgt i32 %48, %49
  %51 = alloca i1, align 1
  store i1 %50, ptr %51, align 1
  %52 = load i1, ptr %51, align 1
  br i1 %52, label %53, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %55

53:                                               ; preds = %4
  %54 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %54)
  br label %55

55:                                               ; preds = %._crit_edge, %53
  store i32 0, ptr %5, align 4
  %56 = load i32, ptr %31, align 4
  %57 = load i32, ptr %5, align 4
  %58 = icmp sge i32 %56, %57
  store i1 %58, ptr %6, align 1
  %59 = load i1, ptr %6, align 1
  br i1 %59, label %60, label %77

60:                                               ; preds = %55
  %.reload17 = load ptr, ptr %.reg2mem13, align 8
  %61 = load ptr, ptr %.reload17, align 8
  %62 = load ptr, ptr %18, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 632, ptr %62)
  %.reload10 = load ptr, ptr %.reg2mem6, align 8
  %64 = load i32, ptr %.reload10, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = call { ptr } %68(ptr %61) #16
  store { ptr } %69, ptr %7, align 8
  %70 = load ptr, ptr %7, align 8
  %71 = load i32, ptr %31, align 4
  %72 = sext i32 %71 to i64
  %73 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %72
  %74 = getelementptr i8, ptr %70, i64 %73
  %75 = load i8, ptr %74, align 1
  store i8 %75, ptr %8, align 1
  %76 = load i8, ptr %8, align 1
  store i8 %76, ptr %.reg2mem4, align 1
  %.reload5 = load i8, ptr %.reg2mem4, align 1
  store i8 %.reload5, ptr %.reg2mem20, align 1
  br label %127

77:                                               ; preds = %55
  %.reload16 = load ptr, ptr %.reg2mem13, align 8
  %78 = load ptr, ptr %.reload16, align 8
  %79 = load ptr, ptr %18, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 632, ptr %79)
  %.reload9 = load ptr, ptr %.reg2mem6, align 8
  %81 = load i32, ptr %.reload9, align 4
  %82 = getelementptr ptr, ptr %79, i32 %81
  %83 = getelementptr ptr, ptr %82, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %87 = call i32 %86(ptr %78) #16
  store i32 %87, ptr %9, align 4
  %88 = load i32, ptr %9, align 4
  %89 = load i32, ptr %31, align 4
  %90 = add i32 %88, %89
  store i32 %90, ptr %10, align 4
  store i32 0, ptr %11, align 4
  %91 = load i32, ptr %10, align 4
  %92 = load i32, ptr %11, align 4
  %93 = icmp slt i32 %91, %92
  store i1 %93, ptr %12, align 1
  %94 = load i1, ptr %12, align 1
  br i1 %94, label %95, label %._crit_edge1

._crit_edge1:                                     ; preds = %77
  br label %97

95:                                               ; preds = %77
  %96 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %96)
  br label %97

97:                                               ; preds = %._crit_edge1, %95
  %.reload15 = load ptr, ptr %.reg2mem13, align 8
  %98 = load ptr, ptr %.reload15, align 8
  %99 = load ptr, ptr %18, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 632, ptr %99)
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %101 = load i32, ptr %.reload8, align 4
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = load ptr, ptr %102, align 8
  %104 = getelementptr { ptr, ptr }, ptr %103, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = call { ptr } %105(ptr %98) #16
  store { ptr } %106, ptr %13, align 8
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %107 = load ptr, ptr %.reload14, align 8
  %108 = load ptr, ptr %18, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 632, ptr %108)
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %110 = load i32, ptr %.reload7, align 4
  %111 = getelementptr ptr, ptr %108, i32 %110
  %112 = getelementptr ptr, ptr %111, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = getelementptr { ptr, ptr }, ptr %113, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = call i32 %115(ptr %107) #16
  store i32 %116, ptr %14, align 4
  %117 = load i32, ptr %14, align 4
  %118 = load i32, ptr %31, align 4
  %119 = add i32 %117, %118
  store i32 %119, ptr %15, align 4
  %120 = load ptr, ptr %13, align 8
  %121 = load i32, ptr %15, align 4
  %122 = sext i32 %121 to i64
  %123 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %122
  %124 = getelementptr i8, ptr %120, i64 %123
  %125 = load i8, ptr %124, align 1
  store i8 %125, ptr %16, align 1
  %126 = load i8, ptr %16, align 1
  store i8 %126, ptr %.reg2mem2, align 1
  %.reload3 = load i8, ptr %.reg2mem2, align 1
  store i8 %.reload3, ptr %.reg2mem20, align 1
  br label %127

127:                                              ; preds = %97, %60
  %.reload21 = load i8, ptr %.reg2mem20, align 1
  store i8 %.reload21, ptr %.reg2mem, align 1
  br label %128

128:                                              ; preds = %127
  %.reload = load i8, ptr %.reg2mem, align 1
  ret i8 %.reload
}

define i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i1, align 1
  %9 = alloca ptr, align 8
  %10 = alloca i8, align 1
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i8, align 1
  %15 = alloca i1, align 1
  %16 = alloca i1, align 1
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i1, align 1
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem26 = alloca ptr, align 8
  %.reg2mem30 = alloca ptr, align 8
  %.reg2mem35 = alloca ptr, align 8
  %.reg2mem40 = alloca ptr, align 8
  %.reg2mem42 = alloca i1, align 1
  %.reg2mem44 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  store ptr %26, ptr %.reg2mem35, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload39 = load ptr, ptr %.reg2mem35, align 8
  store ptr %27, ptr %.reload39, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr %32, ptr %.reg2mem30, align 8
  %33 = load i32, ptr %31, align 4
  %.reload34 = load ptr, ptr %.reg2mem30, align 8
  store i32 %33, ptr %.reload34, align 4
  call void @set_offset(ptr %21, ptr @String)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %34, align 8
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  store ptr %37, ptr %.reg2mem26, align 8
  %38 = load ptr, ptr %36, align 8
  %.reload29 = load ptr, ptr %.reg2mem26, align 8
  store ptr %38, ptr %.reload29, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  store ptr %40, ptr %.reg2mem22, align 8
  %41 = load ptr, ptr %39, align 8
  %.reload25 = load ptr, ptr %.reg2mem22, align 8
  store ptr %41, ptr %.reload25, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  store ptr %43, ptr %.reg2mem18, align 8
  %44 = load ptr, ptr %42, align 8
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  store ptr %44, ptr %.reload21, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr %46, ptr %.reg2mem14, align 8
  %47 = load i32, ptr %45, align 4
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  store i32 %47, ptr %.reload17, align 4
  call void @set_offset(ptr %35, ptr @String)
  %.reload38 = load ptr, ptr %.reg2mem35, align 8
  %48 = load ptr, ptr %.reload38, align 8
  %49 = load ptr, ptr %21, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 632, ptr %49)
  %.reload33 = load ptr, ptr %.reg2mem30, align 8
  %51 = load i32, ptr %.reload33, align 4
  %52 = getelementptr ptr, ptr %49, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = call i32 %56(ptr %48) #16
  %58 = alloca i32, align 4
  store i32 %57, ptr %58, align 4
  %.reload28 = load ptr, ptr %.reg2mem26, align 8
  %59 = load ptr, ptr %.reload28, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %.reload24 = load ptr, ptr %.reg2mem22, align 8
  %61 = load ptr, ptr %.reload24, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 1
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %63 = load ptr, ptr %.reload20, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %63, 2
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %65 = load i32, ptr %.reload16, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %65, 3
  %67 = alloca [0 x ptr], align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 0, ptr %67)
  %69 = call ptr @llvm.invariant.start.p0(i64 632, ptr %59)
  %70 = getelementptr ptr, ptr %59, i32 %65
  %71 = getelementptr ptr, ptr %70, i32 7
  %72 = load ptr, ptr %71, align 8
  %73 = alloca {}, align 8
  %74 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %66, ptr %73)
  %75 = call i32 %74({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67) #17
  %76 = alloca i32, align 4
  store i32 %75, ptr %76, align 4
  %77 = load i32, ptr %58, align 4
  %78 = load i32, ptr %76, align 4
  %79 = icmp ne i32 %77, %78
  %80 = alloca i1, align 1
  store i1 %79, ptr %80, align 1
  %81 = load i1, ptr %80, align 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %4
  store ptr %5, ptr %.reg2mem40, align 8
  store i1 false, ptr %.reg2mem42, align 1
  br label %157

83:                                               ; preds = %4
  store i32 0, ptr %6, align 4
  br label %84

84:                                               ; preds = %155, %83
  %.reload37 = load ptr, ptr %.reg2mem35, align 8
  %85 = load ptr, ptr %.reload37, align 8
  %86 = load ptr, ptr %21, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 632, ptr %86)
  %.reload32 = load ptr, ptr %.reg2mem30, align 8
  %88 = load i32, ptr %.reload32, align 4
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = getelementptr ptr, ptr %89, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr { ptr, ptr }, ptr %91, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = call i32 %93(ptr %85) #16
  store i32 %94, ptr %7, align 4
  %95 = load i32, ptr %6, align 4
  %96 = load i32, ptr %7, align 4
  %97 = icmp slt i32 %95, %96
  store i1 %97, ptr %8, align 1
  %98 = load i1, ptr %8, align 1
  %99 = xor i1 %98, true
  store i1 %99, ptr %.reg2mem11, align 1
  %100 = select i1 %98, ptr %16, ptr %19
  store ptr %100, ptr %.reg2mem8, align 8
  br i1 %98, label %101, label %151

101:                                              ; preds = %84
  %.reload36 = load ptr, ptr %.reg2mem35, align 8
  %102 = load ptr, ptr %.reload36, align 8
  %103 = load ptr, ptr %21, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 632, ptr %103)
  %.reload31 = load ptr, ptr %.reg2mem30, align 8
  %105 = load i32, ptr %.reload31, align 4
  %106 = getelementptr ptr, ptr %103, i32 %105
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = call { ptr } %109(ptr %102) #16
  store { ptr } %110, ptr %9, align 8
  %111 = load ptr, ptr %9, align 8
  %112 = load i32, ptr %6, align 4
  %113 = sext i32 %112 to i64
  %114 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %113
  %115 = getelementptr i8, ptr %111, i64 %114
  %116 = load i8, ptr %115, align 1
  store i8 %116, ptr %10, align 1
  %.reload27 = load ptr, ptr %.reg2mem26, align 8
  %117 = load ptr, ptr %.reload27, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %119 = load ptr, ptr %.reload23, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %121 = load ptr, ptr %.reload19, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 2
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %123 = load i32, ptr %.reload15, align 4
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %123, 3
  %125 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %126 = call ptr @llvm.invariant.start.p0(i64 632, ptr %117)
  %127 = getelementptr ptr, ptr %117, i32 %123
  %128 = getelementptr ptr, ptr %127, i32 9
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr @behavior_wrapper(ptr %129, { ptr, ptr, ptr, i32 } %124, ptr %12)
  %131 = call { ptr } %130({ ptr, ptr, ptr, i32 } %124, { ptr, ptr, ptr, i32 } %124, ptr %11) #17
  store { ptr } %131, ptr %13, align 8
  %132 = load ptr, ptr %13, align 8
  %133 = load i32, ptr %6, align 4
  %134 = sext i32 %133 to i64
  %135 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %134
  %136 = getelementptr i8, ptr %132, i64 %135
  %137 = load i8, ptr %136, align 1
  store i8 %137, ptr %14, align 1
  %138 = load i8, ptr %10, align 1
  %139 = load i8, ptr %14, align 1
  %140 = icmp ne i8 %138, %139
  store i1 %140, ptr %15, align 1
  %141 = load i1, ptr %15, align 1
  %142 = xor i1 %141, true
  %143 = zext i1 %142 to i32
  store i32 %143, ptr %.reg2mem6, align 4
  br i1 %141, label %144, label %145

144:                                              ; preds = %101
  br label %150

145:                                              ; preds = %101
  store i32 1, ptr %17, align 4
  %146 = load i32, ptr %6, align 4
  %147 = load i32, ptr %17, align 4
  %148 = add i32 %146, %147
  store i32 %148, ptr %18, align 4
  %149 = load i32, ptr %18, align 4
  store i32 %149, ptr %6, align 4
  br label %150

150:                                              ; preds = %145, %144
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload7, ptr %.reg2mem44, align 4
  br label %152

151:                                              ; preds = %84
  store i32 0, ptr %.reg2mem44, align 4
  br label %152

152:                                              ; preds = %151, %150
  %.reload45 = load i32, ptr %.reg2mem44, align 4
  store i32 %.reload45, ptr %.reg2mem4, align 4
  br label %153

153:                                              ; preds = %152
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  %154 = trunc i32 %.reload5 to i1
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  br i1 %154, label %155, label %156

155:                                              ; preds = %153
  br label %84

156:                                              ; preds = %153
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  store ptr %.reload9, ptr %.reg2mem40, align 8
  store i1 %.reload12, ptr %.reg2mem42, align 1
  br label %157

157:                                              ; preds = %156, %82
  %.reload43 = load i1, ptr %.reg2mem42, align 1
  %.reload41 = load ptr, ptr %.reg2mem40, align 8
  store i1 %.reload43, ptr %.reg2mem2, align 1
  store ptr %.reload41, ptr %.reg2mem, align 8
  br label %158

158:                                              ; preds = %157
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %.reload3 = load i1, ptr %.reg2mem2, align 1
  store i1 %.reload3, ptr %.reload1, align 1
  %.reload = load ptr, ptr %.reg2mem, align 8
  %159 = load i1, ptr %.reload, align 1
  ret i1 %159
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca [0 x i8], align 1
  %5 = alloca i8, align 1
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca ptr, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i8 }, align 8
  %.reg2mem1 = alloca { ptr, i8 }, align 8
  %.reg2mem3 = alloca { ptr, i8 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem19 = alloca { ptr, i8 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %15, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  store ptr %21, ptr %.reg2mem12, align 8
  %22 = load ptr, ptr %20, align 8
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  store ptr %22, ptr %.reload18, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr %27, ptr %.reg2mem5, align 8
  %28 = load i32, ptr %26, align 4
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  store i32 %28, ptr %.reload11, align 4
  call void @set_offset(ptr %16, ptr @String)
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %29 = load ptr, ptr %.reload17, align 8
  %30 = load ptr, ptr %16, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 632, ptr %30)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %32 = load i32, ptr %.reload10, align 4
  %33 = getelementptr ptr, ptr %30, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %29) #16
  %39 = alloca i32, align 4
  store i32 %38, ptr %39, align 4
  %40 = alloca i32, align 4
  store i32 0, ptr %40, align 4
  %41 = load i32, ptr %39, align 4
  %42 = load i32, ptr %40, align 4
  %43 = icmp eq i32 %41, %42
  %44 = alloca i1, align 1
  store i1 %43, ptr %44, align 1
  %45 = load i1, ptr %44, align 1
  br i1 %45, label %46, label %52

46:                                               ; preds = %3
  %47 = load [0 x i8], ptr %4, align 1
  store [0 x i8] %47, ptr %5, align 1
  store ptr @nil_typ, ptr %6, align 8
  %48 = load ptr, ptr %6, align 8
  %49 = insertvalue { ptr, i8 } undef, ptr %48, 0
  %50 = load i8, ptr %5, align 1
  %51 = insertvalue { ptr, i8 } %49, i8 %50, 1
  store { ptr, i8 } %51, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i8 }, ptr %.reg2mem3, align 8
  store { ptr, i8 } %.reload4, ptr %.reg2mem19, align 8
  br label %106

52:                                               ; preds = %3
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %53 = load ptr, ptr %.reload16, align 8
  %54 = load ptr, ptr %16, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 632, ptr %54)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %56 = load i32, ptr %.reload9, align 4
  %57 = getelementptr ptr, ptr %54, i32 %56
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr }, ptr %59, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = call i32 %61(ptr %53) #16
  store i32 %62, ptr %7, align 4
  store i32 1, ptr %8, align 4
  %63 = load i32, ptr %7, align 4
  %64 = load i32, ptr %8, align 4
  %65 = sub i32 %63, %64
  store i32 %65, ptr %9, align 4
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %66 = load ptr, ptr %.reload15, align 8
  %67 = load ptr, ptr %16, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 632, ptr %67)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %69 = load i32, ptr %.reload8, align 4
  %70 = getelementptr ptr, ptr %67, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load i32, ptr %9, align 4
  call void %74(ptr %66, i32 %75) #15
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %76 = load ptr, ptr %.reload14, align 8
  %77 = load ptr, ptr %16, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 632, ptr %77)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %79 = load i32, ptr %.reload7, align 4
  %80 = getelementptr ptr, ptr %77, i32 %79
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = call { ptr } %83(ptr %76) #16
  store { ptr } %84, ptr %10, align 8
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %85 = load ptr, ptr %.reload13, align 8
  %86 = load ptr, ptr %16, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 632, ptr %86)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %88 = load i32, ptr %.reload6, align 4
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = getelementptr ptr, ptr %89, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr { ptr, ptr }, ptr %91, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = call i32 %93(ptr %85) #16
  store i32 %94, ptr %11, align 4
  %95 = load ptr, ptr %10, align 8
  %96 = load i32, ptr %11, align 4
  %97 = sext i32 %96 to i64
  %98 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %97
  %99 = getelementptr i8, ptr %95, i64 %98
  %100 = load i8, ptr %99, align 1
  store i8 %100, ptr %12, align 1
  %101 = load i8, ptr %12, align 1
  store i8 %101, ptr %13, align 1
  store ptr @i8_typ, ptr %14, align 8
  %102 = load ptr, ptr %14, align 8
  %103 = insertvalue { ptr, i8 } undef, ptr %102, 0
  %104 = load i8, ptr %13, align 1
  %105 = insertvalue { ptr, i8 } %103, i8 %104, 1
  store { ptr, i8 } %105, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i8 }, ptr %.reg2mem1, align 8
  store { ptr, i8 } %.reload2, ptr %.reg2mem19, align 8
  br label %106

106:                                              ; preds = %52, %46
  %.reload20 = load { ptr, i8 }, ptr %.reg2mem19, align 8
  store { ptr, i8 } %.reload20, ptr %.reg2mem, align 8
  br label %107

107:                                              ; preds = %106
  %.reload = load { ptr, i8 }, ptr %.reg2mem, align 8
  ret { ptr, i8 } %.reload
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca ptr, align 8
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [1 x ptr], align 8
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca [3 x ptr], align 8
  %20 = alloca { ptr, ptr, ptr }, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = alloca i32, align 4
  %23 = alloca ptr, align 8
  %24 = alloca ptr, align 8
  %25 = alloca ptr, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %27, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  store ptr %33, ptr %.reg2mem12, align 8
  %34 = load ptr, ptr %32, align 8
  %.reload20 = load ptr, ptr %.reg2mem12, align 8
  store ptr %34, ptr %.reload20, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr %39, ptr %.reg2mem3, align 8
  %40 = load i32, ptr %38, align 4
  %.reload11 = load ptr, ptr %.reg2mem3, align 8
  store i32 %40, ptr %.reload11, align 4
  call void @set_offset(ptr %28, ptr @String)
  %.reload19 = load ptr, ptr %.reg2mem12, align 8
  %41 = load ptr, ptr %.reload19, align 8
  %42 = load ptr, ptr %28, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 632, ptr %42)
  %.reload10 = load ptr, ptr %.reg2mem3, align 8
  %44 = load i32, ptr %.reload10, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = call i32 %49(ptr %41) #16
  %51 = alloca i32, align 4
  store i32 %50, ptr %51, align 4
  %52 = load i32, ptr %51, align 4
  %53 = sext i32 %52 to i64
  %54 = alloca ptr, align 8
  %55 = mul i64 %53, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %56 = call ptr @bump_malloc(i64 %55)
  store ptr %56, ptr %54, align 8
  %57 = alloca ptr, align 8
  %58 = getelementptr { ptr }, ptr %54, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  store ptr %59, ptr %57, align 8
  %60 = alloca i32, align 4
  store i32 0, ptr %60, align 4
  br label %61

61:                                               ; preds = %._crit_edge1, %3
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  %62 = load ptr, ptr %.reload18, align 8
  %63 = load ptr, ptr %28, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 632, ptr %63)
  %.reload9 = load ptr, ptr %.reg2mem3, align 8
  %65 = load i32, ptr %.reload9, align 4
  %66 = getelementptr ptr, ptr %63, i32 %65
  %67 = getelementptr ptr, ptr %66, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr { ptr, ptr }, ptr %68, i32 0, i32 0
  %70 = load ptr, ptr %69, align 8
  %71 = call i32 %70(ptr %62) #16
  store i32 %71, ptr %4, align 4
  %72 = load i32, ptr %60, align 4
  %73 = load i32, ptr %4, align 4
  %74 = icmp slt i32 %72, %73
  store i1 %74, ptr %5, align 1
  %75 = load i1, ptr %5, align 1
  store i1 %75, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %76, label %._crit_edge

._crit_edge:                                      ; preds = %61
  br label %102

76:                                               ; preds = %61
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %77 = load ptr, ptr %.reload17, align 8
  %78 = load ptr, ptr %28, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 632, ptr %78)
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %80 = load i32, ptr %.reload8, align 4
  %81 = getelementptr ptr, ptr %78, i32 %80
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr } %84(ptr %77) #16
  store { ptr } %85, ptr %6, align 8
  %86 = load ptr, ptr %6, align 8
  %87 = load i32, ptr %60, align 4
  %88 = sext i32 %87 to i64
  %89 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %88
  %90 = getelementptr i8, ptr %86, i64 %89
  %91 = load i8, ptr %90, align 1
  store i8 %91, ptr %7, align 1
  %92 = load ptr, ptr %57, align 8
  %93 = load i32, ptr %60, align 4
  %94 = sext i32 %93 to i64
  %95 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %94
  %96 = getelementptr i8, ptr %92, i64 %95
  %97 = load i8, ptr %7, align 1
  store i8 %97, ptr %96, align 1
  store i32 1, ptr %8, align 4
  %98 = load i32, ptr %60, align 4
  %99 = load i32, ptr %8, align 4
  %100 = add i32 %98, %99
  store i32 %100, ptr %9, align 4
  %101 = load i32, ptr %9, align 4
  store i32 %101, ptr %60, align 4
  br label %102

102:                                              ; preds = %._crit_edge, %76
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %103

._crit_edge1:                                     ; preds = %102
  br label %61

103:                                              ; preds = %102
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %104 = load ptr, ptr %.reload16, align 8
  %105 = load ptr, ptr %28, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 632, ptr %105)
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %107 = load i32, ptr %.reload7, align 4
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = call i32 %112(ptr %104) #16
  store i32 %113, ptr %10, align 4
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %114 = load ptr, ptr %.reload15, align 8
  %115 = load ptr, ptr %28, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 632, ptr %115)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %117 = load i32, ptr %.reload6, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call i32 %122(ptr %114) #16
  store i32 %123, ptr %11, align 4
  store ptr @String, ptr %12, align 8
  %124 = load ptr, ptr %12, align 8
  %125 = getelementptr ptr, ptr %124, i32 6
  %126 = load ptr, ptr %125, align 8
  %127 = call { i64, i64 } @size_wrapper(ptr %126, ptr %12)
  %128 = extractvalue { i64, i64 } %127, 0
  %129 = call ptr @bump_malloc(i64 %128)
  store ptr @String, ptr %16, align 8
  store ptr %129, ptr %15, align 8
  store i32 10, ptr %13, align 4
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %130 = load ptr, ptr %.reload14, align 8
  %131 = load ptr, ptr %28, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 632, ptr %131)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %133 = load i32, ptr %.reload5, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call i32 %138(ptr %130) #16
  store i32 %139, ptr %17, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %140 = load ptr, ptr %.reload13, align 8
  %141 = load ptr, ptr %28, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 632, ptr %141)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %143 = load i32, ptr %.reload4, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr }, ptr %146, i32 0, i32 0
  %148 = load ptr, ptr %147, align 8
  %149 = call i32 %148(ptr %140) #16
  store i32 %149, ptr %18, align 4
  %150 = load ptr, ptr %57, align 8
  %151 = insertvalue { ptr } undef, ptr %150, 0
  %152 = load i32, ptr %17, align 4
  %153 = load i32, ptr %18, align 4
  %154 = load ptr, ptr %16, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %154, 0
  %156 = load ptr, ptr %15, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %156, 1
  %158 = load ptr, ptr %14, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %158, 2
  %160 = load i32, ptr %13, align 4
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, i32 %160, 3
  %162 = getelementptr [3 x ptr], ptr %19, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %162, align 8
  %163 = getelementptr [3 x ptr], ptr %19, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %163, align 8
  %164 = getelementptr [3 x ptr], ptr %19, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %164, align 8
  %165 = call ptr @llvm.invariant.start.p0(i64 9, ptr %19)
  %166 = call ptr @llvm.invariant.start.p0(i64 632, ptr %154)
  %167 = getelementptr ptr, ptr %154, i32 %160
  %168 = getelementptr ptr, ptr %167, i32 6
  %169 = load ptr, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 0
  store ptr @buffer_typ, ptr %170, align 8
  %171 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 1
  store ptr @i32_typ, ptr %171, align 8
  %172 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  store ptr @i32_typ, ptr %172, align 8
  %173 = call ptr @behavior_wrapper(ptr %169, { ptr, ptr, ptr, i32 } %161, ptr %20)
  call void %173({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr %19, { ptr } %151, i32 %152, i32 %153) #17
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %175 = load ptr, ptr %16, align 8
  store ptr %175, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %177 = load ptr, ptr %15, align 8
  store ptr %177, ptr %176, align 8
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %179 = load ptr, ptr %14, align 8
  store ptr %179, ptr %178, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %181 = load i32, ptr %13, align 4
  store i32 %181, ptr %180, align 4
  call void @set_offset(ptr %21, ptr @String)
  %182 = load ptr, ptr %174, align 8
  store ptr %182, ptr %25, align 8
  %183 = load ptr, ptr %176, align 8
  store ptr %183, ptr %24, align 8
  %184 = load ptr, ptr %178, align 8
  store ptr %184, ptr %23, align 8
  %185 = load i32, ptr %180, align 4
  store i32 %185, ptr %22, align 4
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %187 = load ptr, ptr %25, align 8
  store ptr %187, ptr %186, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %189 = load ptr, ptr %24, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %191 = load ptr, ptr %23, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %193 = load i32, ptr %22, align 4
  store i32 %193, ptr %192, align 4
  call void @set_offset(ptr %26, ptr @String)
  %194 = load ptr, ptr %186, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %194, 0
  %196 = load ptr, ptr %188, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %196, 1
  %198 = load ptr, ptr %190, align 8
  %199 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %198, 2
  %200 = load i32, ptr %192, align 4
  %201 = insertvalue { ptr, ptr, ptr, i32 } %199, i32 %200, 3
  ret { ptr, ptr, ptr, i32 } %201
}

define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca [1 x ptr], align 8
  store ptr @StringIterator, ptr %18, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 6
  %21 = load ptr, ptr %20, align 8
  %22 = call { i64, i64 } @size_wrapper(ptr %21, ptr %18)
  %23 = extractvalue { i64, i64 } %22, 0
  %24 = call ptr @bump_malloc(i64 %23)
  %25 = alloca i32, align 4
  %26 = alloca ptr, align 8
  %27 = alloca ptr, align 8
  %28 = alloca ptr, align 8
  store ptr @StringIterator, ptr %28, align 8
  store ptr %24, ptr %27, align 8
  store i32 10, ptr %25, align 4
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %31 = load ptr, ptr %7, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %33 = load ptr, ptr %10, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %35 = load ptr, ptr %13, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %37 = load i32, ptr %16, align 4
  store i32 %37, ptr %36, align 4
  call void @set_offset(ptr %29, ptr @String)
  %38 = load ptr, ptr %30, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 1
  %42 = load ptr, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 2
  %44 = load i32, ptr %36, align 4
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %44, 3
  %46 = load ptr, ptr %28, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = load ptr, ptr %27, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 1
  %50 = load ptr, ptr %26, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 2
  %52 = load i32, ptr %25, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %52, 3
  %54 = alloca [1 x ptr], align 8
  %55 = getelementptr [1 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_String, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 1, ptr %54)
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr %46)
  %58 = getelementptr ptr, ptr %46, i32 %52
  %59 = getelementptr ptr, ptr %58, i32 3
  %60 = load ptr, ptr %59, align 8
  %61 = alloca { ptr }, align 8
  %62 = getelementptr { ptr }, ptr %61, i32 0, i32 0
  store ptr %38, ptr %62, align 8
  %63 = call ptr @behavior_wrapper(ptr %60, { ptr, ptr, ptr, i32 } %53, ptr %61)
  call void %63({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr, ptr, ptr, i32 } %45) #17
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %28, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %68 = load ptr, ptr %27, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %70 = load ptr, ptr %26, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %72 = load i32, ptr %25, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %64, ptr @Iterator)
  %73 = load ptr, ptr %65, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %67, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %69, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %71, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  ret { ptr, ptr, ptr, i32 } %80
}

define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %7, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %22 = load ptr, ptr %10, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %24 = load ptr, ptr %13, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %26 = load i32, ptr %16, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %18, ptr @String)
  %27 = load ptr, ptr %19, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %21, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %25, align 4
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  ret { ptr, ptr, ptr, i32 } %34
}

define { i64, i64 } @_data_size_StringIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @StringIterator_field_StringIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_Character
}

define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 5, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [10 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @StringIterator)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @String)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 80, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %34, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %36, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %38, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %40, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  call void %49(ptr %42, { ptr, ptr, ptr, i32 } %57) #15
  %58 = alloca i32, align 4
  store i32 0, ptr %58, align 4
  %59 = load ptr, ptr %11, align 8
  %60 = load ptr, ptr %6, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 80, ptr %60)
  %62 = load i32, ptr %17, align 4
  %63 = getelementptr ptr, ptr %60, i32 %62
  %64 = getelementptr ptr, ptr %63, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = load i32, ptr %58, align 4
  call void %67(ptr %59, i32 %68) #15
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [0 x ptr], align 8
  %9 = alloca {}, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca [0 x ptr], align 8
  %19 = alloca {}, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i8, align 1
  %25 = alloca [1 x ptr], align 8
  %26 = alloca { ptr }, align 8
  %27 = alloca [0 x i8], align 1
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem25 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %30, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  store ptr %36, ptr %.reg2mem15, align 8
  %37 = load ptr, ptr %35, align 8
  %.reload24 = load ptr, ptr %.reg2mem15, align 8
  store ptr %37, ptr %.reload24, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  store ptr %42, ptr %.reg2mem5, align 8
  %43 = load i32, ptr %41, align 4
  %.reload14 = load ptr, ptr %.reg2mem5, align 8
  store i32 %43, ptr %.reload14, align 4
  call void @set_offset(ptr %31, ptr @StringIterator)
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  %44 = load ptr, ptr %.reload23, align 8
  %45 = load ptr, ptr %31, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 80, ptr %45)
  %.reload13 = load ptr, ptr %.reg2mem5, align 8
  %47 = load i32, ptr %.reload13, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %44) #16
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %55 = load ptr, ptr %.reload22, align 8
  %56 = load ptr, ptr %31, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr %56)
  %.reload12 = load ptr, ptr %.reg2mem5, align 8
  %58 = load i32, ptr %.reload12, align 4
  %59 = getelementptr ptr, ptr %56, i32 %58
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call { ptr, ptr, ptr, i32 } %62(ptr %55) #16
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %63, ptr %64, align 8
  call void @assume_offset(ptr %64, ptr @String)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %69, 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 2
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %75, 3
  %77 = alloca [0 x ptr], align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 0, ptr %77)
  %79 = call ptr @llvm.invariant.start.p0(i64 632, ptr %66)
  %80 = getelementptr ptr, ptr %66, i32 %75
  %81 = getelementptr ptr, ptr %80, i32 7
  %82 = load ptr, ptr %81, align 8
  %83 = alloca {}, align 8
  %84 = call ptr @behavior_wrapper(ptr %82, { ptr, ptr, ptr, i32 } %76, ptr %83)
  %85 = call i32 %84({ ptr, ptr, ptr, i32 } %76, { ptr, ptr, ptr, i32 } %76, ptr %77) #17
  %86 = alloca i32, align 4
  store i32 %85, ptr %86, align 4
  %87 = load i32, ptr %54, align 4
  %88 = load i32, ptr %86, align 4
  %89 = icmp slt i32 %87, %88
  %90 = alloca i1, align 1
  store i1 %89, ptr %90, align 1
  %91 = load i1, ptr %90, align 1
  br i1 %91, label %92, label %243

92:                                               ; preds = %3
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %93 = load ptr, ptr %.reload21, align 8
  %94 = load ptr, ptr %31, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 80, ptr %94)
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  %96 = load i32, ptr %.reload11, align 4
  %97 = getelementptr ptr, ptr %94, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = call i32 %101(ptr %93) #16
  store i32 %102, ptr %4, align 4
  store i32 1, ptr %5, align 4
  %103 = load i32, ptr %4, align 4
  %104 = load i32, ptr %5, align 4
  %105 = add i32 %103, %104
  store i32 %105, ptr %6, align 4
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  %106 = load ptr, ptr %.reload20, align 8
  %107 = load ptr, ptr %31, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 80, ptr %107)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %109 = load i32, ptr %.reload10, align 4
  %110 = getelementptr ptr, ptr %107, i32 %109
  %111 = getelementptr ptr, ptr %110, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = load i32, ptr %6, align 4
  call void %114(ptr %106, i32 %115) #15
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %116 = load ptr, ptr %.reload19, align 8
  %117 = load ptr, ptr %31, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 80, ptr %117)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %119 = load i32, ptr %.reload9, align 4
  %120 = getelementptr ptr, ptr %117, i32 %119
  %121 = load ptr, ptr %120, align 8
  %122 = getelementptr { ptr, ptr }, ptr %121, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = call { ptr, ptr, ptr, i32 } %123(ptr %116) #16
  store { ptr, ptr, ptr, i32 } %124, ptr %7, align 8
  call void @assume_offset(ptr %7, ptr @String)
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %126, 0
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 2
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %135 = load i32, ptr %134, align 4
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %135, 3
  %137 = call ptr @llvm.invariant.start.p0(i64 0, ptr %8)
  %138 = call ptr @llvm.invariant.start.p0(i64 632, ptr %126)
  %139 = getelementptr ptr, ptr %126, i32 %135
  %140 = getelementptr ptr, ptr %139, i32 9
  %141 = load ptr, ptr %140, align 8
  %142 = call ptr @behavior_wrapper(ptr %141, { ptr, ptr, ptr, i32 } %136, ptr %9)
  %143 = call { ptr } %142({ ptr, ptr, ptr, i32 } %136, { ptr, ptr, ptr, i32 } %136, ptr %8) #17
  store { ptr } %143, ptr %10, align 8
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %144 = load ptr, ptr %.reload18, align 8
  %145 = load ptr, ptr %31, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 80, ptr %145)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %147 = load i32, ptr %.reload8, align 4
  %148 = getelementptr ptr, ptr %145, i32 %147
  %149 = getelementptr ptr, ptr %148, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = call i32 %152(ptr %144) #16
  store i32 %153, ptr %11, align 4
  store i32 1, ptr %12, align 4
  %154 = load i32, ptr %11, align 4
  %155 = load i32, ptr %12, align 4
  %156 = sub i32 %154, %155
  store i32 %156, ptr %13, align 4
  %157 = load ptr, ptr %10, align 8
  %158 = load i32, ptr %13, align 4
  %159 = sext i32 %158 to i64
  %160 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %159
  %161 = getelementptr i8, ptr %157, i64 %160
  %162 = load i8, ptr %161, align 1
  store i8 %162, ptr %14, align 1
  store ptr @Character, ptr %15, align 8
  %163 = load ptr, ptr %15, align 8
  %164 = getelementptr ptr, ptr %163, i32 6
  %165 = load ptr, ptr %164, align 8
  %166 = call { i64, i64 } @size_wrapper(ptr %165, ptr %15)
  %167 = extractvalue { i64, i64 } %166, 0
  %168 = call ptr @bump_malloc(i64 %167)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr @Character, ptr %16, align 8
  store ptr %168, ptr %169, align 8
  store i32 10, ptr %170, align 4
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %171 = load ptr, ptr %.reload17, align 8
  %172 = load ptr, ptr %31, align 8
  %173 = call ptr @llvm.invariant.start.p0(i64 80, ptr %172)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %174 = load i32, ptr %.reload7, align 4
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = load ptr, ptr %175, align 8
  %177 = getelementptr { ptr, ptr }, ptr %176, i32 0, i32 0
  %178 = load ptr, ptr %177, align 8
  %179 = call { ptr, ptr, ptr, i32 } %178(ptr %171) #16
  store { ptr, ptr, ptr, i32 } %179, ptr %17, align 8
  call void @assume_offset(ptr %17, ptr @String)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %184, 1
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 2
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %190 = load i32, ptr %189, align 4
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, i32 %190, 3
  %192 = call ptr @llvm.invariant.start.p0(i64 0, ptr %18)
  %193 = call ptr @llvm.invariant.start.p0(i64 632, ptr %181)
  %194 = getelementptr ptr, ptr %181, i32 %190
  %195 = getelementptr ptr, ptr %194, i32 9
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr @behavior_wrapper(ptr %196, { ptr, ptr, ptr, i32 } %191, ptr %19)
  %198 = call { ptr } %197({ ptr, ptr, ptr, i32 } %191, { ptr, ptr, ptr, i32 } %191, ptr %18) #17
  store { ptr } %198, ptr %20, align 8
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %199 = load ptr, ptr %.reload16, align 8
  %200 = load ptr, ptr %31, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 80, ptr %200)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %202 = load i32, ptr %.reload6, align 4
  %203 = getelementptr ptr, ptr %200, i32 %202
  %204 = getelementptr ptr, ptr %203, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = getelementptr { ptr, ptr }, ptr %205, i32 0, i32 0
  %207 = load ptr, ptr %206, align 8
  %208 = call i32 %207(ptr %199) #16
  store i32 %208, ptr %21, align 4
  store i32 1, ptr %22, align 4
  %209 = load i32, ptr %21, align 4
  %210 = load i32, ptr %22, align 4
  %211 = sub i32 %209, %210
  store i32 %211, ptr %23, align 4
  %212 = load ptr, ptr %20, align 8
  %213 = load i32, ptr %23, align 4
  %214 = sext i32 %213 to i64
  %215 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %214
  %216 = getelementptr i8, ptr %212, i64 %215
  %217 = load i8, ptr %216, align 1
  store i8 %217, ptr %24, align 1
  %218 = load i8, ptr %24, align 1
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %220 = load ptr, ptr %219, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %220, 0
  %222 = load ptr, ptr %169, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } %221, ptr %222, 1
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %225 = load ptr, ptr %224, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %225, 2
  %227 = load i32, ptr %170, align 4
  %228 = insertvalue { ptr, ptr, ptr, i32 } %226, i32 %227, 3
  %229 = getelementptr [1 x ptr], ptr %25, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %229, align 8
  %230 = call ptr @llvm.invariant.start.p0(i64 1, ptr %25)
  %231 = call ptr @llvm.invariant.start.p0(i64 40, ptr %220)
  %232 = getelementptr ptr, ptr %220, i32 %227
  %233 = getelementptr ptr, ptr %232, i32 2
  %234 = load ptr, ptr %233, align 8
  %235 = getelementptr { ptr }, ptr %26, i32 0, i32 0
  store ptr @i8_typ, ptr %235, align 8
  %236 = call ptr @behavior_wrapper(ptr %234, { ptr, ptr, ptr, i32 } %228, ptr %26)
  call void %236({ ptr, ptr, ptr, i32 } %228, { ptr, ptr, ptr, i32 } %228, ptr %25, i8 %218) #17
  %237 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %238 = load ptr, ptr %237, align 8
  %239 = insertvalue { ptr, i160 } undef, ptr %238, 0
  %240 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %241 = load i160, ptr %240, align 4
  %242 = insertvalue { ptr, i160 } %239, i160 %241, 1
  store { ptr, i160 } %242, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem25, align 8
  br label %249

243:                                              ; preds = %3
  %244 = load [0 x i8], ptr %27, align 1
  store [0 x i8] %244, ptr %28, align 1
  store ptr @nil_typ, ptr %29, align 8
  %245 = load ptr, ptr %29, align 8
  %246 = insertvalue { ptr, i160 } undef, ptr %245, 0
  %247 = load i160, ptr %28, align 4
  %248 = insertvalue { ptr, i160 } %246, i160 %247, 1
  store { ptr, i160 } %248, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem25, align 8
  br label %249

249:                                              ; preds = %243, %92
  %.reload26 = load { ptr, i160 }, ptr %.reg2mem25, align 8
  store { ptr, i160 } %.reload26, ptr %.reg2mem, align 8
  br label %250

250:                                              ; preds = %249
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { i64, i64 } @_data_size_Character(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 3, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [5 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Character_B_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i8_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 4, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [5 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Character)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 40, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i8 %25(ptr %18) #16
  %27 = alloca i8, align 1
  store i8 %26, ptr %27, align 1
  %28 = load i8, ptr %27, align 1
  ret i8 %28
}

define void @Character_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Character)
  %19 = alloca i8, align 1
  store i8 %3, ptr %19, align 1
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 40, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = load i8, ptr %19, align 1
  call void %27(ptr %20, i8 %28) #15
  ret void
}

define i8 @Character_getter_byte(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i8, ptr %2, align 1
  ret i8 %3
}

define void @Character_setter_byte(ptr %0, i8 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i8, align 1
  store i8 %1, ptr %4, align 1
  %5 = load i8, ptr %4, align 1
  store i8 %5, ptr %3, align 1
  ret void
}

define i32 @StringIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @StringIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @StringIterator_setter_str(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define i32 @String_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @String_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define i32 @String_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @String_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define { ptr } @String_getter_bytes(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @String_setter_bytes(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define { i64, i64 } @_data_size_Exception(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 8, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [13 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Exception_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 1
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 2
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 0
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 1
  %16 = load i64, ptr %12, align 4
  %17 = load i64, ptr %13, align 4
  %18 = load ptr, ptr %14, align 8
  %19 = load ptr, ptr %15, align 8
  %20 = load i64, ptr @String, align 4
  %21 = call i1 @subtype_test_wrapper(ptr %18, i64 %17, i64 %16, i64 %20, i64 ptrtoint (ptr @String to i64), ptr %19)
  store i1 %21, ptr %3, align 1
  store i32 10, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [13 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 11, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @String)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 104, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %34, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %36, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %38, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %40, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %42, { ptr, ptr, ptr, i32 } %58) #15
  %59 = alloca i32, align 4
  store i32 0, ptr %59, align 4
  %60 = load ptr, ptr %11, align 8
  %61 = load ptr, ptr %6, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 104, ptr %61)
  %63 = load i32, ptr %17, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = load i32, ptr %59, align 4
  call void %67(ptr %60, i32 %68) #15
  %69 = alloca i32, align 4
  store i32 1, ptr %69, align 4
  %70 = load i32, ptr %69, align 4
  %71 = sext i32 %70 to i64
  %72 = alloca ptr, align 8
  %73 = mul i64 %71, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %74 = call ptr @bump_malloc(i64 %73)
  store ptr %74, ptr %72, align 8
  %75 = alloca ptr, align 8
  %76 = getelementptr { ptr }, ptr %72, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  store ptr %77, ptr %75, align 8
  %78 = alloca i32, align 4
  store i32 0, ptr %78, align 4
  %79 = alloca i32, align 4
  store i32 0, ptr %79, align 4
  %80 = alloca i32, align 4
  store i32 1, ptr %80, align 4
  %81 = alloca [1 x ptr], align 8
  store ptr @String, ptr %81, align 8
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr ptr, ptr %82, i32 6
  %84 = load ptr, ptr %83, align 8
  %85 = call { i64, i64 } @size_wrapper(ptr %84, ptr %81)
  %86 = extractvalue { i64, i64 } %85, 0
  %87 = call ptr @bump_malloc(i64 %86)
  %88 = alloca i32, align 4
  %89 = alloca ptr, align 8
  %90 = alloca ptr, align 8
  %91 = alloca ptr, align 8
  store ptr @String, ptr %91, align 8
  store ptr %87, ptr %90, align 8
  store i32 10, ptr %88, align 4
  %92 = alloca i32, align 4
  store i32 0, ptr %92, align 4
  %93 = alloca i32, align 4
  store i32 1, ptr %93, align 4
  %94 = load ptr, ptr %75, align 8
  %95 = insertvalue { ptr } undef, ptr %94, 0
  %96 = load i32, ptr %92, align 4
  %97 = load i32, ptr %93, align 4
  %98 = load ptr, ptr %91, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = load ptr, ptr %90, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 1
  %102 = load ptr, ptr %89, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %102, 2
  %104 = load i32, ptr %88, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %104, 3
  %106 = alloca [3 x ptr], align 8
  %107 = getelementptr [3 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %107, align 8
  %108 = getelementptr [3 x ptr], ptr %106, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %108, align 8
  %109 = getelementptr [3 x ptr], ptr %106, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 9, ptr %106)
  %111 = call ptr @llvm.invariant.start.p0(i64 632, ptr %98)
  %112 = getelementptr ptr, ptr %98, i32 %104
  %113 = getelementptr ptr, ptr %112, i32 6
  %114 = load ptr, ptr %113, align 8
  %115 = alloca { ptr, ptr, ptr }, align 8
  %116 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 0
  store ptr @buffer_typ, ptr %116, align 8
  %117 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 1
  store ptr @i32_typ, ptr %117, align 8
  %118 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 2
  store ptr @i32_typ, ptr %118, align 8
  %119 = call ptr @behavior_wrapper(ptr %114, { ptr, ptr, ptr, i32 } %105, ptr %115)
  call void %119({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr %106, { ptr } %95, i32 %96, i32 %97) #17
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %91, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %124 = load ptr, ptr %90, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %126 = load ptr, ptr %89, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %128 = load i32, ptr %88, align 4
  store i32 %128, ptr %127, align 4
  call void @set_offset(ptr %120, ptr @String)
  %129 = load ptr, ptr %11, align 8
  %130 = load ptr, ptr %6, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 104, ptr %130)
  %132 = load i32, ptr %17, align 4
  %133 = getelementptr ptr, ptr %130, i32 %132
  %134 = getelementptr ptr, ptr %133, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr, ptr }, ptr %135, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = load ptr, ptr %121, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %140 = load ptr, ptr %123, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %140, 1
  %142 = load ptr, ptr %125, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %142, 2
  %144 = load i32, ptr %127, align 4
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, i32 %144, 3
  call void %137(ptr %129, { ptr, ptr, ptr, i32 } %145) #15
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %18 = alloca i32, align 4
  store i32 0, ptr %18, align 4
  %19 = load ptr, ptr %10, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 104, ptr %20)
  %22 = load i32, ptr %16, align 4
  %23 = getelementptr ptr, ptr %20, i32 %22
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = load i32, ptr %18, align 4
  call void %26(ptr %19, i32 %27) #15
  %28 = alloca i32, align 4
  store i32 7, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  %30 = sext i32 %29 to i64
  %31 = alloca ptr, align 8
  %32 = mul i64 %30, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %33 = call ptr @bump_malloc(i64 %32)
  store ptr %33, ptr %31, align 8
  %34 = alloca ptr, align 8
  %35 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  store ptr %36, ptr %34, align 8
  %37 = alloca i32, align 4
  store i32 0, ptr %37, align 4
  %38 = load ptr, ptr %34, align 8
  %39 = load i32, ptr %37, align 4
  %40 = sext i32 %39 to i64
  %41 = mul i64 ptrtoint (ptr getelementptr ([6 x i8], ptr null, i32 1) to i64), %40
  %42 = getelementptr i8, ptr %38, i64 %41
  %43 = load <6 x i8>, ptr @hactn_None, align 8
  store <6 x i8> %43, ptr %42, align 8
  %44 = alloca i32, align 4
  store i32 6, ptr %44, align 4
  %45 = alloca i32, align 4
  store i32 7, ptr %45, align 4
  %46 = alloca [1 x ptr], align 8
  store ptr @String, ptr %46, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr ptr, ptr %47, i32 6
  %49 = load ptr, ptr %48, align 8
  %50 = call { i64, i64 } @size_wrapper(ptr %49, ptr %46)
  %51 = extractvalue { i64, i64 } %50, 0
  %52 = call ptr @bump_malloc(i64 %51)
  %53 = alloca i32, align 4
  %54 = alloca ptr, align 8
  %55 = alloca ptr, align 8
  %56 = alloca ptr, align 8
  store ptr @String, ptr %56, align 8
  store ptr %52, ptr %55, align 8
  store i32 10, ptr %53, align 4
  %57 = alloca i32, align 4
  store i32 6, ptr %57, align 4
  %58 = alloca i32, align 4
  store i32 7, ptr %58, align 4
  %59 = load ptr, ptr %34, align 8
  %60 = insertvalue { ptr } undef, ptr %59, 0
  %61 = load i32, ptr %57, align 4
  %62 = load i32, ptr %58, align 4
  %63 = load ptr, ptr %56, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %63, 0
  %65 = load ptr, ptr %55, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %65, 1
  %67 = load ptr, ptr %54, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %67, 2
  %69 = load i32, ptr %53, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %69, 3
  %71 = alloca [3 x ptr], align 8
  %72 = getelementptr [3 x ptr], ptr %71, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %72, align 8
  %73 = getelementptr [3 x ptr], ptr %71, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %73, align 8
  %74 = getelementptr [3 x ptr], ptr %71, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 9, ptr %71)
  %76 = call ptr @llvm.invariant.start.p0(i64 632, ptr %63)
  %77 = getelementptr ptr, ptr %63, i32 %69
  %78 = getelementptr ptr, ptr %77, i32 6
  %79 = load ptr, ptr %78, align 8
  %80 = alloca { ptr, ptr, ptr }, align 8
  %81 = getelementptr { ptr, ptr, ptr }, ptr %80, i32 0, i32 0
  store ptr @buffer_typ, ptr %81, align 8
  %82 = getelementptr { ptr, ptr, ptr }, ptr %80, i32 0, i32 1
  store ptr @i32_typ, ptr %82, align 8
  %83 = getelementptr { ptr, ptr, ptr }, ptr %80, i32 0, i32 2
  store ptr @i32_typ, ptr %83, align 8
  %84 = call ptr @behavior_wrapper(ptr %79, { ptr, ptr, ptr, i32 } %70, ptr %80)
  call void %84({ ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %70, ptr %71, { ptr } %60, i32 %61, i32 %62) #17
  %85 = alloca { ptr, ptr, ptr, i32 }, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 0
  %87 = load ptr, ptr %56, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 1
  %89 = load ptr, ptr %55, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 2
  %91 = load ptr, ptr %54, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 3
  %93 = load i32, ptr %53, align 4
  store i32 %93, ptr %92, align 4
  call void @set_offset(ptr %85, ptr @String)
  %94 = load ptr, ptr %10, align 8
  %95 = load ptr, ptr %5, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 104, ptr %95)
  %97 = load i32, ptr %16, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 2
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %86, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = load ptr, ptr %88, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %105, 1
  %107 = load ptr, ptr %90, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %107, 2
  %109 = load i32, ptr %92, align 4
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, i32 %109, 3
  call void %102(ptr %94, { ptr, ptr, ptr, i32 } %110) #15
  %111 = alloca i32, align 4
  store i32 1, ptr %111, align 4
  %112 = load i32, ptr %111, align 4
  %113 = sext i32 %112 to i64
  %114 = alloca ptr, align 8
  %115 = mul i64 %113, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %116 = call ptr @bump_malloc(i64 %115)
  store ptr %116, ptr %114, align 8
  %117 = alloca ptr, align 8
  %118 = getelementptr { ptr }, ptr %114, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  store ptr %119, ptr %117, align 8
  %120 = alloca i32, align 4
  store i32 0, ptr %120, align 4
  %121 = alloca i32, align 4
  store i32 0, ptr %121, align 4
  %122 = alloca i32, align 4
  store i32 1, ptr %122, align 4
  %123 = alloca [1 x ptr], align 8
  store ptr @String, ptr %123, align 8
  %124 = load ptr, ptr %123, align 8
  %125 = getelementptr ptr, ptr %124, i32 6
  %126 = load ptr, ptr %125, align 8
  %127 = call { i64, i64 } @size_wrapper(ptr %126, ptr %123)
  %128 = extractvalue { i64, i64 } %127, 0
  %129 = call ptr @bump_malloc(i64 %128)
  %130 = alloca i32, align 4
  %131 = alloca ptr, align 8
  %132 = alloca ptr, align 8
  %133 = alloca ptr, align 8
  store ptr @String, ptr %133, align 8
  store ptr %129, ptr %132, align 8
  store i32 10, ptr %130, align 4
  %134 = alloca i32, align 4
  store i32 0, ptr %134, align 4
  %135 = alloca i32, align 4
  store i32 1, ptr %135, align 4
  %136 = load ptr, ptr %117, align 8
  %137 = insertvalue { ptr } undef, ptr %136, 0
  %138 = load i32, ptr %134, align 4
  %139 = load i32, ptr %135, align 4
  %140 = load ptr, ptr %133, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %140, 0
  %142 = load ptr, ptr %132, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %142, 1
  %144 = load ptr, ptr %131, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %144, 2
  %146 = load i32, ptr %130, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 %146, 3
  %148 = alloca [3 x ptr], align 8
  %149 = getelementptr [3 x ptr], ptr %148, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %149, align 8
  %150 = getelementptr [3 x ptr], ptr %148, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %150, align 8
  %151 = getelementptr [3 x ptr], ptr %148, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 9, ptr %148)
  %153 = call ptr @llvm.invariant.start.p0(i64 632, ptr %140)
  %154 = getelementptr ptr, ptr %140, i32 %146
  %155 = getelementptr ptr, ptr %154, i32 6
  %156 = load ptr, ptr %155, align 8
  %157 = alloca { ptr, ptr, ptr }, align 8
  %158 = getelementptr { ptr, ptr, ptr }, ptr %157, i32 0, i32 0
  store ptr @buffer_typ, ptr %158, align 8
  %159 = getelementptr { ptr, ptr, ptr }, ptr %157, i32 0, i32 1
  store ptr @i32_typ, ptr %159, align 8
  %160 = getelementptr { ptr, ptr, ptr }, ptr %157, i32 0, i32 2
  store ptr @i32_typ, ptr %160, align 8
  %161 = call ptr @behavior_wrapper(ptr %156, { ptr, ptr, ptr, i32 } %147, ptr %157)
  call void %161({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %148, { ptr } %137, i32 %138, i32 %139) #17
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %164 = load ptr, ptr %133, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %166 = load ptr, ptr %132, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %168 = load ptr, ptr %131, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %170 = load i32, ptr %130, align 4
  store i32 %170, ptr %169, align 4
  call void @set_offset(ptr %162, ptr @String)
  %171 = load ptr, ptr %10, align 8
  %172 = load ptr, ptr %5, align 8
  %173 = call ptr @llvm.invariant.start.p0(i64 104, ptr %172)
  %174 = load i32, ptr %16, align 4
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = getelementptr ptr, ptr %175, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = getelementptr { ptr, ptr }, ptr %177, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %163, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %180, 0
  %182 = load ptr, ptr %165, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %182, 1
  %184 = load ptr, ptr %167, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %183, ptr %184, 2
  %186 = load i32, ptr %169, align 4
  %187 = insertvalue { ptr, ptr, ptr, i32 } %185, i32 %186, 3
  call void %179(ptr %171, { ptr, ptr, ptr, i32 } %187) #15
  ret void
}

define void @Exception_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Exception)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %20, align 4
  call void %28(ptr %21, i32 %29) #15
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %30, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %41, align 4
  store i32 %43, ptr %42, align 4
  call void @set_offset(ptr %31, ptr @String)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %33, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %48 = load ptr, ptr %36, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %50 = load ptr, ptr %39, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %52 = load i32, ptr %42, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %44, ptr @String)
  %53 = load ptr, ptr %12, align 8
  %54 = load ptr, ptr %7, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 104, ptr %54)
  %56 = load i32, ptr %18, align 4
  %57 = getelementptr ptr, ptr %54, i32 %56
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr }, ptr %59, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %45, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %47, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %49, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %51, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %53, { ptr, ptr, ptr, i32 } %69) #15
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %18 = alloca i32, align 4
  store i32 10, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([9 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <9 x i8>, ptr @etggt_, align 16
  store <9 x i8> %33, ptr %32, align 16
  %34 = alloca i32, align 4
  store i32 9, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 10, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca i32, align 4
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  store ptr @String, ptr %46, align 8
  store ptr %42, ptr %45, align 8
  store i32 10, ptr %43, align 4
  %47 = alloca i32, align 4
  store i32 9, ptr %47, align 4
  %48 = alloca i32, align 4
  store i32 10, ptr %48, align 4
  %49 = load ptr, ptr %24, align 8
  %50 = insertvalue { ptr } undef, ptr %49, 0
  %51 = load i32, ptr %47, align 4
  %52 = load i32, ptr %48, align 4
  %53 = load ptr, ptr %46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %45, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %44, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %43, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca [3 x ptr], align 8
  %62 = getelementptr [3 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %61, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %61, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr %61)
  %66 = call ptr @llvm.invariant.start.p0(i64 632, ptr %53)
  %67 = getelementptr ptr, ptr %53, i32 %59
  %68 = getelementptr ptr, ptr %67, i32 6
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr, ptr, ptr }, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 2
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %60, ptr %70)
  call void %74({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr } %50, i32 %51, i32 %52) #17
  %75 = load ptr, ptr %46, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = load ptr, ptr %45, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 1
  %79 = load ptr, ptr %44, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %79, 2
  %81 = load i32, ptr %43, align 4
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %81, 3
  %83 = alloca [0 x ptr], align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 0, ptr %83)
  %85 = call ptr @llvm.invariant.start.p0(i64 632, ptr %75)
  %86 = getelementptr ptr, ptr %75, i32 %81
  %87 = getelementptr ptr, ptr %86, i32 10
  %88 = load ptr, ptr %87, align 8
  %89 = alloca {}, align 8
  %90 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %82, ptr %89)
  %91 = call { ptr } %90({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr %83) #17
  %92 = alloca ptr, align 8
  store { ptr } %91, ptr %92, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %93)
  %95 = alloca i32, align 4
  store i32 27, ptr %95, align 4
  %96 = load i32, ptr %95, align 4
  %97 = sext i32 %96 to i64
  %98 = alloca ptr, align 8
  %99 = mul i64 %97, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %100 = call ptr @bump_malloc(i64 %99)
  store ptr %100, ptr %98, align 8
  %101 = alloca ptr, align 8
  %102 = getelementptr { ptr }, ptr %98, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  store ptr %103, ptr %101, align 8
  %104 = alloca i32, align 4
  store i32 0, ptr %104, align 4
  %105 = load ptr, ptr %101, align 8
  %106 = load i32, ptr %104, align 4
  %107 = sext i32 %106 to i64
  %108 = mul i64 ptrtoint (ptr getelementptr ([26 x i8], ptr null, i32 1) to i64), %107
  %109 = getelementptr i8, ptr %105, i64 %108
  %110 = load <26 x i8>, ptr @vxjuo_Exception_thrown_from_file, align 32
  store <26 x i8> %110, ptr %109, align 32
  %111 = alloca i32, align 4
  store i32 26, ptr %111, align 4
  %112 = alloca i32, align 4
  store i32 27, ptr %112, align 4
  %113 = alloca [1 x ptr], align 8
  store ptr @String, ptr %113, align 8
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr ptr, ptr %114, i32 6
  %116 = load ptr, ptr %115, align 8
  %117 = call { i64, i64 } @size_wrapper(ptr %116, ptr %113)
  %118 = extractvalue { i64, i64 } %117, 0
  %119 = call ptr @bump_malloc(i64 %118)
  %120 = alloca i32, align 4
  %121 = alloca ptr, align 8
  %122 = alloca ptr, align 8
  %123 = alloca ptr, align 8
  store ptr @String, ptr %123, align 8
  store ptr %119, ptr %122, align 8
  store i32 10, ptr %120, align 4
  %124 = alloca i32, align 4
  store i32 26, ptr %124, align 4
  %125 = alloca i32, align 4
  store i32 27, ptr %125, align 4
  %126 = load ptr, ptr %101, align 8
  %127 = insertvalue { ptr } undef, ptr %126, 0
  %128 = load i32, ptr %124, align 4
  %129 = load i32, ptr %125, align 4
  %130 = load ptr, ptr %123, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %132 = load ptr, ptr %122, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %132, 1
  %134 = load ptr, ptr %121, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %134, 2
  %136 = load i32, ptr %120, align 4
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %136, 3
  %138 = alloca [3 x ptr], align 8
  %139 = getelementptr [3 x ptr], ptr %138, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %138, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %140, align 8
  %141 = getelementptr [3 x ptr], ptr %138, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %141, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 9, ptr %138)
  %143 = call ptr @llvm.invariant.start.p0(i64 632, ptr %130)
  %144 = getelementptr ptr, ptr %130, i32 %136
  %145 = getelementptr ptr, ptr %144, i32 6
  %146 = load ptr, ptr %145, align 8
  %147 = alloca { ptr, ptr, ptr }, align 8
  %148 = getelementptr { ptr, ptr, ptr }, ptr %147, i32 0, i32 0
  store ptr @buffer_typ, ptr %148, align 8
  %149 = getelementptr { ptr, ptr, ptr }, ptr %147, i32 0, i32 1
  store ptr @i32_typ, ptr %149, align 8
  %150 = getelementptr { ptr, ptr, ptr }, ptr %147, i32 0, i32 2
  store ptr @i32_typ, ptr %150, align 8
  %151 = call ptr @behavior_wrapper(ptr %146, { ptr, ptr, ptr, i32 } %137, ptr %147)
  call void %151({ ptr, ptr, ptr, i32 } %137, { ptr, ptr, ptr, i32 } %137, ptr %138, { ptr } %127, i32 %128, i32 %129) #17
  %152 = load ptr, ptr %123, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %152, 0
  %154 = load ptr, ptr %122, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 1
  %156 = load ptr, ptr %121, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %156, 2
  %158 = load i32, ptr %120, align 4
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, i32 %158, 3
  %160 = alloca [0 x ptr], align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 0, ptr %160)
  %162 = call ptr @llvm.invariant.start.p0(i64 632, ptr %152)
  %163 = getelementptr ptr, ptr %152, i32 %158
  %164 = getelementptr ptr, ptr %163, i32 10
  %165 = load ptr, ptr %164, align 8
  %166 = alloca {}, align 8
  %167 = call ptr @behavior_wrapper(ptr %165, { ptr, ptr, ptr, i32 } %159, ptr %166)
  %168 = call { ptr } %167({ ptr, ptr, ptr, i32 } %159, { ptr, ptr, ptr, i32 } %159, ptr %160) #17
  %169 = alloca ptr, align 8
  store { ptr } %168, ptr %169, align 8
  %170 = load ptr, ptr %169, align 8
  %171 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %170)
  %172 = load ptr, ptr %10, align 8
  %173 = load ptr, ptr %5, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 104, ptr %173)
  %175 = load i32, ptr %16, align 4
  %176 = getelementptr ptr, ptr %173, i32 %175
  %177 = getelementptr ptr, ptr %176, i32 1
  %178 = load ptr, ptr %177, align 8
  %179 = getelementptr { ptr, ptr }, ptr %178, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = call { ptr, ptr, ptr, i32 } %180(ptr %172) #16
  %182 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %181, ptr %182, align 8
  call void @assume_offset(ptr %182, ptr @String)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %184, 0
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 1
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 1
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 2
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %190, 2
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 3
  %193 = load i32, ptr %192, align 4
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, i32 %193, 3
  %195 = alloca [0 x ptr], align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 0, ptr %195)
  %197 = call ptr @llvm.invariant.start.p0(i64 632, ptr %184)
  %198 = getelementptr ptr, ptr %184, i32 %193
  %199 = getelementptr ptr, ptr %198, i32 10
  %200 = load ptr, ptr %199, align 8
  %201 = alloca {}, align 8
  %202 = call ptr @behavior_wrapper(ptr %200, { ptr, ptr, ptr, i32 } %194, ptr %201)
  %203 = call { ptr } %202({ ptr, ptr, ptr, i32 } %194, { ptr, ptr, ptr, i32 } %194, ptr %195) #17
  %204 = alloca ptr, align 8
  store { ptr } %203, ptr %204, align 8
  %205 = load ptr, ptr %204, align 8
  %206 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %205)
  %207 = alloca i32, align 4
  store i32 8, ptr %207, align 4
  %208 = load i32, ptr %207, align 4
  %209 = sext i32 %208 to i64
  %210 = alloca ptr, align 8
  %211 = mul i64 %209, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %212 = call ptr @bump_malloc(i64 %211)
  store ptr %212, ptr %210, align 8
  %213 = alloca ptr, align 8
  %214 = getelementptr { ptr }, ptr %210, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  store ptr %215, ptr %213, align 8
  %216 = alloca i32, align 4
  store i32 0, ptr %216, align 4
  %217 = load ptr, ptr %213, align 8
  %218 = load i32, ptr %216, align 4
  %219 = sext i32 %218 to i64
  %220 = mul i64 ptrtoint (ptr getelementptr ([7 x i8], ptr null, i32 1) to i64), %219
  %221 = getelementptr i8, ptr %217, i64 %220
  %222 = load <7 x i8>, ptr @raxdn_At_line, align 8
  store <7 x i8> %222, ptr %221, align 8
  %223 = alloca i32, align 4
  store i32 7, ptr %223, align 4
  %224 = alloca i32, align 4
  store i32 8, ptr %224, align 4
  %225 = alloca [1 x ptr], align 8
  store ptr @String, ptr %225, align 8
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr ptr, ptr %226, i32 6
  %228 = load ptr, ptr %227, align 8
  %229 = call { i64, i64 } @size_wrapper(ptr %228, ptr %225)
  %230 = extractvalue { i64, i64 } %229, 0
  %231 = call ptr @bump_malloc(i64 %230)
  %232 = alloca i32, align 4
  %233 = alloca ptr, align 8
  %234 = alloca ptr, align 8
  %235 = alloca ptr, align 8
  store ptr @String, ptr %235, align 8
  store ptr %231, ptr %234, align 8
  store i32 10, ptr %232, align 4
  %236 = alloca i32, align 4
  store i32 7, ptr %236, align 4
  %237 = alloca i32, align 4
  store i32 8, ptr %237, align 4
  %238 = load ptr, ptr %213, align 8
  %239 = insertvalue { ptr } undef, ptr %238, 0
  %240 = load i32, ptr %236, align 4
  %241 = load i32, ptr %237, align 4
  %242 = load ptr, ptr %235, align 8
  %243 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %242, 0
  %244 = load ptr, ptr %234, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } %243, ptr %244, 1
  %246 = load ptr, ptr %233, align 8
  %247 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %246, 2
  %248 = load i32, ptr %232, align 4
  %249 = insertvalue { ptr, ptr, ptr, i32 } %247, i32 %248, 3
  %250 = alloca [3 x ptr], align 8
  %251 = getelementptr [3 x ptr], ptr %250, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %251, align 8
  %252 = getelementptr [3 x ptr], ptr %250, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %252, align 8
  %253 = getelementptr [3 x ptr], ptr %250, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %253, align 8
  %254 = call ptr @llvm.invariant.start.p0(i64 9, ptr %250)
  %255 = call ptr @llvm.invariant.start.p0(i64 632, ptr %242)
  %256 = getelementptr ptr, ptr %242, i32 %248
  %257 = getelementptr ptr, ptr %256, i32 6
  %258 = load ptr, ptr %257, align 8
  %259 = alloca { ptr, ptr, ptr }, align 8
  %260 = getelementptr { ptr, ptr, ptr }, ptr %259, i32 0, i32 0
  store ptr @buffer_typ, ptr %260, align 8
  %261 = getelementptr { ptr, ptr, ptr }, ptr %259, i32 0, i32 1
  store ptr @i32_typ, ptr %261, align 8
  %262 = getelementptr { ptr, ptr, ptr }, ptr %259, i32 0, i32 2
  store ptr @i32_typ, ptr %262, align 8
  %263 = call ptr @behavior_wrapper(ptr %258, { ptr, ptr, ptr, i32 } %249, ptr %259)
  call void %263({ ptr, ptr, ptr, i32 } %249, { ptr, ptr, ptr, i32 } %249, ptr %250, { ptr } %239, i32 %240, i32 %241) #17
  %264 = load ptr, ptr %235, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %264, 0
  %266 = load ptr, ptr %234, align 8
  %267 = insertvalue { ptr, ptr, ptr, i32 } %265, ptr %266, 1
  %268 = load ptr, ptr %233, align 8
  %269 = insertvalue { ptr, ptr, ptr, i32 } %267, ptr %268, 2
  %270 = load i32, ptr %232, align 4
  %271 = insertvalue { ptr, ptr, ptr, i32 } %269, i32 %270, 3
  %272 = alloca [0 x ptr], align 8
  %273 = call ptr @llvm.invariant.start.p0(i64 0, ptr %272)
  %274 = call ptr @llvm.invariant.start.p0(i64 632, ptr %264)
  %275 = getelementptr ptr, ptr %264, i32 %270
  %276 = getelementptr ptr, ptr %275, i32 10
  %277 = load ptr, ptr %276, align 8
  %278 = alloca {}, align 8
  %279 = call ptr @behavior_wrapper(ptr %277, { ptr, ptr, ptr, i32 } %271, ptr %278)
  %280 = call { ptr } %279({ ptr, ptr, ptr, i32 } %271, { ptr, ptr, ptr, i32 } %271, ptr %272) #17
  %281 = alloca ptr, align 8
  store { ptr } %280, ptr %281, align 8
  %282 = load ptr, ptr %281, align 8
  %283 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %282)
  %284 = load ptr, ptr %10, align 8
  %285 = load ptr, ptr %5, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 104, ptr %285)
  %287 = load i32, ptr %16, align 4
  %288 = getelementptr ptr, ptr %285, i32 %287
  %289 = load ptr, ptr %288, align 8
  %290 = getelementptr { ptr, ptr }, ptr %289, i32 0, i32 0
  %291 = load ptr, ptr %290, align 8
  %292 = call i32 %291(ptr %284) #16
  %293 = alloca i32, align 4
  store i32 %292, ptr %293, align 4
  %294 = load i32, ptr %293, align 4
  %295 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %294)
  %296 = alloca i32, align 4
  store i32 13, ptr %296, align 4
  %297 = load i32, ptr %296, align 4
  %298 = sext i32 %297 to i64
  %299 = alloca ptr, align 8
  %300 = mul i64 %298, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %301 = call ptr @bump_malloc(i64 %300)
  store ptr %301, ptr %299, align 8
  %302 = alloca ptr, align 8
  %303 = getelementptr { ptr }, ptr %299, i32 0, i32 0
  %304 = load ptr, ptr %303, align 8
  store ptr %304, ptr %302, align 8
  %305 = alloca i32, align 4
  store i32 0, ptr %305, align 4
  %306 = load ptr, ptr %302, align 8
  %307 = load i32, ptr %305, align 4
  %308 = sext i32 %307 to i64
  %309 = mul i64 ptrtoint (ptr getelementptr ([12 x i8], ptr null, i32 1) to i64), %308
  %310 = getelementptr i8, ptr %306, i64 %309
  %311 = load <12 x i8>, ptr @obmib_With_message, align 16
  store <12 x i8> %311, ptr %310, align 16
  %312 = alloca i32, align 4
  store i32 12, ptr %312, align 4
  %313 = alloca i32, align 4
  store i32 13, ptr %313, align 4
  %314 = alloca [1 x ptr], align 8
  store ptr @String, ptr %314, align 8
  %315 = load ptr, ptr %314, align 8
  %316 = getelementptr ptr, ptr %315, i32 6
  %317 = load ptr, ptr %316, align 8
  %318 = call { i64, i64 } @size_wrapper(ptr %317, ptr %314)
  %319 = extractvalue { i64, i64 } %318, 0
  %320 = call ptr @bump_malloc(i64 %319)
  %321 = alloca i32, align 4
  %322 = alloca ptr, align 8
  %323 = alloca ptr, align 8
  %324 = alloca ptr, align 8
  store ptr @String, ptr %324, align 8
  store ptr %320, ptr %323, align 8
  store i32 10, ptr %321, align 4
  %325 = alloca i32, align 4
  store i32 12, ptr %325, align 4
  %326 = alloca i32, align 4
  store i32 13, ptr %326, align 4
  %327 = load ptr, ptr %302, align 8
  %328 = insertvalue { ptr } undef, ptr %327, 0
  %329 = load i32, ptr %325, align 4
  %330 = load i32, ptr %326, align 4
  %331 = load ptr, ptr %324, align 8
  %332 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %331, 0
  %333 = load ptr, ptr %323, align 8
  %334 = insertvalue { ptr, ptr, ptr, i32 } %332, ptr %333, 1
  %335 = load ptr, ptr %322, align 8
  %336 = insertvalue { ptr, ptr, ptr, i32 } %334, ptr %335, 2
  %337 = load i32, ptr %321, align 4
  %338 = insertvalue { ptr, ptr, ptr, i32 } %336, i32 %337, 3
  %339 = alloca [3 x ptr], align 8
  %340 = getelementptr [3 x ptr], ptr %339, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %340, align 8
  %341 = getelementptr [3 x ptr], ptr %339, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %341, align 8
  %342 = getelementptr [3 x ptr], ptr %339, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %342, align 8
  %343 = call ptr @llvm.invariant.start.p0(i64 9, ptr %339)
  %344 = call ptr @llvm.invariant.start.p0(i64 632, ptr %331)
  %345 = getelementptr ptr, ptr %331, i32 %337
  %346 = getelementptr ptr, ptr %345, i32 6
  %347 = load ptr, ptr %346, align 8
  %348 = alloca { ptr, ptr, ptr }, align 8
  %349 = getelementptr { ptr, ptr, ptr }, ptr %348, i32 0, i32 0
  store ptr @buffer_typ, ptr %349, align 8
  %350 = getelementptr { ptr, ptr, ptr }, ptr %348, i32 0, i32 1
  store ptr @i32_typ, ptr %350, align 8
  %351 = getelementptr { ptr, ptr, ptr }, ptr %348, i32 0, i32 2
  store ptr @i32_typ, ptr %351, align 8
  %352 = call ptr @behavior_wrapper(ptr %347, { ptr, ptr, ptr, i32 } %338, ptr %348)
  call void %352({ ptr, ptr, ptr, i32 } %338, { ptr, ptr, ptr, i32 } %338, ptr %339, { ptr } %328, i32 %329, i32 %330) #17
  %353 = load ptr, ptr %324, align 8
  %354 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %353, 0
  %355 = load ptr, ptr %323, align 8
  %356 = insertvalue { ptr, ptr, ptr, i32 } %354, ptr %355, 1
  %357 = load ptr, ptr %322, align 8
  %358 = insertvalue { ptr, ptr, ptr, i32 } %356, ptr %357, 2
  %359 = load i32, ptr %321, align 4
  %360 = insertvalue { ptr, ptr, ptr, i32 } %358, i32 %359, 3
  %361 = alloca [0 x ptr], align 8
  %362 = call ptr @llvm.invariant.start.p0(i64 0, ptr %361)
  %363 = call ptr @llvm.invariant.start.p0(i64 632, ptr %353)
  %364 = getelementptr ptr, ptr %353, i32 %359
  %365 = getelementptr ptr, ptr %364, i32 10
  %366 = load ptr, ptr %365, align 8
  %367 = alloca {}, align 8
  %368 = call ptr @behavior_wrapper(ptr %366, { ptr, ptr, ptr, i32 } %360, ptr %367)
  %369 = call { ptr } %368({ ptr, ptr, ptr, i32 } %360, { ptr, ptr, ptr, i32 } %360, ptr %361) #17
  %370 = alloca ptr, align 8
  store { ptr } %369, ptr %370, align 8
  %371 = load ptr, ptr %370, align 8
  %372 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %371)
  %373 = load ptr, ptr %7, align 8
  %374 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %373, 0
  %375 = load ptr, ptr %10, align 8
  %376 = insertvalue { ptr, ptr, ptr, i32 } %374, ptr %375, 1
  %377 = load ptr, ptr %13, align 8
  %378 = insertvalue { ptr, ptr, ptr, i32 } %376, ptr %377, 2
  %379 = load i32, ptr %16, align 4
  %380 = insertvalue { ptr, ptr, ptr, i32 } %378, i32 %379, 3
  %381 = alloca [0 x ptr], align 8
  %382 = call ptr @llvm.invariant.start.p0(i64 0, ptr %381)
  %383 = call ptr @llvm.invariant.start.p0(i64 104, ptr %373)
  %384 = getelementptr ptr, ptr %373, i32 %379
  %385 = getelementptr ptr, ptr %384, i32 7
  %386 = load ptr, ptr %385, align 8
  %387 = alloca {}, align 8
  %388 = call ptr @behavior_wrapper(ptr %386, { ptr, ptr, ptr, i32 } %380, ptr %387)
  call void %388({ ptr, ptr, ptr, i32 } %380, { ptr, ptr, ptr, i32 } %380, ptr %381) #17
  %389 = alloca i32, align 4
  store i32 10, ptr %389, align 4
  %390 = load i32, ptr %389, align 4
  %391 = sext i32 %390 to i64
  %392 = alloca ptr, align 8
  %393 = mul i64 %391, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %394 = call ptr @bump_malloc(i64 %393)
  store ptr %394, ptr %392, align 8
  %395 = alloca ptr, align 8
  %396 = getelementptr { ptr }, ptr %392, i32 0, i32 0
  %397 = load ptr, ptr %396, align 8
  store ptr %397, ptr %395, align 8
  %398 = alloca i32, align 4
  store i32 0, ptr %398, align 4
  %399 = load ptr, ptr %395, align 8
  %400 = load i32, ptr %398, align 4
  %401 = sext i32 %400 to i64
  %402 = mul i64 ptrtoint (ptr getelementptr ([9 x i8], ptr null, i32 1) to i64), %401
  %403 = getelementptr i8, ptr %399, i64 %402
  %404 = load <9 x i8>, ptr @xcdpc_, align 16
  store <9 x i8> %404, ptr %403, align 16
  %405 = alloca i32, align 4
  store i32 9, ptr %405, align 4
  %406 = alloca i32, align 4
  store i32 10, ptr %406, align 4
  %407 = alloca [1 x ptr], align 8
  store ptr @String, ptr %407, align 8
  %408 = load ptr, ptr %407, align 8
  %409 = getelementptr ptr, ptr %408, i32 6
  %410 = load ptr, ptr %409, align 8
  %411 = call { i64, i64 } @size_wrapper(ptr %410, ptr %407)
  %412 = extractvalue { i64, i64 } %411, 0
  %413 = call ptr @bump_malloc(i64 %412)
  %414 = alloca i32, align 4
  %415 = alloca ptr, align 8
  %416 = alloca ptr, align 8
  %417 = alloca ptr, align 8
  store ptr @String, ptr %417, align 8
  store ptr %413, ptr %416, align 8
  store i32 10, ptr %414, align 4
  %418 = alloca i32, align 4
  store i32 9, ptr %418, align 4
  %419 = alloca i32, align 4
  store i32 10, ptr %419, align 4
  %420 = load ptr, ptr %395, align 8
  %421 = insertvalue { ptr } undef, ptr %420, 0
  %422 = load i32, ptr %418, align 4
  %423 = load i32, ptr %419, align 4
  %424 = load ptr, ptr %417, align 8
  %425 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %424, 0
  %426 = load ptr, ptr %416, align 8
  %427 = insertvalue { ptr, ptr, ptr, i32 } %425, ptr %426, 1
  %428 = load ptr, ptr %415, align 8
  %429 = insertvalue { ptr, ptr, ptr, i32 } %427, ptr %428, 2
  %430 = load i32, ptr %414, align 4
  %431 = insertvalue { ptr, ptr, ptr, i32 } %429, i32 %430, 3
  %432 = alloca [3 x ptr], align 8
  %433 = getelementptr [3 x ptr], ptr %432, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %433, align 8
  %434 = getelementptr [3 x ptr], ptr %432, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %434, align 8
  %435 = getelementptr [3 x ptr], ptr %432, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %435, align 8
  %436 = call ptr @llvm.invariant.start.p0(i64 9, ptr %432)
  %437 = call ptr @llvm.invariant.start.p0(i64 632, ptr %424)
  %438 = getelementptr ptr, ptr %424, i32 %430
  %439 = getelementptr ptr, ptr %438, i32 6
  %440 = load ptr, ptr %439, align 8
  %441 = alloca { ptr, ptr, ptr }, align 8
  %442 = getelementptr { ptr, ptr, ptr }, ptr %441, i32 0, i32 0
  store ptr @buffer_typ, ptr %442, align 8
  %443 = getelementptr { ptr, ptr, ptr }, ptr %441, i32 0, i32 1
  store ptr @i32_typ, ptr %443, align 8
  %444 = getelementptr { ptr, ptr, ptr }, ptr %441, i32 0, i32 2
  store ptr @i32_typ, ptr %444, align 8
  %445 = call ptr @behavior_wrapper(ptr %440, { ptr, ptr, ptr, i32 } %431, ptr %441)
  call void %445({ ptr, ptr, ptr, i32 } %431, { ptr, ptr, ptr, i32 } %431, ptr %432, { ptr } %421, i32 %422, i32 %423) #17
  %446 = load ptr, ptr %417, align 8
  %447 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %446, 0
  %448 = load ptr, ptr %416, align 8
  %449 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr %448, 1
  %450 = load ptr, ptr %415, align 8
  %451 = insertvalue { ptr, ptr, ptr, i32 } %449, ptr %450, 2
  %452 = load i32, ptr %414, align 4
  %453 = insertvalue { ptr, ptr, ptr, i32 } %451, i32 %452, 3
  %454 = alloca [0 x ptr], align 8
  %455 = call ptr @llvm.invariant.start.p0(i64 0, ptr %454)
  %456 = call ptr @llvm.invariant.start.p0(i64 632, ptr %446)
  %457 = getelementptr ptr, ptr %446, i32 %452
  %458 = getelementptr ptr, ptr %457, i32 10
  %459 = load ptr, ptr %458, align 8
  %460 = alloca {}, align 8
  %461 = call ptr @behavior_wrapper(ptr %459, { ptr, ptr, ptr, i32 } %453, ptr %460)
  %462 = call { ptr } %461({ ptr, ptr, ptr, i32 } %453, { ptr, ptr, ptr, i32 } %453, ptr %454) #17
  %463 = alloca ptr, align 8
  store { ptr } %462, ptr %463, align 8
  %464 = load ptr, ptr %463, align 8
  %465 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %464)
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 104, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @String)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 632, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 10
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca ptr, align 8
  store { ptr } %49, ptr %50, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %51)
  ret void
}

declare i32 @printf(ptr, ...)

define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @Exception_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @Exception_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define i32 @Exception_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Exception_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define void @report_exception({ ptr } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr } %0, ptr %5, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %6, i32 0, i32 4
  %8 = load { ptr, i160 }, ptr %7, align 8
  %9 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %8, ptr %9, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %10, i32 0, i32 0, i32 1
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %10, i32 0, i32 0, i32 2
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %10, i32 0, i32 1, i32 0
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %10, i32 0, i32 1, i32 1
  %15 = load i64, ptr %11, align 4
  %16 = load i64, ptr %12, align 4
  %17 = load ptr, ptr %13, align 8
  %18 = load ptr, ptr %14, align 8
  %19 = load i64, ptr @Exception, align 4
  %20 = call i1 @subtype_test_wrapper(ptr %17, i64 %16, i64 %15, i64 %19, i64 ptrtoint (ptr @Exception to i64), ptr %18)
  %21 = alloca i1, align 1
  store i1 %20, ptr %21, align 1
  %22 = load i1, ptr %21, align 1
  br i1 %22, label %23, label %._crit_edge

._crit_edge:                                      ; preds = %1
  br label %50

23:                                               ; preds = %1
  %24 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %25 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %28 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %29 = load i160, ptr %27, align 4
  store i160 %29, ptr %28, align 4
  call void @set_offset(ptr %2, ptr @Exception)
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %40, 3
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %43 = call ptr @llvm.invariant.start.p0(i64 104, ptr %31)
  %44 = getelementptr ptr, ptr %31, i32 %40
  %45 = getelementptr ptr, ptr %44, i32 6
  %46 = load ptr, ptr %45, align 8
  %47 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %41, ptr %4)
  call void %47({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr %3) #17
  %48 = load ptr, ptr %25, align 8
  store ptr %48, ptr %24, align 8
  %49 = load i160, ptr %28, align 4
  store i160 %49, ptr %27, align 4
  br label %50

50:                                               ; preds = %._crit_edge, %23
  ret void
}

define { i64, i64 } @_data_size_Pair(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = getelementptr ptr, ptr %0, i32 1
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr ptr, ptr %14, i32 9
  %16 = load ptr, ptr %15, align 8
  %17 = call { i64, i64 } @size_wrapper(ptr %16, ptr %13)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = extractvalue { i64, i64 } %17, 1
  %20 = icmp ugt i64 %19, %5
  %21 = select i1 %20, i64 %19, i64 %5
  %22 = urem i64 %11, %19
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %19, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 %18, %25
  %27 = add i64 %11, %26
  %28 = getelementptr ptr, ptr %0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 9
  %32 = load ptr, ptr %31, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr %32, ptr %29)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = extractvalue { i64, i64 } %33, 1
  %36 = icmp ugt i64 %35, %21
  %37 = select i1 %36, i64 %35, i64 %21
  %38 = urem i64 %27, %35
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 %35, %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 %34, %41
  %43 = add i64 %27, %42
  %44 = urem i64 %43, %37
  %45 = icmp eq i64 %44, 0
  %46 = sub i64 %37, %44
  %47 = select i1 %45, i64 0, i64 %46
  %48 = add i64 %43, %47
  %49 = insertvalue { i64, i64 } undef, i64 %48, 0
  %50 = insertvalue { i64, i64 } %49, i64 %37, 1
  ret { i64, i64 } %50
}

define ptr @Pair_field_Pair_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Pair_field_Pair_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @any_typ, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @any_typ to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 7, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [10 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 8, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Pair)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  store ptr %24, ptr %22, align 8
  %25 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %26 = load i160, ptr %25, align 4
  store i160 %26, ptr %21, align 4
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  %29 = load ptr, ptr %22, align 8
  store ptr %29, ptr %28, align 8
  %30 = load i160, ptr %21, align 4
  store i160 %30, ptr %27, align 4
  %31 = load ptr, ptr %12, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 80, ptr %32)
  %34 = load i32, ptr %18, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %28, align 8
  %41 = insertvalue { ptr, i160 } undef, ptr %40, 0
  %42 = load i160, ptr %27, align 4
  %43 = insertvalue { ptr, i160 } %41, i160 %42, 1
  call void %39(ptr %31, { ptr, i160 } %43) #15
  %44 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %44, align 8
  %45 = alloca i160, align 8
  %46 = alloca ptr, align 8
  %47 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  store ptr %48, ptr %46, align 8
  %49 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 1
  %50 = load i160, ptr %49, align 4
  store i160 %50, ptr %45, align 4
  %51 = alloca i160, align 8
  %52 = alloca ptr, align 8
  %53 = load ptr, ptr %46, align 8
  store ptr %53, ptr %52, align 8
  %54 = load i160, ptr %45, align 4
  store i160 %54, ptr %51, align 4
  %55 = load ptr, ptr %12, align 8
  %56 = load ptr, ptr %7, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr %56)
  %58 = load i32, ptr %18, align 4
  %59 = getelementptr ptr, ptr %56, i32 %58
  %60 = getelementptr ptr, ptr %59, i32 3
  %61 = load ptr, ptr %60, align 8
  %62 = getelementptr { ptr, ptr }, ptr %61, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = load ptr, ptr %52, align 8
  %65 = insertvalue { ptr, i160 } undef, ptr %64, 0
  %66 = load i160, ptr %51, align 4
  %67 = insertvalue { ptr, i160 } %65, i160 %66, 1
  call void %63(ptr %55, { ptr, i160 } %67) #15
  ret void
}

define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Pair)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, i160 } %26(ptr %18) #16
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %27, ptr %28, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  store ptr %32, ptr %30, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %33, align 4
  store i160 %34, ptr %29, align 4
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = load ptr, ptr %30, align 8
  store ptr %37, ptr %36, align 8
  %38 = load i160, ptr %29, align 4
  store i160 %38, ptr %35, align 4
  %39 = load ptr, ptr %36, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = load i160, ptr %35, align 4
  %42 = insertvalue { ptr, i160 } %40, i160 %41, 1
  ret { ptr, i160 } %42
}

define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Pair)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, i160 } %26(ptr %18) #16
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %27, ptr %28, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  store ptr %32, ptr %30, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %33, align 4
  store i160 %34, ptr %29, align 4
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = load ptr, ptr %30, align 8
  store ptr %37, ptr %36, align 8
  %38 = load i160, ptr %29, align 4
  store i160 %38, ptr %35, align 4
  %39 = load ptr, ptr %36, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = load i160, ptr %35, align 4
  %42 = insertvalue { ptr, i160 } %40, i160 %41, 1
  ret { ptr, i160 } %42
}

define { ptr, i160 } @Pair_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = load ptr, ptr %0, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %9, i32 9
  %11 = load ptr, ptr %10, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr %8)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = extractvalue { i64, i64 } %12, 1
  %15 = urem i64 %7, %14
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 %14, %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %13, %18
  %20 = add i64 %7, %19
  %21 = getelementptr ptr, ptr %0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr ptr, ptr %23, i32 9
  %25 = load ptr, ptr %24, align 8
  %26 = call { i64, i64 } @size_wrapper(ptr %25, ptr %22)
  %27 = extractvalue { i64, i64 } %26, 1
  %28 = urem i64 %20, %27
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %27, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %20, %31
  %33 = getelementptr i8, ptr %0, i64 %32
  %34 = load ptr, ptr %21, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr ptr, ptr %35, i32 7
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr, i160 } @box_wrapper(ptr %37, ptr %33, ptr %34)
  ret { ptr, i160 } %38
}

define void @Pair_setter_second(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = load ptr, ptr %0, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %10, i32 9
  %12 = load ptr, ptr %11, align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr %9)
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = extractvalue { i64, i64 } %13, 1
  %16 = urem i64 %8, %15
  %17 = icmp eq i64 %16, 0
  %18 = sub i64 %15, %16
  %19 = select i1 %17, i64 0, i64 %18
  %20 = add i64 %14, %19
  %21 = add i64 %8, %20
  %22 = getelementptr ptr, ptr %0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr ptr, ptr %24, i32 9
  %26 = load ptr, ptr %25, align 8
  %27 = call { i64, i64 } @size_wrapper(ptr %26, ptr %23)
  %28 = extractvalue { i64, i64 } %27, 1
  %29 = urem i64 %21, %28
  %30 = icmp eq i64 %29, 0
  %31 = sub i64 %28, %29
  %32 = select i1 %30, i64 0, i64 %31
  %33 = add i64 %21, %32
  %34 = getelementptr i8, ptr %0, i64 %33
  %35 = load ptr, ptr %22, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr ptr, ptr %36, i32 8
  %38 = load ptr, ptr %37, align 8
  call void @unbox_wrapper(ptr %38, { ptr, i160 } %1, ptr %35, ptr %34)
  ret void
}

define { ptr, i160 } @Pair_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = load ptr, ptr %0, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %9, i32 9
  %11 = load ptr, ptr %10, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr %8)
  %13 = extractvalue { i64, i64 } %12, 1
  %14 = urem i64 %7, %13
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 %13, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %7, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load ptr, ptr %0, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr ptr, ptr %21, i32 7
  %23 = load ptr, ptr %22, align 8
  %24 = call { ptr, i160 } @box_wrapper(ptr %23, ptr %19, ptr %20)
  ret { ptr, i160 } %24
}

define void @Pair_setter_first(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = load ptr, ptr %0, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %10, i32 9
  %12 = load ptr, ptr %11, align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr %9)
  %14 = extractvalue { i64, i64 } %13, 1
  %15 = urem i64 %8, %14
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 %14, %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %8, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = load ptr, ptr %0, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 8
  %24 = load ptr, ptr %23, align 8
  call void @unbox_wrapper(ptr %24, { ptr, i160 } %1, ptr %21, ptr %20)
  ret void
}

define { i64, i64 } @_data_size_Container(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_data_size_Iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_data_size_Iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_data_size_MapIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @MapIterable_field_MapIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @MapIterable_field_MapIterable_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 16, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [51 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @MapIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 17, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [51 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @MapIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 19, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [51 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @MapIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @MapIterable_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @MapIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 408, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 408, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 3
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @MapIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 408, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 408, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 3
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %64) #16
  %74 = alloca ptr, align 8
  store { ptr } %73, ptr %74, align 8
  %75 = load ptr, ptr %10, align 8
  %76 = load ptr, ptr %5, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 408, ptr %76)
  %78 = load i32, ptr %16, align 4
  %79 = getelementptr ptr, ptr %76, i32 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %75)
  %82 = load ptr, ptr %10, align 8
  %83 = load ptr, ptr %5, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 408, ptr %83)
  %85 = load i32, ptr %16, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr @typegetter_wrapper(ptr %88, ptr %82)
  %90 = alloca [3 x ptr], align 8
  store ptr @MapIterator, ptr %90, align 8
  %91 = getelementptr ptr, ptr %90, i32 1
  store ptr %81, ptr %91, align 8
  %92 = getelementptr ptr, ptr %90, i32 2
  store ptr %89, ptr %92, align 8
  %93 = load ptr, ptr %90, align 8
  %94 = getelementptr ptr, ptr %93, i32 6
  %95 = load ptr, ptr %94, align 8
  %96 = call { i64, i64 } @size_wrapper(ptr %95, ptr %90)
  %97 = extractvalue { i64, i64 } %96, 0
  %98 = call ptr @bump_malloc(i64 %97)
  store ptr %81, ptr %98, align 8
  %99 = getelementptr ptr, ptr %98, i32 1
  store ptr %89, ptr %99, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 16, ptr %98)
  %101 = alloca i32, align 4
  %102 = alloca ptr, align 8
  %103 = alloca ptr, align 8
  %104 = alloca ptr, align 8
  store ptr @MapIterator, ptr %104, align 8
  store ptr %98, ptr %103, align 8
  store i32 10, ptr %101, align 4
  %105 = load ptr, ptr %10, align 8
  %106 = load ptr, ptr %5, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 408, ptr %106)
  %108 = load i32, ptr %16, align 4
  %109 = getelementptr ptr, ptr %106, i32 %108
  %110 = getelementptr ptr, ptr %109, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = call { ptr, ptr, ptr, i32 } %113(ptr %105) #16
  %115 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %114, ptr %115, align 8
  call void @assume_offset(ptr %115, ptr @Iterable)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %126, 3
  %128 = alloca [0 x ptr], align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 0, ptr %128)
  %130 = call ptr @llvm.invariant.start.p0(i64 184, ptr %117)
  %131 = getelementptr ptr, ptr %117, i32 %126
  %132 = getelementptr ptr, ptr %131, i32 1
  %133 = load ptr, ptr %132, align 8
  %134 = alloca {}, align 8
  %135 = call ptr @behavior_wrapper(ptr %133, { ptr, ptr, ptr, i32 } %127, ptr %134)
  %136 = call { ptr, ptr, ptr, i32 } %135({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %128) #17
  %137 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %136, ptr %137, align 8
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 0
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %141 = load ptr, ptr %139, align 8
  store ptr %141, ptr %140, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %144 = load ptr, ptr %142, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 2
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %150 = load i32, ptr %148, align 4
  store i32 %150, ptr %149, align 4
  call void @set_offset(ptr %138, ptr @Iterator)
  %151 = load ptr, ptr %10, align 8
  %152 = load ptr, ptr %5, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 408, ptr %152)
  %154 = load i32, ptr %16, align 4
  %155 = getelementptr ptr, ptr %152, i32 %154
  %156 = getelementptr ptr, ptr %155, i32 3
  %157 = load ptr, ptr %156, align 8
  %158 = getelementptr { ptr, ptr }, ptr %157, i32 0, i32 0
  %159 = load ptr, ptr %158, align 8
  %160 = call { ptr } %159(ptr %151) #16
  %161 = alloca ptr, align 8
  store { ptr } %160, ptr %161, align 8
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %164 = load ptr, ptr %140, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %166 = load ptr, ptr %143, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %168 = load ptr, ptr %146, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %170 = load i32, ptr %149, align 4
  store i32 %170, ptr %169, align 4
  call void @set_offset(ptr %162, ptr @Iterator)
  %171 = load ptr, ptr %163, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %169, align 4
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = load ptr, ptr %161, align 8
  %180 = insertvalue { ptr } undef, ptr %179, 0
  %181 = load ptr, ptr %104, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = load ptr, ptr %103, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %183, 1
  %185 = load ptr, ptr %102, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %185, 2
  %187 = load i32, ptr %101, align 4
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, i32 %187, 3
  %189 = load ptr, ptr %10, align 8
  %190 = load ptr, ptr %5, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 408, ptr %190)
  %192 = load i32, ptr %16, align 4
  %193 = getelementptr ptr, ptr %190, i32 %192
  %194 = load ptr, ptr %193, align 8
  %195 = call ptr @typegetter_wrapper(ptr %194, ptr %189)
  %196 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %197 = getelementptr [3 x ptr], ptr %196, i32 0, i32 1
  store ptr %195, ptr %197, align 8
  %198 = getelementptr [3 x ptr], ptr %196, i32 0, i32 2
  store ptr null, ptr %198, align 8
  %199 = call ptr @llvm.invariant.start.p0(i64 16, ptr %196)
  store ptr @Iterator, ptr %196, align 8
  %200 = load ptr, ptr %10, align 8
  %201 = load ptr, ptr %5, align 8
  %202 = call ptr @llvm.invariant.start.p0(i64 408, ptr %201)
  %203 = load i32, ptr %16, align 4
  %204 = getelementptr ptr, ptr %201, i32 %203
  %205 = getelementptr ptr, ptr %204, i32 1
  %206 = load ptr, ptr %205, align 8
  %207 = call ptr @typegetter_wrapper(ptr %206, ptr %200)
  %208 = load ptr, ptr %10, align 8
  %209 = load ptr, ptr %5, align 8
  %210 = call ptr @llvm.invariant.start.p0(i64 408, ptr %209)
  %211 = load i32, ptr %16, align 4
  %212 = getelementptr ptr, ptr %209, i32 %211
  %213 = load ptr, ptr %212, align 8
  %214 = call ptr @typegetter_wrapper(ptr %213, ptr %208)
  %215 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %216 = getelementptr [4 x ptr], ptr %215, i32 0, i32 2
  store ptr %214, ptr %216, align 8
  %217 = getelementptr [4 x ptr], ptr %215, i32 0, i32 1
  store ptr %207, ptr %217, align 8
  %218 = getelementptr [4 x ptr], ptr %215, i32 0, i32 3
  store ptr null, ptr %218, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 24, ptr %215)
  store ptr @function_typ, ptr %215, align 8
  %220 = alloca [2 x ptr], align 8
  %221 = getelementptr [2 x ptr], ptr %220, i32 0, i32 0
  store ptr %196, ptr %221, align 8
  %222 = getelementptr [2 x ptr], ptr %220, i32 0, i32 1
  store ptr %215, ptr %222, align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 4, ptr %220)
  %224 = call ptr @llvm.invariant.start.p0(i64 88, ptr %181)
  %225 = getelementptr ptr, ptr %181, i32 %187
  %226 = getelementptr ptr, ptr %225, i32 4
  %227 = load ptr, ptr %226, align 8
  %228 = alloca { ptr, ptr }, align 8
  %229 = getelementptr { ptr, ptr }, ptr %228, i32 0, i32 0
  store ptr %171, ptr %229, align 8
  %230 = getelementptr { ptr, ptr }, ptr %228, i32 0, i32 1
  store ptr @function_typ, ptr %230, align 8
  %231 = call ptr @behavior_wrapper(ptr %227, { ptr, ptr, ptr, i32 } %188, ptr %228)
  call void %231({ ptr, ptr, ptr, i32 } %188, { ptr, ptr, ptr, i32 } %188, ptr %220, { ptr, ptr, ptr, i32 } %178, { ptr } %180) #17
  %232 = alloca { ptr, ptr, ptr, i32 }, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 0
  %234 = load ptr, ptr %104, align 8
  store ptr %234, ptr %233, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 1
  %236 = load ptr, ptr %103, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 2
  %238 = load ptr, ptr %102, align 8
  store ptr %238, ptr %237, align 8
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 3
  %240 = load i32, ptr %101, align 4
  store i32 %240, ptr %239, align 4
  call void @set_offset(ptr %232, ptr @Iterator)
  %241 = load ptr, ptr %233, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %241, 0
  %243 = load ptr, ptr %235, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %243, 1
  %245 = load ptr, ptr %237, align 8
  %246 = insertvalue { ptr, ptr, ptr, i32 } %244, ptr %245, 2
  %247 = load i32, ptr %239, align 4
  %248 = insertvalue { ptr, ptr, ptr, i32 } %246, i32 %247, 3
  ret { ptr, ptr, ptr, i32 } %248
}

define void @Iterable_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %15, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  store ptr %21, ptr %.reg2mem7, align 8
  %22 = load ptr, ptr %20, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  store ptr %22, ptr %.reload10, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr %27, ptr %.reg2mem3, align 8
  %28 = load i32, ptr %26, align 4
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store i32 %28, ptr %.reload6, align 4
  call void @set_offset(ptr %16, ptr @Iterable)
  %29 = alloca ptr, align 8
  store { ptr } %3, ptr %29, align 8
  %30 = load ptr, ptr %18, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %32 = load ptr, ptr %.reload9, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %24, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %36 = load i32, ptr %.reload5, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  %38 = alloca [0 x ptr], align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr %38)
  %40 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %41 = getelementptr ptr, ptr %30, i32 %36
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = alloca {}, align 8
  %45 = call ptr @behavior_wrapper(ptr %43, { ptr, ptr, ptr, i32 } %37, ptr %44)
  %46 = call { ptr, ptr, ptr, i32 } %45({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr %38) #17
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %46, ptr %47, align 8
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %60 = load i32, ptr %58, align 4
  store i32 %60, ptr %59, align 4
  call void @set_offset(ptr %48, ptr @Iterator)
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %50, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %65 = load ptr, ptr %53, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %67 = load ptr, ptr %56, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %69 = load i32, ptr %59, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %61, ptr @Iterator)
  %70 = alloca i32, align 4
  %71 = alloca ptr, align 8
  %72 = alloca ptr, align 8
  %73 = alloca ptr, align 8
  %74 = load ptr, ptr %62, align 8
  store ptr %74, ptr %73, align 8
  %75 = load ptr, ptr %64, align 8
  store ptr %75, ptr %72, align 8
  %76 = load ptr, ptr %66, align 8
  store ptr %76, ptr %71, align 8
  %77 = load i32, ptr %68, align 4
  store i32 %77, ptr %70, align 4
  br label %78

78:                                               ; preds = %._crit_edge1, %4
  %79 = load ptr, ptr %73, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %72, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %71, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %70, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %88 = call ptr @llvm.invariant.start.p0(i64 24, ptr %79)
  %89 = getelementptr ptr, ptr %79, i32 %85
  %90 = getelementptr ptr, ptr %89, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = call ptr @behavior_wrapper(ptr %91, { ptr, ptr, ptr, i32 } %86, ptr %6)
  %93 = call { ptr, i160 } %92({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %5) #17
  store { ptr, i160 } %93, ptr %7, align 8
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %94 = load ptr, ptr %.reload8, align 8
  %95 = load ptr, ptr %16, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 184, ptr %95)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %97 = load i32, ptr %.reload4, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = load ptr, ptr %98, align 8
  %100 = call ptr @typegetter_wrapper(ptr %99, ptr %94)
  %101 = load ptr, ptr %7, align 8
  %102 = ptrtoint ptr %101 to i64
  %103 = icmp eq i64 %102, ptrtoint (ptr @nil_typ to i64)
  %104 = icmp eq i64 %102, 0
  %105 = or i1 %103, %104
  %106 = icmp eq i1 %105, false
  store i1 %106, ptr %8, align 1
  %107 = load i1, ptr %8, align 1
  store i1 %107, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %108, label %._crit_edge

._crit_edge:                                      ; preds = %78
  br label %124

108:                                              ; preds = %78
  %109 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  store ptr %110, ptr %10, align 8
  %111 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %112 = load i160, ptr %111, align 4
  store i160 %112, ptr %9, align 4
  %113 = load ptr, ptr %10, align 8
  store ptr %113, ptr %12, align 8
  %114 = load i160, ptr %9, align 4
  store i160 %114, ptr %11, align 4
  %115 = load ptr, ptr %12, align 8
  %116 = insertvalue { ptr, i160 } undef, ptr %115, 0
  %117 = load i160, ptr %11, align 4
  %118 = insertvalue { ptr, i160 } %116, i160 %117, 1
  %119 = load ptr, ptr %29, align 8
  call void %119({ ptr, i160 } %118)
  %120 = load ptr, ptr %10, align 8
  store ptr %120, ptr %14, align 8
  %121 = load i160, ptr %9, align 4
  store i160 %121, ptr %13, align 4
  %122 = load ptr, ptr %14, align 8
  store ptr %122, ptr %109, align 8
  %123 = load i160, ptr %13, align 4
  store i160 %123, ptr %111, align 4
  br label %124

124:                                              ; preds = %._crit_edge, %108
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %125

._crit_edge1:                                     ; preds = %124
  br label %78

125:                                              ; preds = %124
  ret void
}

define { ptr, i160 } @Iterable_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr } %4) {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca { ptr, i160 }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %23, align 8
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  store ptr %29, ptr %.reg2mem7, align 8
  %30 = load ptr, ptr %28, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  store ptr %30, ptr %.reload10, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  store ptr %35, ptr %.reg2mem3, align 8
  %36 = load i32, ptr %34, align 4
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store i32 %36, ptr %.reload6, align 4
  call void @set_offset(ptr %24, ptr @Iterable)
  %37 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %37, align 8
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %39, align 8
  %42 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %43 = load i160, ptr %42, align 4
  store i160 %43, ptr %38, align 4
  %44 = alloca ptr, align 8
  store { ptr } %4, ptr %44, align 8
  %45 = load ptr, ptr %26, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %47 = load ptr, ptr %.reload9, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 1
  %49 = load ptr, ptr %32, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 2
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %51 = load i32, ptr %.reload5, align 4
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %51, 3
  %53 = alloca [0 x ptr], align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 0, ptr %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 184, ptr %45)
  %56 = getelementptr ptr, ptr %45, i32 %51
  %57 = getelementptr ptr, ptr %56, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = alloca {}, align 8
  %60 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %52, ptr %59)
  %61 = call { ptr, ptr, ptr, i32 } %60({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr %53) #17
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %61, ptr %62, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %75 = load i32, ptr %73, align 4
  store i32 %75, ptr %74, align 4
  call void @set_offset(ptr %63, ptr @Iterator)
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %65, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %80 = load ptr, ptr %68, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %82 = load ptr, ptr %71, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %84 = load i32, ptr %74, align 4
  store i32 %84, ptr %83, align 4
  call void @set_offset(ptr %76, ptr @Iterator)
  %85 = alloca i32, align 4
  %86 = alloca ptr, align 8
  %87 = alloca ptr, align 8
  %88 = alloca ptr, align 8
  %89 = load ptr, ptr %77, align 8
  store ptr %89, ptr %88, align 8
  %90 = load ptr, ptr %79, align 8
  store ptr %90, ptr %87, align 8
  %91 = load ptr, ptr %81, align 8
  store ptr %91, ptr %86, align 8
  %92 = load i32, ptr %83, align 4
  store i32 %92, ptr %85, align 4
  br label %93

93:                                               ; preds = %._crit_edge1, %5
  %94 = load ptr, ptr %88, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %94, 0
  %96 = load ptr, ptr %87, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 1
  %98 = load ptr, ptr %86, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 2
  %100 = load i32, ptr %85, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %100, 3
  %102 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %103 = call ptr @llvm.invariant.start.p0(i64 24, ptr %94)
  %104 = getelementptr ptr, ptr %94, i32 %100
  %105 = getelementptr ptr, ptr %104, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %101, ptr %7)
  %108 = call { ptr, i160 } %107({ ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %101, ptr %6) #17
  store { ptr, i160 } %108, ptr %8, align 8
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %109 = load ptr, ptr %.reload8, align 8
  %110 = load ptr, ptr %24, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 184, ptr %110)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %112 = load i32, ptr %.reload4, align 4
  %113 = getelementptr ptr, ptr %110, i32 %112
  %114 = load ptr, ptr %113, align 8
  %115 = call ptr @typegetter_wrapper(ptr %114, ptr %109)
  %116 = load ptr, ptr %8, align 8
  %117 = ptrtoint ptr %116 to i64
  %118 = icmp eq i64 %117, ptrtoint (ptr @nil_typ to i64)
  %119 = icmp eq i64 %117, 0
  %120 = or i1 %118, %119
  %121 = icmp eq i1 %120, false
  store i1 %121, ptr %9, align 1
  %122 = load i1, ptr %9, align 1
  store i1 %122, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %123, label %._crit_edge

._crit_edge:                                      ; preds = %93
  br label %152

123:                                              ; preds = %93
  %124 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  store ptr %125, ptr %11, align 8
  %126 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %127 = load i160, ptr %126, align 4
  store i160 %127, ptr %10, align 4
  %128 = load ptr, ptr %39, align 8
  store ptr %128, ptr %13, align 8
  %129 = load i160, ptr %38, align 4
  store i160 %129, ptr %12, align 4
  %130 = load ptr, ptr %13, align 8
  %131 = insertvalue { ptr, i160 } undef, ptr %130, 0
  %132 = load i160, ptr %12, align 4
  %133 = insertvalue { ptr, i160 } %131, i160 %132, 1
  %134 = load ptr, ptr %11, align 8
  store ptr %134, ptr %15, align 8
  %135 = load i160, ptr %10, align 4
  store i160 %135, ptr %14, align 4
  %136 = load ptr, ptr %15, align 8
  %137 = insertvalue { ptr, i160 } undef, ptr %136, 0
  %138 = load i160, ptr %14, align 4
  %139 = insertvalue { ptr, i160 } %137, i160 %138, 1
  %140 = load ptr, ptr %44, align 8
  %141 = call { ptr, i160 } %140({ ptr, i160 } %133, { ptr, i160 } %139)
  store { ptr, i160 } %141, ptr %16, align 8
  %142 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  store ptr %143, ptr %18, align 8
  %144 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %145 = load i160, ptr %144, align 4
  store i160 %145, ptr %17, align 4
  %146 = load ptr, ptr %18, align 8
  store ptr %146, ptr %39, align 8
  %147 = load i160, ptr %17, align 4
  store i160 %147, ptr %38, align 4
  %148 = load ptr, ptr %11, align 8
  store ptr %148, ptr %20, align 8
  %149 = load i160, ptr %10, align 4
  store i160 %149, ptr %19, align 4
  %150 = load ptr, ptr %20, align 8
  store ptr %150, ptr %124, align 8
  %151 = load i160, ptr %19, align 4
  store i160 %151, ptr %126, align 4
  br label %152

152:                                              ; preds = %._crit_edge, %123
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %153

._crit_edge1:                                     ; preds = %152
  br label %93

153:                                              ; preds = %152
  %154 = load ptr, ptr %39, align 8
  store ptr %154, ptr %22, align 8
  %155 = load i160, ptr %38, align 4
  store i160 %155, ptr %21, align 4
  %156 = load ptr, ptr %22, align 8
  %157 = insertvalue { ptr, i160 } undef, ptr %156, 0
  %158 = load i160, ptr %21, align 4
  %159 = insertvalue { ptr, i160 } %157, i160 %158, 1
  ret { ptr, i160 } %159
}

define i1 @Iterable_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i1, align 1
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i1, align 1
  %15 = alloca i1, align 1
  %16 = alloca i1, align 1
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i1, align 1
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem13 = alloca i1, align 1
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem24 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  store ptr %26, ptr %.reg2mem20, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  store ptr %27, ptr %.reload23, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr %32, ptr %.reg2mem16, align 8
  %33 = load i32, ptr %31, align 4
  %.reload19 = load ptr, ptr %.reg2mem16, align 8
  store i32 %33, ptr %.reload19, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca ptr, align 8
  store { ptr } %3, ptr %34, align 8
  %35 = load ptr, ptr %23, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %37 = load ptr, ptr %.reload22, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = load ptr, ptr %29, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 2
  %.reload18 = load ptr, ptr %.reg2mem16, align 8
  %41 = load i32, ptr %.reload18, align 4
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %41, 3
  %43 = alloca [0 x ptr], align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 0, ptr %43)
  %45 = call ptr @llvm.invariant.start.p0(i64 184, ptr %35)
  %46 = getelementptr ptr, ptr %35, i32 %41
  %47 = getelementptr ptr, ptr %46, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = alloca {}, align 8
  %50 = call ptr @behavior_wrapper(ptr %48, { ptr, ptr, ptr, i32 } %42, ptr %49)
  %51 = call { ptr, ptr, ptr, i32 } %50({ ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %42, ptr %43) #17
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %51, ptr %52, align 8
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %65 = load i32, ptr %63, align 4
  store i32 %65, ptr %64, align 4
  call void @set_offset(ptr %53, ptr @Iterator)
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %55, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %70 = load ptr, ptr %58, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %72 = load ptr, ptr %61, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %74 = load i32, ptr %64, align 4
  store i32 %74, ptr %73, align 4
  call void @set_offset(ptr %66, ptr @Iterator)
  %75 = alloca i32, align 4
  %76 = alloca ptr, align 8
  %77 = alloca ptr, align 8
  %78 = alloca ptr, align 8
  %79 = load ptr, ptr %67, align 8
  store ptr %79, ptr %78, align 8
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %77, align 8
  %81 = load ptr, ptr %71, align 8
  store ptr %81, ptr %76, align 8
  %82 = load i32, ptr %73, align 4
  store i32 %82, ptr %75, align 4
  br label %83

83:                                               ; preds = %145, %4
  %84 = load ptr, ptr %78, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %77, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %76, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %75, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  %92 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %93 = call ptr @llvm.invariant.start.p0(i64 24, ptr %84)
  %94 = getelementptr ptr, ptr %84, i32 %90
  %95 = getelementptr ptr, ptr %94, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = call ptr @behavior_wrapper(ptr %96, { ptr, ptr, ptr, i32 } %91, ptr %6)
  %98 = call { ptr, i160 } %97({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr %5) #17
  store { ptr, i160 } %98, ptr %7, align 8
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %99 = load ptr, ptr %.reload21, align 8
  %100 = load ptr, ptr %21, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 184, ptr %100)
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %102 = load i32, ptr %.reload17, align 4
  %103 = getelementptr ptr, ptr %100, i32 %102
  %104 = load ptr, ptr %103, align 8
  %105 = call ptr @typegetter_wrapper(ptr %104, ptr %99)
  %106 = load ptr, ptr %7, align 8
  %107 = ptrtoint ptr %106 to i64
  %108 = icmp eq i64 %107, ptrtoint (ptr @nil_typ to i64)
  %109 = icmp eq i64 %107, 0
  %110 = or i1 %108, %109
  %111 = icmp eq i1 %110, false
  store i1 %111, ptr %8, align 1
  %112 = load i1, ptr %8, align 1
  %113 = xor i1 %112, true
  store i1 %113, ptr %.reg2mem13, align 1
  %114 = select i1 %112, ptr %16, ptr %19
  store ptr %114, ptr %.reg2mem9, align 8
  br i1 %112, label %115, label %141

115:                                              ; preds = %83
  %116 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  store ptr %116, ptr %.reg2mem6, align 8
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %117 = load ptr, ptr %.reload8, align 8
  store ptr %117, ptr %10, align 8
  %118 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  store ptr %118, ptr %.reg2mem3, align 8
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %119 = load i160, ptr %.reload5, align 4
  store i160 %119, ptr %9, align 4
  store i1 false, ptr %11, align 1
  %120 = load ptr, ptr %10, align 8
  store ptr %120, ptr %13, align 8
  %121 = load i160, ptr %9, align 4
  store i160 %121, ptr %12, align 4
  %122 = load ptr, ptr %13, align 8
  %123 = insertvalue { ptr, i160 } undef, ptr %122, 0
  %124 = load i160, ptr %12, align 4
  %125 = insertvalue { ptr, i160 } %123, i160 %124, 1
  %126 = load ptr, ptr %34, align 8
  %127 = call i1 %126({ ptr, i160 } %125)
  store i1 %127, ptr %14, align 1
  %128 = load i1, ptr %11, align 1
  %129 = load i1, ptr %14, align 1
  %130 = icmp eq i1 %128, %129
  store i1 %130, ptr %15, align 1
  %131 = load i1, ptr %15, align 1
  %132 = xor i1 %131, true
  %133 = zext i1 %132 to i32
  store i32 %133, ptr %.reg2mem1, align 4
  br i1 %131, label %134, label %135

134:                                              ; preds = %115
  br label %140

135:                                              ; preds = %115
  %136 = load ptr, ptr %10, align 8
  store ptr %136, ptr %18, align 8
  %137 = load i160, ptr %9, align 4
  store i160 %137, ptr %17, align 4
  %138 = load ptr, ptr %18, align 8
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  store ptr %138, ptr %.reload7, align 8
  %139 = load i160, ptr %17, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  store i160 %139, ptr %.reload4, align 4
  br label %140

140:                                              ; preds = %135, %134
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem24, align 4
  br label %142

141:                                              ; preds = %83
  store i32 0, ptr %.reg2mem24, align 4
  br label %142

142:                                              ; preds = %141, %140
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  store i32 %.reload25, ptr %.reg2mem, align 4
  br label %143

143:                                              ; preds = %142
  %.reload = load i32, ptr %.reg2mem, align 4
  %144 = trunc i32 %.reload to i1
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %.reload15 = load i1, ptr %.reg2mem13, align 1
  br i1 %144, label %145, label %146

145:                                              ; preds = %143
  br label %83

146:                                              ; preds = %143
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %.reload14 = load i1, ptr %.reg2mem13, align 1
  store i1 %.reload14, ptr %.reload11, align 1
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %147 = load i1, ptr %.reload10, align 1
  ret i1 %147
}

define i1 @Iterable_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i1, align 1
  %14 = alloca i1, align 1
  %15 = alloca i160, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i1, align 1
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem13 = alloca i1, align 1
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem26 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem22, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload25 = load ptr, ptr %.reg2mem22, align 8
  store ptr %25, ptr %.reload25, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem18, align 8
  %31 = load i32, ptr %29, align 4
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  store i32 %31, ptr %.reload21, align 4
  call void @set_offset(ptr %19, ptr @Iterable)
  %32 = alloca ptr, align 8
  store { ptr } %3, ptr %32, align 8
  %33 = load ptr, ptr %21, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %.reload24 = load ptr, ptr %.reg2mem22, align 8
  %35 = load ptr, ptr %.reload24, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 1
  %37 = load ptr, ptr %27, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 2
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %39 = load i32, ptr %.reload20, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %33)
  %44 = getelementptr ptr, ptr %33, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %53, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %68 = load ptr, ptr %56, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %70 = load ptr, ptr %59, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %72 = load i32, ptr %62, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %64, ptr @Iterator)
  %73 = alloca i32, align 4
  %74 = alloca ptr, align 8
  %75 = alloca ptr, align 8
  %76 = alloca ptr, align 8
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = load ptr, ptr %67, align 8
  store ptr %78, ptr %75, align 8
  %79 = load ptr, ptr %69, align 8
  store ptr %79, ptr %74, align 8
  %80 = load i32, ptr %71, align 4
  store i32 %80, ptr %73, align 4
  br label %81

81:                                               ; preds = %139, %4
  %82 = load ptr, ptr %76, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %82, 0
  %84 = load ptr, ptr %75, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 1
  %86 = load ptr, ptr %74, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 2
  %88 = load i32, ptr %73, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, i32 %88, 3
  %90 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %91 = call ptr @llvm.invariant.start.p0(i64 24, ptr %82)
  %92 = getelementptr ptr, ptr %82, i32 %88
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %89, ptr %6)
  %96 = call { ptr, i160 } %95({ ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %89, ptr %5) #17
  store { ptr, i160 } %96, ptr %7, align 8
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %97 = load ptr, ptr %.reload23, align 8
  %98 = load ptr, ptr %19, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 184, ptr %98)
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %100 = load i32, ptr %.reload19, align 4
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = load ptr, ptr %101, align 8
  %103 = call ptr @typegetter_wrapper(ptr %102, ptr %97)
  %104 = load ptr, ptr %7, align 8
  %105 = ptrtoint ptr %104 to i64
  %106 = icmp eq i64 %105, ptrtoint (ptr @nil_typ to i64)
  %107 = icmp eq i64 %105, 0
  %108 = or i1 %106, %107
  %109 = icmp eq i1 %108, false
  store i1 %109, ptr %8, align 1
  %110 = load i1, ptr %8, align 1
  store i1 %110, ptr %.reg2mem13, align 1
  %.reload17 = load i1, ptr %.reg2mem13, align 1
  %111 = select i1 %.reload17, ptr %14, ptr %17
  store ptr %111, ptr %.reg2mem9, align 8
  %.reload16 = load i1, ptr %.reg2mem13, align 1
  br i1 %.reload16, label %112, label %135

112:                                              ; preds = %81
  %113 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  store ptr %113, ptr %.reg2mem6, align 8
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %114 = load ptr, ptr %.reload8, align 8
  store ptr %114, ptr %10, align 8
  %115 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  store ptr %115, ptr %.reg2mem3, align 8
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %116 = load i160, ptr %.reload5, align 4
  store i160 %116, ptr %9, align 4
  %117 = load ptr, ptr %10, align 8
  store ptr %117, ptr %12, align 8
  %118 = load i160, ptr %9, align 4
  store i160 %118, ptr %11, align 4
  %119 = load ptr, ptr %12, align 8
  %120 = insertvalue { ptr, i160 } undef, ptr %119, 0
  %121 = load i160, ptr %11, align 4
  %122 = insertvalue { ptr, i160 } %120, i160 %121, 1
  %123 = load ptr, ptr %32, align 8
  %124 = call i1 %123({ ptr, i160 } %122)
  store i1 %124, ptr %13, align 1
  %125 = load i1, ptr %13, align 1
  %126 = xor i1 %125, true
  %127 = zext i1 %126 to i32
  store i32 %127, ptr %.reg2mem1, align 4
  br i1 %125, label %128, label %129

128:                                              ; preds = %112
  br label %134

129:                                              ; preds = %112
  %130 = load ptr, ptr %10, align 8
  store ptr %130, ptr %16, align 8
  %131 = load i160, ptr %9, align 4
  store i160 %131, ptr %15, align 4
  %132 = load ptr, ptr %16, align 8
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  store ptr %132, ptr %.reload7, align 8
  %133 = load i160, ptr %15, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  store i160 %133, ptr %.reload4, align 4
  br label %134

134:                                              ; preds = %129, %128
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem26, align 4
  br label %136

135:                                              ; preds = %81
  store i32 0, ptr %.reg2mem26, align 4
  br label %136

136:                                              ; preds = %135, %134
  %.reload27 = load i32, ptr %.reg2mem26, align 4
  store i32 %.reload27, ptr %.reg2mem, align 4
  br label %137

137:                                              ; preds = %136
  %.reload = load i32, ptr %.reg2mem, align 4
  %138 = trunc i32 %.reload to i1
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %.reload15 = load i1, ptr %.reg2mem13, align 1
  br i1 %138, label %139, label %140

139:                                              ; preds = %137
  br label %81

140:                                              ; preds = %137
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %.reload14 = load i1, ptr %.reg2mem13, align 1
  store i1 %.reload14, ptr %.reload11, align 1
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %141 = load i1, ptr %.reload10, align 1
  ret i1 %141
}

define { ptr, ptr, ptr, i32 } @Iterable_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca ptr, align 8
  store { ptr } %3, ptr %19, align 8
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 184, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = call ptr @typegetter_wrapper(ptr %25, ptr %20)
  %27 = load ptr, ptr %2, align 8
  %28 = getelementptr [1 x ptr], ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = alloca [3 x ptr], align 8
  store ptr @MapIterable, ptr %30, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  store ptr %26, ptr %31, align 8
  %32 = getelementptr ptr, ptr %30, i32 2
  store ptr %29, ptr %32, align 8
  %33 = load ptr, ptr %30, align 8
  %34 = getelementptr ptr, ptr %33, i32 6
  %35 = load ptr, ptr %34, align 8
  %36 = call { i64, i64 } @size_wrapper(ptr %35, ptr %30)
  %37 = extractvalue { i64, i64 } %36, 0
  %38 = call ptr @bump_malloc(i64 %37)
  store ptr %26, ptr %38, align 8
  %39 = getelementptr ptr, ptr %38, i32 1
  store ptr %29, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  store ptr @MapIterable, ptr %44, align 8
  store ptr %38, ptr %43, align 8
  store i32 10, ptr %41, align 4
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %8, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %49 = load ptr, ptr %11, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %51 = load ptr, ptr %14, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %53 = load i32, ptr %17, align 4
  store i32 %53, ptr %52, align 4
  call void @set_offset(ptr %45, ptr @Iterable)
  %54 = load ptr, ptr %46, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = load ptr, ptr %48, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 1
  %58 = load ptr, ptr %50, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %58, 2
  %60 = load i32, ptr %52, align 4
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %60, 3
  %62 = load ptr, ptr %19, align 8
  %63 = insertvalue { ptr } undef, ptr %62, 0
  %64 = load ptr, ptr %44, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = load ptr, ptr %43, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 1
  %68 = load ptr, ptr %42, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 2
  %70 = load i32, ptr %41, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = load ptr, ptr %11, align 8
  %73 = load ptr, ptr %6, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 184, ptr %73)
  %75 = load i32, ptr %17, align 4
  %76 = getelementptr ptr, ptr %73, i32 %75
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %72)
  %79 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %80 = getelementptr [3 x ptr], ptr %79, i32 0, i32 1
  store ptr %78, ptr %80, align 8
  %81 = getelementptr [3 x ptr], ptr %79, i32 0, i32 2
  store ptr null, ptr %81, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 16, ptr %79)
  store ptr @Iterable, ptr %79, align 8
  %83 = load ptr, ptr %2, align 8
  %84 = getelementptr [1 x ptr], ptr %83, i32 0, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = load ptr, ptr %11, align 8
  %87 = load ptr, ptr %6, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 184, ptr %87)
  %89 = load i32, ptr %17, align 4
  %90 = getelementptr ptr, ptr %87, i32 %89
  %91 = load ptr, ptr %90, align 8
  %92 = call ptr @typegetter_wrapper(ptr %91, ptr %86)
  %93 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %94 = getelementptr [4 x ptr], ptr %93, i32 0, i32 2
  store ptr %92, ptr %94, align 8
  %95 = getelementptr [4 x ptr], ptr %93, i32 0, i32 1
  store ptr %85, ptr %95, align 8
  %96 = getelementptr [4 x ptr], ptr %93, i32 0, i32 3
  store ptr null, ptr %96, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 24, ptr %93)
  store ptr @function_typ, ptr %93, align 8
  %98 = alloca [2 x ptr], align 8
  %99 = getelementptr [2 x ptr], ptr %98, i32 0, i32 0
  store ptr %79, ptr %99, align 8
  %100 = getelementptr [2 x ptr], ptr %98, i32 0, i32 1
  store ptr %93, ptr %100, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 4, ptr %98)
  %102 = call ptr @llvm.invariant.start.p0(i64 408, ptr %64)
  %103 = getelementptr ptr, ptr %64, i32 %70
  %104 = getelementptr ptr, ptr %103, i32 4
  %105 = load ptr, ptr %104, align 8
  %106 = alloca { ptr, ptr }, align 8
  %107 = getelementptr { ptr, ptr }, ptr %106, i32 0, i32 0
  store ptr %54, ptr %107, align 8
  %108 = getelementptr { ptr, ptr }, ptr %106, i32 0, i32 1
  store ptr @function_typ, ptr %108, align 8
  %109 = call ptr @behavior_wrapper(ptr %105, { ptr, ptr, ptr, i32 } %71, ptr %106)
  call void %109({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %98, { ptr, ptr, ptr, i32 } %61, { ptr } %63) #17
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %44, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %114 = load ptr, ptr %43, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %116 = load ptr, ptr %42, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %118 = load i32, ptr %41, align 4
  store i32 %118, ptr %117, align 4
  call void @set_offset(ptr %110, ptr @MapIterable)
  %119 = load ptr, ptr %111, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %121 = load ptr, ptr %113, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 1
  %123 = load ptr, ptr %115, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %123, 2
  %125 = load i32, ptr %117, align 4
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %125, 3
  ret { ptr, ptr, ptr, i32 } %126
}

define { ptr, ptr, ptr, i32 } @Iterable_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca ptr, align 8
  store { ptr } %3, ptr %19, align 8
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 184, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = call ptr @typegetter_wrapper(ptr %25, ptr %20)
  %27 = alloca [2 x ptr], align 8
  store ptr @FilterIterable, ptr %27, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  store ptr %26, ptr %28, align 8
  %29 = load ptr, ptr %27, align 8
  %30 = getelementptr ptr, ptr %29, i32 6
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %27)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  store ptr %26, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 8, ptr %34)
  %36 = alloca i32, align 4
  %37 = alloca ptr, align 8
  %38 = alloca ptr, align 8
  %39 = alloca ptr, align 8
  store ptr @FilterIterable, ptr %39, align 8
  store ptr %34, ptr %38, align 8
  store i32 10, ptr %36, align 4
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %8, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %44 = load ptr, ptr %11, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %46 = load ptr, ptr %14, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %48 = load i32, ptr %17, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %40, ptr @Iterable)
  %49 = load ptr, ptr %41, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 1
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 2
  %55 = load i32, ptr %47, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %55, 3
  %57 = load ptr, ptr %19, align 8
  %58 = insertvalue { ptr } undef, ptr %57, 0
  %59 = load ptr, ptr %39, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = load ptr, ptr %38, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 1
  %63 = load ptr, ptr %37, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %63, 2
  %65 = load i32, ptr %36, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %65, 3
  %67 = load ptr, ptr %11, align 8
  %68 = load ptr, ptr %6, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 184, ptr %68)
  %70 = load i32, ptr %17, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr @typegetter_wrapper(ptr %72, ptr %67)
  %74 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %75 = getelementptr [3 x ptr], ptr %74, i32 0, i32 1
  store ptr %73, ptr %75, align 8
  %76 = getelementptr [3 x ptr], ptr %74, i32 0, i32 2
  store ptr null, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 16, ptr %74)
  store ptr @Iterable, ptr %74, align 8
  %78 = load ptr, ptr %11, align 8
  %79 = load ptr, ptr %6, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 184, ptr %79)
  %81 = load i32, ptr %17, align 4
  %82 = getelementptr ptr, ptr %79, i32 %81
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @typegetter_wrapper(ptr %83, ptr %78)
  %85 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %86 = getelementptr [4 x ptr], ptr %85, i32 0, i32 2
  store ptr %84, ptr %86, align 8
  %87 = getelementptr [4 x ptr], ptr %85, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %87, align 8
  %88 = getelementptr [4 x ptr], ptr %85, i32 0, i32 3
  store ptr null, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 24, ptr %85)
  store ptr @function_typ, ptr %85, align 8
  %90 = alloca [2 x ptr], align 8
  %91 = getelementptr [2 x ptr], ptr %90, i32 0, i32 0
  store ptr %74, ptr %91, align 8
  %92 = getelementptr [2 x ptr], ptr %90, i32 0, i32 1
  store ptr %85, ptr %92, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 4, ptr %90)
  %94 = call ptr @llvm.invariant.start.p0(i64 400, ptr %59)
  %95 = getelementptr ptr, ptr %59, i32 %65
  %96 = getelementptr ptr, ptr %95, i32 3
  %97 = load ptr, ptr %96, align 8
  %98 = alloca { ptr, ptr }, align 8
  %99 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 0
  store ptr %49, ptr %99, align 8
  %100 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 1
  store ptr @function_typ, ptr %100, align 8
  %101 = call ptr @behavior_wrapper(ptr %97, { ptr, ptr, ptr, i32 } %66, ptr %98)
  call void %101({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %90, { ptr, ptr, ptr, i32 } %56, { ptr } %58) #17
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %39, align 8
  store ptr %104, ptr %103, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %106 = load ptr, ptr %38, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %108 = load ptr, ptr %37, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %110 = load i32, ptr %36, align 4
  store i32 %110, ptr %109, align 4
  call void @set_offset(ptr %102, ptr @FilterIterable)
  %111 = load ptr, ptr %103, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = load ptr, ptr %105, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %113, 1
  %115 = load ptr, ptr %107, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %115, 2
  %117 = load i32, ptr %109, align 4
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, i32 %117, 3
  ret { ptr, ptr, ptr, i32 } %118
}

define { ptr, ptr, ptr, i32 } @Iterable_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca [2 x ptr], align 8
  store ptr @ChainIterable, ptr %40, align 8
  %41 = getelementptr ptr, ptr %40, i32 1
  store ptr %39, ptr %41, align 8
  %42 = load ptr, ptr %40, align 8
  %43 = getelementptr ptr, ptr %42, i32 6
  %44 = load ptr, ptr %43, align 8
  %45 = call { i64, i64 } @size_wrapper(ptr %44, ptr %40)
  %46 = extractvalue { i64, i64 } %45, 0
  %47 = call ptr @bump_malloc(i64 %46)
  store ptr %39, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 8, ptr %47)
  %49 = alloca i32, align 4
  %50 = alloca ptr, align 8
  %51 = alloca ptr, align 8
  %52 = alloca ptr, align 8
  store ptr @ChainIterable, ptr %52, align 8
  store ptr %47, ptr %51, align 8
  store i32 10, ptr %49, align 4
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %55 = load ptr, ptr %8, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %57 = load ptr, ptr %11, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %59 = load ptr, ptr %14, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %61 = load i32, ptr %17, align 4
  store i32 %61, ptr %60, align 4
  call void @set_offset(ptr %53, ptr @Iterable)
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %60, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %22, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %74 = load ptr, ptr %25, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %76 = load ptr, ptr %28, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %78 = load i32, ptr %31, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %70, ptr @Iterable)
  %79 = load ptr, ptr %71, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %73, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %75, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %77, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = load ptr, ptr %52, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %51, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %50, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %49, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = load ptr, ptr %11, align 8
  %96 = load ptr, ptr %6, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 184, ptr %96)
  %98 = load i32, ptr %17, align 4
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = load ptr, ptr %99, align 8
  %101 = call ptr @typegetter_wrapper(ptr %100, ptr %95)
  %102 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %103 = getelementptr [3 x ptr], ptr %102, i32 0, i32 1
  store ptr %101, ptr %103, align 8
  %104 = getelementptr [3 x ptr], ptr %102, i32 0, i32 2
  store ptr null, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 16, ptr %102)
  store ptr @Iterable, ptr %102, align 8
  %106 = load ptr, ptr %11, align 8
  %107 = load ptr, ptr %6, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 184, ptr %107)
  %109 = load i32, ptr %17, align 4
  %110 = getelementptr ptr, ptr %107, i32 %109
  %111 = load ptr, ptr %110, align 8
  %112 = call ptr @typegetter_wrapper(ptr %111, ptr %106)
  %113 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %114 = getelementptr [3 x ptr], ptr %113, i32 0, i32 1
  store ptr %112, ptr %114, align 8
  %115 = getelementptr [3 x ptr], ptr %113, i32 0, i32 2
  store ptr null, ptr %115, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 16, ptr %113)
  store ptr @Iterable, ptr %113, align 8
  %117 = alloca [2 x ptr], align 8
  %118 = getelementptr [2 x ptr], ptr %117, i32 0, i32 0
  store ptr %102, ptr %118, align 8
  %119 = getelementptr [2 x ptr], ptr %117, i32 0, i32 1
  store ptr %113, ptr %119, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 4, ptr %117)
  %121 = call ptr @llvm.invariant.start.p0(i64 400, ptr %87)
  %122 = getelementptr ptr, ptr %87, i32 %93
  %123 = getelementptr ptr, ptr %122, i32 3
  %124 = load ptr, ptr %123, align 8
  %125 = alloca { ptr, ptr }, align 8
  %126 = getelementptr { ptr, ptr }, ptr %125, i32 0, i32 0
  store ptr %62, ptr %126, align 8
  %127 = getelementptr { ptr, ptr }, ptr %125, i32 0, i32 1
  store ptr %79, ptr %127, align 8
  %128 = call ptr @behavior_wrapper(ptr %124, { ptr, ptr, ptr, i32 } %94, ptr %125)
  call void %128({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %117, { ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %86) #17
  %129 = alloca { ptr, ptr, ptr, i32 }, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %52, align 8
  store ptr %131, ptr %130, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %133 = load ptr, ptr %51, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %135 = load ptr, ptr %50, align 8
  store ptr %135, ptr %134, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %137 = load i32, ptr %49, align 4
  store i32 %137, ptr %136, align 4
  call void @set_offset(ptr %129, ptr @ChainIterable)
  %138 = load ptr, ptr %130, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %140 = load ptr, ptr %132, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %140, 1
  %142 = load ptr, ptr %134, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %142, 2
  %144 = load i32, ptr %136, align 4
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, i32 %144, 3
  ret { ptr, ptr, ptr, i32 } %145
}

define { ptr, ptr, ptr, i32 } @Iterable_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterable, ptr %40, align 8
  %41 = getelementptr ptr, ptr %40, i32 1
  store ptr %39, ptr %41, align 8
  %42 = load ptr, ptr %40, align 8
  %43 = getelementptr ptr, ptr %42, i32 6
  %44 = load ptr, ptr %43, align 8
  %45 = call { i64, i64 } @size_wrapper(ptr %44, ptr %40)
  %46 = extractvalue { i64, i64 } %45, 0
  %47 = call ptr @bump_malloc(i64 %46)
  store ptr %39, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 8, ptr %47)
  %49 = alloca i32, align 4
  %50 = alloca ptr, align 8
  %51 = alloca ptr, align 8
  %52 = alloca ptr, align 8
  store ptr @InterleaveIterable, ptr %52, align 8
  store ptr %47, ptr %51, align 8
  store i32 10, ptr %49, align 4
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %55 = load ptr, ptr %8, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %57 = load ptr, ptr %11, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %59 = load ptr, ptr %14, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %61 = load i32, ptr %17, align 4
  store i32 %61, ptr %60, align 4
  call void @set_offset(ptr %53, ptr @Iterable)
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %60, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %22, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %74 = load ptr, ptr %25, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %76 = load ptr, ptr %28, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %78 = load i32, ptr %31, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %70, ptr @Iterable)
  %79 = load ptr, ptr %71, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %73, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %75, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %77, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = load ptr, ptr %52, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %51, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %50, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %49, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = load ptr, ptr %11, align 8
  %96 = load ptr, ptr %6, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 184, ptr %96)
  %98 = load i32, ptr %17, align 4
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = load ptr, ptr %99, align 8
  %101 = call ptr @typegetter_wrapper(ptr %100, ptr %95)
  %102 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %103 = getelementptr [3 x ptr], ptr %102, i32 0, i32 1
  store ptr %101, ptr %103, align 8
  %104 = getelementptr [3 x ptr], ptr %102, i32 0, i32 2
  store ptr null, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 16, ptr %102)
  store ptr @Iterable, ptr %102, align 8
  %106 = load ptr, ptr %11, align 8
  %107 = load ptr, ptr %6, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 184, ptr %107)
  %109 = load i32, ptr %17, align 4
  %110 = getelementptr ptr, ptr %107, i32 %109
  %111 = load ptr, ptr %110, align 8
  %112 = call ptr @typegetter_wrapper(ptr %111, ptr %106)
  %113 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %114 = getelementptr [3 x ptr], ptr %113, i32 0, i32 1
  store ptr %112, ptr %114, align 8
  %115 = getelementptr [3 x ptr], ptr %113, i32 0, i32 2
  store ptr null, ptr %115, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 16, ptr %113)
  store ptr @Iterable, ptr %113, align 8
  %117 = alloca [2 x ptr], align 8
  %118 = getelementptr [2 x ptr], ptr %117, i32 0, i32 0
  store ptr %102, ptr %118, align 8
  %119 = getelementptr [2 x ptr], ptr %117, i32 0, i32 1
  store ptr %113, ptr %119, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 4, ptr %117)
  %121 = call ptr @llvm.invariant.start.p0(i64 400, ptr %87)
  %122 = getelementptr ptr, ptr %87, i32 %93
  %123 = getelementptr ptr, ptr %122, i32 3
  %124 = load ptr, ptr %123, align 8
  %125 = alloca { ptr, ptr }, align 8
  %126 = getelementptr { ptr, ptr }, ptr %125, i32 0, i32 0
  store ptr %62, ptr %126, align 8
  %127 = getelementptr { ptr, ptr }, ptr %125, i32 0, i32 1
  store ptr %79, ptr %127, align 8
  %128 = call ptr @behavior_wrapper(ptr %124, { ptr, ptr, ptr, i32 } %94, ptr %125)
  call void %128({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %117, { ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %86) #17
  %129 = alloca { ptr, ptr, ptr, i32 }, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %52, align 8
  store ptr %131, ptr %130, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %133 = load ptr, ptr %51, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %135 = load ptr, ptr %50, align 8
  store ptr %135, ptr %134, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %137 = load i32, ptr %49, align 4
  store i32 %137, ptr %136, align 4
  call void @set_offset(ptr %129, ptr @InterleaveIterable)
  %138 = load ptr, ptr %130, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %140 = load ptr, ptr %132, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %140, 1
  %142 = load ptr, ptr %134, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %142, 2
  %144 = load i32, ptr %136, align 4
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, i32 %144, 3
  ret { ptr, ptr, ptr, i32 } %145
}

define { ptr, ptr, ptr, i32 } @Iterable_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %40, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %40, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 184, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = call ptr @typegetter_wrapper(ptr %48, ptr %42)
  %50 = load ptr, ptr %11, align 8
  %51 = load ptr, ptr %6, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 184, ptr %51)
  %53 = load i32, ptr %17, align 4
  %54 = getelementptr ptr, ptr %51, i32 %53
  %55 = load ptr, ptr %54, align 8
  %56 = call ptr @typegetter_wrapper(ptr %55, ptr %50)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %57, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %57, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 184, ptr %60)
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = getelementptr ptr, ptr %60, i32 %63
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr @typegetter_wrapper(ptr %65, ptr %59)
  %67 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %68 = getelementptr [4 x ptr], ptr %67, i32 0, i32 2
  store ptr %66, ptr %68, align 8
  %69 = getelementptr [4 x ptr], ptr %67, i32 0, i32 1
  store ptr %56, ptr %69, align 8
  %70 = getelementptr [4 x ptr], ptr %67, i32 0, i32 3
  store ptr null, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 24, ptr %67)
  store ptr @Pair, ptr %67, align 8
  %72 = alloca [4 x ptr], align 8
  store ptr @ZipIterable, ptr %72, align 8
  %73 = getelementptr ptr, ptr %72, i32 1
  store ptr %39, ptr %73, align 8
  %74 = getelementptr ptr, ptr %72, i32 2
  store ptr %49, ptr %74, align 8
  %75 = getelementptr ptr, ptr %72, i32 3
  store ptr %67, ptr %75, align 8
  %76 = load ptr, ptr %72, align 8
  %77 = getelementptr ptr, ptr %76, i32 6
  %78 = load ptr, ptr %77, align 8
  %79 = call { i64, i64 } @size_wrapper(ptr %78, ptr %72)
  %80 = extractvalue { i64, i64 } %79, 0
  %81 = call ptr @bump_malloc(i64 %80)
  store ptr %39, ptr %81, align 8
  %82 = getelementptr ptr, ptr %81, i32 1
  store ptr %49, ptr %82, align 8
  %83 = getelementptr ptr, ptr %81, i32 2
  store ptr %67, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 24, ptr %81)
  %85 = alloca i32, align 4
  %86 = alloca ptr, align 8
  %87 = alloca ptr, align 8
  %88 = alloca ptr, align 8
  store ptr @ZipIterable, ptr %88, align 8
  store ptr %81, ptr %87, align 8
  store i32 10, ptr %85, align 4
  %89 = alloca { ptr, ptr, ptr, i32 }, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 0
  %91 = load ptr, ptr %8, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %93 = load ptr, ptr %11, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 2
  %95 = load ptr, ptr %14, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  %97 = load i32, ptr %17, align 4
  store i32 %97, ptr %96, align 4
  call void @set_offset(ptr %89, ptr @Iterable)
  %98 = load ptr, ptr %90, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = load ptr, ptr %92, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 1
  %102 = load ptr, ptr %94, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %102, 2
  %104 = load i32, ptr %96, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %104, 3
  %106 = alloca { ptr, ptr, ptr, i32 }, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 0
  %108 = load ptr, ptr %22, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 1
  %110 = load ptr, ptr %25, align 8
  store ptr %110, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 2
  %112 = load ptr, ptr %28, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 3
  %114 = load i32, ptr %31, align 4
  store i32 %114, ptr %113, align 4
  call void @set_offset(ptr %106, ptr @Iterable)
  %115 = load ptr, ptr %107, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %115, 0
  %117 = load ptr, ptr %109, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %117, 1
  %119 = load ptr, ptr %111, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 2
  %121 = load i32, ptr %113, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, i32 %121, 3
  %123 = load ptr, ptr %88, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = load ptr, ptr %87, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %125, 1
  %127 = load ptr, ptr %86, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %127, 2
  %129 = load i32, ptr %85, align 4
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 %129, 3
  %131 = load ptr, ptr %11, align 8
  %132 = load ptr, ptr %6, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 184, ptr %132)
  %134 = load i32, ptr %17, align 4
  %135 = getelementptr ptr, ptr %132, i32 %134
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @typegetter_wrapper(ptr %136, ptr %131)
  %138 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %139 = getelementptr [3 x ptr], ptr %138, i32 0, i32 1
  store ptr %137, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %138, i32 0, i32 2
  store ptr null, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %138)
  store ptr @Iterable, ptr %138, align 8
  %142 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %142, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = load ptr, ptr %142, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 184, ptr %145)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 3
  %148 = load i32, ptr %147, align 4
  %149 = getelementptr ptr, ptr %145, i32 %148
  %150 = load ptr, ptr %149, align 8
  %151 = call ptr @typegetter_wrapper(ptr %150, ptr %144)
  %152 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %153 = getelementptr [3 x ptr], ptr %152, i32 0, i32 1
  store ptr %151, ptr %153, align 8
  %154 = getelementptr [3 x ptr], ptr %152, i32 0, i32 2
  store ptr null, ptr %154, align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 16, ptr %152)
  store ptr @Iterable, ptr %152, align 8
  %156 = alloca [2 x ptr], align 8
  %157 = getelementptr [2 x ptr], ptr %156, i32 0, i32 0
  store ptr %138, ptr %157, align 8
  %158 = getelementptr [2 x ptr], ptr %156, i32 0, i32 1
  store ptr %152, ptr %158, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 4, ptr %156)
  %160 = call ptr @llvm.invariant.start.p0(i64 416, ptr %123)
  %161 = getelementptr ptr, ptr %123, i32 %129
  %162 = getelementptr ptr, ptr %161, i32 5
  %163 = load ptr, ptr %162, align 8
  %164 = alloca { ptr, ptr }, align 8
  %165 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 0
  store ptr %98, ptr %165, align 8
  %166 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 1
  store ptr %115, ptr %166, align 8
  %167 = call ptr @behavior_wrapper(ptr %163, { ptr, ptr, ptr, i32 } %130, ptr %164)
  call void %167({ ptr, ptr, ptr, i32 } %130, { ptr, ptr, ptr, i32 } %130, ptr %156, { ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %122) #17
  %168 = alloca { ptr, ptr, ptr, i32 }, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 0
  %170 = load ptr, ptr %88, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 1
  %172 = load ptr, ptr %87, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 2
  %174 = load ptr, ptr %86, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 3
  %176 = load i32, ptr %85, align 4
  store i32 %176, ptr %175, align 4
  call void @set_offset(ptr %168, ptr @ZipIterable)
  %177 = load ptr, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %177, 0
  %179 = load ptr, ptr %171, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %179, 1
  %181 = load ptr, ptr %173, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %180, ptr %181, 2
  %183 = load i32, ptr %175, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, i32 %183, 3
  ret { ptr, ptr, ptr, i32 } %184
}

define { ptr, ptr, ptr, i32 } @Iterable_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %40, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %40, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 184, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = call ptr @typegetter_wrapper(ptr %48, ptr %42)
  %50 = load ptr, ptr %11, align 8
  %51 = load ptr, ptr %6, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 184, ptr %51)
  %53 = load i32, ptr %17, align 4
  %54 = getelementptr ptr, ptr %51, i32 %53
  %55 = load ptr, ptr %54, align 8
  %56 = call ptr @typegetter_wrapper(ptr %55, ptr %50)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %57, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %57, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 184, ptr %60)
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = getelementptr ptr, ptr %60, i32 %63
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr @typegetter_wrapper(ptr %65, ptr %59)
  %67 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %68 = getelementptr [4 x ptr], ptr %67, i32 0, i32 2
  store ptr %66, ptr %68, align 8
  %69 = getelementptr [4 x ptr], ptr %67, i32 0, i32 1
  store ptr %56, ptr %69, align 8
  %70 = getelementptr [4 x ptr], ptr %67, i32 0, i32 3
  store ptr null, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 24, ptr %67)
  store ptr @Pair, ptr %67, align 8
  %72 = alloca [4 x ptr], align 8
  store ptr @ProductIterable, ptr %72, align 8
  %73 = getelementptr ptr, ptr %72, i32 1
  store ptr %39, ptr %73, align 8
  %74 = getelementptr ptr, ptr %72, i32 2
  store ptr %49, ptr %74, align 8
  %75 = getelementptr ptr, ptr %72, i32 3
  store ptr %67, ptr %75, align 8
  %76 = load ptr, ptr %72, align 8
  %77 = getelementptr ptr, ptr %76, i32 6
  %78 = load ptr, ptr %77, align 8
  %79 = call { i64, i64 } @size_wrapper(ptr %78, ptr %72)
  %80 = extractvalue { i64, i64 } %79, 0
  %81 = call ptr @bump_malloc(i64 %80)
  store ptr %39, ptr %81, align 8
  %82 = getelementptr ptr, ptr %81, i32 1
  store ptr %49, ptr %82, align 8
  %83 = getelementptr ptr, ptr %81, i32 2
  store ptr %67, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 24, ptr %81)
  %85 = alloca i32, align 4
  %86 = alloca ptr, align 8
  %87 = alloca ptr, align 8
  %88 = alloca ptr, align 8
  store ptr @ProductIterable, ptr %88, align 8
  store ptr %81, ptr %87, align 8
  store i32 10, ptr %85, align 4
  %89 = alloca { ptr, ptr, ptr, i32 }, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 0
  %91 = load ptr, ptr %8, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %93 = load ptr, ptr %11, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 2
  %95 = load ptr, ptr %14, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  %97 = load i32, ptr %17, align 4
  store i32 %97, ptr %96, align 4
  call void @set_offset(ptr %89, ptr @Iterable)
  %98 = load ptr, ptr %90, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = load ptr, ptr %92, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 1
  %102 = load ptr, ptr %94, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %102, 2
  %104 = load i32, ptr %96, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %104, 3
  %106 = alloca { ptr, ptr, ptr, i32 }, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 0
  %108 = load ptr, ptr %22, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 1
  %110 = load ptr, ptr %25, align 8
  store ptr %110, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 2
  %112 = load ptr, ptr %28, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 3
  %114 = load i32, ptr %31, align 4
  store i32 %114, ptr %113, align 4
  call void @set_offset(ptr %106, ptr @Iterable)
  %115 = load ptr, ptr %107, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %115, 0
  %117 = load ptr, ptr %109, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %117, 1
  %119 = load ptr, ptr %111, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 2
  %121 = load i32, ptr %113, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, i32 %121, 3
  %123 = load ptr, ptr %88, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = load ptr, ptr %87, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %125, 1
  %127 = load ptr, ptr %86, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %127, 2
  %129 = load i32, ptr %85, align 4
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 %129, 3
  %131 = load ptr, ptr %11, align 8
  %132 = load ptr, ptr %6, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 184, ptr %132)
  %134 = load i32, ptr %17, align 4
  %135 = getelementptr ptr, ptr %132, i32 %134
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @typegetter_wrapper(ptr %136, ptr %131)
  %138 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %139 = getelementptr [3 x ptr], ptr %138, i32 0, i32 1
  store ptr %137, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %138, i32 0, i32 2
  store ptr null, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %138)
  store ptr @Iterable, ptr %138, align 8
  %142 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %142, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = load ptr, ptr %142, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 184, ptr %145)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 3
  %148 = load i32, ptr %147, align 4
  %149 = getelementptr ptr, ptr %145, i32 %148
  %150 = load ptr, ptr %149, align 8
  %151 = call ptr @typegetter_wrapper(ptr %150, ptr %144)
  %152 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %153 = getelementptr [3 x ptr], ptr %152, i32 0, i32 1
  store ptr %151, ptr %153, align 8
  %154 = getelementptr [3 x ptr], ptr %152, i32 0, i32 2
  store ptr null, ptr %154, align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 16, ptr %152)
  store ptr @Iterable, ptr %152, align 8
  %156 = alloca [2 x ptr], align 8
  %157 = getelementptr [2 x ptr], ptr %156, i32 0, i32 0
  store ptr %138, ptr %157, align 8
  %158 = getelementptr [2 x ptr], ptr %156, i32 0, i32 1
  store ptr %152, ptr %158, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 4, ptr %156)
  %160 = call ptr @llvm.invariant.start.p0(i64 416, ptr %123)
  %161 = getelementptr ptr, ptr %123, i32 %129
  %162 = getelementptr ptr, ptr %161, i32 5
  %163 = load ptr, ptr %162, align 8
  %164 = alloca { ptr, ptr }, align 8
  %165 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 0
  store ptr %98, ptr %165, align 8
  %166 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 1
  store ptr %115, ptr %166, align 8
  %167 = call ptr @behavior_wrapper(ptr %163, { ptr, ptr, ptr, i32 } %130, ptr %164)
  call void %167({ ptr, ptr, ptr, i32 } %130, { ptr, ptr, ptr, i32 } %130, ptr %156, { ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %122) #17
  %168 = alloca { ptr, ptr, ptr, i32 }, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 0
  %170 = load ptr, ptr %88, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 1
  %172 = load ptr, ptr %87, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 2
  %174 = load ptr, ptr %86, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 3
  %176 = load i32, ptr %85, align 4
  store i32 %176, ptr %175, align 4
  call void @set_offset(ptr %168, ptr @ProductIterable)
  %177 = load ptr, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %177, 0
  %179 = load ptr, ptr %171, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %179, 1
  %181 = load ptr, ptr %173, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %180, ptr %181, 2
  %183 = load i32, ptr %175, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, i32 %183, 3
  ret { ptr, ptr, ptr, i32 } %184
}

define { i64, i64 } @_data_size_ProductIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ProductIterable_field_ProductIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ProductIterable_field_ProductIterable_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterable_field_ProductIterable_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 17, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [52 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ProductIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 18, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [52 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ProductIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Pair, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Pair to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 20, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [52 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @ProductIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ProductIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ProductIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ProductIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 28, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @ProductIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ProductIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 416, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 416, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 4
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ProductIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 416, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 416, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 4
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #16
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  call void @assume_offset(ptr %74, ptr @Iterable)
  %75 = load ptr, ptr %10, align 8
  %76 = load ptr, ptr %5, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 416, ptr %76)
  %78 = load i32, ptr %16, align 4
  %79 = getelementptr ptr, ptr %76, i32 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %75)
  %82 = load ptr, ptr %10, align 8
  %83 = load ptr, ptr %5, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 416, ptr %83)
  %85 = load i32, ptr %16, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr @typegetter_wrapper(ptr %88, ptr %82)
  %90 = load ptr, ptr %10, align 8
  %91 = load ptr, ptr %5, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 416, ptr %91)
  %93 = load i32, ptr %16, align 4
  %94 = getelementptr ptr, ptr %91, i32 %93
  %95 = load ptr, ptr %94, align 8
  %96 = call ptr @typegetter_wrapper(ptr %95, ptr %90)
  %97 = load ptr, ptr %10, align 8
  %98 = load ptr, ptr %5, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 416, ptr %98)
  %100 = load i32, ptr %16, align 4
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = getelementptr ptr, ptr %101, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = call ptr @typegetter_wrapper(ptr %103, ptr %97)
  %105 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %106 = getelementptr [4 x ptr], ptr %105, i32 0, i32 2
  store ptr %104, ptr %106, align 8
  %107 = getelementptr [4 x ptr], ptr %105, i32 0, i32 1
  store ptr %96, ptr %107, align 8
  %108 = getelementptr [4 x ptr], ptr %105, i32 0, i32 3
  store ptr null, ptr %108, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 24, ptr %105)
  store ptr @Pair, ptr %105, align 8
  %110 = alloca [4 x ptr], align 8
  store ptr @ProductIterator, ptr %110, align 8
  %111 = getelementptr ptr, ptr %110, i32 1
  store ptr %81, ptr %111, align 8
  %112 = getelementptr ptr, ptr %110, i32 2
  store ptr %89, ptr %112, align 8
  %113 = getelementptr ptr, ptr %110, i32 3
  store ptr %105, ptr %113, align 8
  %114 = load ptr, ptr %110, align 8
  %115 = getelementptr ptr, ptr %114, i32 6
  %116 = load ptr, ptr %115, align 8
  %117 = call { i64, i64 } @size_wrapper(ptr %116, ptr %110)
  %118 = extractvalue { i64, i64 } %117, 0
  %119 = call ptr @bump_malloc(i64 %118)
  store ptr %81, ptr %119, align 8
  %120 = getelementptr ptr, ptr %119, i32 1
  store ptr %89, ptr %120, align 8
  %121 = getelementptr ptr, ptr %119, i32 2
  store ptr %105, ptr %121, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 24, ptr %119)
  %123 = alloca i32, align 4
  %124 = alloca ptr, align 8
  %125 = alloca ptr, align 8
  %126 = alloca ptr, align 8
  store ptr @ProductIterator, ptr %126, align 8
  store ptr %119, ptr %125, align 8
  store i32 10, ptr %123, align 4
  %127 = load ptr, ptr %10, align 8
  %128 = load ptr, ptr %5, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 416, ptr %128)
  %130 = load i32, ptr %16, align 4
  %131 = getelementptr ptr, ptr %128, i32 %130
  %132 = getelementptr ptr, ptr %131, i32 3
  %133 = load ptr, ptr %132, align 8
  %134 = getelementptr { ptr, ptr }, ptr %133, i32 0, i32 0
  %135 = load ptr, ptr %134, align 8
  %136 = call { ptr, ptr, ptr, i32 } %135(ptr %127) #16
  %137 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %136, ptr %137, align 8
  call void @assume_offset(ptr %137, ptr @Iterable)
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %139, 0
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %140, ptr %142, 1
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 2
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %145, 2
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  %148 = load i32, ptr %147, align 4
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, i32 %148, 3
  %150 = alloca [0 x ptr], align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 0, ptr %150)
  %152 = call ptr @llvm.invariant.start.p0(i64 184, ptr %139)
  %153 = getelementptr ptr, ptr %139, i32 %148
  %154 = getelementptr ptr, ptr %153, i32 1
  %155 = load ptr, ptr %154, align 8
  %156 = alloca {}, align 8
  %157 = call ptr @behavior_wrapper(ptr %155, { ptr, ptr, ptr, i32 } %149, ptr %156)
  %158 = call { ptr, ptr, ptr, i32 } %157({ ptr, ptr, ptr, i32 } %149, { ptr, ptr, ptr, i32 } %149, ptr %150) #17
  %159 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %158, ptr %159, align 8
  %160 = alloca { ptr, ptr, ptr, i32 }, align 8
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 0
  %163 = load ptr, ptr %161, align 8
  store ptr %163, ptr %162, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 1
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 2
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 3
  %172 = load i32, ptr %170, align 4
  store i32 %172, ptr %171, align 4
  call void @set_offset(ptr %160, ptr @Iterator)
  %173 = load ptr, ptr %10, align 8
  %174 = load ptr, ptr %5, align 8
  %175 = call ptr @llvm.invariant.start.p0(i64 416, ptr %174)
  %176 = load i32, ptr %16, align 4
  %177 = getelementptr ptr, ptr %174, i32 %176
  %178 = getelementptr ptr, ptr %177, i32 4
  %179 = load ptr, ptr %178, align 8
  %180 = getelementptr { ptr, ptr }, ptr %179, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %182 = call { ptr, ptr, ptr, i32 } %181(ptr %173) #16
  %183 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %182, ptr %183, align 8
  call void @assume_offset(ptr %183, ptr @Iterable)
  %184 = alloca { ptr, ptr, ptr, i32 }, align 8
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 0
  %186 = load ptr, ptr %162, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 1
  %188 = load ptr, ptr %165, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 2
  %190 = load ptr, ptr %168, align 8
  store ptr %190, ptr %189, align 8
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 3
  %192 = load i32, ptr %171, align 4
  store i32 %192, ptr %191, align 4
  call void @set_offset(ptr %184, ptr @Iterator)
  %193 = load ptr, ptr %185, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = load ptr, ptr %187, align 8
  %196 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %195, 1
  %197 = load ptr, ptr %189, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %196, ptr %197, 2
  %199 = load i32, ptr %191, align 4
  %200 = insertvalue { ptr, ptr, ptr, i32 } %198, i32 %199, 3
  %201 = alloca { ptr, ptr, ptr, i32 }, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 0
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %201, i32 0, i32 0
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 1
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %201, i32 0, i32 1
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 2
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %201, i32 0, i32 2
  %210 = load ptr, ptr %208, align 8
  store ptr %210, ptr %209, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 3
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %201, i32 0, i32 3
  %213 = load i32, ptr %211, align 4
  store i32 %213, ptr %212, align 4
  call void @set_offset(ptr %201, ptr @Iterable)
  %214 = load ptr, ptr %203, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %214, 0
  %216 = load ptr, ptr %206, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %215, ptr %216, 1
  %218 = load ptr, ptr %209, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %217, ptr %218, 2
  %220 = load i32, ptr %212, align 4
  %221 = insertvalue { ptr, ptr, ptr, i32 } %219, i32 %220, 3
  %222 = load ptr, ptr %126, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %222, 0
  %224 = load ptr, ptr %125, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %224, 1
  %226 = load ptr, ptr %124, align 8
  %227 = insertvalue { ptr, ptr, ptr, i32 } %225, ptr %226, 2
  %228 = load i32, ptr %123, align 4
  %229 = insertvalue { ptr, ptr, ptr, i32 } %227, i32 %228, 3
  %230 = load ptr, ptr %10, align 8
  %231 = load ptr, ptr %5, align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 416, ptr %231)
  %233 = load i32, ptr %16, align 4
  %234 = getelementptr ptr, ptr %231, i32 %233
  %235 = load ptr, ptr %234, align 8
  %236 = call ptr @typegetter_wrapper(ptr %235, ptr %230)
  %237 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %238 = getelementptr [3 x ptr], ptr %237, i32 0, i32 1
  store ptr %236, ptr %238, align 8
  %239 = getelementptr [3 x ptr], ptr %237, i32 0, i32 2
  store ptr null, ptr %239, align 8
  %240 = call ptr @llvm.invariant.start.p0(i64 16, ptr %237)
  store ptr @Iterator, ptr %237, align 8
  %241 = load ptr, ptr %10, align 8
  %242 = load ptr, ptr %5, align 8
  %243 = call ptr @llvm.invariant.start.p0(i64 416, ptr %242)
  %244 = load i32, ptr %16, align 4
  %245 = getelementptr ptr, ptr %242, i32 %244
  %246 = getelementptr ptr, ptr %245, i32 1
  %247 = load ptr, ptr %246, align 8
  %248 = call ptr @typegetter_wrapper(ptr %247, ptr %241)
  %249 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %250 = getelementptr [3 x ptr], ptr %249, i32 0, i32 1
  store ptr %248, ptr %250, align 8
  %251 = getelementptr [3 x ptr], ptr %249, i32 0, i32 2
  store ptr null, ptr %251, align 8
  %252 = call ptr @llvm.invariant.start.p0(i64 16, ptr %249)
  store ptr @Iterable, ptr %249, align 8
  %253 = alloca [2 x ptr], align 8
  %254 = getelementptr [2 x ptr], ptr %253, i32 0, i32 0
  store ptr %237, ptr %254, align 8
  %255 = getelementptr [2 x ptr], ptr %253, i32 0, i32 1
  store ptr %249, ptr %255, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 4, ptr %253)
  %257 = call ptr @llvm.invariant.start.p0(i64 112, ptr %222)
  %258 = getelementptr ptr, ptr %222, i32 %228
  %259 = getelementptr ptr, ptr %258, i32 7
  %260 = load ptr, ptr %259, align 8
  %261 = alloca { ptr, ptr }, align 8
  %262 = getelementptr { ptr, ptr }, ptr %261, i32 0, i32 0
  store ptr %193, ptr %262, align 8
  %263 = getelementptr { ptr, ptr }, ptr %261, i32 0, i32 1
  store ptr %214, ptr %263, align 8
  %264 = call ptr @behavior_wrapper(ptr %260, { ptr, ptr, ptr, i32 } %229, ptr %261)
  call void %264({ ptr, ptr, ptr, i32 } %229, { ptr, ptr, ptr, i32 } %229, ptr %253, { ptr, ptr, ptr, i32 } %200, { ptr, ptr, ptr, i32 } %221) #17
  %265 = alloca { ptr, ptr, ptr, i32 }, align 8
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 0
  %267 = load ptr, ptr %126, align 8
  store ptr %267, ptr %266, align 8
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 1
  %269 = load ptr, ptr %125, align 8
  store ptr %269, ptr %268, align 8
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 2
  %271 = load ptr, ptr %124, align 8
  store ptr %271, ptr %270, align 8
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 3
  %273 = load i32, ptr %123, align 4
  store i32 %273, ptr %272, align 4
  call void @set_offset(ptr %265, ptr @Iterator)
  %274 = load ptr, ptr %266, align 8
  %275 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %274, 0
  %276 = load ptr, ptr %268, align 8
  %277 = insertvalue { ptr, ptr, ptr, i32 } %275, ptr %276, 1
  %278 = load ptr, ptr %270, align 8
  %279 = insertvalue { ptr, ptr, ptr, i32 } %277, ptr %278, 2
  %280 = load i32, ptr %272, align 4
  %281 = insertvalue { ptr, ptr, ptr, i32 } %279, i32 %280, 3
  ret { ptr, ptr, ptr, i32 } %281
}

define { i64, i64 } @_data_size_ProductIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %29
  %37 = select i1 %36, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %29
  %38 = urem i64 %35, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %41
  %43 = add i64 %35, %42
  %44 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %37
  %45 = select i1 %44, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 %37
  %46 = urem i64 %43, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %47 = icmp eq i64 %46, 0
  %48 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %46
  %49 = select i1 %47, i64 0, i64 %48
  %50 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %49
  %51 = add i64 %43, %50
  %52 = urem i64 %51, %45
  %53 = icmp eq i64 %52, 0
  %54 = sub i64 %45, %52
  %55 = select i1 %53, i64 0, i64 %54
  %56 = add i64 %51, %55
  %57 = insertvalue { i64, i64 } undef, i64 %56, 0
  %58 = insertvalue { i64, i64 } %57, i64 %45, 1
  ret { i64, i64 } %58
}

define ptr @ProductIterator_field_ProductIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ProductIterator_field_ProductIterator_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterator_field_ProductIterator_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 9, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [14 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ProductIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 10, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [14 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ProductIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 112, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 112, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 5
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  %100 = load ptr, ptr %12, align 8
  %101 = load ptr, ptr %7, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 112, ptr %101)
  %103 = load i32, ptr %18, align 4
  %104 = getelementptr ptr, ptr %101, i32 %103
  %105 = getelementptr ptr, ptr %104, i32 5
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr { ptr, ptr }, ptr %106, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = call { ptr, ptr, ptr, i32 } %108(ptr %100) #16
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %109, ptr %110, align 8
  call void @assume_offset(ptr %110, ptr @Iterable)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  %123 = alloca [0 x ptr], align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 0, ptr %123)
  %125 = call ptr @llvm.invariant.start.p0(i64 184, ptr %112)
  %126 = getelementptr ptr, ptr %112, i32 %121
  %127 = getelementptr ptr, ptr %126, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = alloca {}, align 8
  %130 = call ptr @behavior_wrapper(ptr %128, { ptr, ptr, ptr, i32 } %122, ptr %129)
  %131 = call { ptr, ptr, ptr, i32 } %130({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr %123) #17
  %132 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %131, ptr %132, align 8
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 0
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %139 = load ptr, ptr %137, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 2
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %142 = load ptr, ptr %140, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 3
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %145 = load i32, ptr %143, align 4
  store i32 %145, ptr %144, align 4
  call void @set_offset(ptr %133, ptr @Iterator)
  %146 = alloca { ptr, ptr, ptr, i32 }, align 8
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 0
  %148 = load ptr, ptr %135, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %150 = load ptr, ptr %138, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 2
  %152 = load ptr, ptr %141, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  %154 = load i32, ptr %144, align 4
  store i32 %154, ptr %153, align 4
  call void @set_offset(ptr %146, ptr @Iterator)
  %155 = load ptr, ptr %12, align 8
  %156 = load ptr, ptr %7, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 112, ptr %156)
  %158 = load i32, ptr %18, align 4
  %159 = getelementptr ptr, ptr %156, i32 %158
  %160 = getelementptr ptr, ptr %159, i32 4
  %161 = load ptr, ptr %160, align 8
  %162 = getelementptr { ptr, ptr }, ptr %161, i32 0, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = load ptr, ptr %147, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %164, 0
  %166 = load ptr, ptr %149, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 1
  %168 = load ptr, ptr %151, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %168, 2
  %170 = load i32, ptr %153, align 4
  %171 = insertvalue { ptr, ptr, ptr, i32 } %169, i32 %170, 3
  call void %163(ptr %155, { ptr, ptr, ptr, i32 } %171) #15
  %172 = load ptr, ptr %12, align 8
  %173 = load ptr, ptr %7, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 112, ptr %173)
  %175 = load i32, ptr %18, align 4
  %176 = getelementptr ptr, ptr %173, i32 %175
  %177 = getelementptr ptr, ptr %176, i32 3
  %178 = load ptr, ptr %177, align 8
  %179 = getelementptr { ptr, ptr }, ptr %178, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = call { ptr, ptr, ptr, i32 } %180(ptr %172) #16
  %182 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %181, ptr %182, align 8
  call void @assume_offset(ptr %182, ptr @Iterator)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %184, 0
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 1
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 1
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 2
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %190, 2
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 3
  %193 = load i32, ptr %192, align 4
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, i32 %193, 3
  %195 = alloca [0 x ptr], align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 0, ptr %195)
  %197 = call ptr @llvm.invariant.start.p0(i64 24, ptr %184)
  %198 = getelementptr ptr, ptr %184, i32 %193
  %199 = getelementptr ptr, ptr %198, i32 1
  %200 = load ptr, ptr %199, align 8
  %201 = alloca {}, align 8
  %202 = call ptr @behavior_wrapper(ptr %200, { ptr, ptr, ptr, i32 } %194, ptr %201)
  %203 = call { ptr, i160 } %202({ ptr, ptr, ptr, i32 } %194, { ptr, ptr, ptr, i32 } %194, ptr %195) #17
  %204 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %203, ptr %204, align 8
  %205 = load ptr, ptr %12, align 8
  %206 = load ptr, ptr %7, align 8
  %207 = call ptr @llvm.invariant.start.p0(i64 112, ptr %206)
  %208 = load i32, ptr %18, align 4
  %209 = getelementptr ptr, ptr %206, i32 %208
  %210 = getelementptr ptr, ptr %209, i32 6
  %211 = load ptr, ptr %210, align 8
  %212 = getelementptr { ptr, ptr }, ptr %211, i32 0, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = getelementptr { ptr, i160 }, ptr %204, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr, i160 } undef, ptr %215, 0
  %217 = getelementptr { ptr, i160 }, ptr %204, i32 0, i32 1
  %218 = load i160, ptr %217, align 4
  %219 = insertvalue { ptr, i160 } %216, i160 %218, 1
  call void %213(ptr %205, { ptr, i160 } %219) #15
  ret void
}

define { ptr, i160 } @ProductIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [0 x ptr], align 8
  %9 = alloca {}, align 8
  %10 = alloca { ptr, i160 }, align 8
  %11 = alloca i1, align 1
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [3 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca [2 x ptr], align 8
  %21 = alloca { ptr, ptr }, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = alloca [0 x ptr], align 8
  %24 = alloca {}, align 8
  %25 = alloca { ptr, i160 }, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca [0 x ptr], align 8
  %28 = alloca {}, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = alloca { ptr, i160 }, align 8
  %33 = alloca [0 x i8], align 1
  %34 = alloca i160, align 8
  %35 = alloca ptr, align 8
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem33 = alloca ptr, align 8
  %.reg2mem48 = alloca { ptr, i160 }, align 8
  %.reg2mem50 = alloca i32, align 4
  %.reg2mem52 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %36, align 8
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  store ptr %42, ptr %.reg2mem33, align 8
  %43 = load ptr, ptr %41, align 8
  %.reload47 = load ptr, ptr %.reg2mem33, align 8
  store ptr %43, ptr %.reload47, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  store ptr %48, ptr %.reg2mem18, align 8
  %49 = load i32, ptr %47, align 4
  %.reload32 = load ptr, ptr %.reg2mem18, align 8
  store i32 %49, ptr %.reload32, align 4
  call void @set_offset(ptr %37, ptr @ProductIterator)
  %.reload46 = load ptr, ptr %.reg2mem33, align 8
  %50 = load ptr, ptr %.reload46, align 8
  %51 = load ptr, ptr %37, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 112, ptr %51)
  %.reload31 = load ptr, ptr %.reg2mem18, align 8
  %53 = load i32, ptr %.reload31, align 4
  %54 = getelementptr ptr, ptr %51, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 6
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call { ptr, i160 } %58(ptr %50) #16
  %60 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %59, ptr %60, align 8
  br label %61

61:                                               ; preds = %259, %3
  %.reload45 = load ptr, ptr %.reg2mem33, align 8
  %62 = load ptr, ptr %.reload45, align 8
  %63 = load ptr, ptr %37, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 112, ptr %63)
  %.reload30 = load ptr, ptr %.reg2mem18, align 8
  %65 = load i32, ptr %.reload30, align 4
  %66 = getelementptr ptr, ptr %63, i32 %65
  %67 = load ptr, ptr %66, align 8
  %68 = call ptr @typegetter_wrapper(ptr %67, ptr %62)
  %69 = load ptr, ptr %60, align 8
  %70 = ptrtoint ptr %69 to i64
  %71 = icmp eq i64 %70, ptrtoint (ptr @nil_typ to i64)
  %72 = icmp eq i64 %70, 0
  %73 = or i1 %71, %72
  %74 = icmp eq i1 %73, false
  store i1 %74, ptr %4, align 1
  %75 = load i1, ptr %4, align 1
  br i1 %75, label %76, label %255

76:                                               ; preds = %61
  %77 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 0
  store ptr %77, ptr %.reg2mem15, align 8
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %78 = load ptr, ptr %.reload17, align 8
  store ptr %78, ptr %6, align 8
  %79 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 1
  store ptr %79, ptr %.reg2mem12, align 8
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %80 = load i160, ptr %.reload14, align 4
  store i160 %80, ptr %5, align 4
  %.reload44 = load ptr, ptr %.reg2mem33, align 8
  %81 = load ptr, ptr %.reload44, align 8
  %82 = load ptr, ptr %37, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 112, ptr %82)
  %.reload29 = load ptr, ptr %.reg2mem18, align 8
  %84 = load i32, ptr %.reload29, align 4
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 4
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr { ptr, ptr }, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = call { ptr, ptr, ptr, i32 } %89(ptr %81) #16
  store { ptr, ptr, ptr, i32 } %90, ptr %7, align 8
  call void @assume_offset(ptr %7, ptr @Iterator)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %95, 1
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 2
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %101 = load i32, ptr %100, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %101, 3
  %103 = call ptr @llvm.invariant.start.p0(i64 0, ptr %8)
  %104 = call ptr @llvm.invariant.start.p0(i64 24, ptr %92)
  %105 = getelementptr ptr, ptr %92, i32 %101
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = call ptr @behavior_wrapper(ptr %107, { ptr, ptr, ptr, i32 } %102, ptr %9)
  %109 = call { ptr, i160 } %108({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %8) #17
  store { ptr, i160 } %109, ptr %10, align 8
  %.reload43 = load ptr, ptr %.reg2mem33, align 8
  %110 = load ptr, ptr %.reload43, align 8
  %111 = load ptr, ptr %37, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 112, ptr %111)
  %.reload28 = load ptr, ptr %.reg2mem18, align 8
  %113 = load i32, ptr %.reload28, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = getelementptr ptr, ptr %114, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = call ptr @typegetter_wrapper(ptr %116, ptr %110)
  %118 = load ptr, ptr %10, align 8
  %119 = ptrtoint ptr %118 to i64
  %120 = icmp eq i64 %119, ptrtoint (ptr @nil_typ to i64)
  %121 = icmp eq i64 %119, 0
  %122 = or i1 %120, %121
  %123 = icmp eq i1 %122, false
  store i1 %123, ptr %11, align 1
  %124 = load i1, ptr %11, align 1
  %125 = zext i1 %124 to i32
  store i32 %125, ptr %.reg2mem10, align 4
  %126 = xor i1 %124, true
  %127 = zext i1 %126 to i32
  store i32 %127, ptr %.reg2mem8, align 4
  br i1 %124, label %128, label %129

128:                                              ; preds = %76
  br label %254

129:                                              ; preds = %76
  %.reload42 = load ptr, ptr %.reg2mem33, align 8
  %130 = load ptr, ptr %.reload42, align 8
  %131 = load ptr, ptr %37, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 112, ptr %131)
  %.reload27 = load ptr, ptr %.reg2mem18, align 8
  %133 = load i32, ptr %.reload27, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 3
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #16
  store { ptr, ptr, ptr, i32 } %139, ptr %22, align 8
  call void @assume_offset(ptr %22, ptr @Iterator)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %147, 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, i32 %150, 3
  %152 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %153 = call ptr @llvm.invariant.start.p0(i64 24, ptr %141)
  %154 = getelementptr ptr, ptr %141, i32 %150
  %155 = getelementptr ptr, ptr %154, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = call ptr @behavior_wrapper(ptr %156, { ptr, ptr, ptr, i32 } %151, ptr %24)
  %158 = call { ptr, i160 } %157({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %23) #17
  store { ptr, i160 } %158, ptr %25, align 8
  %.reload41 = load ptr, ptr %.reg2mem33, align 8
  %159 = load ptr, ptr %.reload41, align 8
  %160 = load ptr, ptr %37, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 112, ptr %160)
  %.reload26 = load ptr, ptr %.reg2mem18, align 8
  %162 = load i32, ptr %.reload26, align 4
  %163 = getelementptr ptr, ptr %160, i32 %162
  %164 = getelementptr ptr, ptr %163, i32 6
  %165 = load ptr, ptr %164, align 8
  %166 = getelementptr { ptr, ptr }, ptr %165, i32 0, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = getelementptr { ptr, i160 }, ptr %25, i32 0, i32 0
  %169 = load ptr, ptr %168, align 8
  %170 = insertvalue { ptr, i160 } undef, ptr %169, 0
  %171 = getelementptr { ptr, i160 }, ptr %25, i32 0, i32 1
  %172 = load i160, ptr %171, align 4
  %173 = insertvalue { ptr, i160 } %170, i160 %172, 1
  call void %167(ptr %159, { ptr, i160 } %173) #15
  %.reload40 = load ptr, ptr %.reg2mem33, align 8
  %174 = load ptr, ptr %.reload40, align 8
  %175 = load ptr, ptr %37, align 8
  %176 = call ptr @llvm.invariant.start.p0(i64 112, ptr %175)
  %.reload25 = load ptr, ptr %.reg2mem18, align 8
  %177 = load i32, ptr %.reload25, align 4
  %178 = getelementptr ptr, ptr %175, i32 %177
  %179 = getelementptr ptr, ptr %178, i32 5
  %180 = load ptr, ptr %179, align 8
  %181 = getelementptr { ptr, ptr }, ptr %180, i32 0, i32 0
  %182 = load ptr, ptr %181, align 8
  %183 = call { ptr, ptr, ptr, i32 } %182(ptr %174) #16
  store { ptr, ptr, ptr, i32 } %183, ptr %26, align 8
  call void @assume_offset(ptr %26, ptr @Iterable)
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %185 = load ptr, ptr %184, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %185, 0
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } %186, ptr %188, 1
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 2
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %194 = load i32, ptr %193, align 4
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, i32 %194, 3
  %196 = call ptr @llvm.invariant.start.p0(i64 0, ptr %27)
  %197 = call ptr @llvm.invariant.start.p0(i64 184, ptr %185)
  %198 = getelementptr ptr, ptr %185, i32 %194
  %199 = getelementptr ptr, ptr %198, i32 1
  %200 = load ptr, ptr %199, align 8
  %201 = call ptr @behavior_wrapper(ptr %200, { ptr, ptr, ptr, i32 } %195, ptr %28)
  %202 = call { ptr, ptr, ptr, i32 } %201({ ptr, ptr, ptr, i32 } %195, { ptr, ptr, ptr, i32 } %195, ptr %27) #17
  store { ptr, ptr, ptr, i32 } %202, ptr %29, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %205 = load ptr, ptr %203, align 8
  store ptr %205, ptr %204, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %211 = load ptr, ptr %209, align 8
  store ptr %211, ptr %210, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %214 = load i32, ptr %212, align 4
  store i32 %214, ptr %213, align 4
  call void @set_offset(ptr %30, ptr @Iterator)
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %216 = load ptr, ptr %204, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %218 = load ptr, ptr %207, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %220 = load ptr, ptr %210, align 8
  store ptr %220, ptr %219, align 8
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %222 = load i32, ptr %213, align 4
  store i32 %222, ptr %221, align 4
  call void @set_offset(ptr %31, ptr @Iterator)
  %.reload39 = load ptr, ptr %.reg2mem33, align 8
  %223 = load ptr, ptr %.reload39, align 8
  %224 = load ptr, ptr %37, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 112, ptr %224)
  %.reload24 = load ptr, ptr %.reg2mem18, align 8
  %226 = load i32, ptr %.reload24, align 4
  %227 = getelementptr ptr, ptr %224, i32 %226
  %228 = getelementptr ptr, ptr %227, i32 4
  %229 = load ptr, ptr %228, align 8
  %230 = getelementptr { ptr, ptr }, ptr %229, i32 0, i32 1
  %231 = load ptr, ptr %230, align 8
  %232 = load ptr, ptr %215, align 8
  %233 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %232, 0
  %234 = load ptr, ptr %217, align 8
  %235 = insertvalue { ptr, ptr, ptr, i32 } %233, ptr %234, 1
  %236 = load ptr, ptr %219, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %235, ptr %236, 2
  %238 = load i32, ptr %221, align 4
  %239 = insertvalue { ptr, ptr, ptr, i32 } %237, i32 %238, 3
  call void %231(ptr %223, { ptr, ptr, ptr, i32 } %239) #15
  %.reload38 = load ptr, ptr %.reg2mem33, align 8
  %240 = load ptr, ptr %.reload38, align 8
  %241 = load ptr, ptr %37, align 8
  %242 = call ptr @llvm.invariant.start.p0(i64 112, ptr %241)
  %.reload23 = load ptr, ptr %.reg2mem18, align 8
  %243 = load i32, ptr %.reload23, align 4
  %244 = getelementptr ptr, ptr %241, i32 %243
  %245 = getelementptr ptr, ptr %244, i32 6
  %246 = load ptr, ptr %245, align 8
  %247 = getelementptr { ptr, ptr }, ptr %246, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = call { ptr, i160 } %248(ptr %240) #16
  store { ptr, i160 } %249, ptr %32, align 8
  %250 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %251 = load ptr, ptr %250, align 8
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  store ptr %251, ptr %.reload16, align 8
  %252 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %253 = load i160, ptr %252, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  store i160 %253, ptr %.reload13, align 4
  br label %254

254:                                              ; preds = %129, %128
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem50, align 4
  store i32 %.reload11, ptr %.reg2mem52, align 4
  br label %256

255:                                              ; preds = %61
  store i32 0, ptr %.reg2mem50, align 4
  store i32 2, ptr %.reg2mem52, align 4
  br label %256

256:                                              ; preds = %255, %254
  %.reload53 = load i32, ptr %.reg2mem52, align 4
  %.reload51 = load i32, ptr %.reg2mem50, align 4
  store i32 %.reload53, ptr %.reg2mem5, align 4
  store i32 %.reload51, ptr %.reg2mem3, align 4
  br label %257

257:                                              ; preds = %256
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %258 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %258, label %259, label %260

259:                                              ; preds = %257
  br label %61

260:                                              ; preds = %257
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %261 = zext i32 %.reload6 to i64
  %262 = trunc i64 %261 to i32
  switch i32 %262, label %348 [
    i32 1, label %263
  ]

263:                                              ; preds = %260
  %264 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 0
  %265 = load ptr, ptr %264, align 8
  store ptr %265, ptr %13, align 8
  %266 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 1
  %267 = load i160, ptr %266, align 4
  store i160 %267, ptr %12, align 4
  %.reload37 = load ptr, ptr %.reg2mem33, align 8
  %268 = load ptr, ptr %.reload37, align 8
  %269 = load ptr, ptr %37, align 8
  %270 = call ptr @llvm.invariant.start.p0(i64 112, ptr %269)
  %.reload22 = load ptr, ptr %.reg2mem18, align 8
  %271 = load i32, ptr %.reload22, align 4
  %272 = getelementptr ptr, ptr %269, i32 %271
  %273 = load ptr, ptr %272, align 8
  %274 = call ptr @typegetter_wrapper(ptr %273, ptr %268)
  %.reload36 = load ptr, ptr %.reg2mem33, align 8
  %275 = load ptr, ptr %.reload36, align 8
  %276 = load ptr, ptr %37, align 8
  %277 = call ptr @llvm.invariant.start.p0(i64 112, ptr %276)
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  %278 = load i32, ptr %.reload21, align 4
  %279 = getelementptr ptr, ptr %276, i32 %278
  %280 = getelementptr ptr, ptr %279, i32 1
  %281 = load ptr, ptr %280, align 8
  %282 = call ptr @typegetter_wrapper(ptr %281, ptr %275)
  store ptr @Pair, ptr %14, align 8
  %283 = getelementptr ptr, ptr %14, i32 1
  store ptr %274, ptr %283, align 8
  %284 = getelementptr ptr, ptr %14, i32 2
  store ptr %282, ptr %284, align 8
  %285 = load ptr, ptr %14, align 8
  %286 = getelementptr ptr, ptr %285, i32 6
  %287 = load ptr, ptr %286, align 8
  %288 = call { i64, i64 } @size_wrapper(ptr %287, ptr %14)
  %289 = extractvalue { i64, i64 } %288, 0
  %290 = call ptr @bump_malloc(i64 %289)
  store ptr %274, ptr %290, align 8
  %291 = getelementptr ptr, ptr %290, i32 1
  store ptr %282, ptr %291, align 8
  %292 = call ptr @llvm.invariant.start.p0(i64 16, ptr %290)
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr @Pair, ptr %15, align 8
  store ptr %290, ptr %293, align 8
  store i32 10, ptr %294, align 4
  %295 = load ptr, ptr %6, align 8
  store ptr %295, ptr %17, align 8
  %296 = load i160, ptr %5, align 4
  store i160 %296, ptr %16, align 4
  %297 = load ptr, ptr %17, align 8
  %298 = insertvalue { ptr, i160 } undef, ptr %297, 0
  %299 = load i160, ptr %16, align 4
  %300 = insertvalue { ptr, i160 } %298, i160 %299, 1
  %301 = load ptr, ptr %13, align 8
  store ptr %301, ptr %19, align 8
  %302 = load i160, ptr %12, align 4
  store i160 %302, ptr %18, align 4
  %303 = load ptr, ptr %19, align 8
  %304 = insertvalue { ptr, i160 } undef, ptr %303, 0
  %305 = load i160, ptr %18, align 4
  %306 = insertvalue { ptr, i160 } %304, i160 %305, 1
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %308 = load ptr, ptr %307, align 8
  %309 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %308, 0
  %310 = load ptr, ptr %293, align 8
  %311 = insertvalue { ptr, ptr, ptr, i32 } %309, ptr %310, 1
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %313 = load ptr, ptr %312, align 8
  %314 = insertvalue { ptr, ptr, ptr, i32 } %311, ptr %313, 2
  %315 = load i32, ptr %294, align 4
  %316 = insertvalue { ptr, ptr, ptr, i32 } %314, i32 %315, 3
  %.reload35 = load ptr, ptr %.reg2mem33, align 8
  %317 = load ptr, ptr %.reload35, align 8
  %318 = load ptr, ptr %37, align 8
  %319 = call ptr @llvm.invariant.start.p0(i64 112, ptr %318)
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %320 = load i32, ptr %.reload20, align 4
  %321 = getelementptr ptr, ptr %318, i32 %320
  %322 = load ptr, ptr %321, align 8
  %323 = call ptr @typegetter_wrapper(ptr %322, ptr %317)
  %.reload34 = load ptr, ptr %.reg2mem33, align 8
  %324 = load ptr, ptr %.reload34, align 8
  %325 = load ptr, ptr %37, align 8
  %326 = call ptr @llvm.invariant.start.p0(i64 112, ptr %325)
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %327 = load i32, ptr %.reload19, align 4
  %328 = getelementptr ptr, ptr %325, i32 %327
  %329 = getelementptr ptr, ptr %328, i32 1
  %330 = load ptr, ptr %329, align 8
  %331 = call ptr @typegetter_wrapper(ptr %330, ptr %324)
  %332 = getelementptr [2 x ptr], ptr %20, i32 0, i32 0
  store ptr %323, ptr %332, align 8
  %333 = getelementptr [2 x ptr], ptr %20, i32 0, i32 1
  store ptr %331, ptr %333, align 8
  %334 = call ptr @llvm.invariant.start.p0(i64 4, ptr %20)
  %335 = call ptr @llvm.invariant.start.p0(i64 80, ptr %308)
  %336 = getelementptr ptr, ptr %308, i32 %315
  %337 = getelementptr ptr, ptr %336, i32 4
  %338 = load ptr, ptr %337, align 8
  %339 = getelementptr { ptr, ptr }, ptr %21, i32 0, i32 0
  store ptr %297, ptr %339, align 8
  %340 = getelementptr { ptr, ptr }, ptr %21, i32 0, i32 1
  store ptr %303, ptr %340, align 8
  %341 = call ptr @behavior_wrapper(ptr %338, { ptr, ptr, ptr, i32 } %316, ptr %21)
  call void %341({ ptr, ptr, ptr, i32 } %316, { ptr, ptr, ptr, i32 } %316, ptr %20, { ptr, i160 } %300, { ptr, i160 } %306) #17
  %342 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 0
  %343 = load ptr, ptr %342, align 8
  %344 = insertvalue { ptr, i160 } undef, ptr %343, 0
  %345 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 1
  %346 = load i160, ptr %345, align 4
  %347 = insertvalue { ptr, i160 } %344, i160 %346, 1
  store { ptr, i160 } %347, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem48, align 8
  br label %354

348:                                              ; preds = %260
  %349 = load [0 x i8], ptr %33, align 1
  store [0 x i8] %349, ptr %34, align 1
  store ptr @nil_typ, ptr %35, align 8
  %350 = load ptr, ptr %35, align 8
  %351 = insertvalue { ptr, i160 } undef, ptr %350, 0
  %352 = load i160, ptr %34, align 4
  %353 = insertvalue { ptr, i160 } %351, i160 %352, 1
  store { ptr, i160 } %353, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem48, align 8
  br label %354

354:                                              ; preds = %348, %263
  %.reload49 = load { ptr, i160 }, ptr %.reg2mem48, align 8
  ret { ptr, i160 } %.reload49
}

define { ptr, i160 } @ProductIterator_getter_current_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = getelementptr i8, ptr %0, i64 %36
  %38 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %42 = load i160, ptr %41, align 4
  %43 = insertvalue { ptr, i160 } %40, i160 %42, 1
  ret { ptr, i160 } %43
}

define void @ProductIterator_setter_current_first(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 %32, %36
  %38 = getelementptr i8, ptr %0, i64 %37
  %39 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %39, align 8
  %40 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 0
  %41 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 0
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %44 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 1
  %45 = load i160, ptr %43, align 4
  store i160 %45, ptr %44, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %25, %29
  %31 = getelementptr i8, ptr %0, i64 %30
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  ret { ptr, ptr, ptr, i32 } %43
}

define void @ProductIterator_setter_second_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %26, %30
  %32 = getelementptr i8, ptr %0, i64 %31
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %33, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %45 = load i32, ptr %43, align 4
  store i32 %45, ptr %44, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ProductIterator_setter_second_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_first_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ProductIterator_setter_first_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ProductIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ProductIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { i64, i64 } @_data_size_ZipIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ZipIterable_field_ZipIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ZipIterable_field_ZipIterable_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterable_field_ZipIterable_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 17, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [52 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ZipIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 18, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [52 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ZipIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Pair, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Pair to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 20, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [52 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @ZipIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ZipIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ZipIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ZipIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 28, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @ZipIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ZipIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 416, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 416, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 4
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ZipIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 416, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 416, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 4
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #16
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  call void @assume_offset(ptr %74, ptr @Iterable)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = alloca [0 x ptr], align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %87)
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %76)
  %90 = getelementptr ptr, ptr %76, i32 %85
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = alloca {}, align 8
  %94 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %86, ptr %93)
  %95 = call { ptr, ptr, ptr, i32 } %94({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %87) #17
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %95, ptr %96, align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator)
  %110 = load ptr, ptr %10, align 8
  %111 = load ptr, ptr %5, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 416, ptr %111)
  %113 = load i32, ptr %16, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = call ptr @typegetter_wrapper(ptr %115, ptr %110)
  %117 = load ptr, ptr %10, align 8
  %118 = load ptr, ptr %5, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 416, ptr %118)
  %120 = load i32, ptr %16, align 4
  %121 = getelementptr ptr, ptr %118, i32 %120
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @typegetter_wrapper(ptr %123, ptr %117)
  %125 = load ptr, ptr %10, align 8
  %126 = load ptr, ptr %5, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 416, ptr %126)
  %128 = load i32, ptr %16, align 4
  %129 = getelementptr ptr, ptr %126, i32 %128
  %130 = load ptr, ptr %129, align 8
  %131 = call ptr @typegetter_wrapper(ptr %130, ptr %125)
  %132 = load ptr, ptr %10, align 8
  %133 = load ptr, ptr %5, align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 416, ptr %133)
  %135 = load i32, ptr %16, align 4
  %136 = getelementptr ptr, ptr %133, i32 %135
  %137 = getelementptr ptr, ptr %136, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = call ptr @typegetter_wrapper(ptr %138, ptr %132)
  %140 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %141 = getelementptr [4 x ptr], ptr %140, i32 0, i32 2
  store ptr %139, ptr %141, align 8
  %142 = getelementptr [4 x ptr], ptr %140, i32 0, i32 1
  store ptr %131, ptr %142, align 8
  %143 = getelementptr [4 x ptr], ptr %140, i32 0, i32 3
  store ptr null, ptr %143, align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 24, ptr %140)
  store ptr @Pair, ptr %140, align 8
  %145 = alloca [4 x ptr], align 8
  store ptr @ZipIterator, ptr %145, align 8
  %146 = getelementptr ptr, ptr %145, i32 1
  store ptr %116, ptr %146, align 8
  %147 = getelementptr ptr, ptr %145, i32 2
  store ptr %124, ptr %147, align 8
  %148 = getelementptr ptr, ptr %145, i32 3
  store ptr %140, ptr %148, align 8
  %149 = load ptr, ptr %145, align 8
  %150 = getelementptr ptr, ptr %149, i32 6
  %151 = load ptr, ptr %150, align 8
  %152 = call { i64, i64 } @size_wrapper(ptr %151, ptr %145)
  %153 = extractvalue { i64, i64 } %152, 0
  %154 = call ptr @bump_malloc(i64 %153)
  store ptr %116, ptr %154, align 8
  %155 = getelementptr ptr, ptr %154, i32 1
  store ptr %124, ptr %155, align 8
  %156 = getelementptr ptr, ptr %154, i32 2
  store ptr %140, ptr %156, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 24, ptr %154)
  %158 = alloca i32, align 4
  %159 = alloca ptr, align 8
  %160 = alloca ptr, align 8
  %161 = alloca ptr, align 8
  store ptr @ZipIterator, ptr %161, align 8
  store ptr %154, ptr %160, align 8
  store i32 10, ptr %158, align 4
  %162 = load ptr, ptr %10, align 8
  %163 = load ptr, ptr %5, align 8
  %164 = call ptr @llvm.invariant.start.p0(i64 416, ptr %163)
  %165 = load i32, ptr %16, align 4
  %166 = getelementptr ptr, ptr %163, i32 %165
  %167 = getelementptr ptr, ptr %166, i32 3
  %168 = load ptr, ptr %167, align 8
  %169 = getelementptr { ptr, ptr }, ptr %168, i32 0, i32 0
  %170 = load ptr, ptr %169, align 8
  %171 = call { ptr, ptr, ptr, i32 } %170(ptr %162) #16
  %172 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %171, ptr %172, align 8
  call void @assume_offset(ptr %172, ptr @Iterable)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %172, i32 0, i32 0
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %174, 0
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %172, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %177, 1
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %172, i32 0, i32 2
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 2
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %172, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %183, 3
  %185 = alloca [0 x ptr], align 8
  %186 = call ptr @llvm.invariant.start.p0(i64 0, ptr %185)
  %187 = call ptr @llvm.invariant.start.p0(i64 184, ptr %174)
  %188 = getelementptr ptr, ptr %174, i32 %183
  %189 = getelementptr ptr, ptr %188, i32 1
  %190 = load ptr, ptr %189, align 8
  %191 = alloca {}, align 8
  %192 = call ptr @behavior_wrapper(ptr %190, { ptr, ptr, ptr, i32 } %184, ptr %191)
  %193 = call { ptr, ptr, ptr, i32 } %192({ ptr, ptr, ptr, i32 } %184, { ptr, ptr, ptr, i32 } %184, ptr %185) #17
  %194 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %193, ptr %194, align 8
  %195 = alloca { ptr, ptr, ptr, i32 }, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 0
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 0
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 1
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 1
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 2
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 2
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 3
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 3
  %207 = load i32, ptr %205, align 4
  store i32 %207, ptr %206, align 4
  call void @set_offset(ptr %195, ptr @Iterator)
  %208 = load ptr, ptr %10, align 8
  %209 = load ptr, ptr %5, align 8
  %210 = call ptr @llvm.invariant.start.p0(i64 416, ptr %209)
  %211 = load i32, ptr %16, align 4
  %212 = getelementptr ptr, ptr %209, i32 %211
  %213 = getelementptr ptr, ptr %212, i32 4
  %214 = load ptr, ptr %213, align 8
  %215 = getelementptr { ptr, ptr }, ptr %214, i32 0, i32 0
  %216 = load ptr, ptr %215, align 8
  %217 = call { ptr, ptr, ptr, i32 } %216(ptr %208) #16
  %218 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %217, ptr %218, align 8
  call void @assume_offset(ptr %218, ptr @Iterable)
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %218, i32 0, i32 0
  %220 = load ptr, ptr %219, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %220, 0
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %218, i32 0, i32 1
  %223 = load ptr, ptr %222, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } %221, ptr %223, 1
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %218, i32 0, i32 2
  %226 = load ptr, ptr %225, align 8
  %227 = insertvalue { ptr, ptr, ptr, i32 } %224, ptr %226, 2
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %218, i32 0, i32 3
  %229 = load i32, ptr %228, align 4
  %230 = insertvalue { ptr, ptr, ptr, i32 } %227, i32 %229, 3
  %231 = alloca [0 x ptr], align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 0, ptr %231)
  %233 = call ptr @llvm.invariant.start.p0(i64 184, ptr %220)
  %234 = getelementptr ptr, ptr %220, i32 %229
  %235 = getelementptr ptr, ptr %234, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = alloca {}, align 8
  %238 = call ptr @behavior_wrapper(ptr %236, { ptr, ptr, ptr, i32 } %230, ptr %237)
  %239 = call { ptr, ptr, ptr, i32 } %238({ ptr, ptr, ptr, i32 } %230, { ptr, ptr, ptr, i32 } %230, ptr %231) #17
  %240 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %239, ptr %240, align 8
  %241 = alloca { ptr, ptr, ptr, i32 }, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 0
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %241, i32 0, i32 0
  %244 = load ptr, ptr %242, align 8
  store ptr %244, ptr %243, align 8
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 1
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %241, i32 0, i32 1
  %247 = load ptr, ptr %245, align 8
  store ptr %247, ptr %246, align 8
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 2
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %241, i32 0, i32 2
  %250 = load ptr, ptr %248, align 8
  store ptr %250, ptr %249, align 8
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 3
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %241, i32 0, i32 3
  %253 = load i32, ptr %251, align 4
  store i32 %253, ptr %252, align 4
  call void @set_offset(ptr %241, ptr @Iterator)
  %254 = alloca { ptr, ptr, ptr, i32 }, align 8
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 0
  %256 = load ptr, ptr %197, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 1
  %258 = load ptr, ptr %200, align 8
  store ptr %258, ptr %257, align 8
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 2
  %260 = load ptr, ptr %203, align 8
  store ptr %260, ptr %259, align 8
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 3
  %262 = load i32, ptr %206, align 4
  store i32 %262, ptr %261, align 4
  call void @set_offset(ptr %254, ptr @Iterator)
  %263 = load ptr, ptr %255, align 8
  %264 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %263, 0
  %265 = load ptr, ptr %257, align 8
  %266 = insertvalue { ptr, ptr, ptr, i32 } %264, ptr %265, 1
  %267 = load ptr, ptr %259, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } %266, ptr %267, 2
  %269 = load i32, ptr %261, align 4
  %270 = insertvalue { ptr, ptr, ptr, i32 } %268, i32 %269, 3
  %271 = alloca { ptr, ptr, ptr, i32 }, align 8
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 0
  %273 = load ptr, ptr %243, align 8
  store ptr %273, ptr %272, align 8
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 1
  %275 = load ptr, ptr %246, align 8
  store ptr %275, ptr %274, align 8
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 2
  %277 = load ptr, ptr %249, align 8
  store ptr %277, ptr %276, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 3
  %279 = load i32, ptr %252, align 4
  store i32 %279, ptr %278, align 4
  call void @set_offset(ptr %271, ptr @Iterator)
  %280 = load ptr, ptr %272, align 8
  %281 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %280, 0
  %282 = load ptr, ptr %274, align 8
  %283 = insertvalue { ptr, ptr, ptr, i32 } %281, ptr %282, 1
  %284 = load ptr, ptr %276, align 8
  %285 = insertvalue { ptr, ptr, ptr, i32 } %283, ptr %284, 2
  %286 = load i32, ptr %278, align 4
  %287 = insertvalue { ptr, ptr, ptr, i32 } %285, i32 %286, 3
  %288 = load ptr, ptr %161, align 8
  %289 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %288, 0
  %290 = load ptr, ptr %160, align 8
  %291 = insertvalue { ptr, ptr, ptr, i32 } %289, ptr %290, 1
  %292 = load ptr, ptr %159, align 8
  %293 = insertvalue { ptr, ptr, ptr, i32 } %291, ptr %292, 2
  %294 = load i32, ptr %158, align 4
  %295 = insertvalue { ptr, ptr, ptr, i32 } %293, i32 %294, 3
  %296 = load ptr, ptr %10, align 8
  %297 = load ptr, ptr %5, align 8
  %298 = call ptr @llvm.invariant.start.p0(i64 416, ptr %297)
  %299 = load i32, ptr %16, align 4
  %300 = getelementptr ptr, ptr %297, i32 %299
  %301 = load ptr, ptr %300, align 8
  %302 = call ptr @typegetter_wrapper(ptr %301, ptr %296)
  %303 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %304 = getelementptr [3 x ptr], ptr %303, i32 0, i32 1
  store ptr %302, ptr %304, align 8
  %305 = getelementptr [3 x ptr], ptr %303, i32 0, i32 2
  store ptr null, ptr %305, align 8
  %306 = call ptr @llvm.invariant.start.p0(i64 16, ptr %303)
  store ptr @Iterator, ptr %303, align 8
  %307 = load ptr, ptr %10, align 8
  %308 = load ptr, ptr %5, align 8
  %309 = call ptr @llvm.invariant.start.p0(i64 416, ptr %308)
  %310 = load i32, ptr %16, align 4
  %311 = getelementptr ptr, ptr %308, i32 %310
  %312 = getelementptr ptr, ptr %311, i32 1
  %313 = load ptr, ptr %312, align 8
  %314 = call ptr @typegetter_wrapper(ptr %313, ptr %307)
  %315 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %316 = getelementptr [3 x ptr], ptr %315, i32 0, i32 1
  store ptr %314, ptr %316, align 8
  %317 = getelementptr [3 x ptr], ptr %315, i32 0, i32 2
  store ptr null, ptr %317, align 8
  %318 = call ptr @llvm.invariant.start.p0(i64 16, ptr %315)
  store ptr @Iterator, ptr %315, align 8
  %319 = alloca [2 x ptr], align 8
  %320 = getelementptr [2 x ptr], ptr %319, i32 0, i32 0
  store ptr %303, ptr %320, align 8
  %321 = getelementptr [2 x ptr], ptr %319, i32 0, i32 1
  store ptr %315, ptr %321, align 8
  %322 = call ptr @llvm.invariant.start.p0(i64 4, ptr %319)
  %323 = call ptr @llvm.invariant.start.p0(i64 96, ptr %288)
  %324 = getelementptr ptr, ptr %288, i32 %294
  %325 = getelementptr ptr, ptr %324, i32 5
  %326 = load ptr, ptr %325, align 8
  %327 = alloca { ptr, ptr }, align 8
  %328 = getelementptr { ptr, ptr }, ptr %327, i32 0, i32 0
  store ptr %263, ptr %328, align 8
  %329 = getelementptr { ptr, ptr }, ptr %327, i32 0, i32 1
  store ptr %280, ptr %329, align 8
  %330 = call ptr @behavior_wrapper(ptr %326, { ptr, ptr, ptr, i32 } %295, ptr %327)
  call void %330({ ptr, ptr, ptr, i32 } %295, { ptr, ptr, ptr, i32 } %295, ptr %319, { ptr, ptr, ptr, i32 } %270, { ptr, ptr, ptr, i32 } %287) #17
  %331 = alloca { ptr, ptr, ptr, i32 }, align 8
  %332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 0
  %333 = load ptr, ptr %161, align 8
  store ptr %333, ptr %332, align 8
  %334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 1
  %335 = load ptr, ptr %160, align 8
  store ptr %335, ptr %334, align 8
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 2
  %337 = load ptr, ptr %159, align 8
  store ptr %337, ptr %336, align 8
  %338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 3
  %339 = load i32, ptr %158, align 4
  store i32 %339, ptr %338, align 4
  call void @set_offset(ptr %331, ptr @Iterator)
  %340 = load ptr, ptr %332, align 8
  %341 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %340, 0
  %342 = load ptr, ptr %334, align 8
  %343 = insertvalue { ptr, ptr, ptr, i32 } %341, ptr %342, 1
  %344 = load ptr, ptr %336, align 8
  %345 = insertvalue { ptr, ptr, ptr, i32 } %343, ptr %344, 2
  %346 = load i32, ptr %338, align 4
  %347 = insertvalue { ptr, ptr, ptr, i32 } %345, i32 %346, 3
  ret { ptr, ptr, ptr, i32 } %347
}

define { i64, i64 } @_data_size_ZipIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ZipIterator_field_ZipIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ZipIterator_field_ZipIterator_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterator_field_ZipIterator_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterator, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterator to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 7, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [12 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ZipIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 8, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [12 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ZipIterator_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ZipIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 96, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterator)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterator)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 96, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 4
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  ret void
}

define { ptr, i160 } @ZipIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i1, align 1
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca [3 x ptr], align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca [2 x ptr], align 8
  %16 = alloca { ptr, ptr }, align 8
  %17 = alloca [0 x i8], align 1
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem27 = alloca ptr, align 8
  %.reg2mem37 = alloca { ptr, i160 }, align 8
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca { ptr, i160 }, align 8
  %.reg2mem43 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  store ptr %26, ptr %.reg2mem27, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload36 = load ptr, ptr %.reg2mem27, align 8
  store ptr %27, ptr %.reload36, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr %32, ptr %.reg2mem17, align 8
  %33 = load i32, ptr %31, align 4
  %.reload26 = load ptr, ptr %.reg2mem17, align 8
  store i32 %33, ptr %.reload26, align 4
  call void @set_offset(ptr %21, ptr @ZipIterator)
  %.reload35 = load ptr, ptr %.reg2mem27, align 8
  %34 = load ptr, ptr %.reload35, align 8
  %35 = load ptr, ptr %21, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 96, ptr %35)
  %.reload25 = load ptr, ptr %.reg2mem17, align 8
  %37 = load i32, ptr %.reload25, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 3
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = call { ptr, ptr, ptr, i32 } %42(ptr %34) #16
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %43, ptr %44, align 8
  call void @assume_offset(ptr %44, ptr @Iterator)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %55 = load i32, ptr %54, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %55, 3
  %57 = alloca [0 x ptr], align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 0, ptr %57)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr ptr, ptr %46, i32 %55
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = alloca {}, align 8
  %64 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %56, ptr %63)
  %65 = call { ptr, i160 } %64({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr %57) #17
  %66 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %65, ptr %66, align 8
  %.reload34 = load ptr, ptr %.reg2mem27, align 8
  %67 = load ptr, ptr %.reload34, align 8
  %68 = load ptr, ptr %21, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 96, ptr %68)
  %.reload24 = load ptr, ptr %.reg2mem17, align 8
  %70 = load i32, ptr %.reload24, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = getelementptr ptr, ptr %71, i32 4
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = call { ptr, ptr, ptr, i32 } %75(ptr %67) #16
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %76, ptr %77, align 8
  call void @assume_offset(ptr %77, ptr @Iterator)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %88, 3
  %90 = alloca [0 x ptr], align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 0, ptr %90)
  %92 = call ptr @llvm.invariant.start.p0(i64 24, ptr %79)
  %93 = getelementptr ptr, ptr %79, i32 %88
  %94 = getelementptr ptr, ptr %93, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = alloca {}, align 8
  %97 = call ptr @behavior_wrapper(ptr %95, { ptr, ptr, ptr, i32 } %89, ptr %96)
  %98 = call { ptr, i160 } %97({ ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %89, ptr %90) #17
  %99 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %98, ptr %99, align 8
  %.reload33 = load ptr, ptr %.reg2mem27, align 8
  %100 = load ptr, ptr %.reload33, align 8
  %101 = load ptr, ptr %21, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 96, ptr %101)
  %.reload23 = load ptr, ptr %.reg2mem17, align 8
  %103 = load i32, ptr %.reload23, align 4
  %104 = getelementptr ptr, ptr %101, i32 %103
  %105 = load ptr, ptr %104, align 8
  %106 = call ptr @typegetter_wrapper(ptr %105, ptr %100)
  %107 = load ptr, ptr %66, align 8
  %108 = ptrtoint ptr %107 to i64
  %109 = icmp eq i64 %108, ptrtoint (ptr @nil_typ to i64)
  %110 = icmp eq i64 %108, 0
  %111 = or i1 %109, %110
  %112 = icmp eq i1 %111, false
  %113 = alloca i1, align 1
  store i1 %112, ptr %113, align 1
  %114 = load i1, ptr %113, align 1
  br i1 %114, label %115, label %227

115:                                              ; preds = %3
  %116 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 0
  store ptr %116, ptr %.reg2mem14, align 8
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %117 = load ptr, ptr %.reload16, align 8
  store ptr %117, ptr %5, align 8
  %118 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 1
  store ptr %118, ptr %.reg2mem11, align 8
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %119 = load i160, ptr %.reload13, align 4
  store i160 %119, ptr %4, align 4
  %.reload32 = load ptr, ptr %.reg2mem27, align 8
  %120 = load ptr, ptr %.reload32, align 8
  %121 = load ptr, ptr %21, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 96, ptr %121)
  %.reload22 = load ptr, ptr %.reg2mem17, align 8
  %123 = load i32, ptr %.reload22, align 4
  %124 = getelementptr ptr, ptr %121, i32 %123
  %125 = getelementptr ptr, ptr %124, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = call ptr @typegetter_wrapper(ptr %126, ptr %120)
  %128 = load ptr, ptr %99, align 8
  %129 = ptrtoint ptr %128 to i64
  %130 = icmp eq i64 %129, ptrtoint (ptr @nil_typ to i64)
  %131 = icmp eq i64 %129, 0
  %132 = or i1 %130, %131
  %133 = icmp eq i1 %132, false
  store i1 %133, ptr %6, align 1
  %134 = load i1, ptr %6, align 1
  %135 = xor i1 %134, true
  %136 = zext i1 %135 to i32
  store i32 %136, ptr %.reg2mem9, align 4
  br i1 %134, label %137, label %222

137:                                              ; preds = %115
  %138 = getelementptr { ptr, i160 }, ptr %99, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  store ptr %139, ptr %8, align 8
  %140 = getelementptr { ptr, i160 }, ptr %99, i32 0, i32 1
  %141 = load i160, ptr %140, align 4
  store i160 %141, ptr %7, align 4
  %.reload31 = load ptr, ptr %.reg2mem27, align 8
  %142 = load ptr, ptr %.reload31, align 8
  %143 = load ptr, ptr %21, align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 96, ptr %143)
  %.reload21 = load ptr, ptr %.reg2mem17, align 8
  %145 = load i32, ptr %.reload21, align 4
  %146 = getelementptr ptr, ptr %143, i32 %145
  %147 = load ptr, ptr %146, align 8
  %148 = call ptr @typegetter_wrapper(ptr %147, ptr %142)
  %.reload30 = load ptr, ptr %.reg2mem27, align 8
  %149 = load ptr, ptr %.reload30, align 8
  %150 = load ptr, ptr %21, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 96, ptr %150)
  %.reload20 = load ptr, ptr %.reg2mem17, align 8
  %152 = load i32, ptr %.reload20, align 4
  %153 = getelementptr ptr, ptr %150, i32 %152
  %154 = getelementptr ptr, ptr %153, i32 1
  %155 = load ptr, ptr %154, align 8
  %156 = call ptr @typegetter_wrapper(ptr %155, ptr %149)
  store ptr @Pair, ptr %9, align 8
  %157 = getelementptr ptr, ptr %9, i32 1
  store ptr %148, ptr %157, align 8
  %158 = getelementptr ptr, ptr %9, i32 2
  store ptr %156, ptr %158, align 8
  %159 = load ptr, ptr %9, align 8
  %160 = getelementptr ptr, ptr %159, i32 6
  %161 = load ptr, ptr %160, align 8
  %162 = call { i64, i64 } @size_wrapper(ptr %161, ptr %9)
  %163 = extractvalue { i64, i64 } %162, 0
  %164 = call ptr @bump_malloc(i64 %163)
  store ptr %148, ptr %164, align 8
  %165 = getelementptr ptr, ptr %164, i32 1
  store ptr %156, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 16, ptr %164)
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  store ptr @Pair, ptr %10, align 8
  store ptr %164, ptr %167, align 8
  store i32 10, ptr %168, align 4
  %169 = load ptr, ptr %5, align 8
  store ptr %169, ptr %12, align 8
  %170 = load i160, ptr %4, align 4
  store i160 %170, ptr %11, align 4
  %171 = load ptr, ptr %12, align 8
  %172 = insertvalue { ptr, i160 } undef, ptr %171, 0
  %173 = load i160, ptr %11, align 4
  %174 = insertvalue { ptr, i160 } %172, i160 %173, 1
  %175 = load ptr, ptr %8, align 8
  store ptr %175, ptr %14, align 8
  %176 = load i160, ptr %7, align 4
  store i160 %176, ptr %13, align 4
  %177 = load ptr, ptr %14, align 8
  %178 = insertvalue { ptr, i160 } undef, ptr %177, 0
  %179 = load i160, ptr %13, align 4
  %180 = insertvalue { ptr, i160 } %178, i160 %179, 1
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %182 = load ptr, ptr %181, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %182, 0
  %184 = load ptr, ptr %167, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %183, ptr %184, 1
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 2
  %189 = load i32, ptr %168, align 4
  %190 = insertvalue { ptr, ptr, ptr, i32 } %188, i32 %189, 3
  %.reload29 = load ptr, ptr %.reg2mem27, align 8
  %191 = load ptr, ptr %.reload29, align 8
  %192 = load ptr, ptr %21, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 96, ptr %192)
  %.reload19 = load ptr, ptr %.reg2mem17, align 8
  %194 = load i32, ptr %.reload19, align 4
  %195 = getelementptr ptr, ptr %192, i32 %194
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr @typegetter_wrapper(ptr %196, ptr %191)
  %.reload28 = load ptr, ptr %.reg2mem27, align 8
  %198 = load ptr, ptr %.reload28, align 8
  %199 = load ptr, ptr %21, align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 96, ptr %199)
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %201 = load i32, ptr %.reload18, align 4
  %202 = getelementptr ptr, ptr %199, i32 %201
  %203 = getelementptr ptr, ptr %202, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = call ptr @typegetter_wrapper(ptr %204, ptr %198)
  %206 = getelementptr [2 x ptr], ptr %15, i32 0, i32 0
  store ptr %197, ptr %206, align 8
  %207 = getelementptr [2 x ptr], ptr %15, i32 0, i32 1
  store ptr %205, ptr %207, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 4, ptr %15)
  %209 = call ptr @llvm.invariant.start.p0(i64 80, ptr %182)
  %210 = getelementptr ptr, ptr %182, i32 %189
  %211 = getelementptr ptr, ptr %210, i32 4
  %212 = load ptr, ptr %211, align 8
  %213 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 0
  store ptr %171, ptr %213, align 8
  %214 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 1
  store ptr %177, ptr %214, align 8
  %215 = call ptr @behavior_wrapper(ptr %212, { ptr, ptr, ptr, i32 } %190, ptr %16)
  call void %215({ ptr, ptr, ptr, i32 } %190, { ptr, ptr, ptr, i32 } %190, ptr %15, { ptr, i160 } %174, { ptr, i160 } %180) #17
  %216 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 0
  %217 = load ptr, ptr %216, align 8
  %218 = insertvalue { ptr, i160 } undef, ptr %217, 0
  %219 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 1
  %220 = load i160, ptr %219, align 4
  %221 = insertvalue { ptr, i160 } %218, i160 %220, 1
  store { ptr, i160 } %221, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem43, align 8
  br label %225

222:                                              ; preds = %115
  %223 = load ptr, ptr %5, align 8
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  store ptr %223, ptr %.reload15, align 8
  %224 = load i160, ptr %4, align 4
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  store i160 %224, ptr %.reload12, align 4
  store { ptr, i160 } poison, ptr %.reg2mem43, align 8
  br label %225

225:                                              ; preds = %222, %137
  %.reload44 = load { ptr, i160 }, ptr %.reg2mem43, align 8
  store { ptr, i160 } %.reload44, ptr %.reg2mem5, align 8
  br label %226

226:                                              ; preds = %225
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem39, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem41, align 8
  br label %228

227:                                              ; preds = %3
  store i32 1, ptr %.reg2mem39, align 4
  store { ptr, i160 } poison, ptr %.reg2mem41, align 8
  br label %228

228:                                              ; preds = %227, %226
  %.reload42 = load { ptr, i160 }, ptr %.reg2mem41, align 8
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store { ptr, i160 } %.reload42, ptr %.reg2mem3, align 8
  store i32 %.reload40, ptr %.reg2mem1, align 4
  br label %229

229:                                              ; preds = %228
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %230 = zext i32 %.reload2 to i64
  %231 = trunc i64 %230 to i32
  switch i32 %231, label %233 [
    i32 0, label %232
  ]

232:                                              ; preds = %229
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem37, align 8
  br label %239

233:                                              ; preds = %229
  %234 = load [0 x i8], ptr %17, align 1
  store [0 x i8] %234, ptr %18, align 1
  store ptr @nil_typ, ptr %19, align 8
  %235 = load ptr, ptr %19, align 8
  %236 = insertvalue { ptr, i160 } undef, ptr %235, 0
  %237 = load i160, ptr %18, align 4
  %238 = insertvalue { ptr, i160 } %236, i160 %237, 1
  store { ptr, i160 } %238, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem37, align 8
  br label %239

239:                                              ; preds = %233, %232
  %.reload38 = load { ptr, i160 }, ptr %.reg2mem37, align 8
  ret { ptr, i160 } %.reload38
}

define { ptr, ptr, ptr, i32 } @ZipIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ZipIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ZipIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ZipIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ZipIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { i64, i64 } @_data_size_InterleaveIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @InterleaveIterable_field_InterleaveIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 15, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [50 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @InterleaveIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [50 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 18, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @InterleaveIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @InterleaveIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @InterleaveIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 400, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 400, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @InterleaveIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 400, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 400, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #16
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  call void @assume_offset(ptr %74, ptr @Iterable)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = alloca [0 x ptr], align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %87)
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %76)
  %90 = getelementptr ptr, ptr %76, i32 %85
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = alloca {}, align 8
  %94 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %86, ptr %93)
  %95 = call { ptr, ptr, ptr, i32 } %94({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %87) #17
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %95, ptr %96, align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator)
  %110 = load ptr, ptr %10, align 8
  %111 = load ptr, ptr %5, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 400, ptr %111)
  %113 = load i32, ptr %16, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = call ptr @typegetter_wrapper(ptr %115, ptr %110)
  %117 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterator, ptr %117, align 8
  %118 = getelementptr ptr, ptr %117, i32 1
  store ptr %116, ptr %118, align 8
  %119 = load ptr, ptr %117, align 8
  %120 = getelementptr ptr, ptr %119, i32 6
  %121 = load ptr, ptr %120, align 8
  %122 = call { i64, i64 } @size_wrapper(ptr %121, ptr %117)
  %123 = extractvalue { i64, i64 } %122, 0
  %124 = call ptr @bump_malloc(i64 %123)
  store ptr %116, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 8, ptr %124)
  %126 = alloca i32, align 4
  %127 = alloca ptr, align 8
  %128 = alloca ptr, align 8
  %129 = alloca ptr, align 8
  store ptr @InterleaveIterator, ptr %129, align 8
  store ptr %124, ptr %128, align 8
  store i32 10, ptr %126, align 4
  %130 = load ptr, ptr %10, align 8
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 400, ptr %131)
  %133 = load i32, ptr %16, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #16
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %139, ptr %140, align 8
  call void @assume_offset(ptr %140, ptr @Iterable)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %145, 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %148, 2
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %151 = load i32, ptr %150, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %151, 3
  %153 = alloca [0 x ptr], align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 0, ptr %153)
  %155 = call ptr @llvm.invariant.start.p0(i64 184, ptr %142)
  %156 = getelementptr ptr, ptr %142, i32 %151
  %157 = getelementptr ptr, ptr %156, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = alloca {}, align 8
  %160 = call ptr @behavior_wrapper(ptr %158, { ptr, ptr, ptr, i32 } %152, ptr %159)
  %161 = call { ptr, ptr, ptr, i32 } %160({ ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %152, ptr %153) #17
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %161, ptr %162, align 8
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %163, ptr @Iterator)
  %176 = load ptr, ptr %10, align 8
  %177 = load ptr, ptr %5, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 400, ptr %177)
  %179 = load i32, ptr %16, align 4
  %180 = getelementptr ptr, ptr %177, i32 %179
  %181 = getelementptr ptr, ptr %180, i32 2
  %182 = load ptr, ptr %181, align 8
  %183 = getelementptr { ptr, ptr }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = call { ptr, ptr, ptr, i32 } %184(ptr %176) #16
  %186 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %185, ptr %186, align 8
  call void @assume_offset(ptr %186, ptr @Iterable)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %194, 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %197, 3
  %199 = alloca [0 x ptr], align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 0, ptr %199)
  %201 = call ptr @llvm.invariant.start.p0(i64 184, ptr %188)
  %202 = getelementptr ptr, ptr %188, i32 %197
  %203 = getelementptr ptr, ptr %202, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = alloca {}, align 8
  %206 = call ptr @behavior_wrapper(ptr %204, { ptr, ptr, ptr, i32 } %198, ptr %205)
  %207 = call { ptr, ptr, ptr, i32 } %206({ ptr, ptr, ptr, i32 } %198, { ptr, ptr, ptr, i32 } %198, ptr %199) #17
  %208 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %207, ptr %208, align 8
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %221 = load i32, ptr %219, align 4
  store i32 %221, ptr %220, align 4
  call void @set_offset(ptr %209, ptr @Iterator)
  %222 = alloca { ptr, ptr, ptr, i32 }, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %224 = load ptr, ptr %165, align 8
  store ptr %224, ptr %223, align 8
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %226 = load ptr, ptr %168, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %228 = load ptr, ptr %171, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %230 = load i32, ptr %174, align 4
  store i32 %230, ptr %229, align 4
  call void @set_offset(ptr %222, ptr @Iterator)
  %231 = load ptr, ptr %223, align 8
  %232 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %231, 0
  %233 = load ptr, ptr %225, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } %232, ptr %233, 1
  %235 = load ptr, ptr %227, align 8
  %236 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %235, 2
  %237 = load i32, ptr %229, align 4
  %238 = insertvalue { ptr, ptr, ptr, i32 } %236, i32 %237, 3
  %239 = alloca { ptr, ptr, ptr, i32 }, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 0
  %241 = load ptr, ptr %211, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 1
  %243 = load ptr, ptr %214, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 2
  %245 = load ptr, ptr %217, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 3
  %247 = load i32, ptr %220, align 4
  store i32 %247, ptr %246, align 4
  call void @set_offset(ptr %239, ptr @Iterator)
  %248 = load ptr, ptr %240, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = load ptr, ptr %242, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %250, 1
  %252 = load ptr, ptr %244, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } %251, ptr %252, 2
  %254 = load i32, ptr %246, align 4
  %255 = insertvalue { ptr, ptr, ptr, i32 } %253, i32 %254, 3
  %256 = load ptr, ptr %129, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %256, 0
  %258 = load ptr, ptr %128, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %257, ptr %258, 1
  %260 = load ptr, ptr %127, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } %259, ptr %260, 2
  %262 = load i32, ptr %126, align 4
  %263 = insertvalue { ptr, ptr, ptr, i32 } %261, i32 %262, 3
  %264 = load ptr, ptr %10, align 8
  %265 = load ptr, ptr %5, align 8
  %266 = call ptr @llvm.invariant.start.p0(i64 400, ptr %265)
  %267 = load i32, ptr %16, align 4
  %268 = getelementptr ptr, ptr %265, i32 %267
  %269 = load ptr, ptr %268, align 8
  %270 = call ptr @typegetter_wrapper(ptr %269, ptr %264)
  %271 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %272 = getelementptr [3 x ptr], ptr %271, i32 0, i32 1
  store ptr %270, ptr %272, align 8
  %273 = getelementptr [3 x ptr], ptr %271, i32 0, i32 2
  store ptr null, ptr %273, align 8
  %274 = call ptr @llvm.invariant.start.p0(i64 16, ptr %271)
  store ptr @Iterator, ptr %271, align 8
  %275 = load ptr, ptr %10, align 8
  %276 = load ptr, ptr %5, align 8
  %277 = call ptr @llvm.invariant.start.p0(i64 400, ptr %276)
  %278 = load i32, ptr %16, align 4
  %279 = getelementptr ptr, ptr %276, i32 %278
  %280 = load ptr, ptr %279, align 8
  %281 = call ptr @typegetter_wrapper(ptr %280, ptr %275)
  %282 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %283 = getelementptr [3 x ptr], ptr %282, i32 0, i32 1
  store ptr %281, ptr %283, align 8
  %284 = getelementptr [3 x ptr], ptr %282, i32 0, i32 2
  store ptr null, ptr %284, align 8
  %285 = call ptr @llvm.invariant.start.p0(i64 16, ptr %282)
  store ptr @Iterator, ptr %282, align 8
  %286 = alloca [2 x ptr], align 8
  %287 = getelementptr [2 x ptr], ptr %286, i32 0, i32 0
  store ptr %271, ptr %287, align 8
  %288 = getelementptr [2 x ptr], ptr %286, i32 0, i32 1
  store ptr %282, ptr %288, align 8
  %289 = call ptr @llvm.invariant.start.p0(i64 4, ptr %286)
  %290 = call ptr @llvm.invariant.start.p0(i64 88, ptr %256)
  %291 = getelementptr ptr, ptr %256, i32 %262
  %292 = getelementptr ptr, ptr %291, i32 4
  %293 = load ptr, ptr %292, align 8
  %294 = alloca { ptr, ptr }, align 8
  %295 = getelementptr { ptr, ptr }, ptr %294, i32 0, i32 0
  store ptr %231, ptr %295, align 8
  %296 = getelementptr { ptr, ptr }, ptr %294, i32 0, i32 1
  store ptr %248, ptr %296, align 8
  %297 = call ptr @behavior_wrapper(ptr %293, { ptr, ptr, ptr, i32 } %263, ptr %294)
  call void %297({ ptr, ptr, ptr, i32 } %263, { ptr, ptr, ptr, i32 } %263, ptr %286, { ptr, ptr, ptr, i32 } %238, { ptr, ptr, ptr, i32 } %255) #17
  %298 = alloca { ptr, ptr, ptr, i32 }, align 8
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 0
  %300 = load ptr, ptr %129, align 8
  store ptr %300, ptr %299, align 8
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 1
  %302 = load ptr, ptr %128, align 8
  store ptr %302, ptr %301, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 2
  %304 = load ptr, ptr %127, align 8
  store ptr %304, ptr %303, align 8
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 3
  %306 = load i32, ptr %126, align 4
  store i32 %306, ptr %305, align 4
  call void @set_offset(ptr %298, ptr @Iterator)
  %307 = load ptr, ptr %299, align 8
  %308 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %307, 0
  %309 = load ptr, ptr %301, align 8
  %310 = insertvalue { ptr, ptr, ptr, i32 } %308, ptr %309, 1
  %311 = load ptr, ptr %303, align 8
  %312 = insertvalue { ptr, ptr, ptr, i32 } %310, ptr %311, 2
  %313 = load i32, ptr %305, align 4
  %314 = insertvalue { ptr, ptr, ptr, i32 } %312, i32 %313, 3
  ret { ptr, ptr, ptr, i32 } %314
}

define { i64, i64 } @_data_size_InterleaveIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @InterleaveIterator_field_InterleaveIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterator, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterator to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 6, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [11 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @InterleaveIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [11 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @InterleaveIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @InterleaveIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterator)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterator)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 88, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  %100 = alloca i1, align 1
  store i1 true, ptr %100, align 1
  %101 = load ptr, ptr %12, align 8
  %102 = load ptr, ptr %7, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = load i32, ptr %18, align 4
  %105 = getelementptr ptr, ptr %102, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 3
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load i1, ptr %100, align 1
  call void %109(ptr %101, i1 %110) #15
  ret void
}

define { ptr, i160 } @InterleaveIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem19 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  store ptr %20, ptr %.reg2mem12, align 8
  %21 = load ptr, ptr %19, align 8
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  store ptr %21, ptr %.reload18, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr %26, ptr %.reg2mem5, align 8
  %27 = load i32, ptr %25, align 4
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  store i32 %27, ptr %.reload11, align 4
  call void @set_offset(ptr %15, ptr @InterleaveIterator)
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %28 = load ptr, ptr %.reload17, align 8
  %29 = load ptr, ptr %15, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 88, ptr %29)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %31 = load i32, ptr %.reload10, align 4
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 3
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call i1 %36(ptr %28) #16
  %38 = alloca i1, align 1
  store i1 %37, ptr %38, align 1
  %39 = load i1, ptr %38, align 1
  br i1 %39, label %40, label %86

40:                                               ; preds = %3
  store i1 false, ptr %4, align 1
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %41 = load ptr, ptr %.reload16, align 8
  %42 = load ptr, ptr %15, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 88, ptr %42)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %44 = load i32, ptr %.reload9, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 3
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load i1, ptr %4, align 1
  call void %49(ptr %41, i1 %50) #15
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %51 = load ptr, ptr %.reload15, align 8
  %52 = load ptr, ptr %15, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 88, ptr %52)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %54 = load i32, ptr %.reload8, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = call { ptr, ptr, ptr, i32 } %59(ptr %51) #16
  store { ptr, ptr, ptr, i32 } %60, ptr %5, align 8
  call void @assume_offset(ptr %5, ptr @Iterator)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %71, 3
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %62)
  %75 = getelementptr ptr, ptr %62, i32 %71
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @behavior_wrapper(ptr %77, { ptr, ptr, ptr, i32 } %72, ptr %7)
  %79 = call { ptr, i160 } %78({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr %6) #17
  store { ptr, i160 } %79, ptr %8, align 8
  %80 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, i160 } undef, ptr %81, 0
  %83 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %84 = load i160, ptr %83, align 4
  %85 = insertvalue { ptr, i160 } %82, i160 %84, 1
  store { ptr, i160 } %85, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem19, align 8
  br label %132

86:                                               ; preds = %3
  store i1 true, ptr %9, align 1
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %87 = load ptr, ptr %.reload14, align 8
  %88 = load ptr, ptr %15, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 88, ptr %88)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %90 = load i32, ptr %.reload7, align 4
  %91 = getelementptr ptr, ptr %88, i32 %90
  %92 = getelementptr ptr, ptr %91, i32 3
  %93 = load ptr, ptr %92, align 8
  %94 = getelementptr { ptr, ptr }, ptr %93, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = load i1, ptr %9, align 1
  call void %95(ptr %87, i1 %96) #15
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %97 = load ptr, ptr %.reload13, align 8
  %98 = load ptr, ptr %15, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 88, ptr %98)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %100 = load i32, ptr %.reload6, align 4
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = getelementptr ptr, ptr %101, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = getelementptr { ptr, ptr }, ptr %103, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = call { ptr, ptr, ptr, i32 } %105(ptr %97) #16
  store { ptr, ptr, ptr, i32 } %106, ptr %10, align 8
  call void @assume_offset(ptr %10, ptr @Iterator)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 2
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %117, 3
  %119 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %120 = call ptr @llvm.invariant.start.p0(i64 24, ptr %108)
  %121 = getelementptr ptr, ptr %108, i32 %117
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @behavior_wrapper(ptr %123, { ptr, ptr, ptr, i32 } %118, ptr %12)
  %125 = call { ptr, i160 } %124({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr %11) #17
  store { ptr, i160 } %125, ptr %13, align 8
  %126 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, i160 } undef, ptr %127, 0
  %129 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 1
  %130 = load i160, ptr %129, align 4
  %131 = insertvalue { ptr, i160 } %128, i160 %130, 1
  store { ptr, i160 } %131, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem19, align 8
  br label %132

132:                                              ; preds = %86, %40
  %.reload20 = load { ptr, i160 }, ptr %.reg2mem19, align 8
  store { ptr, i160 } %.reload20, ptr %.reg2mem, align 8
  br label %133

133:                                              ; preds = %132
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i1 @InterleaveIterator_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @InterleaveIterator_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca i1, align 1
  store i1 %1, ptr %21, align 1
  %22 = load i1, ptr %21, align 1
  store i1 %22, ptr %20, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @InterleaveIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @InterleaveIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { i64, i64 } @_data_size_ChainIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ChainIterable_field_ChainIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ChainIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 15, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [50 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ChainIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [50 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ChainIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 18, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @ChainIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @ChainIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ChainIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 400, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 400, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ChainIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 400, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 400, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #16
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  call void @assume_offset(ptr %74, ptr @Iterable)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = alloca [0 x ptr], align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %87)
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %76)
  %90 = getelementptr ptr, ptr %76, i32 %85
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = alloca {}, align 8
  %94 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %86, ptr %93)
  %95 = call { ptr, ptr, ptr, i32 } %94({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %87) #17
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %95, ptr %96, align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator)
  %110 = load ptr, ptr %10, align 8
  %111 = load ptr, ptr %5, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 400, ptr %111)
  %113 = load i32, ptr %16, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = call ptr @typegetter_wrapper(ptr %115, ptr %110)
  %117 = alloca [2 x ptr], align 8
  store ptr @ChainIterator, ptr %117, align 8
  %118 = getelementptr ptr, ptr %117, i32 1
  store ptr %116, ptr %118, align 8
  %119 = load ptr, ptr %117, align 8
  %120 = getelementptr ptr, ptr %119, i32 6
  %121 = load ptr, ptr %120, align 8
  %122 = call { i64, i64 } @size_wrapper(ptr %121, ptr %117)
  %123 = extractvalue { i64, i64 } %122, 0
  %124 = call ptr @bump_malloc(i64 %123)
  store ptr %116, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 8, ptr %124)
  %126 = alloca i32, align 4
  %127 = alloca ptr, align 8
  %128 = alloca ptr, align 8
  %129 = alloca ptr, align 8
  store ptr @ChainIterator, ptr %129, align 8
  store ptr %124, ptr %128, align 8
  store i32 10, ptr %126, align 4
  %130 = load ptr, ptr %10, align 8
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 400, ptr %131)
  %133 = load i32, ptr %16, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #16
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %139, ptr %140, align 8
  call void @assume_offset(ptr %140, ptr @Iterable)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %145, 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %148, 2
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %151 = load i32, ptr %150, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %151, 3
  %153 = alloca [0 x ptr], align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 0, ptr %153)
  %155 = call ptr @llvm.invariant.start.p0(i64 184, ptr %142)
  %156 = getelementptr ptr, ptr %142, i32 %151
  %157 = getelementptr ptr, ptr %156, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = alloca {}, align 8
  %160 = call ptr @behavior_wrapper(ptr %158, { ptr, ptr, ptr, i32 } %152, ptr %159)
  %161 = call { ptr, ptr, ptr, i32 } %160({ ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %152, ptr %153) #17
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %161, ptr %162, align 8
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %163, ptr @Iterator)
  %176 = load ptr, ptr %10, align 8
  %177 = load ptr, ptr %5, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 400, ptr %177)
  %179 = load i32, ptr %16, align 4
  %180 = getelementptr ptr, ptr %177, i32 %179
  %181 = getelementptr ptr, ptr %180, i32 2
  %182 = load ptr, ptr %181, align 8
  %183 = getelementptr { ptr, ptr }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = call { ptr, ptr, ptr, i32 } %184(ptr %176) #16
  %186 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %185, ptr %186, align 8
  call void @assume_offset(ptr %186, ptr @Iterable)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %194, 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %197, 3
  %199 = alloca [0 x ptr], align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 0, ptr %199)
  %201 = call ptr @llvm.invariant.start.p0(i64 184, ptr %188)
  %202 = getelementptr ptr, ptr %188, i32 %197
  %203 = getelementptr ptr, ptr %202, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = alloca {}, align 8
  %206 = call ptr @behavior_wrapper(ptr %204, { ptr, ptr, ptr, i32 } %198, ptr %205)
  %207 = call { ptr, ptr, ptr, i32 } %206({ ptr, ptr, ptr, i32 } %198, { ptr, ptr, ptr, i32 } %198, ptr %199) #17
  %208 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %207, ptr %208, align 8
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %221 = load i32, ptr %219, align 4
  store i32 %221, ptr %220, align 4
  call void @set_offset(ptr %209, ptr @Iterator)
  %222 = alloca { ptr, ptr, ptr, i32 }, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %224 = load ptr, ptr %165, align 8
  store ptr %224, ptr %223, align 8
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %226 = load ptr, ptr %168, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %228 = load ptr, ptr %171, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %230 = load i32, ptr %174, align 4
  store i32 %230, ptr %229, align 4
  call void @set_offset(ptr %222, ptr @Iterator)
  %231 = load ptr, ptr %223, align 8
  %232 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %231, 0
  %233 = load ptr, ptr %225, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } %232, ptr %233, 1
  %235 = load ptr, ptr %227, align 8
  %236 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %235, 2
  %237 = load i32, ptr %229, align 4
  %238 = insertvalue { ptr, ptr, ptr, i32 } %236, i32 %237, 3
  %239 = alloca { ptr, ptr, ptr, i32 }, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 0
  %241 = load ptr, ptr %211, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 1
  %243 = load ptr, ptr %214, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 2
  %245 = load ptr, ptr %217, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 3
  %247 = load i32, ptr %220, align 4
  store i32 %247, ptr %246, align 4
  call void @set_offset(ptr %239, ptr @Iterator)
  %248 = load ptr, ptr %240, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = load ptr, ptr %242, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %250, 1
  %252 = load ptr, ptr %244, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } %251, ptr %252, 2
  %254 = load i32, ptr %246, align 4
  %255 = insertvalue { ptr, ptr, ptr, i32 } %253, i32 %254, 3
  %256 = load ptr, ptr %129, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %256, 0
  %258 = load ptr, ptr %128, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %257, ptr %258, 1
  %260 = load ptr, ptr %127, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } %259, ptr %260, 2
  %262 = load i32, ptr %126, align 4
  %263 = insertvalue { ptr, ptr, ptr, i32 } %261, i32 %262, 3
  %264 = load ptr, ptr %10, align 8
  %265 = load ptr, ptr %5, align 8
  %266 = call ptr @llvm.invariant.start.p0(i64 400, ptr %265)
  %267 = load i32, ptr %16, align 4
  %268 = getelementptr ptr, ptr %265, i32 %267
  %269 = load ptr, ptr %268, align 8
  %270 = call ptr @typegetter_wrapper(ptr %269, ptr %264)
  %271 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %272 = getelementptr [3 x ptr], ptr %271, i32 0, i32 1
  store ptr %270, ptr %272, align 8
  %273 = getelementptr [3 x ptr], ptr %271, i32 0, i32 2
  store ptr null, ptr %273, align 8
  %274 = call ptr @llvm.invariant.start.p0(i64 16, ptr %271)
  store ptr @Iterator, ptr %271, align 8
  %275 = load ptr, ptr %10, align 8
  %276 = load ptr, ptr %5, align 8
  %277 = call ptr @llvm.invariant.start.p0(i64 400, ptr %276)
  %278 = load i32, ptr %16, align 4
  %279 = getelementptr ptr, ptr %276, i32 %278
  %280 = load ptr, ptr %279, align 8
  %281 = call ptr @typegetter_wrapper(ptr %280, ptr %275)
  %282 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %283 = getelementptr [3 x ptr], ptr %282, i32 0, i32 1
  store ptr %281, ptr %283, align 8
  %284 = getelementptr [3 x ptr], ptr %282, i32 0, i32 2
  store ptr null, ptr %284, align 8
  %285 = call ptr @llvm.invariant.start.p0(i64 16, ptr %282)
  store ptr @Iterator, ptr %282, align 8
  %286 = alloca [2 x ptr], align 8
  %287 = getelementptr [2 x ptr], ptr %286, i32 0, i32 0
  store ptr %271, ptr %287, align 8
  %288 = getelementptr [2 x ptr], ptr %286, i32 0, i32 1
  store ptr %282, ptr %288, align 8
  %289 = call ptr @llvm.invariant.start.p0(i64 4, ptr %286)
  %290 = call ptr @llvm.invariant.start.p0(i64 88, ptr %256)
  %291 = getelementptr ptr, ptr %256, i32 %262
  %292 = getelementptr ptr, ptr %291, i32 4
  %293 = load ptr, ptr %292, align 8
  %294 = alloca { ptr, ptr }, align 8
  %295 = getelementptr { ptr, ptr }, ptr %294, i32 0, i32 0
  store ptr %231, ptr %295, align 8
  %296 = getelementptr { ptr, ptr }, ptr %294, i32 0, i32 1
  store ptr %248, ptr %296, align 8
  %297 = call ptr @behavior_wrapper(ptr %293, { ptr, ptr, ptr, i32 } %263, ptr %294)
  call void %297({ ptr, ptr, ptr, i32 } %263, { ptr, ptr, ptr, i32 } %263, ptr %286, { ptr, ptr, ptr, i32 } %238, { ptr, ptr, ptr, i32 } %255) #17
  %298 = alloca { ptr, ptr, ptr, i32 }, align 8
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 0
  %300 = load ptr, ptr %129, align 8
  store ptr %300, ptr %299, align 8
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 1
  %302 = load ptr, ptr %128, align 8
  store ptr %302, ptr %301, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 2
  %304 = load ptr, ptr %127, align 8
  store ptr %304, ptr %303, align 8
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 3
  %306 = load i32, ptr %126, align 4
  store i32 %306, ptr %305, align 4
  call void @set_offset(ptr %298, ptr @Iterator)
  %307 = load ptr, ptr %299, align 8
  %308 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %307, 0
  %309 = load ptr, ptr %301, align 8
  %310 = insertvalue { ptr, ptr, ptr, i32 } %308, ptr %309, 1
  %311 = load ptr, ptr %303, align 8
  %312 = insertvalue { ptr, ptr, ptr, i32 } %310, ptr %311, 2
  %313 = load i32, ptr %305, align 4
  %314 = insertvalue { ptr, ptr, ptr, i32 } %312, i32 %313, 3
  ret { ptr, ptr, ptr, i32 } %314
}

define { i64, i64 } @_data_size_ChainIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @ChainIterator_field_ChainIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterator, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterator to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 6, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [11 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ChainIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [11 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ChainIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ChainIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterator)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterator)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 88, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #15
  %100 = alloca i1, align 1
  store i1 true, ptr %100, align 1
  %101 = load ptr, ptr %12, align 8
  %102 = load ptr, ptr %7, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = load i32, ptr %18, align 4
  %105 = getelementptr ptr, ptr %102, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 3
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load i1, ptr %100, align 1
  call void %109(ptr %101, i1 %110) #15
  ret void
}

define { ptr, i160 } @ChainIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca { ptr, i160 }, align 8
  %12 = alloca i1, align 1
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i1, align 1
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca { ptr, i160 }, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem25 = alloca { ptr, i160 }, align 8
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca { ptr, i160 }, align 8
  %.reg2mem31 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  store ptr %22, ptr %.reg2mem18, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload24 = load ptr, ptr %.reg2mem18, align 8
  store ptr %23, ptr %.reload24, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr %28, ptr %.reg2mem11, align 8
  %29 = load i32, ptr %27, align 4
  %.reload17 = load ptr, ptr %.reg2mem11, align 8
  store i32 %29, ptr %.reload17, align 4
  call void @set_offset(ptr %17, ptr @ChainIterator)
  %30 = alloca i1, align 1
  store i1 false, ptr %30, align 1
  %.reload23 = load ptr, ptr %.reg2mem18, align 8
  %31 = load ptr, ptr %.reload23, align 8
  %32 = load ptr, ptr %17, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 88, ptr %32)
  %.reload16 = load ptr, ptr %.reg2mem11, align 8
  %34 = load i32, ptr %.reload16, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 3
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call i1 %39(ptr %31) #16
  %41 = alloca i1, align 1
  store i1 %40, ptr %41, align 1
  %42 = load i1, ptr %30, align 1
  %43 = load i1, ptr %41, align 1
  %44 = icmp eq i1 %42, %43
  %45 = alloca i1, align 1
  store i1 %44, ptr %45, align 1
  %46 = load i1, ptr %45, align 1
  br i1 %46, label %47, label %83

47:                                               ; preds = %3
  %.reload22 = load ptr, ptr %.reg2mem18, align 8
  %48 = load ptr, ptr %.reload22, align 8
  %49 = load ptr, ptr %17, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 88, ptr %49)
  %.reload15 = load ptr, ptr %.reg2mem11, align 8
  %51 = load i32, ptr %.reload15, align 4
  %52 = getelementptr ptr, ptr %49, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = call { ptr, ptr, ptr, i32 } %56(ptr %48) #16
  store { ptr, ptr, ptr, i32 } %57, ptr %4, align 8
  call void @assume_offset(ptr %4, ptr @Iterator)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  %70 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %71 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %72 = getelementptr ptr, ptr %59, i32 %68
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %69, ptr %6)
  %76 = call { ptr, i160 } %75({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr %5) #17
  store { ptr, i160 } %76, ptr %7, align 8
  %77 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, i160 } undef, ptr %78, 0
  %80 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %81 = load i160, ptr %80, align 4
  %82 = insertvalue { ptr, i160 } %79, i160 %81, 1
  store { ptr, i160 } %82, ptr %.reg2mem9, align 8
  %.reload10 = load { ptr, i160 }, ptr %.reg2mem9, align 8
  store i32 0, ptr %.reg2mem27, align 4
  store { ptr, i160 } %.reload10, ptr %.reg2mem29, align 8
  br label %153

83:                                               ; preds = %3
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  %84 = load ptr, ptr %.reload21, align 8
  %85 = load ptr, ptr %17, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 88, ptr %85)
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %87 = load i32, ptr %.reload14, align 4
  %88 = getelementptr ptr, ptr %85, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call { ptr, ptr, ptr, i32 } %92(ptr %84) #16
  store { ptr, ptr, ptr, i32 } %93, ptr %8, align 8
  call void @assume_offset(ptr %8, ptr @Iterator)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 2
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %104, 3
  %106 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %107 = call ptr @llvm.invariant.start.p0(i64 24, ptr %95)
  %108 = getelementptr ptr, ptr %95, i32 %104
  %109 = getelementptr ptr, ptr %108, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = call ptr @behavior_wrapper(ptr %110, { ptr, ptr, ptr, i32 } %105, ptr %10)
  %112 = call { ptr, i160 } %111({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr %9) #17
  store { ptr, i160 } %112, ptr %11, align 8
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %113 = load ptr, ptr %.reload20, align 8
  %114 = load ptr, ptr %17, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 88, ptr %114)
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %116 = load i32, ptr %.reload13, align 4
  %117 = getelementptr ptr, ptr %114, i32 %116
  %118 = load ptr, ptr %117, align 8
  %119 = call ptr @typegetter_wrapper(ptr %118, ptr %113)
  %120 = load ptr, ptr %11, align 8
  %121 = ptrtoint ptr %120 to i64
  %122 = icmp eq i64 %121, ptrtoint (ptr @nil_typ to i64)
  %123 = icmp eq i64 %121, 0
  %124 = or i1 %122, %123
  %125 = icmp eq i1 %124, false
  store i1 %125, ptr %12, align 1
  %126 = load i1, ptr %12, align 1
  %127 = xor i1 %126, true
  %128 = zext i1 %127 to i32
  store i32 %128, ptr %.reg2mem7, align 4
  br i1 %126, label %129, label %138

129:                                              ; preds = %83
  %130 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  store ptr %131, ptr %14, align 8
  %132 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 1
  %133 = load i160, ptr %132, align 4
  store i160 %133, ptr %13, align 4
  %134 = load ptr, ptr %14, align 8
  %135 = insertvalue { ptr, i160 } undef, ptr %134, 0
  %136 = load i160, ptr %13, align 4
  %137 = insertvalue { ptr, i160 } %135, i160 %136, 1
  store { ptr, i160 } %137, ptr %.reg2mem5, align 8
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem31, align 8
  br label %151

138:                                              ; preds = %83
  br label %139

139:                                              ; preds = %._crit_edge, %138
  store i1 false, ptr %15, align 1
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %140 = load ptr, ptr %.reload19, align 8
  %141 = load ptr, ptr %17, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 88, ptr %141)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %143 = load i32, ptr %.reload12, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 3
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr }, ptr %146, i32 0, i32 1
  %148 = load ptr, ptr %147, align 8
  %149 = load i1, ptr %15, align 1
  call void %148(ptr %140, i1 %149) #15
  br i1 true, label %._crit_edge, label %150

._crit_edge:                                      ; preds = %139
  br label %139

150:                                              ; preds = %139
  store { ptr, i160 } poison, ptr %.reg2mem31, align 8
  br label %151

151:                                              ; preds = %150, %129
  %.reload32 = load { ptr, i160 }, ptr %.reg2mem31, align 8
  store { ptr, i160 } %.reload32, ptr %.reg2mem3, align 8
  br label %152

152:                                              ; preds = %151
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem27, align 4
  store { ptr, i160 } %.reload4, ptr %.reg2mem29, align 8
  br label %153

153:                                              ; preds = %152, %47
  %.reload30 = load { ptr, i160 }, ptr %.reg2mem29, align 8
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store { ptr, i160 } %.reload30, ptr %.reg2mem1, align 8
  store i32 %.reload28, ptr %.reg2mem, align 4
  br label %154

154:                                              ; preds = %153
  %.reload = load i32, ptr %.reg2mem, align 4
  %155 = zext i32 %.reload to i64
  %156 = trunc i64 %155 to i32
  switch i32 %156, label %158 [
    i32 0, label %157
  ]

157:                                              ; preds = %154
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem25, align 8
  br label %159

158:                                              ; preds = %154
  store { ptr, i160 } poison, ptr %.reg2mem25, align 8
  br label %159

159:                                              ; preds = %158, %157
  %.reload26 = load { ptr, i160 }, ptr %.reg2mem25, align 8
  ret { ptr, i160 } %.reload26
}

define i1 @ChainIterator_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @ChainIterator_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca i1, align 1
  store i1 %1, ptr %21, align 1
  %22 = load i1, ptr %21, align 1
  store i1 %22, ptr %20, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ChainIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ChainIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { i64, i64 } @_data_size_FilterIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FilterIterable_field_FilterIterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 15, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FilterIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [50 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @FilterIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 18, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FilterIterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @FilterIterable_init_iterableIterableT_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @FilterIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 400, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 400, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @FilterIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 400, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #16
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 400, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %64) #16
  %74 = alloca ptr, align 8
  store { ptr } %73, ptr %74, align 8
  %75 = load ptr, ptr %10, align 8
  %76 = load ptr, ptr %5, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 400, ptr %76)
  %78 = load i32, ptr %16, align 4
  %79 = getelementptr ptr, ptr %76, i32 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %75)
  %82 = alloca [2 x ptr], align 8
  store ptr @FilterIterator, ptr %82, align 8
  %83 = getelementptr ptr, ptr %82, i32 1
  store ptr %81, ptr %83, align 8
  %84 = load ptr, ptr %82, align 8
  %85 = getelementptr ptr, ptr %84, i32 6
  %86 = load ptr, ptr %85, align 8
  %87 = call { i64, i64 } @size_wrapper(ptr %86, ptr %82)
  %88 = extractvalue { i64, i64 } %87, 0
  %89 = call ptr @bump_malloc(i64 %88)
  store ptr %81, ptr %89, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 8, ptr %89)
  %91 = alloca i32, align 4
  %92 = alloca ptr, align 8
  %93 = alloca ptr, align 8
  %94 = alloca ptr, align 8
  store ptr @FilterIterator, ptr %94, align 8
  store ptr %89, ptr %93, align 8
  store i32 10, ptr %91, align 4
  %95 = load ptr, ptr %10, align 8
  %96 = load ptr, ptr %5, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 400, ptr %96)
  %98 = load i32, ptr %16, align 4
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = getelementptr ptr, ptr %99, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = getelementptr { ptr, ptr }, ptr %101, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = call { ptr, ptr, ptr, i32 } %103(ptr %95) #16
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %104, ptr %105, align 8
  call void @assume_offset(ptr %105, ptr @Iterable)
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %110, 1
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 2
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 %116, 3
  %118 = alloca [0 x ptr], align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 0, ptr %118)
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %107)
  %121 = getelementptr ptr, ptr %107, i32 %116
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = alloca {}, align 8
  %125 = call ptr @behavior_wrapper(ptr %123, { ptr, ptr, ptr, i32 } %117, ptr %124)
  %126 = call { ptr, ptr, ptr, i32 } %125({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %118) #17
  %127 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %126, ptr %127, align 8
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 0
  %131 = load ptr, ptr %129, align 8
  store ptr %131, ptr %130, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %134 = load ptr, ptr %132, align 8
  store ptr %134, ptr %133, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 2
  %137 = load ptr, ptr %135, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 3
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %140 = load i32, ptr %138, align 4
  store i32 %140, ptr %139, align 4
  call void @set_offset(ptr %128, ptr @Iterator)
  %141 = load ptr, ptr %10, align 8
  %142 = load ptr, ptr %5, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 400, ptr %142)
  %144 = load i32, ptr %16, align 4
  %145 = getelementptr ptr, ptr %142, i32 %144
  %146 = getelementptr ptr, ptr %145, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = getelementptr { ptr, ptr }, ptr %147, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  %150 = call { ptr } %149(ptr %141) #16
  %151 = alloca ptr, align 8
  store { ptr } %150, ptr %151, align 8
  %152 = alloca { ptr, ptr, ptr, i32 }, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %154 = load ptr, ptr %130, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %156 = load ptr, ptr %133, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %158 = load ptr, ptr %136, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %160 = load i32, ptr %139, align 4
  store i32 %160, ptr %159, align 4
  call void @set_offset(ptr %152, ptr @Iterator)
  %161 = load ptr, ptr %153, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %161, 0
  %163 = load ptr, ptr %155, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %162, ptr %163, 1
  %165 = load ptr, ptr %157, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %165, 2
  %167 = load i32, ptr %159, align 4
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, i32 %167, 3
  %169 = load ptr, ptr %151, align 8
  %170 = insertvalue { ptr } undef, ptr %169, 0
  %171 = load ptr, ptr %94, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %93, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %92, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %91, align 4
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = load ptr, ptr %10, align 8
  %180 = load ptr, ptr %5, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 400, ptr %180)
  %182 = load i32, ptr %16, align 4
  %183 = getelementptr ptr, ptr %180, i32 %182
  %184 = load ptr, ptr %183, align 8
  %185 = call ptr @typegetter_wrapper(ptr %184, ptr %179)
  %186 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %187 = getelementptr [3 x ptr], ptr %186, i32 0, i32 1
  store ptr %185, ptr %187, align 8
  %188 = getelementptr [3 x ptr], ptr %186, i32 0, i32 2
  store ptr null, ptr %188, align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 16, ptr %186)
  store ptr @Iterator, ptr %186, align 8
  %190 = load ptr, ptr %10, align 8
  %191 = load ptr, ptr %5, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 400, ptr %191)
  %193 = load i32, ptr %16, align 4
  %194 = getelementptr ptr, ptr %191, i32 %193
  %195 = load ptr, ptr %194, align 8
  %196 = call ptr @typegetter_wrapper(ptr %195, ptr %190)
  %197 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %198 = getelementptr [4 x ptr], ptr %197, i32 0, i32 2
  store ptr %196, ptr %198, align 8
  %199 = getelementptr [4 x ptr], ptr %197, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %199, align 8
  %200 = getelementptr [4 x ptr], ptr %197, i32 0, i32 3
  store ptr null, ptr %200, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 24, ptr %197)
  store ptr @function_typ, ptr %197, align 8
  %202 = alloca [2 x ptr], align 8
  %203 = getelementptr [2 x ptr], ptr %202, i32 0, i32 0
  store ptr %186, ptr %203, align 8
  %204 = getelementptr [2 x ptr], ptr %202, i32 0, i32 1
  store ptr %197, ptr %204, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 4, ptr %202)
  %206 = call ptr @llvm.invariant.start.p0(i64 80, ptr %171)
  %207 = getelementptr ptr, ptr %171, i32 %177
  %208 = getelementptr ptr, ptr %207, i32 3
  %209 = load ptr, ptr %208, align 8
  %210 = alloca { ptr, ptr }, align 8
  %211 = getelementptr { ptr, ptr }, ptr %210, i32 0, i32 0
  store ptr %161, ptr %211, align 8
  %212 = getelementptr { ptr, ptr }, ptr %210, i32 0, i32 1
  store ptr @function_typ, ptr %212, align 8
  %213 = call ptr @behavior_wrapper(ptr %209, { ptr, ptr, ptr, i32 } %178, ptr %210)
  call void %213({ ptr, ptr, ptr, i32 } %178, { ptr, ptr, ptr, i32 } %178, ptr %202, { ptr, ptr, ptr, i32 } %168, { ptr } %170) #17
  %214 = alloca { ptr, ptr, ptr, i32 }, align 8
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 0
  %216 = load ptr, ptr %94, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 1
  %218 = load ptr, ptr %93, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 2
  %220 = load ptr, ptr %92, align 8
  store ptr %220, ptr %219, align 8
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 3
  %222 = load i32, ptr %91, align 4
  store i32 %222, ptr %221, align 4
  call void @set_offset(ptr %214, ptr @Iterator)
  %223 = load ptr, ptr %215, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %223, 0
  %225 = load ptr, ptr %217, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } %224, ptr %225, 1
  %227 = load ptr, ptr %219, align 8
  %228 = insertvalue { ptr, ptr, ptr, i32 } %226, ptr %227, 2
  %229 = load i32, ptr %221, align 4
  %230 = insertvalue { ptr, ptr, ptr, i32 } %228, i32 %229, 3
  ret { ptr, ptr, ptr, i32 } %230
}

define { i64, i64 } @_data_size_FilterIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FilterIterator_field_FilterIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 5, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [10 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FilterIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @FilterIterator_init_iteratorIteratorT_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @FilterIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 80, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 80, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #15
  ret void
}

define { ptr, i160 } @FilterIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i1, align 1
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca [0 x ptr], align 8
  %13 = alloca {}, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca [0 x i8], align 1
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem30 = alloca { ptr, i160 }, align 8
  %.reg2mem32 = alloca i32, align 4
  %.reg2mem34 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem24, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload29 = load ptr, ptr %.reg2mem24, align 8
  store ptr %25, ptr %.reload29, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem18, align 8
  %31 = load i32, ptr %29, align 4
  %.reload23 = load ptr, ptr %.reg2mem18, align 8
  store i32 %31, ptr %.reload23, align 4
  call void @set_offset(ptr %19, ptr @FilterIterator)
  %.reload28 = load ptr, ptr %.reg2mem24, align 8
  %32 = load ptr, ptr %.reload28, align 8
  %33 = load ptr, ptr %19, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 80, ptr %33)
  %.reload22 = load ptr, ptr %.reg2mem18, align 8
  %35 = load i32, ptr %.reload22, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr, ptr, ptr, i32 } %40(ptr %32) #16
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  call void @assume_offset(ptr %42, ptr @Iterator)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %47, 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %53, 3
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 0, ptr %55)
  %57 = call ptr @llvm.invariant.start.p0(i64 24, ptr %44)
  %58 = getelementptr ptr, ptr %44, i32 %53
  %59 = getelementptr ptr, ptr %58, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = alloca {}, align 8
  %62 = call ptr @behavior_wrapper(ptr %60, { ptr, ptr, ptr, i32 } %54, ptr %61)
  %63 = call { ptr, i160 } %62({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr %55) #17
  %64 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %63, ptr %64, align 8
  br label %65

65:                                               ; preds = %147, %3
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %66 = load ptr, ptr %.reload27, align 8
  %67 = load ptr, ptr %19, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 80, ptr %67)
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  %69 = load i32, ptr %.reload21, align 4
  %70 = getelementptr ptr, ptr %67, i32 %69
  %71 = load ptr, ptr %70, align 8
  %72 = call ptr @typegetter_wrapper(ptr %71, ptr %66)
  %73 = load ptr, ptr %64, align 8
  %74 = ptrtoint ptr %73 to i64
  %75 = icmp eq i64 %74, ptrtoint (ptr @nil_typ to i64)
  %76 = icmp eq i64 %74, 0
  %77 = or i1 %75, %76
  %78 = icmp eq i1 %77, false
  store i1 %78, ptr %4, align 1
  %79 = load i1, ptr %4, align 1
  br i1 %79, label %80, label %143

80:                                               ; preds = %65
  %81 = getelementptr { ptr, i160 }, ptr %64, i32 0, i32 0
  store ptr %81, ptr %.reg2mem15, align 8
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %82 = load ptr, ptr %.reload17, align 8
  store ptr %82, ptr %6, align 8
  %83 = getelementptr { ptr, i160 }, ptr %64, i32 0, i32 1
  store ptr %83, ptr %.reg2mem12, align 8
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %84 = load i160, ptr %.reload14, align 4
  store i160 %84, ptr %5, align 4
  %85 = load ptr, ptr %6, align 8
  store ptr %85, ptr %8, align 8
  %86 = load i160, ptr %5, align 4
  store i160 %86, ptr %7, align 4
  %87 = load ptr, ptr %8, align 8
  %88 = insertvalue { ptr, i160 } undef, ptr %87, 0
  %89 = load i160, ptr %7, align 4
  %90 = insertvalue { ptr, i160 } %88, i160 %89, 1
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  %91 = load ptr, ptr %.reload26, align 8
  %92 = load ptr, ptr %19, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 80, ptr %92)
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %94 = load i32, ptr %.reload20, align 4
  %95 = getelementptr ptr, ptr %92, i32 %94
  %96 = getelementptr ptr, ptr %95, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr { ptr, ptr }, ptr %97, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = call { ptr } %99(ptr %91) #16
  store { ptr } %100, ptr %9, align 8
  %101 = load ptr, ptr %9, align 8
  %102 = call i1 %101({ ptr, i160 } %90)
  store i1 %102, ptr %10, align 1
  %103 = load i1, ptr %10, align 1
  %104 = zext i1 %103 to i32
  store i32 %104, ptr %.reg2mem10, align 4
  %105 = xor i1 %103, true
  %106 = zext i1 %105 to i32
  store i32 %106, ptr %.reg2mem8, align 4
  br i1 %103, label %107, label %108

107:                                              ; preds = %80
  br label %142

108:                                              ; preds = %80
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %109 = load ptr, ptr %.reload25, align 8
  %110 = load ptr, ptr %19, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 80, ptr %110)
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %112 = load i32, ptr %.reload19, align 4
  %113 = getelementptr ptr, ptr %110, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call { ptr, ptr, ptr, i32 } %117(ptr %109) #16
  store { ptr, ptr, ptr, i32 } %118, ptr %11, align 8
  call void @assume_offset(ptr %11, ptr @Iterator)
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %126, 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %129 = load i32, ptr %128, align 4
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, i32 %129, 3
  %131 = call ptr @llvm.invariant.start.p0(i64 0, ptr %12)
  %132 = call ptr @llvm.invariant.start.p0(i64 24, ptr %120)
  %133 = getelementptr ptr, ptr %120, i32 %129
  %134 = getelementptr ptr, ptr %133, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = call ptr @behavior_wrapper(ptr %135, { ptr, ptr, ptr, i32 } %130, ptr %13)
  %137 = call { ptr, i160 } %136({ ptr, ptr, ptr, i32 } %130, { ptr, ptr, ptr, i32 } %130, ptr %12) #17
  store { ptr, i160 } %137, ptr %14, align 8
  %138 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  store ptr %139, ptr %.reload16, align 8
  %140 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 1
  %141 = load i160, ptr %140, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  store i160 %141, ptr %.reload13, align 4
  br label %142

142:                                              ; preds = %108, %107
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem32, align 4
  store i32 %.reload11, ptr %.reg2mem34, align 4
  br label %144

143:                                              ; preds = %65
  store i32 0, ptr %.reg2mem32, align 4
  store i32 2, ptr %.reg2mem34, align 4
  br label %144

144:                                              ; preds = %143, %142
  %.reload35 = load i32, ptr %.reg2mem34, align 4
  %.reload33 = load i32, ptr %.reg2mem32, align 4
  store i32 %.reload35, ptr %.reg2mem5, align 4
  store i32 %.reload33, ptr %.reg2mem3, align 4
  br label %145

145:                                              ; preds = %144
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %146 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %146, label %147, label %148

147:                                              ; preds = %145
  br label %65

148:                                              ; preds = %145
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %149 = zext i32 %.reload6 to i64
  %150 = trunc i64 %149 to i32
  switch i32 %150, label %156 [
    i32 1, label %151
  ]

151:                                              ; preds = %148
  %152 = load ptr, ptr %6, align 8
  %153 = insertvalue { ptr, i160 } undef, ptr %152, 0
  %154 = load i160, ptr %5, align 4
  %155 = insertvalue { ptr, i160 } %153, i160 %154, 1
  store { ptr, i160 } %155, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem30, align 8
  br label %162

156:                                              ; preds = %148
  %157 = load [0 x i8], ptr %15, align 1
  store [0 x i8] %157, ptr %16, align 1
  store ptr @nil_typ, ptr %17, align 8
  %158 = load ptr, ptr %17, align 8
  %159 = insertvalue { ptr, i160 } undef, ptr %158, 0
  %160 = load i160, ptr %16, align 4
  %161 = insertvalue { ptr, i160 } %159, i160 %160, 1
  store { ptr, i160 } %161, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem30, align 8
  br label %162

162:                                              ; preds = %156, %151
  %.reload31 = load { ptr, i160 }, ptr %.reg2mem30, align 8
  ret { ptr, i160 } %.reload31
}

define { ptr } @FilterIterator_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @FilterIterator_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterator_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FilterIterator_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr } @FilterIterable_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @FilterIterable_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FilterIterable_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { i64, i64 } @_data_size_MapIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @MapIterator_field_MapIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @MapIterator_field_MapIterator_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 6, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [11 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @MapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [11 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @MapIterator_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @MapIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #15
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 88, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 3
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #15
  ret void
}

define { ptr, i160 } @MapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca [0 x i8], align 1
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %13, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  store ptr %19, ptr %.reg2mem10, align 8
  %20 = load ptr, ptr %18, align 8
  %.reload14 = load ptr, ptr %.reg2mem10, align 8
  store ptr %20, ptr %.reload14, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  store ptr %25, ptr %.reg2mem5, align 8
  %26 = load i32, ptr %24, align 4
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  store i32 %26, ptr %.reload9, align 4
  call void @set_offset(ptr %14, ptr @MapIterator)
  %.reload13 = load ptr, ptr %.reg2mem10, align 8
  %27 = load ptr, ptr %.reload13, align 8
  %28 = load ptr, ptr %14, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 88, ptr %28)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %30 = load i32, ptr %.reload8, align 4
  %31 = getelementptr ptr, ptr %28, i32 %30
  %32 = getelementptr ptr, ptr %31, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr { ptr, ptr }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = call { ptr, ptr, ptr, i32 } %35(ptr %27) #16
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %36, ptr %37, align 8
  call void @assume_offset(ptr %37, ptr @Iterator)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %42, 1
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %45, 2
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %48, 3
  %50 = alloca [0 x ptr], align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr %50)
  %52 = call ptr @llvm.invariant.start.p0(i64 24, ptr %39)
  %53 = getelementptr ptr, ptr %39, i32 %48
  %54 = getelementptr ptr, ptr %53, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = alloca {}, align 8
  %57 = call ptr @behavior_wrapper(ptr %55, { ptr, ptr, ptr, i32 } %49, ptr %56)
  %58 = call { ptr, i160 } %57({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr %50) #17
  %59 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %58, ptr %59, align 8
  %.reload12 = load ptr, ptr %.reg2mem10, align 8
  %60 = load ptr, ptr %.reload12, align 8
  %61 = load ptr, ptr %14, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 88, ptr %61)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %63 = load i32, ptr %.reload7, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr @typegetter_wrapper(ptr %65, ptr %60)
  %67 = load ptr, ptr %59, align 8
  %68 = ptrtoint ptr %67 to i64
  %69 = icmp eq i64 %68, ptrtoint (ptr @nil_typ to i64)
  %70 = icmp eq i64 %68, 0
  %71 = or i1 %69, %70
  %72 = icmp eq i1 %71, false
  %73 = alloca i1, align 1
  store i1 %72, ptr %73, align 1
  %74 = load i1, ptr %73, align 1
  br i1 %74, label %75, label %104

75:                                               ; preds = %3
  %76 = getelementptr { ptr, i160 }, ptr %59, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  store ptr %77, ptr %5, align 8
  %78 = getelementptr { ptr, i160 }, ptr %59, i32 0, i32 1
  %79 = load i160, ptr %78, align 4
  store i160 %79, ptr %4, align 4
  %80 = load ptr, ptr %5, align 8
  store ptr %80, ptr %7, align 8
  %81 = load i160, ptr %4, align 4
  store i160 %81, ptr %6, align 4
  %82 = load ptr, ptr %7, align 8
  %83 = insertvalue { ptr, i160 } undef, ptr %82, 0
  %84 = load i160, ptr %6, align 4
  %85 = insertvalue { ptr, i160 } %83, i160 %84, 1
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %86 = load ptr, ptr %.reload11, align 8
  %87 = load ptr, ptr %14, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 88, ptr %87)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %89 = load i32, ptr %.reload6, align 4
  %90 = getelementptr ptr, ptr %87, i32 %89
  %91 = getelementptr ptr, ptr %90, i32 3
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = call { ptr } %94(ptr %86) #16
  store { ptr } %95, ptr %8, align 8
  %96 = load ptr, ptr %8, align 8
  %97 = call { ptr, i160 } %96({ ptr, i160 } %85)
  store { ptr, i160 } %97, ptr %9, align 8
  %98 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, i160 } undef, ptr %99, 0
  %101 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %102 = load i160, ptr %101, align 4
  %103 = insertvalue { ptr, i160 } %100, i160 %102, 1
  store { ptr, i160 } %103, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem15, align 8
  br label %110

104:                                              ; preds = %3
  %105 = load [0 x i8], ptr %10, align 1
  store [0 x i8] %105, ptr %11, align 1
  store ptr @nil_typ, ptr %12, align 8
  %106 = load ptr, ptr %12, align 8
  %107 = insertvalue { ptr, i160 } undef, ptr %106, 0
  %108 = load i160, ptr %11, align 4
  %109 = insertvalue { ptr, i160 } %107, i160 %108, 1
  store { ptr, i160 } %109, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem15, align 8
  br label %110

110:                                              ; preds = %104, %75
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  store { ptr, i160 } %.reload16, ptr %.reg2mem, align 8
  br label %111

111:                                              ; preds = %110
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr } @MapIterator_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @MapIterator_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterator_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @MapIterator_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr } @MapIterable_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @MapIterable_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @MapIterable_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define ptr @Iterator_field_Iterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Iterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 2, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [3 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Iterable_field_Iterable_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Iterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [23 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Iterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 13, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 14, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [23 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Iterable_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 15, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 16, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Iterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Iterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Iterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define { i64, i64 } @_data_size_Math(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Math_B__Self_sqrt_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 7, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define ptr @Math_B__Self_abs_xPtrf64__Self_abs_xPtri32(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %0, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %2, align 1
  %9 = load i1, ptr %2, align 1
  %10 = select i1 %9, i32 9, i32 8
  store i32 %10, ptr %.reg2mem, align 4
  br i1 %9, label %11, label %12

11:                                               ; preds = %1
  br label %16

12:                                               ; preds = %1
  %13 = load ptr, ptr %0, align 8
  %14 = ptrtoint ptr %13 to i64
  %15 = icmp eq i64 %14, ptrtoint (ptr @f64_typ to i64)
  store i1 %15, ptr %3, align 1
  br label %16

16:                                               ; preds = %12, %11
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %5, align 4
  %17 = load i32, ptr %5, align 4
  %18 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %17
  %19 = getelementptr ptr, ptr %18, i32 10
  %20 = load ptr, ptr %19, align 8
  ret ptr %20
}

define ptr @Math_B__Self_max_aPtrf64_bPtrf64__Self_max_aPtri32_bPtri32(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %0, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @i32_typ to i64)
  store i1 %10, ptr %4, align 1
  %11 = load i1, ptr %4, align 1
  %12 = select i1 %11, i32 11, i32 10
  store i32 %12, ptr %.reg2mem, align 4
  br i1 %11, label %13, label %18

13:                                               ; preds = %1
  %14 = getelementptr ptr, ptr %0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = ptrtoint ptr %15 to i64
  %17 = icmp eq i64 %16, ptrtoint (ptr @i32_typ to i64)
  store i1 %17, ptr %2, align 1
  br label %26

18:                                               ; preds = %1
  %19 = load ptr, ptr %0, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @f64_typ to i64)
  store i1 %21, ptr %5, align 1
  %22 = getelementptr ptr, ptr %0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = ptrtoint ptr %23 to i64
  %25 = icmp eq i64 %24, ptrtoint (ptr @f64_typ to i64)
  store i1 %25, ptr %3, align 1
  br label %26

26:                                               ; preds = %18, %13
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %7, align 4
  %27 = load i32, ptr %7, align 4
  %28 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %27
  %29 = getelementptr ptr, ptr %28, i32 10
  %30 = load ptr, ptr %29, align 8
  ret ptr %30
}

define ptr @Math_B__Self_min_aPtrf64_bPtrf64__Self_min_aPtri32_bPtri32(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %0, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @i32_typ to i64)
  store i1 %10, ptr %4, align 1
  %11 = load i1, ptr %4, align 1
  %12 = select i1 %11, i32 13, i32 12
  store i32 %12, ptr %.reg2mem, align 4
  br i1 %11, label %13, label %18

13:                                               ; preds = %1
  %14 = getelementptr ptr, ptr %0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = ptrtoint ptr %15 to i64
  %17 = icmp eq i64 %16, ptrtoint (ptr @i32_typ to i64)
  store i1 %17, ptr %2, align 1
  br label %26

18:                                               ; preds = %1
  %19 = load ptr, ptr %0, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @f64_typ to i64)
  store i1 %21, ptr %5, align 1
  %22 = getelementptr ptr, ptr %0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = ptrtoint ptr %23 to i64
  %25 = icmp eq i64 %24, ptrtoint (ptr @f64_typ to i64)
  store i1 %25, ptr %3, align 1
  br label %26

26:                                               ; preds = %18, %13
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %7, align 4
  %27 = load i32, ptr %7, align 4
  %28 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %27
  %29 = getelementptr ptr, ptr %28, i32 10
  %30 = load ptr, ptr %29, align 8
  ret ptr %30
}

define ptr @Math_B__Self_round_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 14, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define ptr @Math_B__Self_floor_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 15, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define ptr @Math_B__Self_ceiling_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 16, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define double @Math__Self_sqrt_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.sqrt.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

define { ptr, i64 } @Math__Self_abs_xPtrf64(ptr %0, { ptr, i64 } %1) {
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca i64, align 8
  %10 = alloca ptr, align 8
  %11 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %11, align 8
  %12 = alloca double, align 8
  %13 = getelementptr { ptr, i64 }, ptr %11, i32 0, i32 1
  %14 = load double, ptr %13, align 8
  store double %14, ptr %12, align 8
  %15 = alloca double, align 8
  store double 0.000000e+00, ptr %15, align 8
  %16 = load double, ptr %12, align 8
  %17 = load double, ptr %15, align 8
  %18 = fcmp oge double %16, %17
  %19 = alloca i1, align 1
  store i1 %18, ptr %19, align 1
  %20 = load i1, ptr %19, align 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %2
  %22 = load double, ptr %12, align 8
  store double %22, ptr %3, align 8
  store ptr @f64_typ, ptr %4, align 8
  %23 = load ptr, ptr %4, align 8
  %24 = insertvalue { ptr, i64 } undef, ptr %23, 0
  %25 = load i64, ptr %3, align 4
  %26 = insertvalue { ptr, i64 } %24, i64 %25, 1
  store { ptr, i64 } %26, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem5, align 8
  br label %39

27:                                               ; preds = %2
  store double 0.000000e+00, ptr %5, align 8
  store double 1.000000e+00, ptr %6, align 8
  %28 = load double, ptr %5, align 8
  %29 = load double, ptr %6, align 8
  %30 = fsub double %28, %29
  store double %30, ptr %7, align 8
  %31 = load double, ptr %7, align 8
  %32 = load double, ptr %12, align 8
  %33 = fmul double %31, %32
  store double %33, ptr %8, align 8
  %34 = load double, ptr %8, align 8
  store double %34, ptr %9, align 8
  store ptr @f64_typ, ptr %10, align 8
  %35 = load ptr, ptr %10, align 8
  %36 = insertvalue { ptr, i64 } undef, ptr %35, 0
  %37 = load i64, ptr %9, align 4
  %38 = insertvalue { ptr, i64 } %36, i64 %37, 1
  store { ptr, i64 } %38, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem5, align 8
  br label %39

39:                                               ; preds = %27, %21
  %.reload6 = load { ptr, i64 }, ptr %.reg2mem5, align 8
  store { ptr, i64 } %.reload6, ptr %.reg2mem, align 8
  br label %40

40:                                               ; preds = %39
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_abs_xPtri32(ptr %0, { ptr, i64 } %1) {
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %9, align 8
  %10 = alloca i32, align 4
  %11 = getelementptr { ptr, i64 }, ptr %9, i32 0, i32 1
  %12 = load i32, ptr %11, align 4
  store i32 %12, ptr %10, align 4
  %13 = alloca i32, align 4
  store i32 0, ptr %13, align 4
  %14 = load i32, ptr %10, align 4
  %15 = load i32, ptr %13, align 4
  %16 = icmp sge i32 %14, %15
  %17 = alloca i1, align 1
  store i1 %16, ptr %17, align 1
  %18 = load i1, ptr %17, align 1
  br i1 %18, label %19, label %25

19:                                               ; preds = %2
  %20 = load i32, ptr %10, align 4
  store i32 %20, ptr %3, align 4
  store ptr @i32_typ, ptr %4, align 8
  %21 = load ptr, ptr %4, align 8
  %22 = insertvalue { ptr, i64 } undef, ptr %21, 0
  %23 = load i64, ptr %3, align 4
  %24 = insertvalue { ptr, i64 } %22, i64 %23, 1
  store { ptr, i64 } %24, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem5, align 8
  br label %34

25:                                               ; preds = %2
  store i32 -1, ptr %5, align 4
  %26 = load i32, ptr %5, align 4
  %27 = load i32, ptr %10, align 4
  %28 = mul i32 %26, %27
  store i32 %28, ptr %6, align 4
  %29 = load i32, ptr %6, align 4
  store i32 %29, ptr %7, align 4
  store ptr @i32_typ, ptr %8, align 8
  %30 = load ptr, ptr %8, align 8
  %31 = insertvalue { ptr, i64 } undef, ptr %30, 0
  %32 = load i64, ptr %7, align 4
  %33 = insertvalue { ptr, i64 } %31, i64 %32, 1
  store { ptr, i64 } %33, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem5, align 8
  br label %34

34:                                               ; preds = %25, %19
  %.reload6 = load { ptr, i64 }, ptr %.reg2mem5, align 8
  store { ptr, i64 } %.reload6, ptr %.reg2mem, align 8
  br label %35

35:                                               ; preds = %34
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_max_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %6, align 8
  %7 = alloca double, align 8
  %8 = getelementptr { ptr, i64 }, ptr %6, i32 0, i32 1
  %9 = load double, ptr %8, align 8
  store double %9, ptr %7, align 8
  %10 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %10, align 8
  %11 = alloca double, align 8
  %12 = getelementptr { ptr, i64 }, ptr %10, i32 0, i32 1
  %13 = load double, ptr %12, align 8
  store double %13, ptr %11, align 8
  %14 = load double, ptr %7, align 8
  %15 = load double, ptr %11, align 8
  %16 = fcmp ogt double %14, %15
  %17 = alloca i1, align 1
  store i1 %16, ptr %17, align 1
  %18 = load i1, ptr %17, align 1
  %19 = select i1 %18, ptr %4, ptr %5
  %20 = select i1 %18, ptr %7, ptr %11
  %21 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %22 = load double, ptr %20, align 8
  store double %22, ptr %21, align 8
  store ptr @f64_typ, ptr %19, align 8
  %23 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, i64 } undef, ptr %24, 0
  %26 = load i64, ptr %21, align 4
  %27 = insertvalue { ptr, i64 } %25, i64 %26, 1
  ret { ptr, i64 } %27
}

define { ptr, i64 } @Math__Self_max_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %6, align 8
  %7 = alloca i32, align 4
  %8 = getelementptr { ptr, i64 }, ptr %6, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  store i32 %9, ptr %7, align 4
  %10 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %10, align 8
  %11 = alloca i32, align 4
  %12 = getelementptr { ptr, i64 }, ptr %10, i32 0, i32 1
  %13 = load i32, ptr %12, align 4
  store i32 %13, ptr %11, align 4
  %14 = load i32, ptr %7, align 4
  %15 = load i32, ptr %11, align 4
  %16 = icmp sgt i32 %14, %15
  %17 = alloca i1, align 1
  store i1 %16, ptr %17, align 1
  %18 = load i1, ptr %17, align 1
  %19 = select i1 %18, ptr %4, ptr %5
  %20 = select i1 %18, ptr %7, ptr %11
  %21 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  store ptr @i32_typ, ptr %19, align 8
  %23 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, i64 } undef, ptr %24, 0
  %26 = load i64, ptr %21, align 4
  %27 = insertvalue { ptr, i64 } %25, i64 %26, 1
  ret { ptr, i64 } %27
}

define { ptr, i64 } @Math__Self_min_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %6, align 8
  %7 = alloca double, align 8
  %8 = getelementptr { ptr, i64 }, ptr %6, i32 0, i32 1
  %9 = load double, ptr %8, align 8
  store double %9, ptr %7, align 8
  %10 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %10, align 8
  %11 = alloca double, align 8
  %12 = getelementptr { ptr, i64 }, ptr %10, i32 0, i32 1
  %13 = load double, ptr %12, align 8
  store double %13, ptr %11, align 8
  %14 = load double, ptr %7, align 8
  %15 = load double, ptr %11, align 8
  %16 = fcmp olt double %14, %15
  %17 = alloca i1, align 1
  store i1 %16, ptr %17, align 1
  %18 = load i1, ptr %17, align 1
  %19 = select i1 %18, ptr %4, ptr %5
  %20 = select i1 %18, ptr %7, ptr %11
  %21 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %22 = load double, ptr %20, align 8
  store double %22, ptr %21, align 8
  store ptr @f64_typ, ptr %19, align 8
  %23 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, i64 } undef, ptr %24, 0
  %26 = load i64, ptr %21, align 4
  %27 = insertvalue { ptr, i64 } %25, i64 %26, 1
  ret { ptr, i64 } %27
}

define { ptr, i64 } @Math__Self_min_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %6, align 8
  %7 = alloca i32, align 4
  %8 = getelementptr { ptr, i64 }, ptr %6, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  store i32 %9, ptr %7, align 4
  %10 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %10, align 8
  %11 = alloca i32, align 4
  %12 = getelementptr { ptr, i64 }, ptr %10, i32 0, i32 1
  %13 = load i32, ptr %12, align 4
  store i32 %13, ptr %11, align 4
  %14 = load i32, ptr %7, align 4
  %15 = load i32, ptr %11, align 4
  %16 = icmp slt i32 %14, %15
  %17 = alloca i1, align 1
  store i1 %16, ptr %17, align 1
  %18 = load i1, ptr %17, align 1
  %19 = select i1 %18, ptr %4, ptr %5
  %20 = select i1 %18, ptr %7, ptr %11
  %21 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  store ptr @i32_typ, ptr %19, align 8
  %23 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, i64 } undef, ptr %24, 0
  %26 = load i64, ptr %21, align 4
  %27 = insertvalue { ptr, i64 } %25, i64 %26, 1
  ret { ptr, i64 } %27
}

define double @Math__Self_round_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.round.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

define double @Math__Self_floor_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.floor.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

define double @Math__Self_ceiling_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.ceil.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.ceil.f64(double) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.round.f64(double) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.sqrt.f64(double) #2

define { i64, i64 } @_data_size_Range(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Range_field_Range_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_Ptri32
}

define ptr @Range_B_init_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @i32_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 19, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [55 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 21, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [55 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Range_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @function_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 23, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [55 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [55 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 28, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [55 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Range_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 29, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [55 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Range_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 30, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [55 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Range_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 31, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [55 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @Range_init_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Range)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 440, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %19, align 4
  call void %28(ptr %20, i32 %29) #15
  %30 = alloca i32, align 4
  store i32 0, ptr %30, align 4
  %31 = load ptr, ptr %11, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 440, ptr %32)
  %34 = load i32, ptr %17, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = load i32, ptr %30, align 4
  call void %38(ptr %31, i32 %39) #15
  %40 = alloca i32, align 4
  store i32 1, ptr %40, align 4
  %41 = load ptr, ptr %11, align 8
  %42 = load ptr, ptr %6, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 440, ptr %42)
  %44 = load i32, ptr %17, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 2
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load i32, ptr %40, align 4
  call void %49(ptr %41, i32 %50) #15
  ret void
}

define void @Range_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Range)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 440, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %20, align 4
  call void %28(ptr %21, i32 %29) #15
  %30 = alloca i32, align 4
  store i32 %4, ptr %30, align 4
  %31 = load ptr, ptr %12, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 440, ptr %32)
  %34 = load i32, ptr %18, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = load i32, ptr %30, align 4
  call void %39(ptr %31, i32 %40) #15
  %41 = alloca i32, align 4
  store i32 1, ptr %41, align 4
  %42 = load ptr, ptr %12, align 8
  %43 = load ptr, ptr %7, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 440, ptr %43)
  %45 = load i32, ptr %18, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load i32, ptr %41, align 4
  call void %50(ptr %42, i32 %51) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @Range_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Range)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 440, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %19, align 4
  call void %28(ptr %20, i32 %29) #15
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %32 = load ptr, ptr %8, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %34 = load ptr, ptr %11, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %36 = load ptr, ptr %14, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %38 = load i32, ptr %17, align 4
  store i32 %38, ptr %37, align 4
  call void @set_offset(ptr %30, ptr @Range)
  %39 = load ptr, ptr %31, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %41 = load ptr, ptr %33, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %41, 1
  %43 = load ptr, ptr %35, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %43, 2
  %45 = load i32, ptr %37, align 4
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %45, 3
  ret { ptr, ptr, ptr, i32 } %46
}

define { ptr, ptr, ptr, i32 } @Range_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Range)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 440, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #16
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = load ptr, ptr %10, align 8
  %29 = load ptr, ptr %5, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 440, ptr %29)
  %31 = load i32, ptr %16, align 4
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %28) #16
  %38 = alloca i32, align 4
  store i32 %37, ptr %38, align 4
  %39 = load ptr, ptr %10, align 8
  %40 = load ptr, ptr %5, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 440, ptr %40)
  %42 = load i32, ptr %16, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, ptr }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %39) #16
  %49 = alloca i32, align 4
  store i32 %48, ptr %49, align 4
  %50 = alloca [1 x ptr], align 8
  store ptr @RangeIterator, ptr %50, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr ptr, ptr %51, i32 6
  %53 = load ptr, ptr %52, align 8
  %54 = call { i64, i64 } @size_wrapper(ptr %53, ptr %50)
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = call ptr @bump_malloc(i64 %55)
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  %60 = alloca ptr, align 8
  store ptr @RangeIterator, ptr %60, align 8
  store ptr %56, ptr %59, align 8
  store i32 10, ptr %57, align 4
  %61 = load ptr, ptr %10, align 8
  %62 = load ptr, ptr %5, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 440, ptr %62)
  %64 = load i32, ptr %16, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 %68(ptr %61) #16
  %70 = alloca i32, align 4
  store i32 %69, ptr %70, align 4
  %71 = load ptr, ptr %10, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 440, ptr %72)
  %74 = load i32, ptr %16, align 4
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = call i32 %79(ptr %71) #16
  %81 = alloca i32, align 4
  store i32 %80, ptr %81, align 4
  %82 = load ptr, ptr %10, align 8
  %83 = load ptr, ptr %5, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 440, ptr %83)
  %85 = load i32, ptr %16, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 2
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = call i32 %90(ptr %82) #16
  %92 = alloca i32, align 4
  store i32 %91, ptr %92, align 4
  %93 = load i32, ptr %70, align 4
  %94 = load i32, ptr %81, align 4
  %95 = load i32, ptr %92, align 4
  %96 = load ptr, ptr %60, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = load ptr, ptr %59, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 1
  %100 = load ptr, ptr %58, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 2
  %102 = load i32, ptr %57, align 4
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %102, 3
  %104 = alloca [3 x ptr], align 8
  %105 = getelementptr [3 x ptr], ptr %104, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %105, align 8
  %106 = getelementptr [3 x ptr], ptr %104, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %106, align 8
  %107 = getelementptr [3 x ptr], ptr %104, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 9, ptr %104)
  %109 = call ptr @llvm.invariant.start.p0(i64 88, ptr %96)
  %110 = getelementptr ptr, ptr %96, i32 %102
  %111 = getelementptr ptr, ptr %110, i32 4
  %112 = load ptr, ptr %111, align 8
  %113 = alloca { ptr, ptr, ptr }, align 8
  %114 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 0
  store ptr @i32_typ, ptr %114, align 8
  %115 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 1
  store ptr @i32_typ, ptr %115, align 8
  %116 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 2
  store ptr @i32_typ, ptr %116, align 8
  %117 = call ptr @behavior_wrapper(ptr %112, { ptr, ptr, ptr, i32 } %103, ptr %113)
  call void %117({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr %104, i32 %93, i32 %94, i32 %95) #17
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %60, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %122 = load ptr, ptr %59, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %124 = load ptr, ptr %58, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %126 = load i32, ptr %57, align 4
  store i32 %126, ptr %125, align 4
  call void @set_offset(ptr %118, ptr @Iterator)
  %127 = load ptr, ptr %119, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %121, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %123, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %125, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  ret { ptr, ptr, ptr, i32 } %134
}

define { i64, i64 } @_data_size_RangeIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @RangeIterator_field_RangeIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_Ptri32
}

define ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @i32_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @i32_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 6, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [11 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @RangeIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [11 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @RangeIterator_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @RangeIterator)
  %21 = alloca i32, align 4
  store i32 %3, ptr %21, align 4
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 88, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load i32, ptr %21, align 4
  call void %29(ptr %22, i32 %30) #15
  %31 = alloca i32, align 4
  store i32 %4, ptr %31, align 4
  %32 = load ptr, ptr %13, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 88, ptr %33)
  %35 = load i32, ptr %19, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = load i32, ptr %31, align 4
  call void %40(ptr %32, i32 %41) #15
  %42 = alloca i32, align 4
  store i32 %5, ptr %42, align 4
  %43 = load ptr, ptr %13, align 8
  %44 = load ptr, ptr %8, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = load i32, ptr %19, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load i32, ptr %42, align 4
  call void %51(ptr %43, i32 %52) #15
  ret void
}

define { ptr, i160 } @RangeIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca [0 x i8], align 1
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem21 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %13, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  store ptr %19, ptr %.reg2mem13, align 8
  %20 = load ptr, ptr %18, align 8
  %.reload20 = load ptr, ptr %.reg2mem13, align 8
  store ptr %20, ptr %.reload20, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  store ptr %25, ptr %.reg2mem5, align 8
  %26 = load i32, ptr %24, align 4
  %.reload12 = load ptr, ptr %.reg2mem5, align 8
  store i32 %26, ptr %.reload12, align 4
  call void @set_offset(ptr %14, ptr @RangeIterator)
  %.reload19 = load ptr, ptr %.reg2mem13, align 8
  %27 = load ptr, ptr %.reload19, align 8
  %28 = load ptr, ptr %14, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 88, ptr %28)
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  %30 = load i32, ptr %.reload11, align 4
  %31 = getelementptr ptr, ptr %28, i32 %30
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr { ptr, ptr }, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call i32 %34(ptr %27) #16
  %36 = alloca i32, align 4
  store i32 %35, ptr %36, align 4
  %.reload18 = load ptr, ptr %.reg2mem13, align 8
  %37 = load ptr, ptr %.reload18, align 8
  %38 = load ptr, ptr %14, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 88, ptr %38)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %40 = load i32, ptr %.reload10, align 4
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = call i32 %45(ptr %37) #16
  %47 = alloca i32, align 4
  store i32 %46, ptr %47, align 4
  %48 = load i32, ptr %36, align 4
  %49 = load i32, ptr %47, align 4
  %50 = icmp sgt i32 %48, %49
  %51 = alloca i1, align 1
  store i1 %50, ptr %51, align 1
  %52 = load i1, ptr %51, align 1
  br i1 %52, label %53, label %59

53:                                               ; preds = %3
  %54 = load [0 x i8], ptr %4, align 1
  store [0 x i8] %54, ptr %5, align 1
  store ptr @nil_typ, ptr %6, align 8
  %55 = load ptr, ptr %6, align 8
  %56 = insertvalue { ptr, i160 } undef, ptr %55, 0
  %57 = load i160, ptr %5, align 4
  %58 = insertvalue { ptr, i160 } %56, i160 %57, 1
  store { ptr, i160 } %58, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem21, align 8
  br label %105

59:                                               ; preds = %3
  %.reload17 = load ptr, ptr %.reg2mem13, align 8
  %60 = load ptr, ptr %.reload17, align 8
  %61 = load ptr, ptr %14, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 88, ptr %61)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %63 = load i32, ptr %.reload9, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 0
  %67 = load ptr, ptr %66, align 8
  %68 = call i32 %67(ptr %60) #16
  store i32 %68, ptr %7, align 4
  %.reload16 = load ptr, ptr %.reg2mem13, align 8
  %69 = load ptr, ptr %.reload16, align 8
  %70 = load ptr, ptr %14, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 88, ptr %70)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %72 = load i32, ptr %.reload8, align 4
  %73 = getelementptr ptr, ptr %70, i32 %72
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = call i32 %76(ptr %69) #16
  store i32 %77, ptr %8, align 4
  %.reload15 = load ptr, ptr %.reg2mem13, align 8
  %78 = load ptr, ptr %.reload15, align 8
  %79 = load ptr, ptr %14, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 88, ptr %79)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %81 = load i32, ptr %.reload7, align 4
  %82 = getelementptr ptr, ptr %79, i32 %81
  %83 = getelementptr ptr, ptr %82, i32 2
  %84 = load ptr, ptr %83, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %87 = call i32 %86(ptr %78) #16
  store i32 %87, ptr %9, align 4
  %88 = load i32, ptr %8, align 4
  %89 = load i32, ptr %9, align 4
  %90 = add i32 %88, %89
  store i32 %90, ptr %10, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %91 = load ptr, ptr %.reload14, align 8
  %92 = load ptr, ptr %14, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 88, ptr %92)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %94 = load i32, ptr %.reload6, align 4
  %95 = getelementptr ptr, ptr %92, i32 %94
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = load i32, ptr %10, align 4
  call void %98(ptr %91, i32 %99) #15
  %100 = load i32, ptr %7, align 4
  store i32 %100, ptr %11, align 4
  store ptr @i32_typ, ptr %12, align 8
  %101 = load ptr, ptr %12, align 8
  %102 = insertvalue { ptr, i160 } undef, ptr %101, 0
  %103 = load i160, ptr %11, align 4
  %104 = insertvalue { ptr, i160 } %102, i160 %103, 1
  store { ptr, i160 } %104, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem21, align 8
  br label %105

105:                                              ; preds = %59, %53
  %.reload22 = load { ptr, i160 }, ptr %.reg2mem21, align 8
  store { ptr, i160 } %.reload22, ptr %.reg2mem, align 8
  br label %106

106:                                              ; preds = %105
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i32 @RangeIterator_getter_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @RangeIterator_setter_step(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define i32 @RangeIterator_getter_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @RangeIterator_setter_end(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define i32 @RangeIterator_getter_counter(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @RangeIterator_setter_counter(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define i32 @Range_getter_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Range_setter_step(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define i32 @Range_getter_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @Range_setter_end(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define i32 @Range_getter_start(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Range_setter_start(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_IO(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @IO_B__Self_print_xString__Self_print_xPtri1__Self_print_xPtri32__Self_print_xCharacter__Self_print_xRepresentable__Self_print_xPtrf64__Self_print_xNil__Self_print_xPtri64__Self_print_xPtri8(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = alloca i1, align 1
  %11 = alloca i1, align 1
  %12 = alloca i1, align 1
  %13 = alloca i1, align 1
  %14 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca i32, align 4
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i32, align 4
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem37 = alloca i32, align 4
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca i32, align 4
  %.reg2mem43 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %15 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %16 = alloca ptr, align 8
  %17 = load ptr, ptr %0, align 8
  %18 = ptrtoint ptr %17 to i64
  %19 = icmp eq i64 %18, ptrtoint (ptr @f64_typ to i64)
  store i1 %19, ptr %2, align 1
  %20 = load i1, ptr %2, align 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %1
  store i32 6, ptr %.reg2mem25, align 4
  br label %176

22:                                               ; preds = %1
  %23 = load ptr, ptr %0, align 8
  %24 = ptrtoint ptr %23 to i64
  %25 = icmp eq i64 %24, ptrtoint (ptr @i64_typ to i64)
  store i1 %25, ptr %3, align 1
  %26 = load i1, ptr %3, align 1
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  store i32 8, ptr %.reg2mem27, align 4
  br label %174

28:                                               ; preds = %22
  %29 = load ptr, ptr %0, align 8
  %30 = ptrtoint ptr %29 to i64
  %31 = icmp eq i64 %30, ptrtoint (ptr @i32_typ to i64)
  store i1 %31, ptr %4, align 1
  %32 = load i1, ptr %4, align 1
  br i1 %32, label %33, label %34

33:                                               ; preds = %28
  store i32 3, ptr %.reg2mem29, align 4
  br label %172

34:                                               ; preds = %28
  %35 = load ptr, ptr %0, align 8
  %36 = ptrtoint ptr %35 to i64
  %37 = icmp eq i64 %36, ptrtoint (ptr @bool_typ to i64)
  store i1 %37, ptr %5, align 1
  %38 = load i1, ptr %5, align 1
  br i1 %38, label %39, label %40

39:                                               ; preds = %34
  store i32 2, ptr %.reg2mem31, align 4
  br label %170

40:                                               ; preds = %34
  %41 = load ptr, ptr %0, align 8
  %42 = getelementptr { [3 x i64], [3 x ptr] }, ptr %41, i32 0, i32 0, i32 1
  %43 = getelementptr { [3 x i64], [3 x ptr] }, ptr %41, i32 0, i32 0, i32 2
  %44 = getelementptr { [3 x i64], [3 x ptr] }, ptr %41, i32 0, i32 1, i32 0
  %45 = getelementptr { [3 x i64], [3 x ptr] }, ptr %41, i32 0, i32 1, i32 1
  %46 = load i64, ptr %42, align 4
  %47 = load i64, ptr %43, align 4
  %48 = load ptr, ptr %44, align 8
  %49 = load ptr, ptr %45, align 8
  %50 = load i64, ptr @Representable, align 4
  %51 = call i1 @subtype_test_wrapper(ptr %48, i64 %47, i64 %46, i64 %50, i64 ptrtoint (ptr @Representable to i64), ptr %49)
  store i1 %51, ptr %6, align 1
  %52 = load i1, ptr %6, align 1
  br i1 %52, label %53, label %84

53:                                               ; preds = %40
  %54 = load ptr, ptr %0, align 8
  %55 = getelementptr { [3 x i64], [3 x ptr] }, ptr %54, i32 0, i32 0, i32 1
  %56 = getelementptr { [3 x i64], [3 x ptr] }, ptr %54, i32 0, i32 0, i32 2
  %57 = getelementptr { [3 x i64], [3 x ptr] }, ptr %54, i32 0, i32 1, i32 0
  %58 = getelementptr { [3 x i64], [3 x ptr] }, ptr %54, i32 0, i32 1, i32 1
  %59 = load i64, ptr %55, align 4
  %60 = load i64, ptr %56, align 4
  %61 = load ptr, ptr %57, align 8
  %62 = load ptr, ptr %58, align 8
  %63 = load i64, ptr @Character, align 4
  %64 = call i1 @subtype_test_wrapper(ptr %61, i64 %60, i64 %59, i64 %63, i64 ptrtoint (ptr @Character to i64), ptr %62)
  store i1 %64, ptr %7, align 1
  %65 = load i1, ptr %7, align 1
  br i1 %65, label %66, label %67

66:                                               ; preds = %53
  store i32 0, ptr %.reg2mem43, align 4
  br label %82

67:                                               ; preds = %53
  %68 = load ptr, ptr %0, align 8
  %69 = getelementptr { [3 x i64], [3 x ptr] }, ptr %68, i32 0, i32 0, i32 1
  %70 = getelementptr { [3 x i64], [3 x ptr] }, ptr %68, i32 0, i32 0, i32 2
  %71 = getelementptr { [3 x i64], [3 x ptr] }, ptr %68, i32 0, i32 1, i32 0
  %72 = getelementptr { [3 x i64], [3 x ptr] }, ptr %68, i32 0, i32 1, i32 1
  %73 = load i64, ptr %69, align 4
  %74 = load i64, ptr %70, align 4
  %75 = load ptr, ptr %71, align 8
  %76 = load ptr, ptr %72, align 8
  %77 = load i64, ptr @String, align 4
  %78 = call i1 @subtype_test_wrapper(ptr %75, i64 %74, i64 %73, i64 %77, i64 ptrtoint (ptr @String to i64), ptr %76)
  store i1 %78, ptr %8, align 1
  %79 = load i1, ptr %8, align 1
  %80 = xor i1 %79, true
  %81 = zext i1 %80 to i32
  store i32 %81, ptr %.reg2mem23, align 4
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  store i32 %.reload24, ptr %.reg2mem43, align 4
  br label %82

82:                                               ; preds = %67, %66
  %.reload44 = load i32, ptr %.reg2mem43, align 4
  store i32 %.reload44, ptr %.reg2mem21, align 4
  br label %83

83:                                               ; preds = %82
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  store i32 %.reload22, ptr %.reg2mem41, align 4
  br label %85

84:                                               ; preds = %40
  store i32 0, ptr %.reg2mem41, align 4
  br label %85

85:                                               ; preds = %84, %83
  %.reload42 = load i32, ptr %.reg2mem41, align 4
  store i32 %.reload42, ptr %.reg2mem19, align 4
  br label %86

86:                                               ; preds = %85
  %.reload20 = load i32, ptr %.reg2mem19, align 4
  %87 = zext i32 %.reload20 to i64
  %88 = trunc i64 %87 to i32
  switch i32 %88, label %168 [
    i32 0, label %89
  ]

89:                                               ; preds = %86
  %90 = load ptr, ptr %0, align 8
  %91 = ptrtoint ptr %90 to i64
  %92 = icmp eq i64 %91, ptrtoint (ptr @nil_typ to i64)
  %93 = icmp eq i64 %91, 0
  %94 = or i1 %92, %93
  store i1 %94, ptr %9, align 1
  %95 = load i1, ptr %9, align 1
  br i1 %95, label %96, label %97

96:                                               ; preds = %89
  store i32 7, ptr %.reg2mem35, align 4
  br label %166

97:                                               ; preds = %89
  %98 = load ptr, ptr %0, align 8
  %99 = getelementptr { [3 x i64], [3 x ptr] }, ptr %98, i32 0, i32 0, i32 1
  %100 = getelementptr { [3 x i64], [3 x ptr] }, ptr %98, i32 0, i32 0, i32 2
  %101 = getelementptr { [3 x i64], [3 x ptr] }, ptr %98, i32 0, i32 1, i32 0
  %102 = getelementptr { [3 x i64], [3 x ptr] }, ptr %98, i32 0, i32 1, i32 1
  %103 = load i64, ptr %99, align 4
  %104 = load i64, ptr %100, align 4
  %105 = load ptr, ptr %101, align 8
  %106 = load ptr, ptr %102, align 8
  %107 = load i64, ptr @String, align 4
  %108 = call i1 @subtype_test_wrapper(ptr %105, i64 %104, i64 %103, i64 %107, i64 ptrtoint (ptr @String to i64), ptr %106)
  store i1 %108, ptr %10, align 1
  %109 = load i1, ptr %10, align 1
  br i1 %109, label %110, label %125

110:                                              ; preds = %97
  %111 = load ptr, ptr %0, align 8
  %112 = getelementptr { [3 x i64], [3 x ptr] }, ptr %111, i32 0, i32 0, i32 1
  %113 = getelementptr { [3 x i64], [3 x ptr] }, ptr %111, i32 0, i32 0, i32 2
  %114 = getelementptr { [3 x i64], [3 x ptr] }, ptr %111, i32 0, i32 1, i32 0
  %115 = getelementptr { [3 x i64], [3 x ptr] }, ptr %111, i32 0, i32 1, i32 1
  %116 = load i64, ptr %112, align 4
  %117 = load i64, ptr %113, align 4
  %118 = load ptr, ptr %114, align 8
  %119 = load ptr, ptr %115, align 8
  %120 = load i64, ptr @Character, align 4
  %121 = call i1 @subtype_test_wrapper(ptr %118, i64 %117, i64 %116, i64 %120, i64 ptrtoint (ptr @Character to i64), ptr %119)
  store i1 %121, ptr %11, align 1
  %122 = load i1, ptr %11, align 1
  %123 = xor i1 %122, true
  %124 = zext i1 %123 to i32
  store i32 %124, ptr %.reg2mem17, align 4
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem39, align 4
  br label %126

125:                                              ; preds = %97
  store i32 0, ptr %.reg2mem39, align 4
  br label %126

126:                                              ; preds = %125, %110
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store i32 %.reload40, ptr %.reg2mem15, align 4
  br label %127

127:                                              ; preds = %126
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  %128 = zext i32 %.reload16 to i64
  %129 = trunc i64 %128 to i32
  switch i32 %129, label %164 [
    i32 0, label %130
  ]

130:                                              ; preds = %127
  %131 = load ptr, ptr %0, align 8
  %132 = ptrtoint ptr %131 to i64
  %133 = icmp eq i64 %132, ptrtoint (ptr @i8_typ to i64)
  store i1 %133, ptr %12, align 1
  %134 = load i1, ptr %12, align 1
  %135 = select i1 %134, i32 9, i32 4
  store i32 %135, ptr %.reg2mem13, align 4
  br i1 %134, label %136, label %137

136:                                              ; preds = %130
  br label %163

137:                                              ; preds = %130
  %138 = load ptr, ptr %0, align 8
  %139 = getelementptr { [3 x i64], [3 x ptr] }, ptr %138, i32 0, i32 0, i32 1
  %140 = getelementptr { [3 x i64], [3 x ptr] }, ptr %138, i32 0, i32 0, i32 2
  %141 = getelementptr { [3 x i64], [3 x ptr] }, ptr %138, i32 0, i32 1, i32 0
  %142 = getelementptr { [3 x i64], [3 x ptr] }, ptr %138, i32 0, i32 1, i32 1
  %143 = load i64, ptr %139, align 4
  %144 = load i64, ptr %140, align 4
  %145 = load ptr, ptr %141, align 8
  %146 = load ptr, ptr %142, align 8
  %147 = load i64, ptr @Character, align 4
  %148 = call i1 @subtype_test_wrapper(ptr %145, i64 %144, i64 %143, i64 %147, i64 ptrtoint (ptr @Character to i64), ptr %146)
  store i1 %148, ptr %13, align 1
  %149 = load i1, ptr %13, align 1
  br i1 %149, label %150, label %._crit_edge

._crit_edge:                                      ; preds = %137
  br label %162

150:                                              ; preds = %137
  %151 = load ptr, ptr %0, align 8
  %152 = getelementptr { [3 x i64], [3 x ptr] }, ptr %151, i32 0, i32 0, i32 1
  %153 = getelementptr { [3 x i64], [3 x ptr] }, ptr %151, i32 0, i32 0, i32 2
  %154 = getelementptr { [3 x i64], [3 x ptr] }, ptr %151, i32 0, i32 1, i32 0
  %155 = getelementptr { [3 x i64], [3 x ptr] }, ptr %151, i32 0, i32 1, i32 1
  %156 = load i64, ptr %152, align 4
  %157 = load i64, ptr %153, align 4
  %158 = load ptr, ptr %154, align 8
  %159 = load ptr, ptr %155, align 8
  %160 = load i64, ptr @String, align 4
  %161 = call i1 @subtype_test_wrapper(ptr %158, i64 %157, i64 %156, i64 %160, i64 ptrtoint (ptr @String to i64), ptr %159)
  store i1 %161, ptr %14, align 1
  br label %162

162:                                              ; preds = %._crit_edge, %150
  br label %163

163:                                              ; preds = %162, %136
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem37, align 4
  br label %165

164:                                              ; preds = %127
  store i32 1, ptr %.reg2mem37, align 4
  br label %165

165:                                              ; preds = %164, %163
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  store i32 %.reload38, ptr %.reg2mem11, align 4
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem35, align 4
  br label %166

166:                                              ; preds = %165, %96
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload36, ptr %.reg2mem9, align 4
  br label %167

167:                                              ; preds = %166
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem33, align 4
  br label %169

168:                                              ; preds = %86
  store i32 5, ptr %.reg2mem33, align 4
  br label %169

169:                                              ; preds = %168, %167
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  store i32 %.reload34, ptr %.reg2mem7, align 4
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem31, align 4
  br label %170

170:                                              ; preds = %169, %39
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  store i32 %.reload32, ptr %.reg2mem5, align 4
  br label %171

171:                                              ; preds = %170
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem29, align 4
  br label %172

172:                                              ; preds = %171, %33
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  store i32 %.reload30, ptr %.reg2mem3, align 4
  br label %173

173:                                              ; preds = %172
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem27, align 4
  br label %174

174:                                              ; preds = %173, %27
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store i32 %.reload28, ptr %.reg2mem1, align 4
  br label %175

175:                                              ; preds = %174
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem25, align 4
  br label %176

176:                                              ; preds = %175, %21
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  store i32 %.reload26, ptr %.reg2mem, align 4
  br label %177

177:                                              ; preds = %176
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %16, align 4
  %178 = load i32, ptr %16, align 4
  %179 = getelementptr [10 x ptr], ptr @IO, i32 0, i32 %178
  %180 = getelementptr ptr, ptr %179, i32 10
  %181 = load ptr, ptr %180, align 8
  ret ptr %181
}

define void @IO__Self_print_xString(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @String)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 632, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = getelementptr ptr, ptr %26, i32 10
  %28 = load ptr, ptr %27, align 8
  %29 = alloca {}, align 8
  %30 = call ptr @behavior_wrapper(ptr %28, { ptr, ptr, ptr, i32 } %22, ptr %29)
  %31 = call { ptr } %30({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23) #17
  %32 = alloca ptr, align 8
  store { ptr } %31, ptr %32, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %33)
  ret void
}

define void @IO__Self_print_xPtri1(ptr %0, { ptr, i160 } %1) {
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [1 x ptr], align 8
  %10 = alloca i32, align 4
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca [3 x ptr], align 8
  %17 = alloca { ptr, ptr, ptr }, align 8
  %18 = alloca [0 x ptr], align 8
  %19 = alloca {}, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i32, align 4
  %22 = alloca ptr, align 8
  %23 = alloca ptr, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca [1 x ptr], align 8
  %28 = alloca i32, align 4
  %29 = alloca ptr, align 8
  %30 = alloca ptr, align 8
  %31 = alloca ptr, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca [3 x ptr], align 8
  %35 = alloca { ptr, ptr, ptr }, align 8
  %36 = alloca [0 x ptr], align 8
  %37 = alloca {}, align 8
  %38 = alloca ptr, align 8
  %39 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %39, align 8
  %40 = alloca i1, align 1
  %41 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %42 = load i1, ptr %41, align 1
  store i1 %42, ptr %40, align 1
  %43 = load i1, ptr %40, align 1
  br i1 %43, label %44, label %104

44:                                               ; preds = %2
  store i32 5, ptr %3, align 4
  %45 = load i32, ptr %3, align 4
  %46 = sext i32 %45 to i64
  %47 = mul i64 %46, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %48 = call ptr @bump_malloc(i64 %47)
  store ptr %48, ptr %4, align 8
  %49 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  store ptr %50, ptr %5, align 8
  store i32 0, ptr %6, align 4
  %51 = load ptr, ptr %5, align 8
  %52 = load i32, ptr %6, align 4
  %53 = sext i32 %52 to i64
  %54 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %53
  %55 = getelementptr i8, ptr %51, i64 %54
  %56 = load <4 x i8>, ptr @jdcjo_true, align 4
  store <4 x i8> %56, ptr %55, align 4
  store i32 4, ptr %7, align 4
  store i32 5, ptr %8, align 4
  store ptr @String, ptr %9, align 8
  %57 = load ptr, ptr %9, align 8
  %58 = getelementptr ptr, ptr %57, i32 6
  %59 = load ptr, ptr %58, align 8
  %60 = call { i64, i64 } @size_wrapper(ptr %59, ptr %9)
  %61 = extractvalue { i64, i64 } %60, 0
  %62 = call ptr @bump_malloc(i64 %61)
  store ptr @String, ptr %13, align 8
  store ptr %62, ptr %12, align 8
  store i32 10, ptr %10, align 4
  store i32 4, ptr %14, align 4
  store i32 5, ptr %15, align 4
  %63 = load ptr, ptr %5, align 8
  %64 = insertvalue { ptr } undef, ptr %63, 0
  %65 = load i32, ptr %14, align 4
  %66 = load i32, ptr %15, align 4
  %67 = load ptr, ptr %13, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = load ptr, ptr %12, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %69, 1
  %71 = load ptr, ptr %11, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %71, 2
  %73 = load i32, ptr %10, align 4
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %73, 3
  %75 = getelementptr [3 x ptr], ptr %16, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %75, align 8
  %76 = getelementptr [3 x ptr], ptr %16, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %76, align 8
  %77 = getelementptr [3 x ptr], ptr %16, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %77, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 9, ptr %16)
  %79 = call ptr @llvm.invariant.start.p0(i64 632, ptr %67)
  %80 = getelementptr ptr, ptr %67, i32 %73
  %81 = getelementptr ptr, ptr %80, i32 6
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 0
  store ptr @buffer_typ, ptr %83, align 8
  %84 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 1
  store ptr @i32_typ, ptr %84, align 8
  %85 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 2
  store ptr @i32_typ, ptr %85, align 8
  %86 = call ptr @behavior_wrapper(ptr %82, { ptr, ptr, ptr, i32 } %74, ptr %17)
  call void %86({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr %16, { ptr } %64, i32 %65, i32 %66) #17
  %87 = load ptr, ptr %13, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %12, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %11, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %10, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr %18)
  %96 = call ptr @llvm.invariant.start.p0(i64 632, ptr %87)
  %97 = getelementptr ptr, ptr %87, i32 %93
  %98 = getelementptr ptr, ptr %97, i32 10
  %99 = load ptr, ptr %98, align 8
  %100 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %94, ptr %19)
  %101 = call { ptr } %100({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %18) #17
  store { ptr } %101, ptr %20, align 8
  %102 = load ptr, ptr %20, align 8
  %103 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %102)
  br label %164

104:                                              ; preds = %2
  store i32 6, ptr %21, align 4
  %105 = load i32, ptr %21, align 4
  %106 = sext i32 %105 to i64
  %107 = mul i64 %106, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %108 = call ptr @bump_malloc(i64 %107)
  store ptr %108, ptr %22, align 8
  %109 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  store ptr %110, ptr %23, align 8
  store i32 0, ptr %24, align 4
  %111 = load ptr, ptr %23, align 8
  %112 = load i32, ptr %24, align 4
  %113 = sext i32 %112 to i64
  %114 = mul i64 ptrtoint (ptr getelementptr ([5 x i8], ptr null, i32 1) to i64), %113
  %115 = getelementptr i8, ptr %111, i64 %114
  %116 = load <5 x i8>, ptr @fszmx_false, align 8
  store <5 x i8> %116, ptr %115, align 8
  store i32 5, ptr %25, align 4
  store i32 6, ptr %26, align 4
  store ptr @String, ptr %27, align 8
  %117 = load ptr, ptr %27, align 8
  %118 = getelementptr ptr, ptr %117, i32 6
  %119 = load ptr, ptr %118, align 8
  %120 = call { i64, i64 } @size_wrapper(ptr %119, ptr %27)
  %121 = extractvalue { i64, i64 } %120, 0
  %122 = call ptr @bump_malloc(i64 %121)
  store ptr @String, ptr %31, align 8
  store ptr %122, ptr %30, align 8
  store i32 10, ptr %28, align 4
  store i32 5, ptr %32, align 4
  store i32 6, ptr %33, align 4
  %123 = load ptr, ptr %23, align 8
  %124 = insertvalue { ptr } undef, ptr %123, 0
  %125 = load i32, ptr %32, align 4
  %126 = load i32, ptr %33, align 4
  %127 = load ptr, ptr %31, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %30, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %29, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %28, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  %135 = getelementptr [3 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %135, align 8
  %136 = getelementptr [3 x ptr], ptr %34, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %136, align 8
  %137 = getelementptr [3 x ptr], ptr %34, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %137, align 8
  %138 = call ptr @llvm.invariant.start.p0(i64 9, ptr %34)
  %139 = call ptr @llvm.invariant.start.p0(i64 632, ptr %127)
  %140 = getelementptr ptr, ptr %127, i32 %133
  %141 = getelementptr ptr, ptr %140, i32 6
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr }, ptr %35, i32 0, i32 0
  store ptr @buffer_typ, ptr %143, align 8
  %144 = getelementptr { ptr, ptr, ptr }, ptr %35, i32 0, i32 1
  store ptr @i32_typ, ptr %144, align 8
  %145 = getelementptr { ptr, ptr, ptr }, ptr %35, i32 0, i32 2
  store ptr @i32_typ, ptr %145, align 8
  %146 = call ptr @behavior_wrapper(ptr %142, { ptr, ptr, ptr, i32 } %134, ptr %35)
  call void %146({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr %34, { ptr } %124, i32 %125, i32 %126) #17
  %147 = load ptr, ptr %31, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %147, 0
  %149 = load ptr, ptr %30, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %149, 1
  %151 = load ptr, ptr %29, align 8
  %152 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %151, 2
  %153 = load i32, ptr %28, align 4
  %154 = insertvalue { ptr, ptr, ptr, i32 } %152, i32 %153, 3
  %155 = call ptr @llvm.invariant.start.p0(i64 0, ptr %36)
  %156 = call ptr @llvm.invariant.start.p0(i64 632, ptr %147)
  %157 = getelementptr ptr, ptr %147, i32 %153
  %158 = getelementptr ptr, ptr %157, i32 10
  %159 = load ptr, ptr %158, align 8
  %160 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %154, ptr %37)
  %161 = call { ptr } %160({ ptr, ptr, ptr, i32 } %154, { ptr, ptr, ptr, i32 } %154, ptr %36) #17
  store { ptr } %161, ptr %38, align 8
  %162 = load ptr, ptr %38, align 8
  %163 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %162)
  br label %164

164:                                              ; preds = %104, %44
  ret void
}

define void @IO__Self_print_xPtri32(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %7)
  ret void
}

define void @IO__Self_print_xCharacter(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Character)
  %11 = alloca i32, align 4
  store i32 2, ptr %11, align 4
  %12 = load i32, ptr %11, align 4
  %13 = sext i32 %12 to i64
  %14 = alloca ptr, align 8
  %15 = mul i64 %13, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %16 = call ptr @bump_malloc(i64 %15)
  store ptr %16, ptr %14, align 8
  %17 = alloca ptr, align 8
  %18 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  store ptr %19, ptr %17, align 8
  %20 = alloca i8, align 1
  store i8 0, ptr %20, align 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %22, 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %31 = load i32, ptr %30, align 4
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 %31, 3
  %33 = alloca [0 x ptr], align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr %33)
  %35 = call ptr @llvm.invariant.start.p0(i64 40, ptr %22)
  %36 = getelementptr ptr, ptr %22, i32 %31
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = alloca {}, align 8
  %40 = call ptr @behavior_wrapper(ptr %38, { ptr, ptr, ptr, i32 } %32, ptr %39)
  %41 = call i8 %40({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr %33) #17
  %42 = alloca i8, align 1
  store i8 %41, ptr %42, align 1
  %43 = alloca i32, align 4
  store i32 0, ptr %43, align 4
  %44 = load ptr, ptr %17, align 8
  %45 = load i32, ptr %43, align 4
  %46 = sext i32 %45 to i64
  %47 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %46
  %48 = getelementptr i8, ptr %44, i64 %47
  %49 = load i8, ptr %42, align 1
  store i8 %49, ptr %48, align 1
  %50 = alloca i32, align 4
  store i32 1, ptr %50, align 4
  %51 = load ptr, ptr %17, align 8
  %52 = load i32, ptr %50, align 4
  %53 = sext i32 %52 to i64
  %54 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %53
  %55 = getelementptr i8, ptr %51, i64 %54
  %56 = load i8, ptr %20, align 1
  store i8 %56, ptr %55, align 1
  %57 = load ptr, ptr %17, align 8
  %58 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %57)
  ret void
}

define void @IO__Self_print_xRepresentable(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Representable)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = load ptr, ptr %26, align 8
  %28 = alloca {}, align 8
  %29 = call ptr @behavior_wrapper(ptr %27, { ptr, ptr, ptr, i32 } %22, ptr %28)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23) #17
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %44 = load i32, ptr %42, align 4
  store i32 %44, ptr %43, align 4
  call void @set_offset(ptr %32, ptr @String)
  %45 = load ptr, ptr %34, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = load ptr, ptr %37, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 1
  %49 = load ptr, ptr %40, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 2
  %51 = load i32, ptr %43, align 4
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %51, 3
  %53 = alloca [0 x ptr], align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 0, ptr %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 632, ptr %45)
  %56 = getelementptr ptr, ptr %45, i32 %51
  %57 = getelementptr ptr, ptr %56, i32 10
  %58 = load ptr, ptr %57, align 8
  %59 = alloca {}, align 8
  %60 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %52, ptr %59)
  %61 = call { ptr } %60({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr %53) #17
  %62 = alloca ptr, align 8
  store { ptr } %61, ptr %62, align 8
  %63 = load ptr, ptr %62, align 8
  %64 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %63)
  ret void
}

define void @IO__Self_print_xPtrf64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca double, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load double, ptr %5, align 8
  store double %6, ptr %4, align 8
  %7 = load double, ptr %4, align 8
  %8 = call i32 (ptr, ...) @printf(ptr @float_string, double %7)
  ret void
}

define void @IO__Self_print_xNil(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca [0 x i8], align 1
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load [0 x i8], ptr %5, align 1
  store [0 x i8] %6, ptr %4, align 1
  %7 = alloca i32, align 4
  store i32 4, ptr %7, align 4
  %8 = load i32, ptr %7, align 4
  %9 = sext i32 %8 to i64
  %10 = alloca ptr, align 8
  %11 = mul i64 %9, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %12 = call ptr @bump_malloc(i64 %11)
  store ptr %12, ptr %10, align 8
  %13 = alloca ptr, align 8
  %14 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  store ptr %15, ptr %13, align 8
  %16 = alloca i32, align 4
  store i32 0, ptr %16, align 4
  %17 = load ptr, ptr %13, align 8
  %18 = load i32, ptr %16, align 4
  %19 = sext i32 %18 to i64
  %20 = mul i64 ptrtoint (ptr getelementptr ([3 x i8], ptr null, i32 1) to i64), %19
  %21 = getelementptr i8, ptr %17, i64 %20
  %22 = load <3 x i8>, ptr @vjnfb_nil, align 4
  store <3 x i8> %22, ptr %21, align 4
  %23 = alloca i32, align 4
  store i32 3, ptr %23, align 4
  %24 = alloca i32, align 4
  store i32 4, ptr %24, align 4
  %25 = alloca [1 x ptr], align 8
  store ptr @String, ptr %25, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr ptr, ptr %26, i32 6
  %28 = load ptr, ptr %27, align 8
  %29 = call { i64, i64 } @size_wrapper(ptr %28, ptr %25)
  %30 = extractvalue { i64, i64 } %29, 0
  %31 = call ptr @bump_malloc(i64 %30)
  %32 = alloca i32, align 4
  %33 = alloca ptr, align 8
  %34 = alloca ptr, align 8
  %35 = alloca ptr, align 8
  store ptr @String, ptr %35, align 8
  store ptr %31, ptr %34, align 8
  store i32 10, ptr %32, align 4
  %36 = alloca i32, align 4
  store i32 3, ptr %36, align 4
  %37 = alloca i32, align 4
  store i32 4, ptr %37, align 4
  %38 = load ptr, ptr %13, align 8
  %39 = insertvalue { ptr } undef, ptr %38, 0
  %40 = load i32, ptr %36, align 4
  %41 = load i32, ptr %37, align 4
  %42 = load ptr, ptr %35, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %42, 0
  %44 = load ptr, ptr %34, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %44, 1
  %46 = load ptr, ptr %33, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 2
  %48 = load i32, ptr %32, align 4
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %48, 3
  %50 = alloca [3 x ptr], align 8
  %51 = getelementptr [3 x ptr], ptr %50, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %51, align 8
  %52 = getelementptr [3 x ptr], ptr %50, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %52, align 8
  %53 = getelementptr [3 x ptr], ptr %50, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 9, ptr %50)
  %55 = call ptr @llvm.invariant.start.p0(i64 632, ptr %42)
  %56 = getelementptr ptr, ptr %42, i32 %48
  %57 = getelementptr ptr, ptr %56, i32 6
  %58 = load ptr, ptr %57, align 8
  %59 = alloca { ptr, ptr, ptr }, align 8
  %60 = getelementptr { ptr, ptr, ptr }, ptr %59, i32 0, i32 0
  store ptr @buffer_typ, ptr %60, align 8
  %61 = getelementptr { ptr, ptr, ptr }, ptr %59, i32 0, i32 1
  store ptr @i32_typ, ptr %61, align 8
  %62 = getelementptr { ptr, ptr, ptr }, ptr %59, i32 0, i32 2
  store ptr @i32_typ, ptr %62, align 8
  %63 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %49, ptr %59)
  call void %63({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr %50, { ptr } %39, i32 %40, i32 %41) #17
  %64 = load ptr, ptr %35, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = load ptr, ptr %34, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 1
  %68 = load ptr, ptr %33, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 2
  %70 = load i32, ptr %32, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = alloca [0 x ptr], align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr %72)
  %74 = call ptr @llvm.invariant.start.p0(i64 632, ptr %64)
  %75 = getelementptr ptr, ptr %64, i32 %70
  %76 = getelementptr ptr, ptr %75, i32 10
  %77 = load ptr, ptr %76, align 8
  %78 = alloca {}, align 8
  %79 = call ptr @behavior_wrapper(ptr %77, { ptr, ptr, ptr, i32 } %71, ptr %78)
  %80 = call { ptr } %79({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %72) #17
  %81 = alloca ptr, align 8
  store { ptr } %80, ptr %81, align 8
  %82 = load ptr, ptr %81, align 8
  %83 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %82)
  ret void
}

define void @IO__Self_print_xPtri64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i64, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i64, ptr %5, align 4
  store i64 %6, ptr %4, align 4
  %7 = load i64, ptr %4, align 4
  %8 = call i32 (ptr, ...) @printf(ptr @i64_string, i64 %7)
  ret void
}

define void @IO__Self_print_xPtri8(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i8, align 1
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i8, ptr %5, align 1
  store i8 %6, ptr %4, align 1
  %7 = load i8, ptr %4, align 1
  %8 = sext i8 %7 to i32
  %9 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %8)
  ret void
}

define { i64, i64 } @_data_size_Blocking(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Blocking_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 1, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [2 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Blocking_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Blocking)
  ret void
}

define { i64, i64 } @_data_size_Channel(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @Channel_field_Channel_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Channel_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 5, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Channel_B_get_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Channel_B_put_new_valueT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 7, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [8 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @Channel_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Channel)
  %18 = alloca [0 x i8], align 1
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = load [0 x i8], ptr %18, align 1
  store [0 x i8] %21, ptr %19, align 1
  store ptr @nil_typ, ptr %20, align 8
  %22 = load ptr, ptr %10, align 8
  %23 = load ptr, ptr %5, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 64, ptr %23)
  %25 = load i32, ptr %16, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %20, align 8
  %32 = insertvalue { ptr, i160 } undef, ptr %31, 0
  %33 = load i160, ptr %19, align 4
  %34 = insertvalue { ptr, i160 } %32, i160 %33, 1
  call void %30(ptr %22, { ptr, i160 } %34) #15
  ret void
}

define { ptr, i160 } @Channel_get_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca { ptr, i160 }, align 8
  %6 = alloca i1, align 1
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca [0 x i8], align 1
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca [0 x ptr], align 8
  %17 = alloca {}, align 8
  %18 = alloca { ptr, i160 }, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem20 = alloca { ptr, i160 }, align 8
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem24 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  store ptr %25, ptr %.reg2mem15, align 8
  %26 = load ptr, ptr %24, align 8
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  store ptr %26, ptr %.reload19, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr %31, ptr %.reg2mem10, align 8
  %32 = load i32, ptr %30, align 4
  %.reload14 = load ptr, ptr %.reg2mem10, align 8
  store i32 %32, ptr %.reload14, align 4
  call void @set_offset(ptr %20, ptr @Channel)
  br label %33

33:                                               ; preds = %102, %3
  store i1 true, ptr %4, align 1
  %34 = load i1, ptr %4, align 1
  br i1 %34, label %35, label %98

35:                                               ; preds = %33
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %36 = load ptr, ptr %.reload18, align 8
  %37 = load ptr, ptr %20, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 64, ptr %37)
  %.reload13 = load ptr, ptr %.reg2mem10, align 8
  %39 = load i32, ptr %.reload13, align 4
  %40 = getelementptr ptr, ptr %37, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = call { ptr, i160 } %44(ptr %36) #16
  store { ptr, i160 } %45, ptr %5, align 8
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %46 = load ptr, ptr %.reload17, align 8
  %47 = load ptr, ptr %20, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 64, ptr %47)
  %.reload12 = load ptr, ptr %.reg2mem10, align 8
  %49 = load i32, ptr %.reload12, align 4
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = load ptr, ptr %50, align 8
  %52 = call ptr @typegetter_wrapper(ptr %51, ptr %46)
  %53 = load ptr, ptr %5, align 8
  %54 = ptrtoint ptr %53 to i64
  %55 = icmp eq i64 %54, ptrtoint (ptr @nil_typ to i64)
  %56 = icmp eq i64 %54, 0
  %57 = or i1 %55, %56
  %58 = icmp eq i1 %57, false
  store i1 %58, ptr %6, align 1
  %59 = load i1, ptr %6, align 1
  %60 = zext i1 %59 to i32
  store i32 %60, ptr %.reg2mem8, align 4
  %61 = xor i1 %59, true
  %62 = zext i1 %61 to i32
  store i32 %62, ptr %.reg2mem6, align 4
  br i1 %59, label %63, label %64

63:                                               ; preds = %35
  br label %97

64:                                               ; preds = %35
  store ptr @Blocking, ptr %14, align 8
  %65 = load ptr, ptr %14, align 8
  %66 = getelementptr ptr, ptr %65, i32 6
  %67 = load ptr, ptr %66, align 8
  %68 = call { i64, i64 } @size_wrapper(ptr %67, ptr %14)
  %69 = extractvalue { i64, i64 } %68, 0
  %70 = call ptr @bump_malloc(i64 %69)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr @Blocking, ptr %15, align 8
  store ptr %70, ptr %71, align 8
  store i32 10, ptr %72, align 4
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = load ptr, ptr %71, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %76, 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 2
  %81 = load i32, ptr %72, align 4
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %81, 3
  %83 = call ptr @llvm.invariant.start.p0(i64 0, ptr %16)
  %84 = call ptr @llvm.invariant.start.p0(i64 16, ptr %74)
  %85 = getelementptr ptr, ptr %74, i32 %81
  %86 = load ptr, ptr %85, align 8
  %87 = call ptr @behavior_wrapper(ptr %86, { ptr, ptr, ptr, i32 } %82, ptr %17)
  call void %87({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr %16) #17
  %88 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, i160 } undef, ptr %89, 0
  %91 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 1
  %92 = load i160, ptr %91, align 4
  %93 = insertvalue { ptr, i160 } %90, i160 %92, 1
  %94 = call ptr @get_current_coroutine()
  %95 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %94, i32 0, i32 4
  store { ptr, i160 } %93, ptr %95, align 8
  call void @coroutine_yield(ptr %94)
  %96 = load { ptr, i160 }, ptr %95, align 8
  store { ptr, i160 } %96, ptr %18, align 8
  br label %97

97:                                               ; preds = %64, %63
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  store i32 %.reload7, ptr %.reg2mem22, align 4
  store i32 %.reload9, ptr %.reg2mem24, align 4
  br label %99

98:                                               ; preds = %33
  store i32 0, ptr %.reg2mem22, align 4
  store i32 2, ptr %.reg2mem24, align 4
  br label %99

99:                                               ; preds = %98, %97
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  store i32 %.reload25, ptr %.reg2mem3, align 4
  store i32 %.reload23, ptr %.reg2mem1, align 4
  br label %100

100:                                              ; preds = %99
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %101 = trunc i32 %.reload2 to i1
  %.reload5 = load i32, ptr %.reg2mem3, align 4
  br i1 %101, label %102, label %103

102:                                              ; preds = %100
  br label %33

103:                                              ; preds = %100
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %104 = zext i32 %.reload4 to i64
  %105 = trunc i64 %104 to i32
  switch i32 %105, label %131 [
    i32 1, label %106
  ]

106:                                              ; preds = %103
  %107 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  store ptr %108, ptr %8, align 8
  %109 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %110 = load i160, ptr %109, align 4
  store i160 %110, ptr %7, align 4
  %111 = load [0 x i8], ptr %9, align 1
  store [0 x i8] %111, ptr %10, align 1
  store ptr @nil_typ, ptr %11, align 8
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %112 = load ptr, ptr %.reload16, align 8
  %113 = load ptr, ptr %20, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 64, ptr %113)
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %115 = load i32, ptr %.reload11, align 4
  %116 = getelementptr ptr, ptr %113, i32 %115
  %117 = getelementptr ptr, ptr %116, i32 1
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = load ptr, ptr %11, align 8
  %122 = insertvalue { ptr, i160 } undef, ptr %121, 0
  %123 = load i160, ptr %10, align 4
  %124 = insertvalue { ptr, i160 } %122, i160 %123, 1
  call void %120(ptr %112, { ptr, i160 } %124) #15
  %125 = load ptr, ptr %8, align 8
  store ptr %125, ptr %13, align 8
  %126 = load i160, ptr %7, align 4
  store i160 %126, ptr %12, align 4
  %127 = load ptr, ptr %13, align 8
  %128 = insertvalue { ptr, i160 } undef, ptr %127, 0
  %129 = load i160, ptr %12, align 4
  %130 = insertvalue { ptr, i160 } %128, i160 %129, 1
  store { ptr, i160 } %130, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem20, align 8
  br label %132

131:                                              ; preds = %103
  store { ptr, i160 } poison, ptr %.reg2mem20, align 8
  br label %132

132:                                              ; preds = %131, %106
  %.reload21 = load { ptr, i160 }, ptr %.reg2mem20, align 8
  ret { ptr, i160 } %.reload21
}

define void @Channel_put_new_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca i1, align 1
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [0 x ptr], align 8
  %11 = alloca {}, align 8
  %12 = alloca { ptr, i160 }, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  store ptr %20, ptr %.reg2mem9, align 8
  %21 = load ptr, ptr %19, align 8
  %.reload14 = load ptr, ptr %.reg2mem9, align 8
  store ptr %21, ptr %.reload14, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr %26, ptr %.reg2mem3, align 8
  %27 = load i32, ptr %25, align 4
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  store i32 %27, ptr %.reload8, align 4
  call void @set_offset(ptr %15, ptr @Channel)
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %28, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  store ptr %32, ptr %30, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %33, align 4
  store i160 %34, ptr %29, align 4
  %.reload13 = load ptr, ptr %.reg2mem9, align 8
  %35 = load ptr, ptr %.reload13, align 8
  %36 = load ptr, ptr %15, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 64, ptr %36)
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %38 = load i32, ptr %.reload7, align 4
  %39 = getelementptr ptr, ptr %36, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call { ptr, i160 } %43(ptr %35) #16
  %45 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %44, ptr %45, align 8
  br label %46

46:                                               ; preds = %._crit_edge1, %4
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %47 = load ptr, ptr %.reload12, align 8
  %48 = load ptr, ptr %15, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 64, ptr %48)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %50 = load i32, ptr %.reload6, align 4
  %51 = getelementptr ptr, ptr %48, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %47)
  %54 = load ptr, ptr %45, align 8
  %55 = ptrtoint ptr %54 to i64
  %56 = icmp eq i64 %55, ptrtoint (ptr @nil_typ to i64)
  %57 = icmp eq i64 %55, 0
  %58 = or i1 %56, %57
  %59 = icmp eq i1 %58, false
  store i1 %59, ptr %5, align 1
  %60 = load i1, ptr %5, align 1
  store i1 %60, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %61, label %._crit_edge

._crit_edge:                                      ; preds = %46
  br label %112

61:                                               ; preds = %46
  %62 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 0
  %63 = load ptr, ptr %62, align 8
  store ptr %63, ptr %7, align 8
  %64 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 1
  %65 = load i160, ptr %64, align 4
  store i160 %65, ptr %6, align 4
  store ptr @Blocking, ptr %8, align 8
  %66 = load ptr, ptr %8, align 8
  %67 = getelementptr ptr, ptr %66, i32 6
  %68 = load ptr, ptr %67, align 8
  %69 = call { i64, i64 } @size_wrapper(ptr %68, ptr %8)
  %70 = extractvalue { i64, i64 } %69, 0
  %71 = call ptr @bump_malloc(i64 %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  store ptr @Blocking, ptr %9, align 8
  store ptr %71, ptr %72, align 8
  store i32 10, ptr %73, align 4
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = load ptr, ptr %72, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 2
  %82 = load i32, ptr %73, align 4
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = call ptr @llvm.invariant.start.p0(i64 0, ptr %10)
  %85 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %86 = getelementptr ptr, ptr %75, i32 %82
  %87 = load ptr, ptr %86, align 8
  %88 = call ptr @behavior_wrapper(ptr %87, { ptr, ptr, ptr, i32 } %83, ptr %11)
  call void %88({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr %10) #17
  %89 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, i160 } undef, ptr %90, 0
  %92 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %93 = load i160, ptr %92, align 4
  %94 = insertvalue { ptr, i160 } %91, i160 %93, 1
  %95 = call ptr @get_current_coroutine()
  %96 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %95, i32 0, i32 4
  store { ptr, i160 } %94, ptr %96, align 8
  call void @coroutine_yield(ptr %95)
  %97 = load { ptr, i160 }, ptr %96, align 8
  store { ptr, i160 } %97, ptr %12, align 8
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %98 = load ptr, ptr %.reload11, align 8
  %99 = load ptr, ptr %15, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 64, ptr %99)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %101 = load i32, ptr %.reload5, align 4
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = call { ptr, i160 } %106(ptr %98) #16
  store { ptr, i160 } %107, ptr %13, align 8
  %108 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  store ptr %109, ptr %62, align 8
  %110 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 1
  %111 = load i160, ptr %110, align 4
  store i160 %111, ptr %64, align 4
  br label %112

112:                                              ; preds = %._crit_edge, %61
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %113

._crit_edge1:                                     ; preds = %112
  br label %46

113:                                              ; preds = %112
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %114 = load ptr, ptr %.reload10, align 8
  %115 = load ptr, ptr %15, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 64, ptr %115)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %117 = load i32, ptr %.reload4, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 1
  %122 = load ptr, ptr %121, align 8
  %123 = load ptr, ptr %30, align 8
  %124 = insertvalue { ptr, i160 } undef, ptr %123, 0
  %125 = load i160, ptr %29, align 4
  %126 = insertvalue { ptr, i160 } %124, i160 %125, 1
  call void %122(ptr %114, { ptr, i160 } %126) #15
  ret void
}

define { ptr, i160 } @Channel_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, i160 } undef, ptr %9, 0
  %11 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %12 = load i160, ptr %11, align 4
  %13 = insertvalue { ptr, i160 } %10, i160 %12, 1
  ret { ptr, i160 } %13
}

define void @Channel_setter_value(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %15 = load i160, ptr %13, align 4
  store i160 %15, ptr %14, align 4
  ret void
}

define { i64, i64 } @_data_size_Array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @Array_field_Array_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Array_B__Self_from_iterable_iterableIterableT(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 1
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 2
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 0
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 1
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @Iterable, align 4
  %15 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 ptrtoint (ptr @Iterable to i64), ptr %13)
  store i1 %15, ptr %2, align 1
  store i32 31, ptr %4, align 4
  %16 = load i32, ptr %4, align 4
  %17 = getelementptr [83 x ptr], ptr @Array, i32 0, i32 %16
  %18 = getelementptr ptr, ptr %17, i32 10
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 32, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [83 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 33, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_init_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @i32_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 34, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [83 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_init_bufferBufferT_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @buffer_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @i32_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 35, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [83 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 36, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [83 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 37, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [83 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 38, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Array, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Array to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 39, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_reserve_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 40, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 41, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B__set_index_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 1
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 2
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 0
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 1
  %16 = load i64, ptr %12, align 4
  %17 = load i64, ptr %13, align 4
  %18 = load ptr, ptr %14, align 8
  %19 = load ptr, ptr %15, align 8
  %20 = load i64, ptr @any_typ, align 4
  %21 = call i1 @subtype_test_wrapper(ptr %18, i64 %17, i64 %16, i64 %20, i64 ptrtoint (ptr @any_typ to i64), ptr %19)
  store i1 %21, ptr %3, align 1
  store i32 42, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [83 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Array_B_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 43, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_unchecked_index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 44, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_unchecked_insert_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 1
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 2
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 0
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 1
  %16 = load i64, ptr %12, align 4
  %17 = load i64, ptr %13, align 4
  %18 = load ptr, ptr %14, align 8
  %19 = load ptr, ptr %15, align 8
  %20 = load i64, ptr @any_typ, align 4
  %21 = call i1 @subtype_test_wrapper(ptr %18, i64 %17, i64 %16, i64 %20, i64 ptrtoint (ptr @any_typ to i64), ptr %19)
  store i1 %21, ptr %3, align 1
  store i32 45, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [83 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 46, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [83 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 47, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 48, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [83 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Array_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 49, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 50, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 51, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 52, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [83 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 53, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 54, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 55, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 56, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [83 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 57, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [83 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterableT(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca { ptr, i160 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca i1, align 1
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %34, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %34, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 664, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %44, align 8
  %45 = getelementptr ptr, ptr %44, i32 1
  store ptr %43, ptr %45, align 8
  %46 = load ptr, ptr %44, align 8
  %47 = getelementptr ptr, ptr %46, i32 6
  %48 = load ptr, ptr %47, align 8
  %49 = call { i64, i64 } @size_wrapper(ptr %48, ptr %44)
  %50 = extractvalue { i64, i64 } %49, 0
  %51 = call ptr @bump_malloc(i64 %50)
  store ptr %43, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 8, ptr %51)
  %53 = alloca i32, align 4
  %54 = alloca ptr, align 8
  %55 = alloca ptr, align 8
  %56 = alloca ptr, align 8
  store ptr @Array, ptr %56, align 8
  store ptr %51, ptr %55, align 8
  store i32 10, ptr %53, align 4
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = load ptr, ptr %55, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 1
  %61 = load ptr, ptr %54, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 2
  %63 = load i32, ptr %53, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %63, 3
  %65 = alloca [0 x ptr], align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr %65)
  %67 = call ptr @llvm.invariant.start.p0(i64 664, ptr %57)
  %68 = getelementptr ptr, ptr %57, i32 %63
  %69 = getelementptr ptr, ptr %68, i32 5
  %70 = load ptr, ptr %69, align 8
  %71 = alloca {}, align 8
  %72 = call ptr @behavior_wrapper(ptr %70, { ptr, ptr, ptr, i32 } %64, ptr %71)
  call void %72({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %65) #17
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %56, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %55, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %54, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %53, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @Array)
  %82 = alloca i32, align 4
  %83 = alloca ptr, align 8
  %84 = alloca ptr, align 8
  %85 = alloca ptr, align 8
  %86 = load ptr, ptr %74, align 8
  store ptr %86, ptr %85, align 8
  %87 = load ptr, ptr %76, align 8
  store ptr %87, ptr %84, align 8
  %88 = load ptr, ptr %78, align 8
  store ptr %88, ptr %83, align 8
  %89 = load i32, ptr %80, align 4
  store i32 %89, ptr %82, align 4
  %90 = load ptr, ptr %23, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = load ptr, ptr %26, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %92, 1
  %94 = load ptr, ptr %29, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 2
  %96 = load i32, ptr %32, align 4
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %96, 3
  %98 = alloca [0 x ptr], align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 0, ptr %98)
  %100 = call ptr @llvm.invariant.start.p0(i64 184, ptr %90)
  %101 = getelementptr ptr, ptr %90, i32 %96
  %102 = getelementptr ptr, ptr %101, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = alloca {}, align 8
  %105 = call ptr @behavior_wrapper(ptr %103, { ptr, ptr, ptr, i32 } %97, ptr %104)
  %106 = call { ptr, ptr, ptr, i32 } %105({ ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %97, ptr %98) #17
  %107 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %106, ptr %107, align 8
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 0
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %114 = load ptr, ptr %112, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 2
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %117 = load ptr, ptr %115, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 3
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %120 = load i32, ptr %118, align 4
  store i32 %120, ptr %119, align 4
  call void @set_offset(ptr %108, ptr @Iterator)
  %121 = alloca { ptr, ptr, ptr, i32 }, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 0
  %123 = load ptr, ptr %110, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 1
  %125 = load ptr, ptr %113, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 2
  %127 = load ptr, ptr %116, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 3
  %129 = load i32, ptr %119, align 4
  store i32 %129, ptr %128, align 4
  call void @set_offset(ptr %121, ptr @Iterator)
  %130 = alloca i32, align 4
  %131 = alloca ptr, align 8
  %132 = alloca ptr, align 8
  %133 = alloca ptr, align 8
  %134 = load ptr, ptr %122, align 8
  store ptr %134, ptr %133, align 8
  %135 = load ptr, ptr %124, align 8
  store ptr %135, ptr %132, align 8
  %136 = load ptr, ptr %126, align 8
  store ptr %136, ptr %131, align 8
  %137 = load i32, ptr %128, align 4
  store i32 %137, ptr %130, align 4
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  store ptr %138, ptr %.reg2mem5, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr %139, ptr %.reg2mem3, align 8
  br label %140

140:                                              ; preds = %._crit_edge1, %2
  %141 = load ptr, ptr %133, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = load ptr, ptr %132, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %143, 1
  %145 = load ptr, ptr %131, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %145, 2
  %147 = load i32, ptr %130, align 4
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, i32 %147, 3
  %149 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %150 = call ptr @llvm.invariant.start.p0(i64 24, ptr %141)
  %151 = getelementptr ptr, ptr %141, i32 %147
  %152 = getelementptr ptr, ptr %151, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = call ptr @behavior_wrapper(ptr %153, { ptr, ptr, ptr, i32 } %148, ptr %4)
  %155 = call { ptr, i160 } %154({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr %3) #17
  store { ptr, i160 } %155, ptr %5, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %6, align 8
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %156 = load ptr, ptr %.reload6, align 8
  %157 = load ptr, ptr %6, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 664, ptr %157)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %159 = load i32, ptr %.reload4, align 4
  %160 = getelementptr ptr, ptr %157, i32 %159
  %161 = load ptr, ptr %160, align 8
  %162 = call ptr @typegetter_wrapper(ptr %161, ptr %156)
  %163 = load ptr, ptr %5, align 8
  %164 = ptrtoint ptr %163 to i64
  %165 = icmp eq i64 %164, ptrtoint (ptr @nil_typ to i64)
  %166 = icmp eq i64 %164, 0
  %167 = or i1 %165, %166
  %168 = icmp eq i1 %167, false
  store i1 %168, ptr %7, align 1
  %169 = load i1, ptr %7, align 1
  store i1 %169, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %170, label %._crit_edge

._crit_edge:                                      ; preds = %140
  br label %223

170:                                              ; preds = %140
  %171 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %172 = load ptr, ptr %171, align 8
  store ptr %172, ptr %9, align 8
  %173 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %174 = load i160, ptr %173, align 4
  store i160 %174, ptr %8, align 4
  %175 = load ptr, ptr %9, align 8
  store ptr %175, ptr %11, align 8
  %176 = load i160, ptr %8, align 4
  store i160 %176, ptr %10, align 4
  %177 = load ptr, ptr %11, align 8
  %178 = insertvalue { ptr, i160 } undef, ptr %177, 0
  %179 = load i160, ptr %10, align 4
  %180 = insertvalue { ptr, i160 } %178, i160 %179, 1
  %181 = load ptr, ptr %85, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = load ptr, ptr %84, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %183, 1
  %185 = load ptr, ptr %83, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %185, 2
  %187 = load i32, ptr %82, align 4
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, i32 %187, 3
  store { ptr, ptr, ptr, i32 } %1, ptr %12, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %190 = load ptr, ptr %189, align 8
  %191 = load ptr, ptr %12, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 664, ptr %191)
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %194 = load i32, ptr %193, align 4
  %195 = getelementptr ptr, ptr %191, i32 %194
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr @typegetter_wrapper(ptr %196, ptr %190)
  %198 = getelementptr [1 x ptr], ptr %13, i32 0, i32 0
  store ptr %197, ptr %198, align 8
  %199 = call ptr @llvm.invariant.start.p0(i64 1, ptr %13)
  %200 = call ptr @llvm.invariant.start.p0(i64 664, ptr %181)
  %201 = getelementptr ptr, ptr %181, i32 %187
  %202 = getelementptr ptr, ptr %201, i32 11
  %203 = load ptr, ptr %202, align 8
  %204 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  store ptr %177, ptr %204, align 8
  %205 = call ptr @behavior_wrapper(ptr %203, { ptr, ptr, ptr, i32 } %188, ptr %14)
  %206 = call { ptr, ptr, ptr, i32 } %205({ ptr, ptr, ptr, i32 } %188, { ptr, ptr, ptr, i32 } %188, ptr %13, { ptr, i160 } %180) #17
  store { ptr, ptr, ptr, i32 } %206, ptr %15, align 8
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %209 = load ptr, ptr %207, align 8
  store ptr %209, ptr %208, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %218 = load i32, ptr %216, align 4
  store i32 %218, ptr %217, align 4
  call void @set_offset(ptr %16, ptr @Array)
  %219 = load ptr, ptr %9, align 8
  store ptr %219, ptr %18, align 8
  %220 = load i160, ptr %8, align 4
  store i160 %220, ptr %17, align 4
  %221 = load ptr, ptr %18, align 8
  store ptr %221, ptr %171, align 8
  %222 = load i160, ptr %17, align 4
  store i160 %222, ptr %173, align 4
  br label %223

223:                                              ; preds = %._crit_edge, %170
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %224

._crit_edge1:                                     ; preds = %223
  br label %140

224:                                              ; preds = %223
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %226 = load ptr, ptr %85, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %228 = load ptr, ptr %84, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %230 = load ptr, ptr %83, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %232 = load i32, ptr %82, align 4
  store i32 %232, ptr %231, align 4
  call void @set_offset(ptr %19, ptr @Array)
  %233 = load ptr, ptr %225, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %233, 0
  %235 = load ptr, ptr %227, align 8
  %236 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %235, 1
  %237 = load ptr, ptr %229, align 8
  %238 = insertvalue { ptr, ptr, ptr, i32 } %236, ptr %237, 2
  %239 = load i32, ptr %231, align 4
  %240 = insertvalue { ptr, ptr, ptr, i32 } %238, i32 %239, 3
  ret { ptr, ptr, ptr, i32 } %240
}

define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = alloca i32, align 4
  store i32 1, ptr %18, align 4
  %19 = load ptr, ptr %10, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 664, ptr %20)
  %22 = load i32, ptr %16, align 4
  %23 = getelementptr ptr, ptr %20, i32 %22
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %19)
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr ptr, ptr %26, i32 9
  %28 = load ptr, ptr %27, align 8
  %29 = call { i64, i64 } @size_wrapper(ptr %28, ptr %25)
  %30 = extractvalue { i64, i64 } %29, 0
  %31 = load i32, ptr %18, align 4
  %32 = sext i32 %31 to i64
  %33 = alloca ptr, align 8
  %34 = mul i64 %32, %30
  %35 = call ptr @bump_malloc(i64 %34)
  store ptr %35, ptr %33, align 8
  %36 = load ptr, ptr %10, align 8
  %37 = load ptr, ptr %5, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 664, ptr %37)
  %39 = load i32, ptr %16, align 4
  %40 = getelementptr ptr, ptr %37, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr { ptr }, ptr %33, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr } undef, ptr %46, 0
  call void %44(ptr %36, { ptr } %47) #15
  %48 = alloca i32, align 4
  store i32 0, ptr %48, align 4
  %49 = load ptr, ptr %10, align 8
  %50 = load ptr, ptr %5, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 664, ptr %50)
  %52 = load i32, ptr %16, align 4
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = load i32, ptr %48, align 4
  call void %57(ptr %49, i32 %58) #15
  %59 = alloca i32, align 4
  store i32 1, ptr %59, align 4
  %60 = load ptr, ptr %10, align 8
  %61 = load ptr, ptr %5, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 664, ptr %61)
  %63 = load i32, ptr %16, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 3
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load i32, ptr %59, align 4
  call void %68(ptr %60, i32 %69) #15
  ret void
}

define void @Array_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 664, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 3
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %19, align 4
  call void %28(ptr %20, i32 %29) #15
  %30 = load ptr, ptr %11, align 8
  %31 = load ptr, ptr %6, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 664, ptr %31)
  %33 = load i32, ptr %17, align 4
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 3
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %30) #16
  %40 = alloca i32, align 4
  store i32 %39, ptr %40, align 4
  %41 = load ptr, ptr %11, align 8
  %42 = load ptr, ptr %6, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 664, ptr %42)
  %44 = load i32, ptr %17, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = load ptr, ptr %45, align 8
  %47 = call ptr @typegetter_wrapper(ptr %46, ptr %41)
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr ptr, ptr %48, i32 9
  %50 = load ptr, ptr %49, align 8
  %51 = call { i64, i64 } @size_wrapper(ptr %50, ptr %47)
  %52 = extractvalue { i64, i64 } %51, 0
  %53 = load i32, ptr %40, align 4
  %54 = sext i32 %53 to i64
  %55 = alloca ptr, align 8
  %56 = mul i64 %54, %52
  %57 = call ptr @bump_malloc(i64 %56)
  store ptr %57, ptr %55, align 8
  %58 = load ptr, ptr %11, align 8
  %59 = load ptr, ptr %6, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 664, ptr %59)
  %61 = load i32, ptr %17, align 4
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr } undef, ptr %68, 0
  call void %66(ptr %58, { ptr } %69) #15
  %70 = alloca i32, align 4
  store i32 0, ptr %70, align 4
  %71 = load ptr, ptr %11, align 8
  %72 = load ptr, ptr %6, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 664, ptr %72)
  %74 = load i32, ptr %17, align 4
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr }, ptr %77, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load i32, ptr %70, align 4
  call void %79(ptr %71, i32 %80) #15
  ret void
}

define void @Array_init_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 664, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load i32, ptr %20, align 4
  call void %29(ptr %21, i32 %30) #15
  %31 = alloca i32, align 4
  store i32 %4, ptr %31, align 4
  %32 = load ptr, ptr %12, align 8
  %33 = load ptr, ptr %7, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 664, ptr %33)
  %35 = load i32, ptr %18, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 3
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = load i32, ptr %31, align 4
  call void %40(ptr %32, i32 %41) #15
  %42 = load ptr, ptr %12, align 8
  %43 = load ptr, ptr %7, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 664, ptr %43)
  %45 = load i32, ptr %18, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 3
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = call i32 %50(ptr %42) #16
  %52 = alloca i32, align 4
  store i32 %51, ptr %52, align 4
  %53 = load ptr, ptr %12, align 8
  %54 = load ptr, ptr %7, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 664, ptr %54)
  %56 = load i32, ptr %18, align 4
  %57 = getelementptr ptr, ptr %54, i32 %56
  %58 = load ptr, ptr %57, align 8
  %59 = call ptr @typegetter_wrapper(ptr %58, ptr %53)
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr ptr, ptr %60, i32 9
  %62 = load ptr, ptr %61, align 8
  %63 = call { i64, i64 } @size_wrapper(ptr %62, ptr %59)
  %64 = extractvalue { i64, i64 } %63, 0
  %65 = load i32, ptr %52, align 4
  %66 = sext i32 %65 to i64
  %67 = alloca ptr, align 8
  %68 = mul i64 %66, %64
  %69 = call ptr @bump_malloc(i64 %68)
  store ptr %69, ptr %67, align 8
  %70 = load ptr, ptr %12, align 8
  %71 = load ptr, ptr %7, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 664, ptr %71)
  %73 = load i32, ptr %18, align 4
  %74 = getelementptr ptr, ptr %71, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr }, ptr %67, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr } undef, ptr %80, 0
  call void %78(ptr %70, { ptr } %81) #15
  ret void
}

define void @Array_init_bufferBufferT_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Array)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 664, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %21, align 8
  %32 = insertvalue { ptr } undef, ptr %31, 0
  call void %30(ptr %22, { ptr } %32) #15
  %33 = alloca i32, align 4
  store i32 %4, ptr %33, align 4
  %34 = load ptr, ptr %13, align 8
  %35 = load ptr, ptr %8, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 664, ptr %35)
  %37 = load i32, ptr %19, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load i32, ptr %33, align 4
  call void %42(ptr %34, i32 %43) #15
  %44 = alloca i32, align 4
  store i32 %5, ptr %44, align 4
  %45 = load ptr, ptr %13, align 8
  %46 = load ptr, ptr %8, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 664, ptr %46)
  %48 = load i32, ptr %19, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 3
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = load i32, ptr %44, align 4
  call void %53(ptr %45, i32 %54) #15
  ret void
}

define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 664, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #16
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 664, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #16
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem27 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  store ptr %21, ptr %.reg2mem27, align 8
  %22 = load ptr, ptr %20, align 8
  %.reload30 = load ptr, ptr %.reg2mem27, align 8
  store ptr %22, ptr %.reload30, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem15, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload26 = load ptr, ptr %.reg2mem15, align 8
  store ptr %25, ptr %.reload26, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  store ptr %27, ptr %.reg2mem11, align 8
  %28 = load ptr, ptr %26, align 8
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  store ptr %28, ptr %.reload14, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem, align 8
  %31 = load i32, ptr %29, align 4
  %.reload10 = load ptr, ptr %.reg2mem, align 8
  store i32 %31, ptr %.reload10, align 4
  call void @set_offset(ptr %19, ptr @Array)
  %32 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %32, align 8
  %33 = alloca i160, align 8
  %34 = alloca ptr, align 8
  %35 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  store ptr %36, ptr %34, align 8
  %37 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %38 = load i160, ptr %37, align 4
  store i160 %38, ptr %33, align 4
  %.reload25 = load ptr, ptr %.reg2mem15, align 8
  %39 = load ptr, ptr %.reload25, align 8
  %40 = load ptr, ptr %19, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 664, ptr %40)
  %.reload9 = load ptr, ptr %.reg2mem, align 8
  %42 = load i32, ptr %.reload9, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, ptr }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %39) #16
  %49 = alloca i32, align 4
  store i32 %48, ptr %49, align 4
  %.reload24 = load ptr, ptr %.reg2mem15, align 8
  %50 = load ptr, ptr %.reload24, align 8
  %51 = load ptr, ptr %19, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 664, ptr %51)
  %.reload8 = load ptr, ptr %.reg2mem, align 8
  %53 = load i32, ptr %.reload8, align 4
  %54 = getelementptr ptr, ptr %51, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 3
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call i32 %58(ptr %50) #16
  %60 = alloca i32, align 4
  store i32 %59, ptr %60, align 4
  %61 = load i32, ptr %49, align 4
  %62 = load i32, ptr %60, align 4
  %63 = icmp sge i32 %61, %62
  %64 = alloca i1, align 1
  store i1 %63, ptr %64, align 1
  %65 = load i1, ptr %64, align 1
  br i1 %65, label %66, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %97

66:                                               ; preds = %4
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  %67 = load ptr, ptr %.reload23, align 8
  %68 = load ptr, ptr %19, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 664, ptr %68)
  %.reload7 = load ptr, ptr %.reg2mem, align 8
  %70 = load i32, ptr %.reload7, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = getelementptr ptr, ptr %71, i32 3
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = call i32 %75(ptr %67) #16
  store i32 %76, ptr %5, align 4
  store i32 2, ptr %6, align 4
  %77 = load i32, ptr %5, align 4
  %78 = load i32, ptr %6, align 4
  %79 = mul i32 %77, %78
  store i32 %79, ptr %7, align 4
  %80 = load i32, ptr %7, align 4
  %.reload29 = load ptr, ptr %.reg2mem27, align 8
  %81 = load ptr, ptr %.reload29, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %83 = load ptr, ptr %.reload22, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 1
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %85 = load ptr, ptr %.reload13, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 2
  %.reload6 = load ptr, ptr %.reg2mem, align 8
  %87 = load i32, ptr %.reload6, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %87, 3
  %89 = getelementptr [1 x ptr], ptr %8, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %89, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 1, ptr %8)
  %91 = call ptr @llvm.invariant.start.p0(i64 664, ptr %81)
  %92 = getelementptr ptr, ptr %81, i32 %87
  %93 = getelementptr ptr, ptr %92, i32 13
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr { ptr }, ptr %9, i32 0, i32 0
  store ptr @i32_typ, ptr %95, align 8
  %96 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %88, ptr %9)
  call void %96({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %8, i32 %80) #17
  br label %97

97:                                               ; preds = %._crit_edge, %66
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %98 = load ptr, ptr %.reload21, align 8
  %99 = load ptr, ptr %19, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 664, ptr %99)
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  %101 = load i32, ptr %.reload5, align 4
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = call { ptr } %106(ptr %98) #16
  store { ptr } %107, ptr %10, align 8
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  %108 = load ptr, ptr %.reload20, align 8
  %109 = load ptr, ptr %19, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 664, ptr %109)
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %111 = load i32, ptr %.reload4, align 4
  %112 = getelementptr ptr, ptr %109, i32 %111
  %113 = getelementptr ptr, ptr %112, i32 2
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr { ptr, ptr }, ptr %114, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %117 = call i32 %116(ptr %108) #16
  store i32 %117, ptr %11, align 4
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %118 = load ptr, ptr %.reload19, align 8
  %119 = load ptr, ptr %19, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 664, ptr %119)
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %121 = load i32, ptr %.reload3, align 4
  %122 = getelementptr ptr, ptr %119, i32 %121
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @typegetter_wrapper(ptr %123, ptr %118)
  %125 = load ptr, ptr %34, align 8
  store ptr %125, ptr %13, align 8
  %126 = load i160, ptr %33, align 4
  store i160 %126, ptr %12, align 4
  %127 = load ptr, ptr %124, align 8
  %128 = getelementptr ptr, ptr %127, i32 9
  %129 = load ptr, ptr %128, align 8
  %130 = call { i64, i64 } @size_wrapper(ptr %129, ptr %124)
  %131 = extractvalue { i64, i64 } %130, 0
  %132 = load ptr, ptr %10, align 8
  %133 = load i32, ptr %11, align 4
  %134 = sext i32 %133 to i64
  %135 = mul i64 %131, %134
  %136 = getelementptr i8, ptr %132, i64 %135
  %137 = load ptr, ptr %13, align 8
  %138 = insertvalue { ptr, i160 } undef, ptr %137, 0
  %139 = load i160, ptr %12, align 4
  %140 = insertvalue { ptr, i160 } %138, i160 %139, 1
  %141 = load ptr, ptr %124, align 8
  %142 = getelementptr ptr, ptr %141, i32 8
  %143 = load ptr, ptr %142, align 8
  call void @unbox_wrapper(ptr %143, { ptr, i160 } %140, ptr %124, ptr %136)
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %144 = load ptr, ptr %.reload18, align 8
  %145 = load ptr, ptr %19, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 664, ptr %145)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %147 = load i32, ptr %.reload2, align 4
  %148 = getelementptr ptr, ptr %145, i32 %147
  %149 = getelementptr ptr, ptr %148, i32 2
  %150 = load ptr, ptr %149, align 8
  %151 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = call i32 %152(ptr %144) #16
  store i32 %153, ptr %14, align 4
  store i32 1, ptr %15, align 4
  %154 = load i32, ptr %14, align 4
  %155 = load i32, ptr %15, align 4
  %156 = add i32 %154, %155
  store i32 %156, ptr %16, align 4
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %157 = load ptr, ptr %.reload17, align 8
  %158 = load ptr, ptr %19, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 664, ptr %158)
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %160 = load i32, ptr %.reload1, align 4
  %161 = getelementptr ptr, ptr %158, i32 %160
  %162 = getelementptr ptr, ptr %161, i32 2
  %163 = load ptr, ptr %162, align 8
  %164 = getelementptr { ptr, ptr }, ptr %163, i32 0, i32 1
  %165 = load ptr, ptr %164, align 8
  %166 = load i32, ptr %16, align 4
  call void %165(ptr %157, i32 %166) #15
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %.reload28 = load ptr, ptr %.reg2mem27, align 8
  %168 = load ptr, ptr %.reload28, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %170 = load ptr, ptr %.reload16, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %172 = load ptr, ptr %.reload12, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %.reload = load ptr, ptr %.reg2mem, align 8
  %174 = load i32, ptr %.reload, align 4
  store i32 %174, ptr %173, align 4
  call void @set_offset(ptr %17, ptr @Array)
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %175, 0
  %177 = load ptr, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %177, 1
  %179 = load ptr, ptr %171, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %179, 2
  %181 = load i32, ptr %173, align 4
  %182 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 %181, 3
  ret { ptr, ptr, ptr, i32 } %182
}

define { ptr, ptr, ptr, i32 } @Array_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [2 x ptr], align 8
  %15 = alloca { ptr, ptr }, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem27 = alloca ptr, align 8
  %.reg2mem32 = alloca ptr, align 8
  %.reg2mem40 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  store ptr %22, ptr %.reg2mem40, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload44 = load ptr, ptr %.reg2mem40, align 8
  store ptr %23, ptr %.reload44, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  store ptr %25, ptr %.reg2mem32, align 8
  %26 = load ptr, ptr %24, align 8
  %.reload39 = load ptr, ptr %.reg2mem32, align 8
  store ptr %26, ptr %.reload39, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  store ptr %28, ptr %.reg2mem27, align 8
  %29 = load ptr, ptr %27, align 8
  %.reload31 = load ptr, ptr %.reg2mem27, align 8
  store ptr %29, ptr %.reload31, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr %31, ptr %.reg2mem19, align 8
  %32 = load i32, ptr %30, align 4
  %.reload26 = load ptr, ptr %.reg2mem19, align 8
  store i32 %32, ptr %.reload26, align 4
  call void @set_offset(ptr %20, ptr @Array)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %33, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  store ptr %36, ptr %.reg2mem15, align 8
  %37 = load ptr, ptr %35, align 8
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  store ptr %37, ptr %.reload18, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  store ptr %39, ptr %.reg2mem11, align 8
  %40 = load ptr, ptr %38, align 8
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  store ptr %40, ptr %.reload14, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  store ptr %42, ptr %.reg2mem7, align 8
  %43 = load ptr, ptr %41, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  store ptr %43, ptr %.reload10, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  store ptr %45, ptr %.reg2mem3, align 8
  %46 = load i32, ptr %44, align 4
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store i32 %46, ptr %.reload6, align 4
  call void @set_offset(ptr %34, ptr @Array)
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %47 = load ptr, ptr %.reload17, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %49 = load ptr, ptr %.reload13, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 1
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %51 = load ptr, ptr %.reload9, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 2
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %53 = load i32, ptr %.reload5, align 4
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %53, 3
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 0, ptr %55)
  %57 = call ptr @llvm.invariant.start.p0(i64 664, ptr %47)
  %58 = getelementptr ptr, ptr %47, i32 %53
  %59 = getelementptr ptr, ptr %58, i32 9
  %60 = load ptr, ptr %59, align 8
  %61 = alloca {}, align 8
  %62 = call ptr @behavior_wrapper(ptr %60, { ptr, ptr, ptr, i32 } %54, ptr %61)
  %63 = call i32 %62({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr %55) #17
  %64 = alloca i32, align 4
  store i32 %63, ptr %64, align 4
  %.reload38 = load ptr, ptr %.reg2mem32, align 8
  %65 = load ptr, ptr %.reload38, align 8
  %66 = load ptr, ptr %20, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 664, ptr %66)
  %.reload25 = load ptr, ptr %.reg2mem19, align 8
  %68 = load i32, ptr %.reload25, align 4
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 2
  %71 = load ptr, ptr %70, align 8
  %72 = getelementptr { ptr, ptr }, ptr %71, i32 0, i32 0
  %73 = load ptr, ptr %72, align 8
  %74 = call i32 %73(ptr %65) #16
  %75 = alloca i32, align 4
  store i32 %74, ptr %75, align 4
  %76 = load i32, ptr %75, align 4
  %77 = load i32, ptr %64, align 4
  %78 = add i32 %76, %77
  %79 = alloca i32, align 4
  store i32 %78, ptr %79, align 4
  %80 = load i32, ptr %79, align 4
  %.reload43 = load ptr, ptr %.reg2mem40, align 8
  %81 = load ptr, ptr %.reload43, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %.reload37 = load ptr, ptr %.reg2mem32, align 8
  %83 = load ptr, ptr %.reload37, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 1
  %.reload30 = load ptr, ptr %.reg2mem27, align 8
  %85 = load ptr, ptr %.reload30, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 2
  %.reload24 = load ptr, ptr %.reg2mem19, align 8
  %87 = load i32, ptr %.reload24, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %87, 3
  %89 = alloca [1 x ptr], align 8
  %90 = getelementptr [1 x ptr], ptr %89, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %90, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 1, ptr %89)
  %92 = call ptr @llvm.invariant.start.p0(i64 664, ptr %81)
  %93 = getelementptr ptr, ptr %81, i32 %87
  %94 = getelementptr ptr, ptr %93, i32 13
  %95 = load ptr, ptr %94, align 8
  %96 = alloca { ptr }, align 8
  %97 = getelementptr { ptr }, ptr %96, i32 0, i32 0
  store ptr @i32_typ, ptr %97, align 8
  %98 = call ptr @behavior_wrapper(ptr %95, { ptr, ptr, ptr, i32 } %88, ptr %96)
  call void %98({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %89, i32 %80) #17
  %99 = alloca i32, align 4
  store i32 0, ptr %99, align 4
  br label %100

100:                                              ; preds = %._crit_edge1, %4
  %101 = load i32, ptr %99, align 4
  %102 = load i32, ptr %64, align 4
  %103 = icmp slt i32 %101, %102
  store i1 %103, ptr %5, align 1
  %104 = load i1, ptr %5, align 1
  store i1 %104, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %105, label %._crit_edge

._crit_edge:                                      ; preds = %100
  br label %167

105:                                              ; preds = %100
  %106 = load i32, ptr %99, align 4
  %107 = load i32, ptr %75, align 4
  %108 = add i32 %106, %107
  store i32 %108, ptr %6, align 4
  %109 = load i32, ptr %99, align 4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %110 = load ptr, ptr %.reload16, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %112 = load ptr, ptr %.reload12, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 1
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %114 = load ptr, ptr %.reload8, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 2
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %116 = load i32, ptr %.reload4, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %116, 3
  %118 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %118, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %120 = call ptr @llvm.invariant.start.p0(i64 664, ptr %110)
  %121 = getelementptr ptr, ptr %110, i32 %116
  %122 = getelementptr ptr, ptr %121, i32 17
  %123 = load ptr, ptr %122, align 8
  %124 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr @i32_typ, ptr %124, align 8
  %125 = call ptr @behavior_wrapper(ptr %123, { ptr, ptr, ptr, i32 } %117, ptr %8)
  %126 = call { ptr, i160 } %125({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %7, i32 %109) #17
  store { ptr, i160 } %126, ptr %9, align 8
  %127 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  store ptr %128, ptr %11, align 8
  %129 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %130 = load i160, ptr %129, align 4
  store i160 %130, ptr %10, align 4
  %131 = load i32, ptr %6, align 4
  %132 = load ptr, ptr %11, align 8
  store ptr %132, ptr %13, align 8
  %133 = load i160, ptr %10, align 4
  store i160 %133, ptr %12, align 4
  %134 = load ptr, ptr %13, align 8
  %135 = insertvalue { ptr, i160 } undef, ptr %134, 0
  %136 = load i160, ptr %12, align 4
  %137 = insertvalue { ptr, i160 } %135, i160 %136, 1
  %.reload42 = load ptr, ptr %.reg2mem40, align 8
  %138 = load ptr, ptr %.reload42, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %.reload36 = load ptr, ptr %.reg2mem32, align 8
  %140 = load ptr, ptr %.reload36, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %140, 1
  %.reload29 = load ptr, ptr %.reg2mem27, align 8
  %142 = load ptr, ptr %.reload29, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %142, 2
  %.reload23 = load ptr, ptr %.reg2mem19, align 8
  %144 = load i32, ptr %.reload23, align 4
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, i32 %144, 3
  %.reload35 = load ptr, ptr %.reg2mem32, align 8
  %146 = load ptr, ptr %.reload35, align 8
  %147 = load ptr, ptr %20, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 664, ptr %147)
  %.reload22 = load ptr, ptr %.reg2mem19, align 8
  %149 = load i32, ptr %.reload22, align 4
  %150 = getelementptr ptr, ptr %147, i32 %149
  %151 = load ptr, ptr %150, align 8
  %152 = call ptr @typegetter_wrapper(ptr %151, ptr %146)
  %153 = getelementptr [2 x ptr], ptr %14, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %153, align 8
  %154 = getelementptr [2 x ptr], ptr %14, i32 0, i32 1
  store ptr %152, ptr %154, align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 4, ptr %14)
  %156 = call ptr @llvm.invariant.start.p0(i64 664, ptr %138)
  %157 = getelementptr ptr, ptr %138, i32 %144
  %158 = getelementptr ptr, ptr %157, i32 18
  %159 = load ptr, ptr %158, align 8
  %160 = getelementptr { ptr, ptr }, ptr %15, i32 0, i32 0
  store ptr @i32_typ, ptr %160, align 8
  %161 = getelementptr { ptr, ptr }, ptr %15, i32 0, i32 1
  store ptr %134, ptr %161, align 8
  %162 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %145, ptr %15)
  call void %162({ ptr, ptr, ptr, i32 } %145, { ptr, ptr, ptr, i32 } %145, ptr %14, i32 %131, { ptr, i160 } %137) #17
  store i32 1, ptr %16, align 4
  %163 = load i32, ptr %99, align 4
  %164 = load i32, ptr %16, align 4
  %165 = add i32 %163, %164
  store i32 %165, ptr %17, align 4
  %166 = load i32, ptr %17, align 4
  store i32 %166, ptr %99, align 4
  br label %167

167:                                              ; preds = %._crit_edge, %105
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %168

._crit_edge1:                                     ; preds = %167
  br label %100

168:                                              ; preds = %167
  %.reload34 = load ptr, ptr %.reg2mem32, align 8
  %169 = load ptr, ptr %.reload34, align 8
  %170 = load ptr, ptr %20, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 664, ptr %170)
  %.reload21 = load ptr, ptr %.reg2mem19, align 8
  %172 = load i32, ptr %.reload21, align 4
  %173 = getelementptr ptr, ptr %170, i32 %172
  %174 = getelementptr ptr, ptr %173, i32 2
  %175 = load ptr, ptr %174, align 8
  %176 = getelementptr { ptr, ptr }, ptr %175, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = load i32, ptr %79, align 4
  call void %177(ptr %169, i32 %178) #15
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %.reload41 = load ptr, ptr %.reg2mem40, align 8
  %180 = load ptr, ptr %.reload41, align 8
  store ptr %180, ptr %179, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %.reload33 = load ptr, ptr %.reg2mem32, align 8
  %182 = load ptr, ptr %.reload33, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %.reload28 = load ptr, ptr %.reg2mem27, align 8
  %184 = load ptr, ptr %.reload28, align 8
  store ptr %184, ptr %183, align 8
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  %186 = load i32, ptr %.reload20, align 4
  store i32 %186, ptr %185, align 4
  call void @set_offset(ptr %18, ptr @Array)
  %187 = load ptr, ptr %179, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %187, 0
  %189 = load ptr, ptr %181, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %189, 1
  %191 = load ptr, ptr %183, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %190, ptr %191, 2
  %193 = load i32, ptr %185, align 4
  %194 = insertvalue { ptr, ptr, ptr, i32 } %192, i32 %193, 3
  ret { ptr, ptr, ptr, i32 } %194
}

define void @Array_reserve_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i1, align 1
  %12 = alloca { ptr, i160 }, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem15, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload26 = load ptr, ptr %.reg2mem15, align 8
  store ptr %25, ptr %.reload26, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem3, align 8
  %31 = load i32, ptr %29, align 4
  %.reload14 = load ptr, ptr %.reg2mem3, align 8
  store i32 %31, ptr %.reload14, align 4
  call void @set_offset(ptr %19, ptr @Array)
  %32 = alloca i32, align 4
  store i32 %3, ptr %32, align 4
  %.reload25 = load ptr, ptr %.reg2mem15, align 8
  %33 = load ptr, ptr %.reload25, align 8
  %34 = load ptr, ptr %19, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 664, ptr %34)
  %.reload13 = load ptr, ptr %.reg2mem3, align 8
  %36 = load i32, ptr %.reload13, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 3
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = call i32 %41(ptr %33) #16
  %43 = alloca i32, align 4
  store i32 %42, ptr %43, align 4
  %44 = load i32, ptr %32, align 4
  %45 = load i32, ptr %43, align 4
  %46 = icmp sle i32 %44, %45
  %47 = alloca i1, align 1
  store i1 %46, ptr %47, align 1
  %48 = load i1, ptr %47, align 1
  br i1 %48, label %49, label %50

49:                                               ; preds = %4
  br label %191

50:                                               ; preds = %4
  %.reload24 = load ptr, ptr %.reg2mem15, align 8
  %51 = load ptr, ptr %.reload24, align 8
  %52 = load ptr, ptr %19, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 664, ptr %52)
  %.reload12 = load ptr, ptr %.reg2mem3, align 8
  %54 = load i32, ptr %.reload12, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 3
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = load i32, ptr %32, align 4
  call void %59(ptr %51, i32 %60) #15
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  %61 = load ptr, ptr %.reload23, align 8
  %62 = load ptr, ptr %19, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 664, ptr %62)
  %.reload11 = load ptr, ptr %.reg2mem3, align 8
  %64 = load i32, ptr %.reload11, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = call { ptr } %69(ptr %61) #16
  store { ptr } %70, ptr %5, align 8
  %71 = load ptr, ptr %5, align 8
  store ptr %71, ptr %6, align 8
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %72 = load ptr, ptr %.reload22, align 8
  %73 = load ptr, ptr %19, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 664, ptr %73)
  %.reload10 = load ptr, ptr %.reg2mem3, align 8
  %75 = load i32, ptr %.reload10, align 4
  %76 = getelementptr ptr, ptr %73, i32 %75
  %77 = getelementptr ptr, ptr %76, i32 3
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = call i32 %80(ptr %72) #16
  store i32 %81, ptr %7, align 4
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %82 = load ptr, ptr %.reload21, align 8
  %83 = load ptr, ptr %19, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 664, ptr %83)
  %.reload9 = load ptr, ptr %.reg2mem3, align 8
  %85 = load i32, ptr %.reload9, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = load ptr, ptr %86, align 8
  %88 = call ptr @typegetter_wrapper(ptr %87, ptr %82)
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr ptr, ptr %89, i32 9
  %91 = load ptr, ptr %90, align 8
  %92 = call { i64, i64 } @size_wrapper(ptr %91, ptr %88)
  %93 = extractvalue { i64, i64 } %92, 0
  %94 = load i32, ptr %7, align 4
  %95 = sext i32 %94 to i64
  %96 = mul i64 %95, %93
  %97 = call ptr @bump_malloc(i64 %96)
  store ptr %97, ptr %8, align 8
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  %98 = load ptr, ptr %.reload20, align 8
  %99 = load ptr, ptr %19, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 664, ptr %99)
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %101 = load i32, ptr %.reload8, align 4
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr } undef, ptr %108, 0
  call void %106(ptr %98, { ptr } %109) #15
  store i32 0, ptr %9, align 4
  br label %110

110:                                              ; preds = %._crit_edge1, %50
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %111 = load ptr, ptr %.reload19, align 8
  %112 = load ptr, ptr %19, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 664, ptr %112)
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %114 = load i32, ptr %.reload7, align 4
  %115 = getelementptr ptr, ptr %112, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr { ptr, ptr }, ptr %117, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = call i32 %119(ptr %111) #16
  store i32 %120, ptr %10, align 4
  %121 = load i32, ptr %9, align 4
  %122 = load i32, ptr %10, align 4
  %123 = icmp slt i32 %121, %122
  store i1 %123, ptr %11, align 1
  %124 = load i1, ptr %11, align 1
  store i1 %124, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %125, label %._crit_edge

._crit_edge:                                      ; preds = %110
  br label %189

125:                                              ; preds = %110
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %126 = load ptr, ptr %.reload18, align 8
  %127 = load ptr, ptr %19, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 664, ptr %127)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %129 = load i32, ptr %.reload6, align 4
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @typegetter_wrapper(ptr %131, ptr %126)
  %133 = load ptr, ptr %132, align 8
  %134 = getelementptr ptr, ptr %133, i32 9
  %135 = load ptr, ptr %134, align 8
  %136 = call { i64, i64 } @size_wrapper(ptr %135, ptr %132)
  %137 = extractvalue { i64, i64 } %136, 0
  %138 = load ptr, ptr %6, align 8
  %139 = load i32, ptr %9, align 4
  %140 = sext i32 %139 to i64
  %141 = mul i64 %137, %140
  %142 = getelementptr i8, ptr %138, i64 %141
  %143 = load ptr, ptr %132, align 8
  %144 = getelementptr ptr, ptr %143, i32 7
  %145 = load ptr, ptr %144, align 8
  %146 = call { ptr, i160 } @box_wrapper(ptr %145, ptr %142, ptr %132)
  store { ptr, i160 } %146, ptr %12, align 8
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %147 = load ptr, ptr %.reload17, align 8
  %148 = load ptr, ptr %19, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 664, ptr %148)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %150 = load i32, ptr %.reload5, align 4
  %151 = getelementptr ptr, ptr %148, i32 %150
  %152 = getelementptr ptr, ptr %151, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = getelementptr { ptr, ptr }, ptr %153, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = call { ptr } %155(ptr %147) #16
  store { ptr } %156, ptr %13, align 8
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %157 = load ptr, ptr %.reload16, align 8
  %158 = load ptr, ptr %19, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 664, ptr %158)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %160 = load i32, ptr %.reload4, align 4
  %161 = getelementptr ptr, ptr %158, i32 %160
  %162 = load ptr, ptr %161, align 8
  %163 = call ptr @typegetter_wrapper(ptr %162, ptr %157)
  %164 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  store ptr %165, ptr %15, align 8
  %166 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 1
  %167 = load i160, ptr %166, align 4
  store i160 %167, ptr %14, align 4
  %168 = load ptr, ptr %163, align 8
  %169 = getelementptr ptr, ptr %168, i32 9
  %170 = load ptr, ptr %169, align 8
  %171 = call { i64, i64 } @size_wrapper(ptr %170, ptr %163)
  %172 = extractvalue { i64, i64 } %171, 0
  %173 = load ptr, ptr %13, align 8
  %174 = load i32, ptr %9, align 4
  %175 = sext i32 %174 to i64
  %176 = mul i64 %172, %175
  %177 = getelementptr i8, ptr %173, i64 %176
  %178 = load ptr, ptr %15, align 8
  %179 = insertvalue { ptr, i160 } undef, ptr %178, 0
  %180 = load i160, ptr %14, align 4
  %181 = insertvalue { ptr, i160 } %179, i160 %180, 1
  %182 = load ptr, ptr %163, align 8
  %183 = getelementptr ptr, ptr %182, i32 8
  %184 = load ptr, ptr %183, align 8
  call void @unbox_wrapper(ptr %184, { ptr, i160 } %181, ptr %163, ptr %177)
  store i32 1, ptr %16, align 4
  %185 = load i32, ptr %9, align 4
  %186 = load i32, ptr %16, align 4
  %187 = add i32 %185, %186
  store i32 %187, ptr %17, align 4
  %188 = load i32, ptr %17, align 4
  store i32 %188, ptr %9, align 4
  br label %189

189:                                              ; preds = %._crit_edge, %125
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %190

._crit_edge1:                                     ; preds = %189
  br label %110

190:                                              ; preds = %189
  br label %191

191:                                              ; preds = %190, %49
  ret void
}

define { ptr, i160 } @Array__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca i1, align 1
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca i32, align 4
  %9 = alloca i1, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [1 x ptr], align 8
  %13 = alloca { ptr }, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca i160, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  store ptr %22, ptr %.reg2mem18, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  store ptr %23, ptr %.reload21, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  store ptr %25, ptr %.reg2mem11, align 8
  %26 = load ptr, ptr %24, align 8
  %.reload17 = load ptr, ptr %.reg2mem11, align 8
  store ptr %26, ptr %.reload17, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  store ptr %28, ptr %.reg2mem7, align 8
  %29 = load ptr, ptr %27, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  store ptr %29, ptr %.reload10, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr %31, ptr %.reg2mem, align 8
  %32 = load i32, ptr %30, align 4
  %.reload6 = load ptr, ptr %.reg2mem, align 8
  store i32 %32, ptr %.reload6, align 4
  call void @set_offset(ptr %20, ptr @Array)
  %33 = alloca i32, align 4
  store i32 %3, ptr %33, align 4
  %.reload16 = load ptr, ptr %.reg2mem11, align 8
  %34 = load ptr, ptr %.reload16, align 8
  %35 = load ptr, ptr %20, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 664, ptr %35)
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  %37 = load i32, ptr %.reload5, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = call i32 %42(ptr %34) #16
  %44 = alloca i32, align 4
  store i32 %43, ptr %44, align 4
  %45 = alloca i32, align 4
  store i32 1, ptr %45, align 4
  %46 = load i32, ptr %44, align 4
  %47 = load i32, ptr %45, align 4
  %48 = sub i32 %46, %47
  %49 = alloca i32, align 4
  store i32 %48, ptr %49, align 4
  %50 = load i32, ptr %33, align 4
  %51 = load i32, ptr %49, align 4
  %52 = icmp sgt i32 %50, %51
  %53 = alloca i1, align 1
  store i1 %52, ptr %53, align 1
  %.reload15 = load ptr, ptr %.reg2mem11, align 8
  %54 = load ptr, ptr %.reload15, align 8
  %55 = load ptr, ptr %20, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 664, ptr %55)
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %57 = load i32, ptr %.reload4, align 4
  %58 = getelementptr ptr, ptr %55, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call i32 %62(ptr %54) #16
  %64 = alloca i32, align 4
  store i32 %63, ptr %64, align 4
  %65 = load i32, ptr %64, align 4
  %66 = load i32, ptr %33, align 4
  %67 = add i32 %65, %66
  %68 = alloca i32, align 4
  store i32 %67, ptr %68, align 4
  %69 = alloca i32, align 4
  store i32 0, ptr %69, align 4
  %70 = load i32, ptr %68, align 4
  %71 = load i32, ptr %69, align 4
  %72 = icmp slt i32 %70, %71
  %73 = alloca i1, align 1
  store i1 %72, ptr %73, align 1
  %74 = load i1, ptr %53, align 1
  %75 = alloca i1, align 1
  store i1 %74, ptr %75, align 1
  br i1 %74, label %76, label %77

76:                                               ; preds = %4
  br label %79

77:                                               ; preds = %4
  %78 = load i1, ptr %73, align 1
  store i1 %78, ptr %75, align 1
  br label %79

79:                                               ; preds = %77, %76
  %80 = load i1, ptr %75, align 1
  store i1 %80, ptr %5, align 1
  %81 = load i1, ptr %5, align 1
  br i1 %81, label %82, label %._crit_edge

._crit_edge:                                      ; preds = %79
  br label %100

82:                                               ; preds = %79
  %83 = load i32, ptr %33, align 4
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %84 = load ptr, ptr %.reload20, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %86 = load ptr, ptr %.reload14, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %88 = load ptr, ptr %.reload9, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %90 = load i32, ptr %.reload3, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  %92 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %92, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %94 = call ptr @llvm.invariant.start.p0(i64 664, ptr %84)
  %95 = getelementptr ptr, ptr %84, i32 %90
  %96 = getelementptr ptr, ptr %95, i32 16
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %98, align 8
  %99 = call ptr @behavior_wrapper(ptr %97, { ptr, ptr, ptr, i32 } %91, ptr %7)
  call void %99({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr %6, i32 %83) #17
  br label %100

100:                                              ; preds = %._crit_edge, %82
  store i32 0, ptr %8, align 4
  %101 = load i32, ptr %33, align 4
  %102 = load i32, ptr %8, align 4
  %103 = icmp slt i32 %101, %102
  store i1 %103, ptr %9, align 1
  %104 = load i1, ptr %9, align 1
  br i1 %104, label %105, label %._crit_edge1

._crit_edge1:                                     ; preds = %100
  br label %120

105:                                              ; preds = %100
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %106 = load ptr, ptr %.reload13, align 8
  %107 = load ptr, ptr %20, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 664, ptr %107)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %109 = load i32, ptr %.reload2, align 4
  %110 = getelementptr ptr, ptr %107, i32 %109
  %111 = getelementptr ptr, ptr %110, i32 2
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 0
  %114 = load ptr, ptr %113, align 8
  %115 = call i32 %114(ptr %106) #16
  store i32 %115, ptr %10, align 4
  %116 = load i32, ptr %10, align 4
  %117 = load i32, ptr %33, align 4
  %118 = add i32 %116, %117
  store i32 %118, ptr %11, align 4
  %119 = load i32, ptr %11, align 4
  store i32 %119, ptr %33, align 4
  br label %120

120:                                              ; preds = %._crit_edge1, %105
  %121 = load i32, ptr %33, align 4
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %122 = load ptr, ptr %.reload19, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %122, 0
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %124 = load ptr, ptr %.reload12, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 1
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %126 = load ptr, ptr %.reload8, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %126, 2
  %.reload = load ptr, ptr %.reg2mem, align 8
  %128 = load i32, ptr %.reload, align 4
  %129 = insertvalue { ptr, ptr, ptr, i32 } %127, i32 %128, 3
  %130 = getelementptr [1 x ptr], ptr %12, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %130, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 1, ptr %12)
  %132 = call ptr @llvm.invariant.start.p0(i64 664, ptr %122)
  %133 = getelementptr ptr, ptr %122, i32 %128
  %134 = getelementptr ptr, ptr %133, i32 17
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  store ptr @i32_typ, ptr %136, align 8
  %137 = call ptr @behavior_wrapper(ptr %135, { ptr, ptr, ptr, i32 } %129, ptr %13)
  %138 = call { ptr, i160 } %137({ ptr, ptr, ptr, i32 } %129, { ptr, ptr, ptr, i32 } %129, ptr %12, i32 %121) #17
  store { ptr, i160 } %138, ptr %14, align 8
  %139 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %140 = load ptr, ptr %139, align 8
  store ptr %140, ptr %16, align 8
  %141 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 1
  %142 = load i160, ptr %141, align 4
  store i160 %142, ptr %15, align 4
  %143 = load ptr, ptr %16, align 8
  store ptr %143, ptr %18, align 8
  %144 = load i160, ptr %15, align 4
  store i160 %144, ptr %17, align 4
  %145 = load ptr, ptr %18, align 8
  %146 = insertvalue { ptr, i160 } undef, ptr %145, 0
  %147 = load i160, ptr %17, align 4
  %148 = insertvalue { ptr, i160 } %146, i160 %147, 1
  ret { ptr, i160 } %148
}

define void @Array__set_index_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, i160 } %4) {
  %6 = alloca i1, align 1
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca [2 x ptr], align 8
  %16 = alloca { ptr, ptr }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %17, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  store ptr %20, ptr %.reg2mem20, align 8
  %21 = load ptr, ptr %19, align 8
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  store ptr %21, ptr %.reload23, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  store ptr %23, ptr %.reg2mem12, align 8
  %24 = load ptr, ptr %22, align 8
  %.reload19 = load ptr, ptr %.reg2mem12, align 8
  store ptr %24, ptr %.reload19, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  store ptr %26, ptr %.reg2mem8, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  store ptr %27, ptr %.reload11, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  store ptr %29, ptr %.reg2mem, align 8
  %30 = load i32, ptr %28, align 4
  %.reload7 = load ptr, ptr %.reg2mem, align 8
  store i32 %30, ptr %.reload7, align 4
  call void @set_offset(ptr %18, ptr @Array)
  %31 = alloca i32, align 4
  store i32 %3, ptr %31, align 4
  %32 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %32, align 8
  %33 = alloca i160, align 8
  %34 = alloca ptr, align 8
  %35 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  store ptr %36, ptr %34, align 8
  %37 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %38 = load i160, ptr %37, align 4
  store i160 %38, ptr %33, align 4
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  %39 = load ptr, ptr %.reload18, align 8
  %40 = load ptr, ptr %18, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 664, ptr %40)
  %.reload6 = load ptr, ptr %.reg2mem, align 8
  %42 = load i32, ptr %.reload6, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, ptr }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %39) #16
  %49 = alloca i32, align 4
  store i32 %48, ptr %49, align 4
  %50 = alloca i32, align 4
  store i32 1, ptr %50, align 4
  %51 = load i32, ptr %49, align 4
  %52 = load i32, ptr %50, align 4
  %53 = sub i32 %51, %52
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %55 = load i32, ptr %31, align 4
  %56 = load i32, ptr %54, align 4
  %57 = icmp sgt i32 %55, %56
  %58 = alloca i1, align 1
  store i1 %57, ptr %58, align 1
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %59 = load ptr, ptr %.reload17, align 8
  %60 = load ptr, ptr %18, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 664, ptr %60)
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  %62 = load i32, ptr %.reload5, align 4
  %63 = getelementptr ptr, ptr %60, i32 %62
  %64 = getelementptr ptr, ptr %63, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 0
  %67 = load ptr, ptr %66, align 8
  %68 = call i32 %67(ptr %59) #16
  %69 = alloca i32, align 4
  store i32 %68, ptr %69, align 4
  %70 = load i32, ptr %69, align 4
  %71 = load i32, ptr %31, align 4
  %72 = add i32 %70, %71
  %73 = alloca i32, align 4
  store i32 %72, ptr %73, align 4
  %74 = alloca i32, align 4
  store i32 0, ptr %74, align 4
  %75 = load i32, ptr %73, align 4
  %76 = load i32, ptr %74, align 4
  %77 = icmp slt i32 %75, %76
  %78 = alloca i1, align 1
  store i1 %77, ptr %78, align 1
  %79 = load i1, ptr %58, align 1
  %80 = alloca i1, align 1
  store i1 %79, ptr %80, align 1
  br i1 %79, label %81, label %82

81:                                               ; preds = %5
  br label %84

82:                                               ; preds = %5
  %83 = load i1, ptr %78, align 1
  store i1 %83, ptr %80, align 1
  br label %84

84:                                               ; preds = %82, %81
  %85 = load i1, ptr %80, align 1
  store i1 %85, ptr %6, align 1
  %86 = load i1, ptr %6, align 1
  br i1 %86, label %87, label %._crit_edge

._crit_edge:                                      ; preds = %84
  br label %105

87:                                               ; preds = %84
  %88 = load i32, ptr %31, align 4
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %89 = load ptr, ptr %.reload22, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %89, 0
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %91 = load ptr, ptr %.reload16, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 1
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %93 = load ptr, ptr %.reload10, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 2
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %95 = load i32, ptr %.reload4, align 4
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, i32 %95, 3
  %97 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %99 = call ptr @llvm.invariant.start.p0(i64 664, ptr %89)
  %100 = getelementptr ptr, ptr %89, i32 %95
  %101 = getelementptr ptr, ptr %100, i32 16
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr @i32_typ, ptr %103, align 8
  %104 = call ptr @behavior_wrapper(ptr %102, { ptr, ptr, ptr, i32 } %96, ptr %8)
  call void %104({ ptr, ptr, ptr, i32 } %96, { ptr, ptr, ptr, i32 } %96, ptr %7, i32 %88) #17
  br label %105

105:                                              ; preds = %._crit_edge, %87
  store i32 0, ptr %9, align 4
  %106 = load i32, ptr %31, align 4
  %107 = load i32, ptr %9, align 4
  %108 = icmp slt i32 %106, %107
  store i1 %108, ptr %10, align 1
  %109 = load i1, ptr %10, align 1
  br i1 %109, label %110, label %._crit_edge1

._crit_edge1:                                     ; preds = %105
  br label %125

110:                                              ; preds = %105
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %111 = load ptr, ptr %.reload15, align 8
  %112 = load ptr, ptr %18, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 664, ptr %112)
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %114 = load i32, ptr %.reload3, align 4
  %115 = getelementptr ptr, ptr %112, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr { ptr, ptr }, ptr %117, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = call i32 %119(ptr %111) #16
  store i32 %120, ptr %11, align 4
  %121 = load i32, ptr %11, align 4
  %122 = load i32, ptr %31, align 4
  %123 = add i32 %121, %122
  store i32 %123, ptr %12, align 4
  %124 = load i32, ptr %12, align 4
  store i32 %124, ptr %31, align 4
  br label %125

125:                                              ; preds = %._crit_edge1, %110
  %126 = load i32, ptr %31, align 4
  %127 = load ptr, ptr %34, align 8
  store ptr %127, ptr %14, align 8
  %128 = load i160, ptr %33, align 4
  store i160 %128, ptr %13, align 4
  %129 = load ptr, ptr %14, align 8
  %130 = insertvalue { ptr, i160 } undef, ptr %129, 0
  %131 = load i160, ptr %13, align 4
  %132 = insertvalue { ptr, i160 } %130, i160 %131, 1
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %133 = load ptr, ptr %.reload21, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %133, 0
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %135 = load ptr, ptr %.reload14, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %135, 1
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %137 = load ptr, ptr %.reload9, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %136, ptr %137, 2
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %139 = load i32, ptr %.reload2, align 4
  %140 = insertvalue { ptr, ptr, ptr, i32 } %138, i32 %139, 3
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %141 = load ptr, ptr %.reload13, align 8
  %142 = load ptr, ptr %18, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 664, ptr %142)
  %.reload = load ptr, ptr %.reg2mem, align 8
  %144 = load i32, ptr %.reload, align 4
  %145 = getelementptr ptr, ptr %142, i32 %144
  %146 = load ptr, ptr %145, align 8
  %147 = call ptr @typegetter_wrapper(ptr %146, ptr %141)
  %148 = getelementptr [2 x ptr], ptr %15, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %148, align 8
  %149 = getelementptr [2 x ptr], ptr %15, i32 0, i32 1
  store ptr %147, ptr %149, align 8
  %150 = call ptr @llvm.invariant.start.p0(i64 4, ptr %15)
  %151 = call ptr @llvm.invariant.start.p0(i64 664, ptr %133)
  %152 = getelementptr ptr, ptr %133, i32 %139
  %153 = getelementptr ptr, ptr %152, i32 18
  %154 = load ptr, ptr %153, align 8
  %155 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 0
  store ptr @i32_typ, ptr %155, align 8
  %156 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 1
  store ptr %129, ptr %156, align 8
  %157 = call ptr @behavior_wrapper(ptr %154, { ptr, ptr, ptr, i32 } %140, ptr %16)
  call void %157({ ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %140, ptr %15, i32 %126, { ptr, i160 } %132) #17
  ret void
}

define void @Array_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = alloca [1 x ptr], align 8
  store ptr @Exception, ptr %20, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr ptr, ptr %21, i32 6
  %23 = load ptr, ptr %22, align 8
  %24 = call { i64, i64 } @size_wrapper(ptr %23, ptr %20)
  %25 = extractvalue { i64, i64 } %24, 0
  %26 = call ptr @bump_malloc(i64 %25)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  store ptr @Exception, ptr %27, align 8
  store ptr %26, ptr %28, align 8
  store i32 10, ptr %29, align 4
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %28, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = load i32, ptr %29, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 104, ptr %31)
  %43 = getelementptr ptr, ptr %31, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 4
  %45 = load ptr, ptr %44, align 8
  %46 = alloca {}, align 8
  %47 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %39, ptr %46)
  call void %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40) #17
  %48 = alloca i32, align 4
  store i32 89, ptr %48, align 4
  %49 = alloca i32, align 4
  store i32 11, ptr %49, align 4
  %50 = load i32, ptr %49, align 4
  %51 = sext i32 %50 to i64
  %52 = alloca ptr, align 8
  %53 = mul i64 %51, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %54 = call ptr @bump_malloc(i64 %53)
  store ptr %54, ptr %52, align 8
  %55 = alloca ptr, align 8
  %56 = getelementptr { ptr }, ptr %52, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  store ptr %57, ptr %55, align 8
  %58 = alloca i32, align 4
  store i32 0, ptr %58, align 4
  %59 = load ptr, ptr %55, align 8
  %60 = load i32, ptr %58, align 4
  %61 = sext i32 %60 to i64
  %62 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %61
  %63 = getelementptr i8, ptr %59, i64 %62
  %64 = load <10 x i8>, ptr @rxhre_arraymini, align 16
  store <10 x i8> %64, ptr %63, align 16
  %65 = alloca i32, align 4
  store i32 10, ptr %65, align 4
  %66 = alloca i32, align 4
  store i32 11, ptr %66, align 4
  %67 = alloca [1 x ptr], align 8
  store ptr @String, ptr %67, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr ptr, ptr %68, i32 6
  %70 = load ptr, ptr %69, align 8
  %71 = call { i64, i64 } @size_wrapper(ptr %70, ptr %67)
  %72 = extractvalue { i64, i64 } %71, 0
  %73 = call ptr @bump_malloc(i64 %72)
  %74 = alloca i32, align 4
  %75 = alloca ptr, align 8
  %76 = alloca ptr, align 8
  %77 = alloca ptr, align 8
  store ptr @String, ptr %77, align 8
  store ptr %73, ptr %76, align 8
  store i32 10, ptr %74, align 4
  %78 = alloca i32, align 4
  store i32 10, ptr %78, align 4
  %79 = alloca i32, align 4
  store i32 11, ptr %79, align 4
  %80 = load ptr, ptr %55, align 8
  %81 = insertvalue { ptr } undef, ptr %80, 0
  %82 = load i32, ptr %78, align 4
  %83 = load i32, ptr %79, align 4
  %84 = load ptr, ptr %77, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %76, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %75, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %74, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  %92 = alloca [3 x ptr], align 8
  %93 = getelementptr [3 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %93, align 8
  %94 = getelementptr [3 x ptr], ptr %92, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %94, align 8
  %95 = getelementptr [3 x ptr], ptr %92, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %95, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 9, ptr %92)
  %97 = call ptr @llvm.invariant.start.p0(i64 632, ptr %84)
  %98 = getelementptr ptr, ptr %84, i32 %90
  %99 = getelementptr ptr, ptr %98, i32 6
  %100 = load ptr, ptr %99, align 8
  %101 = alloca { ptr, ptr, ptr }, align 8
  %102 = getelementptr { ptr, ptr, ptr }, ptr %101, i32 0, i32 0
  store ptr @buffer_typ, ptr %102, align 8
  %103 = getelementptr { ptr, ptr, ptr }, ptr %101, i32 0, i32 1
  store ptr @i32_typ, ptr %103, align 8
  %104 = getelementptr { ptr, ptr, ptr }, ptr %101, i32 0, i32 2
  store ptr @i32_typ, ptr %104, align 8
  %105 = call ptr @behavior_wrapper(ptr %100, { ptr, ptr, ptr, i32 } %91, ptr %101)
  call void %105({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr %92, { ptr } %81, i32 %82, i32 %83) #17
  %106 = load i32, ptr %48, align 4
  %107 = alloca { ptr, ptr, ptr, i32 }, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 0
  %109 = load ptr, ptr %77, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 1
  %111 = load ptr, ptr %76, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 2
  %113 = load ptr, ptr %75, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 3
  %115 = load i32, ptr %74, align 4
  store i32 %115, ptr %114, align 4
  call void @set_offset(ptr %107, ptr @String)
  %116 = load ptr, ptr %108, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = load ptr, ptr %110, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %118, 1
  %120 = load ptr, ptr %112, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %120, 2
  %122 = load i32, ptr %114, align 4
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 %122, 3
  %124 = load ptr, ptr %30, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %124, 0
  %126 = load ptr, ptr %28, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %126, 1
  %128 = load ptr, ptr %35, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %128, 2
  %130 = load i32, ptr %29, align 4
  %131 = insertvalue { ptr, ptr, ptr, i32 } %129, i32 %130, 3
  %132 = alloca [2 x ptr], align 8
  %133 = getelementptr [2 x ptr], ptr %132, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %133, align 8
  %134 = getelementptr [2 x ptr], ptr %132, i32 0, i32 1
  store ptr @_parameterization_String, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 4, ptr %132)
  %136 = call ptr @llvm.invariant.start.p0(i64 104, ptr %124)
  %137 = getelementptr ptr, ptr %124, i32 %130
  %138 = getelementptr ptr, ptr %137, i32 5
  %139 = load ptr, ptr %138, align 8
  %140 = alloca { ptr, ptr }, align 8
  %141 = getelementptr { ptr, ptr }, ptr %140, i32 0, i32 0
  store ptr @i32_typ, ptr %141, align 8
  %142 = getelementptr { ptr, ptr }, ptr %140, i32 0, i32 1
  store ptr %116, ptr %142, align 8
  %143 = call ptr @behavior_wrapper(ptr %139, { ptr, ptr, ptr, i32 } %131, ptr %140)
  call void %143({ ptr, ptr, ptr, i32 } %131, { ptr, ptr, ptr, i32 } %131, ptr %132, i32 %106, { ptr, ptr, ptr, i32 } %123) #17
  %144 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 0
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, i160 } undef, ptr %145, 0
  %147 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 1
  %148 = load i160, ptr %147, align 4
  %149 = insertvalue { ptr, i160 } %146, i160 %148, 1
  %150 = call ptr @get_current_coroutine()
  %151 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %150, i32 0, i32 4
  store { ptr, i160 } %149, ptr %151, align 8
  call void @coroutine_yield(ptr %150)
  %152 = load { ptr, i160 }, ptr %151, align 8
  %153 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %152, ptr %153, align 8
  ret void
}

define { ptr, i160 } @Array_unchecked_index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 664, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr } %28(ptr %20) #16
  %30 = alloca ptr, align 8
  store { ptr } %29, ptr %30, align 8
  %31 = load ptr, ptr %11, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 664, ptr %32)
  %34 = load i32, ptr %17, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = load ptr, ptr %35, align 8
  %37 = call ptr @typegetter_wrapper(ptr %36, ptr %31)
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr ptr, ptr %38, i32 9
  %40 = load ptr, ptr %39, align 8
  %41 = call { i64, i64 } @size_wrapper(ptr %40, ptr %37)
  %42 = extractvalue { i64, i64 } %41, 0
  %43 = load ptr, ptr %30, align 8
  %44 = load i32, ptr %19, align 4
  %45 = sext i32 %44 to i64
  %46 = mul i64 %42, %45
  %47 = getelementptr i8, ptr %43, i64 %46
  %48 = load ptr, ptr %37, align 8
  %49 = getelementptr ptr, ptr %48, i32 7
  %50 = load ptr, ptr %49, align 8
  %51 = call { ptr, i160 } @box_wrapper(ptr %50, ptr %47, ptr %37)
  %52 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %51, ptr %52, align 8
  %53 = alloca i160, align 8
  %54 = alloca ptr, align 8
  %55 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  store ptr %56, ptr %54, align 8
  %57 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 1
  %58 = load i160, ptr %57, align 4
  store i160 %58, ptr %53, align 4
  %59 = load ptr, ptr %54, align 8
  %60 = insertvalue { ptr, i160 } undef, ptr %59, 0
  %61 = load i160, ptr %53, align 4
  %62 = insertvalue { ptr, i160 } %60, i160 %61, 1
  ret { ptr, i160 } %62
}

define void @Array_unchecked_insert_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %21, align 8
  %22 = alloca i160, align 8
  %23 = alloca ptr, align 8
  %24 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  store ptr %25, ptr %23, align 8
  %26 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %27 = load i160, ptr %26, align 4
  store i160 %27, ptr %22, align 4
  %28 = load ptr, ptr %12, align 8
  %29 = load ptr, ptr %7, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 664, ptr %29)
  %31 = load i32, ptr %18, align 4
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call { ptr } %36(ptr %28) #16
  %38 = alloca ptr, align 8
  store { ptr } %37, ptr %38, align 8
  %39 = load ptr, ptr %12, align 8
  %40 = load ptr, ptr %7, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 664, ptr %40)
  %42 = load i32, ptr %18, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = load ptr, ptr %43, align 8
  %45 = call ptr @typegetter_wrapper(ptr %44, ptr %39)
  %46 = alloca i160, align 8
  %47 = alloca ptr, align 8
  %48 = load ptr, ptr %23, align 8
  store ptr %48, ptr %47, align 8
  %49 = load i160, ptr %22, align 4
  store i160 %49, ptr %46, align 4
  %50 = load ptr, ptr %45, align 8
  %51 = getelementptr ptr, ptr %50, i32 9
  %52 = load ptr, ptr %51, align 8
  %53 = call { i64, i64 } @size_wrapper(ptr %52, ptr %45)
  %54 = extractvalue { i64, i64 } %53, 0
  %55 = load ptr, ptr %38, align 8
  %56 = load i32, ptr %20, align 4
  %57 = sext i32 %56 to i64
  %58 = mul i64 %54, %57
  %59 = getelementptr i8, ptr %55, i64 %58
  %60 = load ptr, ptr %47, align 8
  %61 = insertvalue { ptr, i160 } undef, ptr %60, 0
  %62 = load i160, ptr %46, align 4
  %63 = insertvalue { ptr, i160 } %61, i160 %62, 1
  %64 = load ptr, ptr %45, align 8
  %65 = getelementptr ptr, ptr %64, i32 8
  %66 = load ptr, ptr %65, align 8
  call void @unbox_wrapper(ptr %66, { ptr, i160 } %63, ptr %45, ptr %59)
  ret void
}

define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 664, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @typegetter_wrapper(ptr %23, ptr %18)
  %25 = alloca [2 x ptr], align 8
  store ptr @ArrayIterator, ptr %25, align 8
  %26 = getelementptr ptr, ptr %25, i32 1
  store ptr %24, ptr %26, align 8
  %27 = load ptr, ptr %25, align 8
  %28 = getelementptr ptr, ptr %27, i32 6
  %29 = load ptr, ptr %28, align 8
  %30 = call { i64, i64 } @size_wrapper(ptr %29, ptr %25)
  %31 = extractvalue { i64, i64 } %30, 0
  %32 = call ptr @bump_malloc(i64 %31)
  store ptr %24, ptr %32, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 8, ptr %32)
  %34 = alloca i32, align 4
  %35 = alloca ptr, align 8
  %36 = alloca ptr, align 8
  %37 = alloca ptr, align 8
  store ptr @ArrayIterator, ptr %37, align 8
  store ptr %32, ptr %36, align 8
  store i32 10, ptr %34, align 4
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %7, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %42 = load ptr, ptr %10, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %44 = load ptr, ptr %13, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %46 = load i32, ptr %16, align 4
  store i32 %46, ptr %45, align 4
  call void @set_offset(ptr %38, ptr @Array)
  %47 = load ptr, ptr %39, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %49 = load ptr, ptr %41, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 1
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 2
  %53 = load i32, ptr %45, align 4
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %53, 3
  %55 = load ptr, ptr %37, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = load ptr, ptr %36, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 1
  %59 = load ptr, ptr %35, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 2
  %61 = load i32, ptr %34, align 4
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %61, 3
  %63 = load ptr, ptr %10, align 8
  %64 = load ptr, ptr %5, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 664, ptr %64)
  %66 = load i32, ptr %16, align 4
  %67 = getelementptr ptr, ptr %64, i32 %66
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %63)
  %70 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %71 = getelementptr [3 x ptr], ptr %70, i32 0, i32 1
  store ptr %69, ptr %71, align 8
  %72 = getelementptr [3 x ptr], ptr %70, i32 0, i32 2
  store ptr null, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %70)
  store ptr @Array, ptr %70, align 8
  %74 = alloca [1 x ptr], align 8
  %75 = getelementptr [1 x ptr], ptr %74, i32 0, i32 0
  store ptr %70, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 1, ptr %74)
  %77 = call ptr @llvm.invariant.start.p0(i64 80, ptr %55)
  %78 = getelementptr ptr, ptr %55, i32 %61
  %79 = getelementptr ptr, ptr %78, i32 3
  %80 = load ptr, ptr %79, align 8
  %81 = alloca { ptr }, align 8
  %82 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  store ptr %47, ptr %82, align 8
  %83 = call ptr @behavior_wrapper(ptr %80, { ptr, ptr, ptr, i32 } %62, ptr %81)
  call void %83({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr %74, { ptr, ptr, ptr, i32 } %54) #17
  %84 = alloca { ptr, ptr, ptr, i32 }, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %86 = load ptr, ptr %37, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %88 = load ptr, ptr %36, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %90 = load ptr, ptr %35, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %92 = load i32, ptr %34, align 4
  store i32 %92, ptr %91, align 4
  call void @set_offset(ptr %84, ptr @Iterator)
  %93 = load ptr, ptr %85, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = load ptr, ptr %87, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 1
  %97 = load ptr, ptr %89, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 2
  %99 = load i32, ptr %91, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %99, 3
  ret { ptr, ptr, ptr, i32 } %100
}

define { ptr, ptr, ptr, i32 } @Array_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = alloca i32, align 4
  store i32 6, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([5 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <5 x i8>, ptr @fbmal_Array, align 8
  store <5 x i8> %33, ptr %32, align 8
  %34 = alloca i32, align 4
  store i32 5, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 6, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca i32, align 4
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  store ptr @String, ptr %46, align 8
  store ptr %42, ptr %45, align 8
  store i32 10, ptr %43, align 4
  %47 = alloca i32, align 4
  store i32 5, ptr %47, align 4
  %48 = alloca i32, align 4
  store i32 6, ptr %48, align 4
  %49 = load ptr, ptr %24, align 8
  %50 = insertvalue { ptr } undef, ptr %49, 0
  %51 = load i32, ptr %47, align 4
  %52 = load i32, ptr %48, align 4
  %53 = load ptr, ptr %46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %45, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %44, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %43, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca [3 x ptr], align 8
  %62 = getelementptr [3 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %61, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %61, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr %61)
  %66 = call ptr @llvm.invariant.start.p0(i64 632, ptr %53)
  %67 = getelementptr ptr, ptr %53, i32 %59
  %68 = getelementptr ptr, ptr %67, i32 6
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr, ptr, ptr }, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 2
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %60, ptr %70)
  call void %74({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr } %50, i32 %51, i32 %52) #17
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %77 = load ptr, ptr %46, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %79 = load ptr, ptr %45, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %81 = load ptr, ptr %44, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %83 = load i32, ptr %43, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %75, ptr @String)
  %84 = load ptr, ptr %76, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %78, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %80, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %82, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  ret { ptr, ptr, ptr, i32 } %91
}

define { i64, i64 } @_data_size_ArrayIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ArrayIterator_field_ArrayIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Array, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Array to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 5, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [10 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ArrayIterator)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Array)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @Array)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 80, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %34, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %36, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %38, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %40, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %42, { ptr, ptr, ptr, i32 } %58) #15
  %59 = alloca i32, align 4
  store i32 0, ptr %59, align 4
  %60 = load ptr, ptr %11, align 8
  %61 = load ptr, ptr %6, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 80, ptr %61)
  %63 = load i32, ptr %17, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load i32, ptr %59, align 4
  call void %68(ptr %60, i32 %69) #15
  ret void
}

define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca [0 x i8], align 1
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca { ptr, i160 }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem21 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  store ptr %25, ptr %.reg2mem13, align 8
  %26 = load ptr, ptr %24, align 8
  %.reload20 = load ptr, ptr %.reg2mem13, align 8
  store ptr %26, ptr %.reload20, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr %31, ptr %.reg2mem5, align 8
  %32 = load i32, ptr %30, align 4
  %.reload12 = load ptr, ptr %.reg2mem5, align 8
  store i32 %32, ptr %.reload12, align 4
  call void @set_offset(ptr %20, ptr @ArrayIterator)
  %.reload19 = load ptr, ptr %.reg2mem13, align 8
  %33 = load ptr, ptr %.reload19, align 8
  %34 = load ptr, ptr %20, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 80, ptr %34)
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  %36 = load i32, ptr %.reload11, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = call i32 %41(ptr %33) #16
  %43 = alloca i32, align 4
  store i32 %42, ptr %43, align 4
  %.reload18 = load ptr, ptr %.reg2mem13, align 8
  %44 = load ptr, ptr %.reload18, align 8
  %45 = load ptr, ptr %20, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 80, ptr %45)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %47 = load i32, ptr %.reload10, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call { ptr, ptr, ptr, i32 } %52(ptr %44) #16
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %53, ptr %54, align 8
  call void @assume_offset(ptr %54, ptr @Array)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = alloca [0 x ptr], align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 0, ptr %67)
  %69 = call ptr @llvm.invariant.start.p0(i64 664, ptr %56)
  %70 = getelementptr ptr, ptr %56, i32 %65
  %71 = getelementptr ptr, ptr %70, i32 9
  %72 = load ptr, ptr %71, align 8
  %73 = alloca {}, align 8
  %74 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %66, ptr %73)
  %75 = call i32 %74({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67) #17
  %76 = alloca i32, align 4
  store i32 %75, ptr %76, align 4
  %77 = load i32, ptr %43, align 4
  %78 = load i32, ptr %76, align 4
  %79 = icmp sge i32 %77, %78
  %80 = alloca i1, align 1
  store i1 %79, ptr %80, align 1
  %81 = load i1, ptr %80, align 1
  br i1 %81, label %82, label %88

82:                                               ; preds = %3
  %83 = load [0 x i8], ptr %4, align 1
  store [0 x i8] %83, ptr %5, align 1
  store ptr @nil_typ, ptr %6, align 8
  %84 = load ptr, ptr %6, align 8
  %85 = insertvalue { ptr, i160 } undef, ptr %84, 0
  %86 = load i160, ptr %5, align 4
  %87 = insertvalue { ptr, i160 } %85, i160 %86, 1
  store { ptr, i160 } %87, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem21, align 8
  br label %165

88:                                               ; preds = %3
  %.reload17 = load ptr, ptr %.reg2mem13, align 8
  %89 = load ptr, ptr %.reload17, align 8
  %90 = load ptr, ptr %20, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 80, ptr %90)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %92 = load i32, ptr %.reload9, align 4
  %93 = getelementptr ptr, ptr %90, i32 %92
  %94 = getelementptr ptr, ptr %93, i32 2
  %95 = load ptr, ptr %94, align 8
  %96 = getelementptr { ptr, ptr }, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = call i32 %97(ptr %89) #16
  store i32 %98, ptr %7, align 4
  store i32 1, ptr %8, align 4
  %99 = load i32, ptr %7, align 4
  %100 = load i32, ptr %8, align 4
  %101 = add i32 %99, %100
  store i32 %101, ptr %9, align 4
  %.reload16 = load ptr, ptr %.reg2mem13, align 8
  %102 = load ptr, ptr %.reload16, align 8
  %103 = load ptr, ptr %20, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 80, ptr %103)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %105 = load i32, ptr %.reload8, align 4
  %106 = getelementptr ptr, ptr %103, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = load i32, ptr %9, align 4
  call void %110(ptr %102, i32 %111) #15
  %.reload15 = load ptr, ptr %.reg2mem13, align 8
  %112 = load ptr, ptr %.reload15, align 8
  %113 = load ptr, ptr %20, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 80, ptr %113)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %115 = load i32, ptr %.reload7, align 4
  %116 = getelementptr ptr, ptr %113, i32 %115
  %117 = getelementptr ptr, ptr %116, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = call i32 %120(ptr %112) #16
  store i32 %121, ptr %10, align 4
  store i32 1, ptr %11, align 4
  %122 = load i32, ptr %10, align 4
  %123 = load i32, ptr %11, align 4
  %124 = sub i32 %122, %123
  store i32 %124, ptr %12, align 4
  %125 = load i32, ptr %12, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %126 = load ptr, ptr %.reload14, align 8
  %127 = load ptr, ptr %20, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 80, ptr %127)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %129 = load i32, ptr %.reload6, align 4
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr, ptr }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = call { ptr, ptr, ptr, i32 } %134(ptr %126) #16
  store { ptr, ptr, ptr, i32 } %135, ptr %13, align 8
  call void @assume_offset(ptr %13, ptr @Array)
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %137, 0
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 1
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %143, 2
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %146 = load i32, ptr %145, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 %146, 3
  %148 = getelementptr [1 x ptr], ptr %14, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %148, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 1, ptr %14)
  %150 = call ptr @llvm.invariant.start.p0(i64 664, ptr %137)
  %151 = getelementptr ptr, ptr %137, i32 %146
  %152 = getelementptr ptr, ptr %151, i32 17
  %153 = load ptr, ptr %152, align 8
  %154 = getelementptr { ptr }, ptr %15, i32 0, i32 0
  store ptr @i32_typ, ptr %154, align 8
  %155 = call ptr @behavior_wrapper(ptr %153, { ptr, ptr, ptr, i32 } %147, ptr %15)
  %156 = call { ptr, i160 } %155({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %14, i32 %125) #17
  store { ptr, i160 } %156, ptr %16, align 8
  %157 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %158 = load ptr, ptr %157, align 8
  store ptr %158, ptr %18, align 8
  %159 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %160 = load i160, ptr %159, align 4
  store i160 %160, ptr %17, align 4
  %161 = load ptr, ptr %18, align 8
  %162 = insertvalue { ptr, i160 } undef, ptr %161, 0
  %163 = load i160, ptr %17, align 4
  %164 = insertvalue { ptr, i160 } %162, i160 %163, 1
  store { ptr, i160 } %164, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem21, align 8
  br label %165

165:                                              ; preds = %88, %82
  %.reload22 = load { ptr, i160 }, ptr %.reg2mem21, align 8
  store { ptr, i160 } %.reload22, ptr %.reg2mem, align 8
  br label %166

166:                                              ; preds = %165
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i32 @ArrayIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @ArrayIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ArrayIterator_setter_array(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define i32 @Array_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i32, ptr %19, align 4
  ret i32 %20
}

define void @Array_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca i32, align 4
  store i32 %1, ptr %21, align 4
  %22 = load i32, ptr %21, align 4
  store i32 %22, ptr %20, align 4
  ret void
}

define i32 @Array_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Array_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define { ptr } @Array_getter_buffer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @Array_setter_buffer(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { i64, i64 } @_data_size_FileSystemError(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FileSystemError_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 8, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [26 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FileSystemError_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [26 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @FileSystemError_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 1
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 2
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 0
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 1
  %16 = load i64, ptr %12, align 4
  %17 = load i64, ptr %13, align 4
  %18 = load ptr, ptr %14, align 8
  %19 = load ptr, ptr %15, align 8
  %20 = load i64, ptr @String, align 4
  %21 = call i1 @subtype_test_wrapper(ptr %18, i64 %17, i64 %16, i64 %20, i64 ptrtoint (ptr @String to i64), ptr %19)
  store i1 %21, ptr %3, align 1
  store i32 10, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [26 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FileSystemError_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 11, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [26 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @FileSystemError_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [26 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define { ptr, ptr, ptr, i32 } @FileSystemError_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @FileSystemError_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @FileSystemError_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FileSystemError_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define i32 @FileSystemError_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @FileSystemError_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_File(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @File_B_init_nameString_modeString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @String, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @String to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @String, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @String to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 12, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [20 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @File_B__set_mode_modeString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 13, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [20 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @File_B_reopen_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 14, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [20 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @File_B_close_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 15, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [20 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @File_B_size_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [20 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @File_B_read_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 17, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [20 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @File_B_read_byte_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 18, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [20 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @File_B_write_textString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [20 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @File_init_nameString_modeString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @File)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @String)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @String)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 160, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #15
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @String)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %62, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %68, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %71, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @String)
  %82 = load ptr, ptr %12, align 8
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 160, ptr %83)
  %85 = load i32, ptr %18, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %74, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %76, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %80, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  call void %90(ptr %82, { ptr, ptr, ptr, i32 } %98) #15
  %99 = alloca i1, align 1
  store i1 false, ptr %99, align 1
  %100 = load ptr, ptr %12, align 8
  %101 = load ptr, ptr %7, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 160, ptr %101)
  %103 = load i32, ptr %18, align 4
  %104 = getelementptr ptr, ptr %101, i32 %103
  %105 = getelementptr ptr, ptr %104, i32 3
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr { ptr, ptr }, ptr %106, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load i1, ptr %99, align 1
  call void %108(ptr %100, i1 %109) #15
  %110 = load ptr, ptr %12, align 8
  %111 = load ptr, ptr %7, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 160, ptr %111)
  %113 = load i32, ptr %18, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call { ptr, ptr, ptr, i32 } %117(ptr %110) #16
  %119 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %118, ptr %119, align 8
  call void @assume_offset(ptr %119, ptr @String)
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %121, 0
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 1
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %127, 2
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %130 = load i32, ptr %129, align 4
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 %130, 3
  %132 = alloca [0 x ptr], align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 0, ptr %132)
  %134 = call ptr @llvm.invariant.start.p0(i64 632, ptr %121)
  %135 = getelementptr ptr, ptr %121, i32 %130
  %136 = getelementptr ptr, ptr %135, i32 10
  %137 = load ptr, ptr %136, align 8
  %138 = alloca {}, align 8
  %139 = call ptr @behavior_wrapper(ptr %137, { ptr, ptr, ptr, i32 } %131, ptr %138)
  %140 = call { ptr } %139({ ptr, ptr, ptr, i32 } %131, { ptr, ptr, ptr, i32 } %131, ptr %132) #17
  %141 = alloca ptr, align 8
  store { ptr } %140, ptr %141, align 8
  %142 = load ptr, ptr %12, align 8
  %143 = load ptr, ptr %7, align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 160, ptr %143)
  %145 = load i32, ptr %18, align 4
  %146 = getelementptr ptr, ptr %143, i32 %145
  %147 = getelementptr ptr, ptr %146, i32 1
  %148 = load ptr, ptr %147, align 8
  %149 = getelementptr { ptr, ptr }, ptr %148, i32 0, i32 0
  %150 = load ptr, ptr %149, align 8
  %151 = call { ptr, ptr, ptr, i32 } %150(ptr %142) #16
  %152 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %151, ptr %152, align 8
  call void @assume_offset(ptr %152, ptr @String)
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %154 = load ptr, ptr %153, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %154, 0
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %157, 1
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %160, 2
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %163 = load i32, ptr %162, align 4
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, i32 %163, 3
  %165 = alloca [0 x ptr], align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 0, ptr %165)
  %167 = call ptr @llvm.invariant.start.p0(i64 632, ptr %154)
  %168 = getelementptr ptr, ptr %154, i32 %163
  %169 = getelementptr ptr, ptr %168, i32 10
  %170 = load ptr, ptr %169, align 8
  %171 = alloca {}, align 8
  %172 = call ptr @behavior_wrapper(ptr %170, { ptr, ptr, ptr, i32 } %164, ptr %171)
  %173 = call { ptr } %172({ ptr, ptr, ptr, i32 } %164, { ptr, ptr, ptr, i32 } %164, ptr %165) #17
  %174 = alloca ptr, align 8
  store { ptr } %173, ptr %174, align 8
  %175 = load ptr, ptr %141, align 8
  %176 = insertvalue { ptr } undef, ptr %175, 0
  %177 = load ptr, ptr %174, align 8
  %178 = insertvalue { ptr } undef, ptr %177, 0
  %179 = call { ptr } @fopen({ ptr } %176, { ptr } %178)
  %180 = alloca ptr, align 8
  store { ptr } %179, ptr %180, align 8
  %181 = load ptr, ptr %12, align 8
  %182 = load ptr, ptr %7, align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 160, ptr %182)
  %184 = load i32, ptr %18, align 4
  %185 = getelementptr ptr, ptr %182, i32 %184
  %186 = getelementptr ptr, ptr %185, i32 2
  %187 = load ptr, ptr %186, align 8
  %188 = getelementptr { ptr, ptr }, ptr %187, i32 0, i32 1
  %189 = load ptr, ptr %188, align 8
  %190 = load ptr, ptr %180, align 8
  %191 = insertvalue { ptr } undef, ptr %190, 0
  call void %189(ptr %181, { ptr } %191) #15
  %192 = load ptr, ptr %12, align 8
  %193 = load ptr, ptr %7, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 160, ptr %193)
  %195 = load i32, ptr %18, align 4
  %196 = getelementptr ptr, ptr %193, i32 %195
  %197 = getelementptr ptr, ptr %196, i32 2
  %198 = load ptr, ptr %197, align 8
  %199 = getelementptr { ptr, ptr }, ptr %198, i32 0, i32 0
  %200 = load ptr, ptr %199, align 8
  %201 = call { ptr } %200(ptr %192) #16
  %202 = alloca ptr, align 8
  store { ptr } %201, ptr %202, align 8
  %203 = load ptr, ptr %202, align 8
  %204 = ptrtoint ptr %203 to i64
  %205 = icmp eq i64 %204, ptrtoint (ptr @nil_typ to i64)
  %206 = icmp eq i64 %204, 0
  %207 = or i1 %205, %206
  %208 = alloca i1, align 1
  store i1 %207, ptr %208, align 1
  %209 = alloca i1, align 1
  store i1 true, ptr %209, align 1
  %210 = load ptr, ptr %12, align 8
  %211 = load ptr, ptr %7, align 8
  %212 = call ptr @llvm.invariant.start.p0(i64 160, ptr %211)
  %213 = load i32, ptr %18, align 4
  %214 = getelementptr ptr, ptr %211, i32 %213
  %215 = getelementptr ptr, ptr %214, i32 3
  %216 = load ptr, ptr %215, align 8
  %217 = getelementptr { ptr, ptr }, ptr %216, i32 0, i32 1
  %218 = load ptr, ptr %217, align 8
  %219 = load i1, ptr %209, align 1
  call void %218(ptr %210, i1 %219) #15
  ret void
}

define void @File__set_mode_modeString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem4 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  store ptr %10, ptr %.reg2mem12, align 8
  %11 = load ptr, ptr %9, align 8
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  store ptr %11, ptr %.reload14, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  store ptr %13, ptr %.reg2mem7, align 8
  %14 = load ptr, ptr %12, align 8
  %.reload11 = load ptr, ptr %.reg2mem7, align 8
  store ptr %14, ptr %.reload11, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  store ptr %16, ptr %.reg2mem4, align 8
  %17 = load ptr, ptr %15, align 8
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %17, ptr %.reload6, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  store ptr %19, ptr %.reg2mem, align 8
  %20 = load i32, ptr %18, align 4
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  store i32 %20, ptr %.reload3, align 4
  call void @set_offset(ptr %8, ptr @File)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @String)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %24, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %39 = load ptr, ptr %27, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %41 = load ptr, ptr %30, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %43 = load i32, ptr %33, align 4
  store i32 %43, ptr %42, align 4
  call void @set_offset(ptr %35, ptr @String)
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  %44 = load ptr, ptr %.reload10, align 8
  %45 = load ptr, ptr %8, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 160, ptr %45)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %47 = load i32, ptr %.reload2, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %36, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %38, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %40, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %42, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  call void %52(ptr %44, { ptr, ptr, ptr, i32 } %60) #15
  %61 = alloca i1, align 1
  store i1 false, ptr %61, align 1
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %62 = load ptr, ptr %.reload9, align 8
  %63 = load ptr, ptr %8, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 160, ptr %63)
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %65 = load i32, ptr %.reload1, align 4
  %66 = getelementptr ptr, ptr %63, i32 %65
  %67 = getelementptr ptr, ptr %66, i32 3
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr { ptr, ptr }, ptr %68, i32 0, i32 0
  %70 = load ptr, ptr %69, align 8
  %71 = call i1 %70(ptr %62) #16
  %72 = alloca i1, align 1
  store i1 %71, ptr %72, align 1
  %73 = load i1, ptr %61, align 1
  %74 = load i1, ptr %72, align 1
  %75 = icmp eq i1 %73, %74
  %76 = alloca i1, align 1
  store i1 %75, ptr %76, align 1
  %77 = load i1, ptr %76, align 1
  br i1 %77, label %78, label %79

78:                                               ; preds = %4
  br label %94

79:                                               ; preds = %4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %80 = load ptr, ptr %.reload13, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %82 = load ptr, ptr %.reload8, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 1
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %84 = load ptr, ptr %.reload5, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 2
  %.reload = load ptr, ptr %.reg2mem, align 8
  %86 = load i32, ptr %.reload, align 4
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %86, 3
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %89 = call ptr @llvm.invariant.start.p0(i64 160, ptr %80)
  %90 = getelementptr ptr, ptr %80, i32 %86
  %91 = getelementptr ptr, ptr %90, i32 6
  %92 = load ptr, ptr %91, align 8
  %93 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %87, ptr %6)
  call void %93({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } %87, ptr %5) #17
  br label %94

94:                                               ; preds = %79, %78
  ret void
}

define void @File_reopen_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @File)
  %18 = load ptr, ptr %7, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %18, 0
  %20 = load ptr, ptr %10, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %20, 1
  %22 = load ptr, ptr %13, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 2
  %24 = load i32, ptr %16, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %24, 3
  %26 = alloca [0 x ptr], align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 0, ptr %26)
  %28 = call ptr @llvm.invariant.start.p0(i64 160, ptr %18)
  %29 = getelementptr ptr, ptr %18, i32 %24
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  %32 = alloca {}, align 8
  %33 = call ptr @behavior_wrapper(ptr %31, { ptr, ptr, ptr, i32 } %25, ptr %32)
  call void %33({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr %26) #17
  %34 = load ptr, ptr %10, align 8
  %35 = load ptr, ptr %5, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 160, ptr %35)
  %37 = load i32, ptr %16, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = call { ptr, ptr, ptr, i32 } %41(ptr %34) #16
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %42, ptr %43, align 8
  call void @assume_offset(ptr %43, ptr @String)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = alloca [0 x ptr], align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 0, ptr %56)
  %58 = call ptr @llvm.invariant.start.p0(i64 632, ptr %45)
  %59 = getelementptr ptr, ptr %45, i32 %54
  %60 = getelementptr ptr, ptr %59, i32 10
  %61 = load ptr, ptr %60, align 8
  %62 = alloca {}, align 8
  %63 = call ptr @behavior_wrapper(ptr %61, { ptr, ptr, ptr, i32 } %55, ptr %62)
  %64 = call { ptr } %63({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %56) #17
  %65 = alloca ptr, align 8
  store { ptr } %64, ptr %65, align 8
  %66 = load ptr, ptr %10, align 8
  %67 = load ptr, ptr %5, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 160, ptr %67)
  %69 = load i32, ptr %16, align 4
  %70 = getelementptr ptr, ptr %67, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr, ptr, ptr, i32 } %74(ptr %66) #16
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %75, ptr %76, align 8
  call void @assume_offset(ptr %76, ptr @String)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 2
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %87, 3
  %89 = alloca [0 x ptr], align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 0, ptr %89)
  %91 = call ptr @llvm.invariant.start.p0(i64 632, ptr %78)
  %92 = getelementptr ptr, ptr %78, i32 %87
  %93 = getelementptr ptr, ptr %92, i32 10
  %94 = load ptr, ptr %93, align 8
  %95 = alloca {}, align 8
  %96 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %88, ptr %95)
  %97 = call { ptr } %96({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %89) #17
  %98 = alloca ptr, align 8
  store { ptr } %97, ptr %98, align 8
  %99 = load ptr, ptr %65, align 8
  %100 = insertvalue { ptr } undef, ptr %99, 0
  %101 = load ptr, ptr %98, align 8
  %102 = insertvalue { ptr } undef, ptr %101, 0
  %103 = call { ptr } @fopen({ ptr } %100, { ptr } %102)
  %104 = alloca ptr, align 8
  store { ptr } %103, ptr %104, align 8
  %105 = load ptr, ptr %10, align 8
  %106 = load ptr, ptr %5, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 160, ptr %106)
  %108 = load i32, ptr %16, align 4
  %109 = getelementptr ptr, ptr %106, i32 %108
  %110 = getelementptr ptr, ptr %109, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = load ptr, ptr %104, align 8
  %115 = insertvalue { ptr } undef, ptr %114, 0
  call void %113(ptr %105, { ptr } %115) #15
  %116 = load ptr, ptr %10, align 8
  %117 = load ptr, ptr %5, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 160, ptr %117)
  %119 = load i32, ptr %16, align 4
  %120 = getelementptr ptr, ptr %117, i32 %119
  %121 = getelementptr ptr, ptr %120, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = getelementptr { ptr, ptr }, ptr %122, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = call { ptr } %124(ptr %116) #16
  %126 = alloca ptr, align 8
  store { ptr } %125, ptr %126, align 8
  %127 = load ptr, ptr %126, align 8
  %128 = ptrtoint ptr %127 to i64
  %129 = icmp eq i64 %128, ptrtoint (ptr @nil_typ to i64)
  %130 = icmp eq i64 %128, 0
  %131 = or i1 %129, %130
  %132 = alloca i1, align 1
  store i1 %131, ptr %132, align 1
  %133 = alloca i1, align 1
  store i1 true, ptr %133, align 1
  %134 = load ptr, ptr %10, align 8
  %135 = load ptr, ptr %5, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 160, ptr %135)
  %137 = load i32, ptr %16, align 4
  %138 = getelementptr ptr, ptr %135, i32 %137
  %139 = getelementptr ptr, ptr %138, i32 3
  %140 = load ptr, ptr %139, align 8
  %141 = getelementptr { ptr, ptr }, ptr %140, i32 0, i32 1
  %142 = load ptr, ptr %141, align 8
  %143 = load i1, ptr %133, align 1
  call void %142(ptr %134, i1 %143) #15
  ret void
}

define void @File_close_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i1, align 1
  %7 = alloca i32, align 4
  %8 = alloca i1, align 1
  %9 = alloca [1 x ptr], align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca [1 x ptr], align 8
  %21 = alloca i32, align 4
  %22 = alloca ptr, align 8
  %23 = alloca ptr, align 8
  %24 = alloca ptr, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca [3 x ptr], align 8
  %28 = alloca { ptr, ptr, ptr }, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca [2 x ptr], align 8
  %31 = alloca { ptr, ptr }, align 8
  %32 = alloca { ptr, i160 }, align 8
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %33, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  store ptr %39, ptr %.reg2mem4, align 8
  %40 = load ptr, ptr %38, align 8
  %.reload8 = load ptr, ptr %.reg2mem4, align 8
  store ptr %40, ptr %.reload8, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  store ptr %45, ptr %.reg2mem, align 8
  %46 = load i32, ptr %44, align 4
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  store i32 %46, ptr %.reload3, align 4
  call void @set_offset(ptr %34, ptr @File)
  %47 = alloca i1, align 1
  store i1 false, ptr %47, align 1
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  %48 = load ptr, ptr %.reload7, align 8
  %49 = load ptr, ptr %34, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 160, ptr %49)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %51 = load i32, ptr %.reload2, align 4
  %52 = getelementptr ptr, ptr %49, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 3
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = call i1 %56(ptr %48) #16
  %58 = alloca i1, align 1
  store i1 %57, ptr %58, align 1
  %59 = load i1, ptr %47, align 1
  %60 = load i1, ptr %58, align 1
  %61 = icmp eq i1 %59, %60
  %62 = alloca i1, align 1
  store i1 %61, ptr %62, align 1
  %63 = load i1, ptr %62, align 1
  br i1 %63, label %64, label %65

64:                                               ; preds = %3
  br label %205

65:                                               ; preds = %3
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  %66 = load ptr, ptr %.reload6, align 8
  %67 = load ptr, ptr %34, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 160, ptr %67)
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %69 = load i32, ptr %.reload1, align 4
  %70 = getelementptr ptr, ptr %67, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr } %74(ptr %66) #16
  store { ptr } %75, ptr %4, align 8
  %76 = load ptr, ptr %4, align 8
  %77 = insertvalue { ptr } undef, ptr %76, 0
  %78 = call i32 @fclose({ ptr } %77)
  store i32 %78, ptr %5, align 4
  store i1 false, ptr %6, align 1
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %79 = load ptr, ptr %.reload5, align 8
  %80 = load ptr, ptr %34, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 160, ptr %80)
  %.reload = load ptr, ptr %.reg2mem, align 8
  %82 = load i32, ptr %.reload, align 4
  %83 = getelementptr ptr, ptr %80, i32 %82
  %84 = getelementptr ptr, ptr %83, i32 3
  %85 = load ptr, ptr %84, align 8
  %86 = getelementptr { ptr, ptr }, ptr %85, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = load i1, ptr %6, align 1
  call void %87(ptr %79, i1 %88) #15
  store i32 -1, ptr %7, align 4
  %89 = load i32, ptr %5, align 4
  %90 = load i32, ptr %7, align 4
  %91 = icmp eq i32 %89, %90
  store i1 %91, ptr %8, align 1
  %92 = load i1, ptr %8, align 1
  br i1 %92, label %93, label %._crit_edge

._crit_edge:                                      ; preds = %65
  br label %204

93:                                               ; preds = %65
  store ptr @FileSystemError, ptr %9, align 8
  %94 = load ptr, ptr %9, align 8
  %95 = getelementptr ptr, ptr %94, i32 6
  %96 = load ptr, ptr %95, align 8
  %97 = call { i64, i64 } @size_wrapper(ptr %96, ptr %9)
  %98 = extractvalue { i64, i64 } %97, 0
  %99 = call ptr @bump_malloc(i64 %98)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  store ptr @FileSystemError, ptr %10, align 8
  store ptr %99, ptr %100, align 8
  store i32 10, ptr %101, align 4
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = load ptr, ptr %100, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %105, 1
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 2
  %110 = load i32, ptr %101, align 4
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, i32 %110, 3
  %112 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %113 = call ptr @llvm.invariant.start.p0(i64 208, ptr %103)
  %114 = getelementptr ptr, ptr %103, i32 %110
  %115 = getelementptr ptr, ptr %114, i32 4
  %116 = load ptr, ptr %115, align 8
  %117 = call ptr @behavior_wrapper(ptr %116, { ptr, ptr, ptr, i32 } %111, ptr %12)
  call void %117({ ptr, ptr, ptr, i32 } %111, { ptr, ptr, ptr, i32 } %111, ptr %11) #17
  store i32 47, ptr %13, align 4
  store i32 11, ptr %14, align 4
  %118 = load i32, ptr %14, align 4
  %119 = sext i32 %118 to i64
  %120 = mul i64 %119, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %121 = call ptr @bump_malloc(i64 %120)
  store ptr %121, ptr %15, align 8
  %122 = getelementptr { ptr }, ptr %15, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  store ptr %123, ptr %16, align 8
  store i32 0, ptr %17, align 4
  %124 = load ptr, ptr %16, align 8
  %125 = load i32, ptr %17, align 4
  %126 = sext i32 %125 to i64
  %127 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %126
  %128 = getelementptr i8, ptr %124, i64 %127
  %129 = load <10 x i8>, ptr @npvbj_filesmini, align 16
  store <10 x i8> %129, ptr %128, align 16
  store i32 10, ptr %18, align 4
  store i32 11, ptr %19, align 4
  store ptr @String, ptr %20, align 8
  %130 = load ptr, ptr %20, align 8
  %131 = getelementptr ptr, ptr %130, i32 6
  %132 = load ptr, ptr %131, align 8
  %133 = call { i64, i64 } @size_wrapper(ptr %132, ptr %20)
  %134 = extractvalue { i64, i64 } %133, 0
  %135 = call ptr @bump_malloc(i64 %134)
  store ptr @String, ptr %24, align 8
  store ptr %135, ptr %23, align 8
  store i32 10, ptr %21, align 4
  store i32 10, ptr %25, align 4
  store i32 11, ptr %26, align 4
  %136 = load ptr, ptr %16, align 8
  %137 = insertvalue { ptr } undef, ptr %136, 0
  %138 = load i32, ptr %25, align 4
  %139 = load i32, ptr %26, align 4
  %140 = load ptr, ptr %24, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %140, 0
  %142 = load ptr, ptr %23, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %142, 1
  %144 = load ptr, ptr %22, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %144, 2
  %146 = load i32, ptr %21, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 %146, 3
  %148 = getelementptr [3 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %148, align 8
  %149 = getelementptr [3 x ptr], ptr %27, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %149, align 8
  %150 = getelementptr [3 x ptr], ptr %27, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 9, ptr %27)
  %152 = call ptr @llvm.invariant.start.p0(i64 632, ptr %140)
  %153 = getelementptr ptr, ptr %140, i32 %146
  %154 = getelementptr ptr, ptr %153, i32 6
  %155 = load ptr, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr }, ptr %28, i32 0, i32 0
  store ptr @buffer_typ, ptr %156, align 8
  %157 = getelementptr { ptr, ptr, ptr }, ptr %28, i32 0, i32 1
  store ptr @i32_typ, ptr %157, align 8
  %158 = getelementptr { ptr, ptr, ptr }, ptr %28, i32 0, i32 2
  store ptr @i32_typ, ptr %158, align 8
  %159 = call ptr @behavior_wrapper(ptr %155, { ptr, ptr, ptr, i32 } %147, ptr %28)
  call void %159({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %27, { ptr } %137, i32 %138, i32 %139) #17
  %160 = load i32, ptr %13, align 4
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %162 = load ptr, ptr %24, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %164 = load ptr, ptr %23, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %166 = load ptr, ptr %22, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %168 = load i32, ptr %21, align 4
  store i32 %168, ptr %167, align 4
  call void @set_offset(ptr %29, ptr @String)
  %169 = load ptr, ptr %161, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %169, 0
  %171 = load ptr, ptr %163, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } %170, ptr %171, 1
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 2
  %175 = load i32, ptr %167, align 4
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %175, 3
  %177 = load ptr, ptr %102, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %177, 0
  %179 = load ptr, ptr %100, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %179, 1
  %181 = load ptr, ptr %107, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %180, ptr %181, 2
  %183 = load i32, ptr %101, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, i32 %183, 3
  %185 = getelementptr [2 x ptr], ptr %30, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %185, align 8
  %186 = getelementptr [2 x ptr], ptr %30, i32 0, i32 1
  store ptr @_parameterization_String, ptr %186, align 8
  %187 = call ptr @llvm.invariant.start.p0(i64 4, ptr %30)
  %188 = call ptr @llvm.invariant.start.p0(i64 208, ptr %177)
  %189 = getelementptr ptr, ptr %177, i32 %183
  %190 = getelementptr ptr, ptr %189, i32 5
  %191 = load ptr, ptr %190, align 8
  %192 = getelementptr { ptr, ptr }, ptr %31, i32 0, i32 0
  store ptr @i32_typ, ptr %192, align 8
  %193 = getelementptr { ptr, ptr }, ptr %31, i32 0, i32 1
  store ptr %169, ptr %193, align 8
  %194 = call ptr @behavior_wrapper(ptr %191, { ptr, ptr, ptr, i32 } %184, ptr %31)
  call void %194({ ptr, ptr, ptr, i32 } %184, { ptr, ptr, ptr, i32 } %184, ptr %30, i32 %160, { ptr, ptr, ptr, i32 } %176) #17
  %195 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 0
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, i160 } undef, ptr %196, 0
  %198 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 1
  %199 = load i160, ptr %198, align 4
  %200 = insertvalue { ptr, i160 } %197, i160 %199, 1
  %201 = call ptr @get_current_coroutine()
  %202 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %201, i32 0, i32 4
  store { ptr, i160 } %200, ptr %202, align 8
  call void @coroutine_yield(ptr %201)
  %203 = load { ptr, i160 }, ptr %202, align 8
  store { ptr, i160 } %203, ptr %32, align 8
  br label %204

204:                                              ; preds = %._crit_edge, %93
  br label %205

205:                                              ; preds = %204, %64
  ret void
}

define i64 @File_size_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [1 x ptr], align 8
  %16 = alloca i32, align 4
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca [3 x ptr], align 8
  %23 = alloca { ptr, ptr, ptr }, align 8
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = alloca [2 x ptr], align 8
  %26 = alloca { ptr, ptr }, align 8
  %27 = alloca { ptr, i160 }, align 8
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca ptr, align 8
  %31 = alloca i64, align 8
  %32 = alloca ptr, align 8
  %33 = alloca i64, align 8
  %34 = alloca i32, align 4
  %35 = alloca ptr, align 8
  %36 = alloca i64, align 8
  %37 = alloca ptr, align 8
  %38 = alloca i32, align 4
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem6 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %39, align 8
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  store ptr %45, ptr %.reg2mem6, align 8
  %46 = load ptr, ptr %44, align 8
  %.reload12 = load ptr, ptr %.reg2mem6, align 8
  store ptr %46, ptr %.reload12, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  store ptr %51, ptr %.reg2mem, align 8
  %52 = load i32, ptr %50, align 4
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  store i32 %52, ptr %.reload5, align 4
  call void @set_offset(ptr %40, ptr @File)
  %53 = alloca i1, align 1
  store i1 false, ptr %53, align 1
  %.reload11 = load ptr, ptr %.reg2mem6, align 8
  %54 = load ptr, ptr %.reload11, align 8
  %55 = load ptr, ptr %40, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 160, ptr %55)
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %57 = load i32, ptr %.reload4, align 4
  %58 = getelementptr ptr, ptr %55, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 3
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call i1 %62(ptr %54) #16
  %64 = alloca i1, align 1
  store i1 %63, ptr %64, align 1
  %65 = load i1, ptr %53, align 1
  %66 = load i1, ptr %64, align 1
  %67 = icmp eq i1 %65, %66
  %68 = alloca i1, align 1
  store i1 %67, ptr %68, align 1
  %69 = load i1, ptr %68, align 1
  br i1 %69, label %70, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %181

70:                                               ; preds = %3
  store ptr @FileSystemError, ptr %4, align 8
  %71 = load ptr, ptr %4, align 8
  %72 = getelementptr ptr, ptr %71, i32 6
  %73 = load ptr, ptr %72, align 8
  %74 = call { i64, i64 } @size_wrapper(ptr %73, ptr %4)
  %75 = extractvalue { i64, i64 } %74, 0
  %76 = call ptr @bump_malloc(i64 %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  store ptr @FileSystemError, ptr %5, align 8
  store ptr %76, ptr %77, align 8
  store i32 10, ptr %78, align 4
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %82 = load ptr, ptr %77, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = load i32, ptr %78, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %87, 3
  %89 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %90 = call ptr @llvm.invariant.start.p0(i64 208, ptr %80)
  %91 = getelementptr ptr, ptr %80, i32 %87
  %92 = getelementptr ptr, ptr %91, i32 4
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @behavior_wrapper(ptr %93, { ptr, ptr, ptr, i32 } %88, ptr %7)
  call void %94({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %6) #17
  store i32 50, ptr %8, align 4
  store i32 11, ptr %9, align 4
  %95 = load i32, ptr %9, align 4
  %96 = sext i32 %95 to i64
  %97 = mul i64 %96, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %98 = call ptr @bump_malloc(i64 %97)
  store ptr %98, ptr %10, align 8
  %99 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  store ptr %100, ptr %11, align 8
  store i32 0, ptr %12, align 4
  %101 = load ptr, ptr %11, align 8
  %102 = load i32, ptr %12, align 4
  %103 = sext i32 %102 to i64
  %104 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %103
  %105 = getelementptr i8, ptr %101, i64 %104
  %106 = load <10 x i8>, ptr @wadry_filesmini, align 16
  store <10 x i8> %106, ptr %105, align 16
  store i32 10, ptr %13, align 4
  store i32 11, ptr %14, align 4
  store ptr @String, ptr %15, align 8
  %107 = load ptr, ptr %15, align 8
  %108 = getelementptr ptr, ptr %107, i32 6
  %109 = load ptr, ptr %108, align 8
  %110 = call { i64, i64 } @size_wrapper(ptr %109, ptr %15)
  %111 = extractvalue { i64, i64 } %110, 0
  %112 = call ptr @bump_malloc(i64 %111)
  store ptr @String, ptr %19, align 8
  store ptr %112, ptr %18, align 8
  store i32 10, ptr %16, align 4
  store i32 10, ptr %20, align 4
  store i32 11, ptr %21, align 4
  %113 = load ptr, ptr %11, align 8
  %114 = insertvalue { ptr } undef, ptr %113, 0
  %115 = load i32, ptr %20, align 4
  %116 = load i32, ptr %21, align 4
  %117 = load ptr, ptr %19, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = load ptr, ptr %18, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %121 = load ptr, ptr %17, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 2
  %123 = load i32, ptr %16, align 4
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %123, 3
  %125 = getelementptr [3 x ptr], ptr %22, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %125, align 8
  %126 = getelementptr [3 x ptr], ptr %22, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %126, align 8
  %127 = getelementptr [3 x ptr], ptr %22, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %127, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 9, ptr %22)
  %129 = call ptr @llvm.invariant.start.p0(i64 632, ptr %117)
  %130 = getelementptr ptr, ptr %117, i32 %123
  %131 = getelementptr ptr, ptr %130, i32 6
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr }, ptr %23, i32 0, i32 0
  store ptr @buffer_typ, ptr %133, align 8
  %134 = getelementptr { ptr, ptr, ptr }, ptr %23, i32 0, i32 1
  store ptr @i32_typ, ptr %134, align 8
  %135 = getelementptr { ptr, ptr, ptr }, ptr %23, i32 0, i32 2
  store ptr @i32_typ, ptr %135, align 8
  %136 = call ptr @behavior_wrapper(ptr %132, { ptr, ptr, ptr, i32 } %124, ptr %23)
  call void %136({ ptr, ptr, ptr, i32 } %124, { ptr, ptr, ptr, i32 } %124, ptr %22, { ptr } %114, i32 %115, i32 %116) #17
  %137 = load i32, ptr %8, align 4
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %139 = load ptr, ptr %19, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %141 = load ptr, ptr %18, align 8
  store ptr %141, ptr %140, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %143 = load ptr, ptr %17, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %145 = load i32, ptr %16, align 4
  store i32 %145, ptr %144, align 4
  call void @set_offset(ptr %24, ptr @String)
  %146 = load ptr, ptr %138, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %146, 0
  %148 = load ptr, ptr %140, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %148, 1
  %150 = load ptr, ptr %142, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %149, ptr %150, 2
  %152 = load i32, ptr %144, align 4
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, i32 %152, 3
  %154 = load ptr, ptr %79, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %154, 0
  %156 = load ptr, ptr %77, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %156, 1
  %158 = load ptr, ptr %84, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %158, 2
  %160 = load i32, ptr %78, align 4
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, i32 %160, 3
  %162 = getelementptr [2 x ptr], ptr %25, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %162, align 8
  %163 = getelementptr [2 x ptr], ptr %25, i32 0, i32 1
  store ptr @_parameterization_String, ptr %163, align 8
  %164 = call ptr @llvm.invariant.start.p0(i64 4, ptr %25)
  %165 = call ptr @llvm.invariant.start.p0(i64 208, ptr %154)
  %166 = getelementptr ptr, ptr %154, i32 %160
  %167 = getelementptr ptr, ptr %166, i32 5
  %168 = load ptr, ptr %167, align 8
  %169 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr @i32_typ, ptr %169, align 8
  %170 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %146, ptr %170, align 8
  %171 = call ptr @behavior_wrapper(ptr %168, { ptr, ptr, ptr, i32 } %161, ptr %26)
  call void %171({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr %25, i32 %137, { ptr, ptr, ptr, i32 } %153) #17
  %172 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, i160 } undef, ptr %173, 0
  %175 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %176 = load i160, ptr %175, align 4
  %177 = insertvalue { ptr, i160 } %174, i160 %176, 1
  %178 = call ptr @get_current_coroutine()
  %179 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %178, i32 0, i32 4
  store { ptr, i160 } %177, ptr %179, align 8
  call void @coroutine_yield(ptr %178)
  %180 = load { ptr, i160 }, ptr %179, align 8
  store { ptr, i160 } %180, ptr %27, align 8
  br label %181

181:                                              ; preds = %._crit_edge, %70
  store i32 2, ptr %28, align 4
  store i32 0, ptr %29, align 4
  %.reload10 = load ptr, ptr %.reg2mem6, align 8
  %182 = load ptr, ptr %.reload10, align 8
  %183 = load ptr, ptr %40, align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 160, ptr %183)
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %185 = load i32, ptr %.reload3, align 4
  %186 = getelementptr ptr, ptr %183, i32 %185
  %187 = getelementptr ptr, ptr %186, i32 2
  %188 = load ptr, ptr %187, align 8
  %189 = getelementptr { ptr, ptr }, ptr %188, i32 0, i32 0
  %190 = load ptr, ptr %189, align 8
  %191 = call { ptr } %190(ptr %182) #16
  store { ptr } %191, ptr %30, align 8
  %192 = load ptr, ptr %30, align 8
  %193 = insertvalue { ptr } undef, ptr %192, 0
  %194 = call i64 @ftell({ ptr } %193)
  store i64 %194, ptr %31, align 4
  %.reload9 = load ptr, ptr %.reg2mem6, align 8
  %195 = load ptr, ptr %.reload9, align 8
  %196 = load ptr, ptr %40, align 8
  %197 = call ptr @llvm.invariant.start.p0(i64 160, ptr %196)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %198 = load i32, ptr %.reload2, align 4
  %199 = getelementptr ptr, ptr %196, i32 %198
  %200 = getelementptr ptr, ptr %199, i32 2
  %201 = load ptr, ptr %200, align 8
  %202 = getelementptr { ptr, ptr }, ptr %201, i32 0, i32 0
  %203 = load ptr, ptr %202, align 8
  %204 = call { ptr } %203(ptr %195) #16
  store { ptr } %204, ptr %32, align 8
  store i64 0, ptr %33, align 4
  %205 = load ptr, ptr %32, align 8
  %206 = insertvalue { ptr } undef, ptr %205, 0
  %207 = load i64, ptr %33, align 4
  %208 = load i32, ptr %28, align 4
  %209 = call i32 @fseek({ ptr } %206, i64 %207, i32 %208)
  store i32 %209, ptr %34, align 4
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %210 = load ptr, ptr %.reload8, align 8
  %211 = load ptr, ptr %40, align 8
  %212 = call ptr @llvm.invariant.start.p0(i64 160, ptr %211)
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %213 = load i32, ptr %.reload1, align 4
  %214 = getelementptr ptr, ptr %211, i32 %213
  %215 = getelementptr ptr, ptr %214, i32 2
  %216 = load ptr, ptr %215, align 8
  %217 = getelementptr { ptr, ptr }, ptr %216, i32 0, i32 0
  %218 = load ptr, ptr %217, align 8
  %219 = call { ptr } %218(ptr %210) #16
  store { ptr } %219, ptr %35, align 8
  %220 = load ptr, ptr %35, align 8
  %221 = insertvalue { ptr } undef, ptr %220, 0
  %222 = call i64 @ftell({ ptr } %221)
  store i64 %222, ptr %36, align 4
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %223 = load ptr, ptr %.reload7, align 8
  %224 = load ptr, ptr %40, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 160, ptr %224)
  %.reload = load ptr, ptr %.reg2mem, align 8
  %226 = load i32, ptr %.reload, align 4
  %227 = getelementptr ptr, ptr %224, i32 %226
  %228 = getelementptr ptr, ptr %227, i32 2
  %229 = load ptr, ptr %228, align 8
  %230 = getelementptr { ptr, ptr }, ptr %229, i32 0, i32 0
  %231 = load ptr, ptr %230, align 8
  %232 = call { ptr } %231(ptr %223) #16
  store { ptr } %232, ptr %37, align 8
  %233 = load ptr, ptr %37, align 8
  %234 = insertvalue { ptr } undef, ptr %233, 0
  %235 = load i64, ptr %31, align 4
  %236 = load i32, ptr %29, align 4
  %237 = call i32 @fseek({ ptr } %234, i64 %235, i32 %236)
  store i32 %237, ptr %38, align 4
  %238 = load i64, ptr %36, align 4
  ret i64 %238
}

define { ptr, ptr, ptr, i32 } @File_read_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [1 x ptr], align 8
  %16 = alloca i32, align 4
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca [3 x ptr], align 8
  %23 = alloca { ptr, ptr, ptr }, align 8
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = alloca [2 x ptr], align 8
  %26 = alloca { ptr, ptr }, align 8
  %27 = alloca { ptr, i160 }, align 8
  %28 = alloca i32, align 4
  %29 = alloca ptr, align 8
  %30 = alloca i64, align 8
  %31 = alloca i32, align 4
  %32 = alloca [0 x ptr], align 8
  %33 = alloca {}, align 8
  %34 = alloca i64, align 8
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca ptr, align 8
  %39 = alloca ptr, align 8
  %40 = alloca i64, align 8
  %41 = alloca ptr, align 8
  %42 = alloca i64, align 8
  %43 = alloca i1, align 1
  %44 = alloca [1 x ptr], align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = alloca [0 x ptr], align 8
  %47 = alloca {}, align 8
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca ptr, align 8
  %51 = alloca ptr, align 8
  %52 = alloca i32, align 4
  %53 = alloca i32, align 4
  %54 = alloca i32, align 4
  %55 = alloca [1 x ptr], align 8
  %56 = alloca i32, align 4
  %57 = alloca ptr, align 8
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %62 = alloca [3 x ptr], align 8
  %63 = alloca { ptr, ptr, ptr }, align 8
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = alloca [2 x ptr], align 8
  %66 = alloca { ptr, ptr }, align 8
  %67 = alloca { ptr, i160 }, align 8
  %68 = alloca i32, align 4
  %69 = alloca [1 x ptr], align 8
  %70 = alloca i32, align 4
  %71 = alloca ptr, align 8
  %72 = alloca ptr, align 8
  %73 = alloca ptr, align 8
  %74 = alloca i32, align 4
  %75 = alloca [3 x ptr], align 8
  %76 = alloca { ptr, ptr, ptr }, align 8
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %78, align 8
  %79 = alloca { ptr, ptr, ptr, i32 }, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  store ptr %81, ptr %.reg2mem15, align 8
  %82 = load ptr, ptr %80, align 8
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  store ptr %82, ptr %.reload17, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  store ptr %84, ptr %.reg2mem9, align 8
  %85 = load ptr, ptr %83, align 8
  %.reload14 = load ptr, ptr %.reg2mem9, align 8
  store ptr %85, ptr %.reload14, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  store ptr %87, ptr %.reg2mem6, align 8
  %88 = load ptr, ptr %86, align 8
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  store ptr %88, ptr %.reload8, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  store ptr %90, ptr %.reg2mem, align 8
  %91 = load i32, ptr %89, align 4
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  store i32 %91, ptr %.reload5, align 4
  call void @set_offset(ptr %79, ptr @File)
  %92 = alloca i1, align 1
  store i1 false, ptr %92, align 1
  %.reload13 = load ptr, ptr %.reg2mem9, align 8
  %93 = load ptr, ptr %.reload13, align 8
  %94 = load ptr, ptr %79, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 160, ptr %94)
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %96 = load i32, ptr %.reload4, align 4
  %97 = getelementptr ptr, ptr %94, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 3
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = call i1 %101(ptr %93) #16
  %103 = alloca i1, align 1
  store i1 %102, ptr %103, align 1
  %104 = load i1, ptr %92, align 1
  %105 = load i1, ptr %103, align 1
  %106 = icmp eq i1 %104, %105
  %107 = alloca i1, align 1
  store i1 %106, ptr %107, align 1
  %108 = load i1, ptr %107, align 1
  br i1 %108, label %109, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %220

109:                                              ; preds = %3
  store ptr @FileSystemError, ptr %4, align 8
  %110 = load ptr, ptr %4, align 8
  %111 = getelementptr ptr, ptr %110, i32 6
  %112 = load ptr, ptr %111, align 8
  %113 = call { i64, i64 } @size_wrapper(ptr %112, ptr %4)
  %114 = extractvalue { i64, i64 } %113, 0
  %115 = call ptr @bump_malloc(i64 %114)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  store ptr @FileSystemError, ptr %5, align 8
  store ptr %115, ptr %116, align 8
  store i32 10, ptr %117, align 4
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %121 = load ptr, ptr %116, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 2
  %126 = load i32, ptr %117, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %126, 3
  %128 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %129 = call ptr @llvm.invariant.start.p0(i64 208, ptr %119)
  %130 = getelementptr ptr, ptr %119, i32 %126
  %131 = getelementptr ptr, ptr %130, i32 4
  %132 = load ptr, ptr %131, align 8
  %133 = call ptr @behavior_wrapper(ptr %132, { ptr, ptr, ptr, i32 } %127, ptr %7)
  call void %133({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %6) #17
  store i32 60, ptr %8, align 4
  store i32 11, ptr %9, align 4
  %134 = load i32, ptr %9, align 4
  %135 = sext i32 %134 to i64
  %136 = mul i64 %135, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %137 = call ptr @bump_malloc(i64 %136)
  store ptr %137, ptr %10, align 8
  %138 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  store ptr %139, ptr %11, align 8
  store i32 0, ptr %12, align 4
  %140 = load ptr, ptr %11, align 8
  %141 = load i32, ptr %12, align 4
  %142 = sext i32 %141 to i64
  %143 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %142
  %144 = getelementptr i8, ptr %140, i64 %143
  %145 = load <10 x i8>, ptr @rverw_filesmini, align 16
  store <10 x i8> %145, ptr %144, align 16
  store i32 10, ptr %13, align 4
  store i32 11, ptr %14, align 4
  store ptr @String, ptr %15, align 8
  %146 = load ptr, ptr %15, align 8
  %147 = getelementptr ptr, ptr %146, i32 6
  %148 = load ptr, ptr %147, align 8
  %149 = call { i64, i64 } @size_wrapper(ptr %148, ptr %15)
  %150 = extractvalue { i64, i64 } %149, 0
  %151 = call ptr @bump_malloc(i64 %150)
  store ptr @String, ptr %19, align 8
  store ptr %151, ptr %18, align 8
  store i32 10, ptr %16, align 4
  store i32 10, ptr %20, align 4
  store i32 11, ptr %21, align 4
  %152 = load ptr, ptr %11, align 8
  %153 = insertvalue { ptr } undef, ptr %152, 0
  %154 = load i32, ptr %20, align 4
  %155 = load i32, ptr %21, align 4
  %156 = load ptr, ptr %19, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %156, 0
  %158 = load ptr, ptr %18, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %158, 1
  %160 = load ptr, ptr %17, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %160, 2
  %162 = load i32, ptr %16, align 4
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, i32 %162, 3
  %164 = getelementptr [3 x ptr], ptr %22, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %164, align 8
  %165 = getelementptr [3 x ptr], ptr %22, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %165, align 8
  %166 = getelementptr [3 x ptr], ptr %22, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %166, align 8
  %167 = call ptr @llvm.invariant.start.p0(i64 9, ptr %22)
  %168 = call ptr @llvm.invariant.start.p0(i64 632, ptr %156)
  %169 = getelementptr ptr, ptr %156, i32 %162
  %170 = getelementptr ptr, ptr %169, i32 6
  %171 = load ptr, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr }, ptr %23, i32 0, i32 0
  store ptr @buffer_typ, ptr %172, align 8
  %173 = getelementptr { ptr, ptr, ptr }, ptr %23, i32 0, i32 1
  store ptr @i32_typ, ptr %173, align 8
  %174 = getelementptr { ptr, ptr, ptr }, ptr %23, i32 0, i32 2
  store ptr @i32_typ, ptr %174, align 8
  %175 = call ptr @behavior_wrapper(ptr %171, { ptr, ptr, ptr, i32 } %163, ptr %23)
  call void %175({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr %22, { ptr } %153, i32 %154, i32 %155) #17
  %176 = load i32, ptr %8, align 4
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %178 = load ptr, ptr %19, align 8
  store ptr %178, ptr %177, align 8
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %180 = load ptr, ptr %18, align 8
  store ptr %180, ptr %179, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %182 = load ptr, ptr %17, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %184 = load i32, ptr %16, align 4
  store i32 %184, ptr %183, align 4
  call void @set_offset(ptr %24, ptr @String)
  %185 = load ptr, ptr %177, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %185, 0
  %187 = load ptr, ptr %179, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, ptr %187, 1
  %189 = load ptr, ptr %181, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %189, 2
  %191 = load i32, ptr %183, align 4
  %192 = insertvalue { ptr, ptr, ptr, i32 } %190, i32 %191, 3
  %193 = load ptr, ptr %118, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = load ptr, ptr %116, align 8
  %196 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %195, 1
  %197 = load ptr, ptr %123, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %196, ptr %197, 2
  %199 = load i32, ptr %117, align 4
  %200 = insertvalue { ptr, ptr, ptr, i32 } %198, i32 %199, 3
  %201 = getelementptr [2 x ptr], ptr %25, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %201, align 8
  %202 = getelementptr [2 x ptr], ptr %25, i32 0, i32 1
  store ptr @_parameterization_String, ptr %202, align 8
  %203 = call ptr @llvm.invariant.start.p0(i64 4, ptr %25)
  %204 = call ptr @llvm.invariant.start.p0(i64 208, ptr %193)
  %205 = getelementptr ptr, ptr %193, i32 %199
  %206 = getelementptr ptr, ptr %205, i32 5
  %207 = load ptr, ptr %206, align 8
  %208 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr @i32_typ, ptr %208, align 8
  %209 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %185, ptr %209, align 8
  %210 = call ptr @behavior_wrapper(ptr %207, { ptr, ptr, ptr, i32 } %200, ptr %26)
  call void %210({ ptr, ptr, ptr, i32 } %200, { ptr, ptr, ptr, i32 } %200, ptr %25, i32 %176, { ptr, ptr, ptr, i32 } %192) #17
  %211 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %212 = load ptr, ptr %211, align 8
  %213 = insertvalue { ptr, i160 } undef, ptr %212, 0
  %214 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %215 = load i160, ptr %214, align 4
  %216 = insertvalue { ptr, i160 } %213, i160 %215, 1
  %217 = call ptr @get_current_coroutine()
  %218 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %217, i32 0, i32 4
  store { ptr, i160 } %216, ptr %218, align 8
  call void @coroutine_yield(ptr %217)
  %219 = load { ptr, i160 }, ptr %218, align 8
  store { ptr, i160 } %219, ptr %27, align 8
  br label %220

220:                                              ; preds = %._crit_edge, %109
  store i32 0, ptr %28, align 4
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %221 = load ptr, ptr %.reload12, align 8
  %222 = load ptr, ptr %79, align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 160, ptr %222)
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %224 = load i32, ptr %.reload3, align 4
  %225 = getelementptr ptr, ptr %222, i32 %224
  %226 = getelementptr ptr, ptr %225, i32 2
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr { ptr, ptr }, ptr %227, i32 0, i32 0
  %229 = load ptr, ptr %228, align 8
  %230 = call { ptr } %229(ptr %221) #16
  store { ptr } %230, ptr %29, align 8
  store i64 0, ptr %30, align 4
  %231 = load ptr, ptr %29, align 8
  %232 = insertvalue { ptr } undef, ptr %231, 0
  %233 = load i64, ptr %30, align 4
  %234 = load i32, ptr %28, align 4
  %235 = call i32 @fseek({ ptr } %232, i64 %233, i32 %234)
  store i32 %235, ptr %31, align 4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %236 = load ptr, ptr %.reload16, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %236, 0
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %238 = load ptr, ptr %.reload11, align 8
  %239 = insertvalue { ptr, ptr, ptr, i32 } %237, ptr %238, 1
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %240 = load ptr, ptr %.reload7, align 8
  %241 = insertvalue { ptr, ptr, ptr, i32 } %239, ptr %240, 2
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %242 = load i32, ptr %.reload2, align 4
  %243 = insertvalue { ptr, ptr, ptr, i32 } %241, i32 %242, 3
  %244 = call ptr @llvm.invariant.start.p0(i64 0, ptr %32)
  %245 = call ptr @llvm.invariant.start.p0(i64 160, ptr %236)
  %246 = getelementptr ptr, ptr %236, i32 %242
  %247 = getelementptr ptr, ptr %246, i32 8
  %248 = load ptr, ptr %247, align 8
  %249 = call ptr @behavior_wrapper(ptr %248, { ptr, ptr, ptr, i32 } %243, ptr %33)
  %250 = call i64 %249({ ptr, ptr, ptr, i32 } %243, { ptr, ptr, ptr, i32 } %243, ptr %32) #17
  store i64 %250, ptr %34, align 4
  %251 = load i64, ptr %34, align 4
  %252 = trunc i64 %251 to i32
  store i32 %252, ptr %35, align 4
  store i32 1, ptr %36, align 4
  %253 = load i32, ptr %35, align 4
  %254 = load i32, ptr %36, align 4
  %255 = add i32 %253, %254
  store i32 %255, ptr %37, align 4
  %256 = load i32, ptr %37, align 4
  %257 = sext i32 %256 to i64
  %258 = mul i64 %257, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %259 = call ptr @bump_malloc(i64 %258)
  store ptr %259, ptr %38, align 8
  %260 = getelementptr { ptr }, ptr %38, i32 0, i32 0
  %261 = load ptr, ptr %260, align 8
  store ptr %261, ptr %39, align 8
  store i64 1, ptr %40, align 4
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %262 = load ptr, ptr %.reload10, align 8
  %263 = load ptr, ptr %79, align 8
  %264 = call ptr @llvm.invariant.start.p0(i64 160, ptr %263)
  %.reload = load ptr, ptr %.reg2mem, align 8
  %265 = load i32, ptr %.reload, align 4
  %266 = getelementptr ptr, ptr %263, i32 %265
  %267 = getelementptr ptr, ptr %266, i32 2
  %268 = load ptr, ptr %267, align 8
  %269 = getelementptr { ptr, ptr }, ptr %268, i32 0, i32 0
  %270 = load ptr, ptr %269, align 8
  %271 = call { ptr } %270(ptr %262) #16
  store { ptr } %271, ptr %41, align 8
  %272 = load ptr, ptr %39, align 8
  %273 = insertvalue { ptr } undef, ptr %272, 0
  %274 = load i64, ptr %40, align 4
  %275 = load i64, ptr %34, align 4
  %276 = load ptr, ptr %41, align 8
  %277 = insertvalue { ptr } undef, ptr %276, 0
  %278 = call i64 @fread({ ptr } %273, i64 %274, i64 %275, { ptr } %277)
  store i64 %278, ptr %42, align 4
  %279 = load i64, ptr %42, align 4
  %280 = load i64, ptr %34, align 4
  %281 = icmp slt i64 %279, %280
  store i1 %281, ptr %43, align 1
  %282 = load i1, ptr %43, align 1
  br i1 %282, label %283, label %._crit_edge1

._crit_edge1:                                     ; preds = %220
  br label %394

283:                                              ; preds = %220
  store ptr @FileSystemError, ptr %44, align 8
  %284 = load ptr, ptr %44, align 8
  %285 = getelementptr ptr, ptr %284, i32 6
  %286 = load ptr, ptr %285, align 8
  %287 = call { i64, i64 } @size_wrapper(ptr %286, ptr %44)
  %288 = extractvalue { i64, i64 } %287, 0
  %289 = call ptr @bump_malloc(i64 %288)
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  store ptr @FileSystemError, ptr %45, align 8
  store ptr %289, ptr %290, align 8
  store i32 10, ptr %291, align 4
  %292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %293 = load ptr, ptr %292, align 8
  %294 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %293, 0
  %295 = load ptr, ptr %290, align 8
  %296 = insertvalue { ptr, ptr, ptr, i32 } %294, ptr %295, 1
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %298 = load ptr, ptr %297, align 8
  %299 = insertvalue { ptr, ptr, ptr, i32 } %296, ptr %298, 2
  %300 = load i32, ptr %291, align 4
  %301 = insertvalue { ptr, ptr, ptr, i32 } %299, i32 %300, 3
  %302 = call ptr @llvm.invariant.start.p0(i64 0, ptr %46)
  %303 = call ptr @llvm.invariant.start.p0(i64 208, ptr %293)
  %304 = getelementptr ptr, ptr %293, i32 %300
  %305 = getelementptr ptr, ptr %304, i32 4
  %306 = load ptr, ptr %305, align 8
  %307 = call ptr @behavior_wrapper(ptr %306, { ptr, ptr, ptr, i32 } %301, ptr %47)
  call void %307({ ptr, ptr, ptr, i32 } %301, { ptr, ptr, ptr, i32 } %301, ptr %46) #17
  store i32 68, ptr %48, align 4
  store i32 11, ptr %49, align 4
  %308 = load i32, ptr %49, align 4
  %309 = sext i32 %308 to i64
  %310 = mul i64 %309, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %311 = call ptr @bump_malloc(i64 %310)
  store ptr %311, ptr %50, align 8
  %312 = getelementptr { ptr }, ptr %50, i32 0, i32 0
  %313 = load ptr, ptr %312, align 8
  store ptr %313, ptr %51, align 8
  store i32 0, ptr %52, align 4
  %314 = load ptr, ptr %51, align 8
  %315 = load i32, ptr %52, align 4
  %316 = sext i32 %315 to i64
  %317 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %316
  %318 = getelementptr i8, ptr %314, i64 %317
  %319 = load <10 x i8>, ptr @xhmow_filesmini, align 16
  store <10 x i8> %319, ptr %318, align 16
  store i32 10, ptr %53, align 4
  store i32 11, ptr %54, align 4
  store ptr @String, ptr %55, align 8
  %320 = load ptr, ptr %55, align 8
  %321 = getelementptr ptr, ptr %320, i32 6
  %322 = load ptr, ptr %321, align 8
  %323 = call { i64, i64 } @size_wrapper(ptr %322, ptr %55)
  %324 = extractvalue { i64, i64 } %323, 0
  %325 = call ptr @bump_malloc(i64 %324)
  store ptr @String, ptr %59, align 8
  store ptr %325, ptr %58, align 8
  store i32 10, ptr %56, align 4
  store i32 10, ptr %60, align 4
  store i32 11, ptr %61, align 4
  %326 = load ptr, ptr %51, align 8
  %327 = insertvalue { ptr } undef, ptr %326, 0
  %328 = load i32, ptr %60, align 4
  %329 = load i32, ptr %61, align 4
  %330 = load ptr, ptr %59, align 8
  %331 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %330, 0
  %332 = load ptr, ptr %58, align 8
  %333 = insertvalue { ptr, ptr, ptr, i32 } %331, ptr %332, 1
  %334 = load ptr, ptr %57, align 8
  %335 = insertvalue { ptr, ptr, ptr, i32 } %333, ptr %334, 2
  %336 = load i32, ptr %56, align 4
  %337 = insertvalue { ptr, ptr, ptr, i32 } %335, i32 %336, 3
  %338 = getelementptr [3 x ptr], ptr %62, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %338, align 8
  %339 = getelementptr [3 x ptr], ptr %62, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %339, align 8
  %340 = getelementptr [3 x ptr], ptr %62, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %340, align 8
  %341 = call ptr @llvm.invariant.start.p0(i64 9, ptr %62)
  %342 = call ptr @llvm.invariant.start.p0(i64 632, ptr %330)
  %343 = getelementptr ptr, ptr %330, i32 %336
  %344 = getelementptr ptr, ptr %343, i32 6
  %345 = load ptr, ptr %344, align 8
  %346 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 0
  store ptr @buffer_typ, ptr %346, align 8
  %347 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 1
  store ptr @i32_typ, ptr %347, align 8
  %348 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 2
  store ptr @i32_typ, ptr %348, align 8
  %349 = call ptr @behavior_wrapper(ptr %345, { ptr, ptr, ptr, i32 } %337, ptr %63)
  call void %349({ ptr, ptr, ptr, i32 } %337, { ptr, ptr, ptr, i32 } %337, ptr %62, { ptr } %327, i32 %328, i32 %329) #17
  %350 = load i32, ptr %48, align 4
  %351 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %352 = load ptr, ptr %59, align 8
  store ptr %352, ptr %351, align 8
  %353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %354 = load ptr, ptr %58, align 8
  store ptr %354, ptr %353, align 8
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %356 = load ptr, ptr %57, align 8
  store ptr %356, ptr %355, align 8
  %357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %358 = load i32, ptr %56, align 4
  store i32 %358, ptr %357, align 4
  call void @set_offset(ptr %64, ptr @String)
  %359 = load ptr, ptr %351, align 8
  %360 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %359, 0
  %361 = load ptr, ptr %353, align 8
  %362 = insertvalue { ptr, ptr, ptr, i32 } %360, ptr %361, 1
  %363 = load ptr, ptr %355, align 8
  %364 = insertvalue { ptr, ptr, ptr, i32 } %362, ptr %363, 2
  %365 = load i32, ptr %357, align 4
  %366 = insertvalue { ptr, ptr, ptr, i32 } %364, i32 %365, 3
  %367 = load ptr, ptr %292, align 8
  %368 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %367, 0
  %369 = load ptr, ptr %290, align 8
  %370 = insertvalue { ptr, ptr, ptr, i32 } %368, ptr %369, 1
  %371 = load ptr, ptr %297, align 8
  %372 = insertvalue { ptr, ptr, ptr, i32 } %370, ptr %371, 2
  %373 = load i32, ptr %291, align 4
  %374 = insertvalue { ptr, ptr, ptr, i32 } %372, i32 %373, 3
  %375 = getelementptr [2 x ptr], ptr %65, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %375, align 8
  %376 = getelementptr [2 x ptr], ptr %65, i32 0, i32 1
  store ptr @_parameterization_String, ptr %376, align 8
  %377 = call ptr @llvm.invariant.start.p0(i64 4, ptr %65)
  %378 = call ptr @llvm.invariant.start.p0(i64 208, ptr %367)
  %379 = getelementptr ptr, ptr %367, i32 %373
  %380 = getelementptr ptr, ptr %379, i32 5
  %381 = load ptr, ptr %380, align 8
  %382 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  store ptr @i32_typ, ptr %382, align 8
  %383 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  store ptr %359, ptr %383, align 8
  %384 = call ptr @behavior_wrapper(ptr %381, { ptr, ptr, ptr, i32 } %374, ptr %66)
  call void %384({ ptr, ptr, ptr, i32 } %374, { ptr, ptr, ptr, i32 } %374, ptr %65, i32 %350, { ptr, ptr, ptr, i32 } %366) #17
  %385 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 0
  %386 = load ptr, ptr %385, align 8
  %387 = insertvalue { ptr, i160 } undef, ptr %386, 0
  %388 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 1
  %389 = load i160, ptr %388, align 4
  %390 = insertvalue { ptr, i160 } %387, i160 %389, 1
  %391 = call ptr @get_current_coroutine()
  %392 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %391, i32 0, i32 4
  store { ptr, i160 } %390, ptr %392, align 8
  call void @coroutine_yield(ptr %391)
  %393 = load { ptr, i160 }, ptr %392, align 8
  store { ptr, i160 } %393, ptr %67, align 8
  br label %394

394:                                              ; preds = %._crit_edge1, %283
  %395 = load i64, ptr %34, align 4
  %396 = trunc i64 %395 to i32
  store i32 %396, ptr %68, align 4
  store ptr @String, ptr %69, align 8
  %397 = load ptr, ptr %69, align 8
  %398 = getelementptr ptr, ptr %397, i32 6
  %399 = load ptr, ptr %398, align 8
  %400 = call { i64, i64 } @size_wrapper(ptr %399, ptr %69)
  %401 = extractvalue { i64, i64 } %400, 0
  %402 = call ptr @bump_malloc(i64 %401)
  store ptr @String, ptr %73, align 8
  store ptr %402, ptr %72, align 8
  store i32 10, ptr %70, align 4
  %403 = load i64, ptr %34, align 4
  %404 = trunc i64 %403 to i32
  store i32 %404, ptr %74, align 4
  %405 = load ptr, ptr %39, align 8
  %406 = insertvalue { ptr } undef, ptr %405, 0
  %407 = load i32, ptr %74, align 4
  %408 = load i32, ptr %37, align 4
  %409 = load ptr, ptr %73, align 8
  %410 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %409, 0
  %411 = load ptr, ptr %72, align 8
  %412 = insertvalue { ptr, ptr, ptr, i32 } %410, ptr %411, 1
  %413 = load ptr, ptr %71, align 8
  %414 = insertvalue { ptr, ptr, ptr, i32 } %412, ptr %413, 2
  %415 = load i32, ptr %70, align 4
  %416 = insertvalue { ptr, ptr, ptr, i32 } %414, i32 %415, 3
  %417 = getelementptr [3 x ptr], ptr %75, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %417, align 8
  %418 = getelementptr [3 x ptr], ptr %75, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %418, align 8
  %419 = getelementptr [3 x ptr], ptr %75, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %419, align 8
  %420 = call ptr @llvm.invariant.start.p0(i64 9, ptr %75)
  %421 = call ptr @llvm.invariant.start.p0(i64 632, ptr %409)
  %422 = getelementptr ptr, ptr %409, i32 %415
  %423 = getelementptr ptr, ptr %422, i32 6
  %424 = load ptr, ptr %423, align 8
  %425 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 0
  store ptr @buffer_typ, ptr %425, align 8
  %426 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 1
  store ptr @i32_typ, ptr %426, align 8
  %427 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 2
  store ptr @i32_typ, ptr %427, align 8
  %428 = call ptr @behavior_wrapper(ptr %424, { ptr, ptr, ptr, i32 } %416, ptr %76)
  call void %428({ ptr, ptr, ptr, i32 } %416, { ptr, ptr, ptr, i32 } %416, ptr %75, { ptr } %406, i32 %407, i32 %408) #17
  %429 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %430 = load ptr, ptr %73, align 8
  store ptr %430, ptr %429, align 8
  %431 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %432 = load ptr, ptr %72, align 8
  store ptr %432, ptr %431, align 8
  %433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %434 = load ptr, ptr %71, align 8
  store ptr %434, ptr %433, align 8
  %435 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %436 = load i32, ptr %70, align 4
  store i32 %436, ptr %435, align 4
  call void @set_offset(ptr %77, ptr @String)
  %437 = load ptr, ptr %429, align 8
  %438 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %437, 0
  %439 = load ptr, ptr %431, align 8
  %440 = insertvalue { ptr, ptr, ptr, i32 } %438, ptr %439, 1
  %441 = load ptr, ptr %433, align 8
  %442 = insertvalue { ptr, ptr, ptr, i32 } %440, ptr %441, 2
  %443 = load i32, ptr %435, align 4
  %444 = insertvalue { ptr, ptr, ptr, i32 } %442, i32 %443, 3
  ret { ptr, ptr, ptr, i32 } %444
}

define { ptr, i8 } @File_read_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [1 x ptr], align 8
  %16 = alloca i32, align 4
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca [3 x ptr], align 8
  %23 = alloca { ptr, ptr, ptr }, align 8
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = alloca [2 x ptr], align 8
  %26 = alloca { ptr, ptr }, align 8
  %27 = alloca { ptr, i160 }, align 8
  %28 = alloca ptr, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i1, align 1
  %32 = alloca ptr, align 8
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i1, align 1
  %36 = alloca [1 x ptr], align 8
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %38 = alloca [0 x ptr], align 8
  %39 = alloca {}, align 8
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca [1 x ptr], align 8
  %48 = alloca i32, align 4
  %49 = alloca ptr, align 8
  %50 = alloca ptr, align 8
  %51 = alloca ptr, align 8
  %52 = alloca i32, align 4
  %53 = alloca i32, align 4
  %54 = alloca [3 x ptr], align 8
  %55 = alloca { ptr, ptr, ptr }, align 8
  %56 = alloca { ptr, ptr, ptr, i32 }, align 8
  %57 = alloca [2 x ptr], align 8
  %58 = alloca { ptr, ptr }, align 8
  %59 = alloca { ptr, i160 }, align 8
  %60 = alloca [0 x i8], align 1
  %61 = alloca i8, align 1
  %62 = alloca ptr, align 8
  %63 = alloca i8, align 1
  %64 = alloca i8, align 1
  %65 = alloca ptr, align 8
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i8 }, align 8
  %.reg2mem2 = alloca { ptr, i8 }, align 8
  %.reg2mem4 = alloca { ptr, i8 }, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem16 = alloca { ptr, i8 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %66, align 8
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  store ptr %72, ptr %.reg2mem11, align 8
  %73 = load ptr, ptr %71, align 8
  %.reload15 = load ptr, ptr %.reg2mem11, align 8
  store ptr %73, ptr %.reload15, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  store ptr %78, ptr %.reg2mem6, align 8
  %79 = load i32, ptr %77, align 4
  %.reload10 = load ptr, ptr %.reg2mem6, align 8
  store i32 %79, ptr %.reload10, align 4
  call void @set_offset(ptr %67, ptr @File)
  %80 = alloca i1, align 1
  store i1 false, ptr %80, align 1
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %81 = load ptr, ptr %.reload14, align 8
  %82 = load ptr, ptr %67, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 160, ptr %82)
  %.reload9 = load ptr, ptr %.reg2mem6, align 8
  %84 = load i32, ptr %.reload9, align 4
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 3
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr { ptr, ptr }, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = call i1 %89(ptr %81) #16
  %91 = alloca i1, align 1
  store i1 %90, ptr %91, align 1
  %92 = load i1, ptr %80, align 1
  %93 = load i1, ptr %91, align 1
  %94 = icmp eq i1 %92, %93
  %95 = alloca i1, align 1
  store i1 %94, ptr %95, align 1
  %96 = load i1, ptr %95, align 1
  br i1 %96, label %97, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %208

97:                                               ; preds = %3
  store ptr @FileSystemError, ptr %4, align 8
  %98 = load ptr, ptr %4, align 8
  %99 = getelementptr ptr, ptr %98, i32 6
  %100 = load ptr, ptr %99, align 8
  %101 = call { i64, i64 } @size_wrapper(ptr %100, ptr %4)
  %102 = extractvalue { i64, i64 } %101, 0
  %103 = call ptr @bump_malloc(i64 %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  store ptr @FileSystemError, ptr %5, align 8
  store ptr %103, ptr %104, align 8
  store i32 10, ptr %105, align 4
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = load ptr, ptr %104, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 1
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %112, 2
  %114 = load i32, ptr %105, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %117 = call ptr @llvm.invariant.start.p0(i64 208, ptr %107)
  %118 = getelementptr ptr, ptr %107, i32 %114
  %119 = getelementptr ptr, ptr %118, i32 4
  %120 = load ptr, ptr %119, align 8
  %121 = call ptr @behavior_wrapper(ptr %120, { ptr, ptr, ptr, i32 } %115, ptr %7)
  call void %121({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %6) #17
  store i32 72, ptr %8, align 4
  store i32 11, ptr %9, align 4
  %122 = load i32, ptr %9, align 4
  %123 = sext i32 %122 to i64
  %124 = mul i64 %123, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %125 = call ptr @bump_malloc(i64 %124)
  store ptr %125, ptr %10, align 8
  %126 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  store ptr %127, ptr %11, align 8
  store i32 0, ptr %12, align 4
  %128 = load ptr, ptr %11, align 8
  %129 = load i32, ptr %12, align 4
  %130 = sext i32 %129 to i64
  %131 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %130
  %132 = getelementptr i8, ptr %128, i64 %131
  %133 = load <10 x i8>, ptr @burle_filesmini, align 16
  store <10 x i8> %133, ptr %132, align 16
  store i32 10, ptr %13, align 4
  store i32 11, ptr %14, align 4
  store ptr @String, ptr %15, align 8
  %134 = load ptr, ptr %15, align 8
  %135 = getelementptr ptr, ptr %134, i32 6
  %136 = load ptr, ptr %135, align 8
  %137 = call { i64, i64 } @size_wrapper(ptr %136, ptr %15)
  %138 = extractvalue { i64, i64 } %137, 0
  %139 = call ptr @bump_malloc(i64 %138)
  store ptr @String, ptr %19, align 8
  store ptr %139, ptr %18, align 8
  store i32 10, ptr %16, align 4
  store i32 10, ptr %20, align 4
  store i32 11, ptr %21, align 4
  %140 = load ptr, ptr %11, align 8
  %141 = insertvalue { ptr } undef, ptr %140, 0
  %142 = load i32, ptr %20, align 4
  %143 = load i32, ptr %21, align 4
  %144 = load ptr, ptr %19, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %144, 0
  %146 = load ptr, ptr %18, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %146, 1
  %148 = load ptr, ptr %17, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %148, 2
  %150 = load i32, ptr %16, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %150, 3
  %152 = getelementptr [3 x ptr], ptr %22, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %152, align 8
  %153 = getelementptr [3 x ptr], ptr %22, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %153, align 8
  %154 = getelementptr [3 x ptr], ptr %22, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %154, align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 9, ptr %22)
  %156 = call ptr @llvm.invariant.start.p0(i64 632, ptr %144)
  %157 = getelementptr ptr, ptr %144, i32 %150
  %158 = getelementptr ptr, ptr %157, i32 6
  %159 = load ptr, ptr %158, align 8
  %160 = getelementptr { ptr, ptr, ptr }, ptr %23, i32 0, i32 0
  store ptr @buffer_typ, ptr %160, align 8
  %161 = getelementptr { ptr, ptr, ptr }, ptr %23, i32 0, i32 1
  store ptr @i32_typ, ptr %161, align 8
  %162 = getelementptr { ptr, ptr, ptr }, ptr %23, i32 0, i32 2
  store ptr @i32_typ, ptr %162, align 8
  %163 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %151, ptr %23)
  call void %163({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %22, { ptr } %141, i32 %142, i32 %143) #17
  %164 = load i32, ptr %8, align 4
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %166 = load ptr, ptr %19, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %168 = load ptr, ptr %18, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %170 = load ptr, ptr %17, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %172 = load i32, ptr %16, align 4
  store i32 %172, ptr %171, align 4
  call void @set_offset(ptr %24, ptr @String)
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %173, 0
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 1
  %177 = load ptr, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %177, 2
  %179 = load i32, ptr %171, align 4
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, i32 %179, 3
  %181 = load ptr, ptr %106, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = load ptr, ptr %104, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %183, 1
  %185 = load ptr, ptr %111, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %185, 2
  %187 = load i32, ptr %105, align 4
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, i32 %187, 3
  %189 = getelementptr [2 x ptr], ptr %25, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %189, align 8
  %190 = getelementptr [2 x ptr], ptr %25, i32 0, i32 1
  store ptr @_parameterization_String, ptr %190, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 4, ptr %25)
  %192 = call ptr @llvm.invariant.start.p0(i64 208, ptr %181)
  %193 = getelementptr ptr, ptr %181, i32 %187
  %194 = getelementptr ptr, ptr %193, i32 5
  %195 = load ptr, ptr %194, align 8
  %196 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr @i32_typ, ptr %196, align 8
  %197 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %173, ptr %197, align 8
  %198 = call ptr @behavior_wrapper(ptr %195, { ptr, ptr, ptr, i32 } %188, ptr %26)
  call void %198({ ptr, ptr, ptr, i32 } %188, { ptr, ptr, ptr, i32 } %188, ptr %25, i32 %164, { ptr, ptr, ptr, i32 } %180) #17
  %199 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %200 = load ptr, ptr %199, align 8
  %201 = insertvalue { ptr, i160 } undef, ptr %200, 0
  %202 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %203 = load i160, ptr %202, align 4
  %204 = insertvalue { ptr, i160 } %201, i160 %203, 1
  %205 = call ptr @get_current_coroutine()
  %206 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %205, i32 0, i32 4
  store { ptr, i160 } %204, ptr %206, align 8
  call void @coroutine_yield(ptr %205)
  %207 = load { ptr, i160 }, ptr %206, align 8
  store { ptr, i160 } %207, ptr %27, align 8
  br label %208

208:                                              ; preds = %._crit_edge, %97
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %209 = load ptr, ptr %.reload13, align 8
  %210 = load ptr, ptr %67, align 8
  %211 = call ptr @llvm.invariant.start.p0(i64 160, ptr %210)
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %212 = load i32, ptr %.reload8, align 4
  %213 = getelementptr ptr, ptr %210, i32 %212
  %214 = getelementptr ptr, ptr %213, i32 2
  %215 = load ptr, ptr %214, align 8
  %216 = getelementptr { ptr, ptr }, ptr %215, i32 0, i32 0
  %217 = load ptr, ptr %216, align 8
  %218 = call { ptr } %217(ptr %209) #16
  store { ptr } %218, ptr %28, align 8
  %219 = load ptr, ptr %28, align 8
  %220 = insertvalue { ptr } undef, ptr %219, 0
  %221 = call i32 @fgetc({ ptr } %220)
  store i32 %221, ptr %29, align 4
  store i32 -1, ptr %30, align 4
  %222 = load i32, ptr %29, align 4
  %223 = load i32, ptr %30, align 4
  %224 = icmp eq i32 %222, %223
  store i1 %224, ptr %31, align 1
  %225 = load i1, ptr %31, align 1
  br i1 %225, label %226, label %361

226:                                              ; preds = %208
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %227 = load ptr, ptr %.reload12, align 8
  %228 = load ptr, ptr %67, align 8
  %229 = call ptr @llvm.invariant.start.p0(i64 160, ptr %228)
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %230 = load i32, ptr %.reload7, align 4
  %231 = getelementptr ptr, ptr %228, i32 %230
  %232 = getelementptr ptr, ptr %231, i32 2
  %233 = load ptr, ptr %232, align 8
  %234 = getelementptr { ptr, ptr }, ptr %233, i32 0, i32 0
  %235 = load ptr, ptr %234, align 8
  %236 = call { ptr } %235(ptr %227) #16
  store { ptr } %236, ptr %32, align 8
  %237 = load ptr, ptr %32, align 8
  %238 = insertvalue { ptr } undef, ptr %237, 0
  %239 = call i32 @ferror({ ptr } %238)
  store i32 %239, ptr %33, align 4
  store i32 0, ptr %34, align 4
  %240 = load i32, ptr %33, align 4
  %241 = load i32, ptr %34, align 4
  %242 = icmp ne i32 %240, %241
  store i1 %242, ptr %35, align 1
  %243 = load i1, ptr %35, align 1
  br i1 %243, label %244, label %._crit_edge1

._crit_edge1:                                     ; preds = %226
  br label %355

244:                                              ; preds = %226
  store ptr @FileSystemError, ptr %36, align 8
  %245 = load ptr, ptr %36, align 8
  %246 = getelementptr ptr, ptr %245, i32 6
  %247 = load ptr, ptr %246, align 8
  %248 = call { i64, i64 } @size_wrapper(ptr %247, ptr %36)
  %249 = extractvalue { i64, i64 } %248, 0
  %250 = call ptr @bump_malloc(i64 %249)
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  store ptr @FileSystemError, ptr %37, align 8
  store ptr %250, ptr %251, align 8
  store i32 10, ptr %252, align 4
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %254 = load ptr, ptr %253, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %254, 0
  %256 = load ptr, ptr %251, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } %255, ptr %256, 1
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %259 = load ptr, ptr %258, align 8
  %260 = insertvalue { ptr, ptr, ptr, i32 } %257, ptr %259, 2
  %261 = load i32, ptr %252, align 4
  %262 = insertvalue { ptr, ptr, ptr, i32 } %260, i32 %261, 3
  %263 = call ptr @llvm.invariant.start.p0(i64 0, ptr %38)
  %264 = call ptr @llvm.invariant.start.p0(i64 208, ptr %254)
  %265 = getelementptr ptr, ptr %254, i32 %261
  %266 = getelementptr ptr, ptr %265, i32 4
  %267 = load ptr, ptr %266, align 8
  %268 = call ptr @behavior_wrapper(ptr %267, { ptr, ptr, ptr, i32 } %262, ptr %39)
  call void %268({ ptr, ptr, ptr, i32 } %262, { ptr, ptr, ptr, i32 } %262, ptr %38) #17
  store i32 75, ptr %40, align 4
  store i32 11, ptr %41, align 4
  %269 = load i32, ptr %41, align 4
  %270 = sext i32 %269 to i64
  %271 = mul i64 %270, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %272 = call ptr @bump_malloc(i64 %271)
  store ptr %272, ptr %42, align 8
  %273 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  %274 = load ptr, ptr %273, align 8
  store ptr %274, ptr %43, align 8
  store i32 0, ptr %44, align 4
  %275 = load ptr, ptr %43, align 8
  %276 = load i32, ptr %44, align 4
  %277 = sext i32 %276 to i64
  %278 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %277
  %279 = getelementptr i8, ptr %275, i64 %278
  %280 = load <10 x i8>, ptr @ttnhy_filesmini, align 16
  store <10 x i8> %280, ptr %279, align 16
  store i32 10, ptr %45, align 4
  store i32 11, ptr %46, align 4
  store ptr @String, ptr %47, align 8
  %281 = load ptr, ptr %47, align 8
  %282 = getelementptr ptr, ptr %281, i32 6
  %283 = load ptr, ptr %282, align 8
  %284 = call { i64, i64 } @size_wrapper(ptr %283, ptr %47)
  %285 = extractvalue { i64, i64 } %284, 0
  %286 = call ptr @bump_malloc(i64 %285)
  store ptr @String, ptr %51, align 8
  store ptr %286, ptr %50, align 8
  store i32 10, ptr %48, align 4
  store i32 10, ptr %52, align 4
  store i32 11, ptr %53, align 4
  %287 = load ptr, ptr %43, align 8
  %288 = insertvalue { ptr } undef, ptr %287, 0
  %289 = load i32, ptr %52, align 4
  %290 = load i32, ptr %53, align 4
  %291 = load ptr, ptr %51, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %291, 0
  %293 = load ptr, ptr %50, align 8
  %294 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %293, 1
  %295 = load ptr, ptr %49, align 8
  %296 = insertvalue { ptr, ptr, ptr, i32 } %294, ptr %295, 2
  %297 = load i32, ptr %48, align 4
  %298 = insertvalue { ptr, ptr, ptr, i32 } %296, i32 %297, 3
  %299 = getelementptr [3 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %299, align 8
  %300 = getelementptr [3 x ptr], ptr %54, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %300, align 8
  %301 = getelementptr [3 x ptr], ptr %54, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %301, align 8
  %302 = call ptr @llvm.invariant.start.p0(i64 9, ptr %54)
  %303 = call ptr @llvm.invariant.start.p0(i64 632, ptr %291)
  %304 = getelementptr ptr, ptr %291, i32 %297
  %305 = getelementptr ptr, ptr %304, i32 6
  %306 = load ptr, ptr %305, align 8
  %307 = getelementptr { ptr, ptr, ptr }, ptr %55, i32 0, i32 0
  store ptr @buffer_typ, ptr %307, align 8
  %308 = getelementptr { ptr, ptr, ptr }, ptr %55, i32 0, i32 1
  store ptr @i32_typ, ptr %308, align 8
  %309 = getelementptr { ptr, ptr, ptr }, ptr %55, i32 0, i32 2
  store ptr @i32_typ, ptr %309, align 8
  %310 = call ptr @behavior_wrapper(ptr %306, { ptr, ptr, ptr, i32 } %298, ptr %55)
  call void %310({ ptr, ptr, ptr, i32 } %298, { ptr, ptr, ptr, i32 } %298, ptr %54, { ptr } %288, i32 %289, i32 %290) #17
  %311 = load i32, ptr %40, align 4
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %313 = load ptr, ptr %51, align 8
  store ptr %313, ptr %312, align 8
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %315 = load ptr, ptr %50, align 8
  store ptr %315, ptr %314, align 8
  %316 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %317 = load ptr, ptr %49, align 8
  store ptr %317, ptr %316, align 8
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %319 = load i32, ptr %48, align 4
  store i32 %319, ptr %318, align 4
  call void @set_offset(ptr %56, ptr @String)
  %320 = load ptr, ptr %312, align 8
  %321 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %320, 0
  %322 = load ptr, ptr %314, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } %321, ptr %322, 1
  %324 = load ptr, ptr %316, align 8
  %325 = insertvalue { ptr, ptr, ptr, i32 } %323, ptr %324, 2
  %326 = load i32, ptr %318, align 4
  %327 = insertvalue { ptr, ptr, ptr, i32 } %325, i32 %326, 3
  %328 = load ptr, ptr %253, align 8
  %329 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %328, 0
  %330 = load ptr, ptr %251, align 8
  %331 = insertvalue { ptr, ptr, ptr, i32 } %329, ptr %330, 1
  %332 = load ptr, ptr %258, align 8
  %333 = insertvalue { ptr, ptr, ptr, i32 } %331, ptr %332, 2
  %334 = load i32, ptr %252, align 4
  %335 = insertvalue { ptr, ptr, ptr, i32 } %333, i32 %334, 3
  %336 = getelementptr [2 x ptr], ptr %57, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %336, align 8
  %337 = getelementptr [2 x ptr], ptr %57, i32 0, i32 1
  store ptr @_parameterization_String, ptr %337, align 8
  %338 = call ptr @llvm.invariant.start.p0(i64 4, ptr %57)
  %339 = call ptr @llvm.invariant.start.p0(i64 208, ptr %328)
  %340 = getelementptr ptr, ptr %328, i32 %334
  %341 = getelementptr ptr, ptr %340, i32 5
  %342 = load ptr, ptr %341, align 8
  %343 = getelementptr { ptr, ptr }, ptr %58, i32 0, i32 0
  store ptr @i32_typ, ptr %343, align 8
  %344 = getelementptr { ptr, ptr }, ptr %58, i32 0, i32 1
  store ptr %320, ptr %344, align 8
  %345 = call ptr @behavior_wrapper(ptr %342, { ptr, ptr, ptr, i32 } %335, ptr %58)
  call void %345({ ptr, ptr, ptr, i32 } %335, { ptr, ptr, ptr, i32 } %335, ptr %57, i32 %311, { ptr, ptr, ptr, i32 } %327) #17
  %346 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %347 = load ptr, ptr %346, align 8
  %348 = insertvalue { ptr, i160 } undef, ptr %347, 0
  %349 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %350 = load i160, ptr %349, align 4
  %351 = insertvalue { ptr, i160 } %348, i160 %350, 1
  %352 = call ptr @get_current_coroutine()
  %353 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %352, i32 0, i32 4
  store { ptr, i160 } %351, ptr %353, align 8
  call void @coroutine_yield(ptr %352)
  %354 = load { ptr, i160 }, ptr %353, align 8
  store { ptr, i160 } %354, ptr %59, align 8
  br label %355

355:                                              ; preds = %._crit_edge1, %244
  %356 = load [0 x i8], ptr %60, align 1
  store [0 x i8] %356, ptr %61, align 1
  store ptr @nil_typ, ptr %62, align 8
  %357 = load ptr, ptr %62, align 8
  %358 = insertvalue { ptr, i8 } undef, ptr %357, 0
  %359 = load i8, ptr %61, align 1
  %360 = insertvalue { ptr, i8 } %358, i8 %359, 1
  store { ptr, i8 } %360, ptr %.reg2mem4, align 8
  %.reload5 = load { ptr, i8 }, ptr %.reg2mem4, align 8
  store { ptr, i8 } %.reload5, ptr %.reg2mem16, align 8
  br label %369

361:                                              ; preds = %208
  %362 = load i32, ptr %29, align 4
  %363 = trunc i32 %362 to i8
  store i8 %363, ptr %63, align 1
  %364 = load i8, ptr %63, align 1
  store i8 %364, ptr %64, align 1
  store ptr @i8_typ, ptr %65, align 8
  %365 = load ptr, ptr %65, align 8
  %366 = insertvalue { ptr, i8 } undef, ptr %365, 0
  %367 = load i8, ptr %64, align 1
  %368 = insertvalue { ptr, i8 } %366, i8 %367, 1
  store { ptr, i8 } %368, ptr %.reg2mem2, align 8
  %.reload3 = load { ptr, i8 }, ptr %.reg2mem2, align 8
  store { ptr, i8 } %.reload3, ptr %.reg2mem16, align 8
  br label %369

369:                                              ; preds = %361, %355
  %.reload17 = load { ptr, i8 }, ptr %.reg2mem16, align 8
  store { ptr, i8 } %.reload17, ptr %.reg2mem, align 8
  br label %370

370:                                              ; preds = %369
  %.reload = load { ptr, i8 }, ptr %.reg2mem, align 8
  ret { ptr, i8 } %.reload
}

define i64 @File_write_textString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [0 x ptr], align 8
  %8 = alloca {}, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca [1 x ptr], align 8
  %17 = alloca i32, align 4
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca [3 x ptr], align 8
  %24 = alloca { ptr, ptr, ptr }, align 8
  %25 = alloca { ptr, ptr, ptr, i32 }, align 8
  %26 = alloca [2 x ptr], align 8
  %27 = alloca { ptr, ptr }, align 8
  %28 = alloca { ptr, i160 }, align 8
  %29 = alloca [0 x ptr], align 8
  %30 = alloca {}, align 8
  %31 = alloca i32, align 4
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca [0 x ptr], align 8
  %35 = alloca {}, align 8
  %36 = alloca ptr, align 8
  %37 = alloca ptr, align 8
  %38 = alloca i64, align 8
  %39 = alloca i1, align 1
  %40 = alloca [1 x ptr], align 8
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  %42 = alloca [0 x ptr], align 8
  %43 = alloca {}, align 8
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca ptr, align 8
  %47 = alloca ptr, align 8
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca [1 x ptr], align 8
  %52 = alloca i32, align 4
  %53 = alloca ptr, align 8
  %54 = alloca ptr, align 8
  %55 = alloca ptr, align 8
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %58 = alloca [3 x ptr], align 8
  %59 = alloca { ptr, ptr, ptr }, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = alloca [2 x ptr], align 8
  %62 = alloca { ptr, ptr }, align 8
  %63 = alloca { ptr, i160 }, align 8
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem4 = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %64, align 8
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  store ptr %70, ptr %.reg2mem20, align 8
  %71 = load ptr, ptr %69, align 8
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  store ptr %71, ptr %.reload23, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  store ptr %76, ptr %.reg2mem16, align 8
  %77 = load i32, ptr %75, align 4
  %.reload19 = load ptr, ptr %.reg2mem16, align 8
  store i32 %77, ptr %.reload19, align 4
  call void @set_offset(ptr %65, ptr @File)
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %78, align 8
  %79 = alloca { ptr, ptr, ptr, i32 }, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  store ptr %81, ptr %.reg2mem12, align 8
  %82 = load ptr, ptr %80, align 8
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  store ptr %82, ptr %.reload15, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  store ptr %84, ptr %.reg2mem8, align 8
  %85 = load ptr, ptr %83, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  store ptr %85, ptr %.reload11, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  store ptr %87, ptr %.reg2mem4, align 8
  %88 = load ptr, ptr %86, align 8
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %88, ptr %.reload7, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  store ptr %90, ptr %.reg2mem, align 8
  %91 = load i32, ptr %89, align 4
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  store i32 %91, ptr %.reload3, align 4
  call void @set_offset(ptr %79, ptr @String)
  %92 = alloca i1, align 1
  store i1 false, ptr %92, align 1
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %93 = load ptr, ptr %.reload22, align 8
  %94 = load ptr, ptr %65, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 160, ptr %94)
  %.reload18 = load ptr, ptr %.reg2mem16, align 8
  %96 = load i32, ptr %.reload18, align 4
  %97 = getelementptr ptr, ptr %94, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 3
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = call i1 %101(ptr %93) #16
  %103 = alloca i1, align 1
  store i1 %102, ptr %103, align 1
  %104 = load i1, ptr %92, align 1
  %105 = load i1, ptr %103, align 1
  %106 = icmp eq i1 %104, %105
  %107 = alloca i1, align 1
  store i1 %106, ptr %107, align 1
  %108 = load i1, ptr %107, align 1
  br i1 %108, label %109, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %220

109:                                              ; preds = %4
  store ptr @FileSystemError, ptr %5, align 8
  %110 = load ptr, ptr %5, align 8
  %111 = getelementptr ptr, ptr %110, i32 6
  %112 = load ptr, ptr %111, align 8
  %113 = call { i64, i64 } @size_wrapper(ptr %112, ptr %5)
  %114 = extractvalue { i64, i64 } %113, 0
  %115 = call ptr @bump_malloc(i64 %114)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr @FileSystemError, ptr %6, align 8
  store ptr %115, ptr %116, align 8
  store i32 10, ptr %117, align 4
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %121 = load ptr, ptr %116, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 2
  %126 = load i32, ptr %117, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %126, 3
  %128 = call ptr @llvm.invariant.start.p0(i64 0, ptr %7)
  %129 = call ptr @llvm.invariant.start.p0(i64 208, ptr %119)
  %130 = getelementptr ptr, ptr %119, i32 %126
  %131 = getelementptr ptr, ptr %130, i32 4
  %132 = load ptr, ptr %131, align 8
  %133 = call ptr @behavior_wrapper(ptr %132, { ptr, ptr, ptr, i32 } %127, ptr %8)
  call void %133({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %7) #17
  store i32 81, ptr %9, align 4
  store i32 11, ptr %10, align 4
  %134 = load i32, ptr %10, align 4
  %135 = sext i32 %134 to i64
  %136 = mul i64 %135, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %137 = call ptr @bump_malloc(i64 %136)
  store ptr %137, ptr %11, align 8
  %138 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  store ptr %139, ptr %12, align 8
  store i32 0, ptr %13, align 4
  %140 = load ptr, ptr %12, align 8
  %141 = load i32, ptr %13, align 4
  %142 = sext i32 %141 to i64
  %143 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %142
  %144 = getelementptr i8, ptr %140, i64 %143
  %145 = load <10 x i8>, ptr @gdwdi_filesmini, align 16
  store <10 x i8> %145, ptr %144, align 16
  store i32 10, ptr %14, align 4
  store i32 11, ptr %15, align 4
  store ptr @String, ptr %16, align 8
  %146 = load ptr, ptr %16, align 8
  %147 = getelementptr ptr, ptr %146, i32 6
  %148 = load ptr, ptr %147, align 8
  %149 = call { i64, i64 } @size_wrapper(ptr %148, ptr %16)
  %150 = extractvalue { i64, i64 } %149, 0
  %151 = call ptr @bump_malloc(i64 %150)
  store ptr @String, ptr %20, align 8
  store ptr %151, ptr %19, align 8
  store i32 10, ptr %17, align 4
  store i32 10, ptr %21, align 4
  store i32 11, ptr %22, align 4
  %152 = load ptr, ptr %12, align 8
  %153 = insertvalue { ptr } undef, ptr %152, 0
  %154 = load i32, ptr %21, align 4
  %155 = load i32, ptr %22, align 4
  %156 = load ptr, ptr %20, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %156, 0
  %158 = load ptr, ptr %19, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %158, 1
  %160 = load ptr, ptr %18, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %160, 2
  %162 = load i32, ptr %17, align 4
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, i32 %162, 3
  %164 = getelementptr [3 x ptr], ptr %23, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %164, align 8
  %165 = getelementptr [3 x ptr], ptr %23, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %165, align 8
  %166 = getelementptr [3 x ptr], ptr %23, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %166, align 8
  %167 = call ptr @llvm.invariant.start.p0(i64 9, ptr %23)
  %168 = call ptr @llvm.invariant.start.p0(i64 632, ptr %156)
  %169 = getelementptr ptr, ptr %156, i32 %162
  %170 = getelementptr ptr, ptr %169, i32 6
  %171 = load ptr, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr }, ptr %24, i32 0, i32 0
  store ptr @buffer_typ, ptr %172, align 8
  %173 = getelementptr { ptr, ptr, ptr }, ptr %24, i32 0, i32 1
  store ptr @i32_typ, ptr %173, align 8
  %174 = getelementptr { ptr, ptr, ptr }, ptr %24, i32 0, i32 2
  store ptr @i32_typ, ptr %174, align 8
  %175 = call ptr @behavior_wrapper(ptr %171, { ptr, ptr, ptr, i32 } %163, ptr %24)
  call void %175({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr %23, { ptr } %153, i32 %154, i32 %155) #17
  %176 = load i32, ptr %9, align 4
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %178 = load ptr, ptr %20, align 8
  store ptr %178, ptr %177, align 8
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %180 = load ptr, ptr %19, align 8
  store ptr %180, ptr %179, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %182 = load ptr, ptr %18, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %184 = load i32, ptr %17, align 4
  store i32 %184, ptr %183, align 4
  call void @set_offset(ptr %25, ptr @String)
  %185 = load ptr, ptr %177, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %185, 0
  %187 = load ptr, ptr %179, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, ptr %187, 1
  %189 = load ptr, ptr %181, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %189, 2
  %191 = load i32, ptr %183, align 4
  %192 = insertvalue { ptr, ptr, ptr, i32 } %190, i32 %191, 3
  %193 = load ptr, ptr %118, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = load ptr, ptr %116, align 8
  %196 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %195, 1
  %197 = load ptr, ptr %123, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %196, ptr %197, 2
  %199 = load i32, ptr %117, align 4
  %200 = insertvalue { ptr, ptr, ptr, i32 } %198, i32 %199, 3
  %201 = getelementptr [2 x ptr], ptr %26, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %201, align 8
  %202 = getelementptr [2 x ptr], ptr %26, i32 0, i32 1
  store ptr @_parameterization_String, ptr %202, align 8
  %203 = call ptr @llvm.invariant.start.p0(i64 4, ptr %26)
  %204 = call ptr @llvm.invariant.start.p0(i64 208, ptr %193)
  %205 = getelementptr ptr, ptr %193, i32 %199
  %206 = getelementptr ptr, ptr %205, i32 5
  %207 = load ptr, ptr %206, align 8
  %208 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  store ptr @i32_typ, ptr %208, align 8
  %209 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  store ptr %185, ptr %209, align 8
  %210 = call ptr @behavior_wrapper(ptr %207, { ptr, ptr, ptr, i32 } %200, ptr %27)
  call void %210({ ptr, ptr, ptr, i32 } %200, { ptr, ptr, ptr, i32 } %200, ptr %26, i32 %176, { ptr, ptr, ptr, i32 } %192) #17
  %211 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %212 = load ptr, ptr %211, align 8
  %213 = insertvalue { ptr, i160 } undef, ptr %212, 0
  %214 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 1
  %215 = load i160, ptr %214, align 4
  %216 = insertvalue { ptr, i160 } %213, i160 %215, 1
  %217 = call ptr @get_current_coroutine()
  %218 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %217, i32 0, i32 4
  store { ptr, i160 } %216, ptr %218, align 8
  call void @coroutine_yield(ptr %217)
  %219 = load { ptr, i160 }, ptr %218, align 8
  store { ptr, i160 } %219, ptr %28, align 8
  br label %220

220:                                              ; preds = %._crit_edge, %109
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %221 = load ptr, ptr %.reload14, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %221, 0
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %223 = load ptr, ptr %.reload10, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %223, 1
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  %225 = load ptr, ptr %.reload6, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } %224, ptr %225, 2
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %227 = load i32, ptr %.reload2, align 4
  %228 = insertvalue { ptr, ptr, ptr, i32 } %226, i32 %227, 3
  %229 = call ptr @llvm.invariant.start.p0(i64 0, ptr %29)
  %230 = call ptr @llvm.invariant.start.p0(i64 632, ptr %221)
  %231 = getelementptr ptr, ptr %221, i32 %227
  %232 = getelementptr ptr, ptr %231, i32 7
  %233 = load ptr, ptr %232, align 8
  %234 = call ptr @behavior_wrapper(ptr %233, { ptr, ptr, ptr, i32 } %228, ptr %30)
  %235 = call i32 %234({ ptr, ptr, ptr, i32 } %228, { ptr, ptr, ptr, i32 } %228, ptr %29) #17
  store i32 %235, ptr %31, align 4
  %236 = load i32, ptr %31, align 4
  %237 = sext i32 %236 to i64
  store i64 %237, ptr %32, align 4
  store i64 1, ptr %33, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %238 = load ptr, ptr %.reload13, align 8
  %239 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %238, 0
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %240 = load ptr, ptr %.reload9, align 8
  %241 = insertvalue { ptr, ptr, ptr, i32 } %239, ptr %240, 1
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %242 = load ptr, ptr %.reload5, align 8
  %243 = insertvalue { ptr, ptr, ptr, i32 } %241, ptr %242, 2
  %.reload = load ptr, ptr %.reg2mem, align 8
  %244 = load i32, ptr %.reload, align 4
  %245 = insertvalue { ptr, ptr, ptr, i32 } %243, i32 %244, 3
  %246 = call ptr @llvm.invariant.start.p0(i64 0, ptr %34)
  %247 = call ptr @llvm.invariant.start.p0(i64 632, ptr %238)
  %248 = getelementptr ptr, ptr %238, i32 %244
  %249 = getelementptr ptr, ptr %248, i32 10
  %250 = load ptr, ptr %249, align 8
  %251 = call ptr @behavior_wrapper(ptr %250, { ptr, ptr, ptr, i32 } %245, ptr %35)
  %252 = call { ptr } %251({ ptr, ptr, ptr, i32 } %245, { ptr, ptr, ptr, i32 } %245, ptr %34) #17
  store { ptr } %252, ptr %36, align 8
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %253 = load ptr, ptr %.reload21, align 8
  %254 = load ptr, ptr %65, align 8
  %255 = call ptr @llvm.invariant.start.p0(i64 160, ptr %254)
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %256 = load i32, ptr %.reload17, align 4
  %257 = getelementptr ptr, ptr %254, i32 %256
  %258 = getelementptr ptr, ptr %257, i32 2
  %259 = load ptr, ptr %258, align 8
  %260 = getelementptr { ptr, ptr }, ptr %259, i32 0, i32 0
  %261 = load ptr, ptr %260, align 8
  %262 = call { ptr } %261(ptr %253) #16
  store { ptr } %262, ptr %37, align 8
  %263 = load ptr, ptr %36, align 8
  %264 = insertvalue { ptr } undef, ptr %263, 0
  %265 = load i64, ptr %33, align 4
  %266 = load i64, ptr %32, align 4
  %267 = load ptr, ptr %37, align 8
  %268 = insertvalue { ptr } undef, ptr %267, 0
  %269 = call i64 @fwrite({ ptr } %264, i64 %265, i64 %266, { ptr } %268)
  store i64 %269, ptr %38, align 4
  %270 = load i64, ptr %38, align 4
  %271 = load i64, ptr %32, align 4
  %272 = icmp slt i64 %270, %271
  store i1 %272, ptr %39, align 1
  %273 = load i1, ptr %39, align 1
  br i1 %273, label %274, label %._crit_edge1

._crit_edge1:                                     ; preds = %220
  br label %385

274:                                              ; preds = %220
  store ptr @FileSystemError, ptr %40, align 8
  %275 = load ptr, ptr %40, align 8
  %276 = getelementptr ptr, ptr %275, i32 6
  %277 = load ptr, ptr %276, align 8
  %278 = call { i64, i64 } @size_wrapper(ptr %277, ptr %40)
  %279 = extractvalue { i64, i64 } %278, 0
  %280 = call ptr @bump_malloc(i64 %279)
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 1
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 3
  store ptr @FileSystemError, ptr %41, align 8
  store ptr %280, ptr %281, align 8
  store i32 10, ptr %282, align 4
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 0
  %284 = load ptr, ptr %283, align 8
  %285 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %284, 0
  %286 = load ptr, ptr %281, align 8
  %287 = insertvalue { ptr, ptr, ptr, i32 } %285, ptr %286, 1
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 2
  %289 = load ptr, ptr %288, align 8
  %290 = insertvalue { ptr, ptr, ptr, i32 } %287, ptr %289, 2
  %291 = load i32, ptr %282, align 4
  %292 = insertvalue { ptr, ptr, ptr, i32 } %290, i32 %291, 3
  %293 = call ptr @llvm.invariant.start.p0(i64 0, ptr %42)
  %294 = call ptr @llvm.invariant.start.p0(i64 208, ptr %284)
  %295 = getelementptr ptr, ptr %284, i32 %291
  %296 = getelementptr ptr, ptr %295, i32 4
  %297 = load ptr, ptr %296, align 8
  %298 = call ptr @behavior_wrapper(ptr %297, { ptr, ptr, ptr, i32 } %292, ptr %43)
  call void %298({ ptr, ptr, ptr, i32 } %292, { ptr, ptr, ptr, i32 } %292, ptr %42) #17
  store i32 85, ptr %44, align 4
  store i32 11, ptr %45, align 4
  %299 = load i32, ptr %45, align 4
  %300 = sext i32 %299 to i64
  %301 = mul i64 %300, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %302 = call ptr @bump_malloc(i64 %301)
  store ptr %302, ptr %46, align 8
  %303 = getelementptr { ptr }, ptr %46, i32 0, i32 0
  %304 = load ptr, ptr %303, align 8
  store ptr %304, ptr %47, align 8
  store i32 0, ptr %48, align 4
  %305 = load ptr, ptr %47, align 8
  %306 = load i32, ptr %48, align 4
  %307 = sext i32 %306 to i64
  %308 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %307
  %309 = getelementptr i8, ptr %305, i64 %308
  %310 = load <10 x i8>, ptr @yudhk_filesmini, align 16
  store <10 x i8> %310, ptr %309, align 16
  store i32 10, ptr %49, align 4
  store i32 11, ptr %50, align 4
  store ptr @String, ptr %51, align 8
  %311 = load ptr, ptr %51, align 8
  %312 = getelementptr ptr, ptr %311, i32 6
  %313 = load ptr, ptr %312, align 8
  %314 = call { i64, i64 } @size_wrapper(ptr %313, ptr %51)
  %315 = extractvalue { i64, i64 } %314, 0
  %316 = call ptr @bump_malloc(i64 %315)
  store ptr @String, ptr %55, align 8
  store ptr %316, ptr %54, align 8
  store i32 10, ptr %52, align 4
  store i32 10, ptr %56, align 4
  store i32 11, ptr %57, align 4
  %317 = load ptr, ptr %47, align 8
  %318 = insertvalue { ptr } undef, ptr %317, 0
  %319 = load i32, ptr %56, align 4
  %320 = load i32, ptr %57, align 4
  %321 = load ptr, ptr %55, align 8
  %322 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %321, 0
  %323 = load ptr, ptr %54, align 8
  %324 = insertvalue { ptr, ptr, ptr, i32 } %322, ptr %323, 1
  %325 = load ptr, ptr %53, align 8
  %326 = insertvalue { ptr, ptr, ptr, i32 } %324, ptr %325, 2
  %327 = load i32, ptr %52, align 4
  %328 = insertvalue { ptr, ptr, ptr, i32 } %326, i32 %327, 3
  %329 = getelementptr [3 x ptr], ptr %58, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %329, align 8
  %330 = getelementptr [3 x ptr], ptr %58, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %330, align 8
  %331 = getelementptr [3 x ptr], ptr %58, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %331, align 8
  %332 = call ptr @llvm.invariant.start.p0(i64 9, ptr %58)
  %333 = call ptr @llvm.invariant.start.p0(i64 632, ptr %321)
  %334 = getelementptr ptr, ptr %321, i32 %327
  %335 = getelementptr ptr, ptr %334, i32 6
  %336 = load ptr, ptr %335, align 8
  %337 = getelementptr { ptr, ptr, ptr }, ptr %59, i32 0, i32 0
  store ptr @buffer_typ, ptr %337, align 8
  %338 = getelementptr { ptr, ptr, ptr }, ptr %59, i32 0, i32 1
  store ptr @i32_typ, ptr %338, align 8
  %339 = getelementptr { ptr, ptr, ptr }, ptr %59, i32 0, i32 2
  store ptr @i32_typ, ptr %339, align 8
  %340 = call ptr @behavior_wrapper(ptr %336, { ptr, ptr, ptr, i32 } %328, ptr %59)
  call void %340({ ptr, ptr, ptr, i32 } %328, { ptr, ptr, ptr, i32 } %328, ptr %58, { ptr } %318, i32 %319, i32 %320) #17
  %341 = load i32, ptr %44, align 4
  %342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %343 = load ptr, ptr %55, align 8
  store ptr %343, ptr %342, align 8
  %344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %345 = load ptr, ptr %54, align 8
  store ptr %345, ptr %344, align 8
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %347 = load ptr, ptr %53, align 8
  store ptr %347, ptr %346, align 8
  %348 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %349 = load i32, ptr %52, align 4
  store i32 %349, ptr %348, align 4
  call void @set_offset(ptr %60, ptr @String)
  %350 = load ptr, ptr %342, align 8
  %351 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %350, 0
  %352 = load ptr, ptr %344, align 8
  %353 = insertvalue { ptr, ptr, ptr, i32 } %351, ptr %352, 1
  %354 = load ptr, ptr %346, align 8
  %355 = insertvalue { ptr, ptr, ptr, i32 } %353, ptr %354, 2
  %356 = load i32, ptr %348, align 4
  %357 = insertvalue { ptr, ptr, ptr, i32 } %355, i32 %356, 3
  %358 = load ptr, ptr %283, align 8
  %359 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %358, 0
  %360 = load ptr, ptr %281, align 8
  %361 = insertvalue { ptr, ptr, ptr, i32 } %359, ptr %360, 1
  %362 = load ptr, ptr %288, align 8
  %363 = insertvalue { ptr, ptr, ptr, i32 } %361, ptr %362, 2
  %364 = load i32, ptr %282, align 4
  %365 = insertvalue { ptr, ptr, ptr, i32 } %363, i32 %364, 3
  %366 = getelementptr [2 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %366, align 8
  %367 = getelementptr [2 x ptr], ptr %61, i32 0, i32 1
  store ptr @_parameterization_String, ptr %367, align 8
  %368 = call ptr @llvm.invariant.start.p0(i64 4, ptr %61)
  %369 = call ptr @llvm.invariant.start.p0(i64 208, ptr %358)
  %370 = getelementptr ptr, ptr %358, i32 %364
  %371 = getelementptr ptr, ptr %370, i32 5
  %372 = load ptr, ptr %371, align 8
  %373 = getelementptr { ptr, ptr }, ptr %62, i32 0, i32 0
  store ptr @i32_typ, ptr %373, align 8
  %374 = getelementptr { ptr, ptr }, ptr %62, i32 0, i32 1
  store ptr %350, ptr %374, align 8
  %375 = call ptr @behavior_wrapper(ptr %372, { ptr, ptr, ptr, i32 } %365, ptr %62)
  call void %375({ ptr, ptr, ptr, i32 } %365, { ptr, ptr, ptr, i32 } %365, ptr %61, i32 %341, { ptr, ptr, ptr, i32 } %357) #17
  %376 = getelementptr { ptr, i160 }, ptr %41, i32 0, i32 0
  %377 = load ptr, ptr %376, align 8
  %378 = insertvalue { ptr, i160 } undef, ptr %377, 0
  %379 = getelementptr { ptr, i160 }, ptr %41, i32 0, i32 1
  %380 = load i160, ptr %379, align 4
  %381 = insertvalue { ptr, i160 } %378, i160 %380, 1
  %382 = call ptr @get_current_coroutine()
  %383 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %382, i32 0, i32 4
  store { ptr, i160 } %381, ptr %383, align 8
  call void @coroutine_yield(ptr %382)
  %384 = load { ptr, i160 }, ptr %383, align 8
  store { ptr, i160 } %384, ptr %63, align 8
  br label %385

385:                                              ; preds = %._crit_edge1, %274
  %386 = load i64, ptr %38, align 4
  ret i64 %386
}

declare i64 @fwrite({ ptr }, i64, i64, { ptr })

declare i32 @fgetc({ ptr })

declare i32 @ferror({ ptr })

declare i32 @fseek({ ptr }, i64, i32)

declare i64 @fread({ ptr }, i64, i64, { ptr })

declare i64 @ftell({ ptr })

declare i32 @fclose({ ptr })

declare { ptr } @fopen({ ptr }, { ptr })

define i1 @File_getter_open(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @File_setter_open(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca i1, align 1
  store i1 %1, ptr %21, align 1
  %22 = load i1, ptr %21, align 1
  store i1 %22, ptr %20, align 1
  ret void
}

define { ptr } @File_getter_handle(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @File_setter_handle(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @File_getter_mode(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @File_setter_mode(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @File_getter_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @File_setter_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { i64, i64 } @_data_size_FileProcessor(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_data_size_FileReader(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @FileReader_field_FileReader_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_String
}

define ptr @FileReader_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 3, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @FileReader_B_process_fileFile({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @File, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @File to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 4, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [8 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @FileReader_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @FileReader)
  ret void
}

define { ptr, i160 } @FileReader_process_fileFile({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FileReader)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @File)
  %33 = load ptr, ptr %22, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = load ptr, ptr %25, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 1
  %37 = load ptr, ptr %28, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 2
  %39 = load i32, ptr %31, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 160, ptr %33)
  %44 = getelementptr ptr, ptr %33, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 9
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #17
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @String)
  %64 = alloca i160, align 8
  %65 = alloca ptr, align 8
  %66 = load ptr, ptr %53, align 8
  store ptr %66, ptr %65, align 8
  %67 = load ptr, ptr %56, align 8
  store ptr %67, ptr %64, align 8
  %68 = getelementptr i8, ptr %64, i32 8
  %69 = load ptr, ptr %59, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr i8, ptr %64, i32 16
  %71 = load i32, ptr %62, align 4
  store i32 %71, ptr %70, align 4
  %72 = load ptr, ptr %65, align 8
  %73 = insertvalue { ptr, i160 } undef, ptr %72, 0
  %74 = load i160, ptr %64, align 4
  %75 = insertvalue { ptr, i160 } %73, i160 %74, 1
  ret { ptr, i160 } %75
}

define { i64, i64 } @_data_size_FileWriter(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @FileWriter_field_FileWriter_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret ptr @_parameterization_Ptri64
}

define ptr @FileWriter_B_init_textString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 4, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [9 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FileWriter_B_process_fileFile({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @File, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @File to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 5, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [9 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @FileWriter_init_textString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FileWriter)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @String)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 72, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %34, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %36, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %38, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %40, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  call void %49(ptr %42, { ptr, ptr, ptr, i32 } %57) #15
  ret void
}

define { ptr, i160 } @FileWriter_process_fileFile({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FileWriter)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @File)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 72, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr, ptr, ptr, i32 } %40(ptr %33) #16
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  call void @assume_offset(ptr %42, ptr @String)
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %55 = load i32, ptr %53, align 4
  store i32 %55, ptr %54, align 4
  call void @set_offset(ptr %43, ptr @String)
  %56 = load ptr, ptr %45, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = load ptr, ptr %48, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %58, 1
  %60 = load ptr, ptr %51, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %60, 2
  %62 = load i32, ptr %54, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %62, 3
  %64 = load ptr, ptr %22, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = load ptr, ptr %25, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 1
  %68 = load ptr, ptr %28, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 2
  %70 = load i32, ptr %31, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = alloca [1 x ptr], align 8
  %73 = getelementptr [1 x ptr], ptr %72, i32 0, i32 0
  store ptr @_parameterization_String, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 1, ptr %72)
  %75 = call ptr @llvm.invariant.start.p0(i64 160, ptr %64)
  %76 = getelementptr ptr, ptr %64, i32 %70
  %77 = getelementptr ptr, ptr %76, i32 11
  %78 = load ptr, ptr %77, align 8
  %79 = alloca { ptr }, align 8
  %80 = getelementptr { ptr }, ptr %79, i32 0, i32 0
  store ptr %56, ptr %80, align 8
  %81 = call ptr @behavior_wrapper(ptr %78, { ptr, ptr, ptr, i32 } %71, ptr %79)
  %82 = call i64 %81({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %72, { ptr, ptr, ptr, i32 } %63) #17
  %83 = alloca i64, align 8
  store i64 %82, ptr %83, align 4
  %84 = alloca i160, align 8
  %85 = alloca ptr, align 8
  store ptr @i64_typ, ptr %85, align 8
  %86 = load i64, ptr %83, align 4
  store i64 %86, ptr %84, align 4
  %87 = load ptr, ptr %85, align 8
  %88 = insertvalue { ptr, i160 } undef, ptr %87, 0
  %89 = load i160, ptr %84, align 4
  %90 = insertvalue { ptr, i160 } %88, i160 %89, 1
  ret { ptr, i160 } %90
}

define { ptr, ptr, ptr, i32 } @FileWriter_getter_text(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @FileWriter_setter_text(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { i64, i64 } @_data_size_FileSystem(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %0)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %0, align 8
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 0, i32 1
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 0, i32 2
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 1, i32 0
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %8, i32 0, i32 1, i32 1
  %13 = load i64, ptr %9, align 4
  %14 = load i64, ptr %10, align 4
  %15 = load ptr, ptr %11, align 8
  %16 = load ptr, ptr %12, align 8
  %17 = load i64, ptr @String, align 4
  %18 = call i1 @subtype_test_wrapper(ptr %15, i64 %14, i64 %13, i64 %17, i64 ptrtoint (ptr @String to i64), ptr %16)
  store i1 %18, ptr %5, align 1
  %19 = getelementptr ptr, ptr %0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 0, i32 1
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 0, i32 2
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 1, i32 0
  %24 = getelementptr { [3 x i64], [3 x ptr] }, ptr %20, i32 0, i32 1, i32 1
  %25 = load i64, ptr %21, align 4
  %26 = load i64, ptr %22, align 4
  %27 = load ptr, ptr %23, align 8
  %28 = load ptr, ptr %24, align 8
  %29 = load i64, ptr @String, align 4
  %30 = call i1 @subtype_test_wrapper(ptr %27, i64 %26, i64 %25, i64 %29, i64 ptrtoint (ptr @String to i64), ptr %28)
  store i1 %30, ptr %4, align 1
  %31 = getelementptr ptr, ptr %0, i32 2
  store ptr %31, ptr %.reg2mem1, align 8
  %.reload3 = load ptr, ptr %.reg2mem1, align 8
  %32 = load ptr, ptr %.reload3, align 8
  %33 = ptrtoint ptr %32 to i64
  %34 = icmp eq i64 %33, ptrtoint (ptr @function_typ to i64)
  store i1 %34, ptr %2, align 1
  %35 = load i1, ptr %2, align 1
  %36 = select i1 %35, i32 3, i32 4
  store i32 %36, ptr %.reg2mem, align 4
  br i1 %35, label %37, label %38

37:                                               ; preds = %1
  br label %50

38:                                               ; preds = %1
  %.reload2 = load ptr, ptr %.reg2mem1, align 8
  %39 = load ptr, ptr %.reload2, align 8
  %40 = getelementptr { [3 x i64], [3 x ptr] }, ptr %39, i32 0, i32 0, i32 1
  %41 = getelementptr { [3 x i64], [3 x ptr] }, ptr %39, i32 0, i32 0, i32 2
  %42 = getelementptr { [3 x i64], [3 x ptr] }, ptr %39, i32 0, i32 1, i32 0
  %43 = getelementptr { [3 x i64], [3 x ptr] }, ptr %39, i32 0, i32 1, i32 1
  %44 = load i64, ptr %40, align 4
  %45 = load i64, ptr %41, align 4
  %46 = load ptr, ptr %42, align 8
  %47 = load ptr, ptr %43, align 8
  %48 = load i64, ptr @FileProcessor, align 4
  %49 = call i1 @subtype_test_wrapper(ptr %46, i64 %45, i64 %44, i64 %48, i64 ptrtoint (ptr @FileProcessor to i64), ptr %47)
  store i1 %49, ptr %3, align 1
  br label %50

50:                                               ; preds = %38, %37
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %7, align 4
  %51 = load i32, ptr %7, align 4
  %52 = getelementptr [7 x ptr], ptr @FileSystem, i32 0, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 10
  %54 = load ptr, ptr %53, align 8
  ret ptr %54
}

define ptr @FileSystem_B__Self_read_file_file_nameString(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 1
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 2
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 0
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 1
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @String, align 4
  %15 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 ptrtoint (ptr @String to i64), ptr %13)
  store i1 %15, ptr %2, align 1
  store i32 5, ptr %4, align 4
  %16 = load i32, ptr %4, align 4
  %17 = getelementptr [7 x ptr], ptr @FileSystem, i32 0, i32 %16
  %18 = getelementptr ptr, ptr %17, i32 10
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FileSystem_B__Self_write_file_file_nameString_textString(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %0, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  %17 = getelementptr ptr, ptr %0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr { [3 x i64], [3 x ptr] }, ptr %18, i32 0, i32 0, i32 1
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %18, i32 0, i32 0, i32 2
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %18, i32 0, i32 1, i32 0
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %18, i32 0, i32 1, i32 1
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = load i64, ptr @String, align 4
  %28 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 %27, i64 ptrtoint (ptr @String to i64), ptr %26)
  store i1 %28, ptr %2, align 1
  store i32 6, ptr %5, align 4
  %29 = load i32, ptr %5, align 4
  %30 = getelementptr [7 x ptr], ptr @FileSystem, i32 0, i32 %29
  %31 = getelementptr ptr, ptr %30, i32 10
  %32 = load ptr, ptr %31, align 8
  ret ptr %32
}

define { ptr, i160 } @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T(ptr %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2, { ptr, i160 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, i160 }, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %13, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @String)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %2, ptr %27, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  call void @set_offset(ptr %28, ptr @String)
  %41 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %41, align 8
  %42 = alloca ptr, align 8
  %43 = getelementptr { ptr, i160 }, ptr %41, i32 0, i32 1
  %44 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  store ptr %45, ptr %42, align 8
  %46 = alloca [1 x ptr], align 8
  store ptr @File, ptr %46, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr ptr, ptr %47, i32 6
  %49 = load ptr, ptr %48, align 8
  %50 = call { i64, i64 } @size_wrapper(ptr %49, ptr %46)
  %51 = extractvalue { i64, i64 } %50, 0
  %52 = call ptr @bump_malloc(i64 %51)
  %53 = alloca i32, align 4
  %54 = alloca ptr, align 8
  %55 = alloca ptr, align 8
  %56 = alloca ptr, align 8
  store ptr @File, ptr %56, align 8
  store ptr %52, ptr %55, align 8
  store i32 10, ptr %53, align 4
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %16, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %61 = load ptr, ptr %19, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %63 = load ptr, ptr %22, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %65 = load i32, ptr %25, align 4
  store i32 %65, ptr %64, align 4
  call void @set_offset(ptr %57, ptr @String)
  %66 = load ptr, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = load ptr, ptr %60, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 1
  %70 = load ptr, ptr %62, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 2
  %72 = load i32, ptr %64, align 4
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %72, 3
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %30, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %33, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %36, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %39, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @String)
  %83 = load ptr, ptr %75, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = load ptr, ptr %77, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 1
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %87, 2
  %89 = load i32, ptr %81, align 4
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, i32 %89, 3
  %91 = load ptr, ptr %56, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %55, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %54, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %53, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  %99 = alloca [2 x ptr], align 8
  %100 = getelementptr [2 x ptr], ptr %99, i32 0, i32 0
  store ptr @_parameterization_String, ptr %100, align 8
  %101 = getelementptr [2 x ptr], ptr %99, i32 0, i32 1
  store ptr @_parameterization_String, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 4, ptr %99)
  %103 = call ptr @llvm.invariant.start.p0(i64 160, ptr %91)
  %104 = getelementptr ptr, ptr %91, i32 %97
  %105 = getelementptr ptr, ptr %104, i32 4
  %106 = load ptr, ptr %105, align 8
  %107 = alloca { ptr, ptr }, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  store ptr %66, ptr %108, align 8
  %109 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  store ptr %83, ptr %109, align 8
  %110 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %98, ptr %107)
  call void %110({ ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %98, ptr %99, { ptr, ptr, ptr, i32 } %73, { ptr, ptr, ptr, i32 } %90) #17
  %111 = alloca { ptr, ptr, ptr, i32 }, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %56, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 1
  %115 = load ptr, ptr %55, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 2
  %117 = load ptr, ptr %54, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 3
  %119 = load i32, ptr %53, align 4
  store i32 %119, ptr %118, align 4
  call void @set_offset(ptr %111, ptr @File)
  %120 = alloca i32, align 4
  %121 = alloca ptr, align 8
  %122 = alloca ptr, align 8
  %123 = alloca ptr, align 8
  %124 = load ptr, ptr %112, align 8
  store ptr %124, ptr %123, align 8
  %125 = load ptr, ptr %114, align 8
  store ptr %125, ptr %122, align 8
  %126 = load ptr, ptr %116, align 8
  store ptr %126, ptr %121, align 8
  %127 = load i32, ptr %118, align 4
  store i32 %127, ptr %120, align 4
  %128 = load ptr, ptr %123, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = load ptr, ptr %122, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %130, 1
  %132 = load ptr, ptr %121, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %132, 2
  %134 = load i32, ptr %120, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %134, 3
  %136 = alloca ptr, align 8
  %137 = load ptr, ptr %42, align 8
  %138 = call ptr @coroutine_create(ptr %137, ptr @coroutine_uppkywgipx_passer)
  call void @coroutine_uppkywgipx_buffer_filler(ptr %138, { ptr, ptr, ptr, i32 } %135)
  store ptr %138, ptr %136, align 8
  %139 = alloca ptr, align 8
  %140 = getelementptr { ptr }, ptr %136, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  store ptr %141, ptr %139, align 8
  %142 = load ptr, ptr %139, align 8
  call void @coroutine_call(ptr %142)
  %143 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, ptr, ptr, i32 } }, ptr %142, i32 0, i32 4
  %144 = load { ptr, ptr, ptr, i32 }, ptr %143, align 8
  %145 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %144, ptr %145, align 8
  %146 = load ptr, ptr %123, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %146, 0
  %148 = load ptr, ptr %122, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %148, 1
  %150 = load ptr, ptr %121, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %149, ptr %150, 2
  %152 = load i32, ptr %120, align 4
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, i32 %152, 3
  %154 = alloca [0 x ptr], align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 0, ptr %154)
  %156 = call ptr @llvm.invariant.start.p0(i64 160, ptr %146)
  %157 = getelementptr ptr, ptr %146, i32 %152
  %158 = getelementptr ptr, ptr %157, i32 7
  %159 = load ptr, ptr %158, align 8
  %160 = alloca {}, align 8
  %161 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %153, ptr %160)
  call void %161({ ptr, ptr, ptr, i32 } %153, { ptr, ptr, ptr, i32 } %153, ptr %154) #17
  %162 = alloca i1, align 1
  store i1 false, ptr %162, align 1
  %163 = load i1, ptr %162, align 1
  br i1 %163, label %164, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %190

164:                                              ; preds = %4
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %167 = load ptr, ptr %165, align 8
  store ptr %167, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %170 = load ptr, ptr %168, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %173 = load ptr, ptr %171, align 8
  store ptr %173, ptr %172, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %176 = load i32, ptr %174, align 4
  store i32 %176, ptr %175, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %177 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %178 = load ptr, ptr %177, align 8
  %179 = insertvalue { ptr, i160 } undef, ptr %178, 0
  %180 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %181 = load i160, ptr %180, align 4
  %182 = insertvalue { ptr, i160 } %179, i160 %181, 1
  %183 = call ptr @get_current_coroutine()
  %184 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %183, i32 0, i32 4
  store { ptr, i160 } %182, ptr %184, align 8
  call void @coroutine_yield(ptr %183)
  %185 = load { ptr, i160 }, ptr %184, align 8
  store { ptr, i160 } %185, ptr %6, align 8
  %186 = load ptr, ptr %166, align 8
  store ptr %186, ptr %165, align 8
  %187 = load ptr, ptr %169, align 8
  store ptr %187, ptr %168, align 8
  %188 = load ptr, ptr %172, align 8
  store ptr %188, ptr %171, align 8
  %189 = load i32, ptr %175, align 4
  store i32 %189, ptr %174, align 4
  br label %190

190:                                              ; preds = %._crit_edge, %164
  %191 = load ptr, ptr %139, align 8
  %192 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %191, i32 0, i32 4
  %193 = load { ptr, i160 }, ptr %192, align 8
  store { ptr, i160 } %193, ptr %7, align 8
  %194 = load ptr, ptr %7, align 8
  %195 = ptrtoint ptr %194 to i64
  %196 = icmp eq i64 %195, ptrtoint (ptr @nil_typ to i64)
  %197 = icmp eq i64 %195, 0
  %198 = or i1 %196, %197
  %199 = icmp eq i1 %198, false
  store i1 %199, ptr %8, align 1
  %200 = load i1, ptr %8, align 1
  br i1 %200, label %201, label %212

201:                                              ; preds = %190
  %202 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %203 = load ptr, ptr %202, align 8
  store ptr %203, ptr %10, align 8
  %204 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %205 = load i160, ptr %204, align 4
  store i160 %205, ptr %9, align 4
  %206 = load ptr, ptr %10, align 8
  store ptr %206, ptr %12, align 8
  %207 = load i160, ptr %9, align 4
  store i160 %207, ptr %11, align 4
  %208 = load ptr, ptr %12, align 8
  %209 = insertvalue { ptr, i160 } undef, ptr %208, 0
  %210 = load i160, ptr %11, align 4
  %211 = insertvalue { ptr, i160 } %209, i160 %210, 1
  store { ptr, i160 } %211, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem3, align 8
  br label %213

212:                                              ; preds = %190
  store { ptr, i160 } poison, ptr %.reg2mem3, align 8
  br label %213

213:                                              ; preds = %212, %201
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem, align 8
  br label %214

214:                                              ; preds = %213
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr, i160 } @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT(ptr %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2, { ptr, i160 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, i160 }, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %14, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  call void @set_offset(ptr %15, ptr @String)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %2, ptr %28, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %41 = load i32, ptr %39, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %29, ptr @String)
  %42 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %42, align 8
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = getelementptr { ptr, i160 }, ptr %42, i32 0, i32 0
  %45 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 0
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, i160 }, ptr %42, i32 0, i32 1
  %48 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 1
  %49 = load i160, ptr %47, align 4
  store i160 %49, ptr %48, align 4
  call void @set_offset(ptr %43, ptr @FileProcessor)
  %50 = alloca [1 x ptr], align 8
  store ptr @File, ptr %50, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr ptr, ptr %51, i32 6
  %53 = load ptr, ptr %52, align 8
  %54 = call { i64, i64 } @size_wrapper(ptr %53, ptr %50)
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = call ptr @bump_malloc(i64 %55)
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  %60 = alloca ptr, align 8
  store ptr @File, ptr %60, align 8
  store ptr %56, ptr %59, align 8
  store i32 10, ptr %57, align 4
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %17, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %65 = load ptr, ptr %20, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %67 = load ptr, ptr %23, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %69 = load i32, ptr %26, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %61, ptr @String)
  %70 = load ptr, ptr %62, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %64, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %66, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %68, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %31, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %82 = load ptr, ptr %34, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %84 = load ptr, ptr %37, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %86 = load i32, ptr %40, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %78, ptr @String)
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %81, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %85, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = load ptr, ptr %60, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = load ptr, ptr %59, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 1
  %99 = load ptr, ptr %58, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %101 = load i32, ptr %57, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  %103 = alloca [2 x ptr], align 8
  %104 = getelementptr [2 x ptr], ptr %103, i32 0, i32 0
  store ptr @_parameterization_String, ptr %104, align 8
  %105 = getelementptr [2 x ptr], ptr %103, i32 0, i32 1
  store ptr @_parameterization_String, ptr %105, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 4, ptr %103)
  %107 = call ptr @llvm.invariant.start.p0(i64 160, ptr %95)
  %108 = getelementptr ptr, ptr %95, i32 %101
  %109 = getelementptr ptr, ptr %108, i32 4
  %110 = load ptr, ptr %109, align 8
  %111 = alloca { ptr, ptr }, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 0
  store ptr %70, ptr %112, align 8
  %113 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 1
  store ptr %87, ptr %113, align 8
  %114 = call ptr @behavior_wrapper(ptr %110, { ptr, ptr, ptr, i32 } %102, ptr %111)
  call void %114({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %103, { ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %94) #17
  %115 = alloca { ptr, ptr, ptr, i32 }, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %60, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 1
  %119 = load ptr, ptr %59, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 2
  %121 = load ptr, ptr %58, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 3
  %123 = load i32, ptr %57, align 4
  store i32 %123, ptr %122, align 4
  call void @set_offset(ptr %115, ptr @File)
  %124 = alloca i32, align 4
  %125 = alloca ptr, align 8
  %126 = alloca ptr, align 8
  %127 = alloca ptr, align 8
  %128 = load ptr, ptr %116, align 8
  store ptr %128, ptr %127, align 8
  %129 = load ptr, ptr %118, align 8
  store ptr %129, ptr %126, align 8
  %130 = load ptr, ptr %120, align 8
  store ptr %130, ptr %125, align 8
  %131 = load i32, ptr %122, align 4
  store i32 %131, ptr %124, align 4
  %132 = alloca ptr, align 8
  store ptr @_functionliteral_ujbvsloqoy, ptr %132, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  %145 = load ptr, ptr %127, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %145, 0
  %147 = load ptr, ptr %126, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %147, 1
  %149 = load ptr, ptr %125, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %149, 2
  %151 = load i32, ptr %124, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %151, 3
  %153 = alloca ptr, align 8
  %154 = load ptr, ptr %132, align 8
  %155 = call ptr @coroutine_create(ptr %154, ptr @coroutine_muarwmssow_passer)
  call void @coroutine_muarwmssow_buffer_filler(ptr %155, { ptr, ptr, ptr, i32 } %144, { ptr, ptr, ptr, i32 } %152)
  store ptr %155, ptr %153, align 8
  %156 = alloca ptr, align 8
  %157 = getelementptr { ptr }, ptr %153, i32 0, i32 0
  %158 = load ptr, ptr %157, align 8
  store ptr %158, ptr %156, align 8
  %159 = load ptr, ptr %156, align 8
  call void @coroutine_call(ptr %159)
  %160 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %159, i32 0, i32 4
  %161 = load { ptr, i160 }, ptr %160, align 8
  %162 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %161, ptr %162, align 8
  %163 = load ptr, ptr %127, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %163, 0
  %165 = load ptr, ptr %126, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %165, 1
  %167 = load ptr, ptr %125, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %167, 2
  %169 = load i32, ptr %124, align 4
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, i32 %169, 3
  %171 = alloca [0 x ptr], align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 0, ptr %171)
  %173 = call ptr @llvm.invariant.start.p0(i64 160, ptr %163)
  %174 = getelementptr ptr, ptr %163, i32 %169
  %175 = getelementptr ptr, ptr %174, i32 7
  %176 = load ptr, ptr %175, align 8
  %177 = alloca {}, align 8
  %178 = call ptr @behavior_wrapper(ptr %176, { ptr, ptr, ptr, i32 } %170, ptr %177)
  call void %178({ ptr, ptr, ptr, i32 } %170, { ptr, ptr, ptr, i32 } %170, ptr %171) #17
  %179 = load ptr, ptr %162, align 8
  %180 = getelementptr { [3 x i64], [3 x ptr] }, ptr %179, i32 0, i32 0, i32 1
  %181 = getelementptr { [3 x i64], [3 x ptr] }, ptr %179, i32 0, i32 0, i32 2
  %182 = getelementptr { [3 x i64], [3 x ptr] }, ptr %179, i32 0, i32 1, i32 0
  %183 = getelementptr { [3 x i64], [3 x ptr] }, ptr %179, i32 0, i32 1, i32 1
  %184 = load i64, ptr %180, align 4
  %185 = load i64, ptr %181, align 4
  %186 = load ptr, ptr %182, align 8
  %187 = load ptr, ptr %183, align 8
  %188 = load i64, ptr @Exception, align 4
  %189 = call i1 @subtype_test_wrapper(ptr %186, i64 %185, i64 %184, i64 %188, i64 ptrtoint (ptr @Exception to i64), ptr %187)
  %190 = alloca i1, align 1
  store i1 %189, ptr %190, align 1
  %191 = load i1, ptr %190, align 1
  br i1 %191, label %192, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %208

192:                                              ; preds = %4
  %193 = getelementptr { ptr, i160 }, ptr %162, i32 0, i32 0
  %194 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %195 = load ptr, ptr %193, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, i160 }, ptr %162, i32 0, i32 1
  %197 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %198 = load i160, ptr %196, align 4
  store i160 %198, ptr %197, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %199 = load ptr, ptr %194, align 8
  %200 = insertvalue { ptr, i160 } undef, ptr %199, 0
  %201 = load i160, ptr %197, align 4
  %202 = insertvalue { ptr, i160 } %200, i160 %201, 1
  %203 = call ptr @get_current_coroutine()
  %204 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %203, i32 0, i32 4
  store { ptr, i160 } %202, ptr %204, align 8
  call void @coroutine_yield(ptr %203)
  %205 = load { ptr, i160 }, ptr %204, align 8
  store { ptr, i160 } %205, ptr %6, align 8
  %206 = load ptr, ptr %194, align 8
  store ptr %206, ptr %193, align 8
  %207 = load i160, ptr %197, align 4
  store i160 %207, ptr %196, align 4
  br label %208

208:                                              ; preds = %._crit_edge, %192
  %209 = load ptr, ptr %156, align 8
  %210 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %209, i32 0, i32 4
  %211 = load { ptr, i160 }, ptr %210, align 8
  store { ptr, i160 } %211, ptr %7, align 8
  store { ptr, i160 } %3, ptr %8, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = load ptr, ptr %8, align 8
  %215 = call ptr @llvm.invariant.start.p0(i64 56, ptr %214)
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %217 = load i32, ptr %216, align 4
  %218 = getelementptr ptr, ptr %214, i32 %217
  %219 = load ptr, ptr %218, align 8
  %220 = call ptr @typegetter_wrapper(ptr %219, ptr %213)
  %221 = load ptr, ptr %7, align 8
  %222 = ptrtoint ptr %221 to i64
  %223 = icmp eq i64 %222, ptrtoint (ptr @nil_typ to i64)
  %224 = icmp eq i64 %222, 0
  %225 = or i1 %223, %224
  %226 = icmp eq i1 %225, false
  store i1 %226, ptr %9, align 1
  %227 = load i1, ptr %9, align 1
  br i1 %227, label %228, label %239

228:                                              ; preds = %208
  %229 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %230 = load ptr, ptr %229, align 8
  store ptr %230, ptr %11, align 8
  %231 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %232 = load i160, ptr %231, align 4
  store i160 %232, ptr %10, align 4
  %233 = load ptr, ptr %11, align 8
  store ptr %233, ptr %13, align 8
  %234 = load i160, ptr %10, align 4
  store i160 %234, ptr %12, align 4
  %235 = load ptr, ptr %13, align 8
  %236 = insertvalue { ptr, i160 } undef, ptr %235, 0
  %237 = load i160, ptr %12, align 4
  %238 = insertvalue { ptr, i160 } %236, i160 %237, 1
  store { ptr, i160 } %238, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem3, align 8
  br label %240

239:                                              ; preds = %208
  store { ptr, i160 } poison, ptr %.reg2mem3, align 8
  br label %240

240:                                              ; preds = %239, %228
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem, align 8
  br label %241

241:                                              ; preds = %240
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr, ptr, ptr, i32 } @FileSystem__Self_read_file_file_nameString(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @String)
  %17 = alloca i32, align 4
  store i32 3, ptr %17, align 4
  %18 = load i32, ptr %17, align 4
  %19 = sext i32 %18 to i64
  %20 = alloca ptr, align 8
  %21 = mul i64 %19, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %22 = call ptr @bump_malloc(i64 %21)
  store ptr %22, ptr %20, align 8
  %23 = alloca ptr, align 8
  %24 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  store ptr %25, ptr %23, align 8
  %26 = alloca i32, align 4
  store i32 0, ptr %26, align 4
  %27 = load ptr, ptr %23, align 8
  %28 = load i32, ptr %26, align 4
  %29 = sext i32 %28 to i64
  %30 = mul i64 ptrtoint (ptr getelementptr ([2 x i8], ptr null, i32 1) to i64), %29
  %31 = getelementptr i8, ptr %27, i64 %30
  %32 = load <2 x i8>, ptr @nfizp_rb, align 2
  store <2 x i8> %32, ptr %31, align 2
  %33 = alloca i32, align 4
  store i32 2, ptr %33, align 4
  %34 = alloca i32, align 4
  store i32 3, ptr %34, align 4
  %35 = alloca [1 x ptr], align 8
  store ptr @String, ptr %35, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr ptr, ptr %36, i32 6
  %38 = load ptr, ptr %37, align 8
  %39 = call { i64, i64 } @size_wrapper(ptr %38, ptr %35)
  %40 = extractvalue { i64, i64 } %39, 0
  %41 = call ptr @bump_malloc(i64 %40)
  %42 = alloca i32, align 4
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  store ptr @String, ptr %45, align 8
  store ptr %41, ptr %44, align 8
  store i32 10, ptr %42, align 4
  %46 = alloca i32, align 4
  store i32 2, ptr %46, align 4
  %47 = alloca i32, align 4
  store i32 3, ptr %47, align 4
  %48 = load ptr, ptr %23, align 8
  %49 = insertvalue { ptr } undef, ptr %48, 0
  %50 = load i32, ptr %46, align 4
  %51 = load i32, ptr %47, align 4
  %52 = load ptr, ptr %45, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %44, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %43, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %42, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  %60 = alloca [3 x ptr], align 8
  %61 = getelementptr [3 x ptr], ptr %60, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %61, align 8
  %62 = getelementptr [3 x ptr], ptr %60, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %60, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 9, ptr %60)
  %65 = call ptr @llvm.invariant.start.p0(i64 632, ptr %52)
  %66 = getelementptr ptr, ptr %52, i32 %58
  %67 = getelementptr ptr, ptr %66, i32 6
  %68 = load ptr, ptr %67, align 8
  %69 = alloca { ptr, ptr, ptr }, align 8
  %70 = getelementptr { ptr, ptr, ptr }, ptr %69, i32 0, i32 0
  store ptr @buffer_typ, ptr %70, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %69, i32 0, i32 1
  store ptr @i32_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %69, i32 0, i32 2
  store ptr @i32_typ, ptr %72, align 8
  %73 = call ptr @behavior_wrapper(ptr %68, { ptr, ptr, ptr, i32 } %59, ptr %69)
  call void %73({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr %60, { ptr } %49, i32 %50, i32 %51) #17
  %74 = alloca [1 x ptr], align 8
  store ptr @FileReader, ptr %74, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr ptr, ptr %75, i32 6
  %77 = load ptr, ptr %76, align 8
  %78 = call { i64, i64 } @size_wrapper(ptr %77, ptr %74)
  %79 = extractvalue { i64, i64 } %78, 0
  %80 = call ptr @bump_malloc(i64 %79)
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  store ptr @FileReader, ptr %81, align 8
  store ptr %80, ptr %82, align 8
  store i32 10, ptr %83, align 4
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %87 = load ptr, ptr %82, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %87, 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 2
  %92 = load i32, ptr %83, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %92, 3
  %94 = alloca [0 x ptr], align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr %94)
  %96 = call ptr @llvm.invariant.start.p0(i64 64, ptr %85)
  %97 = getelementptr ptr, ptr %85, i32 %92
  %98 = getelementptr ptr, ptr %97, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = alloca {}, align 8
  %101 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %93, ptr %100)
  call void %101({ ptr, ptr, ptr, i32 } %93, { ptr, ptr, ptr, i32 } %93, ptr %94) #17
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %6, align 8
  store ptr %104, ptr %103, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %106 = load ptr, ptr %9, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %108 = load ptr, ptr %12, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %110 = load i32, ptr %15, align 4
  store i32 %110, ptr %109, align 4
  call void @set_offset(ptr %102, ptr @String)
  %111 = load ptr, ptr %103, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = load ptr, ptr %105, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %113, 1
  %115 = load ptr, ptr %107, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %115, 2
  %117 = load i32, ptr %109, align 4
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, i32 %117, 3
  %119 = alloca { ptr, ptr, ptr, i32 }, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %121 = load ptr, ptr %45, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %123 = load ptr, ptr %44, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %125 = load ptr, ptr %43, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %127 = load i32, ptr %42, align 4
  store i32 %127, ptr %126, align 4
  call void @set_offset(ptr %119, ptr @String)
  %128 = load ptr, ptr %120, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = load ptr, ptr %122, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %130, 1
  %132 = load ptr, ptr %124, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %132, 2
  %134 = load i32, ptr %126, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %134, 3
  %136 = getelementptr { ptr, i160 }, ptr %81, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, i160 } undef, ptr %137, 0
  %139 = getelementptr { ptr, i160 }, ptr %81, i32 0, i32 1
  %140 = load i160, ptr %139, align 4
  %141 = insertvalue { ptr, i160 } %138, i160 %140, 1
  %142 = alloca [3 x ptr], align 8
  %143 = getelementptr [3 x ptr], ptr %142, i32 0, i32 0
  store ptr @_parameterization_String, ptr %143, align 8
  %144 = getelementptr [3 x ptr], ptr %142, i32 0, i32 1
  store ptr @_parameterization_String, ptr %144, align 8
  %145 = getelementptr [3 x ptr], ptr %142, i32 0, i32 2
  store ptr @_parameterization_FileReader, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 9, ptr %142)
  %147 = call ptr @llvm.invariant.start.p0(i64 56, ptr @FileSystem)
  %148 = load ptr, ptr getelementptr (ptr, ptr @FileSystem, i32 10), align 8
  %149 = alloca { ptr, ptr, ptr }, align 8
  %150 = getelementptr { ptr, ptr, ptr }, ptr %149, i32 0, i32 0
  store ptr %111, ptr %150, align 8
  %151 = getelementptr { ptr, ptr, ptr }, ptr %149, i32 0, i32 1
  store ptr %128, ptr %151, align 8
  %152 = getelementptr { ptr, ptr, ptr }, ptr %149, i32 0, i32 2
  store ptr %137, ptr %152, align 8
  %153 = call ptr @class_behavior_wrapper(ptr %148, ptr %149)
  %154 = call { ptr, i160 } %153(ptr %142, { ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %135, { ptr, i160 } %141) #17
  %155 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %154, ptr %155, align 8
  %156 = alloca { ptr, ptr, ptr, i32 }, align 8
  %157 = getelementptr { ptr, i160 }, ptr %155, i32 0, i32 0
  %158 = getelementptr { ptr, i160 }, ptr %156, i32 0, i32 0
  %159 = load ptr, ptr %157, align 8
  store ptr %159, ptr %158, align 8
  %160 = getelementptr { ptr, i160 }, ptr %155, i32 0, i32 1
  %161 = getelementptr { ptr, i160 }, ptr %156, i32 0, i32 1
  %162 = load i160, ptr %160, align 4
  store i160 %162, ptr %161, align 4
  call void @set_offset(ptr %156, ptr @String)
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %163, ptr @String)
  %176 = load ptr, ptr %165, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %176, 0
  %178 = load ptr, ptr %168, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } %177, ptr %178, 1
  %180 = load ptr, ptr %171, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %180, 2
  %182 = load i32, ptr %174, align 4
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %182, 3
  ret { ptr, ptr, ptr, i32 } %183
}

define void @FileSystem__Self_write_file_file_nameString_textString(ptr %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %2, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @String)
  %32 = alloca i32, align 4
  store i32 3, ptr %32, align 4
  %33 = load i32, ptr %32, align 4
  %34 = sext i32 %33 to i64
  %35 = alloca ptr, align 8
  %36 = mul i64 %34, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %37 = call ptr @bump_malloc(i64 %36)
  store ptr %37, ptr %35, align 8
  %38 = alloca ptr, align 8
  %39 = getelementptr { ptr }, ptr %35, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  store ptr %40, ptr %38, align 8
  %41 = alloca i32, align 4
  store i32 0, ptr %41, align 4
  %42 = load ptr, ptr %38, align 8
  %43 = load i32, ptr %41, align 4
  %44 = sext i32 %43 to i64
  %45 = mul i64 ptrtoint (ptr getelementptr ([2 x i8], ptr null, i32 1) to i64), %44
  %46 = getelementptr i8, ptr %42, i64 %45
  %47 = load <2 x i8>, ptr @zmusp_wb, align 2
  store <2 x i8> %47, ptr %46, align 2
  %48 = alloca i32, align 4
  store i32 2, ptr %48, align 4
  %49 = alloca i32, align 4
  store i32 3, ptr %49, align 4
  %50 = alloca [1 x ptr], align 8
  store ptr @String, ptr %50, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr ptr, ptr %51, i32 6
  %53 = load ptr, ptr %52, align 8
  %54 = call { i64, i64 } @size_wrapper(ptr %53, ptr %50)
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = call ptr @bump_malloc(i64 %55)
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  %60 = alloca ptr, align 8
  store ptr @String, ptr %60, align 8
  store ptr %56, ptr %59, align 8
  store i32 10, ptr %57, align 4
  %61 = alloca i32, align 4
  store i32 2, ptr %61, align 4
  %62 = alloca i32, align 4
  store i32 3, ptr %62, align 4
  %63 = load ptr, ptr %38, align 8
  %64 = insertvalue { ptr } undef, ptr %63, 0
  %65 = load i32, ptr %61, align 4
  %66 = load i32, ptr %62, align 4
  %67 = load ptr, ptr %60, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = load ptr, ptr %59, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %69, 1
  %71 = load ptr, ptr %58, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %71, 2
  %73 = load i32, ptr %57, align 4
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %73, 3
  %75 = alloca [3 x ptr], align 8
  %76 = getelementptr [3 x ptr], ptr %75, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %76, align 8
  %77 = getelementptr [3 x ptr], ptr %75, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %77, align 8
  %78 = getelementptr [3 x ptr], ptr %75, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %78, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 9, ptr %75)
  %80 = call ptr @llvm.invariant.start.p0(i64 632, ptr %67)
  %81 = getelementptr ptr, ptr %67, i32 %73
  %82 = getelementptr ptr, ptr %81, i32 6
  %83 = load ptr, ptr %82, align 8
  %84 = alloca { ptr, ptr, ptr }, align 8
  %85 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 0
  store ptr @buffer_typ, ptr %85, align 8
  %86 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 1
  store ptr @i32_typ, ptr %86, align 8
  %87 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 2
  store ptr @i32_typ, ptr %87, align 8
  %88 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %74, ptr %84)
  call void %88({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr %75, { ptr } %64, i32 %65, i32 %66) #17
  %89 = alloca [1 x ptr], align 8
  store ptr @FileWriter, ptr %89, align 8
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr ptr, ptr %90, i32 6
  %92 = load ptr, ptr %91, align 8
  %93 = call { i64, i64 } @size_wrapper(ptr %92, ptr %89)
  %94 = extractvalue { i64, i64 } %93, 0
  %95 = call ptr @bump_malloc(i64 %94)
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  store ptr @FileWriter, ptr %96, align 8
  store ptr %95, ptr %97, align 8
  store i32 10, ptr %98, align 4
  %99 = alloca { ptr, ptr, ptr, i32 }, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %21, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %103 = load ptr, ptr %24, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %105 = load ptr, ptr %27, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %107 = load i32, ptr %30, align 4
  store i32 %107, ptr %106, align 4
  call void @set_offset(ptr %99, ptr @String)
  %108 = load ptr, ptr %100, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %102, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %104, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %106, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = load ptr, ptr %97, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %122, 2
  %124 = load i32, ptr %98, align 4
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, i32 %124, 3
  %126 = alloca [1 x ptr], align 8
  %127 = getelementptr [1 x ptr], ptr %126, i32 0, i32 0
  store ptr @_parameterization_String, ptr %127, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 1, ptr %126)
  %129 = call ptr @llvm.invariant.start.p0(i64 72, ptr %117)
  %130 = getelementptr ptr, ptr %117, i32 %124
  %131 = getelementptr ptr, ptr %130, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = alloca { ptr }, align 8
  %134 = getelementptr { ptr }, ptr %133, i32 0, i32 0
  store ptr %108, ptr %134, align 8
  %135 = call ptr @behavior_wrapper(ptr %132, { ptr, ptr, ptr, i32 } %125, ptr %133)
  call void %135({ ptr, ptr, ptr, i32 } %125, { ptr, ptr, ptr, i32 } %125, ptr %126, { ptr, ptr, ptr, i32 } %115) #17
  %136 = alloca { ptr, ptr, ptr, i32 }, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %7, align 8
  store ptr %138, ptr %137, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 1
  %140 = load ptr, ptr %10, align 8
  store ptr %140, ptr %139, align 8
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 2
  %142 = load ptr, ptr %13, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 3
  %144 = load i32, ptr %16, align 4
  store i32 %144, ptr %143, align 4
  call void @set_offset(ptr %136, ptr @String)
  %145 = load ptr, ptr %137, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %145, 0
  %147 = load ptr, ptr %139, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %147, 1
  %149 = load ptr, ptr %141, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %149, 2
  %151 = load i32, ptr %143, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %151, 3
  %153 = alloca { ptr, ptr, ptr, i32 }, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 0
  %155 = load ptr, ptr %60, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 1
  %157 = load ptr, ptr %59, align 8
  store ptr %157, ptr %156, align 8
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 2
  %159 = load ptr, ptr %58, align 8
  store ptr %159, ptr %158, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 3
  %161 = load i32, ptr %57, align 4
  store i32 %161, ptr %160, align 4
  call void @set_offset(ptr %153, ptr @String)
  %162 = load ptr, ptr %154, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %164 = load ptr, ptr %156, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 1
  %166 = load ptr, ptr %158, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 2
  %168 = load i32, ptr %160, align 4
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %168, 3
  %170 = getelementptr { ptr, i160 }, ptr %96, i32 0, i32 0
  %171 = load ptr, ptr %170, align 8
  %172 = insertvalue { ptr, i160 } undef, ptr %171, 0
  %173 = getelementptr { ptr, i160 }, ptr %96, i32 0, i32 1
  %174 = load i160, ptr %173, align 4
  %175 = insertvalue { ptr, i160 } %172, i160 %174, 1
  %176 = alloca [3 x ptr], align 8
  %177 = getelementptr [3 x ptr], ptr %176, i32 0, i32 0
  store ptr @_parameterization_String, ptr %177, align 8
  %178 = getelementptr [3 x ptr], ptr %176, i32 0, i32 1
  store ptr @_parameterization_String, ptr %178, align 8
  %179 = getelementptr [3 x ptr], ptr %176, i32 0, i32 2
  store ptr @_parameterization_FileWriter, ptr %179, align 8
  %180 = call ptr @llvm.invariant.start.p0(i64 9, ptr %176)
  %181 = call ptr @llvm.invariant.start.p0(i64 56, ptr @FileSystem)
  %182 = load ptr, ptr getelementptr (ptr, ptr @FileSystem, i32 10), align 8
  %183 = alloca { ptr, ptr, ptr }, align 8
  %184 = getelementptr { ptr, ptr, ptr }, ptr %183, i32 0, i32 0
  store ptr %145, ptr %184, align 8
  %185 = getelementptr { ptr, ptr, ptr }, ptr %183, i32 0, i32 1
  store ptr %162, ptr %185, align 8
  %186 = getelementptr { ptr, ptr, ptr }, ptr %183, i32 0, i32 2
  store ptr %171, ptr %186, align 8
  %187 = call ptr @class_behavior_wrapper(ptr %182, ptr %183)
  %188 = call { ptr, i160 } %187(ptr %176, { ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %169, { ptr, i160 } %175) #17
  %189 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %188, ptr %189, align 8
  %190 = alloca i64, align 8
  %191 = getelementptr { ptr, i160 }, ptr %189, i32 0, i32 1
  %192 = load i64, ptr %191, align 4
  store i64 %192, ptr %190, align 4
  ret void
}

define { ptr, i160 } @_functionliteral_ujbvsloqoy({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @File)
  %18 = load ptr, ptr %7, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %18, 0
  %20 = load ptr, ptr %10, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %20, 1
  %22 = load ptr, ptr %13, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 2
  %24 = load i32, ptr %16, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %24, 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  %38 = alloca [1 x ptr], align 8
  %39 = getelementptr [1 x ptr], ptr %38, i32 0, i32 0
  store ptr @_parameterization_File, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 1, ptr %38)
  %41 = call ptr @llvm.invariant.start.p0(i64 24, ptr %27)
  %42 = getelementptr ptr, ptr %27, i32 %36
  %43 = getelementptr ptr, ptr %42, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = alloca { ptr }, align 8
  %46 = getelementptr { ptr }, ptr %45, i32 0, i32 0
  store ptr %18, ptr %46, align 8
  %47 = call ptr @behavior_wrapper(ptr %44, { ptr, ptr, ptr, i32 } %37, ptr %45)
  %48 = call { ptr, i160 } %47({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr %38, { ptr, ptr, ptr, i32 } %25) #17
  %49 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %48, ptr %49, align 8
  %50 = alloca i160, align 8
  %51 = alloca ptr, align 8
  %52 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  store ptr %53, ptr %51, align 8
  %54 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 1
  %55 = load i160, ptr %54, align 4
  store i160 %55, ptr %50, align 4
  %56 = alloca i160, align 8
  %57 = alloca ptr, align 8
  %58 = load ptr, ptr %51, align 8
  store ptr %58, ptr %57, align 8
  %59 = load i160, ptr %50, align 4
  store i160 %59, ptr %56, align 4
  %60 = load ptr, ptr %57, align 8
  %61 = insertvalue { ptr, i160 } undef, ptr %60, 0
  %62 = load i160, ptr %56, align 4
  %63 = insertvalue { ptr, i160 } %61, i160 %62, 1
  ret { ptr, i160 } %63
}

define void @coroutine_muarwmssow_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 2
  %4 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %5 = load { ptr, ptr, ptr, i32 }, ptr %3, align 8
  %6 = load ptr, ptr %0, align 8
  %7 = call { ptr, i160 } %6({ ptr, ptr, ptr, i32 } %4, { ptr, ptr, ptr, i32 } %5)
  %8 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %0, i32 0, i32 4, i32 0
  store { ptr, i160 } %7, ptr %8, align 8
  ret void
}

define void @coroutine_muarwmssow_buffer_filler(ptr %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 2
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  store { ptr, ptr, ptr, i32 } %2, ptr %5, align 8
  ret void
}

define void @coroutine_uppkywgipx_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  %3 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %4 = load ptr, ptr %0, align 8
  %5 = call { ptr, i160 } %4({ ptr, ptr, ptr, i32 } %3)
  %6 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %0, i32 0, i32 4, i32 0
  store { ptr, i160 } %5, ptr %6, align 8
  ret void
}

define void @coroutine_uppkywgipx_buffer_filler(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  ret void
}

define ptr @FileProcessor_field_FileProcessor_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FileProcessor_B_process_fileFile({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @File, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @File to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 2, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [3 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define ptr @typegetter_wrapper(ptr %f, ptr nocapture nofree noundef nonnull readonly %0) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f(ptr nocapture nofree noundef nonnull readonly %0) #18
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { i64, i64 } @size_wrapper(ptr %f, ptr nocapture nofree readonly %0) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call { i64, i64 } %f(ptr nocapture nofree readonly %0) #18
  ret { i64, i64 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { ptr, i160 } @box_wrapper(ptr %f, ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call { ptr, i160 } %f(ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #18
  ret { ptr, i160 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @unbox_wrapper(ptr %f, { ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #4 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void %f({ ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #19
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @behavior_wrapper(ptr %f, { ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #5 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #20
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @class_behavior_wrapper(ptr %f, ptr nocapture nofree noundef nonnull %0) #5 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f(ptr nocapture nofree noundef nonnull %0) #20
  ret ptr %result
}

define ptr @adjust_trampoline(ptr %tramp) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %ret = call ptr @llvm.adjust.trampoline(ptr %tramp) #21
  ret ptr %ret
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #6

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc(i64 noundef %size) #7 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr @current_ptr) #7
  ret ptr %result
}

; Function Attrs: mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr %current_ptr) #8 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %size_plus_15 = add i64 %size, 15
  %aligned_size = and i64 %size_plus_15, -16
  %current = load ptr, ptr %current_ptr, align 8
  %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
  store ptr %new_ptr, ptr %current_ptr, align 8
  ret ptr %current
}

define { i64, i64 } @_data_size_tuple_typ(ptr %0) {
  %.reg2mem = alloca i64, align 8
  %.reg2mem2 = alloca i64, align 8
  %.reg2mem5 = alloca i64, align 8
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem11 = alloca i64, align 8
  %.reg2mem22.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.010.reg2mem = alloca i64, align 8
  %.reg2mem22.011.reg2mem = alloca i64, align 8
  %.reg2mem14 = alloca i64, align 8
  %.in.reg2mem = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  store i64 %3, ptr %.reg2mem11, align 4
  %.reload13 = load i64, ptr %.reg2mem11, align 4
  %4 = icmp eq i64 %.reload13, 0
  br i1 %4, label %.._crit_edge_crit_edge, label %..lr.ph_crit_edge

..lr.ph_crit_edge:                                ; preds = %1
  %.reload12 = load i64, ptr %.reg2mem11, align 4
  store i64 1, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 0, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 1, ptr %.reg2mem14, align 4
  store i64 %.reload12, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.._crit_edge_crit_edge:                           ; preds = %1
  store i64 0, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 1, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph..lr.ph_crit_edge, %..lr.ph_crit_edge
  %.in.reload = load i64, ptr %.in.reg2mem, align 4
  %.reload15 = load i64, ptr %.reg2mem14, align 4
  %.reg2mem22.011.reload = load i64, ptr %.reg2mem22.011.reg2mem, align 4
  %.reg2mem20.010.reload = load i64, ptr %.reg2mem20.010.reg2mem, align 4
  %5 = inttoptr i64 %.in.reload to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 72
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reload)
  store i64 %12, ptr %.reg2mem8, align 4
  %13 = urem i64 %.reg2mem22.011.reload, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reload
  %18 = add i64 %17, %16
  store i64 %18, ptr %.reg2mem5, align 4
  %19 = add i64 %.reload15, 1
  store i64 %19, ptr %.reg2mem2, align 4
  %.reload3 = load i64, ptr %.reg2mem2, align 4
  %20 = getelementptr ptr, ptr %0, i64 %.reload3
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %.reg2mem, align 4
  %.reload = load i64, ptr %.reg2mem, align 4
  %22 = icmp eq i64 %.reload, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph..lr.ph_crit_edge

.lr.ph..lr.ph_crit_edge:                          ; preds = %.lr.ph
  %.reload1 = load i64, ptr %.reg2mem, align 4
  %.reload4 = load i64, ptr %.reg2mem2, align 4
  %.reload7 = load i64, ptr %.reg2mem5, align 4
  %.reload10 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload10, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 %.reload7, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 %.reload4, ptr %.reg2mem14, align 4
  store i64 %.reload1, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %.reload6 = load i64, ptr %.reg2mem5, align 4
  %.reload9 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload6, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 %.reload9, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.._crit_edge_crit_edge, %.._crit_edge_crit_edge
  %.reg2mem20.0.lcssa.reload = load i64, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  %.reg2mem22.0.lcssa.reload = load i64, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  %23 = urem i64 %.reg2mem22.0.lcssa.reload, %.reg2mem20.0.lcssa.reload
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reload, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %.reg2mem22.0.lcssa.reload
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reload, 1
  ret { i64, i64 } %29
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #2

define { i64, i64 } @_data_size_union_typ(ptr %0) {
  %.reg2mem = alloca i64, align 8
  %.reg2mem2 = alloca i64, align 8
  %.reg2mem5 = alloca i64, align 8
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem11 = alloca i64, align 8
  %.reg2mem22.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.010.reg2mem = alloca i64, align 8
  %.reg2mem22.011.reg2mem = alloca i64, align 8
  %.reg2mem14 = alloca i64, align 8
  %.in.reg2mem = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  store i64 %3, ptr %.reg2mem11, align 4
  %.reload13 = load i64, ptr %.reg2mem11, align 4
  %4 = icmp eq i64 %.reload13, 0
  br i1 %4, label %.._crit_edge_crit_edge, label %..lr.ph_crit_edge

..lr.ph_crit_edge:                                ; preds = %1
  %.reload12 = load i64, ptr %.reg2mem11, align 4
  store i64 1, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 0, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 1, ptr %.reg2mem14, align 4
  store i64 %.reload12, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.._crit_edge_crit_edge:                           ; preds = %1
  store i64 0, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 1, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph..lr.ph_crit_edge, %..lr.ph_crit_edge
  %.in.reload = load i64, ptr %.in.reg2mem, align 4
  %.reload15 = load i64, ptr %.reg2mem14, align 4
  %.reg2mem22.011.reload = load i64, ptr %.reg2mem22.011.reg2mem, align 4
  %.reg2mem20.010.reload = load i64, ptr %.reg2mem20.010.reg2mem, align 4
  %5 = inttoptr i64 %.in.reload to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 72
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 noundef %11, i64 noundef %.reg2mem20.010.reload)
  store i64 %12, ptr %.reg2mem8, align 4
  %13 = urem i64 %.reg2mem22.011.reload, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reload
  %18 = tail call i64 @llvm.umax.i64(i64 noundef %17, i64 noundef %16)
  store i64 %18, ptr %.reg2mem5, align 4
  %19 = add i64 %.reload15, 1
  store i64 %19, ptr %.reg2mem2, align 4
  %.reload3 = load i64, ptr %.reg2mem2, align 4
  %20 = getelementptr ptr, ptr %0, i64 %.reload3
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %.reg2mem, align 4
  %.reload = load i64, ptr %.reg2mem, align 4
  %22 = icmp eq i64 %.reload, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph..lr.ph_crit_edge

.lr.ph..lr.ph_crit_edge:                          ; preds = %.lr.ph
  %.reload1 = load i64, ptr %.reg2mem, align 4
  %.reload4 = load i64, ptr %.reg2mem2, align 4
  %.reload7 = load i64, ptr %.reg2mem5, align 4
  %.reload10 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload10, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 %.reload7, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 %.reload4, ptr %.reg2mem14, align 4
  store i64 %.reload1, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %.reload6 = load i64, ptr %.reg2mem5, align 4
  %.reload9 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload6, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 %.reload9, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.._crit_edge_crit_edge, %.._crit_edge_crit_edge
  %.reg2mem20.0.lcssa.reload = load i64, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  %.reg2mem22.0.lcssa.reload = load i64, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  %right_size = icmp eq i64 %.reg2mem22.0.lcssa.reload, 32
  %flag_size = select i1 %right_size, i64 0, i64 8
  %final_size = add i64 %.reg2mem22.0.lcssa.reload, %flag_size
  %23 = urem i64 %final_size, %.reg2mem20.0.lcssa.reload
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reload, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %final_size
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reload, 1
  ret { i64, i64 } %29
}

define void @_unbox_union_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @_data_size_union_typ(ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = icmp eq i64 %8, 32
  %11 = select i1 %9, ptr %5, ptr %6
  %12 = select i1 %10, ptr %4, ptr %11
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %12, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_Default(ptr %parameterization) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 32, i64 8 }
}

define { ptr, i160 } @_box_Default(ptr %fat_ptr, ptr %parameterization) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %1 = insertvalue { ptr, i160 } undef, ptr %vptr, 0
  %2 = getelementptr i8, ptr %fat_ptr, i64 8
  %3 = load i160, ptr %2, align 4
  %4 = insertvalue { ptr, i160 } %1, i160 %3, 1
  ret { ptr, i160 } %4
}

define void @_unbox_Default({ ptr, i160 } %fat_ptr, ptr %parameterization, ptr %destination) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = extractvalue { ptr, i160 } %fat_ptr, 0
  %data = extractvalue { ptr, i160 } %fat_ptr, 1
  %dest_data = getelementptr i8, ptr %destination, i64 8
  store ptr %vptr, ptr %destination, align 8
  store i160 %data, ptr %dest_data, align 4
  ret void
}

define void @anoint_trampoline(ptr %tramp) {
  %oldProtect = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr %oldProtect) #9
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) #9

define ptr @coroutine_create(ptr %func, ptr %arg_passer) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %stack = call noalias ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #22
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 0
  store ptr %func, ptr %func_ptr, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 1
  %arg_passer_slot = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 2
  %into_callee_first_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 0
  %into_callee_second_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 1
  %into_callee_third_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 2
  store i64 %stack_top_aligned, ptr %into_callee_first_word, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 3
  store i1 false, ptr %is_finished, align 1
  call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1)
declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) #10

declare void @coroutine_trampoline(ptr)

define void @setup_landing_pad() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %region = call noalias ptr @VirtualAlloc(ptr null, i64 5368709120, i32 12288, i32 4) #22
  store ptr %region, ptr @current_ptr, align 8
  %buf_first_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 0
  %buf_second_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 1
  %buf_third_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 2
  %sp = call ptr @llvm.stacksave.p0() #23
  store ptr %sp, ptr %buf_first_word, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr %buf_second_word, align 8
  store ptr %sp, ptr %buf_third_word, align 8
  %current_coroutine = call ptr @coroutine_create(ptr @setup_landing_pad, ptr @arg_passer)
  store ptr %current_coroutine, ptr @current_coroutine, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = call i32 @printf(ptr @string_string.113, ptr @exception_message)
  %cc = load { ptr }, ptr @current_coroutine, align 8
  call void @report_exception({ ptr } %cc)
  call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #11

define void @arg_passer(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 0
  %func = load ptr, ptr %func_ptr, align 8
  call void %func()
  ret void
}

define i1 @returns_one() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

declare void @exit()

define i32 @get_offset(ptr %vptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %id = load i64, ptr %id_ptr, align 4
  %id_of_casted = load i64, ptr %vptr, align 4
  %hash_coef_ptr = getelementptr i64, ptr %vptr, i32 1
  %tbl_size_ptr = getelementptr i64, ptr %vptr, i32 2
  %offset_tbl_ptr = getelementptr ptr, ptr %vptr, i32 5
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %index = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %id)
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %index
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %product, %shifted
  %hash = and i64 %xored, %tbl_size
  %bug = icmp sgt i64 %hash, %tbl_size
  ret i64 %hash
}

define void @assume_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  %dest_value = load i32, ptr %destination, align 4
  %slot = alloca i32, align 4
  store i32 %dest_value, ptr %slot, align 4
  %slotval = load i32, ptr %slot, align 4
  %eq = icmp eq i32 %slotval, %offset
  call void @llvm.assume(i1 %eq) #24
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #12

define void @set_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  store i32 %offset, ptr %destination, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %hash = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id)
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #18
  ret i1 %result
}

define void @arg_buffer_filler(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define ptr @get_current_coroutine() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

; Function Attrs: noinline nounwind memory(readwrite)
define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #13 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %from_buf_first_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 0
  %from_buf_second_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 1
  %from_buf_third_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 2
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = call ptr @llvm.stacksave.p0() #23
  store ptr %sp, ptr %from_buf_first_word, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %is_first_time = call i1 @returns_one()
  br i1 %is_first_time, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #14
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #14

define void @coroutine_yield(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr @into_caller_buf) #25
  ret void
}

define void @coroutine_call(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %old_into_caller = load [3 x ptr], ptr @into_caller_buf, align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly @into_caller_buf, ptr %into_callee_buf) #25
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store [3 x ptr] %old_into_caller, ptr @into_caller_buf, align 8
  ret void
}

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #4 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #5 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none) }
attributes #6 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #7 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #8 = { mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #9 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #10 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1) "alloc-family"="malloc" }
attributes #11 = { nocallback nofree nosync nounwind willreturn }
attributes #12 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #13 = { noinline nounwind memory(readwrite) }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind willreturn memory(argmem: readwrite) }
attributes #16 = { nounwind willreturn memory(argmem: read, inaccessiblemem: readwrite) }
attributes #17 = { nounwind }
attributes #18 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #19 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #20 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
attributes #21 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
attributes #22 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1) "alloc-family"="malloc" }
attributes #23 = { mustprogress nofree nosync nounwind willreturn }
attributes #24 = { mustprogress nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #25 = { nounwind memory(readwrite) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
