; ModuleID = '<stdin>'
source_filename = "llvm-link"

@_parameterization_Nothing = linkonce_odr constant [2 x ptr] [ptr @nothing_typ, ptr null]
@_parameterization_Nil = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr null]
@_parameterization_Ptri32_or_Nil = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Nil, ptr null]
@mutqy_bigtingstxt = internal constant [12 x i8] c"bigtings.txt"
@pmocy_thisnis_hownwe_donit = internal constant [20 x i8] c"this\0Ais how\0Awe do\0Ait"
@sciqs_bigtingstxt = internal constant [12 x i8] c"bigtings.txt"
@_parameterization_FunctionPtri32_to_Nothing = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Nothing, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_FunctionPtri32._Ptri32_to_Ptri32 = linkonce_odr constant [5 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_Integer2 = linkonce_odr constant [2 x ptr] [ptr @Integer2, ptr null]
@_parameterization_Character = linkonce_odr constant [2 x ptr] [ptr @Character, ptr null]
@jufhx_boom = internal constant [5 x i8] c"boom!"
@_parameterization_Ptri64 = linkonce_odr constant [2 x ptr] [ptr @i64_typ, ptr null]
@wntye_so_it_is_true = internal constant [14 x i8] c"so it is true!"
@tlobn_barrys_color_is = internal constant [16 x i8] c"barry's color is"
@_parameterization_Beaver = linkonce_odr constant [2 x ptr] [ptr @Beaver, ptr null]
@_parameterization_Animal = linkonce_odr constant [2 x ptr] [ptr @Animal, ptr null]
@xmbrp_did_get_here = internal constant [13 x i8] c"did get here!"
@hwsxs_start = internal constant [5 x i8] c"start"
@_parameterization_Ptrf64_or_Ptri32 = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr @_parameterization_Ptrf64, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_Ptri1 = linkonce_odr constant [2 x ptr] [ptr @bool_typ, ptr null]
@uudzy_Hello_World = internal constant [13 x i8] c"Hello, World!"
@ekesy_w = internal constant [1 x i8] c"w"
@ibcbk_r = internal constant [1 x i8] c"r"
@dmgph_one = internal constant [3 x i8] c"one"
@fmczg_CUsersPaulKOneDriveDocumentsPLPyPLtmpgjbyyomini = internal constant [58 x i8] c"C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpgj9by2yo.mini"
@uclzf_beaver = internal constant [7 x i8] c"beaver!"
@osngq_animal = internal constant [7 x i8] c"animal!"
@_parameterization_ListNode = linkonce_odr constant [2 x ptr] [ptr @ListNode, ptr null]
@_parameterization_Ptrf64 = linkonce_odr constant [2 x ptr] [ptr @f64_typ, ptr null]
@mlkom_Integer = internal constant [8 x i8] c"Integer2"
@reyrn_Here_I_am = internal constant [10 x i8] c"Here I am!"
@ffter_number = internal constant [6 x i8] c"number"
@gisic_CUsersPaulKOneDriveDocumentsPLPyPLtmpgjbyyomini = internal constant [58 x i8] c"C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpgj9by2yo.mini"
@_parameterization_IntArray = linkonce_odr constant [2 x ptr] [ptr @IntArray, ptr null]
@ibqfb_CUsersPaulKOneDriveDocumentsPLPyPLtmpgjbyyomini = internal constant [58 x i8] c"C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpgj9by2yo.mini"
@bknxo_CUsersPaulKOneDriveDocumentsPLPyPLtmpgjbyyomini = internal constant [58 x i8] c"C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpgj9by2yo.mini"
@_parameterization_BufferPtri32 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@vmgvw_An_outofbounds_error_occurred_while_indexing_into_a_collection = internal constant [65 x i8] c"An out-of-bounds error occurred while indexing into a collection."
@ithzk_The_indexing_argument_was = internal constant [25 x i8] c"The indexing argument was"
@bnara_The_size_of_the_collection_being_indexed_was = internal constant [44 x i8] c"The size of the collection being indexed was"
@_parameterization_IntIterator = linkonce_odr constant [2 x ptr] [ptr @IntIterator, ptr null]
@_parameterization_FunctionPtri32_to_Ptri1 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri1, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_FunctionPtri32_to_Ptri32 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_IntIterable = linkonce_odr constant [2 x ptr] [ptr @IntIterable, ptr null]
@hefwt_nil = internal constant [3 x i8] c"nil"
@abuba_false = internal constant [5 x i8] c"false"
@kgpxh_true = internal constant [4 x i8] c"true"
@scyxy_ = internal constant [9 x i8] c"---------"
@dckhu_With_message = internal constant [12 x i8] c"With message"
@tvrrm_At_line = internal constant [7 x i8] c"At line"
@ikuvp_Exception_thrown_from_file = internal constant [26 x i8] c"Exception thrown from file"
@arnml_ = internal constant [9 x i8] c"---------"
@yucev_None = internal constant [6 x i8] c"<None>"
@_parameterization_Ptri8 = linkonce_odr constant [2 x ptr] [ptr @i8_typ, ptr null]
@_parameterization_String = linkonce_odr constant [2 x ptr] [ptr @String, ptr null]
@_parameterization_Ptri32 = linkonce_odr constant [2 x ptr] [ptr @i32_typ, ptr null]
@_parameterization_BufferPtri8 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@bzrhh_Object = internal constant [6 x i8] c"Object"
@Iterator_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Iterator]
@Iterator_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 10]
@Iterator = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr @_data_size_Iterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterable_hashtbl = constant [4 x ptr] [ptr null, ptr @Iterable, ptr @any_typ, ptr @Object]
@Iterable_offset_tbl = constant [4 x i32] [i32 0, i32 10, i32 10, i32 12]
@Iterable = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr @_data_size_Iterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Representable_hashtbl = constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 12]
@Representable = constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr @_data_size_Representable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@String_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @String, ptr @Representable, ptr @Object, ptr null, ptr null, ptr @Iterable]
@String_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 10, i32 43, i32 43, i32 0, i32 0, i32 41]
@String = constant { [3 x i64], [7 x ptr], [35 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388073, i64 7], [7 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr @_data_size_String, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [35 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_B_init_, ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_append_xPtri8, ptr @String_B_extend_strString, ptr @String_B__index_xPtri32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_c_string_, ptr @String_B_iterator_, ptr @String_B_repr_, ptr @String_init_, ptr @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_append_xPtri8, ptr @String_extend_strString, ptr @String__index_xPtri32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_c_string_, ptr @String_iterator_, ptr @String_repr_, ptr @String_B_iterator_, ptr @String_iterator_, ptr @String_B_repr_, ptr @String_repr_] }
@Character_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = constant [4 x i32] [i32 15, i32 0, i32 10, i32 10]
@Character = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr @_data_size_Character, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytePtri8, ptr @Character_byte_, ptr @Character_init_bytePtri8] }
@StringIterator_hashtbl = constant [4 x ptr] [ptr @StringIterator, ptr @Object, ptr @any_typ, ptr @Iterator]
@StringIterator_offset_tbl = constant [4 x i32] [i32 10, i32 16, i32 10, i32 16]
@StringIterator = constant { [3 x i64], [7 x ptr], [6 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr @_data_size_StringIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [6 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_] }
@Exception_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = constant [4 x i32] [i32 23, i32 0, i32 10, i32 10]
@Exception = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr @_data_size_Exception, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberPtri32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@IO_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 20]
@IO = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [7 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr @_data_size_IO, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @IO_B__Self_print_xRepresentable__Self_print_xPtri64__Self_print_xString__Self_print_xPtri32__Self_print_xCharacter__Self_print_xPtri8__Self_print_xPtri1__Self_print_xNil__Self_print_xPtrf64, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xPtri64, ptr @IO__Self_print_xString, ptr @IO__Self_print_xPtri32, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xPtri8, ptr @IO__Self_print_xPtri1, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xPtrf64] }
@Blocking_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Blocking, ptr null]
@Blocking_offset_tbl = constant [4 x i32] [i32 12, i32 10, i32 10, i32 0]
@Blocking = constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 847773162914674935, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Blocking_hashtbl, ptr @Blocking_offset_tbl, ptr @_data_size_Blocking, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Blocking_B_init_, ptr @Blocking_init_] }
@Channel_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Channel]
@Channel_offset_tbl = constant [4 x i32] [i32 17, i32 10, i32 0, i32 10]
@Channel = constant { [3 x i64], [7 x ptr], [7 x ptr] } { [3 x i64] [i64 -3668118116639750450, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Channel_hashtbl, ptr @Channel_offset_tbl, ptr @_data_size_Channel, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [7 x ptr] [ptr @Channel_field_value, ptr @Channel_B_init_, ptr @Channel_B_get_, ptr @Channel_B_put_new_valuePtri32, ptr @Channel_init_, ptr @Channel_get_, ptr @Channel_put_new_valuePtri32] }
@IntIterator_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Iterator, ptr @IntIterator, ptr @Object]
@IntIterator_offset_tbl = constant [4 x i32] [i32 10, i32 12, i32 10, i32 12]
@IntIterator = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -933084275656658555, i64 4611686018427388247, i64 3], [7 x ptr] [ptr @subtype_test, ptr @IntIterator_hashtbl, ptr @IntIterator_offset_tbl, ptr @_data_size_IntIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@IntIterable_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Iterable, ptr @IntIterable, ptr @Object]
@IntIterable_offset_tbl = constant [4 x i32] [i32 10, i32 32, i32 10, i32 34]
@IntIterable = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7984962120415158575, i64 4611686018427388247, i64 3], [7 x ptr] [ptr @subtype_test, ptr @IntIterable_hashtbl, ptr @IntIterable_offset_tbl, ptr @_data_size_IntIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@MapIterable_hashtbl = constant [8 x ptr] [ptr @IntIterable, ptr @MapIterable, ptr @Object, ptr null, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@MapIterable_offset_tbl = constant [8 x i32] [i32 36, i32 10, i32 62, i32 0, i32 10, i32 0, i32 0, i32 60]
@MapIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 -7488770571603291722, i64 4611686018427388291, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterable_hashtbl, ptr @MapIterable_offset_tbl, ptr @_data_size_MapIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @MapIterable_field_iterable, ptr @MapIterable_field_f, ptr @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing, ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_chain_otherIntIterable, ptr @MapIterable_B_interleave_otherIntIterable, ptr @MapIterable_B_zip_otherIntIterable, ptr @MapIterable_B_product_otherIntIterable, ptr @MapIterable_B_iterator_, ptr @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @MapIterable_iterator_, ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing, ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_chain_otherIntIterable, ptr @MapIterable_B_interleave_otherIntIterable, ptr @MapIterable_B_zip_otherIntIterable, ptr @MapIterable_B_product_otherIntIterable, ptr @MapIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @MapIterable_iterator_, ptr @MapIterable_B_iterator_, ptr @MapIterable_iterator_, ptr @MapIterable_B_iterator_, ptr @MapIterable_iterator_] }
@MapIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterator, ptr @IntIterator, ptr null, ptr @Iterator, ptr null, ptr null]
@MapIterator_offset_tbl = constant [8 x i32] [i32 18, i32 10, i32 10, i32 16, i32 0, i32 18, i32 0, i32 0]
@MapIterator = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 -146553482626734782, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterator_hashtbl, ptr @MapIterator_offset_tbl, ptr @_data_size_MapIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @MapIterator_field_iterator, ptr @MapIterator_field_f, ptr @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, ptr @MapIterator_B_next_, ptr @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, ptr @MapIterator_next_, ptr @MapIterator_B_next_, ptr @MapIterator_next_] }
@FilterIterable_hashtbl = constant [8 x ptr] [ptr @IntIterable, ptr null, ptr @Object, ptr @FilterIterable, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@FilterIterable_offset_tbl = constant [8 x i32] [i32 36, i32 0, i32 62, i32 10, i32 10, i32 0, i32 0, i32 60]
@FilterIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 8498466713076104350, i64 4611686018427388291, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterable_hashtbl, ptr @FilterIterable_offset_tbl, ptr @_data_size_FilterIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @FilterIterable_field_iterable, ptr @FilterIterable_field_f, ptr @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing, ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_chain_otherIntIterable, ptr @FilterIterable_B_interleave_otherIntIterable, ptr @FilterIterable_B_zip_otherIntIterable, ptr @FilterIterable_B_product_otherIntIterable, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing, ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_chain_otherIntIterable, ptr @FilterIterable_B_interleave_otherIntIterable, ptr @FilterIterable_B_zip_otherIntIterable, ptr @FilterIterable_B_product_otherIntIterable, ptr @FilterIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_iterator_] }
@FilterIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @IntIterator, ptr null, ptr @Iterator, ptr @FilterIterator, ptr null]
@FilterIterator_offset_tbl = constant [8 x i32] [i32 18, i32 10, i32 0, i32 16, i32 0, i32 18, i32 10, i32 0]
@FilterIterator = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 -1221365496900303883, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterator_hashtbl, ptr @FilterIterator_offset_tbl, ptr @_data_size_FilterIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @FilterIterator_field_iterator, ptr @FilterIterator_field_f, ptr @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, ptr @FilterIterator_B_next_, ptr @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, ptr @FilterIterator_next_, ptr @FilterIterator_B_next_, ptr @FilterIterator_next_] }
@ChainIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr @IntIterable, ptr @ChainIterable, ptr null, ptr null, ptr null, ptr @Object]
@ChainIterable_offset_tbl = constant [8 x i32] [i32 10, i32 60, i32 36, i32 10, i32 0, i32 0, i32 0, i32 62]
@ChainIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 -2370247058431047815, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterable_hashtbl, ptr @ChainIterable_offset_tbl, ptr @_data_size_ChainIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ChainIterable_field_first, ptr @ChainIterable_field_second, ptr @ChainIterable_B_init_firstIntIterable_secondIntIterable, ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing, ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_chain_otherIntIterable, ptr @ChainIterable_B_interleave_otherIntIterable, ptr @ChainIterable_B_zip_otherIntIterable, ptr @ChainIterable_B_product_otherIntIterable, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_init_firstIntIterable_secondIntIterable, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing, ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_chain_otherIntIterable, ptr @ChainIterable_B_interleave_otherIntIterable, ptr @ChainIterable_B_zip_otherIntIterable, ptr @ChainIterable_B_product_otherIntIterable, ptr @ChainIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_iterator_] }
@ChainIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @ChainIterator, ptr null, ptr @Iterator, ptr @Object, ptr null, ptr null, ptr @IntIterator]
@ChainIterator_offset_tbl = constant [8 x i32] [i32 10, i32 10, i32 0, i32 19, i32 19, i32 0, i32 0, i32 17]
@ChainIterator = constant { [3 x i64], [7 x ptr], [9 x ptr] } { [3 x i64] [i64 6043157723929225452, i64 4611686018427388073, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterator_hashtbl, ptr @ChainIterator_offset_tbl, ptr @_data_size_ChainIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [9 x ptr] [ptr @ChainIterator_field_first, ptr @ChainIterator_field_second, ptr @ChainIterator_field_on_first, ptr @ChainIterator_B_init_firstIntIterator_secondIntIterator, ptr @ChainIterator_B_next_, ptr @ChainIterator_init_firstIntIterator_secondIntIterator, ptr @ChainIterator_next_, ptr @ChainIterator_B_next_, ptr @ChainIterator_next_] }
@InterleaveIterable_hashtbl = constant [8 x ptr] [ptr @IntIterable, ptr @InterleaveIterable, ptr @Object, ptr null, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@InterleaveIterable_offset_tbl = constant [8 x i32] [i32 36, i32 10, i32 62, i32 0, i32 10, i32 0, i32 0, i32 60]
@InterleaveIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 4936782714255954462, i64 4611686018427388291, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterable_hashtbl, ptr @InterleaveIterable_offset_tbl, ptr @_data_size_InterleaveIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @InterleaveIterable_field_first, ptr @InterleaveIterable_field_second, ptr @InterleaveIterable_B_init_firstIntIterable_secondIntIterable, ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIntIterable, ptr @InterleaveIterable_B_interleave_otherIntIterable, ptr @InterleaveIterable_B_zip_otherIntIterable, ptr @InterleaveIterable_B_product_otherIntIterable, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_init_firstIntIterable_secondIntIterable, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIntIterable, ptr @InterleaveIterable_B_interleave_otherIntIterable, ptr @InterleaveIterable_B_zip_otherIntIterable, ptr @InterleaveIterable_B_product_otherIntIterable, ptr @InterleaveIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_iterator_] }
@InterleaveIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr null, ptr @Iterator, ptr @Object, ptr null, ptr @InterleaveIterator, ptr @IntIterator]
@InterleaveIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 0, i32 19, i32 19, i32 0, i32 10, i32 17]
@InterleaveIterator = constant { [3 x i64], [7 x ptr], [9 x ptr] } { [3 x i64] [i64 -3924664358248524505, i64 4611686018427388073, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterator_hashtbl, ptr @InterleaveIterator_offset_tbl, ptr @_data_size_InterleaveIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [9 x ptr] [ptr @InterleaveIterator_field_first, ptr @InterleaveIterator_field_second, ptr @InterleaveIterator_field_on_first, ptr @InterleaveIterator_B_init_firstIntIterator_secondIntIterator, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_init_firstIntIterator_secondIntIterator, ptr @InterleaveIterator_next_, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_next_] }
@IntTupleIterable_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Iterable, ptr @IntTupleIterable, ptr @Object]
@IntTupleIterable_offset_tbl = constant [4 x i32] [i32 10, i32 12, i32 10, i32 14]
@IntTupleIterable = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 1135628454346210518, i64 4611686018427388247, i64 3], [7 x ptr] [ptr @subtype_test, ptr @IntTupleIterable_hashtbl, ptr @IntTupleIterable_offset_tbl, ptr @_data_size_IntTupleIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@IntTupleIterator_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @Iterator, ptr @IntTupleIterator]
@IntTupleIterator_offset_tbl = constant [4 x i32] [i32 10, i32 12, i32 12, i32 10]
@IntTupleIterator = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 8926924731480624460, i64 4611686018427388157, i64 3], [7 x ptr] [ptr @subtype_test, ptr @IntTupleIterator_hashtbl, ptr @IntTupleIterator_offset_tbl, ptr @_data_size_IntTupleIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@ZipIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @IntTupleIterable, ptr null, ptr @Object, ptr @ZipIterable, ptr null, ptr @Iterable]
@ZipIterable_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 16, i32 0, i32 22, i32 10, i32 0, i32 20]
@ZipIterable = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 35232740166152944, i64 4611686018427388073, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterable_hashtbl, ptr @ZipIterable_offset_tbl, ptr @_data_size_ZipIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ZipIterable_field_first, ptr @ZipIterable_field_second, ptr @ZipIterable_B_init_firstIntIterable_secondIntIterable, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_init_firstIntIterable_secondIntIterable, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_] }
@ZipIterator_hashtbl = constant [8 x ptr] [ptr @IntTupleIterator, ptr null, ptr null, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ZipIterator]
@ZipIterator_offset_tbl = constant [8 x i32] [i32 16, i32 0, i32 0, i32 18, i32 18, i32 0, i32 10, i32 10]
@ZipIterator = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 -2141114445739585318, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterator_hashtbl, ptr @ZipIterator_offset_tbl, ptr @_data_size_ZipIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @ZipIterator_field_first, ptr @ZipIterator_field_second, ptr @ZipIterator_B_init_firstIntIterator_secondIntIterator, ptr @ZipIterator_B_next_, ptr @ZipIterator_init_firstIntIterator_secondIntIterator, ptr @ZipIterator_next_, ptr @ZipIterator_B_next_, ptr @ZipIterator_next_] }
@ProductIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @ProductIterable, ptr @IntTupleIterable, ptr null, ptr @Object, ptr null, ptr null, ptr @Iterable]
@ProductIterable_offset_tbl = constant [8 x i32] [i32 10, i32 10, i32 16, i32 0, i32 22, i32 0, i32 0, i32 20]
@ProductIterable = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 4128338911757318636, i64 4611686018427388073, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterable_hashtbl, ptr @ProductIterable_offset_tbl, ptr @_data_size_ProductIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ProductIterable_field_first, ptr @ProductIterable_field_second, ptr @ProductIterable_B_init_firstIntIterable_secondIntIterable, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_init_firstIntIterable_secondIntIterable, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_] }
@ProductIterator_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @Iterator, ptr @ProductIterator]
@ProductIterator_offset_tbl = constant [4 x i32] [i32 10, i32 18, i32 18, i32 10]
@ProductIterator = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 1697250377212095568, i64 4611686018427388157, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ProductIterator_hashtbl, ptr @ProductIterator_offset_tbl, ptr @_data_size_ProductIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @ProductIterator_field_first_iterator, ptr @ProductIterator_field_second_iterator, ptr @ProductIterator_field_second_iterable, ptr @ProductIterator_field_current_first, ptr @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable, ptr @ProductIterator_B_next_, ptr @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable, ptr @ProductIterator_next_] }
@Range_hashtbl = constant [8 x ptr] [ptr @IntIterable, ptr @Range, ptr @Object, ptr null, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@Range_offset_tbl = constant [8 x i32] [i32 41, i32 10, i32 67, i32 0, i32 10, i32 0, i32 0, i32 65]
@Range = constant { [3 x i64], [7 x ptr], [57 x ptr] } { [3 x i64] [i64 5490049236840671069, i64 4611686018427388291, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Range_hashtbl, ptr @Range_offset_tbl, ptr @_data_size_Range, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [57 x ptr] [ptr @Range_field_start, ptr @Range_field_end, ptr @Range_field_step, ptr @Range_B_init_endPtri32, ptr @Range_B_init_startPtri32_endPtri32, ptr @Range_B_step_stepPtri32, ptr @Range_B_each_fFunctionPtri32_to_Nothing, ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @Range_B_all_fFunctionPtri32_to_Ptri1, ptr @Range_B_any_fFunctionPtri32_to_Ptri1, ptr @Range_B_map_fFunctionPtri32_to_Ptri32, ptr @Range_B_filter_fFunctionPtri32_to_Ptri1, ptr @Range_B_chain_otherIntIterable, ptr @Range_B_interleave_otherIntIterable, ptr @Range_B_zip_otherIntIterable, ptr @Range_B_product_otherIntIterable, ptr @Range_B_iterator_, ptr @Range_init_endPtri32, ptr @Range_init_startPtri32_endPtri32, ptr @Range_step_stepPtri32, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @Range_iterator_, ptr @Range_B_each_fFunctionPtri32_to_Nothing, ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @Range_B_all_fFunctionPtri32_to_Ptri1, ptr @Range_B_any_fFunctionPtri32_to_Ptri1, ptr @Range_B_map_fFunctionPtri32_to_Ptri32, ptr @Range_B_filter_fFunctionPtri32_to_Ptri1, ptr @Range_B_chain_otherIntIterable, ptr @Range_B_interleave_otherIntIterable, ptr @Range_B_zip_otherIntIterable, ptr @Range_B_product_otherIntIterable, ptr @Range_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @Range_iterator_, ptr @Range_B_iterator_, ptr @Range_iterator_, ptr @Range_B_iterator_, ptr @Range_iterator_] }
@RangeIterator_hashtbl = constant [8 x ptr] [ptr @RangeIterator, ptr @IntIterator, ptr @any_typ, ptr null, ptr null, ptr @Iterator, ptr null, ptr @Object]
@RangeIterator_offset_tbl = constant [8 x i32] [i32 10, i32 17, i32 10, i32 0, i32 0, i32 19, i32 0, i32 19]
@RangeIterator = constant { [3 x i64], [7 x ptr], [9 x ptr] } { [3 x i64] [i64 -913562485944406675, i64 4611686018427388093, i64 7], [7 x ptr] [ptr @subtype_test, ptr @RangeIterator_hashtbl, ptr @RangeIterator_offset_tbl, ptr @_data_size_RangeIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [9 x ptr] [ptr @RangeIterator_field_counter, ptr @RangeIterator_field_end, ptr @RangeIterator_field_step, ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_B_next_, ptr @RangeIterator_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_next_, ptr @RangeIterator_B_next_, ptr @RangeIterator_next_] }
@OutOfBoundsDetails_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @OutOfBoundsDetails]
@OutOfBoundsDetails_offset_tbl = constant [4 x i32] [i32 16, i32 0, i32 10, i32 10]
@OutOfBoundsDetails = constant { [3 x i64], [7 x ptr], [6 x ptr] } { [3 x i64] [i64 4650630525701360429, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @OutOfBoundsDetails_hashtbl, ptr @OutOfBoundsDetails_offset_tbl, ptr @_data_size_OutOfBoundsDetails, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [6 x ptr] [ptr @OutOfBoundsDetails_field_bounds, ptr @OutOfBoundsDetails_field_index, ptr @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32, ptr @OutOfBoundsDetails_B_report_, ptr @OutOfBoundsDetails_init_boundsPtri32_indexPtri32, ptr @OutOfBoundsDetails_report_] }
@OutOfBounds_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Exception, ptr @OutOfBounds, ptr @Object]
@OutOfBounds_offset_tbl = constant [4 x i32] [i32 10, i32 26, i32 10, i32 39]
@OutOfBounds = constant { [3 x i64], [7 x ptr], [29 x ptr] } { [3 x i64] [i64 5348403617834207535, i64 4611686018427388247, i64 3], [7 x ptr] [ptr @subtype_test, ptr @OutOfBounds_hashtbl, ptr @OutOfBounds_offset_tbl, ptr @_data_size_OutOfBounds, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [29 x ptr] [ptr @OutOfBounds_field_details, ptr @OutOfBounds_field_line_number, ptr @OutOfBounds_field_file_name, ptr @OutOfBounds_field_message, ptr @OutOfBounds_B_init_boundsPtri32_indexPtri32, ptr @OutOfBounds_B_init_messageString, ptr @OutOfBounds_B_init_, ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, ptr @OutOfBounds_B_report_, ptr @OutOfBounds_B_print_message_, ptr @OutOfBounds_init_boundsPtri32_indexPtri32, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @OutOfBounds_print_message_, ptr @OutOfBounds_field_line_number, ptr @OutOfBounds_field_file_name, ptr @OutOfBounds_field_message, ptr @OutOfBounds_B_init_messageString, ptr @OutOfBounds_B_init_, ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, ptr @OutOfBounds_B_report_, ptr @OutOfBounds_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @OutOfBounds_print_message_] }
@IntArray_hashtbl = constant [8 x ptr] [ptr @Representable, ptr @Iterable, ptr @any_typ, ptr null, ptr null, ptr @IntIterable, ptr @IntArray, ptr @Object]
@IntArray_offset_tbl = constant [8 x i32] [i32 85, i32 83, i32 10, i32 0, i32 0, i32 59, i32 10, i32 85]
@IntArray = constant { [3 x i64], [7 x ptr], [77 x ptr] } { [3 x i64] [i64 7629948565578263212, i64 4611686018427388093, i64 7], [7 x ptr] [ptr @subtype_test, ptr @IntArray_hashtbl, ptr @IntArray_offset_tbl, ptr @_data_size_IntArray, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [77 x ptr] [ptr @IntArray_field_buffer, ptr @IntArray_field_length, ptr @IntArray_field_capacity, ptr @IntArray_B__Self_from_iterable_iterableIntIterable, ptr @IntArray_B_init_, ptr @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, ptr @IntArray_B_length_, ptr @IntArray_B_capacity_, ptr @IntArray_B_buffer_, ptr @IntArray_B_append_xPtri32, ptr @IntArray_B_extend_aryIntArray, ptr @IntArray_B__index_xPtri32, ptr @IntArray_B_pop_, ptr @IntArray_B_copy_, ptr @IntArray_B_each_fFunctionPtri32_to_Nothing, ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32, ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_chain_otherIntIterable, ptr @IntArray_B_interleave_otherIntIterable, ptr @IntArray_B_zip_otherIntIterable, ptr @IntArray_B_product_otherIntIterable, ptr @IntArray_B_iterator_, ptr @IntArray_B_repr_, ptr @IntArray__Self_from_iterable_iterableIntIterable, ptr @IntArray_init_, ptr @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, ptr @IntArray_length_, ptr @IntArray_capacity_, ptr @IntArray_buffer_, ptr @IntArray_append_xPtri32, ptr @IntArray_extend_aryIntArray, ptr @IntArray__index_xPtri32, ptr @IntArray_pop_, ptr @IntArray_copy_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @IntArray_iterator_, ptr @Representable_repr_, ptr @IntArray_B_each_fFunctionPtri32_to_Nothing, ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32, ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_chain_otherIntIterable, ptr @IntArray_B_interleave_otherIntIterable, ptr @IntArray_B_zip_otherIntIterable, ptr @IntArray_B_product_otherIntIterable, ptr @IntArray_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @IntArray_iterator_, ptr @IntArray_B_iterator_, ptr @IntArray_iterator_, ptr @IntArray_B_iterator_, ptr @IntArray_iterator_, ptr @IntArray_B_repr_, ptr @Representable_repr_] }
@IntArrayIterator_hashtbl = constant [8 x ptr] [ptr null, ptr @IntIterator, ptr @any_typ, ptr null, ptr @IntArrayIterator, ptr @Iterator, ptr null, ptr @Object]
@IntArrayIterator_offset_tbl = constant [8 x i32] [i32 0, i32 16, i32 10, i32 0, i32 10, i32 18, i32 0, i32 18]
@IntArrayIterator = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 5577199879563532693, i64 4611686018427388093, i64 7], [7 x ptr] [ptr @subtype_test, ptr @IntArrayIterator_hashtbl, ptr @IntArrayIterator_offset_tbl, ptr @_data_size_IntArrayIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @IntArrayIterator_field_array, ptr @IntArrayIterator_field_index, ptr @IntArrayIterator_B_init_arrayIntArray, ptr @IntArrayIterator_B_next_, ptr @IntArrayIterator_init_arrayIntArray, ptr @IntArrayIterator_next_, ptr @IntArrayIterator_B_next_, ptr @IntArrayIterator_next_] }
@Pair_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
@Pair_offset_tbl = constant [4 x i32] [i32 20, i32 10, i32 10, i32 0]
@Pair = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr @_data_size_Pair, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Iterator2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Iterator2, ptr null]
@Iterator2_offset_tbl = constant [4 x i32] [i32 13, i32 10, i32 10, i32 0]
@Iterator2 = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 4189192806087951739, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterator2_hashtbl, ptr @Iterator2_offset_tbl, ptr @_data_size_Iterator2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterable2_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Iterable2]
@Iterable2_offset_tbl = constant [4 x i32] [i32 33, i32 0, i32 10, i32 10]
@Iterable2 = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 5693646204635713916, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterable2_hashtbl, ptr @Iterable2_offset_tbl, ptr @_data_size_Iterable2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Array_hashtbl = constant [4 x ptr] [ptr @Object, ptr @Iterable2, ptr @Array, ptr @any_typ]
@Array_offset_tbl = constant [4 x i32] [i32 79, i32 56, i32 10, i32 10]
@Array = constant { [3 x i64], [7 x ptr], [69 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388721, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr @_data_size_Array, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [69 x ptr] [ptr @Array_field_Array_0, ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_B__Self_from_iterable_iterableIterable2T, ptr @Array_B_init_, ptr @Array_B_init_capacityPtri32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_grow_, ptr @Array_B__index_xPtri32, ptr @Array_B_throw_oob_xPtri32, ptr @Array_B_unsafe_index_xPtri32, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array__Self_from_iterable_iterableIterable2T, ptr @Array_init_, ptr @Array_init_capacityPtri32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_grow_, ptr @Array__index_xPtri32, ptr @Array_throw_oob_xPtri32, ptr @Array_unsafe_index_xPtri32, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ArrayIterator_hashtbl = constant [4 x ptr] [ptr @ArrayIterator, ptr @Object, ptr @any_typ, ptr @Iterator2]
@ArrayIterator_offset_tbl = constant [4 x i32] [i32 10, i32 20, i32 10, i32 17]
@ArrayIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388181, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr @_data_size_ArrayIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@MapIterable2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @MapIterable2, ptr @any_typ, ptr @Iterable2]
@MapIterable2_offset_tbl = constant [4 x i32] [i32 61, i32 10, i32 10, i32 38]
@MapIterable2 = constant { [3 x i64], [7 x ptr], [51 x ptr] } { [3 x i64] [i64 -1724859134596891929, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @MapIterable2_hashtbl, ptr @MapIterable2_offset_tbl, ptr @_data_size_MapIterable2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [51 x ptr] [ptr @MapIterable2_field_MapIterable2_0, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_field_iterable, ptr @MapIterable2_field_f, ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@MapIterator2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @Iterator2, ptr @MapIterator2, ptr @any_typ]
@MapIterator2_offset_tbl = constant [4 x i32] [i32 21, i32 18, i32 10, i32 10]
@MapIterator2 = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -10255947709272500, i64 4611686018427388279, i64 3], [7 x ptr] [ptr @subtype_test, ptr @MapIterator2_hashtbl, ptr @MapIterator2_offset_tbl, ptr @_data_size_MapIterator2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @MapIterator2_field_MapIterator2_0, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_field_iterator, ptr @MapIterator2_field_f, ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_B_next_, ptr @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_next_, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_B_next_, ptr @MapIterator2_next_] }
@FilterIterable2_hashtbl = constant [4 x ptr] [ptr @Iterable2, ptr @FilterIterable2, ptr @any_typ, ptr @Object]
@FilterIterable2_offset_tbl = constant [4 x i32] [i32 37, i32 10, i32 10, i32 60]
@FilterIterable2 = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 1178467452958968374, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FilterIterable2_hashtbl, ptr @FilterIterable2_offset_tbl, ptr @_data_size_FilterIterable2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_field_iterable, ptr @FilterIterable2_field_f, ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@FilterIterator2_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @Iterator2, ptr @FilterIterator2]
@FilterIterator2_offset_tbl = constant [4 x i32] [i32 10, i32 20, i32 17, i32 10]
@FilterIterator2 = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 8213847504843366470, i64 4611686018427388387, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FilterIterator2_hashtbl, ptr @FilterIterator2_offset_tbl, ptr @_data_size_FilterIterator2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_field_iterator, ptr @FilterIterator2_field_f, ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_next_, ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_next_] }
@ChainIterable2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @Iterable2, ptr @ChainIterable2, ptr @any_typ]
@ChainIterable2_offset_tbl = constant [4 x i32] [i32 60, i32 37, i32 10, i32 10]
@ChainIterable2 = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 -5233298072945030060, i64 4611686018427388279, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ChainIterable2_hashtbl, ptr @ChainIterable2_offset_tbl, ptr @_data_size_ChainIterable2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_field_first, ptr @ChainIterable2_field_second, ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ChainIterator2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Iterator2, ptr @ChainIterator2]
@ChainIterator2_offset_tbl = constant [4 x i32] [i32 21, i32 10, i32 18, i32 10]
@ChainIterator2 = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -228267985060461774, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ChainIterator2_hashtbl, ptr @ChainIterator2_offset_tbl, ptr @_data_size_ChainIterator2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_field_first, ptr @ChainIterator2_field_second, ptr @ChainIterator2_field_on_first, ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_next_, ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_next_] }
@InterleaveIterable2_hashtbl = constant [4 x ptr] [ptr @Iterable2, ptr @InterleaveIterable2, ptr @any_typ, ptr @Object]
@InterleaveIterable2_offset_tbl = constant [4 x i32] [i32 37, i32 10, i32 10, i32 60]
@InterleaveIterable2 = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 -6258231685215461775, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterable2_hashtbl, ptr @InterleaveIterable2_offset_tbl, ptr @_data_size_InterleaveIterable2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_field_first, ptr @InterleaveIterable2_field_second, ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@InterleaveIterator2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @Iterator2, ptr @InterleaveIterator2, ptr @any_typ]
@InterleaveIterator2_offset_tbl = constant [4 x i32] [i32 21, i32 18, i32 10, i32 10]
@InterleaveIterator2 = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 6709847746581360093, i64 4611686018427388279, i64 3], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterator2_hashtbl, ptr @InterleaveIterator2_offset_tbl, ptr @_data_size_InterleaveIterator2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_field_first, ptr @InterleaveIterator2_field_second, ptr @InterleaveIterator2_field_on_first, ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_next_, ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_next_] }
@ZipIterable2_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @ZipIterable2, ptr @Iterable2, ptr @Object]
@ZipIterable2_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 39, i32 62]
@ZipIterable2 = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 -3218950579047519815, i64 4611686018427388289, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ZipIterable2_hashtbl, ptr @ZipIterable2_offset_tbl, ptr @_data_size_ZipIterable2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ZipIterable2_field_ZipIterable2_0, ptr @ZipIterable2_field_ZipIterable2_1, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_field_first, ptr @ZipIterable2_field_second, ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ZipIterator2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Iterator2, ptr @ZipIterator2]
@ZipIterator2_offset_tbl = constant [4 x i32] [i32 22, i32 10, i32 19, i32 10]
@ZipIterator2 = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 5502728639611621286, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ZipIterator2_hashtbl, ptr @ZipIterator2_offset_tbl, ptr @_data_size_ZipIterator2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ZipIterator2_field_ZipIterator2_0, ptr @ZipIterator2_field_ZipIterator2_1, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_field_first, ptr @ZipIterator2_field_second, ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_next_, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_next_] }
@ProductIterable2_hashtbl = constant [4 x ptr] [ptr @ProductIterable2, ptr @Object, ptr @any_typ, ptr @Iterable2]
@ProductIterable2_offset_tbl = constant [4 x i32] [i32 10, i32 62, i32 10, i32 39]
@ProductIterable2 = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 7827074759551300494, i64 4611686018427388319, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ProductIterable2_hashtbl, ptr @ProductIterable2_offset_tbl, ptr @_data_size_ProductIterable2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ProductIterable2_field_ProductIterable2_0, ptr @ProductIterable2_field_ProductIterable2_1, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_field_first, ptr @ProductIterable2_field_second, ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ProductIterator2_hashtbl = constant [4 x ptr] [ptr @ProductIterator2, ptr @Iterator2, ptr @any_typ, ptr @Object]
@ProductIterator2_offset_tbl = constant [4 x i32] [i32 10, i32 21, i32 10, i32 24]
@ProductIterator2 = constant { [3 x i64], [7 x ptr], [14 x ptr] } { [3 x i64] [i64 4440657219728359865, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ProductIterator2_hashtbl, ptr @ProductIterator2_offset_tbl, ptr @_data_size_ProductIterator2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [14 x ptr] [ptr @ProductIterator2_field_ProductIterator2_0, ptr @ProductIterator2_field_ProductIterator2_1, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_field_first_iterator, ptr @ProductIterator2_field_second_iterator, ptr @ProductIterator2_field_second_iterable, ptr @ProductIterator2_field_current_first, ptr @ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U, ptr @ProductIterator2_next_, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_next_] }
@Math_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Math]
@Math_offset_tbl = constant [4 x i32] [i32 27, i32 0, i32 10, i32 10]
@Math = constant { [3 x i64], [7 x ptr], [17 x ptr] } { [3 x i64] [i64 8094150130346788308, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Math_hashtbl, ptr @Math_offset_tbl, ptr @_data_size_Math, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [17 x ptr] [ptr @Math_B__Self_sqrt_xPtrf64, ptr @Math_B__Self_abs_xPtri32__Self_abs_xPtrf64, ptr @Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64, ptr @Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64, ptr @Math_B__Self_round_xPtrf64, ptr @Math_B__Self_floor_xPtrf64, ptr @Math_B__Self_ceiling_xPtrf64, ptr @Math__Self_sqrt_xPtrf64, ptr @Math__Self_abs_xPtri32, ptr @Math__Self_abs_xPtrf64, ptr @Math__Self_max_aPtri32_bPtri32, ptr @Math__Self_max_aPtrf64_bPtrf64, ptr @Math__Self_min_aPtri32_bPtri32, ptr @Math__Self_min_aPtrf64_bPtrf64, ptr @Math__Self_round_xPtrf64, ptr @Math__Self_floor_xPtrf64, ptr @Math__Self_ceiling_xPtrf64] }
@Integer_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Integer]
@Integer_offset_tbl = constant [4 x i32] [i32 23, i32 10, i32 0, i32 10]
@Integer = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 -735147942809078232, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Integer_hashtbl, ptr @Integer_offset_tbl, ptr @_data_size_Integer, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Integer_field_value, ptr @Integer_B_init_valuePtri32, ptr @Integer_B__ADD_otherPtri32, ptr @Integer_B__SUB_otherPtri32, ptr @Integer_B__MUL_otherPtri32, ptr @Integer_B__DIV_otherPtri32, ptr @Integer_B_print_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_] }
@BigBoy_hashtbl = constant [4 x ptr] [ptr @Representable, ptr @Object, ptr @any_typ, ptr @BigBoy]
@BigBoy_offset_tbl = constant [4 x i32] [i32 14, i32 16, i32 10, i32 10]
@BigBoy = constant { [3 x i64], [7 x ptr], [6 x ptr] } { [3 x i64] [i64 3069357308562348185, i64 4611686018427388361, i64 3], [7 x ptr] [ptr @subtype_test, ptr @BigBoy_hashtbl, ptr @BigBoy_offset_tbl, ptr @_data_size_BigBoy, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [6 x ptr] [ptr @BigBoy_B_introduce_, ptr @BigBoy_B_repr_, ptr @BigBoy_introduce_, ptr @Representable_repr_, ptr @BigBoy_B_repr_, ptr @Representable_repr_] }
@Integer2_hashtbl = constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Integer2, ptr @Integer, ptr @Representable, ptr null, ptr @BigBoy]
@Integer2_offset_tbl = constant [8 x i32] [i32 0, i32 42, i32 10, i32 10, i32 29, i32 48, i32 0, i32 42]
@Integer2 = constant { [3 x i64], [7 x ptr], [40 x ptr] } { [3 x i64] [i64 1844024195090879880, i64 4611686018427388181, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Integer2_hashtbl, ptr @Integer2_offset_tbl, ptr @_data_size_Integer2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [40 x ptr] [ptr @Integer2_field_value, ptr @Integer2_B_value_, ptr @Integer2_B_init_valuePtri32, ptr @Integer2_B__ADD_otherPtri32, ptr @Integer2_B__SUB_otherPtri32, ptr @Integer2_B__MUL_otherPtri32, ptr @Integer2_B__DIV_otherPtri32, ptr @Integer2_B_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @Integer2_value_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_field_value, ptr @Integer2_B_init_valuePtri32, ptr @Integer2_B__ADD_otherPtri32, ptr @Integer2_B__SUB_otherPtri32, ptr @Integer2_B__MUL_otherPtri32, ptr @Integer2_B__DIV_otherPtri32, ptr @Integer2_B_print_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_] }
@Animal_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Animal]
@Animal_offset_tbl = constant [4 x i32] [i32 23, i32 0, i32 10, i32 10]
@Animal = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 1075018126824711487, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Animal_hashtbl, ptr @Animal_offset_tbl, ptr @_data_size_Animal, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Animal_field_age, ptr @Animal_field_hp, ptr @Animal_field_skill, ptr @Animal_B_init_agePtri32_hpPtrf64_skillPtri32, ptr @Animal_B_say_age_, ptr @Animal_B_say_skill_, ptr @Animal_B_say_messagePtri32, ptr @Animal_B_do_nothing_, ptr @Animal_init_agePtri32_hpPtrf64_skillPtri32, ptr @Animal_say_age_, ptr @Animal_say_skill_, ptr @Animal_say_messagePtri32, ptr @Animal_do_nothing_] }
@Beaver_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Beaver]
@Beaver_offset_tbl = constant [4 x i32] [i32 0, i32 18, i32 10, i32 10]
@Beaver = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 -6124772949900838462, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Beaver_hashtbl, ptr @Beaver_offset_tbl, ptr @_data_size_Beaver, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @Beaver_field_color, ptr @Beaver_field_name, ptr @Beaver_B_init_colorPtri32_namePtrf64, ptr @Beaver_B__ADD_xPtri32, ptr @Beaver_B_say_color_, ptr @Beaver_init_colorPtri32_namePtrf64, ptr @Beaver__ADD_xPtri32, ptr @Beaver_say_color_] }
@ListNode_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @ListNode]
@ListNode_offset_tbl = constant [4 x i32] [i32 22, i32 10, i32 0, i32 10]
@ListNode = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 -1756024950533091476, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ListNode_hashtbl, ptr @ListNode_offset_tbl, ptr @_data_size_ListNode, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ListNode_field_data, ptr @ListNode_field_next, ptr @ListNode_B_init_dataPtri32, ptr @ListNode_B_push_nextListNode, ptr @ListNode_B_next_, ptr @ListNode_B_data_, ptr @ListNode_B_iterator_, ptr @ListNode_init_dataPtri32, ptr @ListNode_push_nextListNode, ptr @ListNode_next_, ptr @ListNode_data_, ptr @ListNode_iterator_] }
@ListIterator_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @ListIterator, ptr null]
@ListIterator_offset_tbl = constant [4 x i32] [i32 15, i32 10, i32 10, i32 0]
@ListIterator = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 -5838699946612561379, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ListIterator_hashtbl, ptr @ListIterator_offset_tbl, ptr @_data_size_ListIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @ListIterator_field_node, ptr @ListIterator_B_init_nodeListNode, ptr @ListIterator_B_next_, ptr @ListIterator_init_nodeListNode, ptr @ListIterator_next_] }
@Bard_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Bard, ptr null]
@Bard_offset_tbl = constant [4 x i32] [i32 17, i32 10, i32 10, i32 0]
@Bard = constant { [3 x i64], [7 x ptr], [7 x ptr] } { [3 x i64] [i64 -7979915337087193093, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Bard_hashtbl, ptr @Bard_offset_tbl, ptr @_data_size_Bard, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [7 x ptr] [ptr @Bard_B_init_, ptr @Bard_B_take_aPtri32_bPtrf64_take_aPtri32_bPtri32_take_aAnimal_bBeaver_take_aPtrf64_bPtrf64, ptr @Bard_init_, ptr @Bard_take_aPtri32_bPtrf64, ptr @Bard_take_aPtri32_bPtri32, ptr @Bard_take_aAnimal_bBeaver, ptr @Bard_take_aPtrf64_bPtrf64] }
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@Channel_field_value = internal constant { ptr, ptr } { ptr @Channel_getter_value, ptr @Channel_setter_value }
@MapIterable_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable_getter_iterable, ptr @MapIterable_setter_iterable }
@MapIterable_field_f = internal constant { ptr, ptr } { ptr @MapIterable_getter_f, ptr @MapIterable_setter_f }
@MapIterator_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator_getter_iterator, ptr @MapIterator_setter_iterator }
@MapIterator_field_f = internal constant { ptr, ptr } { ptr @MapIterator_getter_f, ptr @MapIterator_setter_f }
@FilterIterable_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable_getter_iterable, ptr @FilterIterable_setter_iterable }
@FilterIterable_field_f = internal constant { ptr, ptr } { ptr @FilterIterable_getter_f, ptr @FilterIterable_setter_f }
@FilterIterator_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator_getter_iterator, ptr @FilterIterator_setter_iterator }
@FilterIterator_field_f = internal constant { ptr, ptr } { ptr @FilterIterator_getter_f, ptr @FilterIterator_setter_f }
@ChainIterable_field_first = internal constant { ptr, ptr } { ptr @ChainIterable_getter_first, ptr @ChainIterable_setter_first }
@ChainIterable_field_second = internal constant { ptr, ptr } { ptr @ChainIterable_getter_second, ptr @ChainIterable_setter_second }
@ChainIterator_field_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_first, ptr @ChainIterator_setter_first }
@ChainIterator_field_second = internal constant { ptr, ptr } { ptr @ChainIterator_getter_second, ptr @ChainIterator_setter_second }
@ChainIterator_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_on_first, ptr @ChainIterator_setter_on_first }
@InterleaveIterable_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_first, ptr @InterleaveIterable_setter_first }
@InterleaveIterable_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_second, ptr @InterleaveIterable_setter_second }
@InterleaveIterator_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_first, ptr @InterleaveIterator_setter_first }
@InterleaveIterator_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_second, ptr @InterleaveIterator_setter_second }
@InterleaveIterator_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_on_first, ptr @InterleaveIterator_setter_on_first }
@ZipIterable_field_first = internal constant { ptr, ptr } { ptr @ZipIterable_getter_first, ptr @ZipIterable_setter_first }
@ZipIterable_field_second = internal constant { ptr, ptr } { ptr @ZipIterable_getter_second, ptr @ZipIterable_setter_second }
@ZipIterator_field_first = internal constant { ptr, ptr } { ptr @ZipIterator_getter_first, ptr @ZipIterator_setter_first }
@ZipIterator_field_second = internal constant { ptr, ptr } { ptr @ZipIterator_getter_second, ptr @ZipIterator_setter_second }
@ProductIterable_field_first = internal constant { ptr, ptr } { ptr @ProductIterable_getter_first, ptr @ProductIterable_setter_first }
@ProductIterable_field_second = internal constant { ptr, ptr } { ptr @ProductIterable_getter_second, ptr @ProductIterable_setter_second }
@ProductIterator_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_first_iterator, ptr @ProductIterator_setter_first_iterator }
@ProductIterator_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterator, ptr @ProductIterator_setter_second_iterator }
@ProductIterator_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterable, ptr @ProductIterator_setter_second_iterable }
@ProductIterator_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator_getter_current_first, ptr @ProductIterator_setter_current_first }
@Range_field_start = internal constant { ptr, ptr } { ptr @Range_getter_start, ptr @Range_setter_start }
@Range_field_end = internal constant { ptr, ptr } { ptr @Range_getter_end, ptr @Range_setter_end }
@Range_field_step = internal constant { ptr, ptr } { ptr @Range_getter_step, ptr @Range_setter_step }
@RangeIterator_field_counter = internal constant { ptr, ptr } { ptr @RangeIterator_getter_counter, ptr @RangeIterator_setter_counter }
@RangeIterator_field_end = internal constant { ptr, ptr } { ptr @RangeIterator_getter_end, ptr @RangeIterator_setter_end }
@RangeIterator_field_step = internal constant { ptr, ptr } { ptr @RangeIterator_getter_step, ptr @RangeIterator_setter_step }
@OutOfBoundsDetails_field_bounds = internal constant { ptr, ptr } { ptr @OutOfBoundsDetails_getter_bounds, ptr @OutOfBoundsDetails_setter_bounds }
@OutOfBoundsDetails_field_index = internal constant { ptr, ptr } { ptr @OutOfBoundsDetails_getter_index, ptr @OutOfBoundsDetails_setter_index }
@OutOfBounds_field_details = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_details, ptr @OutOfBounds_setter_details }
@OutOfBounds_field_line_number = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_line_number, ptr @OutOfBounds_setter_line_number }
@OutOfBounds_field_file_name = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_file_name, ptr @OutOfBounds_setter_file_name }
@OutOfBounds_field_message = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_message, ptr @OutOfBounds_setter_message }
@IntArray_field_buffer = internal constant { ptr, ptr } { ptr @IntArray_getter_buffer, ptr @IntArray_setter_buffer }
@IntArray_field_length = internal constant { ptr, ptr } { ptr @IntArray_getter_length, ptr @IntArray_setter_length }
@IntArray_field_capacity = internal constant { ptr, ptr } { ptr @IntArray_getter_capacity, ptr @IntArray_setter_capacity }
@IntArrayIterator_field_array = internal constant { ptr, ptr } { ptr @IntArrayIterator_getter_array, ptr @IntArrayIterator_setter_array }
@IntArrayIterator_field_index = internal constant { ptr, ptr } { ptr @IntArrayIterator_getter_index, ptr @IntArrayIterator_setter_index }
@Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
@Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
@Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
@Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
@Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
@ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
@ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
@MapIterable2_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable2_getter_iterable, ptr @MapIterable2_setter_iterable }
@MapIterable2_field_f = internal constant { ptr, ptr } { ptr @MapIterable2_getter_f, ptr @MapIterable2_setter_f }
@MapIterator2_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator2_getter_iterator, ptr @MapIterator2_setter_iterator }
@MapIterator2_field_f = internal constant { ptr, ptr } { ptr @MapIterator2_getter_f, ptr @MapIterator2_setter_f }
@FilterIterable2_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_iterable, ptr @FilterIterable2_setter_iterable }
@FilterIterable2_field_f = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_f, ptr @FilterIterable2_setter_f }
@FilterIterator2_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_iterator, ptr @FilterIterator2_setter_iterator }
@FilterIterator2_field_f = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_f, ptr @FilterIterator2_setter_f }
@ChainIterable2_field_first = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_first, ptr @ChainIterable2_setter_first }
@ChainIterable2_field_second = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_second, ptr @ChainIterable2_setter_second }
@ChainIterator2_field_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_first, ptr @ChainIterator2_setter_first }
@ChainIterator2_field_second = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_second, ptr @ChainIterator2_setter_second }
@ChainIterator2_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_on_first, ptr @ChainIterator2_setter_on_first }
@InterleaveIterable2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_first, ptr @InterleaveIterable2_setter_first }
@InterleaveIterable2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_second, ptr @InterleaveIterable2_setter_second }
@InterleaveIterator2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_first, ptr @InterleaveIterator2_setter_first }
@InterleaveIterator2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_second, ptr @InterleaveIterator2_setter_second }
@InterleaveIterator2_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_on_first, ptr @InterleaveIterator2_setter_on_first }
@ZipIterable2_field_first = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_first, ptr @ZipIterable2_setter_first }
@ZipIterable2_field_second = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_second, ptr @ZipIterable2_setter_second }
@ZipIterator2_field_first = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_first, ptr @ZipIterator2_setter_first }
@ZipIterator2_field_second = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_second, ptr @ZipIterator2_setter_second }
@ProductIterable2_field_first = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_first, ptr @ProductIterable2_setter_first }
@ProductIterable2_field_second = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_second, ptr @ProductIterable2_setter_second }
@ProductIterator2_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_first_iterator, ptr @ProductIterator2_setter_first_iterator }
@ProductIterator2_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterator, ptr @ProductIterator2_setter_second_iterator }
@ProductIterator2_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterable, ptr @ProductIterator2_setter_second_iterable }
@ProductIterator2_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_current_first, ptr @ProductIterator2_setter_current_first }
@Integer_field_value = internal constant { ptr, ptr } { ptr @Integer_getter_value, ptr @Integer_setter_value }
@Integer2_field_value = internal constant { ptr, ptr } { ptr @Integer2_getter_value, ptr @Integer2_setter_value }
@Animal_field_age = internal constant { ptr, ptr } { ptr @Animal_getter_age, ptr @Animal_setter_age }
@Animal_field_hp = internal constant { ptr, ptr } { ptr @Animal_getter_hp, ptr @Animal_setter_hp }
@Animal_field_skill = internal constant { ptr, ptr } { ptr @Animal_getter_skill, ptr @Animal_setter_skill }
@Beaver_field_color = internal constant { ptr, ptr } { ptr @Beaver_getter_color, ptr @Beaver_setter_color }
@Beaver_field_name = internal constant { ptr, ptr } { ptr @Beaver_getter_name, ptr @Beaver_setter_name }
@ListNode_field_data = internal constant { ptr, ptr } { ptr @ListNode_getter_data, ptr @ListNode_setter_data }
@ListNode_field_next = internal constant { ptr, ptr } { ptr @ListNode_getter_next, ptr @ListNode_setter_next }
@ListIterator_field_node = internal constant { ptr, ptr } { ptr @ListIterator_getter_node, ptr @ListIterator_setter_node }
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@string_string = linkonce_odr constant [4 x i8] c"%s\0A\00"
@bool_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@bool_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr @_data_size_bool_typ, ptr @_box_bool_typ, ptr @_unbox_bool_typ, ptr @_data_size_bool_typ], [0 x ptr] undef }
@i8_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i8_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr @_data_size_i8_typ, ptr @_box_i8_typ, ptr @_unbox_i8_typ, ptr @_data_size_i8_typ], [0 x ptr] undef }
@i32_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@i32_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr @_data_size_i32_typ, ptr @_box_i32_typ, ptr @_unbox_i32_typ, ptr @_data_size_i32_typ], [0 x ptr] undef }
@i64_typ_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @i64_typ, ptr null]
@i64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@i64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388157, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr @_data_size_i64_typ, ptr @_box_i64_typ, ptr @_unbox_i64_typ, ptr @_data_size_i64_typ], [0 x ptr] undef }
@i128_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @i128_typ, ptr @any_typ, ptr null]
@i128_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@i128_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -8755878215469463641, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i128_typ_hashtbl, ptr @i128_typ_offset_tbl, ptr @_data_size_i128_typ, ptr @_box_i128_typ, ptr @_unbox_i128_typ, ptr @_data_size_i128_typ], [0 x ptr] undef }
@f64_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@f64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr @_data_size_f64_typ, ptr @_box_f64_typ, ptr @_unbox_f64_typ, ptr @_data_size_f64_typ], [0 x ptr] undef }
@nil_typ_hashtbl = constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@nil_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr @_data_size_nil_typ, ptr @_box_nil_typ, ptr @_unbox_nil_typ, ptr @_data_size_nil_typ], [0 x ptr] undef }
@any_typ_hashtbl = constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = constant [1 x i32] [i32 10]
@any_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [7 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr @_data_size_any_typ, ptr @_box_Default, ptr @_unbox_Default, ptr @_data_size_any_typ], [0 x ptr] undef }
@nothing_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @nothing_typ]
@nothing_typ_offset_tbl = constant [4 x i32] [i32 0, i32 10, i32 10, i32 10]
@nothing_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -3334456163433371378, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @nothing_typ_hashtbl, ptr @nothing_typ_offset_tbl, ptr @_data_size_nothing_typ, ptr @_box_nothing_typ, ptr @_unbox_nothing_typ, ptr @_data_size_nothing_typ], [0 x ptr] undef }
@coroutine_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @coroutine_typ]
@coroutine_typ_offset_tbl = constant [4 x i32] [i32 0, i32 10, i32 10, i32 10]
@coroutine_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 7194361020959218064, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @coroutine_typ_hashtbl, ptr @coroutine_typ_offset_tbl, ptr @_data_size_coroutine_typ, ptr @_box_coroutine_typ, ptr @_unbox_coroutine_typ, ptr @_data_size_coroutine_typ], [0 x ptr] undef }
@function_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@function_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr @_data_size_function_typ, ptr @_box_function_typ, ptr @_unbox_function_typ, ptr @_data_size_function_typ], [0 x ptr] undef }
@buffer_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @buffer_typ, ptr @any_typ, ptr null]
@buffer_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@buffer_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -318192747195410237, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @buffer_typ_hashtbl, ptr @buffer_typ_offset_tbl, ptr @_data_size_buffer_typ, ptr @_box_buffer_typ, ptr @_unbox_buffer_typ, ptr @_data_size_buffer_typ], [0 x ptr] undef }
@tuple_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @tuple_typ]
@tuple_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@tuple_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3422634369532007740, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @tuple_typ_hashtbl, ptr @tuple_typ_offset_tbl, ptr @_data_size_tuple_typ, ptr @_box_tuple_typ, ptr @_unbox_tuple_typ, ptr @_data_size_tuple_typ], [0 x ptr] undef }
@union_typ_hashtbl = constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 10]
@union_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr @_data_size_union_typ, ptr @_box_union_typ, ptr @_unbox_union_typ, ptr @_data_size_union_typ], [0 x ptr] undef }
@Object_hashtbl = constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@Object = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr @_data_size_Object, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@string_string.57 = internal constant [4 x i8] c"%s\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = linkonce_odr thread_local global [3 x ptr] zeroinitializer
@current_coroutine = linkonce_odr thread_local global ptr null
@always_one = linkonce thread_local global i1 true
@current_ptr = internal thread_local global ptr null

define { i64, i64 } @_data_size_Iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_data_size_Iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_data_size_Representable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 1, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [2 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Representable)
  %18 = alloca i32, align 4
  store i32 7, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([6 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <6 x i8>, ptr @bzrhh_Object, align 8
  store <6 x i8> %33, ptr %32, align 8
  %34 = alloca i32, align 4
  store i32 6, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 7, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca i32, align 4
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  store ptr @String, ptr %46, align 8
  store ptr %42, ptr %45, align 8
  store i32 10, ptr %43, align 4
  %47 = alloca i32, align 4
  store i32 6, ptr %47, align 4
  %48 = alloca i32, align 4
  store i32 7, ptr %48, align 4
  %49 = load ptr, ptr %24, align 8
  %50 = insertvalue { ptr } undef, ptr %49, 0
  %51 = load i32, ptr %47, align 4
  %52 = load i32, ptr %48, align 4
  %53 = load ptr, ptr %46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %45, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %44, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %43, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca [3 x ptr], align 8
  %62 = getelementptr [3 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %61, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %61, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr %61)
  %66 = call ptr @llvm.invariant.start.p0(i64 280, ptr %53)
  %67 = getelementptr ptr, ptr %53, i32 %59
  %68 = getelementptr ptr, ptr %67, i32 4
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr, ptr, ptr }, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 2
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %60, ptr %70)
  call void %74({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr } %50, i32 %51, i32 %52) #15
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %77 = load ptr, ptr %46, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %79 = load ptr, ptr %45, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %81 = load ptr, ptr %44, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %83 = load i32, ptr %43, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %75, ptr @String)
  %84 = load ptr, ptr %76, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %78, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %80, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %82, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  ret { ptr, ptr, ptr, i32 } %91
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #0

define { i64, i64 } @_data_size_String(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 17, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [35 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @buffer_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @i32_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 18, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [35 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 19, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [35 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 20, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [35 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 21, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [35 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_append_xPtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i8_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [35 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [35 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [35 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [35 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 26, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [35 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 27, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [35 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 28, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [35 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 29, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [35 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 30, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [35 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca i32, align 4
  store i32 1, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = load ptr, ptr %10, align 8
  %25 = load ptr, ptr %5, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 280, ptr %25)
  %27 = load i32, ptr %16, align 4
  %28 = getelementptr ptr, ptr %25, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %31(ptr %24, { ptr } %34) #16
  %35 = alloca i32, align 4
  store i32 1, ptr %35, align 4
  %36 = load ptr, ptr %10, align 8
  %37 = load ptr, ptr %5, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 280, ptr %37)
  %39 = load i32, ptr %16, align 4
  %40 = getelementptr ptr, ptr %37, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load i32, ptr %35, align 4
  call void %44(ptr %36, i32 %45) #16
  %46 = alloca i32, align 4
  store i32 0, ptr %46, align 4
  %47 = load ptr, ptr %10, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %50 = load i32, ptr %16, align 4
  %51 = getelementptr ptr, ptr %48, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = load i32, ptr %46, align 4
  call void %55(ptr %47, i32 %56) #16
  ret void
}

define void @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @String)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 280, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %21, align 8
  %31 = insertvalue { ptr } undef, ptr %30, 0
  call void %29(ptr %22, { ptr } %31) #16
  %32 = alloca i32, align 4
  store i32 %4, ptr %32, align 4
  %33 = load ptr, ptr %13, align 8
  %34 = load ptr, ptr %8, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 280, ptr %34)
  %36 = load i32, ptr %19, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load i32, ptr %32, align 4
  call void %41(ptr %33, i32 %42) #16
  %43 = alloca i32, align 4
  store i32 %5, ptr %43, align 4
  %44 = load ptr, ptr %13, align 8
  %45 = load ptr, ptr %8, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 280, ptr %45)
  %47 = load i32, ptr %19, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load i32, ptr %43, align 4
  call void %52(ptr %44, i32 %53) #16
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 280, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #17
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 280, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #17
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 280, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr } %25(ptr %18) #17
  %27 = alloca ptr, align 8
  store { ptr } %26, ptr %27, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr } undef, ptr %28, 0
  ret { ptr } %29
}

define { ptr, ptr, ptr, i32 } @String_append_xPtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr }, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i32, align 4
  %17 = alloca ptr, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i1, align 1
  %21 = alloca i8, align 1
  %22 = alloca ptr, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca { ptr }, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem21 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem40 = alloca ptr, align 8
  %.reg2mem43 = alloca ptr, align 8
  %.reg2mem59 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %31, align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  store ptr %34, ptr %.reg2mem59, align 8
  %35 = load ptr, ptr %33, align 8
  %.reload61 = load ptr, ptr %.reg2mem59, align 8
  store ptr %35, ptr %.reload61, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  store ptr %37, ptr %.reg2mem43, align 8
  %38 = load ptr, ptr %36, align 8
  %.reload58 = load ptr, ptr %.reg2mem43, align 8
  store ptr %38, ptr %.reload58, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  store ptr %40, ptr %.reg2mem40, align 8
  %41 = load ptr, ptr %39, align 8
  %.reload42 = load ptr, ptr %.reg2mem40, align 8
  store ptr %41, ptr %.reload42, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr %43, ptr %.reg2mem24, align 8
  %44 = load i32, ptr %42, align 4
  %.reload39 = load ptr, ptr %.reg2mem24, align 8
  store i32 %44, ptr %.reload39, align 4
  call void @set_offset(ptr %32, ptr @String)
  %45 = alloca i8, align 1
  store i8 %3, ptr %45, align 1
  %.reload57 = load ptr, ptr %.reg2mem43, align 8
  %46 = load ptr, ptr %.reload57, align 8
  %47 = load ptr, ptr %32, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 280, ptr %47)
  %.reload38 = load ptr, ptr %.reg2mem24, align 8
  %49 = load i32, ptr %.reload38, align 4
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = getelementptr ptr, ptr %50, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = call i32 %54(ptr %46) #17
  %56 = alloca i32, align 4
  store i32 %55, ptr %56, align 4
  %.reload56 = load ptr, ptr %.reg2mem43, align 8
  %57 = load ptr, ptr %.reload56, align 8
  %58 = load ptr, ptr %32, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %58)
  %.reload37 = load ptr, ptr %.reg2mem24, align 8
  %60 = load i32, ptr %.reload37, align 4
  %61 = getelementptr ptr, ptr %58, i32 %60
  %62 = getelementptr ptr, ptr %61, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr { ptr, ptr }, ptr %63, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %66 = call i32 %65(ptr %57) #17
  %67 = alloca i32, align 4
  store i32 %66, ptr %67, align 4
  %68 = load i32, ptr %56, align 4
  %69 = load i32, ptr %67, align 4
  %70 = icmp slt i32 %68, %69
  %71 = alloca i1, align 1
  store i1 %70, ptr %71, align 1
  %72 = load i1, ptr %71, align 1
  %73 = select i1 %72, ptr %5, ptr %25
  store ptr %73, ptr %.reg2mem21, align 8
  %74 = select i1 %72, ptr %6, ptr %26
  store ptr %74, ptr %.reg2mem18, align 8
  %75 = select i1 %72, ptr %7, ptr %27
  store ptr %75, ptr %.reg2mem15, align 8
  %76 = select i1 %72, ptr %8, ptr %28
  store ptr %76, ptr %.reg2mem12, align 8
  %77 = select i1 %72, ptr %9, ptr %29
  store ptr %77, ptr %.reg2mem9, align 8
  %78 = select i1 %72, ptr %10, ptr %30
  store ptr %78, ptr %.reg2mem3, align 8
  br i1 %72, label %79, label %80

79:                                               ; preds = %4
  br label %182

80:                                               ; preds = %4
  %.reload55 = load ptr, ptr %.reg2mem43, align 8
  %81 = load ptr, ptr %.reload55, align 8
  %82 = load ptr, ptr %32, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 280, ptr %82)
  %.reload36 = load ptr, ptr %.reg2mem24, align 8
  %84 = load i32, ptr %.reload36, align 4
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 2
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr { ptr, ptr }, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = call i32 %89(ptr %81) #17
  store i32 %90, ptr %11, align 4
  store i32 2, ptr %12, align 4
  %91 = load i32, ptr %11, align 4
  %92 = load i32, ptr %12, align 4
  %93 = mul i32 %91, %92
  store i32 %93, ptr %13, align 4
  %.reload54 = load ptr, ptr %.reg2mem43, align 8
  %94 = load ptr, ptr %.reload54, align 8
  %95 = load ptr, ptr %32, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 280, ptr %95)
  %.reload35 = load ptr, ptr %.reg2mem24, align 8
  %97 = load i32, ptr %.reload35, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 2
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = load i32, ptr %13, align 4
  call void %102(ptr %94, i32 %103) #16
  %.reload53 = load ptr, ptr %.reg2mem43, align 8
  %104 = load ptr, ptr %.reload53, align 8
  %105 = load ptr, ptr %32, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 280, ptr %105)
  %.reload34 = load ptr, ptr %.reg2mem24, align 8
  %107 = load i32, ptr %.reload34, align 4
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr }, ptr %109, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = call { ptr } %111(ptr %104) #17
  store { ptr } %112, ptr %14, align 8
  %113 = load ptr, ptr %14, align 8
  store ptr %113, ptr %15, align 8
  %.reload52 = load ptr, ptr %.reg2mem43, align 8
  %114 = load ptr, ptr %.reload52, align 8
  %115 = load ptr, ptr %32, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 280, ptr %115)
  %.reload33 = load ptr, ptr %.reg2mem24, align 8
  %117 = load i32, ptr %.reload33, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 2
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call i32 %122(ptr %114) #17
  store i32 %123, ptr %16, align 4
  %124 = load i32, ptr %16, align 4
  %125 = sext i32 %124 to i64
  %126 = mul i64 %125, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %127 = call ptr @bump_malloc(i64 %126)
  store ptr %127, ptr %17, align 8
  %.reload51 = load ptr, ptr %.reg2mem43, align 8
  %128 = load ptr, ptr %.reload51, align 8
  %129 = load ptr, ptr %32, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 280, ptr %129)
  %.reload32 = load ptr, ptr %.reg2mem24, align 8
  %131 = load i32, ptr %.reload32, align 4
  %132 = getelementptr ptr, ptr %129, i32 %131
  %133 = load ptr, ptr %132, align 8
  %134 = getelementptr { ptr, ptr }, ptr %133, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr } undef, ptr %137, 0
  call void %135(ptr %128, { ptr } %138) #16
  store i32 0, ptr %18, align 4
  br label %139

139:                                              ; preds = %._crit_edge1, %80
  %.reload50 = load ptr, ptr %.reg2mem43, align 8
  %140 = load ptr, ptr %.reload50, align 8
  %141 = load ptr, ptr %32, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 280, ptr %141)
  %.reload31 = load ptr, ptr %.reg2mem24, align 8
  %143 = load i32, ptr %.reload31, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr }, ptr %146, i32 0, i32 0
  %148 = load ptr, ptr %147, align 8
  %149 = call i32 %148(ptr %140) #17
  store i32 %149, ptr %19, align 4
  %150 = load i32, ptr %18, align 4
  %151 = load i32, ptr %19, align 4
  %152 = icmp slt i32 %150, %151
  store i1 %152, ptr %20, align 1
  %153 = load i1, ptr %20, align 1
  store i1 %153, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %154, label %._crit_edge

._crit_edge:                                      ; preds = %139
  br label %180

154:                                              ; preds = %139
  %155 = load ptr, ptr %15, align 8
  %156 = load i32, ptr %18, align 4
  %157 = sext i32 %156 to i64
  %158 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %157
  %159 = getelementptr i8, ptr %155, i64 %158
  %160 = load i8, ptr %159, align 1
  store i8 %160, ptr %21, align 1
  %.reload49 = load ptr, ptr %.reg2mem43, align 8
  %161 = load ptr, ptr %.reload49, align 8
  %162 = load ptr, ptr %32, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 280, ptr %162)
  %.reload30 = load ptr, ptr %.reg2mem24, align 8
  %164 = load i32, ptr %.reload30, align 4
  %165 = getelementptr ptr, ptr %162, i32 %164
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr { ptr, ptr }, ptr %166, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %169 = call { ptr } %168(ptr %161) #17
  store { ptr } %169, ptr %22, align 8
  %170 = load ptr, ptr %22, align 8
  %171 = load i32, ptr %18, align 4
  %172 = sext i32 %171 to i64
  %173 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %172
  %174 = getelementptr i8, ptr %170, i64 %173
  %175 = load i8, ptr %21, align 1
  store i8 %175, ptr %174, align 1
  store i32 1, ptr %23, align 4
  %176 = load i32, ptr %18, align 4
  %177 = load i32, ptr %23, align 4
  %178 = add i32 %176, %177
  store i32 %178, ptr %24, align 4
  %179 = load i32, ptr %24, align 4
  store i32 %179, ptr %18, align 4
  br label %180

180:                                              ; preds = %._crit_edge, %154
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %181

._crit_edge1:                                     ; preds = %180
  br label %139

181:                                              ; preds = %180
  br label %182

182:                                              ; preds = %181, %79
  %.reload48 = load ptr, ptr %.reg2mem43, align 8
  %183 = load ptr, ptr %.reload48, align 8
  %184 = load ptr, ptr %32, align 8
  %185 = call ptr @llvm.invariant.start.p0(i64 280, ptr %184)
  %.reload29 = load ptr, ptr %.reg2mem24, align 8
  %186 = load i32, ptr %.reload29, align 4
  %187 = getelementptr ptr, ptr %184, i32 %186
  %188 = load ptr, ptr %187, align 8
  %189 = getelementptr { ptr, ptr }, ptr %188, i32 0, i32 0
  %190 = load ptr, ptr %189, align 8
  %191 = call { ptr } %190(ptr %183) #17
  %.reload23 = load ptr, ptr %.reg2mem21, align 8
  store { ptr } %191, ptr %.reload23, align 8
  %.reload47 = load ptr, ptr %.reg2mem43, align 8
  %192 = load ptr, ptr %.reload47, align 8
  %193 = load ptr, ptr %32, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 280, ptr %193)
  %.reload28 = load ptr, ptr %.reg2mem24, align 8
  %195 = load i32, ptr %.reload28, align 4
  %196 = getelementptr ptr, ptr %193, i32 %195
  %197 = getelementptr ptr, ptr %196, i32 1
  %198 = load ptr, ptr %197, align 8
  %199 = getelementptr { ptr, ptr }, ptr %198, i32 0, i32 0
  %200 = load ptr, ptr %199, align 8
  %201 = call i32 %200(ptr %192) #17
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  store i32 %201, ptr %.reload20, align 4
  %.reload22 = load ptr, ptr %.reg2mem21, align 8
  %202 = load ptr, ptr %.reload22, align 8
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %203 = load i32, ptr %.reload19, align 4
  %204 = sext i32 %203 to i64
  %205 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %204
  %206 = getelementptr i8, ptr %202, i64 %205
  %207 = load i8, ptr %45, align 1
  store i8 %207, ptr %206, align 1
  %.reload46 = load ptr, ptr %.reg2mem43, align 8
  %208 = load ptr, ptr %.reload46, align 8
  %209 = load ptr, ptr %32, align 8
  %210 = call ptr @llvm.invariant.start.p0(i64 280, ptr %209)
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %211 = load i32, ptr %.reload27, align 4
  %212 = getelementptr ptr, ptr %209, i32 %211
  %213 = getelementptr ptr, ptr %212, i32 1
  %214 = load ptr, ptr %213, align 8
  %215 = getelementptr { ptr, ptr }, ptr %214, i32 0, i32 0
  %216 = load ptr, ptr %215, align 8
  %217 = call i32 %216(ptr %208) #17
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  store i32 %217, ptr %.reload17, align 4
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  store i32 1, ptr %.reload14, align 4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %218 = load i32, ptr %.reload16, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %219 = load i32, ptr %.reload13, align 4
  %220 = add i32 %218, %219
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  store i32 %220, ptr %.reload11, align 4
  %.reload45 = load ptr, ptr %.reg2mem43, align 8
  %221 = load ptr, ptr %.reload45, align 8
  %222 = load ptr, ptr %32, align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 280, ptr %222)
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  %224 = load i32, ptr %.reload26, align 4
  %225 = getelementptr ptr, ptr %222, i32 %224
  %226 = getelementptr ptr, ptr %225, i32 1
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr { ptr, ptr }, ptr %227, i32 0, i32 1
  %229 = load ptr, ptr %228, align 8
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %230 = load i32, ptr %.reload10, align 4
  call void %229(ptr %221, i32 %230) #16
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload8, i32 0, i32 0
  %.reload60 = load ptr, ptr %.reg2mem59, align 8
  %232 = load ptr, ptr %.reload60, align 8
  store ptr %232, ptr %231, align 8
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload7, i32 0, i32 1
  %.reload44 = load ptr, ptr %.reg2mem43, align 8
  %234 = load ptr, ptr %.reload44, align 8
  store ptr %234, ptr %233, align 8
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload6, i32 0, i32 2
  %.reload41 = load ptr, ptr %.reg2mem40, align 8
  %236 = load ptr, ptr %.reload41, align 8
  store ptr %236, ptr %235, align 8
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload5, i32 0, i32 3
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %238 = load i32, ptr %.reload25, align 4
  store i32 %238, ptr %237, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  call void @set_offset(ptr %.reload4, ptr @String)
  %239 = load ptr, ptr %231, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %239, 0
  %241 = load ptr, ptr %233, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %241, 1
  %243 = load ptr, ptr %235, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %243, 2
  %245 = load i32, ptr %237, align 4
  %246 = insertvalue { ptr, ptr, ptr, i32 } %244, i32 %245, 3
  ret { ptr, ptr, ptr, i32 } %246
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i1, align 1
  %10 = alloca i8, align 1
  %11 = alloca ptr, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca ptr, align 8
  %22 = alloca ptr, align 8
  %23 = alloca i32, align 4
  %24 = alloca ptr, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i1, align 1
  %30 = alloca i32, align 4
  %31 = alloca i1, align 1
  %32 = alloca i8, align 1
  %33 = alloca ptr, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i8, align 1
  %37 = alloca ptr, align 8
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem39 = alloca ptr, align 8
  %.reg2mem42 = alloca ptr, align 8
  %.reg2mem61 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %45, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  store ptr %48, ptr %.reg2mem61, align 8
  %49 = load ptr, ptr %47, align 8
  %.reload63 = load ptr, ptr %.reg2mem61, align 8
  store ptr %49, ptr %.reload63, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  store ptr %51, ptr %.reg2mem42, align 8
  %52 = load ptr, ptr %50, align 8
  %.reload60 = load ptr, ptr %.reg2mem42, align 8
  store ptr %52, ptr %.reload60, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  store ptr %54, ptr %.reg2mem39, align 8
  %55 = load ptr, ptr %53, align 8
  %.reload41 = load ptr, ptr %.reg2mem39, align 8
  store ptr %55, ptr %.reload41, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  store ptr %57, ptr %.reg2mem20, align 8
  %58 = load i32, ptr %56, align 4
  %.reload38 = load ptr, ptr %.reg2mem20, align 8
  store i32 %58, ptr %.reload38, align 4
  call void @set_offset(ptr %46, ptr @String)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @String)
  %73 = load ptr, ptr %62, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %65, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %68, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %71, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  %81 = alloca [0 x ptr], align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 0, ptr %81)
  %83 = call ptr @llvm.invariant.start.p0(i64 280, ptr %73)
  %84 = getelementptr ptr, ptr %73, i32 %79
  %85 = getelementptr ptr, ptr %84, i32 7
  %86 = load ptr, ptr %85, align 8
  %87 = alloca {}, align 8
  %88 = call ptr @behavior_wrapper(ptr %86, { ptr, ptr, ptr, i32 } %80, ptr %87)
  %89 = call { ptr } %88({ ptr, ptr, ptr, i32 } %80, { ptr, ptr, ptr, i32 } %80, ptr %81) #15
  %90 = alloca ptr, align 8
  store { ptr } %89, ptr %90, align 8
  %91 = alloca ptr, align 8
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = load ptr, ptr %62, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = load ptr, ptr %65, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 1
  %97 = load ptr, ptr %68, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 2
  %99 = load i32, ptr %71, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %99, 3
  %101 = alloca [0 x ptr], align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 0, ptr %101)
  %103 = call ptr @llvm.invariant.start.p0(i64 280, ptr %93)
  %104 = getelementptr ptr, ptr %93, i32 %99
  %105 = getelementptr ptr, ptr %104, i32 5
  %106 = load ptr, ptr %105, align 8
  %107 = alloca {}, align 8
  %108 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %100, ptr %107)
  %109 = call i32 %108({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr %101) #15
  %110 = alloca i32, align 4
  store i32 %109, ptr %110, align 4
  %.reload59 = load ptr, ptr %.reg2mem42, align 8
  %111 = load ptr, ptr %.reload59, align 8
  %112 = load ptr, ptr %46, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 280, ptr %112)
  %.reload37 = load ptr, ptr %.reg2mem20, align 8
  %114 = load i32, ptr %.reload37, align 4
  %115 = getelementptr ptr, ptr %112, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 1
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr { ptr, ptr }, ptr %117, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = call i32 %119(ptr %111) #17
  %121 = alloca i32, align 4
  store i32 %120, ptr %121, align 4
  %122 = load i32, ptr %121, align 4
  %123 = load i32, ptr %110, align 4
  %124 = add i32 %122, %123
  %125 = alloca i32, align 4
  store i32 %124, ptr %125, align 4
  %.reload58 = load ptr, ptr %.reg2mem42, align 8
  %126 = load ptr, ptr %.reload58, align 8
  %127 = load ptr, ptr %46, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 280, ptr %127)
  %.reload36 = load ptr, ptr %.reg2mem20, align 8
  %129 = load i32, ptr %.reload36, align 4
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr, ptr }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = call i32 %134(ptr %126) #17
  %136 = alloca i32, align 4
  store i32 %135, ptr %136, align 4
  %137 = load i32, ptr %125, align 4
  %138 = load i32, ptr %136, align 4
  %139 = icmp slt i32 %137, %138
  %140 = alloca i1, align 1
  store i1 %139, ptr %140, align 1
  %141 = load i1, ptr %140, align 1
  %142 = select i1 %141, ptr %16, ptr %42
  store ptr %142, ptr %.reg2mem17, align 8
  %143 = select i1 %141, ptr %17, ptr %43
  store ptr %143, ptr %.reg2mem14, align 8
  %144 = select i1 %141, ptr %18, ptr %44
  store ptr %144, ptr %.reg2mem8, align 8
  br i1 %141, label %145, label %206

145:                                              ; preds = %4
  %.reload57 = load ptr, ptr %.reg2mem42, align 8
  %146 = load ptr, ptr %.reload57, align 8
  %147 = load ptr, ptr %46, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 280, ptr %147)
  %.reload35 = load ptr, ptr %.reg2mem20, align 8
  %149 = load i32, ptr %.reload35, align 4
  %150 = getelementptr ptr, ptr %147, i32 %149
  %151 = getelementptr ptr, ptr %150, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = getelementptr { ptr, ptr }, ptr %152, i32 0, i32 0
  %154 = load ptr, ptr %153, align 8
  %155 = call i32 %154(ptr %146) #17
  store i32 %155, ptr %5, align 4
  store i32 0, ptr %6, align 4
  br label %156

156:                                              ; preds = %._crit_edge1, %145
  %.reload56 = load ptr, ptr %.reg2mem42, align 8
  %157 = load ptr, ptr %.reload56, align 8
  %158 = load ptr, ptr %46, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 280, ptr %158)
  %.reload34 = load ptr, ptr %.reg2mem20, align 8
  %160 = load i32, ptr %.reload34, align 4
  %161 = getelementptr ptr, ptr %158, i32 %160
  %162 = getelementptr ptr, ptr %161, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = getelementptr { ptr, ptr }, ptr %163, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = call i32 %165(ptr %157) #17
  store i32 %166, ptr %7, align 4
  %167 = load i32, ptr %7, align 4
  %168 = load i32, ptr %110, align 4
  %169 = add i32 %167, %168
  store i32 %169, ptr %8, align 4
  %170 = load i32, ptr %5, align 4
  %171 = load i32, ptr %8, align 4
  %172 = icmp slt i32 %170, %171
  store i1 %172, ptr %9, align 1
  %173 = load i1, ptr %9, align 1
  store i1 %173, ptr %.reg2mem5, align 1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload7, label %174, label %._crit_edge

._crit_edge:                                      ; preds = %156
  br label %204

174:                                              ; preds = %156
  %175 = load ptr, ptr %91, align 8
  %176 = load i32, ptr %6, align 4
  %177 = sext i32 %176 to i64
  %178 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %177
  %179 = getelementptr i8, ptr %175, i64 %178
  %180 = load i8, ptr %179, align 1
  store i8 %180, ptr %10, align 1
  %.reload55 = load ptr, ptr %.reg2mem42, align 8
  %181 = load ptr, ptr %.reload55, align 8
  %182 = load ptr, ptr %46, align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 280, ptr %182)
  %.reload33 = load ptr, ptr %.reg2mem20, align 8
  %184 = load i32, ptr %.reload33, align 4
  %185 = getelementptr ptr, ptr %182, i32 %184
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr, ptr }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = call { ptr } %188(ptr %181) #17
  store { ptr } %189, ptr %11, align 8
  %190 = load ptr, ptr %11, align 8
  %191 = load i32, ptr %5, align 4
  %192 = sext i32 %191 to i64
  %193 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %192
  %194 = getelementptr i8, ptr %190, i64 %193
  %195 = load i8, ptr %10, align 1
  store i8 %195, ptr %194, align 1
  store i32 1, ptr %12, align 4
  %196 = load i32, ptr %5, align 4
  %197 = load i32, ptr %12, align 4
  %198 = add i32 %196, %197
  store i32 %198, ptr %13, align 4
  %199 = load i32, ptr %13, align 4
  store i32 %199, ptr %5, align 4
  store i32 1, ptr %14, align 4
  %200 = load i32, ptr %6, align 4
  %201 = load i32, ptr %14, align 4
  %202 = add i32 %200, %201
  store i32 %202, ptr %15, align 4
  %203 = load i32, ptr %15, align 4
  store i32 %203, ptr %6, align 4
  br label %204

204:                                              ; preds = %._crit_edge, %174
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload6, label %._crit_edge1, label %205

._crit_edge1:                                     ; preds = %204
  br label %156

205:                                              ; preds = %204
  br label %357

206:                                              ; preds = %4
  %.reload54 = load ptr, ptr %.reg2mem42, align 8
  %207 = load ptr, ptr %.reload54, align 8
  %208 = load ptr, ptr %46, align 8
  %209 = call ptr @llvm.invariant.start.p0(i64 280, ptr %208)
  %.reload32 = load ptr, ptr %.reg2mem20, align 8
  %210 = load i32, ptr %.reload32, align 4
  %211 = getelementptr ptr, ptr %208, i32 %210
  %212 = getelementptr ptr, ptr %211, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = getelementptr { ptr, ptr }, ptr %213, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  %216 = call i32 %215(ptr %207) #17
  store i32 %216, ptr %19, align 4
  %217 = load i32, ptr %19, align 4
  %218 = load i32, ptr %110, align 4
  %219 = add i32 %217, %218
  store i32 %219, ptr %20, align 4
  %.reload53 = load ptr, ptr %.reg2mem42, align 8
  %220 = load ptr, ptr %.reload53, align 8
  %221 = load ptr, ptr %46, align 8
  %222 = call ptr @llvm.invariant.start.p0(i64 280, ptr %221)
  %.reload31 = load ptr, ptr %.reg2mem20, align 8
  %223 = load i32, ptr %.reload31, align 4
  %224 = getelementptr ptr, ptr %221, i32 %223
  %225 = getelementptr ptr, ptr %224, i32 2
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr { ptr, ptr }, ptr %226, i32 0, i32 1
  %228 = load ptr, ptr %227, align 8
  %229 = load i32, ptr %20, align 4
  call void %228(ptr %220, i32 %229) #16
  %.reload52 = load ptr, ptr %.reg2mem42, align 8
  %230 = load ptr, ptr %.reload52, align 8
  %231 = load ptr, ptr %46, align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 280, ptr %231)
  %.reload30 = load ptr, ptr %.reg2mem20, align 8
  %233 = load i32, ptr %.reload30, align 4
  %234 = getelementptr ptr, ptr %231, i32 %233
  %235 = load ptr, ptr %234, align 8
  %236 = getelementptr { ptr, ptr }, ptr %235, i32 0, i32 0
  %237 = load ptr, ptr %236, align 8
  %238 = call { ptr } %237(ptr %230) #17
  store { ptr } %238, ptr %21, align 8
  %239 = load ptr, ptr %21, align 8
  store ptr %239, ptr %22, align 8
  %.reload51 = load ptr, ptr %.reg2mem42, align 8
  %240 = load ptr, ptr %.reload51, align 8
  %241 = load ptr, ptr %46, align 8
  %242 = call ptr @llvm.invariant.start.p0(i64 280, ptr %241)
  %.reload29 = load ptr, ptr %.reg2mem20, align 8
  %243 = load i32, ptr %.reload29, align 4
  %244 = getelementptr ptr, ptr %241, i32 %243
  %245 = getelementptr ptr, ptr %244, i32 2
  %246 = load ptr, ptr %245, align 8
  %247 = getelementptr { ptr, ptr }, ptr %246, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = call i32 %248(ptr %240) #17
  store i32 %249, ptr %23, align 4
  %250 = load i32, ptr %23, align 4
  %251 = sext i32 %250 to i64
  %252 = mul i64 %251, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %253 = call ptr @bump_malloc(i64 %252)
  store ptr %253, ptr %24, align 8
  %.reload50 = load ptr, ptr %.reg2mem42, align 8
  %254 = load ptr, ptr %.reload50, align 8
  %255 = load ptr, ptr %46, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 280, ptr %255)
  %.reload28 = load ptr, ptr %.reg2mem20, align 8
  %257 = load i32, ptr %.reload28, align 4
  %258 = getelementptr ptr, ptr %255, i32 %257
  %259 = load ptr, ptr %258, align 8
  %260 = getelementptr { ptr, ptr }, ptr %259, i32 0, i32 1
  %261 = load ptr, ptr %260, align 8
  %262 = getelementptr { ptr }, ptr %24, i32 0, i32 0
  %263 = load ptr, ptr %262, align 8
  %264 = insertvalue { ptr } undef, ptr %263, 0
  call void %261(ptr %254, { ptr } %264) #16
  store i32 0, ptr %25, align 4
  store i32 0, ptr %26, align 4
  br label %265

265:                                              ; preds = %._crit_edge3, %206
  %.reload49 = load ptr, ptr %.reg2mem42, align 8
  %266 = load ptr, ptr %.reload49, align 8
  %267 = load ptr, ptr %46, align 8
  %268 = call ptr @llvm.invariant.start.p0(i64 280, ptr %267)
  %.reload27 = load ptr, ptr %.reg2mem20, align 8
  %269 = load i32, ptr %.reload27, align 4
  %270 = getelementptr ptr, ptr %267, i32 %269
  %271 = getelementptr ptr, ptr %270, i32 1
  %272 = load ptr, ptr %271, align 8
  %273 = getelementptr { ptr, ptr }, ptr %272, i32 0, i32 0
  %274 = load ptr, ptr %273, align 8
  %275 = call i32 %274(ptr %266) #17
  store i32 %275, ptr %27, align 4
  %276 = load i32, ptr %27, align 4
  %277 = load i32, ptr %110, align 4
  %278 = add i32 %276, %277
  store i32 %278, ptr %28, align 4
  %279 = load i32, ptr %25, align 4
  %280 = load i32, ptr %28, align 4
  %281 = icmp slt i32 %279, %280
  store i1 %281, ptr %29, align 1
  %282 = load i1, ptr %29, align 1
  store i1 %282, ptr %.reg2mem, align 1
  %.reload4 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload4, label %283, label %._crit_edge2

._crit_edge2:                                     ; preds = %265
  br label %355

283:                                              ; preds = %265
  %.reload48 = load ptr, ptr %.reg2mem42, align 8
  %284 = load ptr, ptr %.reload48, align 8
  %285 = load ptr, ptr %46, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 280, ptr %285)
  %.reload26 = load ptr, ptr %.reg2mem20, align 8
  %287 = load i32, ptr %.reload26, align 4
  %288 = getelementptr ptr, ptr %285, i32 %287
  %289 = getelementptr ptr, ptr %288, i32 1
  %290 = load ptr, ptr %289, align 8
  %291 = getelementptr { ptr, ptr }, ptr %290, i32 0, i32 0
  %292 = load ptr, ptr %291, align 8
  %293 = call i32 %292(ptr %284) #17
  store i32 %293, ptr %30, align 4
  %294 = load i32, ptr %25, align 4
  %295 = load i32, ptr %30, align 4
  %296 = icmp slt i32 %294, %295
  store i1 %296, ptr %31, align 1
  %297 = load i1, ptr %31, align 1
  br i1 %297, label %298, label %324

298:                                              ; preds = %283
  %299 = load ptr, ptr %22, align 8
  %300 = load i32, ptr %25, align 4
  %301 = sext i32 %300 to i64
  %302 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %301
  %303 = getelementptr i8, ptr %299, i64 %302
  %304 = load i8, ptr %303, align 1
  store i8 %304, ptr %32, align 1
  %.reload47 = load ptr, ptr %.reg2mem42, align 8
  %305 = load ptr, ptr %.reload47, align 8
  %306 = load ptr, ptr %46, align 8
  %307 = call ptr @llvm.invariant.start.p0(i64 280, ptr %306)
  %.reload25 = load ptr, ptr %.reg2mem20, align 8
  %308 = load i32, ptr %.reload25, align 4
  %309 = getelementptr ptr, ptr %306, i32 %308
  %310 = load ptr, ptr %309, align 8
  %311 = getelementptr { ptr, ptr }, ptr %310, i32 0, i32 0
  %312 = load ptr, ptr %311, align 8
  %313 = call { ptr } %312(ptr %305) #17
  store { ptr } %313, ptr %33, align 8
  %314 = load ptr, ptr %33, align 8
  %315 = load i32, ptr %25, align 4
  %316 = sext i32 %315 to i64
  %317 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %316
  %318 = getelementptr i8, ptr %314, i64 %317
  %319 = load i8, ptr %32, align 1
  store i8 %319, ptr %318, align 1
  store i32 1, ptr %34, align 4
  %320 = load i32, ptr %25, align 4
  %321 = load i32, ptr %34, align 4
  %322 = add i32 %320, %321
  store i32 %322, ptr %35, align 4
  %323 = load i32, ptr %35, align 4
  store i32 %323, ptr %25, align 4
  br label %354

324:                                              ; preds = %283
  %325 = load ptr, ptr %91, align 8
  %326 = load i32, ptr %26, align 4
  %327 = sext i32 %326 to i64
  %328 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %327
  %329 = getelementptr i8, ptr %325, i64 %328
  %330 = load i8, ptr %329, align 1
  store i8 %330, ptr %36, align 1
  %.reload46 = load ptr, ptr %.reg2mem42, align 8
  %331 = load ptr, ptr %.reload46, align 8
  %332 = load ptr, ptr %46, align 8
  %333 = call ptr @llvm.invariant.start.p0(i64 280, ptr %332)
  %.reload24 = load ptr, ptr %.reg2mem20, align 8
  %334 = load i32, ptr %.reload24, align 4
  %335 = getelementptr ptr, ptr %332, i32 %334
  %336 = load ptr, ptr %335, align 8
  %337 = getelementptr { ptr, ptr }, ptr %336, i32 0, i32 0
  %338 = load ptr, ptr %337, align 8
  %339 = call { ptr } %338(ptr %331) #17
  store { ptr } %339, ptr %37, align 8
  %340 = load ptr, ptr %37, align 8
  %341 = load i32, ptr %25, align 4
  %342 = sext i32 %341 to i64
  %343 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %342
  %344 = getelementptr i8, ptr %340, i64 %343
  %345 = load i8, ptr %36, align 1
  store i8 %345, ptr %344, align 1
  store i32 1, ptr %38, align 4
  %346 = load i32, ptr %25, align 4
  %347 = load i32, ptr %38, align 4
  %348 = add i32 %346, %347
  store i32 %348, ptr %39, align 4
  %349 = load i32, ptr %39, align 4
  store i32 %349, ptr %25, align 4
  store i32 1, ptr %40, align 4
  %350 = load i32, ptr %26, align 4
  %351 = load i32, ptr %40, align 4
  %352 = add i32 %350, %351
  store i32 %352, ptr %41, align 4
  %353 = load i32, ptr %41, align 4
  store i32 %353, ptr %26, align 4
  br label %354

354:                                              ; preds = %324, %298
  br label %355

355:                                              ; preds = %._crit_edge2, %354
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge3, label %356

._crit_edge3:                                     ; preds = %355
  br label %265

356:                                              ; preds = %355
  br label %357

357:                                              ; preds = %356, %205
  %.reload45 = load ptr, ptr %.reg2mem42, align 8
  %358 = load ptr, ptr %.reload45, align 8
  %359 = load ptr, ptr %46, align 8
  %360 = call ptr @llvm.invariant.start.p0(i64 280, ptr %359)
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  %361 = load i32, ptr %.reload23, align 4
  %362 = getelementptr ptr, ptr %359, i32 %361
  %363 = getelementptr ptr, ptr %362, i32 1
  %364 = load ptr, ptr %363, align 8
  %365 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 0
  %366 = load ptr, ptr %365, align 8
  %367 = call i32 %366(ptr %358) #17
  %.reload19 = load ptr, ptr %.reg2mem17, align 8
  store i32 %367, ptr %.reload19, align 4
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %368 = load i32, ptr %.reload18, align 4
  %369 = load i32, ptr %110, align 4
  %370 = add i32 %368, %369
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  store i32 %370, ptr %.reload16, align 4
  %.reload44 = load ptr, ptr %.reg2mem42, align 8
  %371 = load ptr, ptr %.reload44, align 8
  %372 = load ptr, ptr %46, align 8
  %373 = call ptr @llvm.invariant.start.p0(i64 280, ptr %372)
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %374 = load i32, ptr %.reload22, align 4
  %375 = getelementptr ptr, ptr %372, i32 %374
  %376 = getelementptr ptr, ptr %375, i32 1
  %377 = load ptr, ptr %376, align 8
  %378 = getelementptr { ptr, ptr }, ptr %377, i32 0, i32 1
  %379 = load ptr, ptr %378, align 8
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %380 = load i32, ptr %.reload15, align 4
  call void %379(ptr %371, i32 %380) #16
  %.reload13 = load ptr, ptr %.reg2mem8, align 8
  %381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload13, i32 0, i32 0
  %.reload62 = load ptr, ptr %.reg2mem61, align 8
  %382 = load ptr, ptr %.reload62, align 8
  store ptr %382, ptr %381, align 8
  %.reload12 = load ptr, ptr %.reg2mem8, align 8
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload12, i32 0, i32 1
  %.reload43 = load ptr, ptr %.reg2mem42, align 8
  %384 = load ptr, ptr %.reload43, align 8
  store ptr %384, ptr %383, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload11, i32 0, i32 2
  %.reload40 = load ptr, ptr %.reg2mem39, align 8
  %386 = load ptr, ptr %.reload40, align 8
  store ptr %386, ptr %385, align 8
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload10, i32 0, i32 3
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %388 = load i32, ptr %.reload21, align 4
  store i32 %388, ptr %387, align 4
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  call void @set_offset(ptr %.reload9, ptr @String)
  %389 = load ptr, ptr %381, align 8
  %390 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %389, 0
  %391 = load ptr, ptr %383, align 8
  %392 = insertvalue { ptr, ptr, ptr, i32 } %390, ptr %391, 1
  %393 = load ptr, ptr %385, align 8
  %394 = insertvalue { ptr, ptr, ptr, i32 } %392, ptr %393, 2
  %395 = load i32, ptr %387, align 4
  %396 = insertvalue { ptr, ptr, ptr, i32 } %394, i32 %395, 3
  ret { ptr, ptr, ptr, i32 } %396
}

define i8 @String__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca i32, align 4
  %6 = alloca i1, align 1
  %7 = alloca ptr, align 8
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i1, align 1
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8, align 1
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i8, align 1
  %.reg2mem2 = alloca i8, align 1
  %.reg2mem4 = alloca i8, align 1
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem20 = alloca i8, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %17, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  store ptr %23, ptr %.reg2mem13, align 8
  %24 = load ptr, ptr %22, align 8
  %.reload19 = load ptr, ptr %.reg2mem13, align 8
  store ptr %24, ptr %.reload19, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  store ptr %29, ptr %.reg2mem6, align 8
  %30 = load i32, ptr %28, align 4
  %.reload12 = load ptr, ptr %.reg2mem6, align 8
  store i32 %30, ptr %.reload12, align 4
  call void @set_offset(ptr %18, ptr @String)
  %31 = alloca i32, align 4
  store i32 %3, ptr %31, align 4
  %.reload18 = load ptr, ptr %.reg2mem13, align 8
  %32 = load ptr, ptr %.reload18, align 8
  %33 = load ptr, ptr %18, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 280, ptr %33)
  %.reload11 = load ptr, ptr %.reg2mem6, align 8
  %35 = load i32, ptr %.reload11, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call i32 %40(ptr %32) #17
  %42 = alloca i32, align 4
  store i32 %41, ptr %42, align 4
  %43 = alloca i32, align 4
  store i32 1, ptr %43, align 4
  %44 = load i32, ptr %42, align 4
  %45 = load i32, ptr %43, align 4
  %46 = sub i32 %44, %45
  %47 = alloca i32, align 4
  store i32 %46, ptr %47, align 4
  %48 = load i32, ptr %31, align 4
  %49 = load i32, ptr %47, align 4
  %50 = icmp sgt i32 %48, %49
  %51 = alloca i1, align 1
  store i1 %50, ptr %51, align 1
  %52 = load i1, ptr %51, align 1
  br i1 %52, label %53, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %55

53:                                               ; preds = %4
  %54 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %54)
  br label %55

55:                                               ; preds = %._crit_edge, %53
  store i32 0, ptr %5, align 4
  %56 = load i32, ptr %31, align 4
  %57 = load i32, ptr %5, align 4
  %58 = icmp sge i32 %56, %57
  store i1 %58, ptr %6, align 1
  %59 = load i1, ptr %6, align 1
  br i1 %59, label %60, label %77

60:                                               ; preds = %55
  %.reload17 = load ptr, ptr %.reg2mem13, align 8
  %61 = load ptr, ptr %.reload17, align 8
  %62 = load ptr, ptr %18, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 280, ptr %62)
  %.reload10 = load ptr, ptr %.reg2mem6, align 8
  %64 = load i32, ptr %.reload10, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = call { ptr } %68(ptr %61) #17
  store { ptr } %69, ptr %7, align 8
  %70 = load ptr, ptr %7, align 8
  %71 = load i32, ptr %31, align 4
  %72 = sext i32 %71 to i64
  %73 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %72
  %74 = getelementptr i8, ptr %70, i64 %73
  %75 = load i8, ptr %74, align 1
  store i8 %75, ptr %8, align 1
  %76 = load i8, ptr %8, align 1
  store i8 %76, ptr %.reg2mem4, align 1
  %.reload5 = load i8, ptr %.reg2mem4, align 1
  store i8 %.reload5, ptr %.reg2mem20, align 1
  br label %127

77:                                               ; preds = %55
  %.reload16 = load ptr, ptr %.reg2mem13, align 8
  %78 = load ptr, ptr %.reload16, align 8
  %79 = load ptr, ptr %18, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 280, ptr %79)
  %.reload9 = load ptr, ptr %.reg2mem6, align 8
  %81 = load i32, ptr %.reload9, align 4
  %82 = getelementptr ptr, ptr %79, i32 %81
  %83 = getelementptr ptr, ptr %82, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %87 = call i32 %86(ptr %78) #17
  store i32 %87, ptr %9, align 4
  %88 = load i32, ptr %9, align 4
  %89 = load i32, ptr %31, align 4
  %90 = add i32 %88, %89
  store i32 %90, ptr %10, align 4
  store i32 0, ptr %11, align 4
  %91 = load i32, ptr %10, align 4
  %92 = load i32, ptr %11, align 4
  %93 = icmp slt i32 %91, %92
  store i1 %93, ptr %12, align 1
  %94 = load i1, ptr %12, align 1
  br i1 %94, label %95, label %._crit_edge1

._crit_edge1:                                     ; preds = %77
  br label %97

95:                                               ; preds = %77
  %96 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %96)
  br label %97

97:                                               ; preds = %._crit_edge1, %95
  %.reload15 = load ptr, ptr %.reg2mem13, align 8
  %98 = load ptr, ptr %.reload15, align 8
  %99 = load ptr, ptr %18, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 280, ptr %99)
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %101 = load i32, ptr %.reload8, align 4
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = load ptr, ptr %102, align 8
  %104 = getelementptr { ptr, ptr }, ptr %103, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = call { ptr } %105(ptr %98) #17
  store { ptr } %106, ptr %13, align 8
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %107 = load ptr, ptr %.reload14, align 8
  %108 = load ptr, ptr %18, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 280, ptr %108)
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %110 = load i32, ptr %.reload7, align 4
  %111 = getelementptr ptr, ptr %108, i32 %110
  %112 = getelementptr ptr, ptr %111, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = getelementptr { ptr, ptr }, ptr %113, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = call i32 %115(ptr %107) #17
  store i32 %116, ptr %14, align 4
  %117 = load i32, ptr %14, align 4
  %118 = load i32, ptr %31, align 4
  %119 = add i32 %117, %118
  store i32 %119, ptr %15, align 4
  %120 = load ptr, ptr %13, align 8
  %121 = load i32, ptr %15, align 4
  %122 = sext i32 %121 to i64
  %123 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %122
  %124 = getelementptr i8, ptr %120, i64 %123
  %125 = load i8, ptr %124, align 1
  store i8 %125, ptr %16, align 1
  %126 = load i8, ptr %16, align 1
  store i8 %126, ptr %.reg2mem2, align 1
  %.reload3 = load i8, ptr %.reg2mem2, align 1
  store i8 %.reload3, ptr %.reg2mem20, align 1
  br label %127

127:                                              ; preds = %97, %60
  %.reload21 = load i8, ptr %.reg2mem20, align 1
  store i8 %.reload21, ptr %.reg2mem, align 1
  br label %128

128:                                              ; preds = %127
  %.reload = load i8, ptr %.reg2mem, align 1
  ret i8 %.reload
}

define i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i1, align 1
  %9 = alloca ptr, align 8
  %10 = alloca i8, align 1
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i8, align 1
  %15 = alloca i1, align 1
  %16 = alloca i1, align 1
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i1, align 1
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem26 = alloca ptr, align 8
  %.reg2mem30 = alloca ptr, align 8
  %.reg2mem35 = alloca ptr, align 8
  %.reg2mem40 = alloca ptr, align 8
  %.reg2mem42 = alloca i1, align 1
  %.reg2mem44 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  store ptr %26, ptr %.reg2mem35, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload39 = load ptr, ptr %.reg2mem35, align 8
  store ptr %27, ptr %.reload39, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr %32, ptr %.reg2mem30, align 8
  %33 = load i32, ptr %31, align 4
  %.reload34 = load ptr, ptr %.reg2mem30, align 8
  store i32 %33, ptr %.reload34, align 4
  call void @set_offset(ptr %21, ptr @String)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %34, align 8
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  store ptr %37, ptr %.reg2mem26, align 8
  %38 = load ptr, ptr %36, align 8
  %.reload29 = load ptr, ptr %.reg2mem26, align 8
  store ptr %38, ptr %.reload29, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  store ptr %40, ptr %.reg2mem22, align 8
  %41 = load ptr, ptr %39, align 8
  %.reload25 = load ptr, ptr %.reg2mem22, align 8
  store ptr %41, ptr %.reload25, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  store ptr %43, ptr %.reg2mem18, align 8
  %44 = load ptr, ptr %42, align 8
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  store ptr %44, ptr %.reload21, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr %46, ptr %.reg2mem14, align 8
  %47 = load i32, ptr %45, align 4
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  store i32 %47, ptr %.reload17, align 4
  call void @set_offset(ptr %35, ptr @String)
  %.reload38 = load ptr, ptr %.reg2mem35, align 8
  %48 = load ptr, ptr %.reload38, align 8
  %49 = load ptr, ptr %21, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 280, ptr %49)
  %.reload33 = load ptr, ptr %.reg2mem30, align 8
  %51 = load i32, ptr %.reload33, align 4
  %52 = getelementptr ptr, ptr %49, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = call i32 %56(ptr %48) #17
  %58 = alloca i32, align 4
  store i32 %57, ptr %58, align 4
  %.reload28 = load ptr, ptr %.reg2mem26, align 8
  %59 = load ptr, ptr %.reload28, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %.reload24 = load ptr, ptr %.reg2mem22, align 8
  %61 = load ptr, ptr %.reload24, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 1
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %63 = load ptr, ptr %.reload20, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %63, 2
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %65 = load i32, ptr %.reload16, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %65, 3
  %67 = alloca [0 x ptr], align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 0, ptr %67)
  %69 = call ptr @llvm.invariant.start.p0(i64 280, ptr %59)
  %70 = getelementptr ptr, ptr %59, i32 %65
  %71 = getelementptr ptr, ptr %70, i32 5
  %72 = load ptr, ptr %71, align 8
  %73 = alloca {}, align 8
  %74 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %66, ptr %73)
  %75 = call i32 %74({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67) #15
  %76 = alloca i32, align 4
  store i32 %75, ptr %76, align 4
  %77 = load i32, ptr %58, align 4
  %78 = load i32, ptr %76, align 4
  %79 = icmp ne i32 %77, %78
  %80 = alloca i1, align 1
  store i1 %79, ptr %80, align 1
  %81 = load i1, ptr %80, align 1
  br i1 %81, label %82, label %83

82:                                               ; preds = %4
  store ptr %5, ptr %.reg2mem40, align 8
  store i1 false, ptr %.reg2mem42, align 1
  br label %157

83:                                               ; preds = %4
  store i32 0, ptr %6, align 4
  br label %84

84:                                               ; preds = %155, %83
  %.reload37 = load ptr, ptr %.reg2mem35, align 8
  %85 = load ptr, ptr %.reload37, align 8
  %86 = load ptr, ptr %21, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 280, ptr %86)
  %.reload32 = load ptr, ptr %.reg2mem30, align 8
  %88 = load i32, ptr %.reload32, align 4
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = getelementptr ptr, ptr %89, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr { ptr, ptr }, ptr %91, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = call i32 %93(ptr %85) #17
  store i32 %94, ptr %7, align 4
  %95 = load i32, ptr %6, align 4
  %96 = load i32, ptr %7, align 4
  %97 = icmp slt i32 %95, %96
  store i1 %97, ptr %8, align 1
  %98 = load i1, ptr %8, align 1
  %99 = xor i1 %98, true
  store i1 %99, ptr %.reg2mem11, align 1
  %100 = select i1 %98, ptr %16, ptr %19
  store ptr %100, ptr %.reg2mem8, align 8
  br i1 %98, label %101, label %151

101:                                              ; preds = %84
  %.reload36 = load ptr, ptr %.reg2mem35, align 8
  %102 = load ptr, ptr %.reload36, align 8
  %103 = load ptr, ptr %21, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 280, ptr %103)
  %.reload31 = load ptr, ptr %.reg2mem30, align 8
  %105 = load i32, ptr %.reload31, align 4
  %106 = getelementptr ptr, ptr %103, i32 %105
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = call { ptr } %109(ptr %102) #17
  store { ptr } %110, ptr %9, align 8
  %111 = load ptr, ptr %9, align 8
  %112 = load i32, ptr %6, align 4
  %113 = sext i32 %112 to i64
  %114 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %113
  %115 = getelementptr i8, ptr %111, i64 %114
  %116 = load i8, ptr %115, align 1
  store i8 %116, ptr %10, align 1
  %.reload27 = load ptr, ptr %.reg2mem26, align 8
  %117 = load ptr, ptr %.reload27, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %119 = load ptr, ptr %.reload23, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %121 = load ptr, ptr %.reload19, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 2
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %123 = load i32, ptr %.reload15, align 4
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %123, 3
  %125 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %126 = call ptr @llvm.invariant.start.p0(i64 280, ptr %117)
  %127 = getelementptr ptr, ptr %117, i32 %123
  %128 = getelementptr ptr, ptr %127, i32 7
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr @behavior_wrapper(ptr %129, { ptr, ptr, ptr, i32 } %124, ptr %12)
  %131 = call { ptr } %130({ ptr, ptr, ptr, i32 } %124, { ptr, ptr, ptr, i32 } %124, ptr %11) #15
  store { ptr } %131, ptr %13, align 8
  %132 = load ptr, ptr %13, align 8
  %133 = load i32, ptr %6, align 4
  %134 = sext i32 %133 to i64
  %135 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %134
  %136 = getelementptr i8, ptr %132, i64 %135
  %137 = load i8, ptr %136, align 1
  store i8 %137, ptr %14, align 1
  %138 = load i8, ptr %10, align 1
  %139 = load i8, ptr %14, align 1
  %140 = icmp ne i8 %138, %139
  store i1 %140, ptr %15, align 1
  %141 = load i1, ptr %15, align 1
  %142 = xor i1 %141, true
  %143 = zext i1 %142 to i32
  store i32 %143, ptr %.reg2mem6, align 4
  br i1 %141, label %144, label %145

144:                                              ; preds = %101
  br label %150

145:                                              ; preds = %101
  store i32 1, ptr %17, align 4
  %146 = load i32, ptr %6, align 4
  %147 = load i32, ptr %17, align 4
  %148 = add i32 %146, %147
  store i32 %148, ptr %18, align 4
  %149 = load i32, ptr %18, align 4
  store i32 %149, ptr %6, align 4
  br label %150

150:                                              ; preds = %145, %144
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload7, ptr %.reg2mem44, align 4
  br label %152

151:                                              ; preds = %84
  store i32 0, ptr %.reg2mem44, align 4
  br label %152

152:                                              ; preds = %151, %150
  %.reload45 = load i32, ptr %.reg2mem44, align 4
  store i32 %.reload45, ptr %.reg2mem4, align 4
  br label %153

153:                                              ; preds = %152
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  %154 = trunc i32 %.reload5 to i1
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  br i1 %154, label %155, label %156

155:                                              ; preds = %153
  br label %84

156:                                              ; preds = %153
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  store ptr %.reload9, ptr %.reg2mem40, align 8
  store i1 %.reload12, ptr %.reg2mem42, align 1
  br label %157

157:                                              ; preds = %156, %82
  %.reload43 = load i1, ptr %.reg2mem42, align 1
  %.reload41 = load ptr, ptr %.reg2mem40, align 8
  store i1 %.reload43, ptr %.reg2mem2, align 1
  store ptr %.reload41, ptr %.reg2mem, align 8
  br label %158

158:                                              ; preds = %157
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %.reload3 = load i1, ptr %.reg2mem2, align 1
  store i1 %.reload3, ptr %.reload1, align 1
  %.reload = load ptr, ptr %.reg2mem, align 8
  %159 = load i1, ptr %.reload, align 1
  ret i1 %159
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i8, align 1
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca ptr, align 8
  %15 = alloca i64, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i8 }, align 8
  %.reg2mem1 = alloca { ptr, i8 }, align 8
  %.reg2mem3 = alloca { ptr, i8 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem19 = alloca { ptr, i8 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  store ptr %22, ptr %.reg2mem12, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  store ptr %23, ptr %.reload18, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr %28, ptr %.reg2mem5, align 8
  %29 = load i32, ptr %27, align 4
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  store i32 %29, ptr %.reload11, align 4
  call void @set_offset(ptr %17, ptr @String)
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %30 = load ptr, ptr %.reload17, align 8
  %31 = load ptr, ptr %17, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 280, ptr %31)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %33 = load i32, ptr %.reload10, align 4
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %30) #17
  %40 = alloca i32, align 4
  store i32 %39, ptr %40, align 4
  %41 = alloca i32, align 4
  store i32 0, ptr %41, align 4
  %42 = load i32, ptr %40, align 4
  %43 = load i32, ptr %41, align 4
  %44 = icmp eq i32 %42, %43
  %45 = alloca i1, align 1
  store i1 %44, ptr %45, align 1
  %46 = load i1, ptr %45, align 1
  br i1 %46, label %47, label %53

47:                                               ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %6, align 4
  %48 = load i64, ptr %6, align 4
  store i64 %48, ptr %5, align 4
  %49 = load ptr, ptr %5, align 8
  %50 = insertvalue { ptr, i8 } undef, ptr %49, 0
  %51 = load i8, ptr %4, align 1
  %52 = insertvalue { ptr, i8 } %50, i8 %51, 1
  store { ptr, i8 } %52, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i8 }, ptr %.reg2mem3, align 8
  store { ptr, i8 } %.reload4, ptr %.reg2mem19, align 8
  br label %108

53:                                               ; preds = %3
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %54 = load ptr, ptr %.reload16, align 8
  %55 = load ptr, ptr %17, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 280, ptr %55)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %57 = load i32, ptr %.reload9, align 4
  %58 = getelementptr ptr, ptr %55, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call i32 %62(ptr %54) #17
  store i32 %63, ptr %7, align 4
  store i32 1, ptr %8, align 4
  %64 = load i32, ptr %7, align 4
  %65 = load i32, ptr %8, align 4
  %66 = sub i32 %64, %65
  store i32 %66, ptr %9, align 4
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %67 = load ptr, ptr %.reload15, align 8
  %68 = load ptr, ptr %17, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 280, ptr %68)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %70 = load i32, ptr %.reload8, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = getelementptr ptr, ptr %71, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = load i32, ptr %9, align 4
  call void %75(ptr %67, i32 %76) #16
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %77 = load ptr, ptr %.reload14, align 8
  %78 = load ptr, ptr %17, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 280, ptr %78)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %80 = load i32, ptr %.reload7, align 4
  %81 = getelementptr ptr, ptr %78, i32 %80
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr } %84(ptr %77) #17
  store { ptr } %85, ptr %10, align 8
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %86 = load ptr, ptr %.reload13, align 8
  %87 = load ptr, ptr %17, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 280, ptr %87)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %89 = load i32, ptr %.reload6, align 4
  %90 = getelementptr ptr, ptr %87, i32 %89
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = call i32 %94(ptr %86) #17
  store i32 %95, ptr %11, align 4
  %96 = load ptr, ptr %10, align 8
  %97 = load i32, ptr %11, align 4
  %98 = sext i32 %97 to i64
  %99 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %98
  %100 = getelementptr i8, ptr %96, i64 %99
  %101 = load i8, ptr %100, align 1
  store i8 %101, ptr %12, align 1
  %102 = load i8, ptr %12, align 1
  store i8 %102, ptr %13, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %15, align 4
  %103 = load i64, ptr %15, align 4
  store i64 %103, ptr %14, align 4
  %104 = load ptr, ptr %14, align 8
  %105 = insertvalue { ptr, i8 } undef, ptr %104, 0
  %106 = load i8, ptr %13, align 1
  %107 = insertvalue { ptr, i8 } %105, i8 %106, 1
  store { ptr, i8 } %107, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i8 }, ptr %.reg2mem1, align 8
  store { ptr, i8 } %.reload2, ptr %.reg2mem19, align 8
  br label %108

108:                                              ; preds = %53, %47
  %.reload20 = load { ptr, i8 }, ptr %.reg2mem19, align 8
  store { ptr, i8 } %.reload20, ptr %.reg2mem, align 8
  br label %109

109:                                              ; preds = %108
  %.reload = load { ptr, i8 }, ptr %.reg2mem, align 8
  ret { ptr, i8 } %.reload
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca ptr, align 8
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [1 x ptr], align 8
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca [3 x ptr], align 8
  %20 = alloca { ptr, ptr, ptr }, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = alloca i32, align 4
  %23 = alloca ptr, align 8
  %24 = alloca ptr, align 8
  %25 = alloca ptr, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %27, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  store ptr %33, ptr %.reg2mem12, align 8
  %34 = load ptr, ptr %32, align 8
  %.reload20 = load ptr, ptr %.reg2mem12, align 8
  store ptr %34, ptr %.reload20, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr %39, ptr %.reg2mem3, align 8
  %40 = load i32, ptr %38, align 4
  %.reload11 = load ptr, ptr %.reg2mem3, align 8
  store i32 %40, ptr %.reload11, align 4
  call void @set_offset(ptr %28, ptr @String)
  %.reload19 = load ptr, ptr %.reg2mem12, align 8
  %41 = load ptr, ptr %.reload19, align 8
  %42 = load ptr, ptr %28, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 280, ptr %42)
  %.reload10 = load ptr, ptr %.reg2mem3, align 8
  %44 = load i32, ptr %.reload10, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = call i32 %49(ptr %41) #17
  %51 = alloca i32, align 4
  store i32 %50, ptr %51, align 4
  %52 = load i32, ptr %51, align 4
  %53 = sext i32 %52 to i64
  %54 = alloca ptr, align 8
  %55 = mul i64 %53, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %56 = call ptr @bump_malloc(i64 %55)
  store ptr %56, ptr %54, align 8
  %57 = alloca ptr, align 8
  %58 = getelementptr { ptr }, ptr %54, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  store ptr %59, ptr %57, align 8
  %60 = alloca i32, align 4
  store i32 0, ptr %60, align 4
  br label %61

61:                                               ; preds = %._crit_edge1, %3
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  %62 = load ptr, ptr %.reload18, align 8
  %63 = load ptr, ptr %28, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 280, ptr %63)
  %.reload9 = load ptr, ptr %.reg2mem3, align 8
  %65 = load i32, ptr %.reload9, align 4
  %66 = getelementptr ptr, ptr %63, i32 %65
  %67 = getelementptr ptr, ptr %66, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr { ptr, ptr }, ptr %68, i32 0, i32 0
  %70 = load ptr, ptr %69, align 8
  %71 = call i32 %70(ptr %62) #17
  store i32 %71, ptr %4, align 4
  %72 = load i32, ptr %60, align 4
  %73 = load i32, ptr %4, align 4
  %74 = icmp slt i32 %72, %73
  store i1 %74, ptr %5, align 1
  %75 = load i1, ptr %5, align 1
  store i1 %75, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %76, label %._crit_edge

._crit_edge:                                      ; preds = %61
  br label %102

76:                                               ; preds = %61
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %77 = load ptr, ptr %.reload17, align 8
  %78 = load ptr, ptr %28, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 280, ptr %78)
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %80 = load i32, ptr %.reload8, align 4
  %81 = getelementptr ptr, ptr %78, i32 %80
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr } %84(ptr %77) #17
  store { ptr } %85, ptr %6, align 8
  %86 = load ptr, ptr %6, align 8
  %87 = load i32, ptr %60, align 4
  %88 = sext i32 %87 to i64
  %89 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %88
  %90 = getelementptr i8, ptr %86, i64 %89
  %91 = load i8, ptr %90, align 1
  store i8 %91, ptr %7, align 1
  %92 = load ptr, ptr %57, align 8
  %93 = load i32, ptr %60, align 4
  %94 = sext i32 %93 to i64
  %95 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %94
  %96 = getelementptr i8, ptr %92, i64 %95
  %97 = load i8, ptr %7, align 1
  store i8 %97, ptr %96, align 1
  store i32 1, ptr %8, align 4
  %98 = load i32, ptr %60, align 4
  %99 = load i32, ptr %8, align 4
  %100 = add i32 %98, %99
  store i32 %100, ptr %9, align 4
  %101 = load i32, ptr %9, align 4
  store i32 %101, ptr %60, align 4
  br label %102

102:                                              ; preds = %._crit_edge, %76
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %103

._crit_edge1:                                     ; preds = %102
  br label %61

103:                                              ; preds = %102
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %104 = load ptr, ptr %.reload16, align 8
  %105 = load ptr, ptr %28, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 280, ptr %105)
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %107 = load i32, ptr %.reload7, align 4
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = call i32 %112(ptr %104) #17
  store i32 %113, ptr %10, align 4
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %114 = load ptr, ptr %.reload15, align 8
  %115 = load ptr, ptr %28, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 280, ptr %115)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %117 = load i32, ptr %.reload6, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call i32 %122(ptr %114) #17
  store i32 %123, ptr %11, align 4
  store ptr @String, ptr %12, align 8
  %124 = load ptr, ptr %12, align 8
  %125 = getelementptr ptr, ptr %124, i32 6
  %126 = load ptr, ptr %125, align 8
  %127 = call { i64, i64 } @size_wrapper(ptr %126, ptr %12)
  %128 = extractvalue { i64, i64 } %127, 0
  %129 = call ptr @bump_malloc(i64 %128)
  store ptr @String, ptr %16, align 8
  store ptr %129, ptr %15, align 8
  store i32 10, ptr %13, align 4
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %130 = load ptr, ptr %.reload14, align 8
  %131 = load ptr, ptr %28, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 280, ptr %131)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %133 = load i32, ptr %.reload5, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call i32 %138(ptr %130) #17
  store i32 %139, ptr %17, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %140 = load ptr, ptr %.reload13, align 8
  %141 = load ptr, ptr %28, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 280, ptr %141)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %143 = load i32, ptr %.reload4, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr }, ptr %146, i32 0, i32 0
  %148 = load ptr, ptr %147, align 8
  %149 = call i32 %148(ptr %140) #17
  store i32 %149, ptr %18, align 4
  %150 = load ptr, ptr %57, align 8
  %151 = insertvalue { ptr } undef, ptr %150, 0
  %152 = load i32, ptr %17, align 4
  %153 = load i32, ptr %18, align 4
  %154 = load ptr, ptr %16, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %154, 0
  %156 = load ptr, ptr %15, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %156, 1
  %158 = load ptr, ptr %14, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %158, 2
  %160 = load i32, ptr %13, align 4
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, i32 %160, 3
  %162 = getelementptr [3 x ptr], ptr %19, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %162, align 8
  %163 = getelementptr [3 x ptr], ptr %19, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %163, align 8
  %164 = getelementptr [3 x ptr], ptr %19, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %164, align 8
  %165 = call ptr @llvm.invariant.start.p0(i64 9, ptr %19)
  %166 = call ptr @llvm.invariant.start.p0(i64 280, ptr %154)
  %167 = getelementptr ptr, ptr %154, i32 %160
  %168 = getelementptr ptr, ptr %167, i32 4
  %169 = load ptr, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 0
  store ptr @buffer_typ, ptr %170, align 8
  %171 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 1
  store ptr @i32_typ, ptr %171, align 8
  %172 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  store ptr @i32_typ, ptr %172, align 8
  %173 = call ptr @behavior_wrapper(ptr %169, { ptr, ptr, ptr, i32 } %161, ptr %20)
  call void %173({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr %19, { ptr } %151, i32 %152, i32 %153) #15
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %175 = load ptr, ptr %16, align 8
  store ptr %175, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %177 = load ptr, ptr %15, align 8
  store ptr %177, ptr %176, align 8
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %179 = load ptr, ptr %14, align 8
  store ptr %179, ptr %178, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %181 = load i32, ptr %13, align 4
  store i32 %181, ptr %180, align 4
  call void @set_offset(ptr %21, ptr @String)
  %182 = load ptr, ptr %174, align 8
  store ptr %182, ptr %25, align 8
  %183 = load ptr, ptr %176, align 8
  store ptr %183, ptr %24, align 8
  %184 = load ptr, ptr %178, align 8
  store ptr %184, ptr %23, align 8
  %185 = load i32, ptr %180, align 4
  store i32 %185, ptr %22, align 4
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %187 = load ptr, ptr %25, align 8
  store ptr %187, ptr %186, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %189 = load ptr, ptr %24, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %191 = load ptr, ptr %23, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %193 = load i32, ptr %22, align 4
  store i32 %193, ptr %192, align 4
  call void @set_offset(ptr %26, ptr @String)
  %194 = load ptr, ptr %186, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %194, 0
  %196 = load ptr, ptr %188, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %196, 1
  %198 = load ptr, ptr %190, align 8
  %199 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %198, 2
  %200 = load i32, ptr %192, align 4
  %201 = insertvalue { ptr, ptr, ptr, i32 } %199, i32 %200, 3
  ret { ptr, ptr, ptr, i32 } %201
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca ptr, align 8
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8, align 1
  %11 = alloca i32, align 4
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  store ptr %18, ptr %.reg2mem9, align 8
  %19 = load ptr, ptr %17, align 8
  %.reload14 = load ptr, ptr %.reg2mem9, align 8
  store ptr %19, ptr %.reload14, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  store ptr %24, ptr %.reg2mem3, align 8
  %25 = load i32, ptr %23, align 4
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  store i32 %25, ptr %.reload8, align 4
  call void @set_offset(ptr %13, ptr @String)
  %.reload13 = load ptr, ptr %.reg2mem9, align 8
  %26 = load ptr, ptr %.reload13, align 8
  %27 = load ptr, ptr %13, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 280, ptr %27)
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %29 = load i32, ptr %.reload7, align 4
  %30 = getelementptr ptr, ptr %27, i32 %29
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr { ptr, ptr }, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call i32 %34(ptr %26) #17
  %36 = alloca i32, align 4
  store i32 %35, ptr %36, align 4
  %37 = alloca i32, align 4
  store i32 1, ptr %37, align 4
  %38 = load i32, ptr %36, align 4
  %39 = load i32, ptr %37, align 4
  %40 = add i32 %38, %39
  %41 = alloca i32, align 4
  store i32 %40, ptr %41, align 4
  %42 = load i32, ptr %41, align 4
  %43 = sext i32 %42 to i64
  %44 = alloca ptr, align 8
  %45 = mul i64 %43, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %46 = call ptr @bump_malloc(i64 %45)
  store ptr %46, ptr %44, align 8
  %47 = alloca ptr, align 8
  %48 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  store ptr %49, ptr %47, align 8
  %50 = alloca i32, align 4
  store i32 0, ptr %50, align 4
  br label %51

51:                                               ; preds = %._crit_edge1, %3
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %52 = load ptr, ptr %.reload12, align 8
  %53 = load ptr, ptr %13, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 280, ptr %53)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %55 = load i32, ptr %.reload6, align 4
  %56 = getelementptr ptr, ptr %53, i32 %55
  %57 = getelementptr ptr, ptr %56, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr }, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = call i32 %60(ptr %52) #17
  store i32 %61, ptr %4, align 4
  %62 = load i32, ptr %50, align 4
  %63 = load i32, ptr %4, align 4
  %64 = icmp slt i32 %62, %63
  store i1 %64, ptr %5, align 1
  %65 = load i1, ptr %5, align 1
  store i1 %65, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %66, label %._crit_edge

._crit_edge:                                      ; preds = %51
  br label %92

66:                                               ; preds = %51
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %67 = load ptr, ptr %.reload11, align 8
  %68 = load ptr, ptr %13, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 280, ptr %68)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %70 = load i32, ptr %.reload5, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr } %74(ptr %67) #17
  store { ptr } %75, ptr %6, align 8
  %76 = load ptr, ptr %6, align 8
  %77 = load i32, ptr %50, align 4
  %78 = sext i32 %77 to i64
  %79 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %78
  %80 = getelementptr i8, ptr %76, i64 %79
  %81 = load i8, ptr %80, align 1
  store i8 %81, ptr %7, align 1
  %82 = load ptr, ptr %47, align 8
  %83 = load i32, ptr %50, align 4
  %84 = sext i32 %83 to i64
  %85 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %84
  %86 = getelementptr i8, ptr %82, i64 %85
  %87 = load i8, ptr %7, align 1
  store i8 %87, ptr %86, align 1
  store i32 1, ptr %8, align 4
  %88 = load i32, ptr %50, align 4
  %89 = load i32, ptr %8, align 4
  %90 = add i32 %88, %89
  store i32 %90, ptr %9, align 4
  %91 = load i32, ptr %9, align 4
  store i32 %91, ptr %50, align 4
  br label %92

92:                                               ; preds = %._crit_edge, %66
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %93

._crit_edge1:                                     ; preds = %92
  br label %51

93:                                               ; preds = %92
  store i8 0, ptr %10, align 1
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %94 = load ptr, ptr %.reload10, align 8
  %95 = load ptr, ptr %13, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 280, ptr %95)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %97 = load i32, ptr %.reload4, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = call i32 %102(ptr %94) #17
  store i32 %103, ptr %11, align 4
  %104 = load ptr, ptr %47, align 8
  %105 = load i32, ptr %11, align 4
  %106 = sext i32 %105 to i64
  %107 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %106
  %108 = getelementptr i8, ptr %104, i64 %107
  %109 = load i8, ptr %10, align 1
  store i8 %109, ptr %108, align 1
  %110 = load ptr, ptr %47, align 8
  %111 = insertvalue { ptr } undef, ptr %110, 0
  ret { ptr } %111
}

define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca [1 x ptr], align 8
  store ptr @StringIterator, ptr %18, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 6
  %21 = load ptr, ptr %20, align 8
  %22 = call { i64, i64 } @size_wrapper(ptr %21, ptr %18)
  %23 = extractvalue { i64, i64 } %22, 0
  %24 = call ptr @bump_malloc(i64 %23)
  %25 = alloca i32, align 4
  %26 = alloca ptr, align 8
  %27 = alloca ptr, align 8
  %28 = alloca ptr, align 8
  store ptr @StringIterator, ptr %28, align 8
  store ptr %24, ptr %27, align 8
  store i32 10, ptr %25, align 4
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %31 = load ptr, ptr %7, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %33 = load ptr, ptr %10, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %35 = load ptr, ptr %13, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %37 = load i32, ptr %16, align 4
  store i32 %37, ptr %36, align 4
  call void @set_offset(ptr %29, ptr @String)
  %38 = load ptr, ptr %30, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 1
  %42 = load ptr, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 2
  %44 = load i32, ptr %36, align 4
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %44, 3
  %46 = load ptr, ptr %28, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = load ptr, ptr %27, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 1
  %50 = load ptr, ptr %26, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 2
  %52 = load i32, ptr %25, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %52, 3
  %54 = alloca [1 x ptr], align 8
  %55 = getelementptr [1 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_String, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 1, ptr %54)
  %57 = call ptr @llvm.invariant.start.p0(i64 48, ptr %46)
  %58 = getelementptr ptr, ptr %46, i32 %52
  %59 = getelementptr ptr, ptr %58, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = alloca { ptr }, align 8
  %62 = getelementptr { ptr }, ptr %61, i32 0, i32 0
  store ptr %38, ptr %62, align 8
  %63 = call ptr @behavior_wrapper(ptr %60, { ptr, ptr, ptr, i32 } %53, ptr %61)
  call void %63({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr, ptr, ptr, i32 } %45) #15
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %28, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %68 = load ptr, ptr %27, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %70 = load ptr, ptr %26, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %72 = load i32, ptr %25, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %64, ptr @Iterator)
  %73 = load ptr, ptr %65, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %67, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %69, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %71, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  ret { ptr, ptr, ptr, i32 } %80
}

define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %7, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %22 = load ptr, ptr %10, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %24 = load ptr, ptr %13, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %26 = load i32, ptr %16, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %18, ptr @String)
  %27 = load ptr, ptr %19, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %21, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %25, align 4
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  ret { ptr, ptr, ptr, i32 } %34
}

define { i64, i64 } @_data_size_StringIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 4, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [6 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 5, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [6 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @StringIterator)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @String)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 48, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %34, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %36, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %38, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %40, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  call void %49(ptr %42, { ptr, ptr, ptr, i32 } %57) #16
  %58 = alloca i32, align 4
  store i32 0, ptr %58, align 4
  %59 = load ptr, ptr %11, align 8
  %60 = load ptr, ptr %6, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 48, ptr %60)
  %62 = load i32, ptr %17, align 4
  %63 = getelementptr ptr, ptr %60, i32 %62
  %64 = getelementptr ptr, ptr %63, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = load i32, ptr %58, align 4
  call void %67(ptr %59, i32 %68) #16
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [0 x ptr], align 8
  %9 = alloca {}, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca [0 x ptr], align 8
  %19 = alloca {}, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i8, align 1
  %25 = alloca [1 x ptr], align 8
  %26 = alloca { ptr }, align 8
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  %29 = alloca i64, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem25 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %30, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  store ptr %36, ptr %.reg2mem15, align 8
  %37 = load ptr, ptr %35, align 8
  %.reload24 = load ptr, ptr %.reg2mem15, align 8
  store ptr %37, ptr %.reload24, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  store ptr %42, ptr %.reg2mem5, align 8
  %43 = load i32, ptr %41, align 4
  %.reload14 = load ptr, ptr %.reg2mem5, align 8
  store i32 %43, ptr %.reload14, align 4
  call void @set_offset(ptr %31, ptr @StringIterator)
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  %44 = load ptr, ptr %.reload23, align 8
  %45 = load ptr, ptr %31, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 48, ptr %45)
  %.reload13 = load ptr, ptr %.reg2mem5, align 8
  %47 = load i32, ptr %.reload13, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %44) #17
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %55 = load ptr, ptr %.reload22, align 8
  %56 = load ptr, ptr %31, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 48, ptr %56)
  %.reload12 = load ptr, ptr %.reg2mem5, align 8
  %58 = load i32, ptr %.reload12, align 4
  %59 = getelementptr ptr, ptr %56, i32 %58
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call { ptr, ptr, ptr, i32 } %62(ptr %55) #17
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %63, ptr %64, align 8
  call void @assume_offset(ptr %64, ptr @String)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %69, 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 2
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %75, 3
  %77 = alloca [0 x ptr], align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 0, ptr %77)
  %79 = call ptr @llvm.invariant.start.p0(i64 280, ptr %66)
  %80 = getelementptr ptr, ptr %66, i32 %75
  %81 = getelementptr ptr, ptr %80, i32 5
  %82 = load ptr, ptr %81, align 8
  %83 = alloca {}, align 8
  %84 = call ptr @behavior_wrapper(ptr %82, { ptr, ptr, ptr, i32 } %76, ptr %83)
  %85 = call i32 %84({ ptr, ptr, ptr, i32 } %76, { ptr, ptr, ptr, i32 } %76, ptr %77) #15
  %86 = alloca i32, align 4
  store i32 %85, ptr %86, align 4
  %87 = load i32, ptr %54, align 4
  %88 = load i32, ptr %86, align 4
  %89 = icmp slt i32 %87, %88
  %90 = alloca i1, align 1
  store i1 %89, ptr %90, align 1
  %91 = load i1, ptr %90, align 1
  br i1 %91, label %92, label %243

92:                                               ; preds = %3
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %93 = load ptr, ptr %.reload21, align 8
  %94 = load ptr, ptr %31, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 48, ptr %94)
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  %96 = load i32, ptr %.reload11, align 4
  %97 = getelementptr ptr, ptr %94, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = call i32 %101(ptr %93) #17
  store i32 %102, ptr %4, align 4
  store i32 1, ptr %5, align 4
  %103 = load i32, ptr %4, align 4
  %104 = load i32, ptr %5, align 4
  %105 = add i32 %103, %104
  store i32 %105, ptr %6, align 4
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  %106 = load ptr, ptr %.reload20, align 8
  %107 = load ptr, ptr %31, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 48, ptr %107)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %109 = load i32, ptr %.reload10, align 4
  %110 = getelementptr ptr, ptr %107, i32 %109
  %111 = getelementptr ptr, ptr %110, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = load i32, ptr %6, align 4
  call void %114(ptr %106, i32 %115) #16
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %116 = load ptr, ptr %.reload19, align 8
  %117 = load ptr, ptr %31, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 48, ptr %117)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %119 = load i32, ptr %.reload9, align 4
  %120 = getelementptr ptr, ptr %117, i32 %119
  %121 = load ptr, ptr %120, align 8
  %122 = getelementptr { ptr, ptr }, ptr %121, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = call { ptr, ptr, ptr, i32 } %123(ptr %116) #17
  store { ptr, ptr, ptr, i32 } %124, ptr %7, align 8
  call void @assume_offset(ptr %7, ptr @String)
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %126, 0
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 2
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %135 = load i32, ptr %134, align 4
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %135, 3
  %137 = call ptr @llvm.invariant.start.p0(i64 0, ptr %8)
  %138 = call ptr @llvm.invariant.start.p0(i64 280, ptr %126)
  %139 = getelementptr ptr, ptr %126, i32 %135
  %140 = getelementptr ptr, ptr %139, i32 7
  %141 = load ptr, ptr %140, align 8
  %142 = call ptr @behavior_wrapper(ptr %141, { ptr, ptr, ptr, i32 } %136, ptr %9)
  %143 = call { ptr } %142({ ptr, ptr, ptr, i32 } %136, { ptr, ptr, ptr, i32 } %136, ptr %8) #15
  store { ptr } %143, ptr %10, align 8
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %144 = load ptr, ptr %.reload18, align 8
  %145 = load ptr, ptr %31, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 48, ptr %145)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %147 = load i32, ptr %.reload8, align 4
  %148 = getelementptr ptr, ptr %145, i32 %147
  %149 = getelementptr ptr, ptr %148, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = call i32 %152(ptr %144) #17
  store i32 %153, ptr %11, align 4
  store i32 1, ptr %12, align 4
  %154 = load i32, ptr %11, align 4
  %155 = load i32, ptr %12, align 4
  %156 = sub i32 %154, %155
  store i32 %156, ptr %13, align 4
  %157 = load ptr, ptr %10, align 8
  %158 = load i32, ptr %13, align 4
  %159 = sext i32 %158 to i64
  %160 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %159
  %161 = getelementptr i8, ptr %157, i64 %160
  %162 = load i8, ptr %161, align 1
  store i8 %162, ptr %14, align 1
  store ptr @Character, ptr %15, align 8
  %163 = load ptr, ptr %15, align 8
  %164 = getelementptr ptr, ptr %163, i32 6
  %165 = load ptr, ptr %164, align 8
  %166 = call { i64, i64 } @size_wrapper(ptr %165, ptr %15)
  %167 = extractvalue { i64, i64 } %166, 0
  %168 = call ptr @bump_malloc(i64 %167)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr @Character, ptr %16, align 8
  store ptr %168, ptr %169, align 8
  store i32 10, ptr %170, align 4
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %171 = load ptr, ptr %.reload17, align 8
  %172 = load ptr, ptr %31, align 8
  %173 = call ptr @llvm.invariant.start.p0(i64 48, ptr %172)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %174 = load i32, ptr %.reload7, align 4
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = load ptr, ptr %175, align 8
  %177 = getelementptr { ptr, ptr }, ptr %176, i32 0, i32 0
  %178 = load ptr, ptr %177, align 8
  %179 = call { ptr, ptr, ptr, i32 } %178(ptr %171) #17
  store { ptr, ptr, ptr, i32 } %179, ptr %17, align 8
  call void @assume_offset(ptr %17, ptr @String)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %184, 1
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 2
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %190 = load i32, ptr %189, align 4
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, i32 %190, 3
  %192 = call ptr @llvm.invariant.start.p0(i64 0, ptr %18)
  %193 = call ptr @llvm.invariant.start.p0(i64 280, ptr %181)
  %194 = getelementptr ptr, ptr %181, i32 %190
  %195 = getelementptr ptr, ptr %194, i32 7
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr @behavior_wrapper(ptr %196, { ptr, ptr, ptr, i32 } %191, ptr %19)
  %198 = call { ptr } %197({ ptr, ptr, ptr, i32 } %191, { ptr, ptr, ptr, i32 } %191, ptr %18) #15
  store { ptr } %198, ptr %20, align 8
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %199 = load ptr, ptr %.reload16, align 8
  %200 = load ptr, ptr %31, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 48, ptr %200)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %202 = load i32, ptr %.reload6, align 4
  %203 = getelementptr ptr, ptr %200, i32 %202
  %204 = getelementptr ptr, ptr %203, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = getelementptr { ptr, ptr }, ptr %205, i32 0, i32 0
  %207 = load ptr, ptr %206, align 8
  %208 = call i32 %207(ptr %199) #17
  store i32 %208, ptr %21, align 4
  store i32 1, ptr %22, align 4
  %209 = load i32, ptr %21, align 4
  %210 = load i32, ptr %22, align 4
  %211 = sub i32 %209, %210
  store i32 %211, ptr %23, align 4
  %212 = load ptr, ptr %20, align 8
  %213 = load i32, ptr %23, align 4
  %214 = sext i32 %213 to i64
  %215 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %214
  %216 = getelementptr i8, ptr %212, i64 %215
  %217 = load i8, ptr %216, align 1
  store i8 %217, ptr %24, align 1
  %218 = load i8, ptr %24, align 1
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %220 = load ptr, ptr %219, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %220, 0
  %222 = load ptr, ptr %169, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } %221, ptr %222, 1
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %225 = load ptr, ptr %224, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %225, 2
  %227 = load i32, ptr %170, align 4
  %228 = insertvalue { ptr, ptr, ptr, i32 } %226, i32 %227, 3
  %229 = getelementptr [1 x ptr], ptr %25, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %229, align 8
  %230 = call ptr @llvm.invariant.start.p0(i64 1, ptr %25)
  %231 = call ptr @llvm.invariant.start.p0(i64 40, ptr %220)
  %232 = getelementptr ptr, ptr %220, i32 %227
  %233 = getelementptr ptr, ptr %232, i32 2
  %234 = load ptr, ptr %233, align 8
  %235 = getelementptr { ptr }, ptr %26, i32 0, i32 0
  store ptr @i8_typ, ptr %235, align 8
  %236 = call ptr @behavior_wrapper(ptr %234, { ptr, ptr, ptr, i32 } %228, ptr %26)
  call void %236({ ptr, ptr, ptr, i32 } %228, { ptr, ptr, ptr, i32 } %228, ptr %25, i8 %218) #15
  %237 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %238 = load ptr, ptr %237, align 8
  %239 = insertvalue { ptr, i160 } undef, ptr %238, 0
  %240 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %241 = load i160, ptr %240, align 4
  %242 = insertvalue { ptr, i160 } %239, i160 %241, 1
  store { ptr, i160 } %242, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem25, align 8
  br label %249

243:                                              ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %29, align 4
  %244 = load i64, ptr %29, align 4
  store i64 %244, ptr %28, align 4
  %245 = load ptr, ptr %28, align 8
  %246 = insertvalue { ptr, i160 } undef, ptr %245, 0
  %247 = load i160, ptr %27, align 4
  %248 = insertvalue { ptr, i160 } %246, i160 %247, 1
  store { ptr, i160 } %248, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem25, align 8
  br label %249

249:                                              ; preds = %243, %92
  %.reload26 = load { ptr, i160 }, ptr %.reg2mem25, align 8
  store { ptr, i160 } %.reload26, ptr %.reg2mem, align 8
  br label %250

250:                                              ; preds = %249
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { i64, i64 } @_data_size_Character(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 3, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [5 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Character_B_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i8_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 4, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [5 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Character)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 40, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i8 %25(ptr %18) #17
  %27 = alloca i8, align 1
  store i8 %26, ptr %27, align 1
  %28 = load i8, ptr %27, align 1
  ret i8 %28
}

define void @Character_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Character)
  %19 = alloca i8, align 1
  store i8 %3, ptr %19, align 1
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 40, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = load i8, ptr %19, align 1
  call void %27(ptr %20, i8 %28) #16
  ret void
}

define i8 @Character_getter_byte(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i8, ptr %2, align 1
  ret i8 %3
}

define void @Character_setter_byte(ptr %0, i8 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i8, align 1
  store i8 %1, ptr %4, align 1
  %5 = load i8, ptr %4, align 1
  store i8 %5, ptr %3, align 1
  ret void
}

define i32 @StringIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @StringIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @StringIterator_setter_str(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define i32 @String_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @String_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define i32 @String_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @String_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define { ptr } @String_getter_bytes(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @String_setter_bytes(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define { i64, i64 } @_data_size_Exception(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 8, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [13 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Exception_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 1
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 2
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 0
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 1
  %16 = load i64, ptr %12, align 4
  %17 = load i64, ptr %13, align 4
  %18 = load ptr, ptr %14, align 8
  %19 = load ptr, ptr %15, align 8
  %20 = load i64, ptr @String, align 4
  %21 = call i1 @subtype_test_wrapper(ptr %18, i64 %17, i64 %16, i64 %20, i64 ptrtoint (ptr @String to i64), ptr %19)
  store i1 %21, ptr %3, align 1
  store i32 10, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [13 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 11, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @String)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 104, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %34, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %36, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %38, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %40, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %42, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca i32, align 4
  store i32 0, ptr %59, align 4
  %60 = load ptr, ptr %11, align 8
  %61 = load ptr, ptr %6, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 104, ptr %61)
  %63 = load i32, ptr %17, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = load i32, ptr %59, align 4
  call void %67(ptr %60, i32 %68) #16
  %69 = alloca i32, align 4
  store i32 1, ptr %69, align 4
  %70 = load i32, ptr %69, align 4
  %71 = sext i32 %70 to i64
  %72 = alloca ptr, align 8
  %73 = mul i64 %71, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %74 = call ptr @bump_malloc(i64 %73)
  store ptr %74, ptr %72, align 8
  %75 = alloca ptr, align 8
  %76 = getelementptr { ptr }, ptr %72, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  store ptr %77, ptr %75, align 8
  %78 = alloca i32, align 4
  store i32 0, ptr %78, align 4
  %79 = alloca i32, align 4
  store i32 0, ptr %79, align 4
  %80 = alloca i32, align 4
  store i32 1, ptr %80, align 4
  %81 = alloca [1 x ptr], align 8
  store ptr @String, ptr %81, align 8
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr ptr, ptr %82, i32 6
  %84 = load ptr, ptr %83, align 8
  %85 = call { i64, i64 } @size_wrapper(ptr %84, ptr %81)
  %86 = extractvalue { i64, i64 } %85, 0
  %87 = call ptr @bump_malloc(i64 %86)
  %88 = alloca i32, align 4
  %89 = alloca ptr, align 8
  %90 = alloca ptr, align 8
  %91 = alloca ptr, align 8
  store ptr @String, ptr %91, align 8
  store ptr %87, ptr %90, align 8
  store i32 10, ptr %88, align 4
  %92 = alloca i32, align 4
  store i32 0, ptr %92, align 4
  %93 = alloca i32, align 4
  store i32 1, ptr %93, align 4
  %94 = load ptr, ptr %75, align 8
  %95 = insertvalue { ptr } undef, ptr %94, 0
  %96 = load i32, ptr %92, align 4
  %97 = load i32, ptr %93, align 4
  %98 = load ptr, ptr %91, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = load ptr, ptr %90, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 1
  %102 = load ptr, ptr %89, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %102, 2
  %104 = load i32, ptr %88, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %104, 3
  %106 = alloca [3 x ptr], align 8
  %107 = getelementptr [3 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %107, align 8
  %108 = getelementptr [3 x ptr], ptr %106, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %108, align 8
  %109 = getelementptr [3 x ptr], ptr %106, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 9, ptr %106)
  %111 = call ptr @llvm.invariant.start.p0(i64 280, ptr %98)
  %112 = getelementptr ptr, ptr %98, i32 %104
  %113 = getelementptr ptr, ptr %112, i32 4
  %114 = load ptr, ptr %113, align 8
  %115 = alloca { ptr, ptr, ptr }, align 8
  %116 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 0
  store ptr @buffer_typ, ptr %116, align 8
  %117 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 1
  store ptr @i32_typ, ptr %117, align 8
  %118 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 2
  store ptr @i32_typ, ptr %118, align 8
  %119 = call ptr @behavior_wrapper(ptr %114, { ptr, ptr, ptr, i32 } %105, ptr %115)
  call void %119({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr %106, { ptr } %95, i32 %96, i32 %97) #15
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %91, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %124 = load ptr, ptr %90, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %126 = load ptr, ptr %89, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %128 = load i32, ptr %88, align 4
  store i32 %128, ptr %127, align 4
  call void @set_offset(ptr %120, ptr @String)
  %129 = load ptr, ptr %11, align 8
  %130 = load ptr, ptr %6, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 104, ptr %130)
  %132 = load i32, ptr %17, align 4
  %133 = getelementptr ptr, ptr %130, i32 %132
  %134 = getelementptr ptr, ptr %133, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr, ptr }, ptr %135, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = load ptr, ptr %121, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %140 = load ptr, ptr %123, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %140, 1
  %142 = load ptr, ptr %125, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %142, 2
  %144 = load i32, ptr %127, align 4
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, i32 %144, 3
  call void %137(ptr %129, { ptr, ptr, ptr, i32 } %145) #16
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %18 = alloca i32, align 4
  store i32 0, ptr %18, align 4
  %19 = load ptr, ptr %10, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 104, ptr %20)
  %22 = load i32, ptr %16, align 4
  %23 = getelementptr ptr, ptr %20, i32 %22
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = load i32, ptr %18, align 4
  call void %26(ptr %19, i32 %27) #16
  %28 = alloca i32, align 4
  store i32 7, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  %30 = sext i32 %29 to i64
  %31 = alloca ptr, align 8
  %32 = mul i64 %30, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %33 = call ptr @bump_malloc(i64 %32)
  store ptr %33, ptr %31, align 8
  %34 = alloca ptr, align 8
  %35 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  store ptr %36, ptr %34, align 8
  %37 = alloca i32, align 4
  store i32 0, ptr %37, align 4
  %38 = load ptr, ptr %34, align 8
  %39 = load i32, ptr %37, align 4
  %40 = sext i32 %39 to i64
  %41 = mul i64 ptrtoint (ptr getelementptr ([6 x i8], ptr null, i32 1) to i64), %40
  %42 = getelementptr i8, ptr %38, i64 %41
  %43 = load <6 x i8>, ptr @yucev_None, align 8
  store <6 x i8> %43, ptr %42, align 8
  %44 = alloca i32, align 4
  store i32 6, ptr %44, align 4
  %45 = alloca i32, align 4
  store i32 7, ptr %45, align 4
  %46 = alloca [1 x ptr], align 8
  store ptr @String, ptr %46, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr ptr, ptr %47, i32 6
  %49 = load ptr, ptr %48, align 8
  %50 = call { i64, i64 } @size_wrapper(ptr %49, ptr %46)
  %51 = extractvalue { i64, i64 } %50, 0
  %52 = call ptr @bump_malloc(i64 %51)
  %53 = alloca i32, align 4
  %54 = alloca ptr, align 8
  %55 = alloca ptr, align 8
  %56 = alloca ptr, align 8
  store ptr @String, ptr %56, align 8
  store ptr %52, ptr %55, align 8
  store i32 10, ptr %53, align 4
  %57 = alloca i32, align 4
  store i32 6, ptr %57, align 4
  %58 = alloca i32, align 4
  store i32 7, ptr %58, align 4
  %59 = load ptr, ptr %34, align 8
  %60 = insertvalue { ptr } undef, ptr %59, 0
  %61 = load i32, ptr %57, align 4
  %62 = load i32, ptr %58, align 4
  %63 = load ptr, ptr %56, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %63, 0
  %65 = load ptr, ptr %55, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %65, 1
  %67 = load ptr, ptr %54, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %67, 2
  %69 = load i32, ptr %53, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %69, 3
  %71 = alloca [3 x ptr], align 8
  %72 = getelementptr [3 x ptr], ptr %71, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %72, align 8
  %73 = getelementptr [3 x ptr], ptr %71, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %73, align 8
  %74 = getelementptr [3 x ptr], ptr %71, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 9, ptr %71)
  %76 = call ptr @llvm.invariant.start.p0(i64 280, ptr %63)
  %77 = getelementptr ptr, ptr %63, i32 %69
  %78 = getelementptr ptr, ptr %77, i32 4
  %79 = load ptr, ptr %78, align 8
  %80 = alloca { ptr, ptr, ptr }, align 8
  %81 = getelementptr { ptr, ptr, ptr }, ptr %80, i32 0, i32 0
  store ptr @buffer_typ, ptr %81, align 8
  %82 = getelementptr { ptr, ptr, ptr }, ptr %80, i32 0, i32 1
  store ptr @i32_typ, ptr %82, align 8
  %83 = getelementptr { ptr, ptr, ptr }, ptr %80, i32 0, i32 2
  store ptr @i32_typ, ptr %83, align 8
  %84 = call ptr @behavior_wrapper(ptr %79, { ptr, ptr, ptr, i32 } %70, ptr %80)
  call void %84({ ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %70, ptr %71, { ptr } %60, i32 %61, i32 %62) #15
  %85 = alloca { ptr, ptr, ptr, i32 }, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 0
  %87 = load ptr, ptr %56, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 1
  %89 = load ptr, ptr %55, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 2
  %91 = load ptr, ptr %54, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 3
  %93 = load i32, ptr %53, align 4
  store i32 %93, ptr %92, align 4
  call void @set_offset(ptr %85, ptr @String)
  %94 = load ptr, ptr %10, align 8
  %95 = load ptr, ptr %5, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 104, ptr %95)
  %97 = load i32, ptr %16, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 2
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %86, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = load ptr, ptr %88, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %105, 1
  %107 = load ptr, ptr %90, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %107, 2
  %109 = load i32, ptr %92, align 4
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, i32 %109, 3
  call void %102(ptr %94, { ptr, ptr, ptr, i32 } %110) #16
  %111 = alloca i32, align 4
  store i32 1, ptr %111, align 4
  %112 = load i32, ptr %111, align 4
  %113 = sext i32 %112 to i64
  %114 = alloca ptr, align 8
  %115 = mul i64 %113, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %116 = call ptr @bump_malloc(i64 %115)
  store ptr %116, ptr %114, align 8
  %117 = alloca ptr, align 8
  %118 = getelementptr { ptr }, ptr %114, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  store ptr %119, ptr %117, align 8
  %120 = alloca i32, align 4
  store i32 0, ptr %120, align 4
  %121 = alloca i32, align 4
  store i32 0, ptr %121, align 4
  %122 = alloca i32, align 4
  store i32 1, ptr %122, align 4
  %123 = alloca [1 x ptr], align 8
  store ptr @String, ptr %123, align 8
  %124 = load ptr, ptr %123, align 8
  %125 = getelementptr ptr, ptr %124, i32 6
  %126 = load ptr, ptr %125, align 8
  %127 = call { i64, i64 } @size_wrapper(ptr %126, ptr %123)
  %128 = extractvalue { i64, i64 } %127, 0
  %129 = call ptr @bump_malloc(i64 %128)
  %130 = alloca i32, align 4
  %131 = alloca ptr, align 8
  %132 = alloca ptr, align 8
  %133 = alloca ptr, align 8
  store ptr @String, ptr %133, align 8
  store ptr %129, ptr %132, align 8
  store i32 10, ptr %130, align 4
  %134 = alloca i32, align 4
  store i32 0, ptr %134, align 4
  %135 = alloca i32, align 4
  store i32 1, ptr %135, align 4
  %136 = load ptr, ptr %117, align 8
  %137 = insertvalue { ptr } undef, ptr %136, 0
  %138 = load i32, ptr %134, align 4
  %139 = load i32, ptr %135, align 4
  %140 = load ptr, ptr %133, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %140, 0
  %142 = load ptr, ptr %132, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %142, 1
  %144 = load ptr, ptr %131, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %144, 2
  %146 = load i32, ptr %130, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 %146, 3
  %148 = alloca [3 x ptr], align 8
  %149 = getelementptr [3 x ptr], ptr %148, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %149, align 8
  %150 = getelementptr [3 x ptr], ptr %148, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %150, align 8
  %151 = getelementptr [3 x ptr], ptr %148, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 9, ptr %148)
  %153 = call ptr @llvm.invariant.start.p0(i64 280, ptr %140)
  %154 = getelementptr ptr, ptr %140, i32 %146
  %155 = getelementptr ptr, ptr %154, i32 4
  %156 = load ptr, ptr %155, align 8
  %157 = alloca { ptr, ptr, ptr }, align 8
  %158 = getelementptr { ptr, ptr, ptr }, ptr %157, i32 0, i32 0
  store ptr @buffer_typ, ptr %158, align 8
  %159 = getelementptr { ptr, ptr, ptr }, ptr %157, i32 0, i32 1
  store ptr @i32_typ, ptr %159, align 8
  %160 = getelementptr { ptr, ptr, ptr }, ptr %157, i32 0, i32 2
  store ptr @i32_typ, ptr %160, align 8
  %161 = call ptr @behavior_wrapper(ptr %156, { ptr, ptr, ptr, i32 } %147, ptr %157)
  call void %161({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %148, { ptr } %137, i32 %138, i32 %139) #15
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %164 = load ptr, ptr %133, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %166 = load ptr, ptr %132, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %168 = load ptr, ptr %131, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %170 = load i32, ptr %130, align 4
  store i32 %170, ptr %169, align 4
  call void @set_offset(ptr %162, ptr @String)
  %171 = load ptr, ptr %10, align 8
  %172 = load ptr, ptr %5, align 8
  %173 = call ptr @llvm.invariant.start.p0(i64 104, ptr %172)
  %174 = load i32, ptr %16, align 4
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = getelementptr ptr, ptr %175, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = getelementptr { ptr, ptr }, ptr %177, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %163, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %180, 0
  %182 = load ptr, ptr %165, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %182, 1
  %184 = load ptr, ptr %167, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %183, ptr %184, 2
  %186 = load i32, ptr %169, align 4
  %187 = insertvalue { ptr, ptr, ptr, i32 } %185, i32 %186, 3
  call void %179(ptr %171, { ptr, ptr, ptr, i32 } %187) #16
  ret void
}

define void @Exception_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Exception)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %20, align 4
  call void %28(ptr %21, i32 %29) #16
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %30, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %41, align 4
  store i32 %43, ptr %42, align 4
  call void @set_offset(ptr %31, ptr @String)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %33, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %48 = load ptr, ptr %36, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %50 = load ptr, ptr %39, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %52 = load i32, ptr %42, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %44, ptr @String)
  %53 = load ptr, ptr %12, align 8
  %54 = load ptr, ptr %7, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 104, ptr %54)
  %56 = load i32, ptr %18, align 4
  %57 = getelementptr ptr, ptr %54, i32 %56
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr }, ptr %59, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %45, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %47, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %49, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %51, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %53, { ptr, ptr, ptr, i32 } %69) #16
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %18 = alloca i32, align 4
  store i32 10, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([9 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <9 x i8>, ptr @arnml_, align 16
  store <9 x i8> %33, ptr %32, align 16
  %34 = alloca i32, align 4
  store i32 9, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 10, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca i32, align 4
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  store ptr @String, ptr %46, align 8
  store ptr %42, ptr %45, align 8
  store i32 10, ptr %43, align 4
  %47 = alloca i32, align 4
  store i32 9, ptr %47, align 4
  %48 = alloca i32, align 4
  store i32 10, ptr %48, align 4
  %49 = load ptr, ptr %24, align 8
  %50 = insertvalue { ptr } undef, ptr %49, 0
  %51 = load i32, ptr %47, align 4
  %52 = load i32, ptr %48, align 4
  %53 = load ptr, ptr %46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %45, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %44, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %43, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca [3 x ptr], align 8
  %62 = getelementptr [3 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %61, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %61, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr %61)
  %66 = call ptr @llvm.invariant.start.p0(i64 280, ptr %53)
  %67 = getelementptr ptr, ptr %53, i32 %59
  %68 = getelementptr ptr, ptr %67, i32 4
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr, ptr, ptr }, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 2
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %60, ptr %70)
  call void %74({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr } %50, i32 %51, i32 %52) #15
  %75 = load ptr, ptr %46, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = load ptr, ptr %45, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 1
  %79 = load ptr, ptr %44, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %79, 2
  %81 = load i32, ptr %43, align 4
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %81, 3
  %83 = alloca [0 x ptr], align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 0, ptr %83)
  %85 = call ptr @llvm.invariant.start.p0(i64 280, ptr %75)
  %86 = getelementptr ptr, ptr %75, i32 %81
  %87 = getelementptr ptr, ptr %86, i32 14
  %88 = load ptr, ptr %87, align 8
  %89 = alloca {}, align 8
  %90 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %82, ptr %89)
  %91 = call { ptr } %90({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr %83) #15
  %92 = alloca ptr, align 8
  store { ptr } %91, ptr %92, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %93)
  %95 = alloca i32, align 4
  store i32 27, ptr %95, align 4
  %96 = load i32, ptr %95, align 4
  %97 = sext i32 %96 to i64
  %98 = alloca ptr, align 8
  %99 = mul i64 %97, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %100 = call ptr @bump_malloc(i64 %99)
  store ptr %100, ptr %98, align 8
  %101 = alloca ptr, align 8
  %102 = getelementptr { ptr }, ptr %98, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  store ptr %103, ptr %101, align 8
  %104 = alloca i32, align 4
  store i32 0, ptr %104, align 4
  %105 = load ptr, ptr %101, align 8
  %106 = load i32, ptr %104, align 4
  %107 = sext i32 %106 to i64
  %108 = mul i64 ptrtoint (ptr getelementptr ([26 x i8], ptr null, i32 1) to i64), %107
  %109 = getelementptr i8, ptr %105, i64 %108
  %110 = load <26 x i8>, ptr @ikuvp_Exception_thrown_from_file, align 32
  store <26 x i8> %110, ptr %109, align 32
  %111 = alloca i32, align 4
  store i32 26, ptr %111, align 4
  %112 = alloca i32, align 4
  store i32 27, ptr %112, align 4
  %113 = alloca [1 x ptr], align 8
  store ptr @String, ptr %113, align 8
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr ptr, ptr %114, i32 6
  %116 = load ptr, ptr %115, align 8
  %117 = call { i64, i64 } @size_wrapper(ptr %116, ptr %113)
  %118 = extractvalue { i64, i64 } %117, 0
  %119 = call ptr @bump_malloc(i64 %118)
  %120 = alloca i32, align 4
  %121 = alloca ptr, align 8
  %122 = alloca ptr, align 8
  %123 = alloca ptr, align 8
  store ptr @String, ptr %123, align 8
  store ptr %119, ptr %122, align 8
  store i32 10, ptr %120, align 4
  %124 = alloca i32, align 4
  store i32 26, ptr %124, align 4
  %125 = alloca i32, align 4
  store i32 27, ptr %125, align 4
  %126 = load ptr, ptr %101, align 8
  %127 = insertvalue { ptr } undef, ptr %126, 0
  %128 = load i32, ptr %124, align 4
  %129 = load i32, ptr %125, align 4
  %130 = load ptr, ptr %123, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %132 = load ptr, ptr %122, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %132, 1
  %134 = load ptr, ptr %121, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %134, 2
  %136 = load i32, ptr %120, align 4
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %136, 3
  %138 = alloca [3 x ptr], align 8
  %139 = getelementptr [3 x ptr], ptr %138, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %138, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %140, align 8
  %141 = getelementptr [3 x ptr], ptr %138, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %141, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 9, ptr %138)
  %143 = call ptr @llvm.invariant.start.p0(i64 280, ptr %130)
  %144 = getelementptr ptr, ptr %130, i32 %136
  %145 = getelementptr ptr, ptr %144, i32 4
  %146 = load ptr, ptr %145, align 8
  %147 = alloca { ptr, ptr, ptr }, align 8
  %148 = getelementptr { ptr, ptr, ptr }, ptr %147, i32 0, i32 0
  store ptr @buffer_typ, ptr %148, align 8
  %149 = getelementptr { ptr, ptr, ptr }, ptr %147, i32 0, i32 1
  store ptr @i32_typ, ptr %149, align 8
  %150 = getelementptr { ptr, ptr, ptr }, ptr %147, i32 0, i32 2
  store ptr @i32_typ, ptr %150, align 8
  %151 = call ptr @behavior_wrapper(ptr %146, { ptr, ptr, ptr, i32 } %137, ptr %147)
  call void %151({ ptr, ptr, ptr, i32 } %137, { ptr, ptr, ptr, i32 } %137, ptr %138, { ptr } %127, i32 %128, i32 %129) #15
  %152 = load ptr, ptr %123, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %152, 0
  %154 = load ptr, ptr %122, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 1
  %156 = load ptr, ptr %121, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %156, 2
  %158 = load i32, ptr %120, align 4
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, i32 %158, 3
  %160 = alloca [0 x ptr], align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 0, ptr %160)
  %162 = call ptr @llvm.invariant.start.p0(i64 280, ptr %152)
  %163 = getelementptr ptr, ptr %152, i32 %158
  %164 = getelementptr ptr, ptr %163, i32 14
  %165 = load ptr, ptr %164, align 8
  %166 = alloca {}, align 8
  %167 = call ptr @behavior_wrapper(ptr %165, { ptr, ptr, ptr, i32 } %159, ptr %166)
  %168 = call { ptr } %167({ ptr, ptr, ptr, i32 } %159, { ptr, ptr, ptr, i32 } %159, ptr %160) #15
  %169 = alloca ptr, align 8
  store { ptr } %168, ptr %169, align 8
  %170 = load ptr, ptr %169, align 8
  %171 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %170)
  %172 = load ptr, ptr %10, align 8
  %173 = load ptr, ptr %5, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 104, ptr %173)
  %175 = load i32, ptr %16, align 4
  %176 = getelementptr ptr, ptr %173, i32 %175
  %177 = getelementptr ptr, ptr %176, i32 1
  %178 = load ptr, ptr %177, align 8
  %179 = getelementptr { ptr, ptr }, ptr %178, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = call { ptr, ptr, ptr, i32 } %180(ptr %172) #17
  %182 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %181, ptr %182, align 8
  call void @assume_offset(ptr %182, ptr @String)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %184, 0
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 1
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 1
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 2
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %190, 2
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 3
  %193 = load i32, ptr %192, align 4
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, i32 %193, 3
  %195 = alloca [0 x ptr], align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 0, ptr %195)
  %197 = call ptr @llvm.invariant.start.p0(i64 280, ptr %184)
  %198 = getelementptr ptr, ptr %184, i32 %193
  %199 = getelementptr ptr, ptr %198, i32 14
  %200 = load ptr, ptr %199, align 8
  %201 = alloca {}, align 8
  %202 = call ptr @behavior_wrapper(ptr %200, { ptr, ptr, ptr, i32 } %194, ptr %201)
  %203 = call { ptr } %202({ ptr, ptr, ptr, i32 } %194, { ptr, ptr, ptr, i32 } %194, ptr %195) #15
  %204 = alloca ptr, align 8
  store { ptr } %203, ptr %204, align 8
  %205 = load ptr, ptr %204, align 8
  %206 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %205)
  %207 = alloca i32, align 4
  store i32 8, ptr %207, align 4
  %208 = load i32, ptr %207, align 4
  %209 = sext i32 %208 to i64
  %210 = alloca ptr, align 8
  %211 = mul i64 %209, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %212 = call ptr @bump_malloc(i64 %211)
  store ptr %212, ptr %210, align 8
  %213 = alloca ptr, align 8
  %214 = getelementptr { ptr }, ptr %210, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  store ptr %215, ptr %213, align 8
  %216 = alloca i32, align 4
  store i32 0, ptr %216, align 4
  %217 = load ptr, ptr %213, align 8
  %218 = load i32, ptr %216, align 4
  %219 = sext i32 %218 to i64
  %220 = mul i64 ptrtoint (ptr getelementptr ([7 x i8], ptr null, i32 1) to i64), %219
  %221 = getelementptr i8, ptr %217, i64 %220
  %222 = load <7 x i8>, ptr @tvrrm_At_line, align 8
  store <7 x i8> %222, ptr %221, align 8
  %223 = alloca i32, align 4
  store i32 7, ptr %223, align 4
  %224 = alloca i32, align 4
  store i32 8, ptr %224, align 4
  %225 = alloca [1 x ptr], align 8
  store ptr @String, ptr %225, align 8
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr ptr, ptr %226, i32 6
  %228 = load ptr, ptr %227, align 8
  %229 = call { i64, i64 } @size_wrapper(ptr %228, ptr %225)
  %230 = extractvalue { i64, i64 } %229, 0
  %231 = call ptr @bump_malloc(i64 %230)
  %232 = alloca i32, align 4
  %233 = alloca ptr, align 8
  %234 = alloca ptr, align 8
  %235 = alloca ptr, align 8
  store ptr @String, ptr %235, align 8
  store ptr %231, ptr %234, align 8
  store i32 10, ptr %232, align 4
  %236 = alloca i32, align 4
  store i32 7, ptr %236, align 4
  %237 = alloca i32, align 4
  store i32 8, ptr %237, align 4
  %238 = load ptr, ptr %213, align 8
  %239 = insertvalue { ptr } undef, ptr %238, 0
  %240 = load i32, ptr %236, align 4
  %241 = load i32, ptr %237, align 4
  %242 = load ptr, ptr %235, align 8
  %243 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %242, 0
  %244 = load ptr, ptr %234, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } %243, ptr %244, 1
  %246 = load ptr, ptr %233, align 8
  %247 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %246, 2
  %248 = load i32, ptr %232, align 4
  %249 = insertvalue { ptr, ptr, ptr, i32 } %247, i32 %248, 3
  %250 = alloca [3 x ptr], align 8
  %251 = getelementptr [3 x ptr], ptr %250, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %251, align 8
  %252 = getelementptr [3 x ptr], ptr %250, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %252, align 8
  %253 = getelementptr [3 x ptr], ptr %250, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %253, align 8
  %254 = call ptr @llvm.invariant.start.p0(i64 9, ptr %250)
  %255 = call ptr @llvm.invariant.start.p0(i64 280, ptr %242)
  %256 = getelementptr ptr, ptr %242, i32 %248
  %257 = getelementptr ptr, ptr %256, i32 4
  %258 = load ptr, ptr %257, align 8
  %259 = alloca { ptr, ptr, ptr }, align 8
  %260 = getelementptr { ptr, ptr, ptr }, ptr %259, i32 0, i32 0
  store ptr @buffer_typ, ptr %260, align 8
  %261 = getelementptr { ptr, ptr, ptr }, ptr %259, i32 0, i32 1
  store ptr @i32_typ, ptr %261, align 8
  %262 = getelementptr { ptr, ptr, ptr }, ptr %259, i32 0, i32 2
  store ptr @i32_typ, ptr %262, align 8
  %263 = call ptr @behavior_wrapper(ptr %258, { ptr, ptr, ptr, i32 } %249, ptr %259)
  call void %263({ ptr, ptr, ptr, i32 } %249, { ptr, ptr, ptr, i32 } %249, ptr %250, { ptr } %239, i32 %240, i32 %241) #15
  %264 = load ptr, ptr %235, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %264, 0
  %266 = load ptr, ptr %234, align 8
  %267 = insertvalue { ptr, ptr, ptr, i32 } %265, ptr %266, 1
  %268 = load ptr, ptr %233, align 8
  %269 = insertvalue { ptr, ptr, ptr, i32 } %267, ptr %268, 2
  %270 = load i32, ptr %232, align 4
  %271 = insertvalue { ptr, ptr, ptr, i32 } %269, i32 %270, 3
  %272 = alloca [0 x ptr], align 8
  %273 = call ptr @llvm.invariant.start.p0(i64 0, ptr %272)
  %274 = call ptr @llvm.invariant.start.p0(i64 280, ptr %264)
  %275 = getelementptr ptr, ptr %264, i32 %270
  %276 = getelementptr ptr, ptr %275, i32 14
  %277 = load ptr, ptr %276, align 8
  %278 = alloca {}, align 8
  %279 = call ptr @behavior_wrapper(ptr %277, { ptr, ptr, ptr, i32 } %271, ptr %278)
  %280 = call { ptr } %279({ ptr, ptr, ptr, i32 } %271, { ptr, ptr, ptr, i32 } %271, ptr %272) #15
  %281 = alloca ptr, align 8
  store { ptr } %280, ptr %281, align 8
  %282 = load ptr, ptr %281, align 8
  %283 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %282)
  %284 = load ptr, ptr %10, align 8
  %285 = load ptr, ptr %5, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 104, ptr %285)
  %287 = load i32, ptr %16, align 4
  %288 = getelementptr ptr, ptr %285, i32 %287
  %289 = load ptr, ptr %288, align 8
  %290 = getelementptr { ptr, ptr }, ptr %289, i32 0, i32 0
  %291 = load ptr, ptr %290, align 8
  %292 = call i32 %291(ptr %284) #17
  %293 = alloca i32, align 4
  store i32 %292, ptr %293, align 4
  %294 = load i32, ptr %293, align 4
  %295 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %294)
  %296 = alloca i32, align 4
  store i32 13, ptr %296, align 4
  %297 = load i32, ptr %296, align 4
  %298 = sext i32 %297 to i64
  %299 = alloca ptr, align 8
  %300 = mul i64 %298, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %301 = call ptr @bump_malloc(i64 %300)
  store ptr %301, ptr %299, align 8
  %302 = alloca ptr, align 8
  %303 = getelementptr { ptr }, ptr %299, i32 0, i32 0
  %304 = load ptr, ptr %303, align 8
  store ptr %304, ptr %302, align 8
  %305 = alloca i32, align 4
  store i32 0, ptr %305, align 4
  %306 = load ptr, ptr %302, align 8
  %307 = load i32, ptr %305, align 4
  %308 = sext i32 %307 to i64
  %309 = mul i64 ptrtoint (ptr getelementptr ([12 x i8], ptr null, i32 1) to i64), %308
  %310 = getelementptr i8, ptr %306, i64 %309
  %311 = load <12 x i8>, ptr @dckhu_With_message, align 16
  store <12 x i8> %311, ptr %310, align 16
  %312 = alloca i32, align 4
  store i32 12, ptr %312, align 4
  %313 = alloca i32, align 4
  store i32 13, ptr %313, align 4
  %314 = alloca [1 x ptr], align 8
  store ptr @String, ptr %314, align 8
  %315 = load ptr, ptr %314, align 8
  %316 = getelementptr ptr, ptr %315, i32 6
  %317 = load ptr, ptr %316, align 8
  %318 = call { i64, i64 } @size_wrapper(ptr %317, ptr %314)
  %319 = extractvalue { i64, i64 } %318, 0
  %320 = call ptr @bump_malloc(i64 %319)
  %321 = alloca i32, align 4
  %322 = alloca ptr, align 8
  %323 = alloca ptr, align 8
  %324 = alloca ptr, align 8
  store ptr @String, ptr %324, align 8
  store ptr %320, ptr %323, align 8
  store i32 10, ptr %321, align 4
  %325 = alloca i32, align 4
  store i32 12, ptr %325, align 4
  %326 = alloca i32, align 4
  store i32 13, ptr %326, align 4
  %327 = load ptr, ptr %302, align 8
  %328 = insertvalue { ptr } undef, ptr %327, 0
  %329 = load i32, ptr %325, align 4
  %330 = load i32, ptr %326, align 4
  %331 = load ptr, ptr %324, align 8
  %332 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %331, 0
  %333 = load ptr, ptr %323, align 8
  %334 = insertvalue { ptr, ptr, ptr, i32 } %332, ptr %333, 1
  %335 = load ptr, ptr %322, align 8
  %336 = insertvalue { ptr, ptr, ptr, i32 } %334, ptr %335, 2
  %337 = load i32, ptr %321, align 4
  %338 = insertvalue { ptr, ptr, ptr, i32 } %336, i32 %337, 3
  %339 = alloca [3 x ptr], align 8
  %340 = getelementptr [3 x ptr], ptr %339, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %340, align 8
  %341 = getelementptr [3 x ptr], ptr %339, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %341, align 8
  %342 = getelementptr [3 x ptr], ptr %339, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %342, align 8
  %343 = call ptr @llvm.invariant.start.p0(i64 9, ptr %339)
  %344 = call ptr @llvm.invariant.start.p0(i64 280, ptr %331)
  %345 = getelementptr ptr, ptr %331, i32 %337
  %346 = getelementptr ptr, ptr %345, i32 4
  %347 = load ptr, ptr %346, align 8
  %348 = alloca { ptr, ptr, ptr }, align 8
  %349 = getelementptr { ptr, ptr, ptr }, ptr %348, i32 0, i32 0
  store ptr @buffer_typ, ptr %349, align 8
  %350 = getelementptr { ptr, ptr, ptr }, ptr %348, i32 0, i32 1
  store ptr @i32_typ, ptr %350, align 8
  %351 = getelementptr { ptr, ptr, ptr }, ptr %348, i32 0, i32 2
  store ptr @i32_typ, ptr %351, align 8
  %352 = call ptr @behavior_wrapper(ptr %347, { ptr, ptr, ptr, i32 } %338, ptr %348)
  call void %352({ ptr, ptr, ptr, i32 } %338, { ptr, ptr, ptr, i32 } %338, ptr %339, { ptr } %328, i32 %329, i32 %330) #15
  %353 = load ptr, ptr %324, align 8
  %354 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %353, 0
  %355 = load ptr, ptr %323, align 8
  %356 = insertvalue { ptr, ptr, ptr, i32 } %354, ptr %355, 1
  %357 = load ptr, ptr %322, align 8
  %358 = insertvalue { ptr, ptr, ptr, i32 } %356, ptr %357, 2
  %359 = load i32, ptr %321, align 4
  %360 = insertvalue { ptr, ptr, ptr, i32 } %358, i32 %359, 3
  %361 = alloca [0 x ptr], align 8
  %362 = call ptr @llvm.invariant.start.p0(i64 0, ptr %361)
  %363 = call ptr @llvm.invariant.start.p0(i64 280, ptr %353)
  %364 = getelementptr ptr, ptr %353, i32 %359
  %365 = getelementptr ptr, ptr %364, i32 14
  %366 = load ptr, ptr %365, align 8
  %367 = alloca {}, align 8
  %368 = call ptr @behavior_wrapper(ptr %366, { ptr, ptr, ptr, i32 } %360, ptr %367)
  %369 = call { ptr } %368({ ptr, ptr, ptr, i32 } %360, { ptr, ptr, ptr, i32 } %360, ptr %361) #15
  %370 = alloca ptr, align 8
  store { ptr } %369, ptr %370, align 8
  %371 = load ptr, ptr %370, align 8
  %372 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %371)
  %373 = load ptr, ptr %7, align 8
  %374 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %373, 0
  %375 = load ptr, ptr %10, align 8
  %376 = insertvalue { ptr, ptr, ptr, i32 } %374, ptr %375, 1
  %377 = load ptr, ptr %13, align 8
  %378 = insertvalue { ptr, ptr, ptr, i32 } %376, ptr %377, 2
  %379 = load i32, ptr %16, align 4
  %380 = insertvalue { ptr, ptr, ptr, i32 } %378, i32 %379, 3
  %381 = alloca [0 x ptr], align 8
  %382 = call ptr @llvm.invariant.start.p0(i64 0, ptr %381)
  %383 = call ptr @llvm.invariant.start.p0(i64 104, ptr %373)
  %384 = getelementptr ptr, ptr %373, i32 %379
  %385 = getelementptr ptr, ptr %384, i32 7
  %386 = load ptr, ptr %385, align 8
  %387 = alloca {}, align 8
  %388 = call ptr @behavior_wrapper(ptr %386, { ptr, ptr, ptr, i32 } %380, ptr %387)
  call void %388({ ptr, ptr, ptr, i32 } %380, { ptr, ptr, ptr, i32 } %380, ptr %381) #15
  %389 = alloca i32, align 4
  store i32 10, ptr %389, align 4
  %390 = load i32, ptr %389, align 4
  %391 = sext i32 %390 to i64
  %392 = alloca ptr, align 8
  %393 = mul i64 %391, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %394 = call ptr @bump_malloc(i64 %393)
  store ptr %394, ptr %392, align 8
  %395 = alloca ptr, align 8
  %396 = getelementptr { ptr }, ptr %392, i32 0, i32 0
  %397 = load ptr, ptr %396, align 8
  store ptr %397, ptr %395, align 8
  %398 = alloca i32, align 4
  store i32 0, ptr %398, align 4
  %399 = load ptr, ptr %395, align 8
  %400 = load i32, ptr %398, align 4
  %401 = sext i32 %400 to i64
  %402 = mul i64 ptrtoint (ptr getelementptr ([9 x i8], ptr null, i32 1) to i64), %401
  %403 = getelementptr i8, ptr %399, i64 %402
  %404 = load <9 x i8>, ptr @scyxy_, align 16
  store <9 x i8> %404, ptr %403, align 16
  %405 = alloca i32, align 4
  store i32 9, ptr %405, align 4
  %406 = alloca i32, align 4
  store i32 10, ptr %406, align 4
  %407 = alloca [1 x ptr], align 8
  store ptr @String, ptr %407, align 8
  %408 = load ptr, ptr %407, align 8
  %409 = getelementptr ptr, ptr %408, i32 6
  %410 = load ptr, ptr %409, align 8
  %411 = call { i64, i64 } @size_wrapper(ptr %410, ptr %407)
  %412 = extractvalue { i64, i64 } %411, 0
  %413 = call ptr @bump_malloc(i64 %412)
  %414 = alloca i32, align 4
  %415 = alloca ptr, align 8
  %416 = alloca ptr, align 8
  %417 = alloca ptr, align 8
  store ptr @String, ptr %417, align 8
  store ptr %413, ptr %416, align 8
  store i32 10, ptr %414, align 4
  %418 = alloca i32, align 4
  store i32 9, ptr %418, align 4
  %419 = alloca i32, align 4
  store i32 10, ptr %419, align 4
  %420 = load ptr, ptr %395, align 8
  %421 = insertvalue { ptr } undef, ptr %420, 0
  %422 = load i32, ptr %418, align 4
  %423 = load i32, ptr %419, align 4
  %424 = load ptr, ptr %417, align 8
  %425 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %424, 0
  %426 = load ptr, ptr %416, align 8
  %427 = insertvalue { ptr, ptr, ptr, i32 } %425, ptr %426, 1
  %428 = load ptr, ptr %415, align 8
  %429 = insertvalue { ptr, ptr, ptr, i32 } %427, ptr %428, 2
  %430 = load i32, ptr %414, align 4
  %431 = insertvalue { ptr, ptr, ptr, i32 } %429, i32 %430, 3
  %432 = alloca [3 x ptr], align 8
  %433 = getelementptr [3 x ptr], ptr %432, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %433, align 8
  %434 = getelementptr [3 x ptr], ptr %432, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %434, align 8
  %435 = getelementptr [3 x ptr], ptr %432, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %435, align 8
  %436 = call ptr @llvm.invariant.start.p0(i64 9, ptr %432)
  %437 = call ptr @llvm.invariant.start.p0(i64 280, ptr %424)
  %438 = getelementptr ptr, ptr %424, i32 %430
  %439 = getelementptr ptr, ptr %438, i32 4
  %440 = load ptr, ptr %439, align 8
  %441 = alloca { ptr, ptr, ptr }, align 8
  %442 = getelementptr { ptr, ptr, ptr }, ptr %441, i32 0, i32 0
  store ptr @buffer_typ, ptr %442, align 8
  %443 = getelementptr { ptr, ptr, ptr }, ptr %441, i32 0, i32 1
  store ptr @i32_typ, ptr %443, align 8
  %444 = getelementptr { ptr, ptr, ptr }, ptr %441, i32 0, i32 2
  store ptr @i32_typ, ptr %444, align 8
  %445 = call ptr @behavior_wrapper(ptr %440, { ptr, ptr, ptr, i32 } %431, ptr %441)
  call void %445({ ptr, ptr, ptr, i32 } %431, { ptr, ptr, ptr, i32 } %431, ptr %432, { ptr } %421, i32 %422, i32 %423) #15
  %446 = load ptr, ptr %417, align 8
  %447 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %446, 0
  %448 = load ptr, ptr %416, align 8
  %449 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr %448, 1
  %450 = load ptr, ptr %415, align 8
  %451 = insertvalue { ptr, ptr, ptr, i32 } %449, ptr %450, 2
  %452 = load i32, ptr %414, align 4
  %453 = insertvalue { ptr, ptr, ptr, i32 } %451, i32 %452, 3
  %454 = alloca [0 x ptr], align 8
  %455 = call ptr @llvm.invariant.start.p0(i64 0, ptr %454)
  %456 = call ptr @llvm.invariant.start.p0(i64 280, ptr %446)
  %457 = getelementptr ptr, ptr %446, i32 %452
  %458 = getelementptr ptr, ptr %457, i32 14
  %459 = load ptr, ptr %458, align 8
  %460 = alloca {}, align 8
  %461 = call ptr @behavior_wrapper(ptr %459, { ptr, ptr, ptr, i32 } %453, ptr %460)
  %462 = call { ptr } %461({ ptr, ptr, ptr, i32 } %453, { ptr, ptr, ptr, i32 } %453, ptr %454) #15
  %463 = alloca ptr, align 8
  store { ptr } %462, ptr %463, align 8
  %464 = load ptr, ptr %463, align 8
  %465 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %464)
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Exception)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 104, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #17
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @String)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 280, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 14
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #15
  %50 = alloca ptr, align 8
  store { ptr } %49, ptr %50, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %51)
  ret void
}

declare i32 @printf(ptr, ...)

define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @Exception_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @Exception_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define i32 @Exception_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Exception_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_IO(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @IO_B__Self_print_xRepresentable__Self_print_xPtri64__Self_print_xString__Self_print_xPtri32__Self_print_xCharacter__Self_print_xPtri8__Self_print_xPtri1__Self_print_xNil__Self_print_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = alloca i1, align 1
  %11 = alloca i1, align 1
  %12 = alloca i1, align 1
  %13 = alloca i1, align 1
  %14 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca i32, align 4
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i32, align 4
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem37 = alloca i32, align 4
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca i32, align 4
  %.reg2mem43 = alloca i32, align 4
  %.reg2mem45 = alloca i32, align 4
  %.reg2mem47 = alloca i32, align 4
  %.reg2mem49 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %15 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %16 = alloca ptr, align 8
  %17 = load ptr, ptr %0, align 8
  %18 = ptrtoint ptr %17 to i64
  %19 = icmp eq i64 %18, ptrtoint (ptr @nil_typ to i64)
  %20 = icmp eq i64 %18, 0
  %21 = or i1 %19, %20
  store i1 %21, ptr %2, align 1
  %22 = load i1, ptr %2, align 1
  br i1 %22, label %23, label %24

23:                                               ; preds = %1
  store i32 8, ptr %.reg2mem29, align 4
  br label %181

24:                                               ; preds = %1
  %25 = load ptr, ptr %0, align 8
  %26 = ptrtoint ptr %25 to i64
  %27 = icmp eq i64 %26, ptrtoint (ptr @i64_typ to i64)
  store i1 %27, ptr %3, align 1
  %28 = load i1, ptr %3, align 1
  br i1 %28, label %29, label %30

29:                                               ; preds = %24
  store i32 2, ptr %.reg2mem31, align 4
  br label %179

30:                                               ; preds = %24
  %31 = load ptr, ptr %0, align 8
  %32 = getelementptr { [3 x i64], [3 x ptr] }, ptr %31, i32 0, i32 0, i32 1
  %33 = getelementptr { [3 x i64], [3 x ptr] }, ptr %31, i32 0, i32 0, i32 2
  %34 = getelementptr { [3 x i64], [3 x ptr] }, ptr %31, i32 0, i32 1, i32 0
  %35 = getelementptr { [3 x i64], [3 x ptr] }, ptr %31, i32 0, i32 1, i32 1
  %36 = load i64, ptr %32, align 4
  %37 = load i64, ptr %33, align 4
  %38 = load ptr, ptr %34, align 8
  %39 = load ptr, ptr %35, align 8
  %40 = load i64, ptr @String, align 4
  %41 = call i1 @subtype_test_wrapper(ptr %38, i64 %37, i64 %36, i64 %40, i64 ptrtoint (ptr @String to i64), ptr %39)
  store i1 %41, ptr %4, align 1
  %42 = load i1, ptr %4, align 1
  br i1 %42, label %43, label %58

43:                                               ; preds = %30
  %44 = load ptr, ptr %0, align 8
  %45 = getelementptr { [3 x i64], [3 x ptr] }, ptr %44, i32 0, i32 0, i32 1
  %46 = getelementptr { [3 x i64], [3 x ptr] }, ptr %44, i32 0, i32 0, i32 2
  %47 = getelementptr { [3 x i64], [3 x ptr] }, ptr %44, i32 0, i32 1, i32 0
  %48 = getelementptr { [3 x i64], [3 x ptr] }, ptr %44, i32 0, i32 1, i32 1
  %49 = load i64, ptr %45, align 4
  %50 = load i64, ptr %46, align 4
  %51 = load ptr, ptr %47, align 8
  %52 = load ptr, ptr %48, align 8
  %53 = load i64, ptr @Character, align 4
  %54 = call i1 @subtype_test_wrapper(ptr %51, i64 %50, i64 %49, i64 %53, i64 ptrtoint (ptr @Character to i64), ptr %52)
  store i1 %54, ptr %5, align 1
  %55 = load i1, ptr %5, align 1
  %56 = xor i1 %55, true
  %57 = zext i1 %56 to i32
  store i32 %57, ptr %.reg2mem27, align 4
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store i32 %.reload28, ptr %.reg2mem49, align 4
  br label %59

58:                                               ; preds = %30
  store i32 0, ptr %.reg2mem49, align 4
  br label %59

59:                                               ; preds = %58, %43
  %.reload50 = load i32, ptr %.reg2mem49, align 4
  store i32 %.reload50, ptr %.reg2mem25, align 4
  br label %60

60:                                               ; preds = %59
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  %61 = zext i32 %.reload26 to i64
  %62 = trunc i64 %61 to i32
  switch i32 %62, label %177 [
    i32 0, label %63
  ]

63:                                               ; preds = %60
  %64 = load ptr, ptr %0, align 8
  %65 = getelementptr { [3 x i64], [3 x ptr] }, ptr %64, i32 0, i32 0, i32 1
  %66 = getelementptr { [3 x i64], [3 x ptr] }, ptr %64, i32 0, i32 0, i32 2
  %67 = getelementptr { [3 x i64], [3 x ptr] }, ptr %64, i32 0, i32 1, i32 0
  %68 = getelementptr { [3 x i64], [3 x ptr] }, ptr %64, i32 0, i32 1, i32 1
  %69 = load i64, ptr %65, align 4
  %70 = load i64, ptr %66, align 4
  %71 = load ptr, ptr %67, align 8
  %72 = load ptr, ptr %68, align 8
  %73 = load i64, ptr @Character, align 4
  %74 = call i1 @subtype_test_wrapper(ptr %71, i64 %70, i64 %69, i64 %73, i64 ptrtoint (ptr @Character to i64), ptr %72)
  store i1 %74, ptr %6, align 1
  %75 = load i1, ptr %6, align 1
  br i1 %75, label %76, label %91

76:                                               ; preds = %63
  %77 = load ptr, ptr %0, align 8
  %78 = getelementptr { [3 x i64], [3 x ptr] }, ptr %77, i32 0, i32 0, i32 1
  %79 = getelementptr { [3 x i64], [3 x ptr] }, ptr %77, i32 0, i32 0, i32 2
  %80 = getelementptr { [3 x i64], [3 x ptr] }, ptr %77, i32 0, i32 1, i32 0
  %81 = getelementptr { [3 x i64], [3 x ptr] }, ptr %77, i32 0, i32 1, i32 1
  %82 = load i64, ptr %78, align 4
  %83 = load i64, ptr %79, align 4
  %84 = load ptr, ptr %80, align 8
  %85 = load ptr, ptr %81, align 8
  %86 = load i64, ptr @String, align 4
  %87 = call i1 @subtype_test_wrapper(ptr %84, i64 %83, i64 %82, i64 %86, i64 ptrtoint (ptr @String to i64), ptr %85)
  store i1 %87, ptr %7, align 1
  %88 = load i1, ptr %7, align 1
  %89 = xor i1 %88, true
  %90 = zext i1 %89 to i32
  store i32 %90, ptr %.reg2mem23, align 4
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  store i32 %.reload24, ptr %.reg2mem47, align 4
  br label %92

91:                                               ; preds = %63
  store i32 0, ptr %.reg2mem47, align 4
  br label %92

92:                                               ; preds = %91, %76
  %.reload48 = load i32, ptr %.reg2mem47, align 4
  store i32 %.reload48, ptr %.reg2mem21, align 4
  br label %93

93:                                               ; preds = %92
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  %94 = zext i32 %.reload22 to i64
  %95 = trunc i64 %94 to i32
  switch i32 %95, label %175 [
    i32 0, label %96
  ]

96:                                               ; preds = %93
  %97 = load ptr, ptr %0, align 8
  %98 = ptrtoint ptr %97 to i64
  %99 = icmp eq i64 %98, ptrtoint (ptr @bool_typ to i64)
  store i1 %99, ptr %8, align 1
  %100 = load i1, ptr %8, align 1
  br i1 %100, label %101, label %102

101:                                              ; preds = %96
  store i32 7, ptr %.reg2mem37, align 4
  br label %173

102:                                              ; preds = %96
  %103 = load ptr, ptr %0, align 8
  %104 = getelementptr { [3 x i64], [3 x ptr] }, ptr %103, i32 0, i32 0, i32 1
  %105 = getelementptr { [3 x i64], [3 x ptr] }, ptr %103, i32 0, i32 0, i32 2
  %106 = getelementptr { [3 x i64], [3 x ptr] }, ptr %103, i32 0, i32 1, i32 0
  %107 = getelementptr { [3 x i64], [3 x ptr] }, ptr %103, i32 0, i32 1, i32 1
  %108 = load i64, ptr %104, align 4
  %109 = load i64, ptr %105, align 4
  %110 = load ptr, ptr %106, align 8
  %111 = load ptr, ptr %107, align 8
  %112 = load i64, ptr @Representable, align 4
  %113 = call i1 @subtype_test_wrapper(ptr %110, i64 %109, i64 %108, i64 %112, i64 ptrtoint (ptr @Representable to i64), ptr %111)
  store i1 %113, ptr %9, align 1
  %114 = load i1, ptr %9, align 1
  br i1 %114, label %115, label %146

115:                                              ; preds = %102
  %116 = load ptr, ptr %0, align 8
  %117 = getelementptr { [3 x i64], [3 x ptr] }, ptr %116, i32 0, i32 0, i32 1
  %118 = getelementptr { [3 x i64], [3 x ptr] }, ptr %116, i32 0, i32 0, i32 2
  %119 = getelementptr { [3 x i64], [3 x ptr] }, ptr %116, i32 0, i32 1, i32 0
  %120 = getelementptr { [3 x i64], [3 x ptr] }, ptr %116, i32 0, i32 1, i32 1
  %121 = load i64, ptr %117, align 4
  %122 = load i64, ptr %118, align 4
  %123 = load ptr, ptr %119, align 8
  %124 = load ptr, ptr %120, align 8
  %125 = load i64, ptr @String, align 4
  %126 = call i1 @subtype_test_wrapper(ptr %123, i64 %122, i64 %121, i64 %125, i64 ptrtoint (ptr @String to i64), ptr %124)
  store i1 %126, ptr %10, align 1
  %127 = load i1, ptr %10, align 1
  br i1 %127, label %128, label %129

128:                                              ; preds = %115
  store i32 0, ptr %.reg2mem45, align 4
  br label %144

129:                                              ; preds = %115
  %130 = load ptr, ptr %0, align 8
  %131 = getelementptr { [3 x i64], [3 x ptr] }, ptr %130, i32 0, i32 0, i32 1
  %132 = getelementptr { [3 x i64], [3 x ptr] }, ptr %130, i32 0, i32 0, i32 2
  %133 = getelementptr { [3 x i64], [3 x ptr] }, ptr %130, i32 0, i32 1, i32 0
  %134 = getelementptr { [3 x i64], [3 x ptr] }, ptr %130, i32 0, i32 1, i32 1
  %135 = load i64, ptr %131, align 4
  %136 = load i64, ptr %132, align 4
  %137 = load ptr, ptr %133, align 8
  %138 = load ptr, ptr %134, align 8
  %139 = load i64, ptr @Character, align 4
  %140 = call i1 @subtype_test_wrapper(ptr %137, i64 %136, i64 %135, i64 %139, i64 ptrtoint (ptr @Character to i64), ptr %138)
  store i1 %140, ptr %11, align 1
  %141 = load i1, ptr %11, align 1
  %142 = xor i1 %141, true
  %143 = zext i1 %142 to i32
  store i32 %143, ptr %.reg2mem19, align 4
  %.reload20 = load i32, ptr %.reg2mem19, align 4
  store i32 %.reload20, ptr %.reg2mem45, align 4
  br label %144

144:                                              ; preds = %129, %128
  %.reload46 = load i32, ptr %.reg2mem45, align 4
  store i32 %.reload46, ptr %.reg2mem17, align 4
  br label %145

145:                                              ; preds = %144
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem43, align 4
  br label %147

146:                                              ; preds = %102
  store i32 0, ptr %.reg2mem43, align 4
  br label %147

147:                                              ; preds = %146, %145
  %.reload44 = load i32, ptr %.reg2mem43, align 4
  store i32 %.reload44, ptr %.reg2mem15, align 4
  br label %148

148:                                              ; preds = %147
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  %149 = zext i32 %.reload16 to i64
  %150 = trunc i64 %149 to i32
  switch i32 %150, label %171 [
    i32 0, label %151
  ]

151:                                              ; preds = %148
  %152 = load ptr, ptr %0, align 8
  %153 = ptrtoint ptr %152 to i64
  %154 = icmp eq i64 %153, ptrtoint (ptr @f64_typ to i64)
  store i1 %154, ptr %12, align 1
  %155 = load i1, ptr %12, align 1
  br i1 %155, label %156, label %157

156:                                              ; preds = %151
  store i32 9, ptr %.reg2mem41, align 4
  br label %169

157:                                              ; preds = %151
  %158 = load ptr, ptr %0, align 8
  %159 = ptrtoint ptr %158 to i64
  %160 = icmp eq i64 %159, ptrtoint (ptr @i32_typ to i64)
  store i1 %160, ptr %13, align 1
  %161 = load i1, ptr %13, align 1
  %162 = select i1 %161, i32 4, i32 6
  store i32 %162, ptr %.reg2mem13, align 4
  br i1 %161, label %163, label %164

163:                                              ; preds = %157
  br label %168

164:                                              ; preds = %157
  %165 = load ptr, ptr %0, align 8
  %166 = ptrtoint ptr %165 to i64
  %167 = icmp eq i64 %166, ptrtoint (ptr @i8_typ to i64)
  store i1 %167, ptr %14, align 1
  br label %168

168:                                              ; preds = %164, %163
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem41, align 4
  br label %169

169:                                              ; preds = %168, %156
  %.reload42 = load i32, ptr %.reg2mem41, align 4
  store i32 %.reload42, ptr %.reg2mem11, align 4
  br label %170

170:                                              ; preds = %169
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem39, align 4
  br label %172

171:                                              ; preds = %148
  store i32 1, ptr %.reg2mem39, align 4
  br label %172

172:                                              ; preds = %171, %170
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store i32 %.reload40, ptr %.reg2mem9, align 4
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem37, align 4
  br label %173

173:                                              ; preds = %172, %101
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  store i32 %.reload38, ptr %.reg2mem7, align 4
  br label %174

174:                                              ; preds = %173
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem35, align 4
  br label %176

175:                                              ; preds = %93
  store i32 5, ptr %.reg2mem35, align 4
  br label %176

176:                                              ; preds = %175, %174
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload36, ptr %.reg2mem5, align 4
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem33, align 4
  br label %178

177:                                              ; preds = %60
  store i32 3, ptr %.reg2mem33, align 4
  br label %178

178:                                              ; preds = %177, %176
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  store i32 %.reload34, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem31, align 4
  br label %179

179:                                              ; preds = %178, %29
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  store i32 %.reload32, ptr %.reg2mem1, align 4
  br label %180

180:                                              ; preds = %179
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem29, align 4
  br label %181

181:                                              ; preds = %180, %23
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  store i32 %.reload30, ptr %.reg2mem, align 4
  br label %182

182:                                              ; preds = %181
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %16, align 4
  %183 = load i32, ptr %16, align 4
  %184 = getelementptr [10 x ptr], ptr @IO, i32 0, i32 %183
  %185 = getelementptr ptr, ptr %184, i32 10
  %186 = load ptr, ptr %185, align 8
  ret ptr %186
}

define void @IO__Self_print_xRepresentable(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Representable)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = load ptr, ptr %26, align 8
  %28 = alloca {}, align 8
  %29 = call ptr @behavior_wrapper(ptr %27, { ptr, ptr, ptr, i32 } %22, ptr %28)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23) #15
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %44 = load i32, ptr %42, align 4
  store i32 %44, ptr %43, align 4
  call void @set_offset(ptr %32, ptr @String)
  %45 = load ptr, ptr %34, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = load ptr, ptr %37, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 1
  %49 = load ptr, ptr %40, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 2
  %51 = load i32, ptr %43, align 4
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %51, 3
  %53 = alloca [0 x ptr], align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 0, ptr %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 280, ptr %45)
  %56 = getelementptr ptr, ptr %45, i32 %51
  %57 = getelementptr ptr, ptr %56, i32 14
  %58 = load ptr, ptr %57, align 8
  %59 = alloca {}, align 8
  %60 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %52, ptr %59)
  %61 = call { ptr } %60({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr %53) #15
  %62 = alloca ptr, align 8
  store { ptr } %61, ptr %62, align 8
  %63 = load ptr, ptr %62, align 8
  %64 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %63)
  ret void
}

define void @IO__Self_print_xPtri64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i64, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i64, ptr %5, align 4
  store i64 %6, ptr %4, align 4
  %7 = load i64, ptr %4, align 4
  %8 = call i32 (ptr, ...) @printf(ptr @i64_string, i64 %7)
  ret void
}

define void @IO__Self_print_xString(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @String)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 280, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = getelementptr ptr, ptr %26, i32 14
  %28 = load ptr, ptr %27, align 8
  %29 = alloca {}, align 8
  %30 = call ptr @behavior_wrapper(ptr %28, { ptr, ptr, ptr, i32 } %22, ptr %29)
  %31 = call { ptr } %30({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23) #15
  %32 = alloca ptr, align 8
  store { ptr } %31, ptr %32, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %33)
  ret void
}

define void @IO__Self_print_xPtri32(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i32, ptr %5, align 4
  store i32 %6, ptr %4, align 4
  %7 = load i32, ptr %4, align 4
  %8 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %7)
  ret void
}

define void @IO__Self_print_xCharacter(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Character)
  %11 = alloca i32, align 4
  store i32 2, ptr %11, align 4
  %12 = load i32, ptr %11, align 4
  %13 = sext i32 %12 to i64
  %14 = alloca ptr, align 8
  %15 = mul i64 %13, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %16 = call ptr @bump_malloc(i64 %15)
  store ptr %16, ptr %14, align 8
  %17 = alloca ptr, align 8
  %18 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  store ptr %19, ptr %17, align 8
  %20 = alloca i8, align 1
  store i8 0, ptr %20, align 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %22, 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %31 = load i32, ptr %30, align 4
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 %31, 3
  %33 = alloca [0 x ptr], align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr %33)
  %35 = call ptr @llvm.invariant.start.p0(i64 40, ptr %22)
  %36 = getelementptr ptr, ptr %22, i32 %31
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = alloca {}, align 8
  %40 = call ptr @behavior_wrapper(ptr %38, { ptr, ptr, ptr, i32 } %32, ptr %39)
  %41 = call i8 %40({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr %33) #15
  %42 = alloca i8, align 1
  store i8 %41, ptr %42, align 1
  %43 = alloca i32, align 4
  store i32 0, ptr %43, align 4
  %44 = load ptr, ptr %17, align 8
  %45 = load i32, ptr %43, align 4
  %46 = sext i32 %45 to i64
  %47 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %46
  %48 = getelementptr i8, ptr %44, i64 %47
  %49 = load i8, ptr %42, align 1
  store i8 %49, ptr %48, align 1
  %50 = alloca i32, align 4
  store i32 1, ptr %50, align 4
  %51 = load ptr, ptr %17, align 8
  %52 = load i32, ptr %50, align 4
  %53 = sext i32 %52 to i64
  %54 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %53
  %55 = getelementptr i8, ptr %51, i64 %54
  %56 = load i8, ptr %20, align 1
  store i8 %56, ptr %55, align 1
  %57 = load ptr, ptr %17, align 8
  %58 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %57)
  ret void
}

define void @IO__Self_print_xPtri8(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i8, align 1
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load i8, ptr %5, align 1
  store i8 %6, ptr %4, align 1
  %7 = load i8, ptr %4, align 1
  %8 = sext i8 %7 to i32
  %9 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %8)
  ret void
}

define void @IO__Self_print_xPtri1(ptr %0, { ptr, i160 } %1) {
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [1 x ptr], align 8
  %10 = alloca i32, align 4
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca [3 x ptr], align 8
  %17 = alloca { ptr, ptr, ptr }, align 8
  %18 = alloca [0 x ptr], align 8
  %19 = alloca {}, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i32, align 4
  %22 = alloca ptr, align 8
  %23 = alloca ptr, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca [1 x ptr], align 8
  %28 = alloca i32, align 4
  %29 = alloca ptr, align 8
  %30 = alloca ptr, align 8
  %31 = alloca ptr, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca [3 x ptr], align 8
  %35 = alloca { ptr, ptr, ptr }, align 8
  %36 = alloca [0 x ptr], align 8
  %37 = alloca {}, align 8
  %38 = alloca ptr, align 8
  %39 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %39, align 8
  %40 = alloca i1, align 1
  %41 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %42 = load i1, ptr %41, align 1
  store i1 %42, ptr %40, align 1
  %43 = load i1, ptr %40, align 1
  br i1 %43, label %44, label %104

44:                                               ; preds = %2
  store i32 5, ptr %3, align 4
  %45 = load i32, ptr %3, align 4
  %46 = sext i32 %45 to i64
  %47 = mul i64 %46, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %48 = call ptr @bump_malloc(i64 %47)
  store ptr %48, ptr %4, align 8
  %49 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  store ptr %50, ptr %5, align 8
  store i32 0, ptr %6, align 4
  %51 = load ptr, ptr %5, align 8
  %52 = load i32, ptr %6, align 4
  %53 = sext i32 %52 to i64
  %54 = mul i64 ptrtoint (ptr getelementptr ([4 x i8], ptr null, i32 1) to i64), %53
  %55 = getelementptr i8, ptr %51, i64 %54
  %56 = load <4 x i8>, ptr @kgpxh_true, align 4
  store <4 x i8> %56, ptr %55, align 4
  store i32 4, ptr %7, align 4
  store i32 5, ptr %8, align 4
  store ptr @String, ptr %9, align 8
  %57 = load ptr, ptr %9, align 8
  %58 = getelementptr ptr, ptr %57, i32 6
  %59 = load ptr, ptr %58, align 8
  %60 = call { i64, i64 } @size_wrapper(ptr %59, ptr %9)
  %61 = extractvalue { i64, i64 } %60, 0
  %62 = call ptr @bump_malloc(i64 %61)
  store ptr @String, ptr %13, align 8
  store ptr %62, ptr %12, align 8
  store i32 10, ptr %10, align 4
  store i32 4, ptr %14, align 4
  store i32 5, ptr %15, align 4
  %63 = load ptr, ptr %5, align 8
  %64 = insertvalue { ptr } undef, ptr %63, 0
  %65 = load i32, ptr %14, align 4
  %66 = load i32, ptr %15, align 4
  %67 = load ptr, ptr %13, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = load ptr, ptr %12, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %69, 1
  %71 = load ptr, ptr %11, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %71, 2
  %73 = load i32, ptr %10, align 4
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %73, 3
  %75 = getelementptr [3 x ptr], ptr %16, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %75, align 8
  %76 = getelementptr [3 x ptr], ptr %16, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %76, align 8
  %77 = getelementptr [3 x ptr], ptr %16, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %77, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 9, ptr %16)
  %79 = call ptr @llvm.invariant.start.p0(i64 280, ptr %67)
  %80 = getelementptr ptr, ptr %67, i32 %73
  %81 = getelementptr ptr, ptr %80, i32 4
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 0
  store ptr @buffer_typ, ptr %83, align 8
  %84 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 1
  store ptr @i32_typ, ptr %84, align 8
  %85 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 2
  store ptr @i32_typ, ptr %85, align 8
  %86 = call ptr @behavior_wrapper(ptr %82, { ptr, ptr, ptr, i32 } %74, ptr %17)
  call void %86({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr %16, { ptr } %64, i32 %65, i32 %66) #15
  %87 = load ptr, ptr %13, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %12, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %11, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %10, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr %18)
  %96 = call ptr @llvm.invariant.start.p0(i64 280, ptr %87)
  %97 = getelementptr ptr, ptr %87, i32 %93
  %98 = getelementptr ptr, ptr %97, i32 14
  %99 = load ptr, ptr %98, align 8
  %100 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %94, ptr %19)
  %101 = call { ptr } %100({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %18) #15
  store { ptr } %101, ptr %20, align 8
  %102 = load ptr, ptr %20, align 8
  %103 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %102)
  br label %164

104:                                              ; preds = %2
  store i32 6, ptr %21, align 4
  %105 = load i32, ptr %21, align 4
  %106 = sext i32 %105 to i64
  %107 = mul i64 %106, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %108 = call ptr @bump_malloc(i64 %107)
  store ptr %108, ptr %22, align 8
  %109 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  store ptr %110, ptr %23, align 8
  store i32 0, ptr %24, align 4
  %111 = load ptr, ptr %23, align 8
  %112 = load i32, ptr %24, align 4
  %113 = sext i32 %112 to i64
  %114 = mul i64 ptrtoint (ptr getelementptr ([5 x i8], ptr null, i32 1) to i64), %113
  %115 = getelementptr i8, ptr %111, i64 %114
  %116 = load <5 x i8>, ptr @abuba_false, align 8
  store <5 x i8> %116, ptr %115, align 8
  store i32 5, ptr %25, align 4
  store i32 6, ptr %26, align 4
  store ptr @String, ptr %27, align 8
  %117 = load ptr, ptr %27, align 8
  %118 = getelementptr ptr, ptr %117, i32 6
  %119 = load ptr, ptr %118, align 8
  %120 = call { i64, i64 } @size_wrapper(ptr %119, ptr %27)
  %121 = extractvalue { i64, i64 } %120, 0
  %122 = call ptr @bump_malloc(i64 %121)
  store ptr @String, ptr %31, align 8
  store ptr %122, ptr %30, align 8
  store i32 10, ptr %28, align 4
  store i32 5, ptr %32, align 4
  store i32 6, ptr %33, align 4
  %123 = load ptr, ptr %23, align 8
  %124 = insertvalue { ptr } undef, ptr %123, 0
  %125 = load i32, ptr %32, align 4
  %126 = load i32, ptr %33, align 4
  %127 = load ptr, ptr %31, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %30, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %29, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %28, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  %135 = getelementptr [3 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %135, align 8
  %136 = getelementptr [3 x ptr], ptr %34, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %136, align 8
  %137 = getelementptr [3 x ptr], ptr %34, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %137, align 8
  %138 = call ptr @llvm.invariant.start.p0(i64 9, ptr %34)
  %139 = call ptr @llvm.invariant.start.p0(i64 280, ptr %127)
  %140 = getelementptr ptr, ptr %127, i32 %133
  %141 = getelementptr ptr, ptr %140, i32 4
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr }, ptr %35, i32 0, i32 0
  store ptr @buffer_typ, ptr %143, align 8
  %144 = getelementptr { ptr, ptr, ptr }, ptr %35, i32 0, i32 1
  store ptr @i32_typ, ptr %144, align 8
  %145 = getelementptr { ptr, ptr, ptr }, ptr %35, i32 0, i32 2
  store ptr @i32_typ, ptr %145, align 8
  %146 = call ptr @behavior_wrapper(ptr %142, { ptr, ptr, ptr, i32 } %134, ptr %35)
  call void %146({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr %34, { ptr } %124, i32 %125, i32 %126) #15
  %147 = load ptr, ptr %31, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %147, 0
  %149 = load ptr, ptr %30, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %149, 1
  %151 = load ptr, ptr %29, align 8
  %152 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %151, 2
  %153 = load i32, ptr %28, align 4
  %154 = insertvalue { ptr, ptr, ptr, i32 } %152, i32 %153, 3
  %155 = call ptr @llvm.invariant.start.p0(i64 0, ptr %36)
  %156 = call ptr @llvm.invariant.start.p0(i64 280, ptr %147)
  %157 = getelementptr ptr, ptr %147, i32 %153
  %158 = getelementptr ptr, ptr %157, i32 14
  %159 = load ptr, ptr %158, align 8
  %160 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %154, ptr %37)
  %161 = call { ptr } %160({ ptr, ptr, ptr, i32 } %154, { ptr, ptr, ptr, i32 } %154, ptr %36) #15
  store { ptr } %161, ptr %38, align 8
  %162 = load ptr, ptr %38, align 8
  %163 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %162)
  br label %164

164:                                              ; preds = %104, %44
  ret void
}

define void @IO__Self_print_xNil(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca i32, align 4
  store i32 4, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  %6 = sext i32 %5 to i64
  %7 = alloca ptr, align 8
  %8 = mul i64 %6, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %9 = call ptr @bump_malloc(i64 %8)
  store ptr %9, ptr %7, align 8
  %10 = alloca ptr, align 8
  %11 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  store ptr %12, ptr %10, align 8
  %13 = alloca i32, align 4
  store i32 0, ptr %13, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load i32, ptr %13, align 4
  %16 = sext i32 %15 to i64
  %17 = mul i64 ptrtoint (ptr getelementptr ([3 x i8], ptr null, i32 1) to i64), %16
  %18 = getelementptr i8, ptr %14, i64 %17
  %19 = load <3 x i8>, ptr @hefwt_nil, align 4
  store <3 x i8> %19, ptr %18, align 4
  %20 = alloca i32, align 4
  store i32 3, ptr %20, align 4
  %21 = alloca i32, align 4
  store i32 4, ptr %21, align 4
  %22 = alloca [1 x ptr], align 8
  store ptr @String, ptr %22, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr ptr, ptr %23, i32 6
  %25 = load ptr, ptr %24, align 8
  %26 = call { i64, i64 } @size_wrapper(ptr %25, ptr %22)
  %27 = extractvalue { i64, i64 } %26, 0
  %28 = call ptr @bump_malloc(i64 %27)
  %29 = alloca i32, align 4
  %30 = alloca ptr, align 8
  %31 = alloca ptr, align 8
  %32 = alloca ptr, align 8
  store ptr @String, ptr %32, align 8
  store ptr %28, ptr %31, align 8
  store i32 10, ptr %29, align 4
  %33 = alloca i32, align 4
  store i32 3, ptr %33, align 4
  %34 = alloca i32, align 4
  store i32 4, ptr %34, align 4
  %35 = load ptr, ptr %10, align 8
  %36 = insertvalue { ptr } undef, ptr %35, 0
  %37 = load i32, ptr %33, align 4
  %38 = load i32, ptr %34, align 4
  %39 = load ptr, ptr %32, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %41 = load ptr, ptr %31, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %41, 1
  %43 = load ptr, ptr %30, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %43, 2
  %45 = load i32, ptr %29, align 4
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %45, 3
  %47 = alloca [3 x ptr], align 8
  %48 = getelementptr [3 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %48, align 8
  %49 = getelementptr [3 x ptr], ptr %47, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %49, align 8
  %50 = getelementptr [3 x ptr], ptr %47, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 9, ptr %47)
  %52 = call ptr @llvm.invariant.start.p0(i64 280, ptr %39)
  %53 = getelementptr ptr, ptr %39, i32 %45
  %54 = getelementptr ptr, ptr %53, i32 4
  %55 = load ptr, ptr %54, align 8
  %56 = alloca { ptr, ptr, ptr }, align 8
  %57 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 0
  store ptr @buffer_typ, ptr %57, align 8
  %58 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 1
  store ptr @i32_typ, ptr %58, align 8
  %59 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 2
  store ptr @i32_typ, ptr %59, align 8
  %60 = call ptr @behavior_wrapper(ptr %55, { ptr, ptr, ptr, i32 } %46, ptr %56)
  call void %60({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr %47, { ptr } %36, i32 %37, i32 %38) #15
  %61 = load ptr, ptr %32, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = load ptr, ptr %31, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %63, 1
  %65 = load ptr, ptr %30, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %65, 2
  %67 = load i32, ptr %29, align 4
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %67, 3
  %69 = alloca [0 x ptr], align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 0, ptr %69)
  %71 = call ptr @llvm.invariant.start.p0(i64 280, ptr %61)
  %72 = getelementptr ptr, ptr %61, i32 %67
  %73 = getelementptr ptr, ptr %72, i32 14
  %74 = load ptr, ptr %73, align 8
  %75 = alloca {}, align 8
  %76 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %68, ptr %75)
  %77 = call { ptr } %76({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr %69) #15
  %78 = alloca ptr, align 8
  store { ptr } %77, ptr %78, align 8
  %79 = load ptr, ptr %78, align 8
  %80 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %79)
  ret void
}

define void @IO__Self_print_xPtrf64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca double, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %6 = load double, ptr %5, align 8
  store double %6, ptr %4, align 8
  %7 = load double, ptr %4, align 8
  %8 = call i32 (ptr, ...) @printf(ptr @float_string, double %7)
  ret void
}

define { i64, i64 } @_data_size_Blocking(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Blocking_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 1, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [2 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Blocking_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Blocking)
  ret void
}

define { i64, i64 } @_data_size_Channel(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Channel_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 4, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [7 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Channel_B_get_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 5, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [7 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Channel_B_put_new_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 6, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [7 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define void @Channel_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Channel)
  %18 = alloca i32, align 4
  %19 = alloca ptr, align 8
  %20 = alloca i64, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %20, align 4
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %19, align 4
  %22 = load ptr, ptr %10, align 8
  %23 = load ptr, ptr %5, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 56, ptr %23)
  %25 = load i32, ptr %16, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %19, align 8
  %31 = insertvalue { ptr, i32 } undef, ptr %30, 0
  %32 = load i32, ptr %18, align 4
  %33 = insertvalue { ptr, i32 } %31, i32 %32, 1
  call void %29(ptr %22, { ptr, i32 } %33) #16
  ret void
}

define i32 @Channel_get_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca { ptr, i32 }, align 8
  %6 = alloca i1, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca i64, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca [0 x ptr], align 8
  %14 = alloca {}, align 8
  %15 = alloca { ptr, i160 }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem18 = alloca i32, align 4
  %.reg2mem20 = alloca i32, align 4
  %.reg2mem22 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  store ptr %22, ptr %.reg2mem14, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  store ptr %23, ptr %.reload17, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr %28, ptr %.reg2mem10, align 8
  %29 = load i32, ptr %27, align 4
  %.reload13 = load ptr, ptr %.reg2mem10, align 8
  store i32 %29, ptr %.reload13, align 4
  call void @set_offset(ptr %17, ptr @Channel)
  br label %30

30:                                               ; preds = %91, %3
  store i1 true, ptr %4, align 1
  %31 = load i1, ptr %4, align 1
  br i1 %31, label %32, label %87

32:                                               ; preds = %30
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %33 = load ptr, ptr %.reload16, align 8
  %34 = load ptr, ptr %17, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 56, ptr %34)
  %.reload12 = load ptr, ptr %.reg2mem10, align 8
  %36 = load i32, ptr %.reload12, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr, i32 } %40(ptr %33) #17
  store { ptr, i32 } %41, ptr %5, align 8
  %42 = load ptr, ptr %5, align 8
  %43 = ptrtoint ptr %42 to i64
  %44 = icmp eq i64 %43, ptrtoint (ptr @nil_typ to i64)
  %45 = icmp eq i64 %43, 0
  %46 = or i1 %44, %45
  %47 = icmp eq i1 %46, false
  store i1 %47, ptr %6, align 1
  %48 = load i1, ptr %6, align 1
  %49 = zext i1 %48 to i32
  store i32 %49, ptr %.reg2mem8, align 4
  %50 = xor i1 %48, true
  %51 = zext i1 %50 to i32
  store i32 %51, ptr %.reg2mem6, align 4
  br i1 %48, label %52, label %53

52:                                               ; preds = %32
  br label %86

53:                                               ; preds = %32
  store ptr @Blocking, ptr %11, align 8
  %54 = load ptr, ptr %11, align 8
  %55 = getelementptr ptr, ptr %54, i32 6
  %56 = load ptr, ptr %55, align 8
  %57 = call { i64, i64 } @size_wrapper(ptr %56, ptr %11)
  %58 = extractvalue { i64, i64 } %57, 0
  %59 = call ptr @bump_malloc(i64 %58)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  store ptr @Blocking, ptr %12, align 8
  store ptr %59, ptr %60, align 8
  store i32 10, ptr %61, align 4
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %63, 0
  %65 = load ptr, ptr %60, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %65, 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 2
  %70 = load i32, ptr %61, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = call ptr @llvm.invariant.start.p0(i64 0, ptr %13)
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  %74 = getelementptr ptr, ptr %63, i32 %70
  %75 = load ptr, ptr %74, align 8
  %76 = call ptr @behavior_wrapper(ptr %75, { ptr, ptr, ptr, i32 } %71, ptr %14)
  call void %76({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %13) #15
  %77 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, i160 } undef, ptr %78, 0
  %80 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 1
  %81 = load i160, ptr %80, align 4
  %82 = insertvalue { ptr, i160 } %79, i160 %81, 1
  %83 = call ptr @get_current_coroutine()
  %84 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %83, i32 0, i32 4
  store { ptr, i160 } %82, ptr %84, align 8
  call void @coroutine_yield(ptr %83)
  %85 = load { ptr, i160 }, ptr %84, align 8
  store { ptr, i160 } %85, ptr %15, align 8
  br label %86

86:                                               ; preds = %53, %52
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  store i32 %.reload7, ptr %.reg2mem20, align 4
  store i32 %.reload9, ptr %.reg2mem22, align 4
  br label %88

87:                                               ; preds = %30
  store i32 0, ptr %.reg2mem20, align 4
  store i32 2, ptr %.reg2mem22, align 4
  br label %88

88:                                               ; preds = %87, %86
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  %.reload21 = load i32, ptr %.reg2mem20, align 4
  store i32 %.reload23, ptr %.reg2mem3, align 4
  store i32 %.reload21, ptr %.reg2mem1, align 4
  br label %89

89:                                               ; preds = %88
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %90 = trunc i32 %.reload2 to i1
  %.reload5 = load i32, ptr %.reg2mem3, align 4
  br i1 %90, label %91, label %92

91:                                               ; preds = %89
  br label %30

92:                                               ; preds = %89
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %93 = zext i32 %.reload4 to i64
  %94 = trunc i64 %93 to i32
  switch i32 %94, label %112 [
    i32 1, label %95
  ]

95:                                               ; preds = %92
  %96 = getelementptr { ptr, i32 }, ptr %5, i32 0, i32 1
  %97 = load i32, ptr %96, align 4
  store i32 %97, ptr %7, align 4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %10, align 4
  %98 = load i64, ptr %10, align 4
  store i64 %98, ptr %9, align 4
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %99 = load ptr, ptr %.reload15, align 8
  %100 = load ptr, ptr %17, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 56, ptr %100)
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %102 = load i32, ptr %.reload11, align 4
  %103 = getelementptr ptr, ptr %100, i32 %102
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = load ptr, ptr %9, align 8
  %108 = insertvalue { ptr, i32 } undef, ptr %107, 0
  %109 = load i32, ptr %8, align 4
  %110 = insertvalue { ptr, i32 } %108, i32 %109, 1
  call void %106(ptr %99, { ptr, i32 } %110) #16
  %111 = load i32, ptr %7, align 4
  store i32 %111, ptr %.reg2mem, align 4
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem18, align 4
  br label %113

112:                                              ; preds = %92
  store i32 poison, ptr %.reg2mem18, align 4
  br label %113

113:                                              ; preds = %112, %95
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  ret i32 %.reload19
}

define void @Channel_put_new_valuePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca { ptr, i160 }, align 8
  %12 = alloca { ptr, i32 }, align 8
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca i64, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  store ptr %22, ptr %.reg2mem8, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload12 = load ptr, ptr %.reg2mem8, align 8
  store ptr %23, ptr %.reload12, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr %28, ptr %.reg2mem3, align 8
  %29 = load i32, ptr %27, align 4
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  store i32 %29, ptr %.reload7, align 4
  call void @set_offset(ptr %17, ptr @Channel)
  %30 = alloca i32, align 4
  store i32 %3, ptr %30, align 4
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  %31 = load ptr, ptr %.reload11, align 8
  %32 = load ptr, ptr %17, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 56, ptr %32)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %34 = load i32, ptr %.reload6, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = call { ptr, i32 } %38(ptr %31) #17
  %40 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %39, ptr %40, align 8
  br label %41

41:                                               ; preds = %._crit_edge1, %4
  %42 = load ptr, ptr %40, align 8
  %43 = ptrtoint ptr %42 to i64
  %44 = icmp eq i64 %43, ptrtoint (ptr @nil_typ to i64)
  %45 = icmp eq i64 %43, 0
  %46 = or i1 %44, %45
  %47 = icmp eq i1 %46, false
  store i1 %47, ptr %5, align 1
  %48 = load i1, ptr %5, align 1
  store i1 %48, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %49, label %._crit_edge

._crit_edge:                                      ; preds = %41
  br label %98

49:                                               ; preds = %41
  %50 = getelementptr { ptr, i32 }, ptr %40, i32 0, i32 1
  %51 = load i32, ptr %50, align 4
  store i32 %51, ptr %6, align 4
  store ptr @Blocking, ptr %7, align 8
  %52 = load ptr, ptr %7, align 8
  %53 = getelementptr ptr, ptr %52, i32 6
  %54 = load ptr, ptr %53, align 8
  %55 = call { i64, i64 } @size_wrapper(ptr %54, ptr %7)
  %56 = extractvalue { i64, i64 } %55, 0
  %57 = call ptr @bump_malloc(i64 %56)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  store ptr @Blocking, ptr %8, align 8
  store ptr %57, ptr %58, align 8
  store i32 10, ptr %59, align 4
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = load ptr, ptr %58, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = load i32, ptr %59, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  %70 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %71 = call ptr @llvm.invariant.start.p0(i64 16, ptr %61)
  %72 = getelementptr ptr, ptr %61, i32 %68
  %73 = load ptr, ptr %72, align 8
  %74 = call ptr @behavior_wrapper(ptr %73, { ptr, ptr, ptr, i32 } %69, ptr %10)
  call void %74({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr %9) #15
  %75 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, i160 } undef, ptr %76, 0
  %78 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %79 = load i160, ptr %78, align 4
  %80 = insertvalue { ptr, i160 } %77, i160 %79, 1
  %81 = call ptr @get_current_coroutine()
  %82 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %81, i32 0, i32 4
  store { ptr, i160 } %80, ptr %82, align 8
  call void @coroutine_yield(ptr %81)
  %83 = load { ptr, i160 }, ptr %82, align 8
  store { ptr, i160 } %83, ptr %11, align 8
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %84 = load ptr, ptr %.reload10, align 8
  %85 = load ptr, ptr %17, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 56, ptr %85)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %87 = load i32, ptr %.reload5, align 4
  %88 = getelementptr ptr, ptr %85, i32 %87
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = call { ptr, i32 } %91(ptr %84) #17
  store { ptr, i32 } %92, ptr %12, align 8
  %93 = getelementptr { ptr, i32 }, ptr %12, i32 0, i32 0
  %94 = getelementptr { ptr, i32 }, ptr %40, i32 0, i32 0
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, i32 }, ptr %12, i32 0, i32 1
  %97 = load i32, ptr %96, align 4
  store i32 %97, ptr %50, align 4
  br label %98

98:                                               ; preds = %._crit_edge, %49
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %99

._crit_edge1:                                     ; preds = %98
  br label %41

99:                                               ; preds = %98
  %100 = load i32, ptr %30, align 4
  store i32 %100, ptr %13, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %15, align 4
  %101 = load i64, ptr %15, align 4
  store i64 %101, ptr %14, align 4
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %102 = load ptr, ptr %.reload9, align 8
  %103 = load ptr, ptr %17, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 56, ptr %103)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %105 = load i32, ptr %.reload4, align 4
  %106 = getelementptr ptr, ptr %103, i32 %105
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load ptr, ptr %14, align 8
  %111 = insertvalue { ptr, i32 } undef, ptr %110, 0
  %112 = load i32, ptr %13, align 4
  %113 = insertvalue { ptr, i32 } %111, i32 %112, 1
  call void %109(ptr %102, { ptr, i32 } %113) #16
  ret void
}

define { ptr, i32 } @Channel_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = insertvalue { ptr, i32 } %5, i32 %7, 1
  ret { ptr, i32 } %8
}

define void @Channel_setter_value(ptr %0, { ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load i32, ptr %8, align 4
  store i32 %10, ptr %9, align 4
  ret void
}

define { i64, i64 } @_data_size_IntIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_data_size_IntIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_data_size_MapIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 14, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [52 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 15, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @function_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 16, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [52 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 25, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [52 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @MapIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @IntIterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 416, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca ptr, align 8
  store { ptr } %4, ptr %59, align 8
  %60 = load ptr, ptr %12, align 8
  %61 = load ptr, ptr %7, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 416, ptr %61)
  %63 = load i32, ptr %18, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %59, align 8
  %70 = insertvalue { ptr } undef, ptr %69, 0
  call void %68(ptr %60, { ptr } %70) #16
  ret void
}

define void @IntIterable_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i32 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i32, align 4
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %10, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %23 = load i32, ptr %21, align 4
  store i32 %23, ptr %22, align 4
  call void @set_offset(ptr %11, ptr @IntIterable)
  %24 = alloca ptr, align 8
  store { ptr } %3, ptr %24, align 8
  %25 = load ptr, ptr %13, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %25, 0
  %27 = load ptr, ptr %16, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %27, 1
  %29 = load ptr, ptr %19, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 2
  %31 = load i32, ptr %22, align 4
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 %31, 3
  %33 = alloca [0 x ptr], align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr %33)
  %35 = call ptr @llvm.invariant.start.p0(i64 192, ptr %25)
  %36 = getelementptr ptr, ptr %25, i32 %31
  %37 = getelementptr ptr, ptr %36, i32 10
  %38 = load ptr, ptr %37, align 8
  %39 = alloca {}, align 8
  %40 = call ptr @behavior_wrapper(ptr %38, { ptr, ptr, ptr, i32 } %32, ptr %39)
  %41 = call { ptr, ptr, ptr, i32 } %40({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr %33) #15
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %55 = load i32, ptr %53, align 4
  store i32 %55, ptr %54, align 4
  call void @set_offset(ptr %43, ptr @IntIterator)
  %56 = alloca { ptr, ptr, ptr, i32 }, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %45, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %60 = load ptr, ptr %48, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %62 = load ptr, ptr %51, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %64 = load i32, ptr %54, align 4
  store i32 %64, ptr %63, align 4
  call void @set_offset(ptr %56, ptr @IntIterator)
  %65 = alloca i32, align 4
  %66 = alloca ptr, align 8
  %67 = alloca ptr, align 8
  %68 = alloca ptr, align 8
  %69 = load ptr, ptr %57, align 8
  store ptr %69, ptr %68, align 8
  %70 = load ptr, ptr %59, align 8
  store ptr %70, ptr %67, align 8
  %71 = load ptr, ptr %61, align 8
  store ptr %71, ptr %66, align 8
  %72 = load i32, ptr %63, align 4
  store i32 %72, ptr %65, align 4
  br label %73

73:                                               ; preds = %._crit_edge1, %4
  %74 = load ptr, ptr %68, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = load ptr, ptr %67, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %76, 1
  %78 = load ptr, ptr %66, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 2
  %80 = load i32, ptr %65, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, i32 %80, 3
  %82 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %83 = call ptr @llvm.invariant.start.p0(i64 16, ptr %74)
  %84 = getelementptr ptr, ptr %74, i32 %80
  %85 = load ptr, ptr %84, align 8
  %86 = call ptr @behavior_wrapper(ptr %85, { ptr, ptr, ptr, i32 } %81, ptr %6)
  %87 = call { ptr, i32 } %86({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr %5) #15
  store { ptr, i32 } %87, ptr %7, align 8
  %88 = load ptr, ptr %7, align 8
  %89 = ptrtoint ptr %88 to i64
  %90 = icmp eq i64 %89, ptrtoint (ptr @nil_typ to i64)
  %91 = icmp eq i64 %89, 0
  %92 = or i1 %90, %91
  %93 = icmp eq i1 %92, false
  store i1 %93, ptr %8, align 1
  %94 = load i1, ptr %8, align 1
  store i1 %94, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %95, label %._crit_edge

._crit_edge:                                      ; preds = %73
  br label %101

95:                                               ; preds = %73
  %96 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 1
  %97 = load i32, ptr %96, align 4
  store i32 %97, ptr %9, align 4
  %98 = load i32, ptr %9, align 4
  %99 = load ptr, ptr %24, align 8
  call void %99(i32 %98)
  %100 = load i32, ptr %9, align 4
  store i32 %100, ptr %7, align 4
  br label %101

101:                                              ; preds = %._crit_edge, %95
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %102

._crit_edge1:                                     ; preds = %101
  br label %73

102:                                              ; preds = %101
  ret void
}

define i32 @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr } %4) {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, i32 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = load i32, ptr %23, align 4
  store i32 %25, ptr %24, align 4
  call void @set_offset(ptr %13, ptr @IntIterable)
  %26 = alloca i32, align 4
  store i32 %3, ptr %26, align 4
  %27 = alloca ptr, align 8
  store { ptr } %4, ptr %27, align 8
  %28 = load ptr, ptr %15, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %30 = load ptr, ptr %18, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %30, 1
  %32 = load ptr, ptr %21, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 2
  %34 = load i32, ptr %24, align 4
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %34, 3
  %36 = alloca [0 x ptr], align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr %36)
  %38 = call ptr @llvm.invariant.start.p0(i64 192, ptr %28)
  %39 = getelementptr ptr, ptr %28, i32 %34
  %40 = getelementptr ptr, ptr %39, i32 10
  %41 = load ptr, ptr %40, align 8
  %42 = alloca {}, align 8
  %43 = call ptr @behavior_wrapper(ptr %41, { ptr, ptr, ptr, i32 } %35, ptr %42)
  %44 = call { ptr, ptr, ptr, i32 } %43({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr %36) #15
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %44, ptr %45, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterator)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %61 = load ptr, ptr %48, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %63 = load ptr, ptr %51, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %65 = load ptr, ptr %54, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %67 = load i32, ptr %57, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %59, ptr @IntIterator)
  %68 = alloca i32, align 4
  %69 = alloca ptr, align 8
  %70 = alloca ptr, align 8
  %71 = alloca ptr, align 8
  %72 = load ptr, ptr %60, align 8
  store ptr %72, ptr %71, align 8
  %73 = load ptr, ptr %62, align 8
  store ptr %73, ptr %70, align 8
  %74 = load ptr, ptr %64, align 8
  store ptr %74, ptr %69, align 8
  %75 = load i32, ptr %66, align 4
  store i32 %75, ptr %68, align 4
  br label %76

76:                                               ; preds = %._crit_edge1, %5
  %77 = load ptr, ptr %71, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %79 = load ptr, ptr %70, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %79, 1
  %81 = load ptr, ptr %69, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 2
  %83 = load i32, ptr %68, align 4
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %83, 3
  %85 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %86 = call ptr @llvm.invariant.start.p0(i64 16, ptr %77)
  %87 = getelementptr ptr, ptr %77, i32 %83
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %84, ptr %7)
  %90 = call { ptr, i32 } %89({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr %6) #15
  store { ptr, i32 } %90, ptr %8, align 8
  %91 = load ptr, ptr %8, align 8
  %92 = ptrtoint ptr %91 to i64
  %93 = icmp eq i64 %92, ptrtoint (ptr @nil_typ to i64)
  %94 = icmp eq i64 %92, 0
  %95 = or i1 %93, %94
  %96 = icmp eq i1 %95, false
  store i1 %96, ptr %9, align 1
  %97 = load i1, ptr %9, align 1
  store i1 %97, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %98, label %._crit_edge

._crit_edge:                                      ; preds = %76
  br label %107

98:                                               ; preds = %76
  %99 = getelementptr { ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load i32, ptr %99, align 4
  store i32 %100, ptr %10, align 4
  %101 = load i32, ptr %26, align 4
  %102 = load i32, ptr %10, align 4
  %103 = load ptr, ptr %27, align 8
  %104 = call i32 %103(i32 %101, i32 %102)
  store i32 %104, ptr %11, align 4
  %105 = load i32, ptr %11, align 4
  store i32 %105, ptr %26, align 4
  %106 = load i32, ptr %10, align 4
  store i32 %106, ptr %8, align 4
  br label %107

107:                                              ; preds = %._crit_edge, %98
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %108

._crit_edge1:                                     ; preds = %107
  br label %76

108:                                              ; preds = %107
  %109 = load i32, ptr %26, align 4
  ret i32 %109
}

define i1 @IntIterable_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i32 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i32, align 4
  %10 = alloca i1, align 1
  %11 = alloca i1, align 1
  %12 = alloca i1, align 1
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem10 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %13, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @IntIterable)
  %27 = alloca ptr, align 8
  store { ptr } %3, ptr %27, align 8
  %28 = load ptr, ptr %16, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %30 = load ptr, ptr %19, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %30, 1
  %32 = load ptr, ptr %22, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 2
  %34 = load i32, ptr %25, align 4
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %34, 3
  %36 = alloca [0 x ptr], align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr %36)
  %38 = call ptr @llvm.invariant.start.p0(i64 192, ptr %28)
  %39 = getelementptr ptr, ptr %28, i32 %34
  %40 = getelementptr ptr, ptr %39, i32 10
  %41 = load ptr, ptr %40, align 8
  %42 = alloca {}, align 8
  %43 = call ptr @behavior_wrapper(ptr %41, { ptr, ptr, ptr, i32 } %35, ptr %42)
  %44 = call { ptr, ptr, ptr, i32 } %43({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr %36) #15
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %44, ptr %45, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterator)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %61 = load ptr, ptr %48, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %63 = load ptr, ptr %51, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %65 = load ptr, ptr %54, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %67 = load i32, ptr %57, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %59, ptr @IntIterator)
  %68 = alloca i32, align 4
  %69 = alloca ptr, align 8
  %70 = alloca ptr, align 8
  %71 = alloca ptr, align 8
  %72 = load ptr, ptr %60, align 8
  store ptr %72, ptr %71, align 8
  %73 = load ptr, ptr %62, align 8
  store ptr %73, ptr %70, align 8
  %74 = load ptr, ptr %64, align 8
  store ptr %74, ptr %69, align 8
  %75 = load i32, ptr %66, align 4
  store i32 %75, ptr %68, align 4
  br label %76

76:                                               ; preds = %112, %4
  %77 = load ptr, ptr %71, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %79 = load ptr, ptr %70, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %79, 1
  %81 = load ptr, ptr %69, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 2
  %83 = load i32, ptr %68, align 4
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %83, 3
  %85 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %86 = call ptr @llvm.invariant.start.p0(i64 16, ptr %77)
  %87 = getelementptr ptr, ptr %77, i32 %83
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %84, ptr %6)
  %90 = call { ptr, i32 } %89({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr %5) #15
  store { ptr, i32 } %90, ptr %7, align 8
  %91 = load ptr, ptr %7, align 8
  %92 = ptrtoint ptr %91 to i64
  %93 = icmp eq i64 %92, ptrtoint (ptr @nil_typ to i64)
  %94 = icmp eq i64 %92, 0
  %95 = or i1 %93, %94
  %96 = icmp eq i1 %95, false
  store i1 %96, ptr %8, align 1
  %97 = load i1, ptr %8, align 1
  %98 = xor i1 %97, true
  store i1 %98, ptr %.reg2mem7, align 1
  %99 = select i1 %97, ptr %11, ptr %12
  store ptr %99, ptr %.reg2mem3, align 8
  br i1 %97, label %100, label %108

100:                                              ; preds = %76
  %101 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 1
  %102 = load i32, ptr %101, align 4
  store i32 %102, ptr %9, align 4
  %103 = load i32, ptr %9, align 4
  %104 = load ptr, ptr %27, align 8
  %105 = call i1 %104(i32 %103)
  store i1 %105, ptr %10, align 1
  %106 = load i1, ptr %10, align 1
  %107 = zext i1 %106 to i32
  store i32 %107, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem10, align 4
  br label %109

108:                                              ; preds = %76
  store i32 0, ptr %.reg2mem10, align 4
  br label %109

109:                                              ; preds = %108, %100
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload11, ptr %.reg2mem, align 4
  br label %110

110:                                              ; preds = %109
  %.reload = load i32, ptr %.reg2mem, align 4
  %111 = trunc i32 %.reload to i1
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %.reload9 = load i1, ptr %.reg2mem7, align 1
  br i1 %111, label %112, label %113

112:                                              ; preds = %110
  br label %76

113:                                              ; preds = %110
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  store i1 %.reload8, ptr %.reload5, align 1
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %114 = load i1, ptr %.reload4, align 1
  ret i1 %114
}

define i1 @IntIterable_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i32 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i32, align 4
  %10 = alloca i1, align 1
  %11 = alloca i1, align 1
  %12 = alloca i1, align 1
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem12 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %13, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @IntIterable)
  %27 = alloca ptr, align 8
  store { ptr } %3, ptr %27, align 8
  %28 = load ptr, ptr %16, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %30 = load ptr, ptr %19, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %30, 1
  %32 = load ptr, ptr %22, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 2
  %34 = load i32, ptr %25, align 4
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %34, 3
  %36 = alloca [0 x ptr], align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr %36)
  %38 = call ptr @llvm.invariant.start.p0(i64 192, ptr %28)
  %39 = getelementptr ptr, ptr %28, i32 %34
  %40 = getelementptr ptr, ptr %39, i32 10
  %41 = load ptr, ptr %40, align 8
  %42 = alloca {}, align 8
  %43 = call ptr @behavior_wrapper(ptr %41, { ptr, ptr, ptr, i32 } %35, ptr %42)
  %44 = call { ptr, ptr, ptr, i32 } %43({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr %36) #15
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %44, ptr %45, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterator)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %61 = load ptr, ptr %48, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %63 = load ptr, ptr %51, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %65 = load ptr, ptr %54, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %67 = load i32, ptr %57, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %59, ptr @IntIterator)
  %68 = alloca i32, align 4
  %69 = alloca ptr, align 8
  %70 = alloca ptr, align 8
  %71 = alloca ptr, align 8
  %72 = load ptr, ptr %60, align 8
  store ptr %72, ptr %71, align 8
  %73 = load ptr, ptr %62, align 8
  store ptr %73, ptr %70, align 8
  %74 = load ptr, ptr %64, align 8
  store ptr %74, ptr %69, align 8
  %75 = load i32, ptr %66, align 4
  store i32 %75, ptr %68, align 4
  br label %76

76:                                               ; preds = %116, %4
  %77 = load ptr, ptr %71, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %79 = load ptr, ptr %70, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %79, 1
  %81 = load ptr, ptr %69, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 2
  %83 = load i32, ptr %68, align 4
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %83, 3
  %85 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %86 = call ptr @llvm.invariant.start.p0(i64 16, ptr %77)
  %87 = getelementptr ptr, ptr %77, i32 %83
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %84, ptr %6)
  %90 = call { ptr, i32 } %89({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr %5) #15
  store { ptr, i32 } %90, ptr %7, align 8
  %91 = load ptr, ptr %7, align 8
  %92 = ptrtoint ptr %91 to i64
  %93 = icmp eq i64 %92, ptrtoint (ptr @nil_typ to i64)
  %94 = icmp eq i64 %92, 0
  %95 = or i1 %93, %94
  %96 = icmp eq i1 %95, false
  store i1 %96, ptr %8, align 1
  %97 = load i1, ptr %8, align 1
  store i1 %97, ptr %.reg2mem7, align 1
  %.reload11 = load i1, ptr %.reg2mem7, align 1
  %98 = select i1 %.reload11, ptr %11, ptr %12
  store ptr %98, ptr %.reg2mem3, align 8
  %.reload10 = load i1, ptr %.reg2mem7, align 1
  br i1 %.reload10, label %99, label %112

99:                                               ; preds = %76
  %100 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 1
  %101 = load i32, ptr %100, align 4
  store i32 %101, ptr %9, align 4
  %102 = load i32, ptr %9, align 4
  %103 = load ptr, ptr %27, align 8
  %104 = call i1 %103(i32 %102)
  store i1 %104, ptr %10, align 1
  %105 = load i1, ptr %10, align 1
  %106 = xor i1 %105, true
  %107 = zext i1 %106 to i32
  store i32 %107, ptr %.reg2mem1, align 4
  br i1 %105, label %108, label %109

108:                                              ; preds = %99
  br label %111

109:                                              ; preds = %99
  %110 = load i32, ptr %9, align 4
  store i32 %110, ptr %7, align 4
  br label %111

111:                                              ; preds = %109, %108
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem12, align 4
  br label %113

112:                                              ; preds = %76
  store i32 0, ptr %.reg2mem12, align 4
  br label %113

113:                                              ; preds = %112, %111
  %.reload13 = load i32, ptr %.reg2mem12, align 4
  store i32 %.reload13, ptr %.reg2mem, align 4
  br label %114

114:                                              ; preds = %113
  %.reload = load i32, ptr %.reg2mem, align 4
  %115 = trunc i32 %.reload to i1
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %.reload9 = load i1, ptr %.reg2mem7, align 1
  br i1 %115, label %116, label %117

116:                                              ; preds = %114
  br label %76

117:                                              ; preds = %114
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  store i1 %.reload8, ptr %.reload5, align 1
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %118 = load i1, ptr %.reload4, align 1
  ret i1 %118
}

define { ptr, ptr, ptr, i32 } @IntIterable_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntIterable)
  %19 = alloca ptr, align 8
  store { ptr } %3, ptr %19, align 8
  %20 = alloca [1 x ptr], align 8
  store ptr @MapIterable, ptr %20, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr ptr, ptr %21, i32 6
  %23 = load ptr, ptr %22, align 8
  %24 = call { i64, i64 } @size_wrapper(ptr %23, ptr %20)
  %25 = extractvalue { i64, i64 } %24, 0
  %26 = call ptr @bump_malloc(i64 %25)
  %27 = alloca i32, align 4
  %28 = alloca ptr, align 8
  %29 = alloca ptr, align 8
  %30 = alloca ptr, align 8
  store ptr @MapIterable, ptr %30, align 8
  store ptr %26, ptr %29, align 8
  store i32 10, ptr %27, align 4
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %8, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %35 = load ptr, ptr %11, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %37 = load ptr, ptr %14, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %39 = load i32, ptr %17, align 4
  store i32 %39, ptr %38, align 4
  call void @set_offset(ptr %31, ptr @IntIterable)
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
  %42 = load ptr, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 1
  %44 = load ptr, ptr %36, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %44, 2
  %46 = load i32, ptr %38, align 4
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %46, 3
  %48 = load ptr, ptr %19, align 8
  %49 = insertvalue { ptr } undef, ptr %48, 0
  %50 = load ptr, ptr %30, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %29, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %28, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %27, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  %58 = alloca [2 x ptr], align 8
  %59 = getelementptr [2 x ptr], ptr %58, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %59, align 8
  %60 = getelementptr [2 x ptr], ptr %58, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %60, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 4, ptr %58)
  %62 = call ptr @llvm.invariant.start.p0(i64 416, ptr %50)
  %63 = getelementptr ptr, ptr %50, i32 %56
  %64 = getelementptr ptr, ptr %63, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = alloca { ptr, ptr }, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  store ptr %40, ptr %67, align 8
  %68 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  store ptr @function_typ, ptr %68, align 8
  %69 = call ptr @behavior_wrapper(ptr %65, { ptr, ptr, ptr, i32 } %57, ptr %66)
  call void %69({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr %58, { ptr, ptr, ptr, i32 } %47, { ptr } %49) #15
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %30, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %74 = load ptr, ptr %29, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %76 = load ptr, ptr %28, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %78 = load i32, ptr %27, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %70, ptr @IntIterable)
  %79 = load ptr, ptr %71, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %73, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %75, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %77, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  ret { ptr, ptr, ptr, i32 } %86
}

define { ptr, ptr, ptr, i32 } @IntIterable_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntIterable)
  %19 = alloca ptr, align 8
  store { ptr } %3, ptr %19, align 8
  %20 = alloca [1 x ptr], align 8
  store ptr @FilterIterable, ptr %20, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr ptr, ptr %21, i32 6
  %23 = load ptr, ptr %22, align 8
  %24 = call { i64, i64 } @size_wrapper(ptr %23, ptr %20)
  %25 = extractvalue { i64, i64 } %24, 0
  %26 = call ptr @bump_malloc(i64 %25)
  %27 = alloca i32, align 4
  %28 = alloca ptr, align 8
  %29 = alloca ptr, align 8
  %30 = alloca ptr, align 8
  store ptr @FilterIterable, ptr %30, align 8
  store ptr %26, ptr %29, align 8
  store i32 10, ptr %27, align 4
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %8, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %35 = load ptr, ptr %11, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %37 = load ptr, ptr %14, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %39 = load i32, ptr %17, align 4
  store i32 %39, ptr %38, align 4
  call void @set_offset(ptr %31, ptr @IntIterable)
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
  %42 = load ptr, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 1
  %44 = load ptr, ptr %36, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %44, 2
  %46 = load i32, ptr %38, align 4
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %46, 3
  %48 = load ptr, ptr %19, align 8
  %49 = insertvalue { ptr } undef, ptr %48, 0
  %50 = load ptr, ptr %30, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %29, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %28, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %27, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  %58 = alloca [2 x ptr], align 8
  %59 = getelementptr [2 x ptr], ptr %58, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %59, align 8
  %60 = getelementptr [2 x ptr], ptr %58, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %60, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 4, ptr %58)
  %62 = call ptr @llvm.invariant.start.p0(i64 416, ptr %50)
  %63 = getelementptr ptr, ptr %50, i32 %56
  %64 = getelementptr ptr, ptr %63, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = alloca { ptr, ptr }, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  store ptr %40, ptr %67, align 8
  %68 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  store ptr @function_typ, ptr %68, align 8
  %69 = call ptr @behavior_wrapper(ptr %65, { ptr, ptr, ptr, i32 } %57, ptr %66)
  call void %69({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr %58, { ptr, ptr, ptr, i32 } %47, { ptr } %49) #15
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %30, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %74 = load ptr, ptr %29, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %76 = load ptr, ptr %28, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %78 = load i32, ptr %27, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %70, ptr @IntIterable)
  %79 = load ptr, ptr %71, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %73, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %75, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %77, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  ret { ptr, ptr, ptr, i32 } %86
}

define { ptr, ptr, ptr, i32 } @IntIterable_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntIterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @IntIterable)
  %33 = alloca [1 x ptr], align 8
  store ptr @ChainIterable, ptr %33, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr ptr, ptr %34, i32 6
  %36 = load ptr, ptr %35, align 8
  %37 = call { i64, i64 } @size_wrapper(ptr %36, ptr %33)
  %38 = extractvalue { i64, i64 } %37, 0
  %39 = call ptr @bump_malloc(i64 %38)
  %40 = alloca i32, align 4
  %41 = alloca ptr, align 8
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  store ptr @ChainIterable, ptr %43, align 8
  store ptr %39, ptr %42, align 8
  store i32 10, ptr %40, align 4
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %8, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %48 = load ptr, ptr %11, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %50 = load ptr, ptr %14, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %52 = load i32, ptr %17, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %44, ptr @IntIterable)
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %47, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %51, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %22, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %65 = load ptr, ptr %25, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %67 = load ptr, ptr %28, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %69 = load i32, ptr %31, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %61, ptr @IntIterable)
  %70 = load ptr, ptr %62, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %64, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %66, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %68, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = load ptr, ptr %43, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %42, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = load ptr, ptr %41, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 2
  %84 = load i32, ptr %40, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %84, 3
  %86 = alloca [2 x ptr], align 8
  %87 = getelementptr [2 x ptr], ptr %86, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %87, align 8
  %88 = getelementptr [2 x ptr], ptr %86, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 4, ptr %86)
  %90 = call ptr @llvm.invariant.start.p0(i64 416, ptr %78)
  %91 = getelementptr ptr, ptr %78, i32 %84
  %92 = getelementptr ptr, ptr %91, i32 2
  %93 = load ptr, ptr %92, align 8
  %94 = alloca { ptr, ptr }, align 8
  %95 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 0
  store ptr %53, ptr %95, align 8
  %96 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 1
  store ptr %70, ptr %96, align 8
  %97 = call ptr @behavior_wrapper(ptr %93, { ptr, ptr, ptr, i32 } %85, ptr %94)
  call void %97({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %86, { ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %77) #15
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %43, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %102 = load ptr, ptr %42, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %104 = load ptr, ptr %41, align 8
  store ptr %104, ptr %103, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %106 = load i32, ptr %40, align 4
  store i32 %106, ptr %105, align 4
  call void @set_offset(ptr %98, ptr @IntIterable)
  %107 = load ptr, ptr %99, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = load ptr, ptr %101, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 1
  %111 = load ptr, ptr %103, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %111, 2
  %113 = load i32, ptr %105, align 4
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %113, 3
  ret { ptr, ptr, ptr, i32 } %114
}

define { ptr, ptr, ptr, i32 } @IntIterable_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntIterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @IntIterable)
  %33 = alloca [1 x ptr], align 8
  store ptr @InterleaveIterable, ptr %33, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr ptr, ptr %34, i32 6
  %36 = load ptr, ptr %35, align 8
  %37 = call { i64, i64 } @size_wrapper(ptr %36, ptr %33)
  %38 = extractvalue { i64, i64 } %37, 0
  %39 = call ptr @bump_malloc(i64 %38)
  %40 = alloca i32, align 4
  %41 = alloca ptr, align 8
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  store ptr @InterleaveIterable, ptr %43, align 8
  store ptr %39, ptr %42, align 8
  store i32 10, ptr %40, align 4
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %8, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %48 = load ptr, ptr %11, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %50 = load ptr, ptr %14, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %52 = load i32, ptr %17, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %44, ptr @IntIterable)
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %47, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %51, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %22, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %65 = load ptr, ptr %25, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %67 = load ptr, ptr %28, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %69 = load i32, ptr %31, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %61, ptr @IntIterable)
  %70 = load ptr, ptr %62, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %64, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %66, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %68, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = load ptr, ptr %43, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %42, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = load ptr, ptr %41, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 2
  %84 = load i32, ptr %40, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %84, 3
  %86 = alloca [2 x ptr], align 8
  %87 = getelementptr [2 x ptr], ptr %86, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %87, align 8
  %88 = getelementptr [2 x ptr], ptr %86, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 4, ptr %86)
  %90 = call ptr @llvm.invariant.start.p0(i64 416, ptr %78)
  %91 = getelementptr ptr, ptr %78, i32 %84
  %92 = getelementptr ptr, ptr %91, i32 2
  %93 = load ptr, ptr %92, align 8
  %94 = alloca { ptr, ptr }, align 8
  %95 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 0
  store ptr %53, ptr %95, align 8
  %96 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 1
  store ptr %70, ptr %96, align 8
  %97 = call ptr @behavior_wrapper(ptr %93, { ptr, ptr, ptr, i32 } %85, ptr %94)
  call void %97({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %86, { ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %77) #15
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %43, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %102 = load ptr, ptr %42, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %104 = load ptr, ptr %41, align 8
  store ptr %104, ptr %103, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %106 = load i32, ptr %40, align 4
  store i32 %106, ptr %105, align 4
  call void @set_offset(ptr %98, ptr @IntIterable)
  %107 = load ptr, ptr %99, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = load ptr, ptr %101, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 1
  %111 = load ptr, ptr %103, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %111, 2
  %113 = load i32, ptr %105, align 4
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %113, 3
  ret { ptr, ptr, ptr, i32 } %114
}

define { ptr, ptr, ptr, i32 } @IntIterable_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntIterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @IntIterable)
  %33 = alloca [1 x ptr], align 8
  store ptr @ZipIterable, ptr %33, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr ptr, ptr %34, i32 6
  %36 = load ptr, ptr %35, align 8
  %37 = call { i64, i64 } @size_wrapper(ptr %36, ptr %33)
  %38 = extractvalue { i64, i64 } %37, 0
  %39 = call ptr @bump_malloc(i64 %38)
  %40 = alloca i32, align 4
  %41 = alloca ptr, align 8
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  store ptr @ZipIterable, ptr %43, align 8
  store ptr %39, ptr %42, align 8
  store i32 10, ptr %40, align 4
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %8, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %48 = load ptr, ptr %11, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %50 = load ptr, ptr %14, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %52 = load i32, ptr %17, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %44, ptr @IntIterable)
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %47, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %51, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %22, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %65 = load ptr, ptr %25, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %67 = load ptr, ptr %28, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %69 = load i32, ptr %31, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %61, ptr @IntIterable)
  %70 = load ptr, ptr %62, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %64, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %66, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %68, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = load ptr, ptr %43, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %42, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = load ptr, ptr %41, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 2
  %84 = load i32, ptr %40, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %84, 3
  %86 = alloca [2 x ptr], align 8
  %87 = getelementptr [2 x ptr], ptr %86, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %87, align 8
  %88 = getelementptr [2 x ptr], ptr %86, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 4, ptr %86)
  %90 = call ptr @llvm.invariant.start.p0(i64 96, ptr %78)
  %91 = getelementptr ptr, ptr %78, i32 %84
  %92 = getelementptr ptr, ptr %91, i32 2
  %93 = load ptr, ptr %92, align 8
  %94 = alloca { ptr, ptr }, align 8
  %95 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 0
  store ptr %53, ptr %95, align 8
  %96 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 1
  store ptr %70, ptr %96, align 8
  %97 = call ptr @behavior_wrapper(ptr %93, { ptr, ptr, ptr, i32 } %85, ptr %94)
  call void %97({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %86, { ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %77) #15
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %43, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %102 = load ptr, ptr %42, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %104 = load ptr, ptr %41, align 8
  store ptr %104, ptr %103, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %106 = load i32, ptr %40, align 4
  store i32 %106, ptr %105, align 4
  call void @set_offset(ptr %98, ptr @ZipIterable)
  %107 = load ptr, ptr %99, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = load ptr, ptr %101, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 1
  %111 = load ptr, ptr %103, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %111, 2
  %113 = load i32, ptr %105, align 4
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %113, 3
  ret { ptr, ptr, ptr, i32 } %114
}

define { ptr, ptr, ptr, i32 } @IntIterable_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntIterable)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @IntIterable)
  %33 = alloca [1 x ptr], align 8
  store ptr @ProductIterable, ptr %33, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr ptr, ptr %34, i32 6
  %36 = load ptr, ptr %35, align 8
  %37 = call { i64, i64 } @size_wrapper(ptr %36, ptr %33)
  %38 = extractvalue { i64, i64 } %37, 0
  %39 = call ptr @bump_malloc(i64 %38)
  %40 = alloca i32, align 4
  %41 = alloca ptr, align 8
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  store ptr @ProductIterable, ptr %43, align 8
  store ptr %39, ptr %42, align 8
  store i32 10, ptr %40, align 4
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %8, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %48 = load ptr, ptr %11, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %50 = load ptr, ptr %14, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %52 = load i32, ptr %17, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %44, ptr @IntIterable)
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %47, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %51, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %22, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %65 = load ptr, ptr %25, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %67 = load ptr, ptr %28, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %69 = load i32, ptr %31, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %61, ptr @IntIterable)
  %70 = load ptr, ptr %62, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %64, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %66, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %68, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = load ptr, ptr %43, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %42, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = load ptr, ptr %41, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 2
  %84 = load i32, ptr %40, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %84, 3
  %86 = alloca [2 x ptr], align 8
  %87 = getelementptr [2 x ptr], ptr %86, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %87, align 8
  %88 = getelementptr [2 x ptr], ptr %86, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 4, ptr %86)
  %90 = call ptr @llvm.invariant.start.p0(i64 96, ptr %78)
  %91 = getelementptr ptr, ptr %78, i32 %84
  %92 = getelementptr ptr, ptr %91, i32 2
  %93 = load ptr, ptr %92, align 8
  %94 = alloca { ptr, ptr }, align 8
  %95 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 0
  store ptr %53, ptr %95, align 8
  %96 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 1
  store ptr %70, ptr %96, align 8
  %97 = call ptr @behavior_wrapper(ptr %93, { ptr, ptr, ptr, i32 } %85, ptr %94)
  call void %97({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %86, { ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %77) #15
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %43, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %102 = load ptr, ptr %42, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %104 = load ptr, ptr %41, align 8
  store ptr %104, ptr %103, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %106 = load i32, ptr %40, align 4
  store i32 %106, ptr %105, align 4
  call void @set_offset(ptr %98, ptr @ProductIterable)
  %107 = load ptr, ptr %99, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = load ptr, ptr %101, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 1
  %111 = load ptr, ptr %103, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %111, 2
  %113 = load i32, ptr %105, align 4
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %113, 3
  ret { ptr, ptr, ptr, i32 } %114
}

define { ptr, ptr, ptr, i32 } @MapIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @MapIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 416, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %18) #17
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %26, ptr %27, align 8
  call void @assume_offset(ptr %27, ptr @IntIterable)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 192, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 10
  %45 = load ptr, ptr %44, align 8
  %46 = alloca {}, align 8
  %47 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, ptr, ptr, i32 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40) #15
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %48, ptr %49, align 8
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = load i32, ptr %60, align 4
  store i32 %62, ptr %61, align 4
  call void @set_offset(ptr %50, ptr @IntIterator)
  %63 = load ptr, ptr %10, align 8
  %64 = load ptr, ptr %5, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 416, ptr %64)
  %66 = load i32, ptr %16, align 4
  %67 = getelementptr ptr, ptr %64, i32 %66
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr }, ptr %69, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = call { ptr } %71(ptr %63) #17
  %73 = alloca ptr, align 8
  store { ptr } %72, ptr %73, align 8
  %74 = alloca [1 x ptr], align 8
  store ptr @MapIterator, ptr %74, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr ptr, ptr %75, i32 6
  %77 = load ptr, ptr %76, align 8
  %78 = call { i64, i64 } @size_wrapper(ptr %77, ptr %74)
  %79 = extractvalue { i64, i64 } %78, 0
  %80 = call ptr @bump_malloc(i64 %79)
  %81 = alloca i32, align 4
  %82 = alloca ptr, align 8
  %83 = alloca ptr, align 8
  %84 = alloca ptr, align 8
  store ptr @MapIterator, ptr %84, align 8
  store ptr %80, ptr %83, align 8
  store i32 10, ptr %81, align 4
  %85 = load ptr, ptr %10, align 8
  %86 = load ptr, ptr %5, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 416, ptr %86)
  %88 = load i32, ptr %16, align 4
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call { ptr, ptr, ptr, i32 } %92(ptr %85) #17
  %94 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %93, ptr %94, align 8
  call void @assume_offset(ptr %94, ptr @IntIterable)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %105, 3
  %107 = alloca [0 x ptr], align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 0, ptr %107)
  %109 = call ptr @llvm.invariant.start.p0(i64 192, ptr %96)
  %110 = getelementptr ptr, ptr %96, i32 %105
  %111 = getelementptr ptr, ptr %110, i32 10
  %112 = load ptr, ptr %111, align 8
  %113 = alloca {}, align 8
  %114 = call ptr @behavior_wrapper(ptr %112, { ptr, ptr, ptr, i32 } %106, ptr %113)
  %115 = call { ptr, ptr, ptr, i32 } %114({ ptr, ptr, ptr, i32 } %106, { ptr, ptr, ptr, i32 } %106, ptr %107) #15
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %115, ptr %116, align 8
  %117 = alloca { ptr, ptr, ptr, i32 }, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 0
  %120 = load ptr, ptr %118, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 2
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  %129 = load i32, ptr %127, align 4
  store i32 %129, ptr %128, align 4
  call void @set_offset(ptr %117, ptr @IntIterator)
  %130 = load ptr, ptr %10, align 8
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 416, ptr %131)
  %133 = load i32, ptr %16, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr } %138(ptr %130) #17
  %140 = alloca ptr, align 8
  store { ptr } %139, ptr %140, align 8
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %143 = load ptr, ptr %119, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %145 = load ptr, ptr %122, align 8
  store ptr %145, ptr %144, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %147 = load ptr, ptr %125, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %149 = load i32, ptr %128, align 4
  store i32 %149, ptr %148, align 4
  call void @set_offset(ptr %141, ptr @IntIterator)
  %150 = load ptr, ptr %142, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %150, 0
  %152 = load ptr, ptr %144, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %152, 1
  %154 = load ptr, ptr %146, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 2
  %156 = load i32, ptr %148, align 4
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 %156, 3
  %158 = load ptr, ptr %140, align 8
  %159 = insertvalue { ptr } undef, ptr %158, 0
  %160 = load ptr, ptr %84, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %160, 0
  %162 = load ptr, ptr %83, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %162, 1
  %164 = load ptr, ptr %82, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 2
  %166 = load i32, ptr %81, align 4
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, i32 %166, 3
  %168 = alloca [2 x ptr], align 8
  %169 = getelementptr [2 x ptr], ptr %168, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %169, align 8
  %170 = getelementptr [2 x ptr], ptr %168, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %170, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 4, ptr %168)
  %172 = call ptr @llvm.invariant.start.p0(i64 64, ptr %160)
  %173 = getelementptr ptr, ptr %160, i32 %166
  %174 = getelementptr ptr, ptr %173, i32 2
  %175 = load ptr, ptr %174, align 8
  %176 = alloca { ptr, ptr }, align 8
  %177 = getelementptr { ptr, ptr }, ptr %176, i32 0, i32 0
  store ptr %150, ptr %177, align 8
  %178 = getelementptr { ptr, ptr }, ptr %176, i32 0, i32 1
  store ptr @function_typ, ptr %178, align 8
  %179 = call ptr @behavior_wrapper(ptr %175, { ptr, ptr, ptr, i32 } %167, ptr %176)
  call void %179({ ptr, ptr, ptr, i32 } %167, { ptr, ptr, ptr, i32 } %167, ptr %168, { ptr, ptr, ptr, i32 } %157, { ptr } %159) #15
  %180 = alloca { ptr, ptr, ptr, i32 }, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 0
  %182 = load ptr, ptr %84, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 1
  %184 = load ptr, ptr %83, align 8
  store ptr %184, ptr %183, align 8
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 2
  %186 = load ptr, ptr %82, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 3
  %188 = load i32, ptr %81, align 4
  store i32 %188, ptr %187, align 4
  call void @set_offset(ptr %180, ptr @Iterator)
  %189 = load ptr, ptr %181, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %189, 0
  %191 = load ptr, ptr %183, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %190, ptr %191, 1
  %193 = load ptr, ptr %185, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %193, 2
  %195 = load i32, ptr %187, align 4
  %196 = insertvalue { ptr, ptr, ptr, i32 } %194, i32 %195, 3
  ret { ptr, ptr, ptr, i32 } %196
}

define { i64, i64 } @_data_size_MapIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 4, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [8 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @MapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 5, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @MapIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @IntIterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 64, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca ptr, align 8
  store { ptr } %4, ptr %59, align 8
  %60 = load ptr, ptr %12, align 8
  %61 = load ptr, ptr %7, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 64, ptr %61)
  %63 = load i32, ptr %18, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %59, align 8
  %70 = insertvalue { ptr } undef, ptr %69, 0
  call void %68(ptr %60, { ptr } %70) #16
  ret void
}

define { ptr, i32 } @MapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca ptr, align 8
  %12 = alloca i64, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem13 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %13, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  store ptr %19, ptr %.reg2mem9, align 8
  %20 = load ptr, ptr %18, align 8
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  store ptr %20, ptr %.reload12, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  store ptr %25, ptr %.reg2mem5, align 8
  %26 = load i32, ptr %24, align 4
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  store i32 %26, ptr %.reload8, align 4
  call void @set_offset(ptr %14, ptr @MapIterator)
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %27 = load ptr, ptr %.reload11, align 8
  %28 = load ptr, ptr %14, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 64, ptr %28)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %30 = load i32, ptr %.reload7, align 4
  %31 = getelementptr ptr, ptr %28, i32 %30
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr { ptr, ptr }, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr, ptr, ptr, i32 } %34(ptr %27) #17
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %35, ptr %36, align 8
  call void @assume_offset(ptr %36, ptr @IntIterator)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [0 x ptr], align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %52 = getelementptr ptr, ptr %38, i32 %47
  %53 = load ptr, ptr %52, align 8
  %54 = alloca {}, align 8
  %55 = call ptr @behavior_wrapper(ptr %53, { ptr, ptr, ptr, i32 } %48, ptr %54)
  %56 = call { ptr, i32 } %55({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49) #15
  %57 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %56, ptr %57, align 8
  %58 = load ptr, ptr %57, align 8
  %59 = ptrtoint ptr %58 to i64
  %60 = icmp eq i64 %59, ptrtoint (ptr @nil_typ to i64)
  %61 = icmp eq i64 %59, 0
  %62 = or i1 %60, %61
  %63 = icmp eq i1 %62, false
  %64 = alloca i1, align 1
  store i1 %63, ptr %64, align 1
  %65 = load i1, ptr %64, align 1
  br i1 %65, label %66, label %88

66:                                               ; preds = %3
  %67 = getelementptr { ptr, i32 }, ptr %57, i32 0, i32 1
  %68 = load i32, ptr %67, align 4
  store i32 %68, ptr %4, align 4
  %69 = load i32, ptr %4, align 4
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %70 = load ptr, ptr %.reload10, align 8
  %71 = load ptr, ptr %14, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 64, ptr %71)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %73 = load i32, ptr %.reload6, align 4
  %74 = getelementptr ptr, ptr %71, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr } %78(ptr %70) #17
  store { ptr } %79, ptr %5, align 8
  %80 = load ptr, ptr %5, align 8
  %81 = call i32 %80(i32 %69)
  store i32 %81, ptr %6, align 4
  %82 = load i32, ptr %6, align 4
  store i32 %82, ptr %7, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %9, align 4
  %83 = load i64, ptr %9, align 4
  store i64 %83, ptr %8, align 4
  %84 = load ptr, ptr %8, align 8
  %85 = insertvalue { ptr, i32 } undef, ptr %84, 0
  %86 = load i32, ptr %7, align 4
  %87 = insertvalue { ptr, i32 } %85, i32 %86, 1
  store { ptr, i32 } %87, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem13, align 8
  br label %94

88:                                               ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %12, align 4
  %89 = load i64, ptr %12, align 4
  store i64 %89, ptr %11, align 4
  %90 = load ptr, ptr %11, align 8
  %91 = insertvalue { ptr, i32 } undef, ptr %90, 0
  %92 = load i32, ptr %10, align 4
  %93 = insertvalue { ptr, i32 } %91, i32 %92, 1
  store { ptr, i32 } %93, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem13, align 8
  br label %94

94:                                               ; preds = %88, %66
  %.reload14 = load { ptr, i32 }, ptr %.reg2mem13, align 8
  store { ptr, i32 } %.reload14, ptr %.reg2mem, align 8
  br label %95

95:                                               ; preds = %94
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define { ptr } @MapIterator_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @MapIterator_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterator_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @MapIterator_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { i64, i64 } @_data_size_ProductIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @ProductIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @IntIterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @IntIterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 4, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [12 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ProductIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 5, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [12 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ProductIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ProductIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @IntIterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 96, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @IntIterable)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %62, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %68, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %71, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %82 = load ptr, ptr %12, align 8
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 96, ptr %83)
  %85 = load i32, ptr %18, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %74, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %76, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %80, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  call void %90(ptr %82, { ptr, ptr, ptr, i32 } %98) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ProductIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 96, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %18) #17
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %26, ptr %27, align 8
  call void @assume_offset(ptr %27, ptr @IntIterable)
  %28 = load ptr, ptr %10, align 8
  %29 = load ptr, ptr %5, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 96, ptr %29)
  %31 = load i32, ptr %16, align 4
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call { ptr, ptr, ptr, i32 } %36(ptr %28) #17
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %37, ptr %38, align 8
  call void @assume_offset(ptr %38, ptr @IntIterable)
  %39 = alloca [1 x ptr], align 8
  store ptr @ProductIterator, ptr %39, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr ptr, ptr %40, i32 6
  %42 = load ptr, ptr %41, align 8
  %43 = call { i64, i64 } @size_wrapper(ptr %42, ptr %39)
  %44 = extractvalue { i64, i64 } %43, 0
  %45 = call ptr @bump_malloc(i64 %44)
  %46 = alloca i32, align 4
  %47 = alloca ptr, align 8
  %48 = alloca ptr, align 8
  %49 = alloca ptr, align 8
  store ptr @ProductIterator, ptr %49, align 8
  store ptr %45, ptr %48, align 8
  store i32 10, ptr %46, align 4
  %50 = load ptr, ptr %10, align 8
  %51 = load ptr, ptr %5, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 96, ptr %51)
  %53 = load i32, ptr %16, align 4
  %54 = getelementptr ptr, ptr %51, i32 %53
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = call { ptr, ptr, ptr, i32 } %57(ptr %50) #17
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %58, ptr %59, align 8
  call void @assume_offset(ptr %59, ptr @IntIterable)
  %60 = load ptr, ptr %10, align 8
  %61 = load ptr, ptr %5, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 96, ptr %61)
  %63 = load i32, ptr %16, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = call { ptr, ptr, ptr, i32 } %68(ptr %60) #17
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %69, ptr %70, align 8
  call void @assume_offset(ptr %70, ptr @IntIterable)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %83 = load i32, ptr %81, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %71, ptr @IntIterable)
  %84 = load ptr, ptr %73, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %76, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %79, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %82, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  %92 = alloca { ptr, ptr, ptr, i32 }, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 0
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 1
  %98 = load ptr, ptr %96, align 8
  store ptr %98, ptr %97, align 8
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 2
  %101 = load ptr, ptr %99, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 3
  %104 = load i32, ptr %102, align 4
  store i32 %104, ptr %103, align 4
  call void @set_offset(ptr %92, ptr @IntIterable)
  %105 = load ptr, ptr %94, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = load ptr, ptr %97, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %107, 1
  %109 = load ptr, ptr %100, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 2
  %111 = load i32, ptr %103, align 4
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %111, 3
  %113 = load ptr, ptr %49, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %113, 0
  %115 = load ptr, ptr %48, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %115, 1
  %117 = load ptr, ptr %47, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %117, 2
  %119 = load i32, ptr %46, align 4
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %119, 3
  %121 = alloca [2 x ptr], align 8
  %122 = getelementptr [2 x ptr], ptr %121, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %122, align 8
  %123 = getelementptr [2 x ptr], ptr %121, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %123, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 4, ptr %121)
  %125 = call ptr @llvm.invariant.start.p0(i64 64, ptr %113)
  %126 = getelementptr ptr, ptr %113, i32 %119
  %127 = getelementptr ptr, ptr %126, i32 4
  %128 = load ptr, ptr %127, align 8
  %129 = alloca { ptr, ptr }, align 8
  %130 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 0
  store ptr %84, ptr %130, align 8
  %131 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 1
  store ptr %105, ptr %131, align 8
  %132 = call ptr @behavior_wrapper(ptr %128, { ptr, ptr, ptr, i32 } %120, ptr %129)
  call void %132({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr %121, { ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %112) #15
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %135 = load ptr, ptr %49, align 8
  store ptr %135, ptr %134, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %137 = load ptr, ptr %48, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %139 = load ptr, ptr %47, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %141 = load i32, ptr %46, align 4
  store i32 %141, ptr %140, align 4
  call void @set_offset(ptr %133, ptr @Iterator)
  %142 = load ptr, ptr %134, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %144 = load ptr, ptr %136, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %144, 1
  %146 = load ptr, ptr %138, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %146, 2
  %148 = load i32, ptr %140, align 4
  %149 = insertvalue { ptr, ptr, ptr, i32 } %147, i32 %148, 3
  ret { ptr, ptr, ptr, i32 } %149
}

define { i64, i64 } @_data_size_ProductIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @IntIterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @IntIterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 6, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [8 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ProductIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ProductIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %34, align 8
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @IntIterable)
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %37, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %52 = load ptr, ptr %40, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %54 = load ptr, ptr %43, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %56 = load i32, ptr %46, align 4
  store i32 %56, ptr %55, align 4
  call void @set_offset(ptr %48, ptr @IntIterable)
  %57 = load ptr, ptr %12, align 8
  %58 = load ptr, ptr %7, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 64, ptr %58)
  %60 = load i32, ptr %18, align 4
  %61 = getelementptr ptr, ptr %58, i32 %60
  %62 = getelementptr ptr, ptr %61, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr { ptr, ptr }, ptr %63, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %49, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = load ptr, ptr %51, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 1
  %70 = load ptr, ptr %53, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 2
  %72 = load i32, ptr %55, align 4
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %72, 3
  call void %65(ptr %57, { ptr, ptr, ptr, i32 } %73) #16
  %74 = load ptr, ptr %23, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = load ptr, ptr %26, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %76, 1
  %78 = load ptr, ptr %29, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 2
  %80 = load i32, ptr %32, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, i32 %80, 3
  %82 = alloca [0 x ptr], align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 0, ptr %82)
  %84 = call ptr @llvm.invariant.start.p0(i64 192, ptr %74)
  %85 = getelementptr ptr, ptr %74, i32 %80
  %86 = getelementptr ptr, ptr %85, i32 10
  %87 = load ptr, ptr %86, align 8
  %88 = alloca {}, align 8
  %89 = call ptr @behavior_wrapper(ptr %87, { ptr, ptr, ptr, i32 } %81, ptr %88)
  %90 = call { ptr, ptr, ptr, i32 } %89({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr %82) #15
  %91 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %90, ptr %91, align 8
  %92 = alloca { ptr, ptr, ptr, i32 }, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 0
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 0
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 1
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 1
  %98 = load ptr, ptr %96, align 8
  store ptr %98, ptr %97, align 8
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 2
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 2
  %101 = load ptr, ptr %99, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 3
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 3
  %104 = load i32, ptr %102, align 4
  store i32 %104, ptr %103, align 4
  call void @set_offset(ptr %92, ptr @IntIterator)
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %107 = load ptr, ptr %94, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %109 = load ptr, ptr %97, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %111 = load ptr, ptr %100, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %113 = load i32, ptr %103, align 4
  store i32 %113, ptr %112, align 4
  call void @set_offset(ptr %105, ptr @IntIterator)
  %114 = load ptr, ptr %12, align 8
  %115 = load ptr, ptr %7, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 64, ptr %115)
  %117 = load i32, ptr %18, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = load ptr, ptr %118, align 8
  %120 = getelementptr { ptr, ptr }, ptr %119, i32 0, i32 1
  %121 = load ptr, ptr %120, align 8
  %122 = load ptr, ptr %106, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %122, 0
  %124 = load ptr, ptr %108, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 1
  %126 = load ptr, ptr %110, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %126, 2
  %128 = load i32, ptr %112, align 4
  %129 = insertvalue { ptr, ptr, ptr, i32 } %127, i32 %128, 3
  call void %121(ptr %114, { ptr, ptr, ptr, i32 } %129) #16
  %130 = load ptr, ptr %12, align 8
  %131 = load ptr, ptr %7, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 64, ptr %131)
  %133 = load i32, ptr %18, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 2
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #17
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %139, ptr %140, align 8
  call void @assume_offset(ptr %140, ptr @IntIterable)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %145, 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %148, 2
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %151 = load i32, ptr %150, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %151, 3
  %153 = alloca [0 x ptr], align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 0, ptr %153)
  %155 = call ptr @llvm.invariant.start.p0(i64 192, ptr %142)
  %156 = getelementptr ptr, ptr %142, i32 %151
  %157 = getelementptr ptr, ptr %156, i32 10
  %158 = load ptr, ptr %157, align 8
  %159 = alloca {}, align 8
  %160 = call ptr @behavior_wrapper(ptr %158, { ptr, ptr, ptr, i32 } %152, ptr %159)
  %161 = call { ptr, ptr, ptr, i32 } %160({ ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %152, ptr %153) #15
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %161, ptr %162, align 8
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %163, ptr @IntIterator)
  %176 = alloca { ptr, ptr, ptr, i32 }, align 8
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 0
  %178 = load ptr, ptr %165, align 8
  store ptr %178, ptr %177, align 8
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 1
  %180 = load ptr, ptr %168, align 8
  store ptr %180, ptr %179, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 2
  %182 = load ptr, ptr %171, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 3
  %184 = load i32, ptr %174, align 4
  store i32 %184, ptr %183, align 4
  call void @set_offset(ptr %176, ptr @IntIterator)
  %185 = load ptr, ptr %12, align 8
  %186 = load ptr, ptr %7, align 8
  %187 = call ptr @llvm.invariant.start.p0(i64 64, ptr %186)
  %188 = load i32, ptr %18, align 4
  %189 = getelementptr ptr, ptr %186, i32 %188
  %190 = getelementptr ptr, ptr %189, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = getelementptr { ptr, ptr }, ptr %191, i32 0, i32 1
  %193 = load ptr, ptr %192, align 8
  %194 = load ptr, ptr %177, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %194, 0
  %196 = load ptr, ptr %179, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %196, 1
  %198 = load ptr, ptr %181, align 8
  %199 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %198, 2
  %200 = load i32, ptr %183, align 4
  %201 = insertvalue { ptr, ptr, ptr, i32 } %199, i32 %200, 3
  call void %193(ptr %185, { ptr, ptr, ptr, i32 } %201) #16
  %202 = load ptr, ptr %12, align 8
  %203 = load ptr, ptr %7, align 8
  %204 = call ptr @llvm.invariant.start.p0(i64 64, ptr %203)
  %205 = load i32, ptr %18, align 4
  %206 = getelementptr ptr, ptr %203, i32 %205
  %207 = load ptr, ptr %206, align 8
  %208 = getelementptr { ptr, ptr }, ptr %207, i32 0, i32 0
  %209 = load ptr, ptr %208, align 8
  %210 = call { ptr, ptr, ptr, i32 } %209(ptr %202) #17
  %211 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %210, ptr %211, align 8
  call void @assume_offset(ptr %211, ptr @IntIterator)
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 0
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %213, 0
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 1
  %216 = load ptr, ptr %215, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %216, 1
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 2
  %219 = load ptr, ptr %218, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %217, ptr %219, 2
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 3
  %222 = load i32, ptr %221, align 4
  %223 = insertvalue { ptr, ptr, ptr, i32 } %220, i32 %222, 3
  %224 = alloca [0 x ptr], align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 0, ptr %224)
  %226 = call ptr @llvm.invariant.start.p0(i64 16, ptr %213)
  %227 = getelementptr ptr, ptr %213, i32 %222
  %228 = load ptr, ptr %227, align 8
  %229 = alloca {}, align 8
  %230 = call ptr @behavior_wrapper(ptr %228, { ptr, ptr, ptr, i32 } %223, ptr %229)
  %231 = call { ptr, i32 } %230({ ptr, ptr, ptr, i32 } %223, { ptr, ptr, ptr, i32 } %223, ptr %224) #15
  %232 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %231, ptr %232, align 8
  %233 = load ptr, ptr %12, align 8
  %234 = load ptr, ptr %7, align 8
  %235 = call ptr @llvm.invariant.start.p0(i64 64, ptr %234)
  %236 = load i32, ptr %18, align 4
  %237 = getelementptr ptr, ptr %234, i32 %236
  %238 = getelementptr ptr, ptr %237, i32 3
  %239 = load ptr, ptr %238, align 8
  %240 = getelementptr { ptr, ptr }, ptr %239, i32 0, i32 1
  %241 = load ptr, ptr %240, align 8
  %242 = getelementptr { ptr, i32 }, ptr %232, i32 0, i32 0
  %243 = load ptr, ptr %242, align 8
  %244 = insertvalue { ptr, i32 } undef, ptr %243, 0
  %245 = getelementptr { ptr, i32 }, ptr %232, i32 0, i32 1
  %246 = load i32, ptr %245, align 4
  %247 = insertvalue { ptr, i32 } %244, i32 %246, 1
  call void %241(ptr %233, { ptr, i32 } %247) #16
  ret void
}

define { ptr, i64 } @ProductIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca i32, align 4
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [0 x ptr], align 8
  %8 = alloca {}, align 8
  %9 = alloca { ptr, i32 }, align 8
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i64, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i64, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca [0 x ptr], align 8
  %19 = alloca {}, align 8
  %20 = alloca { ptr, i32 }, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = alloca [0 x ptr], align 8
  %23 = alloca {}, align 8
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = alloca { ptr, ptr, ptr, i32 }, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca { ptr, i32 }, align 8
  %28 = alloca i64, align 8
  %29 = alloca ptr, align 8
  %30 = alloca i64, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem33 = alloca { ptr, i64 }, align 8
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem37 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %31, align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  store ptr %37, ptr %.reg2mem24, align 8
  %38 = load ptr, ptr %36, align 8
  %.reload32 = load ptr, ptr %.reg2mem24, align 8
  store ptr %38, ptr %.reload32, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr %43, ptr %.reg2mem15, align 8
  %44 = load i32, ptr %42, align 4
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  store i32 %44, ptr %.reload23, align 4
  call void @set_offset(ptr %32, ptr @ProductIterator)
  %.reload31 = load ptr, ptr %.reg2mem24, align 8
  %45 = load ptr, ptr %.reload31, align 8
  %46 = load ptr, ptr %32, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 64, ptr %46)
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %48 = load i32, ptr %.reload22, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 3
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call { ptr, i32 } %53(ptr %45) #17
  %55 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %54, ptr %55, align 8
  br label %56

56:                                               ; preds = %235, %3
  %57 = load ptr, ptr %55, align 8
  %58 = ptrtoint ptr %57 to i64
  %59 = icmp eq i64 %58, ptrtoint (ptr @nil_typ to i64)
  %60 = icmp eq i64 %58, 0
  %61 = or i1 %59, %60
  %62 = icmp eq i1 %61, false
  store i1 %62, ptr %4, align 1
  %63 = load i1, ptr %4, align 1
  br i1 %63, label %64, label %231

64:                                               ; preds = %56
  %65 = getelementptr { ptr, i32 }, ptr %55, i32 0, i32 1
  store ptr %65, ptr %.reg2mem12, align 8
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %66 = load i32, ptr %.reload14, align 4
  store i32 %66, ptr %5, align 4
  %.reload30 = load ptr, ptr %.reg2mem24, align 8
  %67 = load ptr, ptr %.reload30, align 8
  %68 = load ptr, ptr %32, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 64, ptr %68)
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %70 = load i32, ptr %.reload21, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = getelementptr ptr, ptr %71, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = call { ptr, ptr, ptr, i32 } %75(ptr %67) #17
  store { ptr, ptr, ptr, i32 } %76, ptr %6, align 8
  call void @assume_offset(ptr %6, ptr @IntIterator)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 2
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %87, 3
  %89 = call ptr @llvm.invariant.start.p0(i64 0, ptr %7)
  %90 = call ptr @llvm.invariant.start.p0(i64 16, ptr %78)
  %91 = getelementptr ptr, ptr %78, i32 %87
  %92 = load ptr, ptr %91, align 8
  %93 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %88, ptr %8)
  %94 = call { ptr, i32 } %93({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %7) #15
  store { ptr, i32 } %94, ptr %9, align 8
  %95 = load ptr, ptr %9, align 8
  %96 = ptrtoint ptr %95 to i64
  %97 = icmp eq i64 %96, ptrtoint (ptr @nil_typ to i64)
  %98 = icmp eq i64 %96, 0
  %99 = or i1 %97, %98
  %100 = icmp eq i1 %99, false
  store i1 %100, ptr %10, align 1
  %101 = load i1, ptr %10, align 1
  %102 = zext i1 %101 to i32
  store i32 %102, ptr %.reg2mem10, align 4
  %103 = xor i1 %101, true
  %104 = zext i1 %103 to i32
  store i32 %104, ptr %.reg2mem8, align 4
  br i1 %101, label %105, label %106

105:                                              ; preds = %64
  br label %230

106:                                              ; preds = %64
  %.reload29 = load ptr, ptr %.reg2mem24, align 8
  %107 = load ptr, ptr %.reload29, align 8
  %108 = load ptr, ptr %32, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 64, ptr %108)
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  %110 = load i32, ptr %.reload20, align 4
  %111 = getelementptr ptr, ptr %108, i32 %110
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 0
  %114 = load ptr, ptr %113, align 8
  %115 = call { ptr, ptr, ptr, i32 } %114(ptr %107) #17
  store { ptr, ptr, ptr, i32 } %115, ptr %17, align 8
  call void @assume_offset(ptr %17, ptr @IntIterator)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %126, 3
  %128 = call ptr @llvm.invariant.start.p0(i64 0, ptr %18)
  %129 = call ptr @llvm.invariant.start.p0(i64 16, ptr %117)
  %130 = getelementptr ptr, ptr %117, i32 %126
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @behavior_wrapper(ptr %131, { ptr, ptr, ptr, i32 } %127, ptr %19)
  %133 = call { ptr, i32 } %132({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %18) #15
  store { ptr, i32 } %133, ptr %20, align 8
  %.reload28 = load ptr, ptr %.reg2mem24, align 8
  %134 = load ptr, ptr %.reload28, align 8
  %135 = load ptr, ptr %32, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 64, ptr %135)
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %137 = load i32, ptr %.reload19, align 4
  %138 = getelementptr ptr, ptr %135, i32 %137
  %139 = getelementptr ptr, ptr %138, i32 3
  %140 = load ptr, ptr %139, align 8
  %141 = getelementptr { ptr, ptr }, ptr %140, i32 0, i32 1
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, i32 }, ptr %20, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, i32 } undef, ptr %144, 0
  %146 = getelementptr { ptr, i32 }, ptr %20, i32 0, i32 1
  %147 = load i32, ptr %146, align 4
  %148 = insertvalue { ptr, i32 } %145, i32 %147, 1
  call void %142(ptr %134, { ptr, i32 } %148) #16
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %149 = load ptr, ptr %.reload27, align 8
  %150 = load ptr, ptr %32, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 64, ptr %150)
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %152 = load i32, ptr %.reload18, align 4
  %153 = getelementptr ptr, ptr %150, i32 %152
  %154 = getelementptr ptr, ptr %153, i32 2
  %155 = load ptr, ptr %154, align 8
  %156 = getelementptr { ptr, ptr }, ptr %155, i32 0, i32 0
  %157 = load ptr, ptr %156, align 8
  %158 = call { ptr, ptr, ptr, i32 } %157(ptr %149) #17
  store { ptr, ptr, ptr, i32 } %158, ptr %21, align 8
  call void @assume_offset(ptr %21, ptr @IntIterable)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %160, 0
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %163, 1
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %166 = load ptr, ptr %165, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %166, 2
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %169 = load i32, ptr %168, align 4
  %170 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %169, 3
  %171 = call ptr @llvm.invariant.start.p0(i64 0, ptr %22)
  %172 = call ptr @llvm.invariant.start.p0(i64 192, ptr %160)
  %173 = getelementptr ptr, ptr %160, i32 %169
  %174 = getelementptr ptr, ptr %173, i32 10
  %175 = load ptr, ptr %174, align 8
  %176 = call ptr @behavior_wrapper(ptr %175, { ptr, ptr, ptr, i32 } %170, ptr %23)
  %177 = call { ptr, ptr, ptr, i32 } %176({ ptr, ptr, ptr, i32 } %170, { ptr, ptr, ptr, i32 } %170, ptr %22) #15
  store { ptr, ptr, ptr, i32 } %177, ptr %24, align 8
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %180 = load ptr, ptr %178, align 8
  store ptr %180, ptr %179, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %183 = load ptr, ptr %181, align 8
  store ptr %183, ptr %182, align 8
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %186 = load ptr, ptr %184, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %189 = load i32, ptr %187, align 4
  store i32 %189, ptr %188, align 4
  call void @set_offset(ptr %25, ptr @IntIterator)
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %191 = load ptr, ptr %179, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %193 = load ptr, ptr %182, align 8
  store ptr %193, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %195 = load ptr, ptr %185, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %197 = load i32, ptr %188, align 4
  store i32 %197, ptr %196, align 4
  call void @set_offset(ptr %26, ptr @IntIterator)
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  %198 = load ptr, ptr %.reload26, align 8
  %199 = load ptr, ptr %32, align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 64, ptr %199)
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %201 = load i32, ptr %.reload17, align 4
  %202 = getelementptr ptr, ptr %199, i32 %201
  %203 = getelementptr ptr, ptr %202, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = getelementptr { ptr, ptr }, ptr %204, i32 0, i32 1
  %206 = load ptr, ptr %205, align 8
  %207 = load ptr, ptr %190, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %207, 0
  %209 = load ptr, ptr %192, align 8
  %210 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %209, 1
  %211 = load ptr, ptr %194, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %211, 2
  %213 = load i32, ptr %196, align 4
  %214 = insertvalue { ptr, ptr, ptr, i32 } %212, i32 %213, 3
  call void %206(ptr %198, { ptr, ptr, ptr, i32 } %214) #16
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %215 = load ptr, ptr %.reload25, align 8
  %216 = load ptr, ptr %32, align 8
  %217 = call ptr @llvm.invariant.start.p0(i64 64, ptr %216)
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %218 = load i32, ptr %.reload16, align 4
  %219 = getelementptr ptr, ptr %216, i32 %218
  %220 = getelementptr ptr, ptr %219, i32 3
  %221 = load ptr, ptr %220, align 8
  %222 = getelementptr { ptr, ptr }, ptr %221, i32 0, i32 0
  %223 = load ptr, ptr %222, align 8
  %224 = call { ptr, i32 } %223(ptr %215) #17
  store { ptr, i32 } %224, ptr %27, align 8
  %225 = getelementptr { ptr, i32 }, ptr %27, i32 0, i32 0
  %226 = getelementptr { ptr, i32 }, ptr %55, i32 0, i32 0
  %227 = load ptr, ptr %225, align 8
  store ptr %227, ptr %226, align 8
  %228 = getelementptr { ptr, i32 }, ptr %27, i32 0, i32 1
  %229 = load i32, ptr %228, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  store i32 %229, ptr %.reload13, align 4
  br label %230

230:                                              ; preds = %106, %105
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem35, align 4
  store i32 %.reload11, ptr %.reg2mem37, align 4
  br label %232

231:                                              ; preds = %56
  store i32 0, ptr %.reg2mem35, align 4
  store i32 2, ptr %.reg2mem37, align 4
  br label %232

232:                                              ; preds = %231, %230
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload38, ptr %.reg2mem5, align 4
  store i32 %.reload36, ptr %.reg2mem3, align 4
  br label %233

233:                                              ; preds = %232
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %234 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %234, label %235, label %236

235:                                              ; preds = %233
  br label %56

236:                                              ; preds = %233
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %237 = zext i32 %.reload6 to i64
  %238 = trunc i64 %237 to i32
  switch i32 %238, label %253 [
    i32 1, label %239
  ]

239:                                              ; preds = %236
  %240 = getelementptr { ptr, i32 }, ptr %9, i32 0, i32 1
  %241 = load i32, ptr %240, align 4
  store i32 %241, ptr %11, align 4
  %242 = load i32, ptr %5, align 4
  %243 = load i32, ptr %11, align 4
  store i32 %242, ptr %13, align 4
  store i32 %243, ptr %12, align 4
  %244 = getelementptr { i32, i32 }, ptr %14, i32 0, i32 0
  %245 = load i32, ptr %13, align 4
  store i32 %245, ptr %244, align 4
  %246 = getelementptr { i32, i32 }, ptr %14, i32 0, i32 1
  %247 = load i32, ptr %12, align 4
  store i32 %247, ptr %246, align 4
  store i64 ptrtoint (ptr @tuple_typ to i64), ptr %16, align 4
  %248 = load i64, ptr %16, align 4
  store i64 %248, ptr %15, align 4
  %249 = load ptr, ptr %15, align 8
  %250 = insertvalue { ptr, i64 } undef, ptr %249, 0
  %251 = load i64, ptr %14, align 4
  %252 = insertvalue { ptr, i64 } %250, i64 %251, 1
  store { ptr, i64 } %252, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem33, align 8
  br label %259

253:                                              ; preds = %236
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %30, align 4
  %254 = load i64, ptr %30, align 4
  store i64 %254, ptr %29, align 4
  %255 = load ptr, ptr %29, align 8
  %256 = insertvalue { ptr, i64 } undef, ptr %255, 0
  %257 = load i64, ptr %28, align 4
  %258 = insertvalue { ptr, i64 } %256, i64 %257, 1
  store { ptr, i64 } %258, ptr %.reg2mem, align 8
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  store { ptr, i64 } %.reload, ptr %.reg2mem33, align 8
  br label %259

259:                                              ; preds = %253, %239
  %.reload34 = load { ptr, i64 }, ptr %.reg2mem33, align 8
  ret { ptr, i64 } %.reload34
}

define { ptr, i32 } @ProductIterator_getter_current_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, i32 } %22, i32 %24, 1
  ret { ptr, i32 } %25
}

define void @ProductIterator_setter_current_first(ptr %0, { ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ProductIterator_setter_second_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ProductIterator_setter_second_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_first_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ProductIterator_setter_first_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ProductIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ProductIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { i64, i64 } @_data_size_IntTupleIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_data_size_ZipIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @ZipIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @IntIterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @IntIterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 4, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [12 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ZipIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 5, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [12 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ZipIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ZipIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @IntIterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 96, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @IntIterable)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %62, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %68, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %71, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %82 = load ptr, ptr %12, align 8
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 96, ptr %83)
  %85 = load i32, ptr %18, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %74, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %76, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %80, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  call void %90(ptr %82, { ptr, ptr, ptr, i32 } %98) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ZipIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 96, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %18) #17
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %26, ptr %27, align 8
  call void @assume_offset(ptr %27, ptr @IntIterable)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 192, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 10
  %45 = load ptr, ptr %44, align 8
  %46 = alloca {}, align 8
  %47 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, ptr, ptr, i32 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40) #15
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %48, ptr %49, align 8
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = load i32, ptr %60, align 4
  store i32 %62, ptr %61, align 4
  call void @set_offset(ptr %50, ptr @IntIterator)
  %63 = load ptr, ptr %10, align 8
  %64 = load ptr, ptr %5, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 96, ptr %64)
  %66 = load i32, ptr %16, align 4
  %67 = getelementptr ptr, ptr %64, i32 %66
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr }, ptr %69, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = call { ptr, ptr, ptr, i32 } %71(ptr %63) #17
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %72, ptr %73, align 8
  call void @assume_offset(ptr %73, ptr @IntIterable)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %78, 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %84 = load i32, ptr %83, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %84, 3
  %86 = alloca [0 x ptr], align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 0, ptr %86)
  %88 = call ptr @llvm.invariant.start.p0(i64 192, ptr %75)
  %89 = getelementptr ptr, ptr %75, i32 %84
  %90 = getelementptr ptr, ptr %89, i32 10
  %91 = load ptr, ptr %90, align 8
  %92 = alloca {}, align 8
  %93 = call ptr @behavior_wrapper(ptr %91, { ptr, ptr, ptr, i32 } %85, ptr %92)
  %94 = call { ptr, ptr, ptr, i32 } %93({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %86) #15
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %94, ptr %95, align 8
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = load ptr, ptr %100, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 3
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = load i32, ptr %106, align 4
  store i32 %108, ptr %107, align 4
  call void @set_offset(ptr %96, ptr @IntIterator)
  %109 = alloca [1 x ptr], align 8
  store ptr @ZipIterator, ptr %109, align 8
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr ptr, ptr %110, i32 6
  %112 = load ptr, ptr %111, align 8
  %113 = call { i64, i64 } @size_wrapper(ptr %112, ptr %109)
  %114 = extractvalue { i64, i64 } %113, 0
  %115 = call ptr @bump_malloc(i64 %114)
  %116 = alloca i32, align 4
  %117 = alloca ptr, align 8
  %118 = alloca ptr, align 8
  %119 = alloca ptr, align 8
  store ptr @ZipIterator, ptr %119, align 8
  store ptr %115, ptr %118, align 8
  store i32 10, ptr %116, align 4
  %120 = load ptr, ptr %10, align 8
  %121 = load ptr, ptr %5, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 96, ptr %121)
  %123 = load i32, ptr %16, align 4
  %124 = getelementptr ptr, ptr %121, i32 %123
  %125 = load ptr, ptr %124, align 8
  %126 = getelementptr { ptr, ptr }, ptr %125, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = call { ptr, ptr, ptr, i32 } %127(ptr %120) #17
  %129 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %128, ptr %129, align 8
  call void @assume_offset(ptr %129, ptr @IntIterable)
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %131, 0
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 1
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 2
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %140 = load i32, ptr %139, align 4
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, i32 %140, 3
  %142 = alloca [0 x ptr], align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 0, ptr %142)
  %144 = call ptr @llvm.invariant.start.p0(i64 192, ptr %131)
  %145 = getelementptr ptr, ptr %131, i32 %140
  %146 = getelementptr ptr, ptr %145, i32 10
  %147 = load ptr, ptr %146, align 8
  %148 = alloca {}, align 8
  %149 = call ptr @behavior_wrapper(ptr %147, { ptr, ptr, ptr, i32 } %141, ptr %148)
  %150 = call { ptr, ptr, ptr, i32 } %149({ ptr, ptr, ptr, i32 } %141, { ptr, ptr, ptr, i32 } %141, ptr %142) #15
  %151 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %150, ptr %151, align 8
  %152 = alloca { ptr, ptr, ptr, i32 }, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 0
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %155 = load ptr, ptr %153, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %158 = load ptr, ptr %156, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 2
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %161 = load ptr, ptr %159, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 3
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %164 = load i32, ptr %162, align 4
  store i32 %164, ptr %163, align 4
  call void @set_offset(ptr %152, ptr @IntIterator)
  %165 = load ptr, ptr %10, align 8
  %166 = load ptr, ptr %5, align 8
  %167 = call ptr @llvm.invariant.start.p0(i64 96, ptr %166)
  %168 = load i32, ptr %16, align 4
  %169 = getelementptr ptr, ptr %166, i32 %168
  %170 = getelementptr ptr, ptr %169, i32 1
  %171 = load ptr, ptr %170, align 8
  %172 = getelementptr { ptr, ptr }, ptr %171, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  %174 = call { ptr, ptr, ptr, i32 } %173(ptr %165) #17
  %175 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %174, ptr %175, align 8
  call void @assume_offset(ptr %175, ptr @IntIterable)
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 0
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %177, 0
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 1
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 1
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 2
  %183 = load ptr, ptr %182, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %183, 2
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 3
  %186 = load i32, ptr %185, align 4
  %187 = insertvalue { ptr, ptr, ptr, i32 } %184, i32 %186, 3
  %188 = alloca [0 x ptr], align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 0, ptr %188)
  %190 = call ptr @llvm.invariant.start.p0(i64 192, ptr %177)
  %191 = getelementptr ptr, ptr %177, i32 %186
  %192 = getelementptr ptr, ptr %191, i32 10
  %193 = load ptr, ptr %192, align 8
  %194 = alloca {}, align 8
  %195 = call ptr @behavior_wrapper(ptr %193, { ptr, ptr, ptr, i32 } %187, ptr %194)
  %196 = call { ptr, ptr, ptr, i32 } %195({ ptr, ptr, ptr, i32 } %187, { ptr, ptr, ptr, i32 } %187, ptr %188) #15
  %197 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %196, ptr %197, align 8
  %198 = alloca { ptr, ptr, ptr, i32 }, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 0
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 1
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 2
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 3
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %210 = load i32, ptr %208, align 4
  store i32 %210, ptr %209, align 4
  call void @set_offset(ptr %198, ptr @IntIterator)
  %211 = alloca { ptr, ptr, ptr, i32 }, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 0
  %213 = load ptr, ptr %154, align 8
  store ptr %213, ptr %212, align 8
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 1
  %215 = load ptr, ptr %157, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 2
  %217 = load ptr, ptr %160, align 8
  store ptr %217, ptr %216, align 8
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 3
  %219 = load i32, ptr %163, align 4
  store i32 %219, ptr %218, align 4
  call void @set_offset(ptr %211, ptr @IntIterator)
  %220 = load ptr, ptr %212, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %220, 0
  %222 = load ptr, ptr %214, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } %221, ptr %222, 1
  %224 = load ptr, ptr %216, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %224, 2
  %226 = load i32, ptr %218, align 4
  %227 = insertvalue { ptr, ptr, ptr, i32 } %225, i32 %226, 3
  %228 = alloca { ptr, ptr, ptr, i32 }, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %230 = load ptr, ptr %200, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %232 = load ptr, ptr %203, align 8
  store ptr %232, ptr %231, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %234 = load ptr, ptr %206, align 8
  store ptr %234, ptr %233, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %236 = load i32, ptr %209, align 4
  store i32 %236, ptr %235, align 4
  call void @set_offset(ptr %228, ptr @IntIterator)
  %237 = load ptr, ptr %229, align 8
  %238 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %237, 0
  %239 = load ptr, ptr %231, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %238, ptr %239, 1
  %241 = load ptr, ptr %233, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %241, 2
  %243 = load i32, ptr %235, align 4
  %244 = insertvalue { ptr, ptr, ptr, i32 } %242, i32 %243, 3
  %245 = load ptr, ptr %119, align 8
  %246 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %245, 0
  %247 = load ptr, ptr %118, align 8
  %248 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %247, 1
  %249 = load ptr, ptr %117, align 8
  %250 = insertvalue { ptr, ptr, ptr, i32 } %248, ptr %249, 2
  %251 = load i32, ptr %116, align 4
  %252 = insertvalue { ptr, ptr, ptr, i32 } %250, i32 %251, 3
  %253 = alloca [2 x ptr], align 8
  %254 = getelementptr [2 x ptr], ptr %253, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %254, align 8
  %255 = getelementptr [2 x ptr], ptr %253, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %255, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 4, ptr %253)
  %257 = call ptr @llvm.invariant.start.p0(i64 64, ptr %245)
  %258 = getelementptr ptr, ptr %245, i32 %251
  %259 = getelementptr ptr, ptr %258, i32 2
  %260 = load ptr, ptr %259, align 8
  %261 = alloca { ptr, ptr }, align 8
  %262 = getelementptr { ptr, ptr }, ptr %261, i32 0, i32 0
  store ptr %220, ptr %262, align 8
  %263 = getelementptr { ptr, ptr }, ptr %261, i32 0, i32 1
  store ptr %237, ptr %263, align 8
  %264 = call ptr @behavior_wrapper(ptr %260, { ptr, ptr, ptr, i32 } %252, ptr %261)
  call void %264({ ptr, ptr, ptr, i32 } %252, { ptr, ptr, ptr, i32 } %252, ptr %253, { ptr, ptr, ptr, i32 } %227, { ptr, ptr, ptr, i32 } %244) #15
  %265 = alloca { ptr, ptr, ptr, i32 }, align 8
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 0
  %267 = load ptr, ptr %119, align 8
  store ptr %267, ptr %266, align 8
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 1
  %269 = load ptr, ptr %118, align 8
  store ptr %269, ptr %268, align 8
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 2
  %271 = load ptr, ptr %117, align 8
  store ptr %271, ptr %270, align 8
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 3
  %273 = load i32, ptr %116, align 4
  store i32 %273, ptr %272, align 4
  call void @set_offset(ptr %265, ptr @Iterator)
  %274 = load ptr, ptr %266, align 8
  %275 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %274, 0
  %276 = load ptr, ptr %268, align 8
  %277 = insertvalue { ptr, ptr, ptr, i32 } %275, ptr %276, 1
  %278 = load ptr, ptr %270, align 8
  %279 = insertvalue { ptr, ptr, ptr, i32 } %277, ptr %278, 2
  %280 = load i32, ptr %272, align 4
  %281 = insertvalue { ptr, ptr, ptr, i32 } %279, i32 %280, 3
  ret { ptr, ptr, ptr, i32 } %281
}

define { i64, i64 } @_data_size_ZipIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @ZipIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @IntIterator, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @IntIterator to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 4, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [8 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ZipIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 5, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ZipIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ZipIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @IntIterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 64, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @IntIterator)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %62, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %68, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %71, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @IntIterator)
  %82 = load ptr, ptr %12, align 8
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 64, ptr %83)
  %85 = load i32, ptr %18, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %74, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %76, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %80, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  call void %90(ptr %82, { ptr, ptr, ptr, i32 } %98) #16
  ret void
}

define { ptr, i64 } @ZipIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca ptr, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i64, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca { ptr, i64 }, align 8
  %.reg2mem7 = alloca { ptr, i64 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem14 = alloca { ptr, i64 }, align 8
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca { ptr, i64 }, align 8
  %.reg2mem20 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @ZipIterator)
  %32 = load ptr, ptr %24, align 8
  %33 = load ptr, ptr %19, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 64, ptr %33)
  %35 = load i32, ptr %30, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call { ptr, ptr, ptr, i32 } %39(ptr %32) #17
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %40, ptr %41, align 8
  call void @assume_offset(ptr %41, ptr @IntIterator)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %52, 3
  %54 = alloca [0 x ptr], align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 0, ptr %54)
  %56 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %57 = getelementptr ptr, ptr %43, i32 %52
  %58 = load ptr, ptr %57, align 8
  %59 = alloca {}, align 8
  %60 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %53, ptr %59)
  %61 = call { ptr, i32 } %60({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54) #15
  %62 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %61, ptr %62, align 8
  %63 = load ptr, ptr %24, align 8
  %64 = load ptr, ptr %19, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 64, ptr %64)
  %66 = load i32, ptr %30, align 4
  %67 = getelementptr ptr, ptr %64, i32 %66
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr }, ptr %69, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = call { ptr, ptr, ptr, i32 } %71(ptr %63) #17
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %72, ptr %73, align 8
  call void @assume_offset(ptr %73, ptr @IntIterator)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %78, 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %84 = load i32, ptr %83, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %84, 3
  %86 = alloca [0 x ptr], align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 0, ptr %86)
  %88 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %89 = getelementptr ptr, ptr %75, i32 %84
  %90 = load ptr, ptr %89, align 8
  %91 = alloca {}, align 8
  %92 = call ptr @behavior_wrapper(ptr %90, { ptr, ptr, ptr, i32 } %85, ptr %91)
  %93 = call { ptr, i32 } %92({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %86) #15
  %94 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %93, ptr %94, align 8
  %95 = load ptr, ptr %62, align 8
  %96 = ptrtoint ptr %95 to i64
  %97 = icmp eq i64 %96, ptrtoint (ptr @nil_typ to i64)
  %98 = icmp eq i64 %96, 0
  %99 = or i1 %97, %98
  %100 = icmp eq i1 %99, false
  %101 = alloca i1, align 1
  store i1 %100, ptr %101, align 1
  %102 = load i1, ptr %101, align 1
  br i1 %102, label %103, label %137

103:                                              ; preds = %3
  %104 = getelementptr { ptr, i32 }, ptr %62, i32 0, i32 1
  store ptr %104, ptr %.reg2mem11, align 8
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %105 = load i32, ptr %.reload13, align 4
  store i32 %105, ptr %4, align 4
  %106 = load ptr, ptr %94, align 8
  %107 = ptrtoint ptr %106 to i64
  %108 = icmp eq i64 %107, ptrtoint (ptr @nil_typ to i64)
  %109 = icmp eq i64 %107, 0
  %110 = or i1 %108, %109
  %111 = icmp eq i1 %110, false
  store i1 %111, ptr %5, align 1
  %112 = load i1, ptr %5, align 1
  %113 = xor i1 %112, true
  %114 = zext i1 %113 to i32
  store i32 %114, ptr %.reg2mem9, align 4
  br i1 %112, label %115, label %129

115:                                              ; preds = %103
  %116 = getelementptr { ptr, i32 }, ptr %94, i32 0, i32 1
  %117 = load i32, ptr %116, align 4
  store i32 %117, ptr %6, align 4
  %118 = load i32, ptr %4, align 4
  %119 = load i32, ptr %6, align 4
  store i32 %118, ptr %8, align 4
  store i32 %119, ptr %7, align 4
  %120 = getelementptr { i32, i32 }, ptr %9, i32 0, i32 0
  %121 = load i32, ptr %8, align 4
  store i32 %121, ptr %120, align 4
  %122 = getelementptr { i32, i32 }, ptr %9, i32 0, i32 1
  %123 = load i32, ptr %7, align 4
  store i32 %123, ptr %122, align 4
  store i64 ptrtoint (ptr @tuple_typ to i64), ptr %11, align 4
  %124 = load i64, ptr %11, align 4
  store i64 %124, ptr %10, align 4
  %125 = load ptr, ptr %10, align 8
  %126 = insertvalue { ptr, i64 } undef, ptr %125, 0
  %127 = load i64, ptr %9, align 4
  %128 = insertvalue { ptr, i64 } %126, i64 %127, 1
  store { ptr, i64 } %128, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i64 }, ptr %.reg2mem7, align 8
  store { ptr, i64 } %.reload8, ptr %.reg2mem20, align 8
  br label %135

129:                                              ; preds = %103
  %130 = load i32, ptr %4, align 4
  store i32 %130, ptr %12, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %14, align 4
  %131 = load i64, ptr %14, align 4
  store i64 %131, ptr %13, align 4
  %132 = getelementptr { ptr, i32 }, ptr %62, i32 0, i32 0
  %133 = load ptr, ptr %13, align 8
  store ptr %133, ptr %132, align 8
  %134 = load i32, ptr %12, align 4
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  store i32 %134, ptr %.reload12, align 4
  store { ptr, i64 } poison, ptr %.reg2mem20, align 8
  br label %135

135:                                              ; preds = %129, %115
  %.reload21 = load { ptr, i64 }, ptr %.reg2mem20, align 8
  store { ptr, i64 } %.reload21, ptr %.reg2mem5, align 8
  br label %136

136:                                              ; preds = %135
  %.reload6 = load { ptr, i64 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem16, align 4
  store { ptr, i64 } %.reload6, ptr %.reg2mem18, align 8
  br label %138

137:                                              ; preds = %3
  store i32 1, ptr %.reg2mem16, align 4
  store { ptr, i64 } poison, ptr %.reg2mem18, align 8
  br label %138

138:                                              ; preds = %137, %136
  %.reload19 = load { ptr, i64 }, ptr %.reg2mem18, align 8
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  store { ptr, i64 } %.reload19, ptr %.reg2mem3, align 8
  store i32 %.reload17, ptr %.reg2mem1, align 4
  br label %139

139:                                              ; preds = %138
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %140 = zext i32 %.reload2 to i64
  %141 = trunc i64 %140 to i32
  switch i32 %141, label %143 [
    i32 0, label %142
  ]

142:                                              ; preds = %139
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem14, align 8
  br label %149

143:                                              ; preds = %139
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %17, align 4
  %144 = load i64, ptr %17, align 4
  store i64 %144, ptr %16, align 4
  %145 = load ptr, ptr %16, align 8
  %146 = insertvalue { ptr, i64 } undef, ptr %145, 0
  %147 = load i64, ptr %15, align 4
  %148 = insertvalue { ptr, i64 } %146, i64 %147, 1
  store { ptr, i64 } %148, ptr %.reg2mem, align 8
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  store { ptr, i64 } %.reload, ptr %.reg2mem14, align 8
  br label %149

149:                                              ; preds = %143, %142
  %.reload15 = load { ptr, i64 }, ptr %.reg2mem14, align 8
  ret { ptr, i64 } %.reload15
}

define { ptr, ptr, ptr, i32 } @ZipIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ZipIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ZipIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { i64, i64 } @_data_size_IntTupleIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { ptr, ptr, ptr, i32 } @ZipIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ZipIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ZipIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { i64, i64 } @_data_size_InterleaveIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @InterleaveIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @IntIterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @IntIterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 14, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [52 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 15, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @function_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 16, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [52 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 25, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [52 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @InterleaveIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @InterleaveIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @IntIterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 416, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @IntIterable)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %62, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %68, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %71, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %82 = load ptr, ptr %12, align 8
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 416, ptr %83)
  %85 = load i32, ptr %18, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %74, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %76, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %80, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  call void %90(ptr %82, { ptr, ptr, ptr, i32 } %98) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @InterleaveIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 416, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %18) #17
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %26, ptr %27, align 8
  call void @assume_offset(ptr %27, ptr @IntIterable)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 192, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 10
  %45 = load ptr, ptr %44, align 8
  %46 = alloca {}, align 8
  %47 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, ptr, ptr, i32 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40) #15
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %48, ptr %49, align 8
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = load i32, ptr %60, align 4
  store i32 %62, ptr %61, align 4
  call void @set_offset(ptr %50, ptr @IntIterator)
  %63 = load ptr, ptr %10, align 8
  %64 = load ptr, ptr %5, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 416, ptr %64)
  %66 = load i32, ptr %16, align 4
  %67 = getelementptr ptr, ptr %64, i32 %66
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr }, ptr %69, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = call { ptr, ptr, ptr, i32 } %71(ptr %63) #17
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %72, ptr %73, align 8
  call void @assume_offset(ptr %73, ptr @IntIterable)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %78, 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %84 = load i32, ptr %83, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %84, 3
  %86 = alloca [0 x ptr], align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 0, ptr %86)
  %88 = call ptr @llvm.invariant.start.p0(i64 192, ptr %75)
  %89 = getelementptr ptr, ptr %75, i32 %84
  %90 = getelementptr ptr, ptr %89, i32 10
  %91 = load ptr, ptr %90, align 8
  %92 = alloca {}, align 8
  %93 = call ptr @behavior_wrapper(ptr %91, { ptr, ptr, ptr, i32 } %85, ptr %92)
  %94 = call { ptr, ptr, ptr, i32 } %93({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %86) #15
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %94, ptr %95, align 8
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = load ptr, ptr %100, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 3
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = load i32, ptr %106, align 4
  store i32 %108, ptr %107, align 4
  call void @set_offset(ptr %96, ptr @IntIterator)
  %109 = alloca [1 x ptr], align 8
  store ptr @InterleaveIterator, ptr %109, align 8
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr ptr, ptr %110, i32 6
  %112 = load ptr, ptr %111, align 8
  %113 = call { i64, i64 } @size_wrapper(ptr %112, ptr %109)
  %114 = extractvalue { i64, i64 } %113, 0
  %115 = call ptr @bump_malloc(i64 %114)
  %116 = alloca i32, align 4
  %117 = alloca ptr, align 8
  %118 = alloca ptr, align 8
  %119 = alloca ptr, align 8
  store ptr @InterleaveIterator, ptr %119, align 8
  store ptr %115, ptr %118, align 8
  store i32 10, ptr %116, align 4
  %120 = load ptr, ptr %10, align 8
  %121 = load ptr, ptr %5, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 416, ptr %121)
  %123 = load i32, ptr %16, align 4
  %124 = getelementptr ptr, ptr %121, i32 %123
  %125 = load ptr, ptr %124, align 8
  %126 = getelementptr { ptr, ptr }, ptr %125, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = call { ptr, ptr, ptr, i32 } %127(ptr %120) #17
  %129 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %128, ptr %129, align 8
  call void @assume_offset(ptr %129, ptr @IntIterable)
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %131, 0
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 1
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 2
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %140 = load i32, ptr %139, align 4
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, i32 %140, 3
  %142 = alloca [0 x ptr], align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 0, ptr %142)
  %144 = call ptr @llvm.invariant.start.p0(i64 192, ptr %131)
  %145 = getelementptr ptr, ptr %131, i32 %140
  %146 = getelementptr ptr, ptr %145, i32 10
  %147 = load ptr, ptr %146, align 8
  %148 = alloca {}, align 8
  %149 = call ptr @behavior_wrapper(ptr %147, { ptr, ptr, ptr, i32 } %141, ptr %148)
  %150 = call { ptr, ptr, ptr, i32 } %149({ ptr, ptr, ptr, i32 } %141, { ptr, ptr, ptr, i32 } %141, ptr %142) #15
  %151 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %150, ptr %151, align 8
  %152 = alloca { ptr, ptr, ptr, i32 }, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 0
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %155 = load ptr, ptr %153, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %158 = load ptr, ptr %156, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 2
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %161 = load ptr, ptr %159, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 3
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %164 = load i32, ptr %162, align 4
  store i32 %164, ptr %163, align 4
  call void @set_offset(ptr %152, ptr @IntIterator)
  %165 = load ptr, ptr %10, align 8
  %166 = load ptr, ptr %5, align 8
  %167 = call ptr @llvm.invariant.start.p0(i64 416, ptr %166)
  %168 = load i32, ptr %16, align 4
  %169 = getelementptr ptr, ptr %166, i32 %168
  %170 = getelementptr ptr, ptr %169, i32 1
  %171 = load ptr, ptr %170, align 8
  %172 = getelementptr { ptr, ptr }, ptr %171, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  %174 = call { ptr, ptr, ptr, i32 } %173(ptr %165) #17
  %175 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %174, ptr %175, align 8
  call void @assume_offset(ptr %175, ptr @IntIterable)
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 0
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %177, 0
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 1
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 1
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 2
  %183 = load ptr, ptr %182, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %183, 2
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 3
  %186 = load i32, ptr %185, align 4
  %187 = insertvalue { ptr, ptr, ptr, i32 } %184, i32 %186, 3
  %188 = alloca [0 x ptr], align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 0, ptr %188)
  %190 = call ptr @llvm.invariant.start.p0(i64 192, ptr %177)
  %191 = getelementptr ptr, ptr %177, i32 %186
  %192 = getelementptr ptr, ptr %191, i32 10
  %193 = load ptr, ptr %192, align 8
  %194 = alloca {}, align 8
  %195 = call ptr @behavior_wrapper(ptr %193, { ptr, ptr, ptr, i32 } %187, ptr %194)
  %196 = call { ptr, ptr, ptr, i32 } %195({ ptr, ptr, ptr, i32 } %187, { ptr, ptr, ptr, i32 } %187, ptr %188) #15
  %197 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %196, ptr %197, align 8
  %198 = alloca { ptr, ptr, ptr, i32 }, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 0
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 1
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 2
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 3
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %210 = load i32, ptr %208, align 4
  store i32 %210, ptr %209, align 4
  call void @set_offset(ptr %198, ptr @IntIterator)
  %211 = alloca { ptr, ptr, ptr, i32 }, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 0
  %213 = load ptr, ptr %154, align 8
  store ptr %213, ptr %212, align 8
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 1
  %215 = load ptr, ptr %157, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 2
  %217 = load ptr, ptr %160, align 8
  store ptr %217, ptr %216, align 8
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 3
  %219 = load i32, ptr %163, align 4
  store i32 %219, ptr %218, align 4
  call void @set_offset(ptr %211, ptr @IntIterator)
  %220 = load ptr, ptr %212, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %220, 0
  %222 = load ptr, ptr %214, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } %221, ptr %222, 1
  %224 = load ptr, ptr %216, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %224, 2
  %226 = load i32, ptr %218, align 4
  %227 = insertvalue { ptr, ptr, ptr, i32 } %225, i32 %226, 3
  %228 = alloca { ptr, ptr, ptr, i32 }, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %230 = load ptr, ptr %200, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %232 = load ptr, ptr %203, align 8
  store ptr %232, ptr %231, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %234 = load ptr, ptr %206, align 8
  store ptr %234, ptr %233, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %236 = load i32, ptr %209, align 4
  store i32 %236, ptr %235, align 4
  call void @set_offset(ptr %228, ptr @IntIterator)
  %237 = load ptr, ptr %229, align 8
  %238 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %237, 0
  %239 = load ptr, ptr %231, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %238, ptr %239, 1
  %241 = load ptr, ptr %233, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %241, 2
  %243 = load i32, ptr %235, align 4
  %244 = insertvalue { ptr, ptr, ptr, i32 } %242, i32 %243, 3
  %245 = load ptr, ptr %119, align 8
  %246 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %245, 0
  %247 = load ptr, ptr %118, align 8
  %248 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %247, 1
  %249 = load ptr, ptr %117, align 8
  %250 = insertvalue { ptr, ptr, ptr, i32 } %248, ptr %249, 2
  %251 = load i32, ptr %116, align 4
  %252 = insertvalue { ptr, ptr, ptr, i32 } %250, i32 %251, 3
  %253 = alloca [2 x ptr], align 8
  %254 = getelementptr [2 x ptr], ptr %253, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %254, align 8
  %255 = getelementptr [2 x ptr], ptr %253, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %255, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 4, ptr %253)
  %257 = call ptr @llvm.invariant.start.p0(i64 72, ptr %245)
  %258 = getelementptr ptr, ptr %245, i32 %251
  %259 = getelementptr ptr, ptr %258, i32 3
  %260 = load ptr, ptr %259, align 8
  %261 = alloca { ptr, ptr }, align 8
  %262 = getelementptr { ptr, ptr }, ptr %261, i32 0, i32 0
  store ptr %220, ptr %262, align 8
  %263 = getelementptr { ptr, ptr }, ptr %261, i32 0, i32 1
  store ptr %237, ptr %263, align 8
  %264 = call ptr @behavior_wrapper(ptr %260, { ptr, ptr, ptr, i32 } %252, ptr %261)
  call void %264({ ptr, ptr, ptr, i32 } %252, { ptr, ptr, ptr, i32 } %252, ptr %253, { ptr, ptr, ptr, i32 } %227, { ptr, ptr, ptr, i32 } %244) #15
  %265 = alloca { ptr, ptr, ptr, i32 }, align 8
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 0
  %267 = load ptr, ptr %119, align 8
  store ptr %267, ptr %266, align 8
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 1
  %269 = load ptr, ptr %118, align 8
  store ptr %269, ptr %268, align 8
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 2
  %271 = load ptr, ptr %117, align 8
  store ptr %271, ptr %270, align 8
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 3
  %273 = load i32, ptr %116, align 4
  store i32 %273, ptr %272, align 4
  call void @set_offset(ptr %265, ptr @Iterator)
  %274 = load ptr, ptr %266, align 8
  %275 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %274, 0
  %276 = load ptr, ptr %268, align 8
  %277 = insertvalue { ptr, ptr, ptr, i32 } %275, ptr %276, 1
  %278 = load ptr, ptr %270, align 8
  %279 = insertvalue { ptr, ptr, ptr, i32 } %277, ptr %278, 2
  %280 = load i32, ptr %272, align 4
  %281 = insertvalue { ptr, ptr, ptr, i32 } %279, i32 %280, 3
  ret { ptr, ptr, ptr, i32 } %281
}

define { i64, i64 } @_data_size_InterleaveIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @InterleaveIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @IntIterator, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @IntIterator to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 5, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [9 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @InterleaveIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [9 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @InterleaveIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @InterleaveIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @IntIterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 72, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @IntIterator)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %62, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %68, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %71, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @IntIterator)
  %82 = load ptr, ptr %12, align 8
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 72, ptr %83)
  %85 = load i32, ptr %18, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %74, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %76, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %80, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  call void %90(ptr %82, { ptr, ptr, ptr, i32 } %98) #16
  %99 = alloca i1, align 1
  store i1 true, ptr %99, align 1
  %100 = load ptr, ptr %12, align 8
  %101 = load ptr, ptr %7, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 72, ptr %101)
  %103 = load i32, ptr %18, align 4
  %104 = getelementptr ptr, ptr %101, i32 %103
  %105 = getelementptr ptr, ptr %104, i32 2
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr { ptr, ptr }, ptr %106, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load i1, ptr %99, align 1
  call void %108(ptr %100, i1 %109) #16
  ret void
}

define { ptr, i32 } @InterleaveIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, i32 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca { ptr, i32 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem19 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  store ptr %20, ptr %.reg2mem12, align 8
  %21 = load ptr, ptr %19, align 8
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  store ptr %21, ptr %.reload18, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr %26, ptr %.reg2mem5, align 8
  %27 = load i32, ptr %25, align 4
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  store i32 %27, ptr %.reload11, align 4
  call void @set_offset(ptr %15, ptr @InterleaveIterator)
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %28 = load ptr, ptr %.reload17, align 8
  %29 = load ptr, ptr %15, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 72, ptr %29)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %31 = load i32, ptr %.reload10, align 4
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 2
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call i1 %36(ptr %28) #17
  %38 = alloca i1, align 1
  store i1 %37, ptr %38, align 1
  %39 = load i1, ptr %38, align 1
  br i1 %39, label %40, label %84

40:                                               ; preds = %3
  store i1 false, ptr %4, align 1
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %41 = load ptr, ptr %.reload16, align 8
  %42 = load ptr, ptr %15, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 72, ptr %42)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %44 = load i32, ptr %.reload9, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 2
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load i1, ptr %4, align 1
  call void %49(ptr %41, i1 %50) #16
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %51 = load ptr, ptr %.reload15, align 8
  %52 = load ptr, ptr %15, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 72, ptr %52)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %54 = load i32, ptr %.reload8, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call { ptr, ptr, ptr, i32 } %58(ptr %51) #17
  store { ptr, ptr, ptr, i32 } %59, ptr %5, align 8
  call void @assume_offset(ptr %5, ptr @IntIterator)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  %72 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %61)
  %74 = getelementptr ptr, ptr %61, i32 %70
  %75 = load ptr, ptr %74, align 8
  %76 = call ptr @behavior_wrapper(ptr %75, { ptr, ptr, ptr, i32 } %71, ptr %7)
  %77 = call { ptr, i32 } %76({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %6) #15
  store { ptr, i32 } %77, ptr %8, align 8
  %78 = getelementptr { ptr, i32 }, ptr %8, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, i32 }, ptr %8, i32 0, i32 1
  %82 = load i32, ptr %81, align 4
  %83 = insertvalue { ptr, i32 } %80, i32 %82, 1
  store { ptr, i32 } %83, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem19, align 8
  br label %129

84:                                               ; preds = %3
  store i1 true, ptr %9, align 1
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %85 = load ptr, ptr %.reload14, align 8
  %86 = load ptr, ptr %15, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 72, ptr %86)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %88 = load i32, ptr %.reload7, align 4
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = getelementptr ptr, ptr %89, i32 2
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr { ptr, ptr }, ptr %91, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = load i1, ptr %9, align 1
  call void %93(ptr %85, i1 %94) #16
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %95 = load ptr, ptr %.reload13, align 8
  %96 = load ptr, ptr %15, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 72, ptr %96)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %98 = load i32, ptr %.reload6, align 4
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = getelementptr ptr, ptr %99, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = getelementptr { ptr, ptr }, ptr %101, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = call { ptr, ptr, ptr, i32 } %103(ptr %95) #17
  store { ptr, ptr, ptr, i32 } %104, ptr %10, align 8
  call void @assume_offset(ptr %10, ptr @IntIterator)
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %106, 0
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 1
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %112, 2
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %115 = load i32, ptr %114, align 4
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %115, 3
  %117 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %118 = call ptr @llvm.invariant.start.p0(i64 16, ptr %106)
  %119 = getelementptr ptr, ptr %106, i32 %115
  %120 = load ptr, ptr %119, align 8
  %121 = call ptr @behavior_wrapper(ptr %120, { ptr, ptr, ptr, i32 } %116, ptr %12)
  %122 = call { ptr, i32 } %121({ ptr, ptr, ptr, i32 } %116, { ptr, ptr, ptr, i32 } %116, ptr %11) #15
  store { ptr, i32 } %122, ptr %13, align 8
  %123 = getelementptr { ptr, i32 }, ptr %13, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, i32 } undef, ptr %124, 0
  %126 = getelementptr { ptr, i32 }, ptr %13, i32 0, i32 1
  %127 = load i32, ptr %126, align 4
  %128 = insertvalue { ptr, i32 } %125, i32 %127, 1
  store { ptr, i32 } %128, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem19, align 8
  br label %129

129:                                              ; preds = %84, %40
  %.reload20 = load { ptr, i32 }, ptr %.reg2mem19, align 8
  store { ptr, i32 } %.reload20, ptr %.reg2mem, align 8
  br label %130

130:                                              ; preds = %129
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define i1 @InterleaveIterator_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i1, ptr %13, align 1
  ret i1 %14
}

define void @InterleaveIterator_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i1, align 1
  store i1 %1, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  store i1 %16, ptr %14, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @InterleaveIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @InterleaveIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { i64, i64 } @_data_size_ChainIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @ChainIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @IntIterable, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @IntIterable to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 14, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [52 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 15, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @function_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 16, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [52 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 25, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [52 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ChainIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ChainIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @IntIterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 416, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @IntIterable)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %62, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %68, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %71, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %82 = load ptr, ptr %12, align 8
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 416, ptr %83)
  %85 = load i32, ptr %18, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %74, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %76, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %80, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  call void %90(ptr %82, { ptr, ptr, ptr, i32 } %98) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ChainIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 416, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %18) #17
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %26, ptr %27, align 8
  call void @assume_offset(ptr %27, ptr @IntIterable)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 192, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 10
  %45 = load ptr, ptr %44, align 8
  %46 = alloca {}, align 8
  %47 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, ptr, ptr, i32 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40) #15
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %48, ptr %49, align 8
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = load i32, ptr %60, align 4
  store i32 %62, ptr %61, align 4
  call void @set_offset(ptr %50, ptr @IntIterator)
  %63 = load ptr, ptr %10, align 8
  %64 = load ptr, ptr %5, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 416, ptr %64)
  %66 = load i32, ptr %16, align 4
  %67 = getelementptr ptr, ptr %64, i32 %66
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr }, ptr %69, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = call { ptr, ptr, ptr, i32 } %71(ptr %63) #17
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %72, ptr %73, align 8
  call void @assume_offset(ptr %73, ptr @IntIterable)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %78, 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %84 = load i32, ptr %83, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %84, 3
  %86 = alloca [0 x ptr], align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 0, ptr %86)
  %88 = call ptr @llvm.invariant.start.p0(i64 192, ptr %75)
  %89 = getelementptr ptr, ptr %75, i32 %84
  %90 = getelementptr ptr, ptr %89, i32 10
  %91 = load ptr, ptr %90, align 8
  %92 = alloca {}, align 8
  %93 = call ptr @behavior_wrapper(ptr %91, { ptr, ptr, ptr, i32 } %85, ptr %92)
  %94 = call { ptr, ptr, ptr, i32 } %93({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %86) #15
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %94, ptr %95, align 8
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = load ptr, ptr %100, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 3
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = load i32, ptr %106, align 4
  store i32 %108, ptr %107, align 4
  call void @set_offset(ptr %96, ptr @IntIterator)
  %109 = alloca [1 x ptr], align 8
  store ptr @ChainIterator, ptr %109, align 8
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr ptr, ptr %110, i32 6
  %112 = load ptr, ptr %111, align 8
  %113 = call { i64, i64 } @size_wrapper(ptr %112, ptr %109)
  %114 = extractvalue { i64, i64 } %113, 0
  %115 = call ptr @bump_malloc(i64 %114)
  %116 = alloca i32, align 4
  %117 = alloca ptr, align 8
  %118 = alloca ptr, align 8
  %119 = alloca ptr, align 8
  store ptr @ChainIterator, ptr %119, align 8
  store ptr %115, ptr %118, align 8
  store i32 10, ptr %116, align 4
  %120 = load ptr, ptr %10, align 8
  %121 = load ptr, ptr %5, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 416, ptr %121)
  %123 = load i32, ptr %16, align 4
  %124 = getelementptr ptr, ptr %121, i32 %123
  %125 = load ptr, ptr %124, align 8
  %126 = getelementptr { ptr, ptr }, ptr %125, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = call { ptr, ptr, ptr, i32 } %127(ptr %120) #17
  %129 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %128, ptr %129, align 8
  call void @assume_offset(ptr %129, ptr @IntIterable)
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %131, 0
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 1
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 2
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %140 = load i32, ptr %139, align 4
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, i32 %140, 3
  %142 = alloca [0 x ptr], align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 0, ptr %142)
  %144 = call ptr @llvm.invariant.start.p0(i64 192, ptr %131)
  %145 = getelementptr ptr, ptr %131, i32 %140
  %146 = getelementptr ptr, ptr %145, i32 10
  %147 = load ptr, ptr %146, align 8
  %148 = alloca {}, align 8
  %149 = call ptr @behavior_wrapper(ptr %147, { ptr, ptr, ptr, i32 } %141, ptr %148)
  %150 = call { ptr, ptr, ptr, i32 } %149({ ptr, ptr, ptr, i32 } %141, { ptr, ptr, ptr, i32 } %141, ptr %142) #15
  %151 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %150, ptr %151, align 8
  %152 = alloca { ptr, ptr, ptr, i32 }, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 0
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %155 = load ptr, ptr %153, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %158 = load ptr, ptr %156, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 2
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %161 = load ptr, ptr %159, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 3
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %164 = load i32, ptr %162, align 4
  store i32 %164, ptr %163, align 4
  call void @set_offset(ptr %152, ptr @IntIterator)
  %165 = load ptr, ptr %10, align 8
  %166 = load ptr, ptr %5, align 8
  %167 = call ptr @llvm.invariant.start.p0(i64 416, ptr %166)
  %168 = load i32, ptr %16, align 4
  %169 = getelementptr ptr, ptr %166, i32 %168
  %170 = getelementptr ptr, ptr %169, i32 1
  %171 = load ptr, ptr %170, align 8
  %172 = getelementptr { ptr, ptr }, ptr %171, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  %174 = call { ptr, ptr, ptr, i32 } %173(ptr %165) #17
  %175 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %174, ptr %175, align 8
  call void @assume_offset(ptr %175, ptr @IntIterable)
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 0
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %177, 0
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 1
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 1
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 2
  %183 = load ptr, ptr %182, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %183, 2
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 3
  %186 = load i32, ptr %185, align 4
  %187 = insertvalue { ptr, ptr, ptr, i32 } %184, i32 %186, 3
  %188 = alloca [0 x ptr], align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 0, ptr %188)
  %190 = call ptr @llvm.invariant.start.p0(i64 192, ptr %177)
  %191 = getelementptr ptr, ptr %177, i32 %186
  %192 = getelementptr ptr, ptr %191, i32 10
  %193 = load ptr, ptr %192, align 8
  %194 = alloca {}, align 8
  %195 = call ptr @behavior_wrapper(ptr %193, { ptr, ptr, ptr, i32 } %187, ptr %194)
  %196 = call { ptr, ptr, ptr, i32 } %195({ ptr, ptr, ptr, i32 } %187, { ptr, ptr, ptr, i32 } %187, ptr %188) #15
  %197 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %196, ptr %197, align 8
  %198 = alloca { ptr, ptr, ptr, i32 }, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 0
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 1
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 2
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 3
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %210 = load i32, ptr %208, align 4
  store i32 %210, ptr %209, align 4
  call void @set_offset(ptr %198, ptr @IntIterator)
  %211 = alloca { ptr, ptr, ptr, i32 }, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 0
  %213 = load ptr, ptr %154, align 8
  store ptr %213, ptr %212, align 8
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 1
  %215 = load ptr, ptr %157, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 2
  %217 = load ptr, ptr %160, align 8
  store ptr %217, ptr %216, align 8
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %211, i32 0, i32 3
  %219 = load i32, ptr %163, align 4
  store i32 %219, ptr %218, align 4
  call void @set_offset(ptr %211, ptr @IntIterator)
  %220 = load ptr, ptr %212, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %220, 0
  %222 = load ptr, ptr %214, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } %221, ptr %222, 1
  %224 = load ptr, ptr %216, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %224, 2
  %226 = load i32, ptr %218, align 4
  %227 = insertvalue { ptr, ptr, ptr, i32 } %225, i32 %226, 3
  %228 = alloca { ptr, ptr, ptr, i32 }, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %230 = load ptr, ptr %200, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %232 = load ptr, ptr %203, align 8
  store ptr %232, ptr %231, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %234 = load ptr, ptr %206, align 8
  store ptr %234, ptr %233, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %236 = load i32, ptr %209, align 4
  store i32 %236, ptr %235, align 4
  call void @set_offset(ptr %228, ptr @IntIterator)
  %237 = load ptr, ptr %229, align 8
  %238 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %237, 0
  %239 = load ptr, ptr %231, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %238, ptr %239, 1
  %241 = load ptr, ptr %233, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %241, 2
  %243 = load i32, ptr %235, align 4
  %244 = insertvalue { ptr, ptr, ptr, i32 } %242, i32 %243, 3
  %245 = load ptr, ptr %119, align 8
  %246 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %245, 0
  %247 = load ptr, ptr %118, align 8
  %248 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %247, 1
  %249 = load ptr, ptr %117, align 8
  %250 = insertvalue { ptr, ptr, ptr, i32 } %248, ptr %249, 2
  %251 = load i32, ptr %116, align 4
  %252 = insertvalue { ptr, ptr, ptr, i32 } %250, i32 %251, 3
  %253 = alloca [2 x ptr], align 8
  %254 = getelementptr [2 x ptr], ptr %253, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %254, align 8
  %255 = getelementptr [2 x ptr], ptr %253, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %255, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 4, ptr %253)
  %257 = call ptr @llvm.invariant.start.p0(i64 72, ptr %245)
  %258 = getelementptr ptr, ptr %245, i32 %251
  %259 = getelementptr ptr, ptr %258, i32 3
  %260 = load ptr, ptr %259, align 8
  %261 = alloca { ptr, ptr }, align 8
  %262 = getelementptr { ptr, ptr }, ptr %261, i32 0, i32 0
  store ptr %220, ptr %262, align 8
  %263 = getelementptr { ptr, ptr }, ptr %261, i32 0, i32 1
  store ptr %237, ptr %263, align 8
  %264 = call ptr @behavior_wrapper(ptr %260, { ptr, ptr, ptr, i32 } %252, ptr %261)
  call void %264({ ptr, ptr, ptr, i32 } %252, { ptr, ptr, ptr, i32 } %252, ptr %253, { ptr, ptr, ptr, i32 } %227, { ptr, ptr, ptr, i32 } %244) #15
  %265 = alloca { ptr, ptr, ptr, i32 }, align 8
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 0
  %267 = load ptr, ptr %119, align 8
  store ptr %267, ptr %266, align 8
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 1
  %269 = load ptr, ptr %118, align 8
  store ptr %269, ptr %268, align 8
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 2
  %271 = load ptr, ptr %117, align 8
  store ptr %271, ptr %270, align 8
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %265, i32 0, i32 3
  %273 = load i32, ptr %116, align 4
  store i32 %273, ptr %272, align 4
  call void @set_offset(ptr %265, ptr @Iterator)
  %274 = load ptr, ptr %266, align 8
  %275 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %274, 0
  %276 = load ptr, ptr %268, align 8
  %277 = insertvalue { ptr, ptr, ptr, i32 } %275, ptr %276, 1
  %278 = load ptr, ptr %270, align 8
  %279 = insertvalue { ptr, ptr, ptr, i32 } %277, ptr %278, 2
  %280 = load i32, ptr %272, align 4
  %281 = insertvalue { ptr, ptr, ptr, i32 } %279, i32 %280, 3
  ret { ptr, ptr, ptr, i32 } %281
}

define { i64, i64 } @_data_size_ChainIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ChainIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @IntIterator, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @IntIterator to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 5, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [9 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ChainIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [9 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ChainIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ChainIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @IntIterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 72, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @IntIterator)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %62, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %68, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %71, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @IntIterator)
  %82 = load ptr, ptr %12, align 8
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 72, ptr %83)
  %85 = load i32, ptr %18, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %74, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %76, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %80, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  call void %90(ptr %82, { ptr, ptr, ptr, i32 } %98) #16
  %99 = alloca i1, align 1
  store i1 true, ptr %99, align 1
  %100 = load ptr, ptr %12, align 8
  %101 = load ptr, ptr %7, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 72, ptr %101)
  %103 = load i32, ptr %18, align 4
  %104 = getelementptr ptr, ptr %101, i32 %103
  %105 = getelementptr ptr, ptr %104, i32 2
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr { ptr, ptr }, ptr %106, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load i1, ptr %99, align 1
  call void %108(ptr %100, i1 %109) #16
  ret void
}

define { ptr, i32 } @ChainIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i32 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca ptr, align 8
  %12 = alloca i64, align 8
  %13 = alloca i1, align 1
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = alloca [0 x ptr], align 8
  %16 = alloca {}, align 8
  %17 = alloca { ptr, i32 }, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %.reg2mem7 = alloca { ptr, i32 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem23 = alloca { ptr, i32 }, align 8
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca { ptr, i32 }, align 8
  %.reg2mem29 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem17, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload22 = load ptr, ptr %.reg2mem17, align 8
  store ptr %25, ptr %.reload22, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem11, align 8
  %31 = load i32, ptr %29, align 4
  %.reload16 = load ptr, ptr %.reg2mem11, align 8
  store i32 %31, ptr %.reload16, align 4
  call void @set_offset(ptr %19, ptr @ChainIterator)
  %.reload21 = load ptr, ptr %.reg2mem17, align 8
  %32 = load ptr, ptr %.reload21, align 8
  %33 = load ptr, ptr %19, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 72, ptr %33)
  %.reload15 = load ptr, ptr %.reg2mem11, align 8
  %35 = load i32, ptr %.reload15, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 2
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call i1 %40(ptr %32) #17
  %42 = alloca i1, align 1
  store i1 %41, ptr %42, align 1
  %43 = load i1, ptr %42, align 1
  br i1 %43, label %44, label %103

44:                                               ; preds = %3
  %.reload20 = load ptr, ptr %.reg2mem17, align 8
  %45 = load ptr, ptr %.reload20, align 8
  %46 = load ptr, ptr %19, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 72, ptr %46)
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %48 = load i32, ptr %.reload14, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call { ptr, ptr, ptr, i32 } %52(ptr %45) #17
  store { ptr, ptr, ptr, i32 } %53, ptr %4, align 8
  call void @assume_offset(ptr %4, ptr @IntIterator)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %67 = call ptr @llvm.invariant.start.p0(i64 16, ptr %55)
  %68 = getelementptr ptr, ptr %55, i32 %64
  %69 = load ptr, ptr %68, align 8
  %70 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %65, ptr %6)
  %71 = call { ptr, i32 } %70({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %5) #15
  store { ptr, i32 } %71, ptr %7, align 8
  %72 = load ptr, ptr %7, align 8
  %73 = ptrtoint ptr %72 to i64
  %74 = icmp eq i64 %73, ptrtoint (ptr @nil_typ to i64)
  %75 = icmp eq i64 %73, 0
  %76 = or i1 %74, %75
  %77 = icmp eq i1 %76, false
  store i1 %77, ptr %8, align 1
  %78 = load i1, ptr %8, align 1
  %79 = xor i1 %78, true
  %80 = zext i1 %79 to i32
  store i32 %80, ptr %.reg2mem9, align 4
  br i1 %78, label %81, label %90

81:                                               ; preds = %44
  %82 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 1
  %83 = load i32, ptr %82, align 4
  store i32 %83, ptr %9, align 4
  %84 = load i32, ptr %9, align 4
  store i32 %84, ptr %10, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %12, align 4
  %85 = load i64, ptr %12, align 4
  store i64 %85, ptr %11, align 4
  %86 = load ptr, ptr %11, align 8
  %87 = insertvalue { ptr, i32 } undef, ptr %86, 0
  %88 = load i32, ptr %10, align 4
  %89 = insertvalue { ptr, i32 } %87, i32 %88, 1
  store { ptr, i32 } %89, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i32 }, ptr %.reg2mem7, align 8
  store { ptr, i32 } %.reload8, ptr %.reg2mem29, align 8
  br label %101

90:                                               ; preds = %44
  store i1 false, ptr %13, align 1
  %.reload19 = load ptr, ptr %.reg2mem17, align 8
  %91 = load ptr, ptr %.reload19, align 8
  %92 = load ptr, ptr %19, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 72, ptr %92)
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %94 = load i32, ptr %.reload13, align 4
  %95 = getelementptr ptr, ptr %92, i32 %94
  %96 = getelementptr ptr, ptr %95, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr { ptr, ptr }, ptr %97, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = load i1, ptr %13, align 1
  call void %99(ptr %91, i1 %100) #16
  store { ptr, i32 } poison, ptr %.reg2mem29, align 8
  br label %101

101:                                              ; preds = %90, %81
  %.reload30 = load { ptr, i32 }, ptr %.reg2mem29, align 8
  store { ptr, i32 } %.reload30, ptr %.reg2mem5, align 8
  br label %102

102:                                              ; preds = %101
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem25, align 4
  store { ptr, i32 } %.reload6, ptr %.reg2mem27, align 8
  br label %104

103:                                              ; preds = %3
  store i32 1, ptr %.reg2mem25, align 4
  store { ptr, i32 } poison, ptr %.reg2mem27, align 8
  br label %104

104:                                              ; preds = %103, %102
  %.reload28 = load { ptr, i32 }, ptr %.reg2mem27, align 8
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  store { ptr, i32 } %.reload28, ptr %.reg2mem3, align 8
  store i32 %.reload26, ptr %.reg2mem1, align 4
  br label %105

105:                                              ; preds = %104
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %106 = zext i32 %.reload2 to i64
  %107 = trunc i64 %106 to i32
  switch i32 %107, label %109 [
    i32 0, label %108
  ]

108:                                              ; preds = %105
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem23, align 8
  br label %144

109:                                              ; preds = %105
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %110 = load ptr, ptr %.reload18, align 8
  %111 = load ptr, ptr %19, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 72, ptr %111)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %113 = load i32, ptr %.reload12, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = getelementptr ptr, ptr %114, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = call { ptr, ptr, ptr, i32 } %118(ptr %110) #17
  store { ptr, ptr, ptr, i32 } %119, ptr %14, align 8
  call void @assume_offset(ptr %14, ptr @IntIterator)
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %121, 0
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 1
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %127, 2
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %130 = load i32, ptr %129, align 4
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 %130, 3
  %132 = call ptr @llvm.invariant.start.p0(i64 0, ptr %15)
  %133 = call ptr @llvm.invariant.start.p0(i64 16, ptr %121)
  %134 = getelementptr ptr, ptr %121, i32 %130
  %135 = load ptr, ptr %134, align 8
  %136 = call ptr @behavior_wrapper(ptr %135, { ptr, ptr, ptr, i32 } %131, ptr %16)
  %137 = call { ptr, i32 } %136({ ptr, ptr, ptr, i32 } %131, { ptr, ptr, ptr, i32 } %131, ptr %15) #15
  store { ptr, i32 } %137, ptr %17, align 8
  %138 = getelementptr { ptr, i32 }, ptr %17, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  %140 = insertvalue { ptr, i32 } undef, ptr %139, 0
  %141 = getelementptr { ptr, i32 }, ptr %17, i32 0, i32 1
  %142 = load i32, ptr %141, align 4
  %143 = insertvalue { ptr, i32 } %140, i32 %142, 1
  store { ptr, i32 } %143, ptr %.reg2mem, align 8
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  store { ptr, i32 } %.reload, ptr %.reg2mem23, align 8
  br label %144

144:                                              ; preds = %109, %108
  %.reload24 = load { ptr, i32 }, ptr %.reg2mem23, align 8
  ret { ptr, i32 } %.reload24
}

define i1 @ChainIterator_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i1, ptr %13, align 1
  ret i1 %14
}

define void @ChainIterator_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i1, align 1
  store i1 %1, ptr %15, align 1
  %16 = load i1, ptr %15, align 1
  store i1 %16, ptr %14, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ChainIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ChainIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { i64, i64 } @_data_size_FilterIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterable, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 14, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [52 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 15, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @function_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 16, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [52 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 25, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [52 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @FilterIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterable)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @IntIterable)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 416, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca ptr, align 8
  store { ptr } %4, ptr %59, align 8
  %60 = load ptr, ptr %12, align 8
  %61 = load ptr, ptr %7, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 416, ptr %61)
  %63 = load i32, ptr %18, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %59, align 8
  %70 = insertvalue { ptr } undef, ptr %69, 0
  call void %68(ptr %60, { ptr } %70) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @FilterIterable)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 416, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %18) #17
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %26, ptr %27, align 8
  call void @assume_offset(ptr %27, ptr @IntIterable)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 192, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 10
  %45 = load ptr, ptr %44, align 8
  %46 = alloca {}, align 8
  %47 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, ptr, ptr, i32 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40) #15
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %48, ptr %49, align 8
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = load i32, ptr %60, align 4
  store i32 %62, ptr %61, align 4
  call void @set_offset(ptr %50, ptr @IntIterator)
  %63 = load ptr, ptr %10, align 8
  %64 = load ptr, ptr %5, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 416, ptr %64)
  %66 = load i32, ptr %16, align 4
  %67 = getelementptr ptr, ptr %64, i32 %66
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr }, ptr %69, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = call { ptr } %71(ptr %63) #17
  %73 = alloca ptr, align 8
  store { ptr } %72, ptr %73, align 8
  %74 = alloca [1 x ptr], align 8
  store ptr @FilterIterator, ptr %74, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr ptr, ptr %75, i32 6
  %77 = load ptr, ptr %76, align 8
  %78 = call { i64, i64 } @size_wrapper(ptr %77, ptr %74)
  %79 = extractvalue { i64, i64 } %78, 0
  %80 = call ptr @bump_malloc(i64 %79)
  %81 = alloca i32, align 4
  %82 = alloca ptr, align 8
  %83 = alloca ptr, align 8
  %84 = alloca ptr, align 8
  store ptr @FilterIterator, ptr %84, align 8
  store ptr %80, ptr %83, align 8
  store i32 10, ptr %81, align 4
  %85 = load ptr, ptr %10, align 8
  %86 = load ptr, ptr %5, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 416, ptr %86)
  %88 = load i32, ptr %16, align 4
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call { ptr, ptr, ptr, i32 } %92(ptr %85) #17
  %94 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %93, ptr %94, align 8
  call void @assume_offset(ptr %94, ptr @IntIterable)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %105, 3
  %107 = alloca [0 x ptr], align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 0, ptr %107)
  %109 = call ptr @llvm.invariant.start.p0(i64 192, ptr %96)
  %110 = getelementptr ptr, ptr %96, i32 %105
  %111 = getelementptr ptr, ptr %110, i32 10
  %112 = load ptr, ptr %111, align 8
  %113 = alloca {}, align 8
  %114 = call ptr @behavior_wrapper(ptr %112, { ptr, ptr, ptr, i32 } %106, ptr %113)
  %115 = call { ptr, ptr, ptr, i32 } %114({ ptr, ptr, ptr, i32 } %106, { ptr, ptr, ptr, i32 } %106, ptr %107) #15
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %115, ptr %116, align 8
  %117 = alloca { ptr, ptr, ptr, i32 }, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 0
  %120 = load ptr, ptr %118, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 2
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  %129 = load i32, ptr %127, align 4
  store i32 %129, ptr %128, align 4
  call void @set_offset(ptr %117, ptr @IntIterator)
  %130 = load ptr, ptr %10, align 8
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 416, ptr %131)
  %133 = load i32, ptr %16, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr } %138(ptr %130) #17
  %140 = alloca ptr, align 8
  store { ptr } %139, ptr %140, align 8
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %143 = load ptr, ptr %119, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %145 = load ptr, ptr %122, align 8
  store ptr %145, ptr %144, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %147 = load ptr, ptr %125, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %149 = load i32, ptr %128, align 4
  store i32 %149, ptr %148, align 4
  call void @set_offset(ptr %141, ptr @IntIterator)
  %150 = load ptr, ptr %142, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %150, 0
  %152 = load ptr, ptr %144, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %152, 1
  %154 = load ptr, ptr %146, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 2
  %156 = load i32, ptr %148, align 4
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 %156, 3
  %158 = load ptr, ptr %140, align 8
  %159 = insertvalue { ptr } undef, ptr %158, 0
  %160 = load ptr, ptr %84, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %160, 0
  %162 = load ptr, ptr %83, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %162, 1
  %164 = load ptr, ptr %82, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 2
  %166 = load i32, ptr %81, align 4
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, i32 %166, 3
  %168 = alloca [2 x ptr], align 8
  %169 = getelementptr [2 x ptr], ptr %168, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %169, align 8
  %170 = getelementptr [2 x ptr], ptr %168, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %170, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 4, ptr %168)
  %172 = call ptr @llvm.invariant.start.p0(i64 64, ptr %160)
  %173 = getelementptr ptr, ptr %160, i32 %166
  %174 = getelementptr ptr, ptr %173, i32 2
  %175 = load ptr, ptr %174, align 8
  %176 = alloca { ptr, ptr }, align 8
  %177 = getelementptr { ptr, ptr }, ptr %176, i32 0, i32 0
  store ptr %150, ptr %177, align 8
  %178 = getelementptr { ptr, ptr }, ptr %176, i32 0, i32 1
  store ptr @function_typ, ptr %178, align 8
  %179 = call ptr @behavior_wrapper(ptr %175, { ptr, ptr, ptr, i32 } %167, ptr %176)
  call void %179({ ptr, ptr, ptr, i32 } %167, { ptr, ptr, ptr, i32 } %167, ptr %168, { ptr, ptr, ptr, i32 } %157, { ptr } %159) #15
  %180 = alloca { ptr, ptr, ptr, i32 }, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 0
  %182 = load ptr, ptr %84, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 1
  %184 = load ptr, ptr %83, align 8
  store ptr %184, ptr %183, align 8
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 2
  %186 = load ptr, ptr %82, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 3
  %188 = load i32, ptr %81, align 4
  store i32 %188, ptr %187, align 4
  call void @set_offset(ptr %180, ptr @Iterator)
  %189 = load ptr, ptr %181, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %189, 0
  %191 = load ptr, ptr %183, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %190, ptr %191, 1
  %193 = load ptr, ptr %185, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %193, 2
  %195 = load i32, ptr %187, align 4
  %196 = insertvalue { ptr, ptr, ptr, i32 } %194, i32 %195, 3
  ret { ptr, ptr, ptr, i32 } %196
}

define { i64, i64 } @_data_size_FilterIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @IntIterator, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @IntIterator to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 4, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [8 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FilterIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 5, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @FilterIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @IntIterator)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @IntIterator)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 64, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %35, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %39, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %41, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %43, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca ptr, align 8
  store { ptr } %4, ptr %59, align 8
  %60 = load ptr, ptr %12, align 8
  %61 = load ptr, ptr %7, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 64, ptr %61)
  %63 = load i32, ptr %18, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %59, align 8
  %70 = insertvalue { ptr } undef, ptr %69, 0
  call void %68(ptr %60, { ptr } %70) #16
  ret void
}

define { ptr, i32 } @FilterIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca i32, align 4
  %6 = alloca ptr, align 8
  %7 = alloca i1, align 1
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca i64, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca [0 x ptr], align 8
  %13 = alloca {}, align 8
  %14 = alloca { ptr, i32 }, align 8
  %15 = alloca i32, align 4
  %16 = alloca ptr, align 8
  %17 = alloca i64, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem25 = alloca { ptr, i32 }, align 8
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem20, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload24 = load ptr, ptr %.reg2mem20, align 8
  store ptr %25, ptr %.reload24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem15, align 8
  %31 = load i32, ptr %29, align 4
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  store i32 %31, ptr %.reload19, align 4
  call void @set_offset(ptr %19, ptr @FilterIterator)
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  %32 = load ptr, ptr %.reload23, align 8
  %33 = load ptr, ptr %19, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 64, ptr %33)
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %35 = load i32, ptr %.reload18, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call { ptr, ptr, ptr, i32 } %39(ptr %32) #17
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %40, ptr %41, align 8
  call void @assume_offset(ptr %41, ptr @IntIterator)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %52, 3
  %54 = alloca [0 x ptr], align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 0, ptr %54)
  %56 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %57 = getelementptr ptr, ptr %43, i32 %52
  %58 = load ptr, ptr %57, align 8
  %59 = alloca {}, align 8
  %60 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %53, ptr %59)
  %61 = call { ptr, i32 } %60({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54) #15
  %62 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %61, ptr %62, align 8
  br label %63

63:                                               ; preds = %130, %3
  %64 = load ptr, ptr %62, align 8
  %65 = ptrtoint ptr %64 to i64
  %66 = icmp eq i64 %65, ptrtoint (ptr @nil_typ to i64)
  %67 = icmp eq i64 %65, 0
  %68 = or i1 %66, %67
  %69 = icmp eq i1 %68, false
  store i1 %69, ptr %4, align 1
  %70 = load i1, ptr %4, align 1
  br i1 %70, label %71, label %126

71:                                               ; preds = %63
  %72 = getelementptr { ptr, i32 }, ptr %62, i32 0, i32 1
  store ptr %72, ptr %.reg2mem12, align 8
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %73 = load i32, ptr %.reload14, align 4
  store i32 %73, ptr %5, align 4
  %74 = load i32, ptr %5, align 4
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %75 = load ptr, ptr %.reload22, align 8
  %76 = load ptr, ptr %19, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 64, ptr %76)
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %78 = load i32, ptr %.reload17, align 4
  %79 = getelementptr ptr, ptr %76, i32 %78
  %80 = getelementptr ptr, ptr %79, i32 1
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = call { ptr } %83(ptr %75) #17
  store { ptr } %84, ptr %6, align 8
  %85 = load ptr, ptr %6, align 8
  %86 = call i1 %85(i32 %74)
  store i1 %86, ptr %7, align 1
  %87 = load i1, ptr %7, align 1
  %88 = zext i1 %87 to i32
  store i32 %88, ptr %.reg2mem10, align 4
  %89 = xor i1 %87, true
  %90 = zext i1 %89 to i32
  store i32 %90, ptr %.reg2mem8, align 4
  br i1 %87, label %91, label %92

91:                                               ; preds = %71
  br label %125

92:                                               ; preds = %71
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %93 = load ptr, ptr %.reload21, align 8
  %94 = load ptr, ptr %19, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 64, ptr %94)
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %96 = load i32, ptr %.reload16, align 4
  %97 = getelementptr ptr, ptr %94, i32 %96
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = call { ptr, ptr, ptr, i32 } %100(ptr %93) #17
  store { ptr, ptr, ptr, i32 } %101, ptr %11, align 8
  call void @assume_offset(ptr %11, ptr @IntIterator)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %112, 3
  %114 = call ptr @llvm.invariant.start.p0(i64 0, ptr %12)
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %103)
  %116 = getelementptr ptr, ptr %103, i32 %112
  %117 = load ptr, ptr %116, align 8
  %118 = call ptr @behavior_wrapper(ptr %117, { ptr, ptr, ptr, i32 } %113, ptr %13)
  %119 = call { ptr, i32 } %118({ ptr, ptr, ptr, i32 } %113, { ptr, ptr, ptr, i32 } %113, ptr %12) #15
  store { ptr, i32 } %119, ptr %14, align 8
  %120 = getelementptr { ptr, i32 }, ptr %14, i32 0, i32 0
  %121 = getelementptr { ptr, i32 }, ptr %62, i32 0, i32 0
  %122 = load ptr, ptr %120, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, i32 }, ptr %14, i32 0, i32 1
  %124 = load i32, ptr %123, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  store i32 %124, ptr %.reload13, align 4
  br label %125

125:                                              ; preds = %92, %91
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem27, align 4
  store i32 %.reload11, ptr %.reg2mem29, align 4
  br label %127

126:                                              ; preds = %63
  store i32 0, ptr %.reg2mem27, align 4
  store i32 2, ptr %.reg2mem29, align 4
  br label %127

127:                                              ; preds = %126, %125
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store i32 %.reload30, ptr %.reg2mem5, align 4
  store i32 %.reload28, ptr %.reg2mem3, align 4
  br label %128

128:                                              ; preds = %127
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %129 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %129, label %130, label %131

130:                                              ; preds = %128
  br label %63

131:                                              ; preds = %128
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %132 = zext i32 %.reload6 to i64
  %133 = trunc i64 %132 to i32
  switch i32 %133, label %141 [
    i32 1, label %134
  ]

134:                                              ; preds = %131
  %135 = load i32, ptr %5, align 4
  store i32 %135, ptr %8, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %10, align 4
  %136 = load i64, ptr %10, align 4
  store i64 %136, ptr %9, align 4
  %137 = load ptr, ptr %9, align 8
  %138 = insertvalue { ptr, i32 } undef, ptr %137, 0
  %139 = load i32, ptr %8, align 4
  %140 = insertvalue { ptr, i32 } %138, i32 %139, 1
  store { ptr, i32 } %140, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem25, align 8
  br label %147

141:                                              ; preds = %131
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %17, align 4
  %142 = load i64, ptr %17, align 4
  store i64 %142, ptr %16, align 4
  %143 = load ptr, ptr %16, align 8
  %144 = insertvalue { ptr, i32 } undef, ptr %143, 0
  %145 = load i32, ptr %15, align 4
  %146 = insertvalue { ptr, i32 } %144, i32 %145, 1
  store { ptr, i32 } %146, ptr %.reg2mem, align 8
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  store { ptr, i32 } %.reload, ptr %.reg2mem25, align 8
  br label %147

147:                                              ; preds = %141, %134
  %.reload26 = load { ptr, i32 }, ptr %.reg2mem25, align 8
  ret { ptr, i32 } %.reload26
}

define { ptr } @FilterIterator_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @FilterIterator_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterator_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @FilterIterator_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { ptr } @FilterIterable_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @FilterIterable_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @FilterIterable_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { ptr } @MapIterable_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @MapIterable_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @MapIterable_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { i64, i64 } @_data_size_Range(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Range_B_init_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [57 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @i32_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 18, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [57 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [57 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [57 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @function_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 21, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [57 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [57 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [57 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [57 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [57 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Range_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [57 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Range_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [57 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Range_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 28, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [57 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Range_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 29, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [57 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Range_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 30, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [57 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Range_init_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Range)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 456, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %19, align 4
  call void %28(ptr %20, i32 %29) #16
  %30 = alloca i32, align 4
  store i32 0, ptr %30, align 4
  %31 = load ptr, ptr %11, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 456, ptr %32)
  %34 = load i32, ptr %17, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = load i32, ptr %30, align 4
  call void %38(ptr %31, i32 %39) #16
  %40 = alloca i32, align 4
  store i32 1, ptr %40, align 4
  %41 = load ptr, ptr %11, align 8
  %42 = load ptr, ptr %6, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 456, ptr %42)
  %44 = load i32, ptr %17, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 2
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load i32, ptr %40, align 4
  call void %49(ptr %41, i32 %50) #16
  ret void
}

define void @Range_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Range)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 456, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %20, align 4
  call void %28(ptr %21, i32 %29) #16
  %30 = alloca i32, align 4
  store i32 %4, ptr %30, align 4
  %31 = load ptr, ptr %12, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 456, ptr %32)
  %34 = load i32, ptr %18, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = load i32, ptr %30, align 4
  call void %39(ptr %31, i32 %40) #16
  %41 = alloca i32, align 4
  store i32 1, ptr %41, align 4
  %42 = load ptr, ptr %12, align 8
  %43 = load ptr, ptr %7, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 456, ptr %43)
  %45 = load i32, ptr %18, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load i32, ptr %41, align 4
  call void %50(ptr %42, i32 %51) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @Range_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Range)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 456, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %19, align 4
  call void %28(ptr %20, i32 %29) #16
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %32 = load ptr, ptr %8, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %34 = load ptr, ptr %11, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %36 = load ptr, ptr %14, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %38 = load i32, ptr %17, align 4
  store i32 %38, ptr %37, align 4
  call void @set_offset(ptr %30, ptr @Range)
  %39 = load ptr, ptr %31, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %41 = load ptr, ptr %33, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %41, 1
  %43 = load ptr, ptr %35, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %43, 2
  %45 = load i32, ptr %37, align 4
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %45, 3
  ret { ptr, ptr, ptr, i32 } %46
}

define { ptr, ptr, ptr, i32 } @Range_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Range)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 456, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #17
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = load ptr, ptr %10, align 8
  %29 = load ptr, ptr %5, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 456, ptr %29)
  %31 = load i32, ptr %16, align 4
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %28) #17
  %38 = alloca i32, align 4
  store i32 %37, ptr %38, align 4
  %39 = load ptr, ptr %10, align 8
  %40 = load ptr, ptr %5, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 456, ptr %40)
  %42 = load i32, ptr %16, align 4
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, ptr }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %39) #17
  %49 = alloca i32, align 4
  store i32 %48, ptr %49, align 4
  %50 = alloca [1 x ptr], align 8
  store ptr @RangeIterator, ptr %50, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr ptr, ptr %51, i32 6
  %53 = load ptr, ptr %52, align 8
  %54 = call { i64, i64 } @size_wrapper(ptr %53, ptr %50)
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = call ptr @bump_malloc(i64 %55)
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  %60 = alloca ptr, align 8
  store ptr @RangeIterator, ptr %60, align 8
  store ptr %56, ptr %59, align 8
  store i32 10, ptr %57, align 4
  %61 = load ptr, ptr %10, align 8
  %62 = load ptr, ptr %5, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 456, ptr %62)
  %64 = load i32, ptr %16, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 %68(ptr %61) #17
  %70 = alloca i32, align 4
  store i32 %69, ptr %70, align 4
  %71 = load ptr, ptr %10, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 456, ptr %72)
  %74 = load i32, ptr %16, align 4
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = call i32 %79(ptr %71) #17
  %81 = alloca i32, align 4
  store i32 %80, ptr %81, align 4
  %82 = load ptr, ptr %10, align 8
  %83 = load ptr, ptr %5, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 456, ptr %83)
  %85 = load i32, ptr %16, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 2
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = call i32 %90(ptr %82) #17
  %92 = alloca i32, align 4
  store i32 %91, ptr %92, align 4
  %93 = load i32, ptr %70, align 4
  %94 = load i32, ptr %81, align 4
  %95 = load i32, ptr %92, align 4
  %96 = load ptr, ptr %60, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = load ptr, ptr %59, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 1
  %100 = load ptr, ptr %58, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 2
  %102 = load i32, ptr %57, align 4
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %102, 3
  %104 = alloca [3 x ptr], align 8
  %105 = getelementptr [3 x ptr], ptr %104, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %105, align 8
  %106 = getelementptr [3 x ptr], ptr %104, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %106, align 8
  %107 = getelementptr [3 x ptr], ptr %104, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 9, ptr %104)
  %109 = call ptr @llvm.invariant.start.p0(i64 72, ptr %96)
  %110 = getelementptr ptr, ptr %96, i32 %102
  %111 = getelementptr ptr, ptr %110, i32 3
  %112 = load ptr, ptr %111, align 8
  %113 = alloca { ptr, ptr, ptr }, align 8
  %114 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 0
  store ptr @i32_typ, ptr %114, align 8
  %115 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 1
  store ptr @i32_typ, ptr %115, align 8
  %116 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 2
  store ptr @i32_typ, ptr %116, align 8
  %117 = call ptr @behavior_wrapper(ptr %112, { ptr, ptr, ptr, i32 } %103, ptr %113)
  call void %117({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr %104, i32 %93, i32 %94, i32 %95) #15
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %60, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %122 = load ptr, ptr %59, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %124 = load ptr, ptr %58, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %126 = load i32, ptr %57, align 4
  store i32 %126, ptr %125, align 4
  call void @set_offset(ptr %118, ptr @Iterator)
  %127 = load ptr, ptr %119, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %121, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %123, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %125, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  ret { ptr, ptr, ptr, i32 } %134
}

define { i64, i64 } @_data_size_RangeIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @i32_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @i32_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 5, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [9 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @RangeIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [9 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @RangeIterator_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @RangeIterator)
  %21 = alloca i32, align 4
  store i32 %3, ptr %21, align 4
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 72, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load i32, ptr %21, align 4
  call void %29(ptr %22, i32 %30) #16
  %31 = alloca i32, align 4
  store i32 %4, ptr %31, align 4
  %32 = load ptr, ptr %13, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 72, ptr %33)
  %35 = load i32, ptr %19, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = load i32, ptr %31, align 4
  call void %40(ptr %32, i32 %41) #16
  %42 = alloca i32, align 4
  store i32 %5, ptr %42, align 4
  %43 = load ptr, ptr %13, align 8
  %44 = load ptr, ptr %8, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 72, ptr %44)
  %46 = load i32, ptr %19, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load i32, ptr %42, align 4
  call void %51(ptr %43, i32 %52) #16
  ret void
}

define { ptr, i32 } @RangeIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca i64, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem23 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  store ptr %22, ptr %.reg2mem14, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload22 = load ptr, ptr %.reg2mem14, align 8
  store ptr %23, ptr %.reload22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr %28, ptr %.reg2mem5, align 8
  %29 = load i32, ptr %27, align 4
  %.reload13 = load ptr, ptr %.reg2mem5, align 8
  store i32 %29, ptr %.reload13, align 4
  call void @set_offset(ptr %17, ptr @RangeIterator)
  %.reload21 = load ptr, ptr %.reg2mem14, align 8
  %30 = load ptr, ptr %.reload21, align 8
  %31 = load ptr, ptr %17, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 72, ptr %31)
  %.reload12 = load ptr, ptr %.reg2mem5, align 8
  %33 = load i32, ptr %.reload12, align 4
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %30) #17
  %39 = alloca i32, align 4
  store i32 %38, ptr %39, align 4
  %.reload20 = load ptr, ptr %.reg2mem14, align 8
  %40 = load ptr, ptr %.reload20, align 8
  %41 = load ptr, ptr %17, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 72, ptr %41)
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  %43 = load i32, ptr %.reload11, align 4
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr { ptr, ptr }, ptr %46, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = call i32 %48(ptr %40) #17
  %50 = alloca i32, align 4
  store i32 %49, ptr %50, align 4
  %51 = load i32, ptr %39, align 4
  %52 = load i32, ptr %50, align 4
  %53 = icmp sgt i32 %51, %52
  %54 = alloca i1, align 1
  store i1 %53, ptr %54, align 1
  %55 = load i1, ptr %54, align 1
  br i1 %55, label %56, label %62

56:                                               ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %6, align 4
  %57 = load i64, ptr %6, align 4
  store i64 %57, ptr %5, align 4
  %58 = load ptr, ptr %5, align 8
  %59 = insertvalue { ptr, i32 } undef, ptr %58, 0
  %60 = load i32, ptr %4, align 4
  %61 = insertvalue { ptr, i32 } %59, i32 %60, 1
  store { ptr, i32 } %61, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem23, align 8
  br label %122

62:                                               ; preds = %3
  %.reload19 = load ptr, ptr %.reg2mem14, align 8
  %63 = load ptr, ptr %.reload19, align 8
  %64 = load ptr, ptr %17, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 72, ptr %64)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %66 = load i32, ptr %.reload10, align 4
  %67 = getelementptr ptr, ptr %64, i32 %66
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr { ptr, ptr }, ptr %68, i32 0, i32 0
  %70 = load ptr, ptr %69, align 8
  %71 = call i32 %70(ptr %63) #17
  store i32 %71, ptr %7, align 4
  %.reload18 = load ptr, ptr %.reg2mem14, align 8
  %72 = load ptr, ptr %.reload18, align 8
  %73 = load ptr, ptr %17, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 72, ptr %73)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %75 = load i32, ptr %.reload9, align 4
  %76 = getelementptr ptr, ptr %73, i32 %75
  %77 = getelementptr ptr, ptr %76, i32 2
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = call i32 %80(ptr %72) #17
  store i32 %81, ptr %8, align 4
  %82 = load i32, ptr %7, align 4
  %83 = load i32, ptr %8, align 4
  %84 = add i32 %82, %83
  store i32 %84, ptr %9, align 4
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  %85 = load ptr, ptr %.reload17, align 8
  %86 = load ptr, ptr %17, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 72, ptr %86)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %88 = load i32, ptr %.reload8, align 4
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = load i32, ptr %9, align 4
  call void %92(ptr %85, i32 %93) #16
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %94 = load ptr, ptr %.reload16, align 8
  %95 = load ptr, ptr %17, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 72, ptr %95)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %97 = load i32, ptr %.reload7, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = call i32 %101(ptr %94) #17
  store i32 %102, ptr %10, align 4
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %103 = load ptr, ptr %.reload15, align 8
  %104 = load ptr, ptr %17, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 72, ptr %104)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %106 = load i32, ptr %.reload6, align 4
  %107 = getelementptr ptr, ptr %104, i32 %106
  %108 = getelementptr ptr, ptr %107, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr }, ptr %109, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = call i32 %111(ptr %103) #17
  store i32 %112, ptr %11, align 4
  %113 = load i32, ptr %10, align 4
  %114 = load i32, ptr %11, align 4
  %115 = sub i32 %113, %114
  store i32 %115, ptr %12, align 4
  %116 = load i32, ptr %12, align 4
  store i32 %116, ptr %13, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %15, align 4
  %117 = load i64, ptr %15, align 4
  store i64 %117, ptr %14, align 4
  %118 = load ptr, ptr %14, align 8
  %119 = insertvalue { ptr, i32 } undef, ptr %118, 0
  %120 = load i32, ptr %13, align 4
  %121 = insertvalue { ptr, i32 } %119, i32 %120, 1
  store { ptr, i32 } %121, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem23, align 8
  br label %122

122:                                              ; preds = %62, %56
  %.reload24 = load { ptr, i32 }, ptr %.reg2mem23, align 8
  store { ptr, i32 } %.reload24, ptr %.reg2mem, align 8
  br label %123

123:                                              ; preds = %122
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define i32 @RangeIterator_getter_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @RangeIterator_setter_step(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define i32 @RangeIterator_getter_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @RangeIterator_setter_end(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define i32 @RangeIterator_getter_counter(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @RangeIterator_setter_counter(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define i32 @Range_getter_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Range_setter_step(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define i32 @Range_getter_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @Range_setter_end(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define i32 @Range_getter_start(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Range_setter_start(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_OutOfBoundsDetails(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @i32_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 4, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [6 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @OutOfBoundsDetails_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 5, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [6 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @OutOfBoundsDetails_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @OutOfBoundsDetails)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 48, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %20, align 4
  call void %28(ptr %21, i32 %29) #16
  %30 = alloca i32, align 4
  store i32 %4, ptr %30, align 4
  %31 = load ptr, ptr %12, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 48, ptr %32)
  %34 = load i32, ptr %18, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = load i32, ptr %30, align 4
  call void %39(ptr %31, i32 %40) #16
  ret void
}

define void @OutOfBoundsDetails_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @OutOfBoundsDetails)
  %18 = alloca i32, align 4
  store i32 45, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([44 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <44 x i8>, ptr @bnara_The_size_of_the_collection_being_indexed_was, align 64
  store <44 x i8> %33, ptr %32, align 64
  %34 = alloca i32, align 4
  store i32 44, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 45, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  store ptr @String, ptr %43, align 8
  store ptr %42, ptr %44, align 8
  store i32 10, ptr %45, align 4
  %46 = alloca i32, align 4
  store i32 44, ptr %46, align 4
  %47 = alloca i32, align 4
  store i32 45, ptr %47, align 4
  %48 = load ptr, ptr %24, align 8
  %49 = insertvalue { ptr } undef, ptr %48, 0
  %50 = load i32, ptr %46, align 4
  %51 = load i32, ptr %47, align 4
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %44, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 2
  %60 = load i32, ptr %45, align 4
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %60, 3
  %62 = alloca [3 x ptr], align 8
  %63 = getelementptr [3 x ptr], ptr %62, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %62, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = getelementptr [3 x ptr], ptr %62, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 9, ptr %62)
  %67 = call ptr @llvm.invariant.start.p0(i64 280, ptr %53)
  %68 = getelementptr ptr, ptr %53, i32 %60
  %69 = getelementptr ptr, ptr %68, i32 4
  %70 = load ptr, ptr %69, align 8
  %71 = alloca { ptr, ptr, ptr }, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 0
  store ptr @buffer_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 1
  store ptr @i32_typ, ptr %73, align 8
  %74 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 2
  store ptr @i32_typ, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr %70, { ptr, ptr, ptr, i32 } %61, ptr %71)
  call void %75({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr %62, { ptr } %49, i32 %50, i32 %51) #15
  %76 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, i160 } undef, ptr %77, 0
  %79 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 1
  %80 = load i160, ptr %79, align 4
  %81 = insertvalue { ptr, i160 } %78, i160 %80, 1
  %82 = alloca [1 x ptr], align 8
  %83 = getelementptr [1 x ptr], ptr %82, i32 0, i32 0
  store ptr @_parameterization_String, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 1, ptr %82)
  %85 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %86 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %87 = alloca { ptr }, align 8
  %88 = getelementptr { ptr }, ptr %87, i32 0, i32 0
  store ptr %77, ptr %88, align 8
  %89 = call ptr @class_behavior_wrapper(ptr %86, ptr %87)
  call void %89(ptr %82, { ptr, i160 } %81) #15
  %90 = load ptr, ptr %10, align 8
  %91 = load ptr, ptr %5, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 48, ptr %91)
  %93 = load i32, ptr %16, align 4
  %94 = getelementptr ptr, ptr %91, i32 %93
  %95 = load ptr, ptr %94, align 8
  %96 = getelementptr { ptr, ptr }, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = call i32 %97(ptr %90) #17
  %99 = alloca i32, align 4
  store i32 %98, ptr %99, align 4
  %100 = alloca i160, align 8
  %101 = alloca ptr, align 8
  %102 = load i32, ptr %99, align 4
  store i32 %102, ptr %100, align 4
  %103 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %103, align 4
  %104 = load i64, ptr %103, align 4
  store i64 %104, ptr %101, align 4
  %105 = load ptr, ptr %101, align 8
  %106 = insertvalue { ptr, i160 } undef, ptr %105, 0
  %107 = load i160, ptr %100, align 4
  %108 = insertvalue { ptr, i160 } %106, i160 %107, 1
  %109 = alloca [1 x ptr], align 8
  %110 = getelementptr [1 x ptr], ptr %109, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %110, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 1, ptr %109)
  %112 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %113 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %114 = alloca { ptr }, align 8
  %115 = getelementptr { ptr }, ptr %114, i32 0, i32 0
  store ptr %105, ptr %115, align 8
  %116 = call ptr @class_behavior_wrapper(ptr %113, ptr %114)
  call void %116(ptr %109, { ptr, i160 } %108) #15
  %117 = alloca i32, align 4
  store i32 26, ptr %117, align 4
  %118 = load i32, ptr %117, align 4
  %119 = sext i32 %118 to i64
  %120 = alloca ptr, align 8
  %121 = mul i64 %119, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %122 = call ptr @bump_malloc(i64 %121)
  store ptr %122, ptr %120, align 8
  %123 = alloca ptr, align 8
  %124 = getelementptr { ptr }, ptr %120, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  store ptr %125, ptr %123, align 8
  %126 = alloca i32, align 4
  store i32 0, ptr %126, align 4
  %127 = load ptr, ptr %123, align 8
  %128 = load i32, ptr %126, align 4
  %129 = sext i32 %128 to i64
  %130 = mul i64 ptrtoint (ptr getelementptr ([25 x i8], ptr null, i32 1) to i64), %129
  %131 = getelementptr i8, ptr %127, i64 %130
  %132 = load <25 x i8>, ptr @ithzk_The_indexing_argument_was, align 32
  store <25 x i8> %132, ptr %131, align 32
  %133 = alloca i32, align 4
  store i32 25, ptr %133, align 4
  %134 = alloca i32, align 4
  store i32 26, ptr %134, align 4
  %135 = alloca [1 x ptr], align 8
  store ptr @String, ptr %135, align 8
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr ptr, ptr %136, i32 6
  %138 = load ptr, ptr %137, align 8
  %139 = call { i64, i64 } @size_wrapper(ptr %138, ptr %135)
  %140 = extractvalue { i64, i64 } %139, 0
  %141 = call ptr @bump_malloc(i64 %140)
  %142 = alloca { ptr, ptr, ptr, i32 }, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 1
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 3
  store ptr @String, ptr %142, align 8
  store ptr %141, ptr %143, align 8
  store i32 10, ptr %144, align 4
  %145 = alloca i32, align 4
  store i32 25, ptr %145, align 4
  %146 = alloca i32, align 4
  store i32 26, ptr %146, align 4
  %147 = load ptr, ptr %123, align 8
  %148 = insertvalue { ptr } undef, ptr %147, 0
  %149 = load i32, ptr %145, align 4
  %150 = load i32, ptr %146, align 4
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %152, 0
  %154 = load ptr, ptr %143, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 1
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 2
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %157, 2
  %159 = load i32, ptr %144, align 4
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, i32 %159, 3
  %161 = alloca [3 x ptr], align 8
  %162 = getelementptr [3 x ptr], ptr %161, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %162, align 8
  %163 = getelementptr [3 x ptr], ptr %161, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %163, align 8
  %164 = getelementptr [3 x ptr], ptr %161, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %164, align 8
  %165 = call ptr @llvm.invariant.start.p0(i64 9, ptr %161)
  %166 = call ptr @llvm.invariant.start.p0(i64 280, ptr %152)
  %167 = getelementptr ptr, ptr %152, i32 %159
  %168 = getelementptr ptr, ptr %167, i32 4
  %169 = load ptr, ptr %168, align 8
  %170 = alloca { ptr, ptr, ptr }, align 8
  %171 = getelementptr { ptr, ptr, ptr }, ptr %170, i32 0, i32 0
  store ptr @buffer_typ, ptr %171, align 8
  %172 = getelementptr { ptr, ptr, ptr }, ptr %170, i32 0, i32 1
  store ptr @i32_typ, ptr %172, align 8
  %173 = getelementptr { ptr, ptr, ptr }, ptr %170, i32 0, i32 2
  store ptr @i32_typ, ptr %173, align 8
  %174 = call ptr @behavior_wrapper(ptr %169, { ptr, ptr, ptr, i32 } %160, ptr %170)
  call void %174({ ptr, ptr, ptr, i32 } %160, { ptr, ptr, ptr, i32 } %160, ptr %161, { ptr } %148, i32 %149, i32 %150) #15
  %175 = getelementptr { ptr, i160 }, ptr %142, i32 0, i32 0
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, i160 } undef, ptr %176, 0
  %178 = getelementptr { ptr, i160 }, ptr %142, i32 0, i32 1
  %179 = load i160, ptr %178, align 4
  %180 = insertvalue { ptr, i160 } %177, i160 %179, 1
  %181 = alloca [1 x ptr], align 8
  %182 = getelementptr [1 x ptr], ptr %181, i32 0, i32 0
  store ptr @_parameterization_String, ptr %182, align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 1, ptr %181)
  %184 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %185 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %186 = alloca { ptr }, align 8
  %187 = getelementptr { ptr }, ptr %186, i32 0, i32 0
  store ptr %176, ptr %187, align 8
  %188 = call ptr @class_behavior_wrapper(ptr %185, ptr %186)
  call void %188(ptr %181, { ptr, i160 } %180) #15
  %189 = load ptr, ptr %10, align 8
  %190 = load ptr, ptr %5, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 48, ptr %190)
  %192 = load i32, ptr %16, align 4
  %193 = getelementptr ptr, ptr %190, i32 %192
  %194 = getelementptr ptr, ptr %193, i32 1
  %195 = load ptr, ptr %194, align 8
  %196 = getelementptr { ptr, ptr }, ptr %195, i32 0, i32 0
  %197 = load ptr, ptr %196, align 8
  %198 = call i32 %197(ptr %189) #17
  %199 = alloca i32, align 4
  store i32 %198, ptr %199, align 4
  %200 = alloca i160, align 8
  %201 = alloca ptr, align 8
  %202 = load i32, ptr %199, align 4
  store i32 %202, ptr %200, align 4
  %203 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %203, align 4
  %204 = load i64, ptr %203, align 4
  store i64 %204, ptr %201, align 4
  %205 = load ptr, ptr %201, align 8
  %206 = insertvalue { ptr, i160 } undef, ptr %205, 0
  %207 = load i160, ptr %200, align 4
  %208 = insertvalue { ptr, i160 } %206, i160 %207, 1
  %209 = alloca [1 x ptr], align 8
  %210 = getelementptr [1 x ptr], ptr %209, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %210, align 8
  %211 = call ptr @llvm.invariant.start.p0(i64 1, ptr %209)
  %212 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %213 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %214 = alloca { ptr }, align 8
  %215 = getelementptr { ptr }, ptr %214, i32 0, i32 0
  store ptr %205, ptr %215, align 8
  %216 = call ptr @class_behavior_wrapper(ptr %213, ptr %214)
  call void %216(ptr %209, { ptr, i160 } %208) #15
  ret void
}

define i32 @OutOfBoundsDetails_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @OutOfBoundsDetails_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define i32 @OutOfBoundsDetails_getter_bounds(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @OutOfBoundsDetails_setter_bounds(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_OutOfBounds(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @OutOfBounds_B_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @i32_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 10, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [29 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @OutOfBounds_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @String, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @String to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 11, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [29 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @OutOfBounds_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [29 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 1
  %13 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 0, i32 2
  %14 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 0
  %15 = getelementptr { [3 x i64], [3 x ptr] }, ptr %11, i32 0, i32 1, i32 1
  %16 = load i64, ptr %12, align 4
  %17 = load i64, ptr %13, align 4
  %18 = load ptr, ptr %14, align 8
  %19 = load ptr, ptr %15, align 8
  %20 = load i64, ptr @String, align 4
  %21 = call i1 @subtype_test_wrapper(ptr %18, i64 %17, i64 %16, i64 %20, i64 ptrtoint (ptr @String to i64), ptr %19)
  store i1 %21, ptr %3, align 1
  store i32 13, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [29 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @OutOfBounds_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 14, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [29 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @OutOfBounds_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 15, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [29 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @OutOfBounds_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @OutOfBounds)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = alloca i32, align 4
  store i32 %4, ptr %21, align 4
  %22 = alloca [1 x ptr], align 8
  store ptr @OutOfBoundsDetails, ptr %22, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr ptr, ptr %23, i32 6
  %25 = load ptr, ptr %24, align 8
  %26 = call { i64, i64 } @size_wrapper(ptr %25, ptr %22)
  %27 = extractvalue { i64, i64 } %26, 0
  %28 = call ptr @bump_malloc(i64 %27)
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  store ptr @OutOfBoundsDetails, ptr %29, align 8
  store ptr %28, ptr %30, align 8
  store i32 10, ptr %31, align 4
  %32 = load i32, ptr %20, align 4
  %33 = load i32, ptr %21, align 4
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = load ptr, ptr %30, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = load i32, ptr %31, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %42, 3
  %44 = alloca [2 x ptr], align 8
  %45 = getelementptr [2 x ptr], ptr %44, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %45, align 8
  %46 = getelementptr [2 x ptr], ptr %44, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %46, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 4, ptr %44)
  %48 = call ptr @llvm.invariant.start.p0(i64 48, ptr %35)
  %49 = getelementptr ptr, ptr %35, i32 %42
  %50 = getelementptr ptr, ptr %49, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = alloca { ptr, ptr }, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 0
  store ptr @i32_typ, ptr %53, align 8
  %54 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 1
  store ptr @i32_typ, ptr %54, align 8
  %55 = call ptr @behavior_wrapper(ptr %51, { ptr, ptr, ptr, i32 } %43, ptr %52)
  call void %55({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44, i32 %32, i32 %33) #15
  %56 = load ptr, ptr %12, align 8
  %57 = load ptr, ptr %7, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 232, ptr %57)
  %59 = load i32, ptr %18, align 4
  %60 = getelementptr ptr, ptr %57, i32 %59
  %61 = load ptr, ptr %60, align 8
  %62 = getelementptr { ptr, ptr }, ptr %61, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, i160 } undef, ptr %65, 0
  %67 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 1
  %68 = load i160, ptr %67, align 4
  %69 = insertvalue { ptr, i160 } %66, i160 %68, 1
  call void %63(ptr %56, { ptr, i160 } %69) #16
  %70 = alloca i32, align 4
  store i32 0, ptr %70, align 4
  %71 = load ptr, ptr %12, align 8
  %72 = load ptr, ptr %7, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 232, ptr %72)
  %74 = load i32, ptr %18, align 4
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr }, ptr %77, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load i32, ptr %70, align 4
  call void %79(ptr %71, i32 %80) #16
  %81 = alloca i32, align 4
  store i32 1, ptr %81, align 4
  %82 = load i32, ptr %81, align 4
  %83 = sext i32 %82 to i64
  %84 = alloca ptr, align 8
  %85 = mul i64 %83, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %86 = call ptr @bump_malloc(i64 %85)
  store ptr %86, ptr %84, align 8
  %87 = alloca ptr, align 8
  %88 = getelementptr { ptr }, ptr %84, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  store ptr %89, ptr %87, align 8
  %90 = alloca i32, align 4
  store i32 0, ptr %90, align 4
  %91 = alloca i32, align 4
  store i32 0, ptr %91, align 4
  %92 = alloca i32, align 4
  store i32 1, ptr %92, align 4
  %93 = alloca [1 x ptr], align 8
  store ptr @String, ptr %93, align 8
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr ptr, ptr %94, i32 6
  %96 = load ptr, ptr %95, align 8
  %97 = call { i64, i64 } @size_wrapper(ptr %96, ptr %93)
  %98 = extractvalue { i64, i64 } %97, 0
  %99 = call ptr @bump_malloc(i64 %98)
  %100 = alloca i32, align 4
  %101 = alloca ptr, align 8
  %102 = alloca ptr, align 8
  %103 = alloca ptr, align 8
  store ptr @String, ptr %103, align 8
  store ptr %99, ptr %102, align 8
  store i32 10, ptr %100, align 4
  %104 = alloca i32, align 4
  store i32 0, ptr %104, align 4
  %105 = alloca i32, align 4
  store i32 1, ptr %105, align 4
  %106 = load ptr, ptr %87, align 8
  %107 = insertvalue { ptr } undef, ptr %106, 0
  %108 = load i32, ptr %104, align 4
  %109 = load i32, ptr %105, align 4
  %110 = load ptr, ptr %103, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %112 = load ptr, ptr %102, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 1
  %114 = load ptr, ptr %101, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 2
  %116 = load i32, ptr %100, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %116, 3
  %118 = alloca [3 x ptr], align 8
  %119 = getelementptr [3 x ptr], ptr %118, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %119, align 8
  %120 = getelementptr [3 x ptr], ptr %118, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %120, align 8
  %121 = getelementptr [3 x ptr], ptr %118, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %121, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 9, ptr %118)
  %123 = call ptr @llvm.invariant.start.p0(i64 280, ptr %110)
  %124 = getelementptr ptr, ptr %110, i32 %116
  %125 = getelementptr ptr, ptr %124, i32 4
  %126 = load ptr, ptr %125, align 8
  %127 = alloca { ptr, ptr, ptr }, align 8
  %128 = getelementptr { ptr, ptr, ptr }, ptr %127, i32 0, i32 0
  store ptr @buffer_typ, ptr %128, align 8
  %129 = getelementptr { ptr, ptr, ptr }, ptr %127, i32 0, i32 1
  store ptr @i32_typ, ptr %129, align 8
  %130 = getelementptr { ptr, ptr, ptr }, ptr %127, i32 0, i32 2
  store ptr @i32_typ, ptr %130, align 8
  %131 = call ptr @behavior_wrapper(ptr %126, { ptr, ptr, ptr, i32 } %117, ptr %127)
  call void %131({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %118, { ptr } %107, i32 %108, i32 %109) #15
  %132 = alloca { ptr, ptr, ptr, i32 }, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %103, align 8
  store ptr %134, ptr %133, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 1
  %136 = load ptr, ptr %102, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 2
  %138 = load ptr, ptr %101, align 8
  store ptr %138, ptr %137, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 3
  %140 = load i32, ptr %100, align 4
  store i32 %140, ptr %139, align 4
  call void @set_offset(ptr %132, ptr @String)
  %141 = load ptr, ptr %12, align 8
  %142 = load ptr, ptr %7, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 232, ptr %142)
  %144 = load i32, ptr %18, align 4
  %145 = getelementptr ptr, ptr %142, i32 %144
  %146 = getelementptr ptr, ptr %145, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = getelementptr { ptr, ptr }, ptr %147, i32 0, i32 1
  %149 = load ptr, ptr %148, align 8
  %150 = load ptr, ptr %133, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %150, 0
  %152 = load ptr, ptr %135, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %152, 1
  %154 = load ptr, ptr %137, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 2
  %156 = load i32, ptr %139, align 4
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 %156, 3
  call void %149(ptr %141, { ptr, ptr, ptr, i32 } %157) #16
  %158 = alloca i32, align 4
  store i32 66, ptr %158, align 4
  %159 = load i32, ptr %158, align 4
  %160 = sext i32 %159 to i64
  %161 = alloca ptr, align 8
  %162 = mul i64 %160, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %163 = call ptr @bump_malloc(i64 %162)
  store ptr %163, ptr %161, align 8
  %164 = alloca ptr, align 8
  %165 = getelementptr { ptr }, ptr %161, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  store ptr %166, ptr %164, align 8
  %167 = alloca i32, align 4
  store i32 0, ptr %167, align 4
  %168 = load ptr, ptr %164, align 8
  %169 = load i32, ptr %167, align 4
  %170 = sext i32 %169 to i64
  %171 = mul i64 ptrtoint (ptr getelementptr ([65 x i8], ptr null, i32 1) to i64), %170
  %172 = getelementptr i8, ptr %168, i64 %171
  %173 = load <65 x i8>, ptr @vmgvw_An_outofbounds_error_occurred_while_indexing_into_a_collection, align 128
  store <65 x i8> %173, ptr %172, align 128
  %174 = alloca i32, align 4
  store i32 65, ptr %174, align 4
  %175 = alloca i32, align 4
  store i32 66, ptr %175, align 4
  %176 = alloca [1 x ptr], align 8
  store ptr @String, ptr %176, align 8
  %177 = load ptr, ptr %176, align 8
  %178 = getelementptr ptr, ptr %177, i32 6
  %179 = load ptr, ptr %178, align 8
  %180 = call { i64, i64 } @size_wrapper(ptr %179, ptr %176)
  %181 = extractvalue { i64, i64 } %180, 0
  %182 = call ptr @bump_malloc(i64 %181)
  %183 = alloca i32, align 4
  %184 = alloca ptr, align 8
  %185 = alloca ptr, align 8
  %186 = alloca ptr, align 8
  store ptr @String, ptr %186, align 8
  store ptr %182, ptr %185, align 8
  store i32 10, ptr %183, align 4
  %187 = alloca i32, align 4
  store i32 65, ptr %187, align 4
  %188 = alloca i32, align 4
  store i32 66, ptr %188, align 4
  %189 = load ptr, ptr %164, align 8
  %190 = insertvalue { ptr } undef, ptr %189, 0
  %191 = load i32, ptr %187, align 4
  %192 = load i32, ptr %188, align 4
  %193 = load ptr, ptr %186, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = load ptr, ptr %185, align 8
  %196 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %195, 1
  %197 = load ptr, ptr %184, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %196, ptr %197, 2
  %199 = load i32, ptr %183, align 4
  %200 = insertvalue { ptr, ptr, ptr, i32 } %198, i32 %199, 3
  %201 = alloca [3 x ptr], align 8
  %202 = getelementptr [3 x ptr], ptr %201, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %202, align 8
  %203 = getelementptr [3 x ptr], ptr %201, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %203, align 8
  %204 = getelementptr [3 x ptr], ptr %201, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %204, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 9, ptr %201)
  %206 = call ptr @llvm.invariant.start.p0(i64 280, ptr %193)
  %207 = getelementptr ptr, ptr %193, i32 %199
  %208 = getelementptr ptr, ptr %207, i32 4
  %209 = load ptr, ptr %208, align 8
  %210 = alloca { ptr, ptr, ptr }, align 8
  %211 = getelementptr { ptr, ptr, ptr }, ptr %210, i32 0, i32 0
  store ptr @buffer_typ, ptr %211, align 8
  %212 = getelementptr { ptr, ptr, ptr }, ptr %210, i32 0, i32 1
  store ptr @i32_typ, ptr %212, align 8
  %213 = getelementptr { ptr, ptr, ptr }, ptr %210, i32 0, i32 2
  store ptr @i32_typ, ptr %213, align 8
  %214 = call ptr @behavior_wrapper(ptr %209, { ptr, ptr, ptr, i32 } %200, ptr %210)
  call void %214({ ptr, ptr, ptr, i32 } %200, { ptr, ptr, ptr, i32 } %200, ptr %201, { ptr } %190, i32 %191, i32 %192) #15
  %215 = alloca { ptr, ptr, ptr, i32 }, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 0
  %217 = load ptr, ptr %186, align 8
  store ptr %217, ptr %216, align 8
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 1
  %219 = load ptr, ptr %185, align 8
  store ptr %219, ptr %218, align 8
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 2
  %221 = load ptr, ptr %184, align 8
  store ptr %221, ptr %220, align 8
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 3
  %223 = load i32, ptr %183, align 4
  store i32 %223, ptr %222, align 4
  call void @set_offset(ptr %215, ptr @String)
  %224 = load ptr, ptr %12, align 8
  %225 = load ptr, ptr %7, align 8
  %226 = call ptr @llvm.invariant.start.p0(i64 232, ptr %225)
  %227 = load i32, ptr %18, align 4
  %228 = getelementptr ptr, ptr %225, i32 %227
  %229 = getelementptr ptr, ptr %228, i32 3
  %230 = load ptr, ptr %229, align 8
  %231 = getelementptr { ptr, ptr }, ptr %230, i32 0, i32 1
  %232 = load ptr, ptr %231, align 8
  %233 = load ptr, ptr %216, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %233, 0
  %235 = load ptr, ptr %218, align 8
  %236 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %235, 1
  %237 = load ptr, ptr %220, align 8
  %238 = insertvalue { ptr, ptr, ptr, i32 } %236, ptr %237, 2
  %239 = load i32, ptr %222, align 4
  %240 = insertvalue { ptr, ptr, ptr, i32 } %238, i32 %239, 3
  call void %232(ptr %224, { ptr, ptr, ptr, i32 } %240) #16
  ret void
}

define void @OutOfBounds_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @OutOfBounds)
  %21 = load ptr, ptr %13, align 8
  %22 = load ptr, ptr %8, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 232, ptr %22)
  %24 = load i32, ptr %19, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %21) #17
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  call void @assume_offset(ptr %31, ptr @String)
  %32 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, i160 } undef, ptr %33, 0
  %35 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %36 = load i160, ptr %35, align 4
  %37 = insertvalue { ptr, i160 } %34, i160 %36, 1
  %38 = alloca [1 x ptr], align 8
  %39 = getelementptr [1 x ptr], ptr %38, i32 0, i32 0
  store ptr @_parameterization_String, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 1, ptr %38)
  %41 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %42 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %43 = alloca { ptr }, align 8
  %44 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  store ptr %33, ptr %44, align 8
  %45 = call ptr @class_behavior_wrapper(ptr %42, ptr %43)
  call void %45(ptr %38, { ptr, i160 } %37) #15
  %46 = load ptr, ptr %13, align 8
  %47 = load ptr, ptr %8, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 232, ptr %47)
  %49 = load i32, ptr %19, align 4
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call { ptr, i160 } %53(ptr %46) #17
  %55 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %54, ptr %55, align 8
  %56 = load ptr, ptr %55, align 8
  %57 = ptrtoint ptr %56 to i64
  %58 = icmp eq i64 %57, ptrtoint (ptr @nil_typ to i64)
  %59 = icmp eq i64 %57, 0
  %60 = or i1 %58, %59
  %61 = icmp eq i1 %60, false
  %62 = alloca i1, align 1
  store i1 %61, ptr %62, align 1
  %63 = load i1, ptr %62, align 1
  br i1 %63, label %64, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %91

64:                                               ; preds = %3
  %65 = getelementptr { ptr, i160 }, ptr %55, i32 0, i32 0
  %66 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, i160 }, ptr %55, i32 0, i32 1
  %69 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %70 = load i160, ptr %68, align 4
  store i160 %70, ptr %69, align 4
  call void @set_offset(ptr %4, ptr @OutOfBoundsDetails)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %72, 0
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %75, 1
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %78, 2
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %81 = load i32, ptr %80, align 4
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, i32 %81, 3
  %83 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %84 = call ptr @llvm.invariant.start.p0(i64 48, ptr %72)
  %85 = getelementptr ptr, ptr %72, i32 %81
  %86 = getelementptr ptr, ptr %85, i32 3
  %87 = load ptr, ptr %86, align 8
  %88 = call ptr @behavior_wrapper(ptr %87, { ptr, ptr, ptr, i32 } %82, ptr %6)
  call void %88({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr %5) #15
  %89 = load ptr, ptr %66, align 8
  store ptr %89, ptr %65, align 8
  %90 = load i160, ptr %69, align 4
  store i160 %90, ptr %68, align 4
  br label %91

91:                                               ; preds = %._crit_edge, %64
  ret void
}

define { ptr, ptr, ptr, i32 } @OutOfBounds_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @OutOfBounds_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @OutOfBounds_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @OutOfBounds_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define i32 @OutOfBounds_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @OutOfBounds_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define { ptr, i160 } @OutOfBounds_getter_details(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i160 } undef, ptr %4, 0
  %6 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %7 = load i160, ptr %6, align 4
  %8 = insertvalue { ptr, i160 } %5, i160 %7, 1
  ret { ptr, i160 } %8
}

define void @OutOfBounds_setter_details(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  ret void
}

define { i64, i64 } @_data_size_IntArray(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @IntArray_B__Self_from_iterable_iterableIntIterable(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 1
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 2
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 0
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 1
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @IntIterable, align 4
  %15 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  store i1 %15, ptr %2, align 1
  store i32 26, ptr %4, align 4
  %16 = load i32, ptr %4, align 4
  %17 = getelementptr [77 x ptr], ptr @IntArray, i32 0, i32 %16
  %18 = getelementptr ptr, ptr %17, i32 10
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 27, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @buffer_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @i32_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 28, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [77 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @IntArray_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 29, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @IntArray_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 30, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @IntArray_B_buffer_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 31, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @IntArray_B_append_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 32, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntArray_B_extend_aryIntArray({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntArray, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntArray to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 33, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [77 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @IntArray_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 34, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntArray_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 35, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @IntArray_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 36, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @IntArray_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 37, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @function_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 38, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [77 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 39, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 40, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 41, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 42, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [77 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntArray_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 43, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [77 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @IntArray_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 44, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [77 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @IntArray_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 45, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [77 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @IntArray_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 46, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [77 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @IntArray_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 47, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @IntArray_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 48, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [77 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define { ptr, ptr, ptr, i32 } @IntArray__Self_from_iterable_iterableIntIterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca { ptr, i32 }, align 8
  %6 = alloca i1, align 1
  %7 = alloca i32, align 4
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %13, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @IntIterable)
  %27 = alloca i32, align 4
  store i32 1, ptr %27, align 4
  %28 = load i32, ptr %27, align 4
  %29 = sext i32 %28 to i64
  %30 = alloca ptr, align 8
  %31 = mul i64 %29, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %32 = call ptr @bump_malloc(i64 %31)
  store ptr %32, ptr %30, align 8
  %33 = alloca ptr, align 8
  %34 = getelementptr { ptr }, ptr %30, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  store ptr %35, ptr %33, align 8
  %36 = alloca i32, align 4
  store i32 0, ptr %36, align 4
  %37 = alloca i32, align 4
  store i32 1, ptr %37, align 4
  %38 = alloca [1 x ptr], align 8
  store ptr @IntArray, ptr %38, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr ptr, ptr %39, i32 6
  %41 = load ptr, ptr %40, align 8
  %42 = call { i64, i64 } @size_wrapper(ptr %41, ptr %38)
  %43 = extractvalue { i64, i64 } %42, 0
  %44 = call ptr @bump_malloc(i64 %43)
  %45 = alloca i32, align 4
  %46 = alloca ptr, align 8
  %47 = alloca ptr, align 8
  %48 = alloca ptr, align 8
  store ptr @IntArray, ptr %48, align 8
  store ptr %44, ptr %47, align 8
  store i32 10, ptr %45, align 4
  %49 = alloca i32, align 4
  store i32 0, ptr %49, align 4
  %50 = alloca i32, align 4
  store i32 1, ptr %50, align 4
  %51 = load ptr, ptr %33, align 8
  %52 = insertvalue { ptr } undef, ptr %51, 0
  %53 = load i32, ptr %49, align 4
  %54 = load i32, ptr %50, align 4
  %55 = load ptr, ptr %48, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = load ptr, ptr %47, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 1
  %59 = load ptr, ptr %46, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 2
  %61 = load i32, ptr %45, align 4
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %61, 3
  %63 = alloca [3 x ptr], align 8
  %64 = getelementptr [3 x ptr], ptr %63, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %64, align 8
  %65 = getelementptr [3 x ptr], ptr %63, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %65, align 8
  %66 = getelementptr [3 x ptr], ptr %63, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 9, ptr %63)
  %68 = call ptr @llvm.invariant.start.p0(i64 616, ptr %55)
  %69 = getelementptr ptr, ptr %55, i32 %61
  %70 = getelementptr ptr, ptr %69, i32 5
  %71 = load ptr, ptr %70, align 8
  %72 = alloca { ptr, ptr, ptr }, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %72, i32 0, i32 0
  store ptr @buffer_typ, ptr %73, align 8
  %74 = getelementptr { ptr, ptr, ptr }, ptr %72, i32 0, i32 1
  store ptr @i32_typ, ptr %74, align 8
  %75 = getelementptr { ptr, ptr, ptr }, ptr %72, i32 0, i32 2
  store ptr @i32_typ, ptr %75, align 8
  %76 = call ptr @behavior_wrapper(ptr %71, { ptr, ptr, ptr, i32 } %62, ptr %72)
  call void %76({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr %63, { ptr } %52, i32 %53, i32 %54) #15
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %48, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %81 = load ptr, ptr %47, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %83 = load ptr, ptr %46, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %85 = load i32, ptr %45, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %77, ptr @IntArray)
  %86 = alloca i32, align 4
  %87 = alloca ptr, align 8
  %88 = alloca ptr, align 8
  %89 = alloca ptr, align 8
  %90 = load ptr, ptr %78, align 8
  store ptr %90, ptr %89, align 8
  %91 = load ptr, ptr %80, align 8
  store ptr %91, ptr %88, align 8
  %92 = load ptr, ptr %82, align 8
  store ptr %92, ptr %87, align 8
  %93 = load i32, ptr %84, align 4
  store i32 %93, ptr %86, align 4
  %94 = load ptr, ptr %16, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %94, 0
  %96 = load ptr, ptr %19, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 1
  %98 = load ptr, ptr %22, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 2
  %100 = load i32, ptr %25, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %100, 3
  %102 = alloca [0 x ptr], align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 0, ptr %102)
  %104 = call ptr @llvm.invariant.start.p0(i64 192, ptr %94)
  %105 = getelementptr ptr, ptr %94, i32 %100
  %106 = getelementptr ptr, ptr %105, i32 10
  %107 = load ptr, ptr %106, align 8
  %108 = alloca {}, align 8
  %109 = call ptr @behavior_wrapper(ptr %107, { ptr, ptr, ptr, i32 } %101, ptr %108)
  %110 = call { ptr, ptr, ptr, i32 } %109({ ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %101, ptr %102) #15
  %111 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %110, ptr %111, align 8
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %115 = load ptr, ptr %113, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %118 = load ptr, ptr %116, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 3
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %124 = load i32, ptr %122, align 4
  store i32 %124, ptr %123, align 4
  call void @set_offset(ptr %112, ptr @IntIterator)
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %127 = load ptr, ptr %114, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %129 = load ptr, ptr %117, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %131 = load ptr, ptr %120, align 8
  store ptr %131, ptr %130, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %133 = load i32, ptr %123, align 4
  store i32 %133, ptr %132, align 4
  call void @set_offset(ptr %125, ptr @IntIterator)
  %134 = alloca i32, align 4
  %135 = alloca ptr, align 8
  %136 = alloca ptr, align 8
  %137 = alloca ptr, align 8
  %138 = load ptr, ptr %126, align 8
  store ptr %138, ptr %137, align 8
  %139 = load ptr, ptr %128, align 8
  store ptr %139, ptr %136, align 8
  %140 = load ptr, ptr %130, align 8
  store ptr %140, ptr %135, align 8
  %141 = load i32, ptr %132, align 4
  store i32 %141, ptr %134, align 4
  br label %142

142:                                              ; preds = %._crit_edge1, %2
  %143 = load ptr, ptr %137, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %143, 0
  %145 = load ptr, ptr %136, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %145, 1
  %147 = load ptr, ptr %135, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %147, 2
  %149 = load i32, ptr %134, align 4
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, i32 %149, 3
  %151 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %152 = call ptr @llvm.invariant.start.p0(i64 16, ptr %143)
  %153 = getelementptr ptr, ptr %143, i32 %149
  %154 = load ptr, ptr %153, align 8
  %155 = call ptr @behavior_wrapper(ptr %154, { ptr, ptr, ptr, i32 } %150, ptr %4)
  %156 = call { ptr, i32 } %155({ ptr, ptr, ptr, i32 } %150, { ptr, ptr, ptr, i32 } %150, ptr %3) #15
  store { ptr, i32 } %156, ptr %5, align 8
  %157 = load ptr, ptr %5, align 8
  %158 = ptrtoint ptr %157 to i64
  %159 = icmp eq i64 %158, ptrtoint (ptr @nil_typ to i64)
  %160 = icmp eq i64 %158, 0
  %161 = or i1 %159, %160
  %162 = icmp eq i1 %161, false
  store i1 %162, ptr %6, align 1
  %163 = load i1, ptr %6, align 1
  store i1 %163, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %164, label %._crit_edge

._crit_edge:                                      ; preds = %142
  br label %198

164:                                              ; preds = %142
  %165 = getelementptr { ptr, i32 }, ptr %5, i32 0, i32 1
  %166 = load i32, ptr %165, align 4
  store i32 %166, ptr %7, align 4
  %167 = load i32, ptr %7, align 4
  %168 = load ptr, ptr %89, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %168, 0
  %170 = load ptr, ptr %88, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %170, 1
  %172 = load ptr, ptr %87, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %172, 2
  %174 = load i32, ptr %86, align 4
  %175 = insertvalue { ptr, ptr, ptr, i32 } %173, i32 %174, 3
  %176 = getelementptr [1 x ptr], ptr %8, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %176, align 8
  %177 = call ptr @llvm.invariant.start.p0(i64 1, ptr %8)
  %178 = call ptr @llvm.invariant.start.p0(i64 616, ptr %168)
  %179 = getelementptr ptr, ptr %168, i32 %174
  %180 = getelementptr ptr, ptr %179, i32 9
  %181 = load ptr, ptr %180, align 8
  %182 = getelementptr { ptr }, ptr %9, i32 0, i32 0
  store ptr @i32_typ, ptr %182, align 8
  %183 = call ptr @behavior_wrapper(ptr %181, { ptr, ptr, ptr, i32 } %175, ptr %9)
  %184 = call { ptr, ptr, ptr, i32 } %183({ ptr, ptr, ptr, i32 } %175, { ptr, ptr, ptr, i32 } %175, ptr %8, i32 %167) #15
  store { ptr, ptr, ptr, i32 } %184, ptr %10, align 8
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %187 = load ptr, ptr %185, align 8
  store ptr %187, ptr %186, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %190 = load ptr, ptr %188, align 8
  store ptr %190, ptr %189, align 8
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %193 = load ptr, ptr %191, align 8
  store ptr %193, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %196 = load i32, ptr %194, align 4
  store i32 %196, ptr %195, align 4
  call void @set_offset(ptr %11, ptr @IntArray)
  %197 = load i32, ptr %7, align 4
  store i32 %197, ptr %5, align 4
  br label %198

198:                                              ; preds = %._crit_edge, %164
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %199

._crit_edge1:                                     ; preds = %198
  br label %142

199:                                              ; preds = %198
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %201 = load ptr, ptr %89, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %203 = load ptr, ptr %88, align 8
  store ptr %203, ptr %202, align 8
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %205 = load ptr, ptr %87, align 8
  store ptr %205, ptr %204, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %207 = load i32, ptr %86, align 4
  store i32 %207, ptr %206, align 4
  call void @set_offset(ptr %12, ptr @IntArray)
  %208 = load ptr, ptr %200, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %208, 0
  %210 = load ptr, ptr %202, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %210, 1
  %212 = load ptr, ptr %204, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } %211, ptr %212, 2
  %214 = load i32, ptr %206, align 4
  %215 = insertvalue { ptr, ptr, ptr, i32 } %213, i32 %214, 3
  ret { ptr, ptr, ptr, i32 } %215
}

define void @IntArray_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @IntArray)
  %18 = alloca i32, align 4
  store i32 1, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = load ptr, ptr %10, align 8
  %25 = load ptr, ptr %5, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 616, ptr %25)
  %27 = load i32, ptr %16, align 4
  %28 = getelementptr ptr, ptr %25, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %31(ptr %24, { ptr } %34) #16
  %35 = alloca i32, align 4
  store i32 1, ptr %35, align 4
  %36 = load ptr, ptr %10, align 8
  %37 = load ptr, ptr %5, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 616, ptr %37)
  %39 = load i32, ptr %16, align 4
  %40 = getelementptr ptr, ptr %37, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load i32, ptr %35, align 4
  call void %44(ptr %36, i32 %45) #16
  %46 = alloca i32, align 4
  store i32 0, ptr %46, align 4
  %47 = load ptr, ptr %10, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 616, ptr %48)
  %50 = load i32, ptr %16, align 4
  %51 = getelementptr ptr, ptr %48, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = load i32, ptr %46, align 4
  call void %55(ptr %47, i32 %56) #16
  ret void
}

define void @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @IntArray)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 616, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %21, align 8
  %31 = insertvalue { ptr } undef, ptr %30, 0
  call void %29(ptr %22, { ptr } %31) #16
  %32 = alloca i32, align 4
  store i32 %4, ptr %32, align 4
  %33 = load ptr, ptr %13, align 8
  %34 = load ptr, ptr %8, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 616, ptr %34)
  %36 = load i32, ptr %19, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load i32, ptr %32, align 4
  call void %41(ptr %33, i32 %42) #16
  %43 = alloca i32, align 4
  store i32 %5, ptr %43, align 4
  %44 = load ptr, ptr %13, align 8
  %45 = load ptr, ptr %8, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 616, ptr %45)
  %47 = load i32, ptr %19, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load i32, ptr %43, align 4
  call void %52(ptr %44, i32 %53) #16
  ret void
}

define i32 @IntArray_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @IntArray)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 616, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #17
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define i32 @IntArray_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @IntArray)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 616, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #17
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr } @IntArray_buffer_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @IntArray)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 616, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr } %25(ptr %18) #17
  %27 = alloca ptr, align 8
  store { ptr } %26, ptr %27, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr } undef, ptr %28, 0
  ret { ptr } %29
}

define { ptr, ptr, ptr, i32 } @IntArray_append_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr }, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i32, align 4
  %17 = alloca ptr, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i1, align 1
  %21 = alloca i32, align 4
  %22 = alloca ptr, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca { ptr }, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem21 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem40 = alloca ptr, align 8
  %.reg2mem43 = alloca ptr, align 8
  %.reg2mem59 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %31, align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  store ptr %34, ptr %.reg2mem59, align 8
  %35 = load ptr, ptr %33, align 8
  %.reload61 = load ptr, ptr %.reg2mem59, align 8
  store ptr %35, ptr %.reload61, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  store ptr %37, ptr %.reg2mem43, align 8
  %38 = load ptr, ptr %36, align 8
  %.reload58 = load ptr, ptr %.reg2mem43, align 8
  store ptr %38, ptr %.reload58, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  store ptr %40, ptr %.reg2mem40, align 8
  %41 = load ptr, ptr %39, align 8
  %.reload42 = load ptr, ptr %.reg2mem40, align 8
  store ptr %41, ptr %.reload42, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr %43, ptr %.reg2mem24, align 8
  %44 = load i32, ptr %42, align 4
  %.reload39 = load ptr, ptr %.reg2mem24, align 8
  store i32 %44, ptr %.reload39, align 4
  call void @set_offset(ptr %32, ptr @IntArray)
  %45 = alloca i32, align 4
  store i32 %3, ptr %45, align 4
  %.reload57 = load ptr, ptr %.reg2mem43, align 8
  %46 = load ptr, ptr %.reload57, align 8
  %47 = load ptr, ptr %32, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 616, ptr %47)
  %.reload38 = load ptr, ptr %.reg2mem24, align 8
  %49 = load i32, ptr %.reload38, align 4
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = getelementptr ptr, ptr %50, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = call i32 %54(ptr %46) #17
  %56 = alloca i32, align 4
  store i32 %55, ptr %56, align 4
  %.reload56 = load ptr, ptr %.reg2mem43, align 8
  %57 = load ptr, ptr %.reload56, align 8
  %58 = load ptr, ptr %32, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 616, ptr %58)
  %.reload37 = load ptr, ptr %.reg2mem24, align 8
  %60 = load i32, ptr %.reload37, align 4
  %61 = getelementptr ptr, ptr %58, i32 %60
  %62 = getelementptr ptr, ptr %61, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr { ptr, ptr }, ptr %63, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %66 = call i32 %65(ptr %57) #17
  %67 = alloca i32, align 4
  store i32 %66, ptr %67, align 4
  %68 = load i32, ptr %56, align 4
  %69 = load i32, ptr %67, align 4
  %70 = icmp slt i32 %68, %69
  %71 = alloca i1, align 1
  store i1 %70, ptr %71, align 1
  %72 = load i1, ptr %71, align 1
  %73 = select i1 %72, ptr %5, ptr %25
  store ptr %73, ptr %.reg2mem21, align 8
  %74 = select i1 %72, ptr %6, ptr %26
  store ptr %74, ptr %.reg2mem18, align 8
  %75 = select i1 %72, ptr %7, ptr %27
  store ptr %75, ptr %.reg2mem15, align 8
  %76 = select i1 %72, ptr %8, ptr %28
  store ptr %76, ptr %.reg2mem12, align 8
  %77 = select i1 %72, ptr %9, ptr %29
  store ptr %77, ptr %.reg2mem9, align 8
  %78 = select i1 %72, ptr %10, ptr %30
  store ptr %78, ptr %.reg2mem3, align 8
  br i1 %72, label %79, label %80

79:                                               ; preds = %4
  br label %182

80:                                               ; preds = %4
  %.reload55 = load ptr, ptr %.reg2mem43, align 8
  %81 = load ptr, ptr %.reload55, align 8
  %82 = load ptr, ptr %32, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 616, ptr %82)
  %.reload36 = load ptr, ptr %.reg2mem24, align 8
  %84 = load i32, ptr %.reload36, align 4
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 2
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr { ptr, ptr }, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = call i32 %89(ptr %81) #17
  store i32 %90, ptr %11, align 4
  store i32 2, ptr %12, align 4
  %91 = load i32, ptr %11, align 4
  %92 = load i32, ptr %12, align 4
  %93 = mul i32 %91, %92
  store i32 %93, ptr %13, align 4
  %.reload54 = load ptr, ptr %.reg2mem43, align 8
  %94 = load ptr, ptr %.reload54, align 8
  %95 = load ptr, ptr %32, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 616, ptr %95)
  %.reload35 = load ptr, ptr %.reg2mem24, align 8
  %97 = load i32, ptr %.reload35, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 2
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = load i32, ptr %13, align 4
  call void %102(ptr %94, i32 %103) #16
  %.reload53 = load ptr, ptr %.reg2mem43, align 8
  %104 = load ptr, ptr %.reload53, align 8
  %105 = load ptr, ptr %32, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 616, ptr %105)
  %.reload34 = load ptr, ptr %.reg2mem24, align 8
  %107 = load i32, ptr %.reload34, align 4
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr }, ptr %109, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = call { ptr } %111(ptr %104) #17
  store { ptr } %112, ptr %14, align 8
  %113 = load ptr, ptr %14, align 8
  store ptr %113, ptr %15, align 8
  %.reload52 = load ptr, ptr %.reg2mem43, align 8
  %114 = load ptr, ptr %.reload52, align 8
  %115 = load ptr, ptr %32, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 616, ptr %115)
  %.reload33 = load ptr, ptr %.reg2mem24, align 8
  %117 = load i32, ptr %.reload33, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 2
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call i32 %122(ptr %114) #17
  store i32 %123, ptr %16, align 4
  %124 = load i32, ptr %16, align 4
  %125 = sext i32 %124 to i64
  %126 = mul i64 %125, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %127 = call ptr @bump_malloc(i64 %126)
  store ptr %127, ptr %17, align 8
  %.reload51 = load ptr, ptr %.reg2mem43, align 8
  %128 = load ptr, ptr %.reload51, align 8
  %129 = load ptr, ptr %32, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 616, ptr %129)
  %.reload32 = load ptr, ptr %.reg2mem24, align 8
  %131 = load i32, ptr %.reload32, align 4
  %132 = getelementptr ptr, ptr %129, i32 %131
  %133 = load ptr, ptr %132, align 8
  %134 = getelementptr { ptr, ptr }, ptr %133, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr } undef, ptr %137, 0
  call void %135(ptr %128, { ptr } %138) #16
  store i32 0, ptr %18, align 4
  br label %139

139:                                              ; preds = %._crit_edge1, %80
  %.reload50 = load ptr, ptr %.reg2mem43, align 8
  %140 = load ptr, ptr %.reload50, align 8
  %141 = load ptr, ptr %32, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 616, ptr %141)
  %.reload31 = load ptr, ptr %.reg2mem24, align 8
  %143 = load i32, ptr %.reload31, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr }, ptr %146, i32 0, i32 0
  %148 = load ptr, ptr %147, align 8
  %149 = call i32 %148(ptr %140) #17
  store i32 %149, ptr %19, align 4
  %150 = load i32, ptr %18, align 4
  %151 = load i32, ptr %19, align 4
  %152 = icmp slt i32 %150, %151
  store i1 %152, ptr %20, align 1
  %153 = load i1, ptr %20, align 1
  store i1 %153, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %154, label %._crit_edge

._crit_edge:                                      ; preds = %139
  br label %180

154:                                              ; preds = %139
  %155 = load ptr, ptr %15, align 8
  %156 = load i32, ptr %18, align 4
  %157 = sext i32 %156 to i64
  %158 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %157
  %159 = getelementptr i8, ptr %155, i64 %158
  %160 = load i32, ptr %159, align 4
  store i32 %160, ptr %21, align 4
  %.reload49 = load ptr, ptr %.reg2mem43, align 8
  %161 = load ptr, ptr %.reload49, align 8
  %162 = load ptr, ptr %32, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 616, ptr %162)
  %.reload30 = load ptr, ptr %.reg2mem24, align 8
  %164 = load i32, ptr %.reload30, align 4
  %165 = getelementptr ptr, ptr %162, i32 %164
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr { ptr, ptr }, ptr %166, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %169 = call { ptr } %168(ptr %161) #17
  store { ptr } %169, ptr %22, align 8
  %170 = load ptr, ptr %22, align 8
  %171 = load i32, ptr %18, align 4
  %172 = sext i32 %171 to i64
  %173 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %172
  %174 = getelementptr i8, ptr %170, i64 %173
  %175 = load i32, ptr %21, align 4
  store i32 %175, ptr %174, align 4
  store i32 1, ptr %23, align 4
  %176 = load i32, ptr %18, align 4
  %177 = load i32, ptr %23, align 4
  %178 = add i32 %176, %177
  store i32 %178, ptr %24, align 4
  %179 = load i32, ptr %24, align 4
  store i32 %179, ptr %18, align 4
  br label %180

180:                                              ; preds = %._crit_edge, %154
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %181

._crit_edge1:                                     ; preds = %180
  br label %139

181:                                              ; preds = %180
  br label %182

182:                                              ; preds = %181, %79
  %.reload48 = load ptr, ptr %.reg2mem43, align 8
  %183 = load ptr, ptr %.reload48, align 8
  %184 = load ptr, ptr %32, align 8
  %185 = call ptr @llvm.invariant.start.p0(i64 616, ptr %184)
  %.reload29 = load ptr, ptr %.reg2mem24, align 8
  %186 = load i32, ptr %.reload29, align 4
  %187 = getelementptr ptr, ptr %184, i32 %186
  %188 = load ptr, ptr %187, align 8
  %189 = getelementptr { ptr, ptr }, ptr %188, i32 0, i32 0
  %190 = load ptr, ptr %189, align 8
  %191 = call { ptr } %190(ptr %183) #17
  %.reload23 = load ptr, ptr %.reg2mem21, align 8
  store { ptr } %191, ptr %.reload23, align 8
  %.reload47 = load ptr, ptr %.reg2mem43, align 8
  %192 = load ptr, ptr %.reload47, align 8
  %193 = load ptr, ptr %32, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 616, ptr %193)
  %.reload28 = load ptr, ptr %.reg2mem24, align 8
  %195 = load i32, ptr %.reload28, align 4
  %196 = getelementptr ptr, ptr %193, i32 %195
  %197 = getelementptr ptr, ptr %196, i32 1
  %198 = load ptr, ptr %197, align 8
  %199 = getelementptr { ptr, ptr }, ptr %198, i32 0, i32 0
  %200 = load ptr, ptr %199, align 8
  %201 = call i32 %200(ptr %192) #17
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  store i32 %201, ptr %.reload20, align 4
  %.reload22 = load ptr, ptr %.reg2mem21, align 8
  %202 = load ptr, ptr %.reload22, align 8
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %203 = load i32, ptr %.reload19, align 4
  %204 = sext i32 %203 to i64
  %205 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %204
  %206 = getelementptr i8, ptr %202, i64 %205
  %207 = load i32, ptr %45, align 4
  store i32 %207, ptr %206, align 4
  %.reload46 = load ptr, ptr %.reg2mem43, align 8
  %208 = load ptr, ptr %.reload46, align 8
  %209 = load ptr, ptr %32, align 8
  %210 = call ptr @llvm.invariant.start.p0(i64 616, ptr %209)
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %211 = load i32, ptr %.reload27, align 4
  %212 = getelementptr ptr, ptr %209, i32 %211
  %213 = getelementptr ptr, ptr %212, i32 1
  %214 = load ptr, ptr %213, align 8
  %215 = getelementptr { ptr, ptr }, ptr %214, i32 0, i32 0
  %216 = load ptr, ptr %215, align 8
  %217 = call i32 %216(ptr %208) #17
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  store i32 %217, ptr %.reload17, align 4
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  store i32 1, ptr %.reload14, align 4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %218 = load i32, ptr %.reload16, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %219 = load i32, ptr %.reload13, align 4
  %220 = add i32 %218, %219
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  store i32 %220, ptr %.reload11, align 4
  %.reload45 = load ptr, ptr %.reg2mem43, align 8
  %221 = load ptr, ptr %.reload45, align 8
  %222 = load ptr, ptr %32, align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 616, ptr %222)
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  %224 = load i32, ptr %.reload26, align 4
  %225 = getelementptr ptr, ptr %222, i32 %224
  %226 = getelementptr ptr, ptr %225, i32 1
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr { ptr, ptr }, ptr %227, i32 0, i32 1
  %229 = load ptr, ptr %228, align 8
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %230 = load i32, ptr %.reload10, align 4
  call void %229(ptr %221, i32 %230) #16
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload8, i32 0, i32 0
  %.reload60 = load ptr, ptr %.reg2mem59, align 8
  %232 = load ptr, ptr %.reload60, align 8
  store ptr %232, ptr %231, align 8
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload7, i32 0, i32 1
  %.reload44 = load ptr, ptr %.reg2mem43, align 8
  %234 = load ptr, ptr %.reload44, align 8
  store ptr %234, ptr %233, align 8
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload6, i32 0, i32 2
  %.reload41 = load ptr, ptr %.reg2mem40, align 8
  %236 = load ptr, ptr %.reload41, align 8
  store ptr %236, ptr %235, align 8
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload5, i32 0, i32 3
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %238 = load i32, ptr %.reload25, align 4
  store i32 %238, ptr %237, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  call void @set_offset(ptr %.reload4, ptr @IntArray)
  %239 = load ptr, ptr %231, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %239, 0
  %241 = load ptr, ptr %233, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %241, 1
  %243 = load ptr, ptr %235, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %243, 2
  %245 = load i32, ptr %237, align 4
  %246 = insertvalue { ptr, ptr, ptr, i32 } %244, i32 %245, 3
  ret { ptr, ptr, ptr, i32 } %246
}

define { ptr, ptr, ptr, i32 } @IntArray_extend_aryIntArray({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i1, align 1
  %10 = alloca i32, align 4
  %11 = alloca ptr, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca ptr, align 8
  %22 = alloca ptr, align 8
  %23 = alloca i32, align 4
  %24 = alloca ptr, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i1, align 1
  %30 = alloca i32, align 4
  %31 = alloca i1, align 1
  %32 = alloca i32, align 4
  %33 = alloca ptr, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca ptr, align 8
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem39 = alloca ptr, align 8
  %.reg2mem42 = alloca ptr, align 8
  %.reg2mem61 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %45, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  store ptr %48, ptr %.reg2mem61, align 8
  %49 = load ptr, ptr %47, align 8
  %.reload63 = load ptr, ptr %.reg2mem61, align 8
  store ptr %49, ptr %.reload63, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  store ptr %51, ptr %.reg2mem42, align 8
  %52 = load ptr, ptr %50, align 8
  %.reload60 = load ptr, ptr %.reg2mem42, align 8
  store ptr %52, ptr %.reload60, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  store ptr %54, ptr %.reg2mem39, align 8
  %55 = load ptr, ptr %53, align 8
  %.reload41 = load ptr, ptr %.reg2mem39, align 8
  store ptr %55, ptr %.reload41, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  store ptr %57, ptr %.reg2mem20, align 8
  %58 = load i32, ptr %56, align 4
  %.reload38 = load ptr, ptr %.reg2mem20, align 8
  store i32 %58, ptr %.reload38, align 4
  call void @set_offset(ptr %46, ptr @IntArray)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %59, align 8
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @IntArray)
  %73 = load ptr, ptr %62, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %65, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %68, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %71, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  %81 = alloca [0 x ptr], align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 0, ptr %81)
  %83 = call ptr @llvm.invariant.start.p0(i64 616, ptr %73)
  %84 = getelementptr ptr, ptr %73, i32 %79
  %85 = getelementptr ptr, ptr %84, i32 8
  %86 = load ptr, ptr %85, align 8
  %87 = alloca {}, align 8
  %88 = call ptr @behavior_wrapper(ptr %86, { ptr, ptr, ptr, i32 } %80, ptr %87)
  %89 = call { ptr } %88({ ptr, ptr, ptr, i32 } %80, { ptr, ptr, ptr, i32 } %80, ptr %81) #15
  %90 = alloca ptr, align 8
  store { ptr } %89, ptr %90, align 8
  %91 = alloca ptr, align 8
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = load ptr, ptr %62, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = load ptr, ptr %65, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 1
  %97 = load ptr, ptr %68, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 2
  %99 = load i32, ptr %71, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %99, 3
  %101 = alloca [0 x ptr], align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 0, ptr %101)
  %103 = call ptr @llvm.invariant.start.p0(i64 616, ptr %93)
  %104 = getelementptr ptr, ptr %93, i32 %99
  %105 = getelementptr ptr, ptr %104, i32 6
  %106 = load ptr, ptr %105, align 8
  %107 = alloca {}, align 8
  %108 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %100, ptr %107)
  %109 = call i32 %108({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr %101) #15
  %110 = alloca i32, align 4
  store i32 %109, ptr %110, align 4
  %.reload59 = load ptr, ptr %.reg2mem42, align 8
  %111 = load ptr, ptr %.reload59, align 8
  %112 = load ptr, ptr %46, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 616, ptr %112)
  %.reload37 = load ptr, ptr %.reg2mem20, align 8
  %114 = load i32, ptr %.reload37, align 4
  %115 = getelementptr ptr, ptr %112, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 1
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr { ptr, ptr }, ptr %117, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = call i32 %119(ptr %111) #17
  %121 = alloca i32, align 4
  store i32 %120, ptr %121, align 4
  %122 = load i32, ptr %121, align 4
  %123 = load i32, ptr %110, align 4
  %124 = add i32 %122, %123
  %125 = alloca i32, align 4
  store i32 %124, ptr %125, align 4
  %.reload58 = load ptr, ptr %.reg2mem42, align 8
  %126 = load ptr, ptr %.reload58, align 8
  %127 = load ptr, ptr %46, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 616, ptr %127)
  %.reload36 = load ptr, ptr %.reg2mem20, align 8
  %129 = load i32, ptr %.reload36, align 4
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr, ptr }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = call i32 %134(ptr %126) #17
  %136 = alloca i32, align 4
  store i32 %135, ptr %136, align 4
  %137 = load i32, ptr %125, align 4
  %138 = load i32, ptr %136, align 4
  %139 = icmp slt i32 %137, %138
  %140 = alloca i1, align 1
  store i1 %139, ptr %140, align 1
  %141 = load i1, ptr %140, align 1
  %142 = select i1 %141, ptr %16, ptr %42
  store ptr %142, ptr %.reg2mem17, align 8
  %143 = select i1 %141, ptr %17, ptr %43
  store ptr %143, ptr %.reg2mem14, align 8
  %144 = select i1 %141, ptr %18, ptr %44
  store ptr %144, ptr %.reg2mem8, align 8
  br i1 %141, label %145, label %206

145:                                              ; preds = %4
  %.reload57 = load ptr, ptr %.reg2mem42, align 8
  %146 = load ptr, ptr %.reload57, align 8
  %147 = load ptr, ptr %46, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 616, ptr %147)
  %.reload35 = load ptr, ptr %.reg2mem20, align 8
  %149 = load i32, ptr %.reload35, align 4
  %150 = getelementptr ptr, ptr %147, i32 %149
  %151 = getelementptr ptr, ptr %150, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = getelementptr { ptr, ptr }, ptr %152, i32 0, i32 0
  %154 = load ptr, ptr %153, align 8
  %155 = call i32 %154(ptr %146) #17
  store i32 %155, ptr %5, align 4
  store i32 0, ptr %6, align 4
  br label %156

156:                                              ; preds = %._crit_edge1, %145
  %.reload56 = load ptr, ptr %.reg2mem42, align 8
  %157 = load ptr, ptr %.reload56, align 8
  %158 = load ptr, ptr %46, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 616, ptr %158)
  %.reload34 = load ptr, ptr %.reg2mem20, align 8
  %160 = load i32, ptr %.reload34, align 4
  %161 = getelementptr ptr, ptr %158, i32 %160
  %162 = getelementptr ptr, ptr %161, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = getelementptr { ptr, ptr }, ptr %163, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = call i32 %165(ptr %157) #17
  store i32 %166, ptr %7, align 4
  %167 = load i32, ptr %7, align 4
  %168 = load i32, ptr %110, align 4
  %169 = add i32 %167, %168
  store i32 %169, ptr %8, align 4
  %170 = load i32, ptr %5, align 4
  %171 = load i32, ptr %8, align 4
  %172 = icmp slt i32 %170, %171
  store i1 %172, ptr %9, align 1
  %173 = load i1, ptr %9, align 1
  store i1 %173, ptr %.reg2mem5, align 1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload7, label %174, label %._crit_edge

._crit_edge:                                      ; preds = %156
  br label %204

174:                                              ; preds = %156
  %175 = load ptr, ptr %91, align 8
  %176 = load i32, ptr %6, align 4
  %177 = sext i32 %176 to i64
  %178 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %177
  %179 = getelementptr i8, ptr %175, i64 %178
  %180 = load i32, ptr %179, align 4
  store i32 %180, ptr %10, align 4
  %.reload55 = load ptr, ptr %.reg2mem42, align 8
  %181 = load ptr, ptr %.reload55, align 8
  %182 = load ptr, ptr %46, align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 616, ptr %182)
  %.reload33 = load ptr, ptr %.reg2mem20, align 8
  %184 = load i32, ptr %.reload33, align 4
  %185 = getelementptr ptr, ptr %182, i32 %184
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr, ptr }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = call { ptr } %188(ptr %181) #17
  store { ptr } %189, ptr %11, align 8
  %190 = load ptr, ptr %11, align 8
  %191 = load i32, ptr %5, align 4
  %192 = sext i32 %191 to i64
  %193 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %192
  %194 = getelementptr i8, ptr %190, i64 %193
  %195 = load i32, ptr %10, align 4
  store i32 %195, ptr %194, align 4
  store i32 1, ptr %12, align 4
  %196 = load i32, ptr %5, align 4
  %197 = load i32, ptr %12, align 4
  %198 = add i32 %196, %197
  store i32 %198, ptr %13, align 4
  %199 = load i32, ptr %13, align 4
  store i32 %199, ptr %5, align 4
  store i32 1, ptr %14, align 4
  %200 = load i32, ptr %6, align 4
  %201 = load i32, ptr %14, align 4
  %202 = add i32 %200, %201
  store i32 %202, ptr %15, align 4
  %203 = load i32, ptr %15, align 4
  store i32 %203, ptr %6, align 4
  br label %204

204:                                              ; preds = %._crit_edge, %174
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload6, label %._crit_edge1, label %205

._crit_edge1:                                     ; preds = %204
  br label %156

205:                                              ; preds = %204
  br label %357

206:                                              ; preds = %4
  %.reload54 = load ptr, ptr %.reg2mem42, align 8
  %207 = load ptr, ptr %.reload54, align 8
  %208 = load ptr, ptr %46, align 8
  %209 = call ptr @llvm.invariant.start.p0(i64 616, ptr %208)
  %.reload32 = load ptr, ptr %.reg2mem20, align 8
  %210 = load i32, ptr %.reload32, align 4
  %211 = getelementptr ptr, ptr %208, i32 %210
  %212 = getelementptr ptr, ptr %211, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = getelementptr { ptr, ptr }, ptr %213, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  %216 = call i32 %215(ptr %207) #17
  store i32 %216, ptr %19, align 4
  %217 = load i32, ptr %19, align 4
  %218 = load i32, ptr %110, align 4
  %219 = add i32 %217, %218
  store i32 %219, ptr %20, align 4
  %.reload53 = load ptr, ptr %.reg2mem42, align 8
  %220 = load ptr, ptr %.reload53, align 8
  %221 = load ptr, ptr %46, align 8
  %222 = call ptr @llvm.invariant.start.p0(i64 616, ptr %221)
  %.reload31 = load ptr, ptr %.reg2mem20, align 8
  %223 = load i32, ptr %.reload31, align 4
  %224 = getelementptr ptr, ptr %221, i32 %223
  %225 = getelementptr ptr, ptr %224, i32 2
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr { ptr, ptr }, ptr %226, i32 0, i32 1
  %228 = load ptr, ptr %227, align 8
  %229 = load i32, ptr %20, align 4
  call void %228(ptr %220, i32 %229) #16
  %.reload52 = load ptr, ptr %.reg2mem42, align 8
  %230 = load ptr, ptr %.reload52, align 8
  %231 = load ptr, ptr %46, align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 616, ptr %231)
  %.reload30 = load ptr, ptr %.reg2mem20, align 8
  %233 = load i32, ptr %.reload30, align 4
  %234 = getelementptr ptr, ptr %231, i32 %233
  %235 = load ptr, ptr %234, align 8
  %236 = getelementptr { ptr, ptr }, ptr %235, i32 0, i32 0
  %237 = load ptr, ptr %236, align 8
  %238 = call { ptr } %237(ptr %230) #17
  store { ptr } %238, ptr %21, align 8
  %239 = load ptr, ptr %21, align 8
  store ptr %239, ptr %22, align 8
  %.reload51 = load ptr, ptr %.reg2mem42, align 8
  %240 = load ptr, ptr %.reload51, align 8
  %241 = load ptr, ptr %46, align 8
  %242 = call ptr @llvm.invariant.start.p0(i64 616, ptr %241)
  %.reload29 = load ptr, ptr %.reg2mem20, align 8
  %243 = load i32, ptr %.reload29, align 4
  %244 = getelementptr ptr, ptr %241, i32 %243
  %245 = getelementptr ptr, ptr %244, i32 2
  %246 = load ptr, ptr %245, align 8
  %247 = getelementptr { ptr, ptr }, ptr %246, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = call i32 %248(ptr %240) #17
  store i32 %249, ptr %23, align 4
  %250 = load i32, ptr %23, align 4
  %251 = sext i32 %250 to i64
  %252 = mul i64 %251, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %253 = call ptr @bump_malloc(i64 %252)
  store ptr %253, ptr %24, align 8
  %.reload50 = load ptr, ptr %.reg2mem42, align 8
  %254 = load ptr, ptr %.reload50, align 8
  %255 = load ptr, ptr %46, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 616, ptr %255)
  %.reload28 = load ptr, ptr %.reg2mem20, align 8
  %257 = load i32, ptr %.reload28, align 4
  %258 = getelementptr ptr, ptr %255, i32 %257
  %259 = load ptr, ptr %258, align 8
  %260 = getelementptr { ptr, ptr }, ptr %259, i32 0, i32 1
  %261 = load ptr, ptr %260, align 8
  %262 = getelementptr { ptr }, ptr %24, i32 0, i32 0
  %263 = load ptr, ptr %262, align 8
  %264 = insertvalue { ptr } undef, ptr %263, 0
  call void %261(ptr %254, { ptr } %264) #16
  store i32 0, ptr %25, align 4
  store i32 0, ptr %26, align 4
  br label %265

265:                                              ; preds = %._crit_edge3, %206
  %.reload49 = load ptr, ptr %.reg2mem42, align 8
  %266 = load ptr, ptr %.reload49, align 8
  %267 = load ptr, ptr %46, align 8
  %268 = call ptr @llvm.invariant.start.p0(i64 616, ptr %267)
  %.reload27 = load ptr, ptr %.reg2mem20, align 8
  %269 = load i32, ptr %.reload27, align 4
  %270 = getelementptr ptr, ptr %267, i32 %269
  %271 = getelementptr ptr, ptr %270, i32 1
  %272 = load ptr, ptr %271, align 8
  %273 = getelementptr { ptr, ptr }, ptr %272, i32 0, i32 0
  %274 = load ptr, ptr %273, align 8
  %275 = call i32 %274(ptr %266) #17
  store i32 %275, ptr %27, align 4
  %276 = load i32, ptr %27, align 4
  %277 = load i32, ptr %110, align 4
  %278 = add i32 %276, %277
  store i32 %278, ptr %28, align 4
  %279 = load i32, ptr %25, align 4
  %280 = load i32, ptr %28, align 4
  %281 = icmp slt i32 %279, %280
  store i1 %281, ptr %29, align 1
  %282 = load i1, ptr %29, align 1
  store i1 %282, ptr %.reg2mem, align 1
  %.reload4 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload4, label %283, label %._crit_edge2

._crit_edge2:                                     ; preds = %265
  br label %355

283:                                              ; preds = %265
  %.reload48 = load ptr, ptr %.reg2mem42, align 8
  %284 = load ptr, ptr %.reload48, align 8
  %285 = load ptr, ptr %46, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 616, ptr %285)
  %.reload26 = load ptr, ptr %.reg2mem20, align 8
  %287 = load i32, ptr %.reload26, align 4
  %288 = getelementptr ptr, ptr %285, i32 %287
  %289 = getelementptr ptr, ptr %288, i32 1
  %290 = load ptr, ptr %289, align 8
  %291 = getelementptr { ptr, ptr }, ptr %290, i32 0, i32 0
  %292 = load ptr, ptr %291, align 8
  %293 = call i32 %292(ptr %284) #17
  store i32 %293, ptr %30, align 4
  %294 = load i32, ptr %25, align 4
  %295 = load i32, ptr %30, align 4
  %296 = icmp slt i32 %294, %295
  store i1 %296, ptr %31, align 1
  %297 = load i1, ptr %31, align 1
  br i1 %297, label %298, label %324

298:                                              ; preds = %283
  %299 = load ptr, ptr %22, align 8
  %300 = load i32, ptr %25, align 4
  %301 = sext i32 %300 to i64
  %302 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %301
  %303 = getelementptr i8, ptr %299, i64 %302
  %304 = load i32, ptr %303, align 4
  store i32 %304, ptr %32, align 4
  %.reload47 = load ptr, ptr %.reg2mem42, align 8
  %305 = load ptr, ptr %.reload47, align 8
  %306 = load ptr, ptr %46, align 8
  %307 = call ptr @llvm.invariant.start.p0(i64 616, ptr %306)
  %.reload25 = load ptr, ptr %.reg2mem20, align 8
  %308 = load i32, ptr %.reload25, align 4
  %309 = getelementptr ptr, ptr %306, i32 %308
  %310 = load ptr, ptr %309, align 8
  %311 = getelementptr { ptr, ptr }, ptr %310, i32 0, i32 0
  %312 = load ptr, ptr %311, align 8
  %313 = call { ptr } %312(ptr %305) #17
  store { ptr } %313, ptr %33, align 8
  %314 = load ptr, ptr %33, align 8
  %315 = load i32, ptr %25, align 4
  %316 = sext i32 %315 to i64
  %317 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %316
  %318 = getelementptr i8, ptr %314, i64 %317
  %319 = load i32, ptr %32, align 4
  store i32 %319, ptr %318, align 4
  store i32 1, ptr %34, align 4
  %320 = load i32, ptr %25, align 4
  %321 = load i32, ptr %34, align 4
  %322 = add i32 %320, %321
  store i32 %322, ptr %35, align 4
  %323 = load i32, ptr %35, align 4
  store i32 %323, ptr %25, align 4
  br label %354

324:                                              ; preds = %283
  %325 = load ptr, ptr %91, align 8
  %326 = load i32, ptr %26, align 4
  %327 = sext i32 %326 to i64
  %328 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %327
  %329 = getelementptr i8, ptr %325, i64 %328
  %330 = load i32, ptr %329, align 4
  store i32 %330, ptr %36, align 4
  %.reload46 = load ptr, ptr %.reg2mem42, align 8
  %331 = load ptr, ptr %.reload46, align 8
  %332 = load ptr, ptr %46, align 8
  %333 = call ptr @llvm.invariant.start.p0(i64 616, ptr %332)
  %.reload24 = load ptr, ptr %.reg2mem20, align 8
  %334 = load i32, ptr %.reload24, align 4
  %335 = getelementptr ptr, ptr %332, i32 %334
  %336 = load ptr, ptr %335, align 8
  %337 = getelementptr { ptr, ptr }, ptr %336, i32 0, i32 0
  %338 = load ptr, ptr %337, align 8
  %339 = call { ptr } %338(ptr %331) #17
  store { ptr } %339, ptr %37, align 8
  %340 = load ptr, ptr %37, align 8
  %341 = load i32, ptr %25, align 4
  %342 = sext i32 %341 to i64
  %343 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %342
  %344 = getelementptr i8, ptr %340, i64 %343
  %345 = load i32, ptr %36, align 4
  store i32 %345, ptr %344, align 4
  store i32 1, ptr %38, align 4
  %346 = load i32, ptr %25, align 4
  %347 = load i32, ptr %38, align 4
  %348 = add i32 %346, %347
  store i32 %348, ptr %39, align 4
  %349 = load i32, ptr %39, align 4
  store i32 %349, ptr %25, align 4
  store i32 1, ptr %40, align 4
  %350 = load i32, ptr %26, align 4
  %351 = load i32, ptr %40, align 4
  %352 = add i32 %350, %351
  store i32 %352, ptr %41, align 4
  %353 = load i32, ptr %41, align 4
  store i32 %353, ptr %26, align 4
  br label %354

354:                                              ; preds = %324, %298
  br label %355

355:                                              ; preds = %._crit_edge2, %354
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge3, label %356

._crit_edge3:                                     ; preds = %355
  br label %265

356:                                              ; preds = %355
  br label %357

357:                                              ; preds = %356, %205
  %.reload45 = load ptr, ptr %.reg2mem42, align 8
  %358 = load ptr, ptr %.reload45, align 8
  %359 = load ptr, ptr %46, align 8
  %360 = call ptr @llvm.invariant.start.p0(i64 616, ptr %359)
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  %361 = load i32, ptr %.reload23, align 4
  %362 = getelementptr ptr, ptr %359, i32 %361
  %363 = getelementptr ptr, ptr %362, i32 1
  %364 = load ptr, ptr %363, align 8
  %365 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 0
  %366 = load ptr, ptr %365, align 8
  %367 = call i32 %366(ptr %358) #17
  %.reload19 = load ptr, ptr %.reg2mem17, align 8
  store i32 %367, ptr %.reload19, align 4
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %368 = load i32, ptr %.reload18, align 4
  %369 = load i32, ptr %110, align 4
  %370 = add i32 %368, %369
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  store i32 %370, ptr %.reload16, align 4
  %.reload44 = load ptr, ptr %.reg2mem42, align 8
  %371 = load ptr, ptr %.reload44, align 8
  %372 = load ptr, ptr %46, align 8
  %373 = call ptr @llvm.invariant.start.p0(i64 616, ptr %372)
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %374 = load i32, ptr %.reload22, align 4
  %375 = getelementptr ptr, ptr %372, i32 %374
  %376 = getelementptr ptr, ptr %375, i32 1
  %377 = load ptr, ptr %376, align 8
  %378 = getelementptr { ptr, ptr }, ptr %377, i32 0, i32 1
  %379 = load ptr, ptr %378, align 8
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %380 = load i32, ptr %.reload15, align 4
  call void %379(ptr %371, i32 %380) #16
  %.reload13 = load ptr, ptr %.reg2mem8, align 8
  %381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload13, i32 0, i32 0
  %.reload62 = load ptr, ptr %.reg2mem61, align 8
  %382 = load ptr, ptr %.reload62, align 8
  store ptr %382, ptr %381, align 8
  %.reload12 = load ptr, ptr %.reg2mem8, align 8
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload12, i32 0, i32 1
  %.reload43 = load ptr, ptr %.reg2mem42, align 8
  %384 = load ptr, ptr %.reload43, align 8
  store ptr %384, ptr %383, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload11, i32 0, i32 2
  %.reload40 = load ptr, ptr %.reg2mem39, align 8
  %386 = load ptr, ptr %.reload40, align 8
  store ptr %386, ptr %385, align 8
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload10, i32 0, i32 3
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %388 = load i32, ptr %.reload21, align 4
  store i32 %388, ptr %387, align 4
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  call void @set_offset(ptr %.reload9, ptr @IntArray)
  %389 = load ptr, ptr %381, align 8
  %390 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %389, 0
  %391 = load ptr, ptr %383, align 8
  %392 = insertvalue { ptr, ptr, ptr, i32 } %390, ptr %391, 1
  %393 = load ptr, ptr %385, align 8
  %394 = insertvalue { ptr, ptr, ptr, i32 } %392, ptr %393, 2
  %395 = load i32, ptr %387, align 4
  %396 = insertvalue { ptr, ptr, ptr, i32 } %394, i32 %395, 3
  ret { ptr, ptr, ptr, i32 } %396
}

define i32 @IntArray__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca i32, align 4
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca i32, align 4
  %9 = alloca [2 x ptr], align 8
  %10 = alloca { ptr, ptr }, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca [1 x ptr], align 8
  %19 = alloca i32, align 4
  %20 = alloca ptr, align 8
  %21 = alloca ptr, align 8
  %22 = alloca ptr, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca [3 x ptr], align 8
  %26 = alloca { ptr, ptr, ptr }, align 8
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = alloca [2 x ptr], align 8
  %29 = alloca { ptr, ptr }, align 8
  %30 = alloca { ptr, i160 }, align 8
  %31 = alloca i32, align 4
  %32 = alloca i1, align 1
  %33 = alloca ptr, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i1, align 1
  %39 = alloca i32, align 4
  %40 = alloca [1 x ptr], align 8
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  %42 = alloca i32, align 4
  %43 = alloca [2 x ptr], align 8
  %44 = alloca { ptr, ptr }, align 8
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca ptr, align 8
  %48 = alloca ptr, align 8
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca [1 x ptr], align 8
  %53 = alloca i32, align 4
  %54 = alloca ptr, align 8
  %55 = alloca ptr, align 8
  %56 = alloca ptr, align 8
  %57 = alloca i32, align 4
  %58 = alloca i32, align 4
  %59 = alloca [3 x ptr], align 8
  %60 = alloca { ptr, ptr, ptr }, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = alloca [2 x ptr], align 8
  %63 = alloca { ptr, ptr }, align 8
  %64 = alloca { ptr, i160 }, align 8
  %65 = alloca ptr, align 8
  %66 = alloca i32, align 4
  %67 = alloca i32, align 4
  %68 = alloca i32, align 4
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem28 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %69, align 8
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  store ptr %75, ptr %.reg2mem17, align 8
  %76 = load ptr, ptr %74, align 8
  %.reload27 = load ptr, ptr %.reg2mem17, align 8
  store ptr %76, ptr %.reload27, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  store ptr %81, ptr %.reg2mem6, align 8
  %82 = load i32, ptr %80, align 4
  %.reload16 = load ptr, ptr %.reg2mem6, align 8
  store i32 %82, ptr %.reload16, align 4
  call void @set_offset(ptr %70, ptr @IntArray)
  %83 = alloca i32, align 4
  store i32 %3, ptr %83, align 4
  %.reload26 = load ptr, ptr %.reg2mem17, align 8
  %84 = load ptr, ptr %.reload26, align 8
  %85 = load ptr, ptr %70, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 616, ptr %85)
  %.reload15 = load ptr, ptr %.reg2mem6, align 8
  %87 = load i32, ptr %.reload15, align 4
  %88 = getelementptr ptr, ptr %85, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call i32 %92(ptr %84) #17
  %94 = alloca i32, align 4
  store i32 %93, ptr %94, align 4
  %95 = alloca i32, align 4
  store i32 1, ptr %95, align 4
  %96 = load i32, ptr %94, align 4
  %97 = load i32, ptr %95, align 4
  %98 = sub i32 %96, %97
  %99 = alloca i32, align 4
  store i32 %98, ptr %99, align 4
  %100 = load i32, ptr %83, align 4
  %101 = load i32, ptr %99, align 4
  %102 = icmp sgt i32 %100, %101
  %103 = alloca i1, align 1
  store i1 %102, ptr %103, align 1
  %104 = load i1, ptr %103, align 1
  br i1 %104, label %105, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %242

105:                                              ; preds = %4
  %.reload25 = load ptr, ptr %.reg2mem17, align 8
  %106 = load ptr, ptr %.reload25, align 8
  %107 = load ptr, ptr %70, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 616, ptr %107)
  %.reload14 = load ptr, ptr %.reg2mem6, align 8
  %109 = load i32, ptr %.reload14, align 4
  %110 = getelementptr ptr, ptr %107, i32 %109
  %111 = getelementptr ptr, ptr %110, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 0
  %114 = load ptr, ptr %113, align 8
  %115 = call i32 %114(ptr %106) #17
  store i32 %115, ptr %5, align 4
  store ptr @OutOfBounds, ptr %6, align 8
  %116 = load ptr, ptr %6, align 8
  %117 = getelementptr ptr, ptr %116, i32 6
  %118 = load ptr, ptr %117, align 8
  %119 = call { i64, i64 } @size_wrapper(ptr %118, ptr %6)
  %120 = extractvalue { i64, i64 } %119, 0
  %121 = call ptr @bump_malloc(i64 %120)
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr @OutOfBounds, ptr %7, align 8
  store ptr %121, ptr %122, align 8
  store i32 10, ptr %123, align 4
  %.reload24 = load ptr, ptr %.reg2mem17, align 8
  %124 = load ptr, ptr %.reload24, align 8
  %125 = load ptr, ptr %70, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 616, ptr %125)
  %.reload13 = load ptr, ptr %.reg2mem6, align 8
  %127 = load i32, ptr %.reload13, align 4
  %128 = getelementptr ptr, ptr %125, i32 %127
  %129 = getelementptr ptr, ptr %128, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 0
  %132 = load ptr, ptr %131, align 8
  %133 = call i32 %132(ptr %124) #17
  store i32 %133, ptr %8, align 4
  %134 = load i32, ptr %8, align 4
  %135 = load i32, ptr %83, align 4
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %137, 0
  %139 = load ptr, ptr %122, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %139, 1
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %140, ptr %142, 2
  %144 = load i32, ptr %123, align 4
  %145 = insertvalue { ptr, ptr, ptr, i32 } %143, i32 %144, 3
  %146 = getelementptr [2 x ptr], ptr %9, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %146, align 8
  %147 = getelementptr [2 x ptr], ptr %9, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %147, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 4, ptr %9)
  %149 = call ptr @llvm.invariant.start.p0(i64 232, ptr %137)
  %150 = getelementptr ptr, ptr %137, i32 %144
  %151 = getelementptr ptr, ptr %150, i32 4
  %152 = load ptr, ptr %151, align 8
  %153 = getelementptr { ptr, ptr }, ptr %10, i32 0, i32 0
  store ptr @i32_typ, ptr %153, align 8
  %154 = getelementptr { ptr, ptr }, ptr %10, i32 0, i32 1
  store ptr @i32_typ, ptr %154, align 8
  %155 = call ptr @behavior_wrapper(ptr %152, { ptr, ptr, ptr, i32 } %145, ptr %10)
  call void %155({ ptr, ptr, ptr, i32 } %145, { ptr, ptr, ptr, i32 } %145, ptr %9, i32 %134, i32 %135) #15
  store i32 618, ptr %11, align 4
  store i32 59, ptr %12, align 4
  %156 = load i32, ptr %12, align 4
  %157 = sext i32 %156 to i64
  %158 = mul i64 %157, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %159 = call ptr @bump_malloc(i64 %158)
  store ptr %159, ptr %13, align 8
  %160 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %161 = load ptr, ptr %160, align 8
  store ptr %161, ptr %14, align 8
  store i32 0, ptr %15, align 4
  %162 = load ptr, ptr %14, align 8
  %163 = load i32, ptr %15, align 4
  %164 = sext i32 %163 to i64
  %165 = mul i64 ptrtoint (ptr getelementptr ([58 x i8], ptr null, i32 1) to i64), %164
  %166 = getelementptr i8, ptr %162, i64 %165
  %167 = load <58 x i8>, ptr @bknxo_CUsersPaulKOneDriveDocumentsPLPyPLtmpgjbyyomini, align 64
  store <58 x i8> %167, ptr %166, align 64
  store i32 58, ptr %16, align 4
  store i32 59, ptr %17, align 4
  store ptr @String, ptr %18, align 8
  %168 = load ptr, ptr %18, align 8
  %169 = getelementptr ptr, ptr %168, i32 6
  %170 = load ptr, ptr %169, align 8
  %171 = call { i64, i64 } @size_wrapper(ptr %170, ptr %18)
  %172 = extractvalue { i64, i64 } %171, 0
  %173 = call ptr @bump_malloc(i64 %172)
  store ptr @String, ptr %22, align 8
  store ptr %173, ptr %21, align 8
  store i32 10, ptr %19, align 4
  store i32 58, ptr %23, align 4
  store i32 59, ptr %24, align 4
  %174 = load ptr, ptr %14, align 8
  %175 = insertvalue { ptr } undef, ptr %174, 0
  %176 = load i32, ptr %23, align 4
  %177 = load i32, ptr %24, align 4
  %178 = load ptr, ptr %22, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %178, 0
  %180 = load ptr, ptr %21, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %180, 1
  %182 = load ptr, ptr %20, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %182, 2
  %184 = load i32, ptr %19, align 4
  %185 = insertvalue { ptr, ptr, ptr, i32 } %183, i32 %184, 3
  %186 = getelementptr [3 x ptr], ptr %25, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %186, align 8
  %187 = getelementptr [3 x ptr], ptr %25, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %187, align 8
  %188 = getelementptr [3 x ptr], ptr %25, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %188, align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 9, ptr %25)
  %190 = call ptr @llvm.invariant.start.p0(i64 280, ptr %178)
  %191 = getelementptr ptr, ptr %178, i32 %184
  %192 = getelementptr ptr, ptr %191, i32 4
  %193 = load ptr, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr @buffer_typ, ptr %194, align 8
  %195 = getelementptr { ptr, ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr @i32_typ, ptr %195, align 8
  %196 = getelementptr { ptr, ptr, ptr }, ptr %26, i32 0, i32 2
  store ptr @i32_typ, ptr %196, align 8
  %197 = call ptr @behavior_wrapper(ptr %193, { ptr, ptr, ptr, i32 } %185, ptr %26)
  call void %197({ ptr, ptr, ptr, i32 } %185, { ptr, ptr, ptr, i32 } %185, ptr %25, { ptr } %175, i32 %176, i32 %177) #15
  %198 = load i32, ptr %11, align 4
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %200 = load ptr, ptr %22, align 8
  store ptr %200, ptr %199, align 8
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %202 = load ptr, ptr %21, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %204 = load ptr, ptr %20, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %206 = load i32, ptr %19, align 4
  store i32 %206, ptr %205, align 4
  call void @set_offset(ptr %27, ptr @String)
  %207 = load ptr, ptr %199, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %207, 0
  %209 = load ptr, ptr %201, align 8
  %210 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %209, 1
  %211 = load ptr, ptr %203, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %211, 2
  %213 = load i32, ptr %205, align 4
  %214 = insertvalue { ptr, ptr, ptr, i32 } %212, i32 %213, 3
  %215 = load ptr, ptr %136, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %215, 0
  %217 = load ptr, ptr %122, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %217, 1
  %219 = load ptr, ptr %141, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %219, 2
  %221 = load i32, ptr %123, align 4
  %222 = insertvalue { ptr, ptr, ptr, i32 } %220, i32 %221, 3
  %223 = getelementptr [2 x ptr], ptr %28, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %223, align 8
  %224 = getelementptr [2 x ptr], ptr %28, i32 0, i32 1
  store ptr @_parameterization_String, ptr %224, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 4, ptr %28)
  %226 = call ptr @llvm.invariant.start.p0(i64 232, ptr %215)
  %227 = getelementptr ptr, ptr %215, i32 %221
  %228 = getelementptr ptr, ptr %227, i32 7
  %229 = load ptr, ptr %228, align 8
  %230 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 0
  store ptr @i32_typ, ptr %230, align 8
  %231 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  store ptr %207, ptr %231, align 8
  %232 = call ptr @behavior_wrapper(ptr %229, { ptr, ptr, ptr, i32 } %222, ptr %29)
  call void %232({ ptr, ptr, ptr, i32 } %222, { ptr, ptr, ptr, i32 } %222, ptr %28, i32 %198, { ptr, ptr, ptr, i32 } %214) #15
  %233 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %234 = load ptr, ptr %233, align 8
  %235 = insertvalue { ptr, i160 } undef, ptr %234, 0
  %236 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %237 = load i160, ptr %236, align 4
  %238 = insertvalue { ptr, i160 } %235, i160 %237, 1
  %239 = call ptr @get_current_coroutine()
  %240 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %239, i32 0, i32 4
  store { ptr, i160 } %238, ptr %240, align 8
  call void @coroutine_yield(ptr %239)
  %241 = load { ptr, i160 }, ptr %240, align 8
  store { ptr, i160 } %241, ptr %30, align 8
  br label %242

242:                                              ; preds = %._crit_edge, %105
  store i32 0, ptr %31, align 4
  %243 = load i32, ptr %83, align 4
  %244 = load i32, ptr %31, align 4
  %245 = icmp sge i32 %243, %244
  store i1 %245, ptr %32, align 1
  %246 = load i1, ptr %32, align 1
  br i1 %246, label %247, label %264

247:                                              ; preds = %242
  %.reload23 = load ptr, ptr %.reg2mem17, align 8
  %248 = load ptr, ptr %.reload23, align 8
  %249 = load ptr, ptr %70, align 8
  %250 = call ptr @llvm.invariant.start.p0(i64 616, ptr %249)
  %.reload12 = load ptr, ptr %.reg2mem6, align 8
  %251 = load i32, ptr %.reload12, align 4
  %252 = getelementptr ptr, ptr %249, i32 %251
  %253 = load ptr, ptr %252, align 8
  %254 = getelementptr { ptr, ptr }, ptr %253, i32 0, i32 0
  %255 = load ptr, ptr %254, align 8
  %256 = call { ptr } %255(ptr %248) #17
  store { ptr } %256, ptr %33, align 8
  %257 = load ptr, ptr %33, align 8
  %258 = load i32, ptr %83, align 4
  %259 = sext i32 %258 to i64
  %260 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %259
  %261 = getelementptr i8, ptr %257, i64 %260
  %262 = load i32, ptr %261, align 4
  store i32 %262, ptr %34, align 4
  %263 = load i32, ptr %34, align 4
  store i32 %263, ptr %.reg2mem4, align 4
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  store i32 %.reload5, ptr %.reg2mem28, align 4
  br label %449

264:                                              ; preds = %242
  %.reload22 = load ptr, ptr %.reg2mem17, align 8
  %265 = load ptr, ptr %.reload22, align 8
  %266 = load ptr, ptr %70, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 616, ptr %266)
  %.reload11 = load ptr, ptr %.reg2mem6, align 8
  %268 = load i32, ptr %.reload11, align 4
  %269 = getelementptr ptr, ptr %266, i32 %268
  %270 = getelementptr ptr, ptr %269, i32 1
  %271 = load ptr, ptr %270, align 8
  %272 = getelementptr { ptr, ptr }, ptr %271, i32 0, i32 0
  %273 = load ptr, ptr %272, align 8
  %274 = call i32 %273(ptr %265) #17
  store i32 %274, ptr %35, align 4
  %275 = load i32, ptr %35, align 4
  %276 = load i32, ptr %83, align 4
  %277 = add i32 %275, %276
  store i32 %277, ptr %36, align 4
  store i32 0, ptr %37, align 4
  %278 = load i32, ptr %36, align 4
  %279 = load i32, ptr %37, align 4
  %280 = icmp slt i32 %278, %279
  store i1 %280, ptr %38, align 1
  %281 = load i1, ptr %38, align 1
  br i1 %281, label %282, label %._crit_edge1

._crit_edge1:                                     ; preds = %264
  br label %419

282:                                              ; preds = %264
  %.reload21 = load ptr, ptr %.reg2mem17, align 8
  %283 = load ptr, ptr %.reload21, align 8
  %284 = load ptr, ptr %70, align 8
  %285 = call ptr @llvm.invariant.start.p0(i64 616, ptr %284)
  %.reload10 = load ptr, ptr %.reg2mem6, align 8
  %286 = load i32, ptr %.reload10, align 4
  %287 = getelementptr ptr, ptr %284, i32 %286
  %288 = getelementptr ptr, ptr %287, i32 1
  %289 = load ptr, ptr %288, align 8
  %290 = getelementptr { ptr, ptr }, ptr %289, i32 0, i32 0
  %291 = load ptr, ptr %290, align 8
  %292 = call i32 %291(ptr %283) #17
  store i32 %292, ptr %39, align 4
  store ptr @OutOfBounds, ptr %40, align 8
  %293 = load ptr, ptr %40, align 8
  %294 = getelementptr ptr, ptr %293, i32 6
  %295 = load ptr, ptr %294, align 8
  %296 = call { i64, i64 } @size_wrapper(ptr %295, ptr %40)
  %297 = extractvalue { i64, i64 } %296, 0
  %298 = call ptr @bump_malloc(i64 %297)
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 1
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 3
  store ptr @OutOfBounds, ptr %41, align 8
  store ptr %298, ptr %299, align 8
  store i32 10, ptr %300, align 4
  %.reload20 = load ptr, ptr %.reg2mem17, align 8
  %301 = load ptr, ptr %.reload20, align 8
  %302 = load ptr, ptr %70, align 8
  %303 = call ptr @llvm.invariant.start.p0(i64 616, ptr %302)
  %.reload9 = load ptr, ptr %.reg2mem6, align 8
  %304 = load i32, ptr %.reload9, align 4
  %305 = getelementptr ptr, ptr %302, i32 %304
  %306 = getelementptr ptr, ptr %305, i32 1
  %307 = load ptr, ptr %306, align 8
  %308 = getelementptr { ptr, ptr }, ptr %307, i32 0, i32 0
  %309 = load ptr, ptr %308, align 8
  %310 = call i32 %309(ptr %301) #17
  store i32 %310, ptr %42, align 4
  %311 = load i32, ptr %42, align 4
  %312 = load i32, ptr %83, align 4
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 0
  %314 = load ptr, ptr %313, align 8
  %315 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %314, 0
  %316 = load ptr, ptr %299, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } %315, ptr %316, 1
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 2
  %319 = load ptr, ptr %318, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr %319, 2
  %321 = load i32, ptr %300, align 4
  %322 = insertvalue { ptr, ptr, ptr, i32 } %320, i32 %321, 3
  %323 = getelementptr [2 x ptr], ptr %43, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %323, align 8
  %324 = getelementptr [2 x ptr], ptr %43, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %324, align 8
  %325 = call ptr @llvm.invariant.start.p0(i64 4, ptr %43)
  %326 = call ptr @llvm.invariant.start.p0(i64 232, ptr %314)
  %327 = getelementptr ptr, ptr %314, i32 %321
  %328 = getelementptr ptr, ptr %327, i32 4
  %329 = load ptr, ptr %328, align 8
  %330 = getelementptr { ptr, ptr }, ptr %44, i32 0, i32 0
  store ptr @i32_typ, ptr %330, align 8
  %331 = getelementptr { ptr, ptr }, ptr %44, i32 0, i32 1
  store ptr @i32_typ, ptr %331, align 8
  %332 = call ptr @behavior_wrapper(ptr %329, { ptr, ptr, ptr, i32 } %322, ptr %44)
  call void %332({ ptr, ptr, ptr, i32 } %322, { ptr, ptr, ptr, i32 } %322, ptr %43, i32 %311, i32 %312) #15
  store i32 620, ptr %45, align 4
  store i32 59, ptr %46, align 4
  %333 = load i32, ptr %46, align 4
  %334 = sext i32 %333 to i64
  %335 = mul i64 %334, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %336 = call ptr @bump_malloc(i64 %335)
  store ptr %336, ptr %47, align 8
  %337 = getelementptr { ptr }, ptr %47, i32 0, i32 0
  %338 = load ptr, ptr %337, align 8
  store ptr %338, ptr %48, align 8
  store i32 0, ptr %49, align 4
  %339 = load ptr, ptr %48, align 8
  %340 = load i32, ptr %49, align 4
  %341 = sext i32 %340 to i64
  %342 = mul i64 ptrtoint (ptr getelementptr ([58 x i8], ptr null, i32 1) to i64), %341
  %343 = getelementptr i8, ptr %339, i64 %342
  %344 = load <58 x i8>, ptr @ibqfb_CUsersPaulKOneDriveDocumentsPLPyPLtmpgjbyyomini, align 64
  store <58 x i8> %344, ptr %343, align 64
  store i32 58, ptr %50, align 4
  store i32 59, ptr %51, align 4
  store ptr @String, ptr %52, align 8
  %345 = load ptr, ptr %52, align 8
  %346 = getelementptr ptr, ptr %345, i32 6
  %347 = load ptr, ptr %346, align 8
  %348 = call { i64, i64 } @size_wrapper(ptr %347, ptr %52)
  %349 = extractvalue { i64, i64 } %348, 0
  %350 = call ptr @bump_malloc(i64 %349)
  store ptr @String, ptr %56, align 8
  store ptr %350, ptr %55, align 8
  store i32 10, ptr %53, align 4
  store i32 58, ptr %57, align 4
  store i32 59, ptr %58, align 4
  %351 = load ptr, ptr %48, align 8
  %352 = insertvalue { ptr } undef, ptr %351, 0
  %353 = load i32, ptr %57, align 4
  %354 = load i32, ptr %58, align 4
  %355 = load ptr, ptr %56, align 8
  %356 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %355, 0
  %357 = load ptr, ptr %55, align 8
  %358 = insertvalue { ptr, ptr, ptr, i32 } %356, ptr %357, 1
  %359 = load ptr, ptr %54, align 8
  %360 = insertvalue { ptr, ptr, ptr, i32 } %358, ptr %359, 2
  %361 = load i32, ptr %53, align 4
  %362 = insertvalue { ptr, ptr, ptr, i32 } %360, i32 %361, 3
  %363 = getelementptr [3 x ptr], ptr %59, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %363, align 8
  %364 = getelementptr [3 x ptr], ptr %59, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %364, align 8
  %365 = getelementptr [3 x ptr], ptr %59, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %365, align 8
  %366 = call ptr @llvm.invariant.start.p0(i64 9, ptr %59)
  %367 = call ptr @llvm.invariant.start.p0(i64 280, ptr %355)
  %368 = getelementptr ptr, ptr %355, i32 %361
  %369 = getelementptr ptr, ptr %368, i32 4
  %370 = load ptr, ptr %369, align 8
  %371 = getelementptr { ptr, ptr, ptr }, ptr %60, i32 0, i32 0
  store ptr @buffer_typ, ptr %371, align 8
  %372 = getelementptr { ptr, ptr, ptr }, ptr %60, i32 0, i32 1
  store ptr @i32_typ, ptr %372, align 8
  %373 = getelementptr { ptr, ptr, ptr }, ptr %60, i32 0, i32 2
  store ptr @i32_typ, ptr %373, align 8
  %374 = call ptr @behavior_wrapper(ptr %370, { ptr, ptr, ptr, i32 } %362, ptr %60)
  call void %374({ ptr, ptr, ptr, i32 } %362, { ptr, ptr, ptr, i32 } %362, ptr %59, { ptr } %352, i32 %353, i32 %354) #15
  %375 = load i32, ptr %45, align 4
  %376 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %377 = load ptr, ptr %56, align 8
  store ptr %377, ptr %376, align 8
  %378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %379 = load ptr, ptr %55, align 8
  store ptr %379, ptr %378, align 8
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %381 = load ptr, ptr %54, align 8
  store ptr %381, ptr %380, align 8
  %382 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %383 = load i32, ptr %53, align 4
  store i32 %383, ptr %382, align 4
  call void @set_offset(ptr %61, ptr @String)
  %384 = load ptr, ptr %376, align 8
  %385 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %384, 0
  %386 = load ptr, ptr %378, align 8
  %387 = insertvalue { ptr, ptr, ptr, i32 } %385, ptr %386, 1
  %388 = load ptr, ptr %380, align 8
  %389 = insertvalue { ptr, ptr, ptr, i32 } %387, ptr %388, 2
  %390 = load i32, ptr %382, align 4
  %391 = insertvalue { ptr, ptr, ptr, i32 } %389, i32 %390, 3
  %392 = load ptr, ptr %313, align 8
  %393 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %392, 0
  %394 = load ptr, ptr %299, align 8
  %395 = insertvalue { ptr, ptr, ptr, i32 } %393, ptr %394, 1
  %396 = load ptr, ptr %318, align 8
  %397 = insertvalue { ptr, ptr, ptr, i32 } %395, ptr %396, 2
  %398 = load i32, ptr %300, align 4
  %399 = insertvalue { ptr, ptr, ptr, i32 } %397, i32 %398, 3
  %400 = getelementptr [2 x ptr], ptr %62, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %400, align 8
  %401 = getelementptr [2 x ptr], ptr %62, i32 0, i32 1
  store ptr @_parameterization_String, ptr %401, align 8
  %402 = call ptr @llvm.invariant.start.p0(i64 4, ptr %62)
  %403 = call ptr @llvm.invariant.start.p0(i64 232, ptr %392)
  %404 = getelementptr ptr, ptr %392, i32 %398
  %405 = getelementptr ptr, ptr %404, i32 7
  %406 = load ptr, ptr %405, align 8
  %407 = getelementptr { ptr, ptr }, ptr %63, i32 0, i32 0
  store ptr @i32_typ, ptr %407, align 8
  %408 = getelementptr { ptr, ptr }, ptr %63, i32 0, i32 1
  store ptr %384, ptr %408, align 8
  %409 = call ptr @behavior_wrapper(ptr %406, { ptr, ptr, ptr, i32 } %399, ptr %63)
  call void %409({ ptr, ptr, ptr, i32 } %399, { ptr, ptr, ptr, i32 } %399, ptr %62, i32 %375, { ptr, ptr, ptr, i32 } %391) #15
  %410 = getelementptr { ptr, i160 }, ptr %41, i32 0, i32 0
  %411 = load ptr, ptr %410, align 8
  %412 = insertvalue { ptr, i160 } undef, ptr %411, 0
  %413 = getelementptr { ptr, i160 }, ptr %41, i32 0, i32 1
  %414 = load i160, ptr %413, align 4
  %415 = insertvalue { ptr, i160 } %412, i160 %414, 1
  %416 = call ptr @get_current_coroutine()
  %417 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %416, i32 0, i32 4
  store { ptr, i160 } %415, ptr %417, align 8
  call void @coroutine_yield(ptr %416)
  %418 = load { ptr, i160 }, ptr %417, align 8
  store { ptr, i160 } %418, ptr %64, align 8
  br label %419

419:                                              ; preds = %._crit_edge1, %282
  %.reload19 = load ptr, ptr %.reg2mem17, align 8
  %420 = load ptr, ptr %.reload19, align 8
  %421 = load ptr, ptr %70, align 8
  %422 = call ptr @llvm.invariant.start.p0(i64 616, ptr %421)
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %423 = load i32, ptr %.reload8, align 4
  %424 = getelementptr ptr, ptr %421, i32 %423
  %425 = load ptr, ptr %424, align 8
  %426 = getelementptr { ptr, ptr }, ptr %425, i32 0, i32 0
  %427 = load ptr, ptr %426, align 8
  %428 = call { ptr } %427(ptr %420) #17
  store { ptr } %428, ptr %65, align 8
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %429 = load ptr, ptr %.reload18, align 8
  %430 = load ptr, ptr %70, align 8
  %431 = call ptr @llvm.invariant.start.p0(i64 616, ptr %430)
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %432 = load i32, ptr %.reload7, align 4
  %433 = getelementptr ptr, ptr %430, i32 %432
  %434 = getelementptr ptr, ptr %433, i32 1
  %435 = load ptr, ptr %434, align 8
  %436 = getelementptr { ptr, ptr }, ptr %435, i32 0, i32 0
  %437 = load ptr, ptr %436, align 8
  %438 = call i32 %437(ptr %429) #17
  store i32 %438, ptr %66, align 4
  %439 = load i32, ptr %66, align 4
  %440 = load i32, ptr %83, align 4
  %441 = add i32 %439, %440
  store i32 %441, ptr %67, align 4
  %442 = load ptr, ptr %65, align 8
  %443 = load i32, ptr %67, align 4
  %444 = sext i32 %443 to i64
  %445 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %444
  %446 = getelementptr i8, ptr %442, i64 %445
  %447 = load i32, ptr %446, align 4
  store i32 %447, ptr %68, align 4
  %448 = load i32, ptr %68, align 4
  store i32 %448, ptr %.reg2mem2, align 4
  %.reload3 = load i32, ptr %.reg2mem2, align 4
  store i32 %.reload3, ptr %.reg2mem28, align 4
  br label %449

449:                                              ; preds = %419, %247
  %.reload29 = load i32, ptr %.reg2mem28, align 4
  store i32 %.reload29, ptr %.reg2mem, align 4
  br label %450

450:                                              ; preds = %449
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define { ptr, i32 } @IntArray_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca i64, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem19 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  store ptr %22, ptr %.reg2mem12, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  store ptr %23, ptr %.reload18, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr %28, ptr %.reg2mem5, align 8
  %29 = load i32, ptr %27, align 4
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  store i32 %29, ptr %.reload11, align 4
  call void @set_offset(ptr %17, ptr @IntArray)
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %30 = load ptr, ptr %.reload17, align 8
  %31 = load ptr, ptr %17, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 616, ptr %31)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %33 = load i32, ptr %.reload10, align 4
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %30) #17
  %40 = alloca i32, align 4
  store i32 %39, ptr %40, align 4
  %41 = alloca i32, align 4
  store i32 0, ptr %41, align 4
  %42 = load i32, ptr %40, align 4
  %43 = load i32, ptr %41, align 4
  %44 = icmp eq i32 %42, %43
  %45 = alloca i1, align 1
  store i1 %44, ptr %45, align 1
  %46 = load i1, ptr %45, align 1
  br i1 %46, label %47, label %53

47:                                               ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %6, align 4
  %48 = load i64, ptr %6, align 4
  store i64 %48, ptr %5, align 4
  %49 = load ptr, ptr %5, align 8
  %50 = insertvalue { ptr, i32 } undef, ptr %49, 0
  %51 = load i32, ptr %4, align 4
  %52 = insertvalue { ptr, i32 } %50, i32 %51, 1
  store { ptr, i32 } %52, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem19, align 8
  br label %108

53:                                               ; preds = %3
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %54 = load ptr, ptr %.reload16, align 8
  %55 = load ptr, ptr %17, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 616, ptr %55)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %57 = load i32, ptr %.reload9, align 4
  %58 = getelementptr ptr, ptr %55, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call i32 %62(ptr %54) #17
  store i32 %63, ptr %7, align 4
  store i32 1, ptr %8, align 4
  %64 = load i32, ptr %7, align 4
  %65 = load i32, ptr %8, align 4
  %66 = sub i32 %64, %65
  store i32 %66, ptr %9, align 4
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %67 = load ptr, ptr %.reload15, align 8
  %68 = load ptr, ptr %17, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 616, ptr %68)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %70 = load i32, ptr %.reload8, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = getelementptr ptr, ptr %71, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = load i32, ptr %9, align 4
  call void %75(ptr %67, i32 %76) #16
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %77 = load ptr, ptr %.reload14, align 8
  %78 = load ptr, ptr %17, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 616, ptr %78)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %80 = load i32, ptr %.reload7, align 4
  %81 = getelementptr ptr, ptr %78, i32 %80
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr } %84(ptr %77) #17
  store { ptr } %85, ptr %10, align 8
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %86 = load ptr, ptr %.reload13, align 8
  %87 = load ptr, ptr %17, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 616, ptr %87)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %89 = load i32, ptr %.reload6, align 4
  %90 = getelementptr ptr, ptr %87, i32 %89
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = call i32 %94(ptr %86) #17
  store i32 %95, ptr %11, align 4
  %96 = load ptr, ptr %10, align 8
  %97 = load i32, ptr %11, align 4
  %98 = sext i32 %97 to i64
  %99 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %98
  %100 = getelementptr i8, ptr %96, i64 %99
  %101 = load i32, ptr %100, align 4
  store i32 %101, ptr %12, align 4
  %102 = load i32, ptr %12, align 4
  store i32 %102, ptr %13, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %15, align 4
  %103 = load i64, ptr %15, align 4
  store i64 %103, ptr %14, align 4
  %104 = load ptr, ptr %14, align 8
  %105 = insertvalue { ptr, i32 } undef, ptr %104, 0
  %106 = load i32, ptr %13, align 4
  %107 = insertvalue { ptr, i32 } %105, i32 %106, 1
  store { ptr, i32 } %107, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem19, align 8
  br label %108

108:                                              ; preds = %53, %47
  %.reload20 = load { ptr, i32 }, ptr %.reg2mem19, align 8
  store { ptr, i32 } %.reload20, ptr %.reg2mem, align 8
  br label %109

109:                                              ; preds = %108
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define { ptr, ptr, ptr, i32 } @IntArray_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [1 x ptr], align 8
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca [3 x ptr], align 8
  %20 = alloca { ptr, ptr, ptr }, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = alloca i32, align 4
  %23 = alloca ptr, align 8
  %24 = alloca ptr, align 8
  %25 = alloca ptr, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %27, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  store ptr %33, ptr %.reg2mem12, align 8
  %34 = load ptr, ptr %32, align 8
  %.reload20 = load ptr, ptr %.reg2mem12, align 8
  store ptr %34, ptr %.reload20, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr %39, ptr %.reg2mem3, align 8
  %40 = load i32, ptr %38, align 4
  %.reload11 = load ptr, ptr %.reg2mem3, align 8
  store i32 %40, ptr %.reload11, align 4
  call void @set_offset(ptr %28, ptr @IntArray)
  %.reload19 = load ptr, ptr %.reg2mem12, align 8
  %41 = load ptr, ptr %.reload19, align 8
  %42 = load ptr, ptr %28, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 616, ptr %42)
  %.reload10 = load ptr, ptr %.reg2mem3, align 8
  %44 = load i32, ptr %.reload10, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = call i32 %49(ptr %41) #17
  %51 = alloca i32, align 4
  store i32 %50, ptr %51, align 4
  %52 = load i32, ptr %51, align 4
  %53 = sext i32 %52 to i64
  %54 = alloca ptr, align 8
  %55 = mul i64 %53, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %56 = call ptr @bump_malloc(i64 %55)
  store ptr %56, ptr %54, align 8
  %57 = alloca ptr, align 8
  %58 = getelementptr { ptr }, ptr %54, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  store ptr %59, ptr %57, align 8
  %60 = alloca i32, align 4
  store i32 0, ptr %60, align 4
  br label %61

61:                                               ; preds = %._crit_edge1, %3
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  %62 = load ptr, ptr %.reload18, align 8
  %63 = load ptr, ptr %28, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 616, ptr %63)
  %.reload9 = load ptr, ptr %.reg2mem3, align 8
  %65 = load i32, ptr %.reload9, align 4
  %66 = getelementptr ptr, ptr %63, i32 %65
  %67 = getelementptr ptr, ptr %66, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr { ptr, ptr }, ptr %68, i32 0, i32 0
  %70 = load ptr, ptr %69, align 8
  %71 = call i32 %70(ptr %62) #17
  store i32 %71, ptr %4, align 4
  %72 = load i32, ptr %60, align 4
  %73 = load i32, ptr %4, align 4
  %74 = icmp slt i32 %72, %73
  store i1 %74, ptr %5, align 1
  %75 = load i1, ptr %5, align 1
  store i1 %75, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %76, label %._crit_edge

._crit_edge:                                      ; preds = %61
  br label %102

76:                                               ; preds = %61
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %77 = load ptr, ptr %.reload17, align 8
  %78 = load ptr, ptr %28, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 616, ptr %78)
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %80 = load i32, ptr %.reload8, align 4
  %81 = getelementptr ptr, ptr %78, i32 %80
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr } %84(ptr %77) #17
  store { ptr } %85, ptr %6, align 8
  %86 = load ptr, ptr %6, align 8
  %87 = load i32, ptr %60, align 4
  %88 = sext i32 %87 to i64
  %89 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %88
  %90 = getelementptr i8, ptr %86, i64 %89
  %91 = load i32, ptr %90, align 4
  store i32 %91, ptr %7, align 4
  %92 = load ptr, ptr %57, align 8
  %93 = load i32, ptr %60, align 4
  %94 = sext i32 %93 to i64
  %95 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %94
  %96 = getelementptr i8, ptr %92, i64 %95
  %97 = load i32, ptr %7, align 4
  store i32 %97, ptr %96, align 4
  store i32 1, ptr %8, align 4
  %98 = load i32, ptr %60, align 4
  %99 = load i32, ptr %8, align 4
  %100 = add i32 %98, %99
  store i32 %100, ptr %9, align 4
  %101 = load i32, ptr %9, align 4
  store i32 %101, ptr %60, align 4
  br label %102

102:                                              ; preds = %._crit_edge, %76
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %103

._crit_edge1:                                     ; preds = %102
  br label %61

103:                                              ; preds = %102
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %104 = load ptr, ptr %.reload16, align 8
  %105 = load ptr, ptr %28, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 616, ptr %105)
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %107 = load i32, ptr %.reload7, align 4
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = call i32 %112(ptr %104) #17
  store i32 %113, ptr %10, align 4
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %114 = load ptr, ptr %.reload15, align 8
  %115 = load ptr, ptr %28, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 616, ptr %115)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %117 = load i32, ptr %.reload6, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call i32 %122(ptr %114) #17
  store i32 %123, ptr %11, align 4
  store ptr @IntArray, ptr %12, align 8
  %124 = load ptr, ptr %12, align 8
  %125 = getelementptr ptr, ptr %124, i32 6
  %126 = load ptr, ptr %125, align 8
  %127 = call { i64, i64 } @size_wrapper(ptr %126, ptr %12)
  %128 = extractvalue { i64, i64 } %127, 0
  %129 = call ptr @bump_malloc(i64 %128)
  store ptr @IntArray, ptr %16, align 8
  store ptr %129, ptr %15, align 8
  store i32 10, ptr %13, align 4
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %130 = load ptr, ptr %.reload14, align 8
  %131 = load ptr, ptr %28, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 616, ptr %131)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %133 = load i32, ptr %.reload5, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call i32 %138(ptr %130) #17
  store i32 %139, ptr %17, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %140 = load ptr, ptr %.reload13, align 8
  %141 = load ptr, ptr %28, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 616, ptr %141)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %143 = load i32, ptr %.reload4, align 4
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr }, ptr %146, i32 0, i32 0
  %148 = load ptr, ptr %147, align 8
  %149 = call i32 %148(ptr %140) #17
  store i32 %149, ptr %18, align 4
  %150 = load ptr, ptr %57, align 8
  %151 = insertvalue { ptr } undef, ptr %150, 0
  %152 = load i32, ptr %17, align 4
  %153 = load i32, ptr %18, align 4
  %154 = load ptr, ptr %16, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %154, 0
  %156 = load ptr, ptr %15, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %156, 1
  %158 = load ptr, ptr %14, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %158, 2
  %160 = load i32, ptr %13, align 4
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, i32 %160, 3
  %162 = getelementptr [3 x ptr], ptr %19, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %162, align 8
  %163 = getelementptr [3 x ptr], ptr %19, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %163, align 8
  %164 = getelementptr [3 x ptr], ptr %19, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %164, align 8
  %165 = call ptr @llvm.invariant.start.p0(i64 9, ptr %19)
  %166 = call ptr @llvm.invariant.start.p0(i64 616, ptr %154)
  %167 = getelementptr ptr, ptr %154, i32 %160
  %168 = getelementptr ptr, ptr %167, i32 5
  %169 = load ptr, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 0
  store ptr @buffer_typ, ptr %170, align 8
  %171 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 1
  store ptr @i32_typ, ptr %171, align 8
  %172 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  store ptr @i32_typ, ptr %172, align 8
  %173 = call ptr @behavior_wrapper(ptr %169, { ptr, ptr, ptr, i32 } %161, ptr %20)
  call void %173({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr %19, { ptr } %151, i32 %152, i32 %153) #15
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %175 = load ptr, ptr %16, align 8
  store ptr %175, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %177 = load ptr, ptr %15, align 8
  store ptr %177, ptr %176, align 8
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %179 = load ptr, ptr %14, align 8
  store ptr %179, ptr %178, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %181 = load i32, ptr %13, align 4
  store i32 %181, ptr %180, align 4
  call void @set_offset(ptr %21, ptr @IntArray)
  %182 = load ptr, ptr %174, align 8
  store ptr %182, ptr %25, align 8
  %183 = load ptr, ptr %176, align 8
  store ptr %183, ptr %24, align 8
  %184 = load ptr, ptr %178, align 8
  store ptr %184, ptr %23, align 8
  %185 = load i32, ptr %180, align 4
  store i32 %185, ptr %22, align 4
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %187 = load ptr, ptr %25, align 8
  store ptr %187, ptr %186, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %189 = load ptr, ptr %24, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %191 = load ptr, ptr %23, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %193 = load i32, ptr %22, align 4
  store i32 %193, ptr %192, align 4
  call void @set_offset(ptr %26, ptr @IntArray)
  %194 = load ptr, ptr %186, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %194, 0
  %196 = load ptr, ptr %188, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %196, 1
  %198 = load ptr, ptr %190, align 8
  %199 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %198, 2
  %200 = load i32, ptr %192, align 4
  %201 = insertvalue { ptr, ptr, ptr, i32 } %199, i32 %200, 3
  ret { ptr, ptr, ptr, i32 } %201
}

define { ptr, ptr, ptr, i32 } @IntArray_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca i32, align 4
  %6 = alloca i1, align 1
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [1 x ptr], align 8
  %15 = alloca i32, align 4
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca [3 x ptr], align 8
  %22 = alloca { ptr, ptr, ptr }, align 8
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = alloca i32, align 4
  %25 = alloca ptr, align 8
  %26 = alloca ptr, align 8
  %27 = alloca ptr, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %29, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  store ptr %35, ptr %.reg2mem12, align 8
  %36 = load ptr, ptr %34, align 8
  %.reload20 = load ptr, ptr %.reg2mem12, align 8
  store ptr %36, ptr %.reload20, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  store ptr %41, ptr %.reg2mem3, align 8
  %42 = load i32, ptr %40, align 4
  %.reload11 = load ptr, ptr %.reg2mem3, align 8
  store i32 %42, ptr %.reload11, align 4
  call void @set_offset(ptr %30, ptr @IntArray)
  %43 = alloca ptr, align 8
  store { ptr } %3, ptr %43, align 8
  %.reload19 = load ptr, ptr %.reg2mem12, align 8
  %44 = load ptr, ptr %.reload19, align 8
  %45 = load ptr, ptr %30, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 616, ptr %45)
  %.reload10 = load ptr, ptr %.reg2mem3, align 8
  %47 = load i32, ptr %.reload10, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %44) #17
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %55 = load i32, ptr %54, align 4
  %56 = sext i32 %55 to i64
  %57 = alloca ptr, align 8
  %58 = mul i64 %56, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %59 = call ptr @bump_malloc(i64 %58)
  store ptr %59, ptr %57, align 8
  %60 = alloca ptr, align 8
  %61 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  store ptr %62, ptr %60, align 8
  %63 = alloca i32, align 4
  store i32 0, ptr %63, align 4
  br label %64

64:                                               ; preds = %._crit_edge1, %4
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  %65 = load ptr, ptr %.reload18, align 8
  %66 = load ptr, ptr %30, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 616, ptr %66)
  %.reload9 = load ptr, ptr %.reg2mem3, align 8
  %68 = load i32, ptr %.reload9, align 4
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = getelementptr { ptr, ptr }, ptr %71, i32 0, i32 0
  %73 = load ptr, ptr %72, align 8
  %74 = call i32 %73(ptr %65) #17
  store i32 %74, ptr %5, align 4
  %75 = load i32, ptr %63, align 4
  %76 = load i32, ptr %5, align 4
  %77 = icmp slt i32 %75, %76
  store i1 %77, ptr %6, align 1
  %78 = load i1, ptr %6, align 1
  store i1 %78, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %79, label %._crit_edge

._crit_edge:                                      ; preds = %64
  br label %108

79:                                               ; preds = %64
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %80 = load ptr, ptr %.reload17, align 8
  %81 = load ptr, ptr %30, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 616, ptr %81)
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %83 = load i32, ptr %.reload8, align 4
  %84 = getelementptr ptr, ptr %81, i32 %83
  %85 = load ptr, ptr %84, align 8
  %86 = getelementptr { ptr, ptr }, ptr %85, i32 0, i32 0
  %87 = load ptr, ptr %86, align 8
  %88 = call { ptr } %87(ptr %80) #17
  store { ptr } %88, ptr %7, align 8
  %89 = load ptr, ptr %7, align 8
  %90 = load i32, ptr %63, align 4
  %91 = sext i32 %90 to i64
  %92 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %91
  %93 = getelementptr i8, ptr %89, i64 %92
  %94 = load i32, ptr %93, align 4
  store i32 %94, ptr %8, align 4
  %95 = load i32, ptr %8, align 4
  %96 = load ptr, ptr %43, align 8
  %97 = call i32 %96(i32 %95)
  store i32 %97, ptr %9, align 4
  %98 = load ptr, ptr %60, align 8
  %99 = load i32, ptr %63, align 4
  %100 = sext i32 %99 to i64
  %101 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %100
  %102 = getelementptr i8, ptr %98, i64 %101
  %103 = load i32, ptr %9, align 4
  store i32 %103, ptr %102, align 4
  store i32 1, ptr %10, align 4
  %104 = load i32, ptr %63, align 4
  %105 = load i32, ptr %10, align 4
  %106 = add i32 %104, %105
  store i32 %106, ptr %11, align 4
  %107 = load i32, ptr %11, align 4
  store i32 %107, ptr %63, align 4
  br label %108

108:                                              ; preds = %._crit_edge, %79
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %109

._crit_edge1:                                     ; preds = %108
  br label %64

109:                                              ; preds = %108
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %110 = load ptr, ptr %.reload16, align 8
  %111 = load ptr, ptr %30, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 616, ptr %111)
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %113 = load i32, ptr %.reload7, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = getelementptr ptr, ptr %114, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = call i32 %118(ptr %110) #17
  store i32 %119, ptr %12, align 4
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %120 = load ptr, ptr %.reload15, align 8
  %121 = load ptr, ptr %30, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 616, ptr %121)
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %123 = load i32, ptr %.reload6, align 4
  %124 = getelementptr ptr, ptr %121, i32 %123
  %125 = getelementptr ptr, ptr %124, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = getelementptr { ptr, ptr }, ptr %126, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = call i32 %128(ptr %120) #17
  store i32 %129, ptr %13, align 4
  store ptr @IntArray, ptr %14, align 8
  %130 = load ptr, ptr %14, align 8
  %131 = getelementptr ptr, ptr %130, i32 6
  %132 = load ptr, ptr %131, align 8
  %133 = call { i64, i64 } @size_wrapper(ptr %132, ptr %14)
  %134 = extractvalue { i64, i64 } %133, 0
  %135 = call ptr @bump_malloc(i64 %134)
  store ptr @IntArray, ptr %18, align 8
  store ptr %135, ptr %17, align 8
  store i32 10, ptr %15, align 4
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %136 = load ptr, ptr %.reload14, align 8
  %137 = load ptr, ptr %30, align 8
  %138 = call ptr @llvm.invariant.start.p0(i64 616, ptr %137)
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %139 = load i32, ptr %.reload5, align 4
  %140 = getelementptr ptr, ptr %137, i32 %139
  %141 = getelementptr ptr, ptr %140, i32 1
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, ptr }, ptr %142, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = call i32 %144(ptr %136) #17
  store i32 %145, ptr %19, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %146 = load ptr, ptr %.reload13, align 8
  %147 = load ptr, ptr %30, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 616, ptr %147)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %149 = load i32, ptr %.reload4, align 4
  %150 = getelementptr ptr, ptr %147, i32 %149
  %151 = getelementptr ptr, ptr %150, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = getelementptr { ptr, ptr }, ptr %152, i32 0, i32 0
  %154 = load ptr, ptr %153, align 8
  %155 = call i32 %154(ptr %146) #17
  store i32 %155, ptr %20, align 4
  %156 = load ptr, ptr %60, align 8
  %157 = insertvalue { ptr } undef, ptr %156, 0
  %158 = load i32, ptr %19, align 4
  %159 = load i32, ptr %20, align 4
  %160 = load ptr, ptr %18, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %160, 0
  %162 = load ptr, ptr %17, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %162, 1
  %164 = load ptr, ptr %16, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 2
  %166 = load i32, ptr %15, align 4
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, i32 %166, 3
  %168 = getelementptr [3 x ptr], ptr %21, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %168, align 8
  %169 = getelementptr [3 x ptr], ptr %21, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %169, align 8
  %170 = getelementptr [3 x ptr], ptr %21, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %170, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 9, ptr %21)
  %172 = call ptr @llvm.invariant.start.p0(i64 616, ptr %160)
  %173 = getelementptr ptr, ptr %160, i32 %166
  %174 = getelementptr ptr, ptr %173, i32 5
  %175 = load ptr, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr @buffer_typ, ptr %176, align 8
  %177 = getelementptr { ptr, ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr @i32_typ, ptr %177, align 8
  %178 = getelementptr { ptr, ptr, ptr }, ptr %22, i32 0, i32 2
  store ptr @i32_typ, ptr %178, align 8
  %179 = call ptr @behavior_wrapper(ptr %175, { ptr, ptr, ptr, i32 } %167, ptr %22)
  call void %179({ ptr, ptr, ptr, i32 } %167, { ptr, ptr, ptr, i32 } %167, ptr %21, { ptr } %157, i32 %158, i32 %159) #15
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %181 = load ptr, ptr %18, align 8
  store ptr %181, ptr %180, align 8
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %183 = load ptr, ptr %17, align 8
  store ptr %183, ptr %182, align 8
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %185 = load ptr, ptr %16, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %187 = load i32, ptr %15, align 4
  store i32 %187, ptr %186, align 4
  call void @set_offset(ptr %23, ptr @IntArray)
  %188 = load ptr, ptr %180, align 8
  store ptr %188, ptr %27, align 8
  %189 = load ptr, ptr %182, align 8
  store ptr %189, ptr %26, align 8
  %190 = load ptr, ptr %184, align 8
  store ptr %190, ptr %25, align 8
  %191 = load i32, ptr %186, align 4
  store i32 %191, ptr %24, align 4
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %193 = load ptr, ptr %27, align 8
  store ptr %193, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %195 = load ptr, ptr %26, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %197 = load ptr, ptr %25, align 8
  store ptr %197, ptr %196, align 8
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %199 = load i32, ptr %24, align 4
  store i32 %199, ptr %198, align 4
  call void @set_offset(ptr %28, ptr @IntIterable)
  %200 = load ptr, ptr %192, align 8
  %201 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %200, 0
  %202 = load ptr, ptr %194, align 8
  %203 = insertvalue { ptr, ptr, ptr, i32 } %201, ptr %202, 1
  %204 = load ptr, ptr %196, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } %203, ptr %204, 2
  %206 = load i32, ptr %198, align 4
  %207 = insertvalue { ptr, ptr, ptr, i32 } %205, i32 %206, 3
  ret { ptr, ptr, ptr, i32 } %207
}

define { ptr, ptr, ptr, i32 } @IntArray_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @IntArray)
  %18 = alloca [1 x ptr], align 8
  store ptr @IntArrayIterator, ptr %18, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 6
  %21 = load ptr, ptr %20, align 8
  %22 = call { i64, i64 } @size_wrapper(ptr %21, ptr %18)
  %23 = extractvalue { i64, i64 } %22, 0
  %24 = call ptr @bump_malloc(i64 %23)
  %25 = alloca i32, align 4
  %26 = alloca ptr, align 8
  %27 = alloca ptr, align 8
  %28 = alloca ptr, align 8
  store ptr @IntArrayIterator, ptr %28, align 8
  store ptr %24, ptr %27, align 8
  store i32 10, ptr %25, align 4
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %31 = load ptr, ptr %7, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %33 = load ptr, ptr %10, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %35 = load ptr, ptr %13, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %37 = load i32, ptr %16, align 4
  store i32 %37, ptr %36, align 4
  call void @set_offset(ptr %29, ptr @IntArray)
  %38 = load ptr, ptr %30, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 1
  %42 = load ptr, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 2
  %44 = load i32, ptr %36, align 4
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %44, 3
  %46 = load ptr, ptr %28, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = load ptr, ptr %27, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 1
  %50 = load ptr, ptr %26, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 2
  %52 = load i32, ptr %25, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %52, 3
  %54 = alloca [1 x ptr], align 8
  %55 = getelementptr [1 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 1, ptr %54)
  %57 = call ptr @llvm.invariant.start.p0(i64 64, ptr %46)
  %58 = getelementptr ptr, ptr %46, i32 %52
  %59 = getelementptr ptr, ptr %58, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = alloca { ptr }, align 8
  %62 = getelementptr { ptr }, ptr %61, i32 0, i32 0
  store ptr %38, ptr %62, align 8
  %63 = call ptr @behavior_wrapper(ptr %60, { ptr, ptr, ptr, i32 } %53, ptr %61)
  call void %63({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr, ptr, ptr, i32 } %45) #15
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %28, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %68 = load ptr, ptr %27, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %70 = load ptr, ptr %26, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %72 = load i32, ptr %25, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %64, ptr @Iterator)
  %73 = load ptr, ptr %65, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %67, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %69, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %71, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  ret { ptr, ptr, ptr, i32 } %80
}

define { i64, i64 } @_data_size_IntArrayIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @IntArrayIterator_B_init_arrayIntArray({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntArray, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntArray to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 4, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [8 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @IntArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 5, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @IntArrayIterator_init_arrayIntArray({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArrayIterator)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @IntArray)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @IntArray)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 64, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %34, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %36, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %38, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %40, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  call void %49(ptr %42, { ptr, ptr, ptr, i32 } %57) #16
  %58 = alloca i32, align 4
  store i32 0, ptr %58, align 4
  %59 = load ptr, ptr %11, align 8
  %60 = load ptr, ptr %6, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 64, ptr %60)
  %62 = load i32, ptr %17, align 4
  %63 = getelementptr ptr, ptr %60, i32 %62
  %64 = getelementptr ptr, ptr %63, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = load i32, ptr %58, align 4
  call void %67(ptr %59, i32 %68) #16
  ret void
}

define { ptr, i32 } @IntArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [0 x ptr], align 8
  %9 = alloca {}, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca ptr, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca ptr, align 8
  %20 = alloca i64, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem21 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %21, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  store ptr %27, ptr %.reg2mem13, align 8
  %28 = load ptr, ptr %26, align 8
  %.reload20 = load ptr, ptr %.reg2mem13, align 8
  store ptr %28, ptr %.reload20, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  store ptr %33, ptr %.reg2mem5, align 8
  %34 = load i32, ptr %32, align 4
  %.reload12 = load ptr, ptr %.reg2mem5, align 8
  store i32 %34, ptr %.reload12, align 4
  call void @set_offset(ptr %22, ptr @IntArrayIterator)
  %.reload19 = load ptr, ptr %.reg2mem13, align 8
  %35 = load ptr, ptr %.reload19, align 8
  %36 = load ptr, ptr %22, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 64, ptr %36)
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  %38 = load i32, ptr %.reload11, align 4
  %39 = getelementptr ptr, ptr %36, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %35) #17
  %45 = alloca i32, align 4
  store i32 %44, ptr %45, align 4
  %.reload18 = load ptr, ptr %.reg2mem13, align 8
  %46 = load ptr, ptr %.reload18, align 8
  %47 = load ptr, ptr %22, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 64, ptr %47)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %49 = load i32, ptr %.reload10, align 4
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call { ptr, ptr, ptr, i32 } %53(ptr %46) #17
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %54, ptr %55, align 8
  call void @assume_offset(ptr %55, ptr @IntArray)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %66, 3
  %68 = alloca [0 x ptr], align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 0, ptr %68)
  %70 = call ptr @llvm.invariant.start.p0(i64 616, ptr %57)
  %71 = getelementptr ptr, ptr %57, i32 %66
  %72 = getelementptr ptr, ptr %71, i32 6
  %73 = load ptr, ptr %72, align 8
  %74 = alloca {}, align 8
  %75 = call ptr @behavior_wrapper(ptr %73, { ptr, ptr, ptr, i32 } %67, ptr %74)
  %76 = call i32 %75({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %68) #15
  %77 = alloca i32, align 4
  store i32 %76, ptr %77, align 4
  %78 = load i32, ptr %45, align 4
  %79 = load i32, ptr %77, align 4
  %80 = icmp slt i32 %78, %79
  %81 = alloca i1, align 1
  store i1 %80, ptr %81, align 1
  %82 = load i1, ptr %81, align 1
  br i1 %82, label %83, label %160

83:                                               ; preds = %3
  %.reload17 = load ptr, ptr %.reg2mem13, align 8
  %84 = load ptr, ptr %.reload17, align 8
  %85 = load ptr, ptr %22, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 64, ptr %85)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %87 = load i32, ptr %.reload9, align 4
  %88 = getelementptr ptr, ptr %85, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call i32 %92(ptr %84) #17
  store i32 %93, ptr %4, align 4
  store i32 1, ptr %5, align 4
  %94 = load i32, ptr %4, align 4
  %95 = load i32, ptr %5, align 4
  %96 = add i32 %94, %95
  store i32 %96, ptr %6, align 4
  %.reload16 = load ptr, ptr %.reg2mem13, align 8
  %97 = load ptr, ptr %.reload16, align 8
  %98 = load ptr, ptr %22, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 64, ptr %98)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %100 = load i32, ptr %.reload8, align 4
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = getelementptr ptr, ptr %101, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = getelementptr { ptr, ptr }, ptr %103, i32 0, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = load i32, ptr %6, align 4
  call void %105(ptr %97, i32 %106) #16
  %.reload15 = load ptr, ptr %.reg2mem13, align 8
  %107 = load ptr, ptr %.reload15, align 8
  %108 = load ptr, ptr %22, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 64, ptr %108)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %110 = load i32, ptr %.reload7, align 4
  %111 = getelementptr ptr, ptr %108, i32 %110
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 0
  %114 = load ptr, ptr %113, align 8
  %115 = call { ptr, ptr, ptr, i32 } %114(ptr %107) #17
  store { ptr, ptr, ptr, i32 } %115, ptr %7, align 8
  call void @assume_offset(ptr %7, ptr @IntArray)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %126, 3
  %128 = call ptr @llvm.invariant.start.p0(i64 0, ptr %8)
  %129 = call ptr @llvm.invariant.start.p0(i64 616, ptr %117)
  %130 = getelementptr ptr, ptr %117, i32 %126
  %131 = getelementptr ptr, ptr %130, i32 8
  %132 = load ptr, ptr %131, align 8
  %133 = call ptr @behavior_wrapper(ptr %132, { ptr, ptr, ptr, i32 } %127, ptr %9)
  %134 = call { ptr } %133({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %8) #15
  store { ptr } %134, ptr %10, align 8
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %135 = load ptr, ptr %.reload14, align 8
  %136 = load ptr, ptr %22, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 64, ptr %136)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %138 = load i32, ptr %.reload6, align 4
  %139 = getelementptr ptr, ptr %136, i32 %138
  %140 = getelementptr ptr, ptr %139, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = getelementptr { ptr, ptr }, ptr %141, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = call i32 %143(ptr %135) #17
  store i32 %144, ptr %11, align 4
  store i32 1, ptr %12, align 4
  %145 = load i32, ptr %11, align 4
  %146 = load i32, ptr %12, align 4
  %147 = sub i32 %145, %146
  store i32 %147, ptr %13, align 4
  %148 = load ptr, ptr %10, align 8
  %149 = load i32, ptr %13, align 4
  %150 = sext i32 %149 to i64
  %151 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %150
  %152 = getelementptr i8, ptr %148, i64 %151
  %153 = load i32, ptr %152, align 4
  store i32 %153, ptr %14, align 4
  %154 = load i32, ptr %14, align 4
  store i32 %154, ptr %15, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %17, align 4
  %155 = load i64, ptr %17, align 4
  store i64 %155, ptr %16, align 4
  %156 = load ptr, ptr %16, align 8
  %157 = insertvalue { ptr, i32 } undef, ptr %156, 0
  %158 = load i32, ptr %15, align 4
  %159 = insertvalue { ptr, i32 } %157, i32 %158, 1
  store { ptr, i32 } %159, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem21, align 8
  br label %166

160:                                              ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %20, align 4
  %161 = load i64, ptr %20, align 4
  store i64 %161, ptr %19, align 4
  %162 = load ptr, ptr %19, align 8
  %163 = insertvalue { ptr, i32 } undef, ptr %162, 0
  %164 = load i32, ptr %18, align 4
  %165 = insertvalue { ptr, i32 } %163, i32 %164, 1
  store { ptr, i32 } %165, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem21, align 8
  br label %166

166:                                              ; preds = %160, %83
  %.reload22 = load { ptr, i32 }, ptr %.reg2mem21, align 8
  store { ptr, i32 } %.reload22, ptr %.reg2mem, align 8
  br label %167

167:                                              ; preds = %166
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define i32 @IntArrayIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @IntArrayIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @IntArrayIterator_getter_array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @IntArrayIterator_setter_array(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define i32 @IntArray_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @IntArray_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define i32 @IntArray_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @IntArray_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca i32, align 4
  store i32 %1, ptr %9, align 4
  %10 = load i32, ptr %9, align 4
  store i32 %10, ptr %8, align 4
  ret void
}

define { ptr } @IntArray_getter_buffer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @IntArray_setter_buffer(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define { i64, i64 } @_data_size_Pair(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = getelementptr ptr, ptr %0, i32 1
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr ptr, ptr %14, i32 9
  %16 = load ptr, ptr %15, align 8
  %17 = call { i64, i64 } @size_wrapper(ptr %16, ptr %13)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = extractvalue { i64, i64 } %17, 1
  %20 = icmp ugt i64 %19, %5
  %21 = select i1 %20, i64 %19, i64 %5
  %22 = urem i64 %11, %19
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %19, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 %18, %25
  %27 = add i64 %11, %26
  %28 = getelementptr ptr, ptr %0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 9
  %32 = load ptr, ptr %31, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr %32, ptr %29)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = extractvalue { i64, i64 } %33, 1
  %36 = icmp ugt i64 %35, %21
  %37 = select i1 %36, i64 %35, i64 %21
  %38 = urem i64 %27, %35
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 %35, %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 %34, %41
  %43 = add i64 %27, %42
  %44 = urem i64 %43, %37
  %45 = icmp eq i64 %44, 0
  %46 = sub i64 %37, %44
  %47 = select i1 %45, i64 0, i64 %46
  %48 = add i64 %43, %47
  %49 = insertvalue { i64, i64 } undef, i64 %48, 0
  %50 = insertvalue { i64, i64 } %49, i64 %37, 1
  ret { i64, i64 } %50
}

define ptr @Pair_field_Pair_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Pair_field_Pair_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @any_typ, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @any_typ to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 7, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [10 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 8, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Pair)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  store ptr %24, ptr %22, align 8
  %25 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %26 = load i160, ptr %25, align 4
  store i160 %26, ptr %21, align 4
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  %29 = load ptr, ptr %22, align 8
  store ptr %29, ptr %28, align 8
  %30 = load i160, ptr %21, align 4
  store i160 %30, ptr %27, align 4
  %31 = load ptr, ptr %12, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 80, ptr %32)
  %34 = load i32, ptr %18, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %28, align 8
  %41 = insertvalue { ptr, i160 } undef, ptr %40, 0
  %42 = load i160, ptr %27, align 4
  %43 = insertvalue { ptr, i160 } %41, i160 %42, 1
  call void %39(ptr %31, { ptr, i160 } %43) #16
  %44 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %44, align 8
  %45 = alloca i160, align 8
  %46 = alloca ptr, align 8
  %47 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  store ptr %48, ptr %46, align 8
  %49 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 1
  %50 = load i160, ptr %49, align 4
  store i160 %50, ptr %45, align 4
  %51 = alloca i160, align 8
  %52 = alloca ptr, align 8
  %53 = load ptr, ptr %46, align 8
  store ptr %53, ptr %52, align 8
  %54 = load i160, ptr %45, align 4
  store i160 %54, ptr %51, align 4
  %55 = load ptr, ptr %12, align 8
  %56 = load ptr, ptr %7, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr %56)
  %58 = load i32, ptr %18, align 4
  %59 = getelementptr ptr, ptr %56, i32 %58
  %60 = getelementptr ptr, ptr %59, i32 3
  %61 = load ptr, ptr %60, align 8
  %62 = getelementptr { ptr, ptr }, ptr %61, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = load ptr, ptr %52, align 8
  %65 = insertvalue { ptr, i160 } undef, ptr %64, 0
  %66 = load i160, ptr %51, align 4
  %67 = insertvalue { ptr, i160 } %65, i160 %66, 1
  call void %63(ptr %55, { ptr, i160 } %67) #16
  ret void
}

define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Pair)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, i160 } %26(ptr %18) #17
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %27, ptr %28, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  store ptr %32, ptr %30, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %33, align 4
  store i160 %34, ptr %29, align 4
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = load ptr, ptr %30, align 8
  store ptr %37, ptr %36, align 8
  %38 = load i160, ptr %29, align 4
  store i160 %38, ptr %35, align 4
  %39 = load ptr, ptr %36, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = load i160, ptr %35, align 4
  %42 = insertvalue { ptr, i160 } %40, i160 %41, 1
  ret { ptr, i160 } %42
}

define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Pair)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, i160 } %26(ptr %18) #17
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %27, ptr %28, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  store ptr %32, ptr %30, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %33, align 4
  store i160 %34, ptr %29, align 4
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = load ptr, ptr %30, align 8
  store ptr %37, ptr %36, align 8
  %38 = load i160, ptr %29, align 4
  store i160 %38, ptr %35, align 4
  %39 = load ptr, ptr %36, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = load i160, ptr %35, align 4
  %42 = insertvalue { ptr, i160 } %40, i160 %41, 1
  ret { ptr, i160 } %42
}

define { ptr, i160 } @Pair_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = load ptr, ptr %0, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %9, i32 9
  %11 = load ptr, ptr %10, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr %8)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = extractvalue { i64, i64 } %12, 1
  %15 = urem i64 %7, %14
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 %14, %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %13, %18
  %20 = add i64 %7, %19
  %21 = getelementptr ptr, ptr %0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr ptr, ptr %23, i32 9
  %25 = load ptr, ptr %24, align 8
  %26 = call { i64, i64 } @size_wrapper(ptr %25, ptr %22)
  %27 = extractvalue { i64, i64 } %26, 1
  %28 = urem i64 %20, %27
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %27, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %20, %31
  %33 = getelementptr i8, ptr %0, i64 %32
  %34 = load ptr, ptr %21, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr ptr, ptr %35, i32 7
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr, i160 } @box_wrapper(ptr %37, ptr %33, ptr %34)
  ret { ptr, i160 } %38
}

define void @Pair_setter_second(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = load ptr, ptr %0, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %10, i32 9
  %12 = load ptr, ptr %11, align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr %9)
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = extractvalue { i64, i64 } %13, 1
  %16 = urem i64 %8, %15
  %17 = icmp eq i64 %16, 0
  %18 = sub i64 %15, %16
  %19 = select i1 %17, i64 0, i64 %18
  %20 = add i64 %14, %19
  %21 = add i64 %8, %20
  %22 = getelementptr ptr, ptr %0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr ptr, ptr %24, i32 9
  %26 = load ptr, ptr %25, align 8
  %27 = call { i64, i64 } @size_wrapper(ptr %26, ptr %23)
  %28 = extractvalue { i64, i64 } %27, 1
  %29 = urem i64 %21, %28
  %30 = icmp eq i64 %29, 0
  %31 = sub i64 %28, %29
  %32 = select i1 %30, i64 0, i64 %31
  %33 = add i64 %21, %32
  %34 = getelementptr i8, ptr %0, i64 %33
  %35 = load ptr, ptr %22, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr ptr, ptr %36, i32 8
  %38 = load ptr, ptr %37, align 8
  call void @unbox_wrapper(ptr %38, { ptr, i160 } %1, ptr %35, ptr %34)
  ret void
}

define { ptr, i160 } @Pair_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = load ptr, ptr %0, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %9, i32 9
  %11 = load ptr, ptr %10, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr %8)
  %13 = extractvalue { i64, i64 } %12, 1
  %14 = urem i64 %7, %13
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 %13, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %7, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load ptr, ptr %0, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr ptr, ptr %21, i32 7
  %23 = load ptr, ptr %22, align 8
  %24 = call { ptr, i160 } @box_wrapper(ptr %23, ptr %19, ptr %20)
  ret { ptr, i160 } %24
}

define void @Pair_setter_first(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = load ptr, ptr %0, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %10, i32 9
  %12 = load ptr, ptr %11, align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr %9)
  %14 = extractvalue { i64, i64 } %13, 1
  %15 = urem i64 %8, %14
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 %14, %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %8, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = load ptr, ptr %0, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 8
  %24 = load ptr, ptr %23, align 8
  call void @unbox_wrapper(ptr %24, { ptr, i160 } %1, ptr %21, ptr %20)
  ret void
}

define { i64, i64 } @_data_size_Iterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_data_size_Iterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_data_size_Array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @Array_field_Array_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Array_B__Self_from_iterable_iterableIterable2T(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 1
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 0, i32 2
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 0
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %5, i32 0, i32 1, i32 1
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @Iterable2, align 4
  %15 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  store i1 %15, ptr %2, align 1
  store i32 25, ptr %4, align 4
  %16 = load i32, ptr %4, align 4
  %17 = getelementptr [69 x ptr], ptr @Array, i32 0, i32 %16
  %18 = getelementptr ptr, ptr %17, i32 10
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 26, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [69 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [69 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 28, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [69 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 29, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [69 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @any_typ, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @any_typ to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 30, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [69 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_grow_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 31, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [69 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 32, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [69 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 33, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [69 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_unsafe_index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 34, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [69 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 35, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [69 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 36, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [69 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 37, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [69 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Array_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 38, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [69 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 39, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [69 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 40, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [69 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 41, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [69 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Array_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 42, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [69 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 43, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [69 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 44, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [69 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Array_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 45, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [69 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterable2T(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca { ptr, i160 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca i1, align 1
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %34, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %34, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 552, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %44, align 8
  %45 = getelementptr ptr, ptr %44, i32 1
  store ptr %43, ptr %45, align 8
  %46 = load ptr, ptr %44, align 8
  %47 = getelementptr ptr, ptr %46, i32 6
  %48 = load ptr, ptr %47, align 8
  %49 = call { i64, i64 } @size_wrapper(ptr %48, ptr %44)
  %50 = extractvalue { i64, i64 } %49, 0
  %51 = call ptr @bump_malloc(i64 %50)
  store ptr %43, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 8, ptr %51)
  %53 = alloca i32, align 4
  %54 = alloca ptr, align 8
  %55 = alloca ptr, align 8
  %56 = alloca ptr, align 8
  store ptr @Array, ptr %56, align 8
  store ptr %51, ptr %55, align 8
  store i32 10, ptr %53, align 4
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = load ptr, ptr %55, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 1
  %61 = load ptr, ptr %54, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 2
  %63 = load i32, ptr %53, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %63, 3
  %65 = alloca [0 x ptr], align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr %65)
  %67 = call ptr @llvm.invariant.start.p0(i64 552, ptr %57)
  %68 = getelementptr ptr, ptr %57, i32 %63
  %69 = getelementptr ptr, ptr %68, i32 5
  %70 = load ptr, ptr %69, align 8
  %71 = alloca {}, align 8
  %72 = call ptr @behavior_wrapper(ptr %70, { ptr, ptr, ptr, i32 } %64, ptr %71)
  call void %72({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %65) #15
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %56, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %77 = load ptr, ptr %55, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %79 = load ptr, ptr %54, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %81 = load i32, ptr %53, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %73, ptr @Array)
  %82 = alloca i32, align 4
  %83 = alloca ptr, align 8
  %84 = alloca ptr, align 8
  %85 = alloca ptr, align 8
  %86 = load ptr, ptr %74, align 8
  store ptr %86, ptr %85, align 8
  %87 = load ptr, ptr %76, align 8
  store ptr %87, ptr %84, align 8
  %88 = load ptr, ptr %78, align 8
  store ptr %88, ptr %83, align 8
  %89 = load i32, ptr %80, align 4
  store i32 %89, ptr %82, align 4
  %90 = load ptr, ptr %23, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = load ptr, ptr %26, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %92, 1
  %94 = load ptr, ptr %29, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 2
  %96 = load i32, ptr %32, align 4
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %96, 3
  %98 = alloca [0 x ptr], align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 0, ptr %98)
  %100 = call ptr @llvm.invariant.start.p0(i64 184, ptr %90)
  %101 = getelementptr ptr, ptr %90, i32 %96
  %102 = getelementptr ptr, ptr %101, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = alloca {}, align 8
  %105 = call ptr @behavior_wrapper(ptr %103, { ptr, ptr, ptr, i32 } %97, ptr %104)
  %106 = call { ptr, ptr, ptr, i32 } %105({ ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %97, ptr %98) #15
  %107 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %106, ptr %107, align 8
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 0
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %114 = load ptr, ptr %112, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 2
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %117 = load ptr, ptr %115, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 3
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %120 = load i32, ptr %118, align 4
  store i32 %120, ptr %119, align 4
  call void @set_offset(ptr %108, ptr @Iterator2)
  %121 = alloca { ptr, ptr, ptr, i32 }, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 0
  %123 = load ptr, ptr %110, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 1
  %125 = load ptr, ptr %113, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 2
  %127 = load ptr, ptr %116, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 3
  %129 = load i32, ptr %119, align 4
  store i32 %129, ptr %128, align 4
  call void @set_offset(ptr %121, ptr @Iterator2)
  %130 = alloca i32, align 4
  %131 = alloca ptr, align 8
  %132 = alloca ptr, align 8
  %133 = alloca ptr, align 8
  %134 = load ptr, ptr %122, align 8
  store ptr %134, ptr %133, align 8
  %135 = load ptr, ptr %124, align 8
  store ptr %135, ptr %132, align 8
  %136 = load ptr, ptr %126, align 8
  store ptr %136, ptr %131, align 8
  %137 = load i32, ptr %128, align 4
  store i32 %137, ptr %130, align 4
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  store ptr %138, ptr %.reg2mem5, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr %139, ptr %.reg2mem3, align 8
  br label %140

140:                                              ; preds = %._crit_edge1, %2
  %141 = load ptr, ptr %133, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = load ptr, ptr %132, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %143, 1
  %145 = load ptr, ptr %131, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %145, 2
  %147 = load i32, ptr %130, align 4
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, i32 %147, 3
  %149 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %150 = call ptr @llvm.invariant.start.p0(i64 24, ptr %141)
  %151 = getelementptr ptr, ptr %141, i32 %147
  %152 = getelementptr ptr, ptr %151, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = call ptr @behavior_wrapper(ptr %153, { ptr, ptr, ptr, i32 } %148, ptr %4)
  %155 = call { ptr, i160 } %154({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr %3) #15
  store { ptr, i160 } %155, ptr %5, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %6, align 8
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %156 = load ptr, ptr %.reload6, align 8
  %157 = load ptr, ptr %6, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 552, ptr %157)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %159 = load i32, ptr %.reload4, align 4
  %160 = getelementptr ptr, ptr %157, i32 %159
  %161 = load ptr, ptr %160, align 8
  %162 = call ptr @typegetter_wrapper(ptr %161, ptr %156)
  %163 = load ptr, ptr %5, align 8
  %164 = ptrtoint ptr %163 to i64
  %165 = icmp eq i64 %164, ptrtoint (ptr @nil_typ to i64)
  %166 = icmp eq i64 %164, 0
  %167 = or i1 %165, %166
  %168 = icmp eq i1 %167, false
  store i1 %168, ptr %7, align 1
  %169 = load i1, ptr %7, align 1
  store i1 %169, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %170, label %._crit_edge

._crit_edge:                                      ; preds = %140
  br label %223

170:                                              ; preds = %140
  %171 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %172 = load ptr, ptr %171, align 8
  store ptr %172, ptr %9, align 8
  %173 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %174 = load i160, ptr %173, align 4
  store i160 %174, ptr %8, align 4
  %175 = load ptr, ptr %9, align 8
  store ptr %175, ptr %11, align 8
  %176 = load i160, ptr %8, align 4
  store i160 %176, ptr %10, align 4
  %177 = load ptr, ptr %11, align 8
  %178 = insertvalue { ptr, i160 } undef, ptr %177, 0
  %179 = load i160, ptr %10, align 4
  %180 = insertvalue { ptr, i160 } %178, i160 %179, 1
  %181 = load ptr, ptr %85, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = load ptr, ptr %84, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %183, 1
  %185 = load ptr, ptr %83, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %185, 2
  %187 = load i32, ptr %82, align 4
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, i32 %187, 3
  store { ptr, ptr, ptr, i32 } %1, ptr %12, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %190 = load ptr, ptr %189, align 8
  %191 = load ptr, ptr %12, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 552, ptr %191)
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %194 = load i32, ptr %193, align 4
  %195 = getelementptr ptr, ptr %191, i32 %194
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr @typegetter_wrapper(ptr %196, ptr %190)
  %198 = getelementptr [1 x ptr], ptr %13, i32 0, i32 0
  store ptr %197, ptr %198, align 8
  %199 = call ptr @llvm.invariant.start.p0(i64 1, ptr %13)
  %200 = call ptr @llvm.invariant.start.p0(i64 552, ptr %181)
  %201 = getelementptr ptr, ptr %181, i32 %187
  %202 = getelementptr ptr, ptr %201, i32 9
  %203 = load ptr, ptr %202, align 8
  %204 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  store ptr %177, ptr %204, align 8
  %205 = call ptr @behavior_wrapper(ptr %203, { ptr, ptr, ptr, i32 } %188, ptr %14)
  %206 = call { ptr, ptr, ptr, i32 } %205({ ptr, ptr, ptr, i32 } %188, { ptr, ptr, ptr, i32 } %188, ptr %13, { ptr, i160 } %180) #15
  store { ptr, ptr, ptr, i32 } %206, ptr %15, align 8
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %209 = load ptr, ptr %207, align 8
  store ptr %209, ptr %208, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %218 = load i32, ptr %216, align 4
  store i32 %218, ptr %217, align 4
  call void @set_offset(ptr %16, ptr @Array)
  %219 = load ptr, ptr %9, align 8
  store ptr %219, ptr %18, align 8
  %220 = load i160, ptr %8, align 4
  store i160 %220, ptr %17, align 4
  %221 = load ptr, ptr %18, align 8
  store ptr %221, ptr %171, align 8
  %222 = load i160, ptr %17, align 4
  store i160 %222, ptr %173, align 4
  br label %223

223:                                              ; preds = %._crit_edge, %170
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %224

._crit_edge1:                                     ; preds = %223
  br label %140

224:                                              ; preds = %223
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %226 = load ptr, ptr %85, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %228 = load ptr, ptr %84, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %230 = load ptr, ptr %83, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %232 = load i32, ptr %82, align 4
  store i32 %232, ptr %231, align 4
  call void @set_offset(ptr %19, ptr @Array)
  %233 = load ptr, ptr %225, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %233, 0
  %235 = load ptr, ptr %227, align 8
  %236 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %235, 1
  %237 = load ptr, ptr %229, align 8
  %238 = insertvalue { ptr, ptr, ptr, i32 } %236, ptr %237, 2
  %239 = load i32, ptr %231, align 4
  %240 = insertvalue { ptr, ptr, ptr, i32 } %238, i32 %239, 3
  ret { ptr, ptr, ptr, i32 } %240
}

define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = alloca i32, align 4
  store i32 1, ptr %18, align 4
  %19 = load ptr, ptr %10, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 552, ptr %20)
  %22 = load i32, ptr %16, align 4
  %23 = getelementptr ptr, ptr %20, i32 %22
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %19)
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr ptr, ptr %26, i32 9
  %28 = load ptr, ptr %27, align 8
  %29 = call { i64, i64 } @size_wrapper(ptr %28, ptr %25)
  %30 = extractvalue { i64, i64 } %29, 0
  %31 = load i32, ptr %18, align 4
  %32 = sext i32 %31 to i64
  %33 = alloca ptr, align 8
  %34 = mul i64 %32, %30
  %35 = call ptr @bump_malloc(i64 %34)
  store ptr %35, ptr %33, align 8
  %36 = load ptr, ptr %10, align 8
  %37 = load ptr, ptr %5, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 552, ptr %37)
  %39 = load i32, ptr %16, align 4
  %40 = getelementptr ptr, ptr %37, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr { ptr }, ptr %33, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr } undef, ptr %46, 0
  call void %44(ptr %36, { ptr } %47) #16
  %48 = alloca i32, align 4
  store i32 0, ptr %48, align 4
  %49 = load ptr, ptr %10, align 8
  %50 = load ptr, ptr %5, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 552, ptr %50)
  %52 = load i32, ptr %16, align 4
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = load i32, ptr %48, align 4
  call void %57(ptr %49, i32 %58) #16
  %59 = alloca i32, align 4
  store i32 1, ptr %59, align 4
  %60 = load ptr, ptr %10, align 8
  %61 = load ptr, ptr %5, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 552, ptr %61)
  %63 = load i32, ptr %16, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 3
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load i32, ptr %59, align 4
  call void %68(ptr %60, i32 %69) #16
  ret void
}

define void @Array_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 552, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 3
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %19, align 4
  call void %28(ptr %20, i32 %29) #16
  %30 = load ptr, ptr %11, align 8
  %31 = load ptr, ptr %6, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 552, ptr %31)
  %33 = load i32, ptr %17, align 4
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 3
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %30) #17
  %40 = alloca i32, align 4
  store i32 %39, ptr %40, align 4
  %41 = load ptr, ptr %11, align 8
  %42 = load ptr, ptr %6, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 552, ptr %42)
  %44 = load i32, ptr %17, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = load ptr, ptr %45, align 8
  %47 = call ptr @typegetter_wrapper(ptr %46, ptr %41)
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr ptr, ptr %48, i32 9
  %50 = load ptr, ptr %49, align 8
  %51 = call { i64, i64 } @size_wrapper(ptr %50, ptr %47)
  %52 = extractvalue { i64, i64 } %51, 0
  %53 = load i32, ptr %40, align 4
  %54 = sext i32 %53 to i64
  %55 = alloca ptr, align 8
  %56 = mul i64 %54, %52
  %57 = call ptr @bump_malloc(i64 %56)
  store ptr %57, ptr %55, align 8
  %58 = load ptr, ptr %11, align 8
  %59 = load ptr, ptr %6, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 552, ptr %59)
  %61 = load i32, ptr %17, align 4
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr } undef, ptr %68, 0
  call void %66(ptr %58, { ptr } %69) #16
  %70 = alloca i32, align 4
  store i32 0, ptr %70, align 4
  %71 = load ptr, ptr %11, align 8
  %72 = load ptr, ptr %6, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 552, ptr %72)
  %74 = load i32, ptr %17, align 4
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr }, ptr %77, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load i32, ptr %70, align 4
  call void %79(ptr %71, i32 %80) #16
  ret void
}

define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 552, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #17
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 552, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %18) #17
  %28 = alloca i32, align 4
  store i32 %27, ptr %28, align 4
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %15, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  store ptr %18, ptr %.reg2mem25, align 8
  %19 = load ptr, ptr %17, align 8
  %.reload28 = load ptr, ptr %.reg2mem25, align 8
  store ptr %19, ptr %.reload28, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  store ptr %21, ptr %.reg2mem14, align 8
  %22 = load ptr, ptr %20, align 8
  %.reload24 = load ptr, ptr %.reg2mem14, align 8
  store ptr %22, ptr %.reload24, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  store ptr %24, ptr %.reg2mem10, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload13 = load ptr, ptr %.reg2mem10, align 8
  store ptr %25, ptr %.reload13, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr %27, ptr %.reg2mem, align 8
  %28 = load i32, ptr %26, align 4
  %.reload9 = load ptr, ptr %.reg2mem, align 8
  store i32 %28, ptr %.reload9, align 4
  call void @set_offset(ptr %16, ptr @Array)
  %29 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %29, align 8
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  %32 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  store ptr %33, ptr %31, align 8
  %34 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 1
  %35 = load i160, ptr %34, align 4
  store i160 %35, ptr %30, align 4
  %.reload23 = load ptr, ptr %.reg2mem14, align 8
  %36 = load ptr, ptr %.reload23, align 8
  %37 = load ptr, ptr %16, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 552, ptr %37)
  %.reload8 = load ptr, ptr %.reg2mem, align 8
  %39 = load i32, ptr %.reload8, align 4
  %40 = getelementptr ptr, ptr %37, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = call i32 %44(ptr %36) #17
  %46 = alloca i32, align 4
  store i32 %45, ptr %46, align 4
  %.reload22 = load ptr, ptr %.reg2mem14, align 8
  %47 = load ptr, ptr %.reload22, align 8
  %48 = load ptr, ptr %16, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 552, ptr %48)
  %.reload7 = load ptr, ptr %.reg2mem, align 8
  %50 = load i32, ptr %.reload7, align 4
  %51 = getelementptr ptr, ptr %48, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 3
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = call i32 %55(ptr %47) #17
  %57 = alloca i32, align 4
  store i32 %56, ptr %57, align 4
  %58 = load i32, ptr %46, align 4
  %59 = load i32, ptr %57, align 4
  %60 = icmp sge i32 %58, %59
  %61 = alloca i1, align 1
  store i1 %60, ptr %61, align 1
  %62 = load i1, ptr %61, align 1
  br i1 %62, label %63, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %78

63:                                               ; preds = %4
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  %64 = load ptr, ptr %.reload27, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %.reload21 = load ptr, ptr %.reg2mem14, align 8
  %66 = load ptr, ptr %.reload21, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 1
  %.reload12 = load ptr, ptr %.reg2mem10, align 8
  %68 = load ptr, ptr %.reload12, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 2
  %.reload6 = load ptr, ptr %.reg2mem, align 8
  %70 = load i32, ptr %.reload6, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %73 = call ptr @llvm.invariant.start.p0(i64 552, ptr %64)
  %74 = getelementptr ptr, ptr %64, i32 %70
  %75 = getelementptr ptr, ptr %74, i32 10
  %76 = load ptr, ptr %75, align 8
  %77 = call ptr @behavior_wrapper(ptr %76, { ptr, ptr, ptr, i32 } %71, ptr %6)
  call void %77({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %5) #15
  br label %78

78:                                               ; preds = %._crit_edge, %63
  %.reload20 = load ptr, ptr %.reg2mem14, align 8
  %79 = load ptr, ptr %.reload20, align 8
  %80 = load ptr, ptr %16, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 552, ptr %80)
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  %82 = load i32, ptr %.reload5, align 4
  %83 = getelementptr ptr, ptr %80, i32 %82
  %84 = getelementptr ptr, ptr %83, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = getelementptr { ptr, ptr }, ptr %85, i32 0, i32 0
  %87 = load ptr, ptr %86, align 8
  %88 = call { ptr } %87(ptr %79) #17
  store { ptr } %88, ptr %7, align 8
  %.reload19 = load ptr, ptr %.reg2mem14, align 8
  %89 = load ptr, ptr %.reload19, align 8
  %90 = load ptr, ptr %16, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 552, ptr %90)
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %92 = load i32, ptr %.reload4, align 4
  %93 = getelementptr ptr, ptr %90, i32 %92
  %94 = getelementptr ptr, ptr %93, i32 2
  %95 = load ptr, ptr %94, align 8
  %96 = getelementptr { ptr, ptr }, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = call i32 %97(ptr %89) #17
  store i32 %98, ptr %8, align 4
  %.reload18 = load ptr, ptr %.reg2mem14, align 8
  %99 = load ptr, ptr %.reload18, align 8
  %100 = load ptr, ptr %16, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 552, ptr %100)
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %102 = load i32, ptr %.reload3, align 4
  %103 = getelementptr ptr, ptr %100, i32 %102
  %104 = load ptr, ptr %103, align 8
  %105 = call ptr @typegetter_wrapper(ptr %104, ptr %99)
  %106 = load ptr, ptr %31, align 8
  store ptr %106, ptr %10, align 8
  %107 = load i160, ptr %30, align 4
  store i160 %107, ptr %9, align 4
  %108 = load ptr, ptr %105, align 8
  %109 = getelementptr ptr, ptr %108, i32 9
  %110 = load ptr, ptr %109, align 8
  %111 = call { i64, i64 } @size_wrapper(ptr %110, ptr %105)
  %112 = extractvalue { i64, i64 } %111, 0
  %113 = load ptr, ptr %7, align 8
  %114 = load i32, ptr %8, align 4
  %115 = sext i32 %114 to i64
  %116 = mul i64 %112, %115
  %117 = getelementptr i8, ptr %113, i64 %116
  %118 = load ptr, ptr %10, align 8
  %119 = insertvalue { ptr, i160 } undef, ptr %118, 0
  %120 = load i160, ptr %9, align 4
  %121 = insertvalue { ptr, i160 } %119, i160 %120, 1
  %122 = load ptr, ptr %105, align 8
  %123 = getelementptr ptr, ptr %122, i32 8
  %124 = load ptr, ptr %123, align 8
  call void @unbox_wrapper(ptr %124, { ptr, i160 } %121, ptr %105, ptr %117)
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  %125 = load ptr, ptr %.reload17, align 8
  %126 = load ptr, ptr %16, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 552, ptr %126)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %128 = load i32, ptr %.reload2, align 4
  %129 = getelementptr ptr, ptr %126, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 2
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr, ptr }, ptr %131, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %134 = call i32 %133(ptr %125) #17
  store i32 %134, ptr %11, align 4
  store i32 1, ptr %12, align 4
  %135 = load i32, ptr %11, align 4
  %136 = load i32, ptr %12, align 4
  %137 = add i32 %135, %136
  store i32 %137, ptr %13, align 4
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %138 = load ptr, ptr %.reload16, align 8
  %139 = load ptr, ptr %16, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 552, ptr %139)
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %141 = load i32, ptr %.reload1, align 4
  %142 = getelementptr ptr, ptr %139, i32 %141
  %143 = getelementptr ptr, ptr %142, i32 2
  %144 = load ptr, ptr %143, align 8
  %145 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = load i32, ptr %13, align 4
  call void %146(ptr %138, i32 %147) #16
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %149 = load ptr, ptr %.reload26, align 8
  store ptr %149, ptr %148, align 8
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %151 = load ptr, ptr %.reload15, align 8
  store ptr %151, ptr %150, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %153 = load ptr, ptr %.reload11, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %.reload = load ptr, ptr %.reg2mem, align 8
  %155 = load i32, ptr %.reload, align 4
  store i32 %155, ptr %154, align 4
  call void @set_offset(ptr %14, ptr @Array)
  %156 = load ptr, ptr %148, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %156, 0
  %158 = load ptr, ptr %150, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %158, 1
  %160 = load ptr, ptr %152, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %160, 2
  %162 = load i32, ptr %154, align 4
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, i32 %162, 3
  ret { ptr, ptr, ptr, i32 } %163
}

define void @Array_grow_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca { ptr, i160 }, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  store ptr %18, ptr %.reg2mem24, align 8
  %19 = load ptr, ptr %17, align 8
  %.reload33 = load ptr, ptr %.reg2mem24, align 8
  store ptr %19, ptr %.reload33, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  store ptr %24, ptr %.reg2mem14, align 8
  %25 = load i32, ptr %23, align 4
  %.reload23 = load ptr, ptr %.reg2mem14, align 8
  store i32 %25, ptr %.reload23, align 4
  call void @set_offset(ptr %13, ptr @Array)
  %.reload32 = load ptr, ptr %.reg2mem24, align 8
  %26 = load ptr, ptr %.reload32, align 8
  %27 = load ptr, ptr %13, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 552, ptr %27)
  %.reload22 = load ptr, ptr %.reg2mem14, align 8
  %29 = load i32, ptr %.reload22, align 4
  %30 = getelementptr ptr, ptr %27, i32 %29
  %31 = getelementptr ptr, ptr %30, i32 3
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr { ptr, ptr }, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call i32 %34(ptr %26) #17
  %36 = alloca i32, align 4
  store i32 %35, ptr %36, align 4
  %37 = alloca i32, align 4
  store i32 2, ptr %37, align 4
  %38 = load i32, ptr %36, align 4
  %39 = load i32, ptr %37, align 4
  %40 = mul i32 %38, %39
  %41 = alloca i32, align 4
  store i32 %40, ptr %41, align 4
  %.reload31 = load ptr, ptr %.reg2mem24, align 8
  %42 = load ptr, ptr %.reload31, align 8
  %43 = load ptr, ptr %13, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 552, ptr %43)
  %.reload21 = load ptr, ptr %.reg2mem14, align 8
  %45 = load i32, ptr %.reload21, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 3
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load i32, ptr %41, align 4
  call void %50(ptr %42, i32 %51) #16
  %.reload30 = load ptr, ptr %.reg2mem24, align 8
  %52 = load ptr, ptr %.reload30, align 8
  %53 = load ptr, ptr %13, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 552, ptr %53)
  %.reload20 = load ptr, ptr %.reg2mem14, align 8
  %55 = load i32, ptr %.reload20, align 4
  %56 = getelementptr ptr, ptr %53, i32 %55
  %57 = getelementptr ptr, ptr %56, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr }, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = call { ptr } %60(ptr %52) #17
  %62 = alloca ptr, align 8
  store { ptr } %61, ptr %62, align 8
  %63 = alloca ptr, align 8
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %.reload29 = load ptr, ptr %.reg2mem24, align 8
  %65 = load ptr, ptr %.reload29, align 8
  %66 = load ptr, ptr %13, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 552, ptr %66)
  %.reload19 = load ptr, ptr %.reg2mem14, align 8
  %68 = load i32, ptr %.reload19, align 4
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 3
  %71 = load ptr, ptr %70, align 8
  %72 = getelementptr { ptr, ptr }, ptr %71, i32 0, i32 0
  %73 = load ptr, ptr %72, align 8
  %74 = call i32 %73(ptr %65) #17
  %75 = alloca i32, align 4
  store i32 %74, ptr %75, align 4
  %.reload28 = load ptr, ptr %.reg2mem24, align 8
  %76 = load ptr, ptr %.reload28, align 8
  %77 = load ptr, ptr %13, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 552, ptr %77)
  %.reload18 = load ptr, ptr %.reg2mem14, align 8
  %79 = load i32, ptr %.reload18, align 4
  %80 = getelementptr ptr, ptr %77, i32 %79
  %81 = load ptr, ptr %80, align 8
  %82 = call ptr @typegetter_wrapper(ptr %81, ptr %76)
  store ptr %82, ptr %.reg2mem3, align 8
  %.reload13 = load ptr, ptr %.reg2mem3, align 8
  %83 = load ptr, ptr %.reload13, align 8
  %84 = getelementptr ptr, ptr %83, i32 9
  %85 = load ptr, ptr %84, align 8
  %.reload12 = load ptr, ptr %.reg2mem3, align 8
  %86 = call { i64, i64 } @size_wrapper(ptr %85, ptr %.reload12)
  %87 = extractvalue { i64, i64 } %86, 0
  %88 = load i32, ptr %75, align 4
  %89 = sext i32 %88 to i64
  %90 = alloca ptr, align 8
  %91 = mul i64 %89, %87
  %92 = call ptr @bump_malloc(i64 %91)
  store ptr %92, ptr %90, align 8
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %93 = load ptr, ptr %.reload27, align 8
  %94 = load ptr, ptr %13, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 552, ptr %94)
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  %96 = load i32, ptr %.reload17, align 4
  %97 = getelementptr ptr, ptr %94, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = getelementptr { ptr }, ptr %90, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr } undef, ptr %103, 0
  call void %101(ptr %93, { ptr } %104) #16
  %105 = alloca i32, align 4
  store i32 0, ptr %105, align 4
  br label %106

106:                                              ; preds = %._crit_edge1, %3
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  %107 = load ptr, ptr %.reload26, align 8
  %108 = load ptr, ptr %13, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 552, ptr %108)
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %110 = load i32, ptr %.reload16, align 4
  %111 = getelementptr ptr, ptr %108, i32 %110
  %112 = getelementptr ptr, ptr %111, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = getelementptr { ptr, ptr }, ptr %113, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = call i32 %115(ptr %107) #17
  store i32 %116, ptr %4, align 4
  %117 = load i32, ptr %105, align 4
  %118 = load i32, ptr %4, align 4
  %119 = icmp slt i32 %117, %118
  store i1 %119, ptr %5, align 1
  %120 = load i1, ptr %5, align 1
  store i1 %120, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %121, label %._crit_edge

._crit_edge:                                      ; preds = %106
  br label %171

121:                                              ; preds = %106
  %.reload11 = load ptr, ptr %.reg2mem3, align 8
  %122 = load ptr, ptr %.reload11, align 8
  %123 = getelementptr ptr, ptr %122, i32 9
  %124 = load ptr, ptr %123, align 8
  %.reload10 = load ptr, ptr %.reg2mem3, align 8
  %125 = call { i64, i64 } @size_wrapper(ptr %124, ptr %.reload10)
  %126 = extractvalue { i64, i64 } %125, 0
  %127 = load ptr, ptr %63, align 8
  %128 = load i32, ptr %105, align 4
  %129 = sext i32 %128 to i64
  %130 = mul i64 %126, %129
  %131 = getelementptr i8, ptr %127, i64 %130
  %.reload9 = load ptr, ptr %.reg2mem3, align 8
  %132 = load ptr, ptr %.reload9, align 8
  %133 = getelementptr ptr, ptr %132, i32 7
  %134 = load ptr, ptr %133, align 8
  %.reload8 = load ptr, ptr %.reg2mem3, align 8
  %135 = call { ptr, i160 } @box_wrapper(ptr %134, ptr %131, ptr %.reload8)
  store { ptr, i160 } %135, ptr %6, align 8
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %136 = load ptr, ptr %.reload25, align 8
  %137 = load ptr, ptr %13, align 8
  %138 = call ptr @llvm.invariant.start.p0(i64 552, ptr %137)
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %139 = load i32, ptr %.reload15, align 4
  %140 = getelementptr ptr, ptr %137, i32 %139
  %141 = getelementptr ptr, ptr %140, i32 1
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, ptr }, ptr %142, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = call { ptr } %144(ptr %136) #17
  store { ptr } %145, ptr %7, align 8
  %146 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  store ptr %147, ptr %9, align 8
  %148 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 1
  %149 = load i160, ptr %148, align 4
  store i160 %149, ptr %8, align 4
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %150 = load ptr, ptr %.reload7, align 8
  %151 = getelementptr ptr, ptr %150, i32 9
  %152 = load ptr, ptr %151, align 8
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %153 = call { i64, i64 } @size_wrapper(ptr %152, ptr %.reload6)
  %154 = extractvalue { i64, i64 } %153, 0
  %155 = load ptr, ptr %7, align 8
  %156 = load i32, ptr %105, align 4
  %157 = sext i32 %156 to i64
  %158 = mul i64 %154, %157
  %159 = getelementptr i8, ptr %155, i64 %158
  %160 = load ptr, ptr %9, align 8
  %161 = insertvalue { ptr, i160 } undef, ptr %160, 0
  %162 = load i160, ptr %8, align 4
  %163 = insertvalue { ptr, i160 } %161, i160 %162, 1
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %164 = load ptr, ptr %.reload5, align 8
  %165 = getelementptr ptr, ptr %164, i32 8
  %166 = load ptr, ptr %165, align 8
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  call void @unbox_wrapper(ptr %166, { ptr, i160 } %163, ptr %.reload4, ptr %159)
  store i32 1, ptr %10, align 4
  %167 = load i32, ptr %105, align 4
  %168 = load i32, ptr %10, align 4
  %169 = add i32 %167, %168
  store i32 %169, ptr %11, align 4
  %170 = load i32, ptr %11, align 4
  store i32 %170, ptr %105, align 4
  br label %171

171:                                              ; preds = %._crit_edge, %121
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %172

._crit_edge1:                                     ; preds = %171
  br label %106

172:                                              ; preds = %171
  ret void
}

define { ptr, i160 } @Array__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca i1, align 1
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca i32, align 4
  %9 = alloca i1, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca ptr, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem19 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  store ptr %19, ptr %.reg2mem19, align 8
  %20 = load ptr, ptr %18, align 8
  %.reload21 = load ptr, ptr %.reg2mem19, align 8
  store ptr %20, ptr %.reload21, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  store ptr %22, ptr %.reg2mem11, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload18 = load ptr, ptr %.reg2mem11, align 8
  store ptr %23, ptr %.reload18, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  store ptr %25, ptr %.reg2mem8, align 8
  %26 = load ptr, ptr %24, align 8
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  store ptr %26, ptr %.reload10, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr %28, ptr %.reg2mem, align 8
  %29 = load i32, ptr %27, align 4
  %.reload7 = load ptr, ptr %.reg2mem, align 8
  store i32 %29, ptr %.reload7, align 4
  call void @set_offset(ptr %17, ptr @Array)
  %30 = alloca i32, align 4
  store i32 %3, ptr %30, align 4
  %.reload17 = load ptr, ptr %.reg2mem11, align 8
  %31 = load ptr, ptr %.reload17, align 8
  %32 = load ptr, ptr %17, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 552, ptr %32)
  %.reload6 = load ptr, ptr %.reg2mem, align 8
  %34 = load i32, ptr %.reload6, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call i32 %39(ptr %31) #17
  %41 = alloca i32, align 4
  store i32 %40, ptr %41, align 4
  %42 = alloca i32, align 4
  store i32 1, ptr %42, align 4
  %43 = load i32, ptr %41, align 4
  %44 = load i32, ptr %42, align 4
  %45 = sub i32 %43, %44
  %46 = alloca i32, align 4
  store i32 %45, ptr %46, align 4
  %47 = load i32, ptr %30, align 4
  %48 = load i32, ptr %46, align 4
  %49 = icmp sgt i32 %47, %48
  %50 = alloca i1, align 1
  store i1 %49, ptr %50, align 1
  %.reload16 = load ptr, ptr %.reg2mem11, align 8
  %51 = load ptr, ptr %.reload16, align 8
  %52 = load ptr, ptr %17, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 552, ptr %52)
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  %54 = load i32, ptr %.reload5, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 2
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = call i32 %59(ptr %51) #17
  %61 = alloca i32, align 4
  store i32 %60, ptr %61, align 4
  %62 = load i32, ptr %61, align 4
  %63 = load i32, ptr %30, align 4
  %64 = add i32 %62, %63
  %65 = alloca i32, align 4
  store i32 %64, ptr %65, align 4
  %66 = alloca i32, align 4
  store i32 0, ptr %66, align 4
  %67 = load i32, ptr %65, align 4
  %68 = load i32, ptr %66, align 4
  %69 = icmp slt i32 %67, %68
  %70 = alloca i1, align 1
  store i1 %69, ptr %70, align 1
  %71 = load i1, ptr %50, align 1
  %72 = alloca i1, align 1
  store i1 %71, ptr %72, align 1
  br i1 %71, label %73, label %74

73:                                               ; preds = %4
  br label %76

74:                                               ; preds = %4
  %75 = load i1, ptr %70, align 1
  store i1 %75, ptr %72, align 1
  br label %76

76:                                               ; preds = %74, %73
  %77 = load i1, ptr %72, align 1
  store i1 %77, ptr %5, align 1
  %78 = load i1, ptr %5, align 1
  br i1 %78, label %79, label %._crit_edge

._crit_edge:                                      ; preds = %76
  br label %97

79:                                               ; preds = %76
  %80 = load i32, ptr %30, align 4
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  %81 = load ptr, ptr %.reload20, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %.reload15 = load ptr, ptr %.reg2mem11, align 8
  %83 = load ptr, ptr %.reload15, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 1
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %85 = load ptr, ptr %.reload9, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 2
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %87 = load i32, ptr %.reload4, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %87, 3
  %89 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %89, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %91 = call ptr @llvm.invariant.start.p0(i64 552, ptr %81)
  %92 = getelementptr ptr, ptr %81, i32 %87
  %93 = getelementptr ptr, ptr %92, i32 12
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %95, align 8
  %96 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %88, ptr %7)
  call void %96({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %6, i32 %80) #15
  br label %97

97:                                               ; preds = %._crit_edge, %79
  store i32 0, ptr %8, align 4
  %98 = load i32, ptr %30, align 4
  %99 = load i32, ptr %8, align 4
  %100 = icmp slt i32 %98, %99
  store i1 %100, ptr %9, align 1
  %101 = load i1, ptr %9, align 1
  br i1 %101, label %102, label %._crit_edge1

._crit_edge1:                                     ; preds = %97
  br label %117

102:                                              ; preds = %97
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %103 = load ptr, ptr %.reload14, align 8
  %104 = load ptr, ptr %17, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 552, ptr %104)
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %106 = load i32, ptr %.reload3, align 4
  %107 = getelementptr ptr, ptr %104, i32 %106
  %108 = getelementptr ptr, ptr %107, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr }, ptr %109, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = call i32 %111(ptr %103) #17
  store i32 %112, ptr %10, align 4
  %113 = load i32, ptr %10, align 4
  %114 = load i32, ptr %30, align 4
  %115 = add i32 %113, %114
  store i32 %115, ptr %11, align 4
  %116 = load i32, ptr %11, align 4
  store i32 %116, ptr %30, align 4
  br label %117

117:                                              ; preds = %._crit_edge1, %102
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %118 = load ptr, ptr %.reload13, align 8
  %119 = load ptr, ptr %17, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 552, ptr %119)
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %121 = load i32, ptr %.reload2, align 4
  %122 = getelementptr ptr, ptr %119, i32 %121
  %123 = getelementptr ptr, ptr %122, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = getelementptr { ptr, ptr }, ptr %124, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = call { ptr } %126(ptr %118) #17
  store { ptr } %127, ptr %12, align 8
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %128 = load ptr, ptr %.reload12, align 8
  %129 = load ptr, ptr %17, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 552, ptr %129)
  %.reload = load ptr, ptr %.reg2mem, align 8
  %131 = load i32, ptr %.reload, align 4
  %132 = getelementptr ptr, ptr %129, i32 %131
  %133 = load ptr, ptr %132, align 8
  %134 = call ptr @typegetter_wrapper(ptr %133, ptr %128)
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr ptr, ptr %135, i32 9
  %137 = load ptr, ptr %136, align 8
  %138 = call { i64, i64 } @size_wrapper(ptr %137, ptr %134)
  %139 = extractvalue { i64, i64 } %138, 0
  %140 = load ptr, ptr %12, align 8
  %141 = load i32, ptr %30, align 4
  %142 = sext i32 %141 to i64
  %143 = mul i64 %139, %142
  %144 = getelementptr i8, ptr %140, i64 %143
  %145 = load ptr, ptr %134, align 8
  %146 = getelementptr ptr, ptr %145, i32 7
  %147 = load ptr, ptr %146, align 8
  %148 = call { ptr, i160 } @box_wrapper(ptr %147, ptr %144, ptr %134)
  store { ptr, i160 } %148, ptr %13, align 8
  %149 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 0
  %150 = load ptr, ptr %149, align 8
  store ptr %150, ptr %15, align 8
  %151 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 1
  %152 = load i160, ptr %151, align 4
  store i160 %152, ptr %14, align 4
  %153 = load ptr, ptr %15, align 8
  %154 = insertvalue { ptr, i160 } undef, ptr %153, 0
  %155 = load i160, ptr %14, align 4
  %156 = insertvalue { ptr, i160 } %154, i160 %155, 1
  ret { ptr, i160 } %156
}

define void @Array_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 552, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20) #17
  %30 = alloca i32, align 4
  store i32 %29, ptr %30, align 4
  %31 = alloca [1 x ptr], align 8
  store ptr @OutOfBounds, ptr %31, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr ptr, ptr %32, i32 6
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr %31)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = call ptr @bump_malloc(i64 %36)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @OutOfBounds, ptr %38, align 8
  store ptr %37, ptr %39, align 8
  store i32 10, ptr %40, align 4
  %41 = load ptr, ptr %11, align 8
  %42 = load ptr, ptr %6, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 552, ptr %42)
  %44 = load i32, ptr %17, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 2
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = call i32 %49(ptr %41) #17
  %51 = alloca i32, align 4
  store i32 %50, ptr %51, align 4
  %52 = load i32, ptr %51, align 4
  %53 = load i32, ptr %19, align 4
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = load ptr, ptr %39, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = load i32, ptr %40, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %62, 3
  %64 = alloca [2 x ptr], align 8
  %65 = getelementptr [2 x ptr], ptr %64, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %65, align 8
  %66 = getelementptr [2 x ptr], ptr %64, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 4, ptr %64)
  %68 = call ptr @llvm.invariant.start.p0(i64 232, ptr %55)
  %69 = getelementptr ptr, ptr %55, i32 %62
  %70 = getelementptr ptr, ptr %69, i32 4
  %71 = load ptr, ptr %70, align 8
  %72 = alloca { ptr, ptr }, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  store ptr @i32_typ, ptr %73, align 8
  %74 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 1
  store ptr @i32_typ, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr %71, { ptr, ptr, ptr, i32 } %63, ptr %72)
  call void %75({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr %64, i32 %52, i32 %53) #15
  %76 = alloca i32, align 4
  store i32 774, ptr %76, align 4
  %77 = alloca i32, align 4
  store i32 59, ptr %77, align 4
  %78 = load i32, ptr %77, align 4
  %79 = sext i32 %78 to i64
  %80 = alloca ptr, align 8
  %81 = mul i64 %79, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %82 = call ptr @bump_malloc(i64 %81)
  store ptr %82, ptr %80, align 8
  %83 = alloca ptr, align 8
  %84 = getelementptr { ptr }, ptr %80, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  store ptr %85, ptr %83, align 8
  %86 = alloca i32, align 4
  store i32 0, ptr %86, align 4
  %87 = load ptr, ptr %83, align 8
  %88 = load i32, ptr %86, align 4
  %89 = sext i32 %88 to i64
  %90 = mul i64 ptrtoint (ptr getelementptr ([58 x i8], ptr null, i32 1) to i64), %89
  %91 = getelementptr i8, ptr %87, i64 %90
  %92 = load <58 x i8>, ptr @gisic_CUsersPaulKOneDriveDocumentsPLPyPLtmpgjbyyomini, align 64
  store <58 x i8> %92, ptr %91, align 64
  %93 = alloca i32, align 4
  store i32 58, ptr %93, align 4
  %94 = alloca i32, align 4
  store i32 59, ptr %94, align 4
  %95 = alloca [1 x ptr], align 8
  store ptr @String, ptr %95, align 8
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr ptr, ptr %96, i32 6
  %98 = load ptr, ptr %97, align 8
  %99 = call { i64, i64 } @size_wrapper(ptr %98, ptr %95)
  %100 = extractvalue { i64, i64 } %99, 0
  %101 = call ptr @bump_malloc(i64 %100)
  %102 = alloca i32, align 4
  %103 = alloca ptr, align 8
  %104 = alloca ptr, align 8
  %105 = alloca ptr, align 8
  store ptr @String, ptr %105, align 8
  store ptr %101, ptr %104, align 8
  store i32 10, ptr %102, align 4
  %106 = alloca i32, align 4
  store i32 58, ptr %106, align 4
  %107 = alloca i32, align 4
  store i32 59, ptr %107, align 4
  %108 = load ptr, ptr %83, align 8
  %109 = insertvalue { ptr } undef, ptr %108, 0
  %110 = load i32, ptr %106, align 4
  %111 = load i32, ptr %107, align 4
  %112 = load ptr, ptr %105, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = load ptr, ptr %104, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 1
  %116 = load ptr, ptr %103, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %116, 2
  %118 = load i32, ptr %102, align 4
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %118, 3
  %120 = alloca [3 x ptr], align 8
  %121 = getelementptr [3 x ptr], ptr %120, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %121, align 8
  %122 = getelementptr [3 x ptr], ptr %120, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %122, align 8
  %123 = getelementptr [3 x ptr], ptr %120, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 9, ptr %120)
  %125 = call ptr @llvm.invariant.start.p0(i64 280, ptr %112)
  %126 = getelementptr ptr, ptr %112, i32 %118
  %127 = getelementptr ptr, ptr %126, i32 4
  %128 = load ptr, ptr %127, align 8
  %129 = alloca { ptr, ptr, ptr }, align 8
  %130 = getelementptr { ptr, ptr, ptr }, ptr %129, i32 0, i32 0
  store ptr @buffer_typ, ptr %130, align 8
  %131 = getelementptr { ptr, ptr, ptr }, ptr %129, i32 0, i32 1
  store ptr @i32_typ, ptr %131, align 8
  %132 = getelementptr { ptr, ptr, ptr }, ptr %129, i32 0, i32 2
  store ptr @i32_typ, ptr %132, align 8
  %133 = call ptr @behavior_wrapper(ptr %128, { ptr, ptr, ptr, i32 } %119, ptr %129)
  call void %133({ ptr, ptr, ptr, i32 } %119, { ptr, ptr, ptr, i32 } %119, ptr %120, { ptr } %109, i32 %110, i32 %111) #15
  %134 = load i32, ptr %76, align 4
  %135 = alloca { ptr, ptr, ptr, i32 }, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 0
  %137 = load ptr, ptr %105, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 1
  %139 = load ptr, ptr %104, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 2
  %141 = load ptr, ptr %103, align 8
  store ptr %141, ptr %140, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 3
  %143 = load i32, ptr %102, align 4
  store i32 %143, ptr %142, align 4
  call void @set_offset(ptr %135, ptr @String)
  %144 = load ptr, ptr %136, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %144, 0
  %146 = load ptr, ptr %138, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %146, 1
  %148 = load ptr, ptr %140, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %148, 2
  %150 = load i32, ptr %142, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %150, 3
  %152 = load ptr, ptr %54, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %152, 0
  %154 = load ptr, ptr %39, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 1
  %156 = load ptr, ptr %59, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %156, 2
  %158 = load i32, ptr %40, align 4
  %159 = insertvalue { ptr, ptr, ptr, i32 } %157, i32 %158, 3
  %160 = alloca [2 x ptr], align 8
  %161 = getelementptr [2 x ptr], ptr %160, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %161, align 8
  %162 = getelementptr [2 x ptr], ptr %160, i32 0, i32 1
  store ptr @_parameterization_String, ptr %162, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 4, ptr %160)
  %164 = call ptr @llvm.invariant.start.p0(i64 232, ptr %152)
  %165 = getelementptr ptr, ptr %152, i32 %158
  %166 = getelementptr ptr, ptr %165, i32 7
  %167 = load ptr, ptr %166, align 8
  %168 = alloca { ptr, ptr }, align 8
  %169 = getelementptr { ptr, ptr }, ptr %168, i32 0, i32 0
  store ptr @i32_typ, ptr %169, align 8
  %170 = getelementptr { ptr, ptr }, ptr %168, i32 0, i32 1
  store ptr %144, ptr %170, align 8
  %171 = call ptr @behavior_wrapper(ptr %167, { ptr, ptr, ptr, i32 } %159, ptr %168)
  call void %171({ ptr, ptr, ptr, i32 } %159, { ptr, ptr, ptr, i32 } %159, ptr %160, i32 %134, { ptr, ptr, ptr, i32 } %151) #15
  %172 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, i160 } undef, ptr %173, 0
  %175 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 1
  %176 = load i160, ptr %175, align 4
  %177 = insertvalue { ptr, i160 } %174, i160 %176, 1
  %178 = call ptr @get_current_coroutine()
  %179 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %178, i32 0, i32 4
  store { ptr, i160 } %177, ptr %179, align 8
  call void @coroutine_yield(ptr %178)
  %180 = load { ptr, i160 }, ptr %179, align 8
  %181 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %180, ptr %181, align 8
  ret void
}

define { ptr, i160 } @Array_unsafe_index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 552, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr } %28(ptr %20) #17
  %30 = alloca ptr, align 8
  store { ptr } %29, ptr %30, align 8
  %31 = load ptr, ptr %11, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 552, ptr %32)
  %34 = load i32, ptr %17, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = load ptr, ptr %35, align 8
  %37 = call ptr @typegetter_wrapper(ptr %36, ptr %31)
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr ptr, ptr %38, i32 9
  %40 = load ptr, ptr %39, align 8
  %41 = call { i64, i64 } @size_wrapper(ptr %40, ptr %37)
  %42 = extractvalue { i64, i64 } %41, 0
  %43 = load ptr, ptr %30, align 8
  %44 = load i32, ptr %19, align 4
  %45 = sext i32 %44 to i64
  %46 = mul i64 %42, %45
  %47 = getelementptr i8, ptr %43, i64 %46
  %48 = load ptr, ptr %37, align 8
  %49 = getelementptr ptr, ptr %48, i32 7
  %50 = load ptr, ptr %49, align 8
  %51 = call { ptr, i160 } @box_wrapper(ptr %50, ptr %47, ptr %37)
  %52 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %51, ptr %52, align 8
  %53 = alloca i160, align 8
  %54 = alloca ptr, align 8
  %55 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  store ptr %56, ptr %54, align 8
  %57 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 1
  %58 = load i160, ptr %57, align 4
  store i160 %58, ptr %53, align 4
  %59 = load ptr, ptr %54, align 8
  %60 = insertvalue { ptr, i160 } undef, ptr %59, 0
  %61 = load i160, ptr %53, align 4
  %62 = insertvalue { ptr, i160 } %60, i160 %61, 1
  ret { ptr, i160 } %62
}

define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 552, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @typegetter_wrapper(ptr %23, ptr %18)
  %25 = alloca [2 x ptr], align 8
  store ptr @ArrayIterator, ptr %25, align 8
  %26 = getelementptr ptr, ptr %25, i32 1
  store ptr %24, ptr %26, align 8
  %27 = load ptr, ptr %25, align 8
  %28 = getelementptr ptr, ptr %27, i32 6
  %29 = load ptr, ptr %28, align 8
  %30 = call { i64, i64 } @size_wrapper(ptr %29, ptr %25)
  %31 = extractvalue { i64, i64 } %30, 0
  %32 = call ptr @bump_malloc(i64 %31)
  store ptr %24, ptr %32, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 8, ptr %32)
  %34 = alloca i32, align 4
  %35 = alloca ptr, align 8
  %36 = alloca ptr, align 8
  %37 = alloca ptr, align 8
  store ptr @ArrayIterator, ptr %37, align 8
  store ptr %32, ptr %36, align 8
  store i32 10, ptr %34, align 4
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %7, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %42 = load ptr, ptr %10, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %44 = load ptr, ptr %13, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %46 = load i32, ptr %16, align 4
  store i32 %46, ptr %45, align 4
  call void @set_offset(ptr %38, ptr @Array)
  %47 = load ptr, ptr %39, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %49 = load ptr, ptr %41, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 1
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 2
  %53 = load i32, ptr %45, align 4
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %53, 3
  %55 = load ptr, ptr %37, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = load ptr, ptr %36, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 1
  %59 = load ptr, ptr %35, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 2
  %61 = load i32, ptr %34, align 4
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %61, 3
  %63 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %64 = getelementptr [3 x ptr], ptr %63, i32 0, i32 1
  store ptr %24, ptr %64, align 8
  %65 = getelementptr [3 x ptr], ptr %63, i32 0, i32 2
  store ptr null, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  store ptr @Array, ptr %63, align 8
  %67 = alloca [1 x ptr], align 8
  %68 = getelementptr [1 x ptr], ptr %67, i32 0, i32 0
  store ptr %63, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 1, ptr %67)
  %70 = call ptr @llvm.invariant.start.p0(i64 80, ptr %55)
  %71 = getelementptr ptr, ptr %55, i32 %61
  %72 = getelementptr ptr, ptr %71, i32 3
  %73 = load ptr, ptr %72, align 8
  %74 = alloca { ptr }, align 8
  %75 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  store ptr %47, ptr %75, align 8
  %76 = call ptr @behavior_wrapper(ptr %73, { ptr, ptr, ptr, i32 } %62, ptr %74)
  call void %76({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr %67, { ptr, ptr, ptr, i32 } %54) #15
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %37, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %81 = load ptr, ptr %36, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %83 = load ptr, ptr %35, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %85 = load i32, ptr %34, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %77, ptr @Iterator2)
  %86 = load ptr, ptr %78, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %86, 0
  %88 = load ptr, ptr %80, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 1
  %90 = load ptr, ptr %82, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %90, 2
  %92 = load i32, ptr %84, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %92, 3
  ret { ptr, ptr, ptr, i32 } %93
}

define void @Iterable2_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %15, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  store ptr %21, ptr %.reg2mem7, align 8
  %22 = load ptr, ptr %20, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  store ptr %22, ptr %.reload10, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr %27, ptr %.reg2mem3, align 8
  %28 = load i32, ptr %26, align 4
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store i32 %28, ptr %.reload6, align 4
  call void @set_offset(ptr %16, ptr @Iterable2)
  %29 = alloca ptr, align 8
  store { ptr } %3, ptr %29, align 8
  %30 = load ptr, ptr %18, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %32 = load ptr, ptr %.reload9, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %24, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %36 = load i32, ptr %.reload5, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  %38 = alloca [0 x ptr], align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr %38)
  %40 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %41 = getelementptr ptr, ptr %30, i32 %36
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = alloca {}, align 8
  %45 = call ptr @behavior_wrapper(ptr %43, { ptr, ptr, ptr, i32 } %37, ptr %44)
  %46 = call { ptr, ptr, ptr, i32 } %45({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr %38) #15
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %46, ptr %47, align 8
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %60 = load i32, ptr %58, align 4
  store i32 %60, ptr %59, align 4
  call void @set_offset(ptr %48, ptr @Iterator2)
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %50, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %65 = load ptr, ptr %53, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %67 = load ptr, ptr %56, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %69 = load i32, ptr %59, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %61, ptr @Iterator2)
  %70 = alloca i32, align 4
  %71 = alloca ptr, align 8
  %72 = alloca ptr, align 8
  %73 = alloca ptr, align 8
  %74 = load ptr, ptr %62, align 8
  store ptr %74, ptr %73, align 8
  %75 = load ptr, ptr %64, align 8
  store ptr %75, ptr %72, align 8
  %76 = load ptr, ptr %66, align 8
  store ptr %76, ptr %71, align 8
  %77 = load i32, ptr %68, align 4
  store i32 %77, ptr %70, align 4
  br label %78

78:                                               ; preds = %._crit_edge1, %4
  %79 = load ptr, ptr %73, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %72, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %71, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %70, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %88 = call ptr @llvm.invariant.start.p0(i64 24, ptr %79)
  %89 = getelementptr ptr, ptr %79, i32 %85
  %90 = getelementptr ptr, ptr %89, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = call ptr @behavior_wrapper(ptr %91, { ptr, ptr, ptr, i32 } %86, ptr %6)
  %93 = call { ptr, i160 } %92({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %5) #15
  store { ptr, i160 } %93, ptr %7, align 8
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %94 = load ptr, ptr %.reload8, align 8
  %95 = load ptr, ptr %16, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 184, ptr %95)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %97 = load i32, ptr %.reload4, align 4
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = load ptr, ptr %98, align 8
  %100 = call ptr @typegetter_wrapper(ptr %99, ptr %94)
  %101 = load ptr, ptr %7, align 8
  %102 = ptrtoint ptr %101 to i64
  %103 = icmp eq i64 %102, ptrtoint (ptr @nil_typ to i64)
  %104 = icmp eq i64 %102, 0
  %105 = or i1 %103, %104
  %106 = icmp eq i1 %105, false
  store i1 %106, ptr %8, align 1
  %107 = load i1, ptr %8, align 1
  store i1 %107, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %108, label %._crit_edge

._crit_edge:                                      ; preds = %78
  br label %124

108:                                              ; preds = %78
  %109 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  store ptr %110, ptr %10, align 8
  %111 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %112 = load i160, ptr %111, align 4
  store i160 %112, ptr %9, align 4
  %113 = load ptr, ptr %10, align 8
  store ptr %113, ptr %12, align 8
  %114 = load i160, ptr %9, align 4
  store i160 %114, ptr %11, align 4
  %115 = load ptr, ptr %12, align 8
  %116 = insertvalue { ptr, i160 } undef, ptr %115, 0
  %117 = load i160, ptr %11, align 4
  %118 = insertvalue { ptr, i160 } %116, i160 %117, 1
  %119 = load ptr, ptr %29, align 8
  call void %119({ ptr, i160 } %118)
  %120 = load ptr, ptr %10, align 8
  store ptr %120, ptr %14, align 8
  %121 = load i160, ptr %9, align 4
  store i160 %121, ptr %13, align 4
  %122 = load ptr, ptr %14, align 8
  store ptr %122, ptr %109, align 8
  %123 = load i160, ptr %13, align 4
  store i160 %123, ptr %111, align 4
  br label %124

124:                                              ; preds = %._crit_edge, %108
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %125

._crit_edge1:                                     ; preds = %124
  br label %78

125:                                              ; preds = %124
  ret void
}

define { ptr, i160 } @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr } %4) {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca { ptr, i160 }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %23, align 8
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  store ptr %29, ptr %.reg2mem7, align 8
  %30 = load ptr, ptr %28, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  store ptr %30, ptr %.reload10, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  store ptr %35, ptr %.reg2mem3, align 8
  %36 = load i32, ptr %34, align 4
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store i32 %36, ptr %.reload6, align 4
  call void @set_offset(ptr %24, ptr @Iterable2)
  %37 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %37, align 8
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %39, align 8
  %42 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %43 = load i160, ptr %42, align 4
  store i160 %43, ptr %38, align 4
  %44 = alloca ptr, align 8
  store { ptr } %4, ptr %44, align 8
  %45 = load ptr, ptr %26, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %47 = load ptr, ptr %.reload9, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 1
  %49 = load ptr, ptr %32, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 2
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %51 = load i32, ptr %.reload5, align 4
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %51, 3
  %53 = alloca [0 x ptr], align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 0, ptr %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 184, ptr %45)
  %56 = getelementptr ptr, ptr %45, i32 %51
  %57 = getelementptr ptr, ptr %56, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = alloca {}, align 8
  %60 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %52, ptr %59)
  %61 = call { ptr, ptr, ptr, i32 } %60({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr %53) #15
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %61, ptr %62, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %75 = load i32, ptr %73, align 4
  store i32 %75, ptr %74, align 4
  call void @set_offset(ptr %63, ptr @Iterator2)
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %65, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %80 = load ptr, ptr %68, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %82 = load ptr, ptr %71, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %84 = load i32, ptr %74, align 4
  store i32 %84, ptr %83, align 4
  call void @set_offset(ptr %76, ptr @Iterator2)
  %85 = alloca i32, align 4
  %86 = alloca ptr, align 8
  %87 = alloca ptr, align 8
  %88 = alloca ptr, align 8
  %89 = load ptr, ptr %77, align 8
  store ptr %89, ptr %88, align 8
  %90 = load ptr, ptr %79, align 8
  store ptr %90, ptr %87, align 8
  %91 = load ptr, ptr %81, align 8
  store ptr %91, ptr %86, align 8
  %92 = load i32, ptr %83, align 4
  store i32 %92, ptr %85, align 4
  br label %93

93:                                               ; preds = %._crit_edge1, %5
  %94 = load ptr, ptr %88, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %94, 0
  %96 = load ptr, ptr %87, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 1
  %98 = load ptr, ptr %86, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 2
  %100 = load i32, ptr %85, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %100, 3
  %102 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %103 = call ptr @llvm.invariant.start.p0(i64 24, ptr %94)
  %104 = getelementptr ptr, ptr %94, i32 %100
  %105 = getelementptr ptr, ptr %104, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %101, ptr %7)
  %108 = call { ptr, i160 } %107({ ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %101, ptr %6) #15
  store { ptr, i160 } %108, ptr %8, align 8
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %109 = load ptr, ptr %.reload8, align 8
  %110 = load ptr, ptr %24, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 184, ptr %110)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %112 = load i32, ptr %.reload4, align 4
  %113 = getelementptr ptr, ptr %110, i32 %112
  %114 = load ptr, ptr %113, align 8
  %115 = call ptr @typegetter_wrapper(ptr %114, ptr %109)
  %116 = load ptr, ptr %8, align 8
  %117 = ptrtoint ptr %116 to i64
  %118 = icmp eq i64 %117, ptrtoint (ptr @nil_typ to i64)
  %119 = icmp eq i64 %117, 0
  %120 = or i1 %118, %119
  %121 = icmp eq i1 %120, false
  store i1 %121, ptr %9, align 1
  %122 = load i1, ptr %9, align 1
  store i1 %122, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %123, label %._crit_edge

._crit_edge:                                      ; preds = %93
  br label %152

123:                                              ; preds = %93
  %124 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  store ptr %125, ptr %11, align 8
  %126 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %127 = load i160, ptr %126, align 4
  store i160 %127, ptr %10, align 4
  %128 = load ptr, ptr %39, align 8
  store ptr %128, ptr %13, align 8
  %129 = load i160, ptr %38, align 4
  store i160 %129, ptr %12, align 4
  %130 = load ptr, ptr %13, align 8
  %131 = insertvalue { ptr, i160 } undef, ptr %130, 0
  %132 = load i160, ptr %12, align 4
  %133 = insertvalue { ptr, i160 } %131, i160 %132, 1
  %134 = load ptr, ptr %11, align 8
  store ptr %134, ptr %15, align 8
  %135 = load i160, ptr %10, align 4
  store i160 %135, ptr %14, align 4
  %136 = load ptr, ptr %15, align 8
  %137 = insertvalue { ptr, i160 } undef, ptr %136, 0
  %138 = load i160, ptr %14, align 4
  %139 = insertvalue { ptr, i160 } %137, i160 %138, 1
  %140 = load ptr, ptr %44, align 8
  %141 = call { ptr, i160 } %140({ ptr, i160 } %133, { ptr, i160 } %139)
  store { ptr, i160 } %141, ptr %16, align 8
  %142 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  store ptr %143, ptr %18, align 8
  %144 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %145 = load i160, ptr %144, align 4
  store i160 %145, ptr %17, align 4
  %146 = load ptr, ptr %18, align 8
  store ptr %146, ptr %39, align 8
  %147 = load i160, ptr %17, align 4
  store i160 %147, ptr %38, align 4
  %148 = load ptr, ptr %11, align 8
  store ptr %148, ptr %20, align 8
  %149 = load i160, ptr %10, align 4
  store i160 %149, ptr %19, align 4
  %150 = load ptr, ptr %20, align 8
  store ptr %150, ptr %124, align 8
  %151 = load i160, ptr %19, align 4
  store i160 %151, ptr %126, align 4
  br label %152

152:                                              ; preds = %._crit_edge, %123
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %153

._crit_edge1:                                     ; preds = %152
  br label %93

153:                                              ; preds = %152
  %154 = load ptr, ptr %39, align 8
  store ptr %154, ptr %22, align 8
  %155 = load i160, ptr %38, align 4
  store i160 %155, ptr %21, align 4
  %156 = load ptr, ptr %22, align 8
  %157 = insertvalue { ptr, i160 } undef, ptr %156, 0
  %158 = load i160, ptr %21, align 4
  %159 = insertvalue { ptr, i160 } %157, i160 %158, 1
  ret { ptr, i160 } %159
}

define i1 @Iterable2_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i1, align 1
  %14 = alloca i1, align 1
  %15 = alloca i1, align 1
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem18 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  store ptr %22, ptr %.reg2mem14, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  store ptr %23, ptr %.reload17, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr %28, ptr %.reg2mem10, align 8
  %29 = load i32, ptr %27, align 4
  %.reload13 = load ptr, ptr %.reg2mem10, align 8
  store i32 %29, ptr %.reload13, align 4
  call void @set_offset(ptr %17, ptr @Iterable2)
  %30 = alloca ptr, align 8
  store { ptr } %3, ptr %30, align 8
  %31 = load ptr, ptr %19, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %33 = load ptr, ptr %.reload16, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %25, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %.reload12 = load ptr, ptr %.reg2mem10, align 8
  %37 = load i32, ptr %.reload12, align 4
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  %39 = alloca [0 x ptr], align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 0, ptr %39)
  %41 = call ptr @llvm.invariant.start.p0(i64 184, ptr %31)
  %42 = getelementptr ptr, ptr %31, i32 %37
  %43 = getelementptr ptr, ptr %42, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = alloca {}, align 8
  %46 = call ptr @behavior_wrapper(ptr %44, { ptr, ptr, ptr, i32 } %38, ptr %45)
  %47 = call { ptr, ptr, ptr, i32 } %46({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr %39) #15
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %47, ptr %48, align 8
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %61 = load i32, ptr %59, align 4
  store i32 %61, ptr %60, align 4
  call void @set_offset(ptr %49, ptr @Iterator2)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %64 = load ptr, ptr %51, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %66 = load ptr, ptr %54, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %68 = load ptr, ptr %57, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %70 = load i32, ptr %60, align 4
  store i32 %70, ptr %69, align 4
  call void @set_offset(ptr %62, ptr @Iterator2)
  %71 = alloca i32, align 4
  %72 = alloca ptr, align 8
  %73 = alloca ptr, align 8
  %74 = alloca ptr, align 8
  %75 = load ptr, ptr %63, align 8
  store ptr %75, ptr %74, align 8
  %76 = load ptr, ptr %65, align 8
  store ptr %76, ptr %73, align 8
  %77 = load ptr, ptr %67, align 8
  store ptr %77, ptr %72, align 8
  %78 = load i32, ptr %69, align 4
  store i32 %78, ptr %71, align 4
  br label %79

79:                                               ; preds = %130, %4
  %80 = load ptr, ptr %74, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %82 = load ptr, ptr %73, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 1
  %84 = load ptr, ptr %72, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 2
  %86 = load i32, ptr %71, align 4
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %86, 3
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %89 = call ptr @llvm.invariant.start.p0(i64 24, ptr %80)
  %90 = getelementptr ptr, ptr %80, i32 %86
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %87, ptr %6)
  %94 = call { ptr, i160 } %93({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } %87, ptr %5) #15
  store { ptr, i160 } %94, ptr %7, align 8
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %95 = load ptr, ptr %.reload15, align 8
  %96 = load ptr, ptr %17, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 184, ptr %96)
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %98 = load i32, ptr %.reload11, align 4
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = load ptr, ptr %99, align 8
  %101 = call ptr @typegetter_wrapper(ptr %100, ptr %95)
  %102 = load ptr, ptr %7, align 8
  %103 = ptrtoint ptr %102 to i64
  %104 = icmp eq i64 %103, ptrtoint (ptr @nil_typ to i64)
  %105 = icmp eq i64 %103, 0
  %106 = or i1 %104, %105
  %107 = icmp eq i1 %106, false
  store i1 %107, ptr %8, align 1
  %108 = load i1, ptr %8, align 1
  %109 = xor i1 %108, true
  store i1 %109, ptr %.reg2mem7, align 1
  %110 = select i1 %108, ptr %14, ptr %15
  store ptr %110, ptr %.reg2mem3, align 8
  br i1 %108, label %111, label %126

111:                                              ; preds = %79
  %112 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  store ptr %113, ptr %10, align 8
  %114 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %115 = load i160, ptr %114, align 4
  store i160 %115, ptr %9, align 4
  %116 = load ptr, ptr %10, align 8
  store ptr %116, ptr %12, align 8
  %117 = load i160, ptr %9, align 4
  store i160 %117, ptr %11, align 4
  %118 = load ptr, ptr %12, align 8
  %119 = insertvalue { ptr, i160 } undef, ptr %118, 0
  %120 = load i160, ptr %11, align 4
  %121 = insertvalue { ptr, i160 } %119, i160 %120, 1
  %122 = load ptr, ptr %30, align 8
  %123 = call i1 %122({ ptr, i160 } %121)
  store i1 %123, ptr %13, align 1
  %124 = load i1, ptr %13, align 1
  %125 = zext i1 %124 to i32
  store i32 %125, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem18, align 4
  br label %127

126:                                              ; preds = %79
  store i32 0, ptr %.reg2mem18, align 4
  br label %127

127:                                              ; preds = %126, %111
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  store i32 %.reload19, ptr %.reg2mem, align 4
  br label %128

128:                                              ; preds = %127
  %.reload = load i32, ptr %.reg2mem, align 4
  %129 = trunc i32 %.reload to i1
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %.reload9 = load i1, ptr %.reg2mem7, align 1
  br i1 %129, label %130, label %131

130:                                              ; preds = %128
  br label %79

131:                                              ; preds = %128
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  store i1 %.reload8, ptr %.reload5, align 1
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %132 = load i1, ptr %.reload4, align 1
  ret i1 %132
}

define i1 @Iterable2_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i1, align 1
  %14 = alloca i1, align 1
  %15 = alloca i160, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i1, align 1
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem13 = alloca i1, align 1
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem26 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem22, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload25 = load ptr, ptr %.reg2mem22, align 8
  store ptr %25, ptr %.reload25, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem18, align 8
  %31 = load i32, ptr %29, align 4
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  store i32 %31, ptr %.reload21, align 4
  call void @set_offset(ptr %19, ptr @Iterable2)
  %32 = alloca ptr, align 8
  store { ptr } %3, ptr %32, align 8
  %33 = load ptr, ptr %21, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %.reload24 = load ptr, ptr %.reg2mem22, align 8
  %35 = load ptr, ptr %.reload24, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 1
  %37 = load ptr, ptr %27, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 2
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %39 = load i32, ptr %.reload20, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %33)
  %44 = getelementptr ptr, ptr %33, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #15
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator2)
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %53, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %68 = load ptr, ptr %56, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %70 = load ptr, ptr %59, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %72 = load i32, ptr %62, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %64, ptr @Iterator2)
  %73 = alloca i32, align 4
  %74 = alloca ptr, align 8
  %75 = alloca ptr, align 8
  %76 = alloca ptr, align 8
  %77 = load ptr, ptr %65, align 8
  store ptr %77, ptr %76, align 8
  %78 = load ptr, ptr %67, align 8
  store ptr %78, ptr %75, align 8
  %79 = load ptr, ptr %69, align 8
  store ptr %79, ptr %74, align 8
  %80 = load i32, ptr %71, align 4
  store i32 %80, ptr %73, align 4
  br label %81

81:                                               ; preds = %139, %4
  %82 = load ptr, ptr %76, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %82, 0
  %84 = load ptr, ptr %75, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 1
  %86 = load ptr, ptr %74, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 2
  %88 = load i32, ptr %73, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, i32 %88, 3
  %90 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %91 = call ptr @llvm.invariant.start.p0(i64 24, ptr %82)
  %92 = getelementptr ptr, ptr %82, i32 %88
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %89, ptr %6)
  %96 = call { ptr, i160 } %95({ ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %89, ptr %5) #15
  store { ptr, i160 } %96, ptr %7, align 8
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %97 = load ptr, ptr %.reload23, align 8
  %98 = load ptr, ptr %19, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 184, ptr %98)
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %100 = load i32, ptr %.reload19, align 4
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = load ptr, ptr %101, align 8
  %103 = call ptr @typegetter_wrapper(ptr %102, ptr %97)
  %104 = load ptr, ptr %7, align 8
  %105 = ptrtoint ptr %104 to i64
  %106 = icmp eq i64 %105, ptrtoint (ptr @nil_typ to i64)
  %107 = icmp eq i64 %105, 0
  %108 = or i1 %106, %107
  %109 = icmp eq i1 %108, false
  store i1 %109, ptr %8, align 1
  %110 = load i1, ptr %8, align 1
  store i1 %110, ptr %.reg2mem13, align 1
  %.reload17 = load i1, ptr %.reg2mem13, align 1
  %111 = select i1 %.reload17, ptr %14, ptr %17
  store ptr %111, ptr %.reg2mem9, align 8
  %.reload16 = load i1, ptr %.reg2mem13, align 1
  br i1 %.reload16, label %112, label %135

112:                                              ; preds = %81
  %113 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  store ptr %113, ptr %.reg2mem6, align 8
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %114 = load ptr, ptr %.reload8, align 8
  store ptr %114, ptr %10, align 8
  %115 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  store ptr %115, ptr %.reg2mem3, align 8
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %116 = load i160, ptr %.reload5, align 4
  store i160 %116, ptr %9, align 4
  %117 = load ptr, ptr %10, align 8
  store ptr %117, ptr %12, align 8
  %118 = load i160, ptr %9, align 4
  store i160 %118, ptr %11, align 4
  %119 = load ptr, ptr %12, align 8
  %120 = insertvalue { ptr, i160 } undef, ptr %119, 0
  %121 = load i160, ptr %11, align 4
  %122 = insertvalue { ptr, i160 } %120, i160 %121, 1
  %123 = load ptr, ptr %32, align 8
  %124 = call i1 %123({ ptr, i160 } %122)
  store i1 %124, ptr %13, align 1
  %125 = load i1, ptr %13, align 1
  %126 = xor i1 %125, true
  %127 = zext i1 %126 to i32
  store i32 %127, ptr %.reg2mem1, align 4
  br i1 %125, label %128, label %129

128:                                              ; preds = %112
  br label %134

129:                                              ; preds = %112
  %130 = load ptr, ptr %10, align 8
  store ptr %130, ptr %16, align 8
  %131 = load i160, ptr %9, align 4
  store i160 %131, ptr %15, align 4
  %132 = load ptr, ptr %16, align 8
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  store ptr %132, ptr %.reload7, align 8
  %133 = load i160, ptr %15, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  store i160 %133, ptr %.reload4, align 4
  br label %134

134:                                              ; preds = %129, %128
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem26, align 4
  br label %136

135:                                              ; preds = %81
  store i32 0, ptr %.reg2mem26, align 4
  br label %136

136:                                              ; preds = %135, %134
  %.reload27 = load i32, ptr %.reg2mem26, align 4
  store i32 %.reload27, ptr %.reg2mem, align 4
  br label %137

137:                                              ; preds = %136
  %.reload = load i32, ptr %.reg2mem, align 4
  %138 = trunc i32 %.reload to i1
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %.reload15 = load i1, ptr %.reg2mem13, align 1
  br i1 %138, label %139, label %140

139:                                              ; preds = %137
  br label %81

140:                                              ; preds = %137
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %.reload14 = load i1, ptr %.reg2mem13, align 1
  store i1 %.reload14, ptr %.reload11, align 1
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %141 = load i1, ptr %.reload10, align 1
  ret i1 %141
}

define { ptr, ptr, ptr, i32 } @Iterable2_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable2)
  %19 = alloca ptr, align 8
  store { ptr } %3, ptr %19, align 8
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 184, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = call ptr @typegetter_wrapper(ptr %25, ptr %20)
  %27 = load ptr, ptr %2, align 8
  %28 = getelementptr [1 x ptr], ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = alloca [3 x ptr], align 8
  store ptr @MapIterable2, ptr %30, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  store ptr %26, ptr %31, align 8
  %32 = getelementptr ptr, ptr %30, i32 2
  store ptr %29, ptr %32, align 8
  %33 = load ptr, ptr %30, align 8
  %34 = getelementptr ptr, ptr %33, i32 6
  %35 = load ptr, ptr %34, align 8
  %36 = call { i64, i64 } @size_wrapper(ptr %35, ptr %30)
  %37 = extractvalue { i64, i64 } %36, 0
  %38 = call ptr @bump_malloc(i64 %37)
  store ptr %26, ptr %38, align 8
  %39 = getelementptr ptr, ptr %38, i32 1
  store ptr %29, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  store ptr @MapIterable2, ptr %44, align 8
  store ptr %38, ptr %43, align 8
  store i32 10, ptr %41, align 4
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %8, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %49 = load ptr, ptr %11, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %51 = load ptr, ptr %14, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %53 = load i32, ptr %17, align 4
  store i32 %53, ptr %52, align 4
  call void @set_offset(ptr %45, ptr @Iterable2)
  %54 = load ptr, ptr %46, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = load ptr, ptr %48, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 1
  %58 = load ptr, ptr %50, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %58, 2
  %60 = load i32, ptr %52, align 4
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %60, 3
  %62 = load ptr, ptr %19, align 8
  %63 = insertvalue { ptr } undef, ptr %62, 0
  %64 = load ptr, ptr %44, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = load ptr, ptr %43, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 1
  %68 = load ptr, ptr %42, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 2
  %70 = load i32, ptr %41, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %73 = getelementptr [3 x ptr], ptr %72, i32 0, i32 1
  store ptr %26, ptr %73, align 8
  %74 = getelementptr [3 x ptr], ptr %72, i32 0, i32 2
  store ptr null, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  store ptr @Iterable2, ptr %72, align 8
  %76 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %77 = getelementptr [4 x ptr], ptr %76, i32 0, i32 2
  store ptr %26, ptr %77, align 8
  %78 = getelementptr [4 x ptr], ptr %76, i32 0, i32 1
  store ptr %29, ptr %78, align 8
  %79 = getelementptr [4 x ptr], ptr %76, i32 0, i32 3
  store ptr null, ptr %79, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 24, ptr %76)
  store ptr @function_typ, ptr %76, align 8
  %81 = alloca [2 x ptr], align 8
  %82 = getelementptr [2 x ptr], ptr %81, i32 0, i32 0
  store ptr %72, ptr %82, align 8
  %83 = getelementptr [2 x ptr], ptr %81, i32 0, i32 1
  store ptr %76, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 4, ptr %81)
  %85 = call ptr @llvm.invariant.start.p0(i64 408, ptr %64)
  %86 = getelementptr ptr, ptr %64, i32 %70
  %87 = getelementptr ptr, ptr %86, i32 4
  %88 = load ptr, ptr %87, align 8
  %89 = alloca { ptr, ptr }, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 0
  store ptr %54, ptr %90, align 8
  %91 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  store ptr @function_typ, ptr %91, align 8
  %92 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %71, ptr %89)
  call void %92({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %81, { ptr, ptr, ptr, i32 } %61, { ptr } %63) #15
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 0
  %95 = load ptr, ptr %44, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 1
  %97 = load ptr, ptr %43, align 8
  store ptr %97, ptr %96, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 2
  %99 = load ptr, ptr %42, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 3
  %101 = load i32, ptr %41, align 4
  store i32 %101, ptr %100, align 4
  call void @set_offset(ptr %93, ptr @Iterable2)
  %102 = load ptr, ptr %94, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %102, 0
  %104 = load ptr, ptr %96, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %104, 1
  %106 = load ptr, ptr %98, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %105, ptr %106, 2
  %108 = load i32, ptr %100, align 4
  %109 = insertvalue { ptr, ptr, ptr, i32 } %107, i32 %108, 3
  ret { ptr, ptr, ptr, i32 } %109
}

define { ptr, ptr, ptr, i32 } @Iterable2_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable2)
  %19 = alloca ptr, align 8
  store { ptr } %3, ptr %19, align 8
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 184, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = call ptr @typegetter_wrapper(ptr %25, ptr %20)
  %27 = alloca [2 x ptr], align 8
  store ptr @FilterIterable2, ptr %27, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  store ptr %26, ptr %28, align 8
  %29 = load ptr, ptr %27, align 8
  %30 = getelementptr ptr, ptr %29, i32 6
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %27)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  store ptr %26, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 8, ptr %34)
  %36 = alloca i32, align 4
  %37 = alloca ptr, align 8
  %38 = alloca ptr, align 8
  %39 = alloca ptr, align 8
  store ptr @FilterIterable2, ptr %39, align 8
  store ptr %34, ptr %38, align 8
  store i32 10, ptr %36, align 4
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %8, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %44 = load ptr, ptr %11, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %46 = load ptr, ptr %14, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %48 = load i32, ptr %17, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %40, ptr @Iterable2)
  %49 = load ptr, ptr %41, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 1
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 2
  %55 = load i32, ptr %47, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %55, 3
  %57 = load ptr, ptr %19, align 8
  %58 = insertvalue { ptr } undef, ptr %57, 0
  %59 = load ptr, ptr %39, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = load ptr, ptr %38, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 1
  %63 = load ptr, ptr %37, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %63, 2
  %65 = load i32, ptr %36, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %65, 3
  %67 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %68 = getelementptr [3 x ptr], ptr %67, i32 0, i32 1
  store ptr %26, ptr %68, align 8
  %69 = getelementptr [3 x ptr], ptr %67, i32 0, i32 2
  store ptr null, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 16, ptr %67)
  store ptr @Iterable2, ptr %67, align 8
  %71 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %72 = getelementptr [4 x ptr], ptr %71, i32 0, i32 2
  store ptr %26, ptr %72, align 8
  %73 = getelementptr [4 x ptr], ptr %71, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %73, align 8
  %74 = getelementptr [4 x ptr], ptr %71, i32 0, i32 3
  store ptr null, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 24, ptr %71)
  store ptr @function_typ, ptr %71, align 8
  %76 = alloca [2 x ptr], align 8
  %77 = getelementptr [2 x ptr], ptr %76, i32 0, i32 0
  store ptr %67, ptr %77, align 8
  %78 = getelementptr [2 x ptr], ptr %76, i32 0, i32 1
  store ptr %71, ptr %78, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 4, ptr %76)
  %80 = call ptr @llvm.invariant.start.p0(i64 400, ptr %59)
  %81 = getelementptr ptr, ptr %59, i32 %65
  %82 = getelementptr ptr, ptr %81, i32 3
  %83 = load ptr, ptr %82, align 8
  %84 = alloca { ptr, ptr }, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 0
  store ptr %49, ptr %85, align 8
  %86 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 1
  store ptr @function_typ, ptr %86, align 8
  %87 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %66, ptr %84)
  call void %87({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %76, { ptr, ptr, ptr, i32 } %56, { ptr } %58) #15
  %88 = alloca { ptr, ptr, ptr, i32 }, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  %90 = load ptr, ptr %39, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  %92 = load ptr, ptr %38, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  %94 = load ptr, ptr %37, align 8
  store ptr %94, ptr %93, align 8
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  %96 = load i32, ptr %36, align 4
  store i32 %96, ptr %95, align 4
  call void @set_offset(ptr %88, ptr @Iterable2)
  %97 = load ptr, ptr %89, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = load ptr, ptr %91, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %101 = load ptr, ptr %93, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %103 = load i32, ptr %95, align 4
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  ret { ptr, ptr, ptr, i32 } %104
}

define { ptr, ptr, ptr, i32 } @Iterable2_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable2)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable2)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca [2 x ptr], align 8
  store ptr @ChainIterable2, ptr %40, align 8
  %41 = getelementptr ptr, ptr %40, i32 1
  store ptr %39, ptr %41, align 8
  %42 = load ptr, ptr %40, align 8
  %43 = getelementptr ptr, ptr %42, i32 6
  %44 = load ptr, ptr %43, align 8
  %45 = call { i64, i64 } @size_wrapper(ptr %44, ptr %40)
  %46 = extractvalue { i64, i64 } %45, 0
  %47 = call ptr @bump_malloc(i64 %46)
  store ptr %39, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 8, ptr %47)
  %49 = alloca i32, align 4
  %50 = alloca ptr, align 8
  %51 = alloca ptr, align 8
  %52 = alloca ptr, align 8
  store ptr @ChainIterable2, ptr %52, align 8
  store ptr %47, ptr %51, align 8
  store i32 10, ptr %49, align 4
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %55 = load ptr, ptr %8, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %57 = load ptr, ptr %11, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %59 = load ptr, ptr %14, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %61 = load i32, ptr %17, align 4
  store i32 %61, ptr %60, align 4
  call void @set_offset(ptr %53, ptr @Iterable2)
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %60, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %22, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %74 = load ptr, ptr %25, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %76 = load ptr, ptr %28, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %78 = load i32, ptr %31, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %70, ptr @Iterable2)
  %79 = load ptr, ptr %71, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %73, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %75, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %77, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = load ptr, ptr %52, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %51, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %50, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %49, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %96 = getelementptr [3 x ptr], ptr %95, i32 0, i32 1
  store ptr %39, ptr %96, align 8
  %97 = getelementptr [3 x ptr], ptr %95, i32 0, i32 2
  store ptr null, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  store ptr @Iterable2, ptr %95, align 8
  %99 = alloca [2 x ptr], align 8
  %100 = getelementptr [2 x ptr], ptr %99, i32 0, i32 0
  store ptr %95, ptr %100, align 8
  %101 = getelementptr [2 x ptr], ptr %99, i32 0, i32 1
  store ptr %95, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 4, ptr %99)
  %103 = call ptr @llvm.invariant.start.p0(i64 400, ptr %87)
  %104 = getelementptr ptr, ptr %87, i32 %93
  %105 = getelementptr ptr, ptr %104, i32 3
  %106 = load ptr, ptr %105, align 8
  %107 = alloca { ptr, ptr }, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  store ptr %62, ptr %108, align 8
  %109 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  store ptr %79, ptr %109, align 8
  %110 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %94, ptr %107)
  call void %110({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %99, { ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %86) #15
  %111 = alloca { ptr, ptr, ptr, i32 }, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %52, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 1
  %115 = load ptr, ptr %51, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 2
  %117 = load ptr, ptr %50, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 3
  %119 = load i32, ptr %49, align 4
  store i32 %119, ptr %118, align 4
  call void @set_offset(ptr %111, ptr @Iterable2)
  %120 = load ptr, ptr %112, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = load ptr, ptr %114, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %122, 1
  %124 = load ptr, ptr %116, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 2
  %126 = load i32, ptr %118, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %126, 3
  ret { ptr, ptr, ptr, i32 } %127
}

define { ptr, ptr, ptr, i32 } @Iterable2_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable2)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable2)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterable2, ptr %40, align 8
  %41 = getelementptr ptr, ptr %40, i32 1
  store ptr %39, ptr %41, align 8
  %42 = load ptr, ptr %40, align 8
  %43 = getelementptr ptr, ptr %42, i32 6
  %44 = load ptr, ptr %43, align 8
  %45 = call { i64, i64 } @size_wrapper(ptr %44, ptr %40)
  %46 = extractvalue { i64, i64 } %45, 0
  %47 = call ptr @bump_malloc(i64 %46)
  store ptr %39, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 8, ptr %47)
  %49 = alloca i32, align 4
  %50 = alloca ptr, align 8
  %51 = alloca ptr, align 8
  %52 = alloca ptr, align 8
  store ptr @InterleaveIterable2, ptr %52, align 8
  store ptr %47, ptr %51, align 8
  store i32 10, ptr %49, align 4
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %55 = load ptr, ptr %8, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %57 = load ptr, ptr %11, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %59 = load ptr, ptr %14, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %61 = load i32, ptr %17, align 4
  store i32 %61, ptr %60, align 4
  call void @set_offset(ptr %53, ptr @Iterable2)
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %60, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %22, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %74 = load ptr, ptr %25, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %76 = load ptr, ptr %28, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %78 = load i32, ptr %31, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %70, ptr @Iterable2)
  %79 = load ptr, ptr %71, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %73, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %75, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %77, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = load ptr, ptr %52, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %51, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %50, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %49, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %96 = getelementptr [3 x ptr], ptr %95, i32 0, i32 1
  store ptr %39, ptr %96, align 8
  %97 = getelementptr [3 x ptr], ptr %95, i32 0, i32 2
  store ptr null, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  store ptr @Iterable2, ptr %95, align 8
  %99 = alloca [2 x ptr], align 8
  %100 = getelementptr [2 x ptr], ptr %99, i32 0, i32 0
  store ptr %95, ptr %100, align 8
  %101 = getelementptr [2 x ptr], ptr %99, i32 0, i32 1
  store ptr %95, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 4, ptr %99)
  %103 = call ptr @llvm.invariant.start.p0(i64 400, ptr %87)
  %104 = getelementptr ptr, ptr %87, i32 %93
  %105 = getelementptr ptr, ptr %104, i32 3
  %106 = load ptr, ptr %105, align 8
  %107 = alloca { ptr, ptr }, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  store ptr %62, ptr %108, align 8
  %109 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  store ptr %79, ptr %109, align 8
  %110 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %94, ptr %107)
  call void %110({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %99, { ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %86) #15
  %111 = alloca { ptr, ptr, ptr, i32 }, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %52, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 1
  %115 = load ptr, ptr %51, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 2
  %117 = load ptr, ptr %50, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 3
  %119 = load i32, ptr %49, align 4
  store i32 %119, ptr %118, align 4
  call void @set_offset(ptr %111, ptr @Iterable2)
  %120 = load ptr, ptr %112, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = load ptr, ptr %114, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %122, 1
  %124 = load ptr, ptr %116, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 2
  %126 = load i32, ptr %118, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %126, 3
  ret { ptr, ptr, ptr, i32 } %127
}

define { ptr, ptr, ptr, i32 } @Iterable2_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable2)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable2)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %40, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %40, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 184, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = call ptr @typegetter_wrapper(ptr %48, ptr %42)
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %50, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %50, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 184, ptr %53)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = getelementptr ptr, ptr %53, i32 %56
  %58 = load ptr, ptr %57, align 8
  %59 = call ptr @typegetter_wrapper(ptr %58, ptr %52)
  %60 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %61 = getelementptr [4 x ptr], ptr %60, i32 0, i32 2
  store ptr %59, ptr %61, align 8
  %62 = getelementptr [4 x ptr], ptr %60, i32 0, i32 1
  store ptr %39, ptr %62, align 8
  %63 = getelementptr [4 x ptr], ptr %60, i32 0, i32 3
  store ptr null, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %60)
  store ptr @Pair, ptr %60, align 8
  %65 = alloca [4 x ptr], align 8
  store ptr @ZipIterable2, ptr %65, align 8
  %66 = getelementptr ptr, ptr %65, i32 1
  store ptr %39, ptr %66, align 8
  %67 = getelementptr ptr, ptr %65, i32 2
  store ptr %49, ptr %67, align 8
  %68 = getelementptr ptr, ptr %65, i32 3
  store ptr %60, ptr %68, align 8
  %69 = load ptr, ptr %65, align 8
  %70 = getelementptr ptr, ptr %69, i32 6
  %71 = load ptr, ptr %70, align 8
  %72 = call { i64, i64 } @size_wrapper(ptr %71, ptr %65)
  %73 = extractvalue { i64, i64 } %72, 0
  %74 = call ptr @bump_malloc(i64 %73)
  store ptr %39, ptr %74, align 8
  %75 = getelementptr ptr, ptr %74, i32 1
  store ptr %49, ptr %75, align 8
  %76 = getelementptr ptr, ptr %74, i32 2
  store ptr %60, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %78 = alloca i32, align 4
  %79 = alloca ptr, align 8
  %80 = alloca ptr, align 8
  %81 = alloca ptr, align 8
  store ptr @ZipIterable2, ptr %81, align 8
  store ptr %74, ptr %80, align 8
  store i32 10, ptr %78, align 4
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %8, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %86 = load ptr, ptr %11, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %88 = load ptr, ptr %14, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %90 = load i32, ptr %17, align 4
  store i32 %90, ptr %89, align 4
  call void @set_offset(ptr %82, ptr @Iterable2)
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %85, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %87, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %89, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  %99 = alloca { ptr, ptr, ptr, i32 }, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %22, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %103 = load ptr, ptr %25, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %105 = load ptr, ptr %28, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %107 = load i32, ptr %31, align 4
  store i32 %107, ptr %106, align 4
  call void @set_offset(ptr %99, ptr @Iterable2)
  %108 = load ptr, ptr %100, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %102, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %104, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %106, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = load ptr, ptr %81, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = load ptr, ptr %80, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %118, 1
  %120 = load ptr, ptr %79, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %120, 2
  %122 = load i32, ptr %78, align 4
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 %122, 3
  %124 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %125 = getelementptr [3 x ptr], ptr %124, i32 0, i32 1
  store ptr %39, ptr %125, align 8
  %126 = getelementptr [3 x ptr], ptr %124, i32 0, i32 2
  store ptr null, ptr %126, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 16, ptr %124)
  store ptr @Iterable2, ptr %124, align 8
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %128, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = load ptr, ptr %128, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 184, ptr %131)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = getelementptr ptr, ptr %131, i32 %134
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @typegetter_wrapper(ptr %136, ptr %130)
  %138 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %139 = getelementptr [3 x ptr], ptr %138, i32 0, i32 1
  store ptr %137, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %138, i32 0, i32 2
  store ptr null, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %138)
  store ptr @Iterable2, ptr %138, align 8
  %142 = alloca [2 x ptr], align 8
  %143 = getelementptr [2 x ptr], ptr %142, i32 0, i32 0
  store ptr %124, ptr %143, align 8
  %144 = getelementptr [2 x ptr], ptr %142, i32 0, i32 1
  store ptr %138, ptr %144, align 8
  %145 = call ptr @llvm.invariant.start.p0(i64 4, ptr %142)
  %146 = call ptr @llvm.invariant.start.p0(i64 416, ptr %116)
  %147 = getelementptr ptr, ptr %116, i32 %122
  %148 = getelementptr ptr, ptr %147, i32 5
  %149 = load ptr, ptr %148, align 8
  %150 = alloca { ptr, ptr }, align 8
  %151 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 0
  store ptr %91, ptr %151, align 8
  %152 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 1
  store ptr %108, ptr %152, align 8
  %153 = call ptr @behavior_wrapper(ptr %149, { ptr, ptr, ptr, i32 } %123, ptr %150)
  call void %153({ ptr, ptr, ptr, i32 } %123, { ptr, ptr, ptr, i32 } %123, ptr %142, { ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %115) #15
  %154 = alloca { ptr, ptr, ptr, i32 }, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  %156 = load ptr, ptr %81, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  %158 = load ptr, ptr %80, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  %160 = load ptr, ptr %79, align 8
  store ptr %160, ptr %159, align 8
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  %162 = load i32, ptr %78, align 4
  store i32 %162, ptr %161, align 4
  call void @set_offset(ptr %154, ptr @ZipIterable2)
  %163 = load ptr, ptr %155, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %163, 0
  %165 = load ptr, ptr %157, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %165, 1
  %167 = load ptr, ptr %159, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %167, 2
  %169 = load i32, ptr %161, align 4
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, i32 %169, 3
  ret { ptr, ptr, ptr, i32 } %170
}

define { ptr, ptr, ptr, i32 } @Iterable2_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Iterable2)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Iterable2)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %33)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %40, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %40, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 184, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = call ptr @typegetter_wrapper(ptr %48, ptr %42)
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %50, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %50, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 184, ptr %53)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = getelementptr ptr, ptr %53, i32 %56
  %58 = load ptr, ptr %57, align 8
  %59 = call ptr @typegetter_wrapper(ptr %58, ptr %52)
  %60 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %61 = getelementptr [4 x ptr], ptr %60, i32 0, i32 2
  store ptr %59, ptr %61, align 8
  %62 = getelementptr [4 x ptr], ptr %60, i32 0, i32 1
  store ptr %39, ptr %62, align 8
  %63 = getelementptr [4 x ptr], ptr %60, i32 0, i32 3
  store ptr null, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %60)
  store ptr @Pair, ptr %60, align 8
  %65 = alloca [4 x ptr], align 8
  store ptr @ProductIterable2, ptr %65, align 8
  %66 = getelementptr ptr, ptr %65, i32 1
  store ptr %39, ptr %66, align 8
  %67 = getelementptr ptr, ptr %65, i32 2
  store ptr %49, ptr %67, align 8
  %68 = getelementptr ptr, ptr %65, i32 3
  store ptr %60, ptr %68, align 8
  %69 = load ptr, ptr %65, align 8
  %70 = getelementptr ptr, ptr %69, i32 6
  %71 = load ptr, ptr %70, align 8
  %72 = call { i64, i64 } @size_wrapper(ptr %71, ptr %65)
  %73 = extractvalue { i64, i64 } %72, 0
  %74 = call ptr @bump_malloc(i64 %73)
  store ptr %39, ptr %74, align 8
  %75 = getelementptr ptr, ptr %74, i32 1
  store ptr %49, ptr %75, align 8
  %76 = getelementptr ptr, ptr %74, i32 2
  store ptr %60, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %78 = alloca i32, align 4
  %79 = alloca ptr, align 8
  %80 = alloca ptr, align 8
  %81 = alloca ptr, align 8
  store ptr @ProductIterable2, ptr %81, align 8
  store ptr %74, ptr %80, align 8
  store i32 10, ptr %78, align 4
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %8, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %86 = load ptr, ptr %11, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %88 = load ptr, ptr %14, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %90 = load i32, ptr %17, align 4
  store i32 %90, ptr %89, align 4
  call void @set_offset(ptr %82, ptr @Iterable2)
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %85, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %87, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %89, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  %99 = alloca { ptr, ptr, ptr, i32 }, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %22, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %103 = load ptr, ptr %25, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %105 = load ptr, ptr %28, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %107 = load i32, ptr %31, align 4
  store i32 %107, ptr %106, align 4
  call void @set_offset(ptr %99, ptr @Iterable2)
  %108 = load ptr, ptr %100, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %102, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %104, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %106, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = load ptr, ptr %81, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = load ptr, ptr %80, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %118, 1
  %120 = load ptr, ptr %79, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %120, 2
  %122 = load i32, ptr %78, align 4
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 %122, 3
  %124 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %125 = getelementptr [3 x ptr], ptr %124, i32 0, i32 1
  store ptr %39, ptr %125, align 8
  %126 = getelementptr [3 x ptr], ptr %124, i32 0, i32 2
  store ptr null, ptr %126, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 16, ptr %124)
  store ptr @Iterable2, ptr %124, align 8
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %128, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = load ptr, ptr %128, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 184, ptr %131)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = getelementptr ptr, ptr %131, i32 %134
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @typegetter_wrapper(ptr %136, ptr %130)
  %138 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %139 = getelementptr [3 x ptr], ptr %138, i32 0, i32 1
  store ptr %137, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %138, i32 0, i32 2
  store ptr null, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %138)
  store ptr @Iterable2, ptr %138, align 8
  %142 = alloca [2 x ptr], align 8
  %143 = getelementptr [2 x ptr], ptr %142, i32 0, i32 0
  store ptr %124, ptr %143, align 8
  %144 = getelementptr [2 x ptr], ptr %142, i32 0, i32 1
  store ptr %138, ptr %144, align 8
  %145 = call ptr @llvm.invariant.start.p0(i64 4, ptr %142)
  %146 = call ptr @llvm.invariant.start.p0(i64 416, ptr %116)
  %147 = getelementptr ptr, ptr %116, i32 %122
  %148 = getelementptr ptr, ptr %147, i32 5
  %149 = load ptr, ptr %148, align 8
  %150 = alloca { ptr, ptr }, align 8
  %151 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 0
  store ptr %91, ptr %151, align 8
  %152 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 1
  store ptr %108, ptr %152, align 8
  %153 = call ptr @behavior_wrapper(ptr %149, { ptr, ptr, ptr, i32 } %123, ptr %150)
  call void %153({ ptr, ptr, ptr, i32 } %123, { ptr, ptr, ptr, i32 } %123, ptr %142, { ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %115) #15
  %154 = alloca { ptr, ptr, ptr, i32 }, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  %156 = load ptr, ptr %81, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  %158 = load ptr, ptr %80, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  %160 = load ptr, ptr %79, align 8
  store ptr %160, ptr %159, align 8
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  %162 = load i32, ptr %78, align 4
  store i32 %162, ptr %161, align 4
  call void @set_offset(ptr %154, ptr @ProductIterable2)
  %163 = load ptr, ptr %155, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %163, 0
  %165 = load ptr, ptr %157, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %165, 1
  %167 = load ptr, ptr %159, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %167, 2
  %169 = load i32, ptr %161, align 4
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, i32 %169, 3
  ret { ptr, ptr, ptr, i32 } %170
}

define { i64, i64 } @_data_size_ProductIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ProductIterable2_field_ProductIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ProductIterable2_field_ProductIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterable2_field_ProductIterable2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable2, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable2 to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 17, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [52 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ProductIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 18, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [52 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ProductIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Pair, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Pair to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 20, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [52 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ProductIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ProductIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ProductIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ProductIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 28, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @ProductIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ProductIterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable2)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 416, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #16
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable2)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 416, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 4
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ProductIterable2)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 416, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #17
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable2)
  %29 = load ptr, ptr %10, align 8
  %30 = load ptr, ptr %5, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 416, ptr %30)
  %32 = load i32, ptr %16, align 4
  %33 = getelementptr ptr, ptr %30, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 4
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr, ptr, ptr, i32 } %37(ptr %29) #17
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %38, ptr %39, align 8
  call void @assume_offset(ptr %39, ptr @Iterable2)
  %40 = load ptr, ptr %10, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 416, ptr %41)
  %43 = load i32, ptr %16, align 4
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = load ptr, ptr %44, align 8
  %46 = call ptr @typegetter_wrapper(ptr %45, ptr %40)
  %47 = load ptr, ptr %10, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 416, ptr %48)
  %50 = load i32, ptr %16, align 4
  %51 = getelementptr ptr, ptr %48, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = call ptr @typegetter_wrapper(ptr %53, ptr %47)
  %55 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %56 = getelementptr [4 x ptr], ptr %55, i32 0, i32 2
  store ptr %54, ptr %56, align 8
  %57 = getelementptr [4 x ptr], ptr %55, i32 0, i32 1
  store ptr %46, ptr %57, align 8
  %58 = getelementptr [4 x ptr], ptr %55, i32 0, i32 3
  store ptr null, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  store ptr @Pair, ptr %55, align 8
  %60 = alloca [4 x ptr], align 8
  store ptr @ProductIterator2, ptr %60, align 8
  %61 = getelementptr ptr, ptr %60, i32 1
  store ptr %46, ptr %61, align 8
  %62 = getelementptr ptr, ptr %60, i32 2
  store ptr %54, ptr %62, align 8
  %63 = getelementptr ptr, ptr %60, i32 3
  store ptr %55, ptr %63, align 8
  %64 = load ptr, ptr %60, align 8
  %65 = getelementptr ptr, ptr %64, i32 6
  %66 = load ptr, ptr %65, align 8
  %67 = call { i64, i64 } @size_wrapper(ptr %66, ptr %60)
  %68 = extractvalue { i64, i64 } %67, 0
  %69 = call ptr @bump_malloc(i64 %68)
  store ptr %46, ptr %69, align 8
  %70 = getelementptr ptr, ptr %69, i32 1
  store ptr %54, ptr %70, align 8
  %71 = getelementptr ptr, ptr %69, i32 2
  store ptr %55, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 24, ptr %69)
  %73 = alloca i32, align 4
  %74 = alloca ptr, align 8
  %75 = alloca ptr, align 8
  %76 = alloca ptr, align 8
  store ptr @ProductIterator2, ptr %76, align 8
  store ptr %69, ptr %75, align 8
  store i32 10, ptr %73, align 4
  %77 = load ptr, ptr %10, align 8
  %78 = load ptr, ptr %5, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 416, ptr %78)
  %80 = load i32, ptr %16, align 4
  %81 = getelementptr ptr, ptr %78, i32 %80
  %82 = getelementptr ptr, ptr %81, i32 3
  %83 = load ptr, ptr %82, align 8
  %84 = getelementptr { ptr, ptr }, ptr %83, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = call { ptr, ptr, ptr, i32 } %85(ptr %77) #17
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %86, ptr %87, align 8
  call void @assume_offset(ptr %87, ptr @Iterable2)
  %88 = load ptr, ptr %10, align 8
  %89 = load ptr, ptr %5, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 416, ptr %89)
  %91 = load i32, ptr %16, align 4
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 4
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = call { ptr, ptr, ptr, i32 } %96(ptr %88) #17
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %97, ptr %98, align 8
  call void @assume_offset(ptr %98, ptr @Iterable2)
  %99 = alloca { ptr, ptr, ptr, i32 }, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %102 = load ptr, ptr %100, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %111 = load i32, ptr %109, align 4
  store i32 %111, ptr %110, align 4
  call void @set_offset(ptr %99, ptr @Iterable2)
  %112 = load ptr, ptr %101, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = load ptr, ptr %104, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 1
  %116 = load ptr, ptr %107, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %116, 2
  %118 = load i32, ptr %110, align 4
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %118, 3
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = load i32, ptr %130, align 4
  store i32 %132, ptr %131, align 4
  call void @set_offset(ptr %120, ptr @Iterable2)
  %133 = load ptr, ptr %122, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %133, 0
  %135 = load ptr, ptr %125, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %135, 1
  %137 = load ptr, ptr %128, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %136, ptr %137, 2
  %139 = load i32, ptr %131, align 4
  %140 = insertvalue { ptr, ptr, ptr, i32 } %138, i32 %139, 3
  %141 = load ptr, ptr %76, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = load ptr, ptr %75, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %143, 1
  %145 = load ptr, ptr %74, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %145, 2
  %147 = load i32, ptr %73, align 4
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, i32 %147, 3
  %149 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %150 = getelementptr [3 x ptr], ptr %149, i32 0, i32 1
  store ptr %46, ptr %150, align 8
  %151 = getelementptr [3 x ptr], ptr %149, i32 0, i32 2
  store ptr null, ptr %151, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 16, ptr %149)
  store ptr @Iterable2, ptr %149, align 8
  %153 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %154 = getelementptr [3 x ptr], ptr %153, i32 0, i32 1
  store ptr %54, ptr %154, align 8
  %155 = getelementptr [3 x ptr], ptr %153, i32 0, i32 2
  store ptr null, ptr %155, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 16, ptr %153)
  store ptr @Iterable2, ptr %153, align 8
  %157 = alloca [2 x ptr], align 8
  %158 = getelementptr [2 x ptr], ptr %157, i32 0, i32 0
  store ptr %149, ptr %158, align 8
  %159 = getelementptr [2 x ptr], ptr %157, i32 0, i32 1
  store ptr %153, ptr %159, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 4, ptr %157)
  %161 = call ptr @llvm.invariant.start.p0(i64 112, ptr %141)
  %162 = getelementptr ptr, ptr %141, i32 %147
  %163 = getelementptr ptr, ptr %162, i32 7
  %164 = load ptr, ptr %163, align 8
  %165 = alloca { ptr, ptr }, align 8
  %166 = getelementptr { ptr, ptr }, ptr %165, i32 0, i32 0
  store ptr %112, ptr %166, align 8
  %167 = getelementptr { ptr, ptr }, ptr %165, i32 0, i32 1
  store ptr %133, ptr %167, align 8
  %168 = call ptr @behavior_wrapper(ptr %164, { ptr, ptr, ptr, i32 } %148, ptr %165)
  call void %168({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr %157, { ptr, ptr, ptr, i32 } %119, { ptr, ptr, ptr, i32 } %140) #15
  %169 = alloca { ptr, ptr, ptr, i32 }, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 0
  %171 = load ptr, ptr %76, align 8
  store ptr %171, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 1
  %173 = load ptr, ptr %75, align 8
  store ptr %173, ptr %172, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 2
  %175 = load ptr, ptr %74, align 8
  store ptr %175, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 3
  %177 = load i32, ptr %73, align 4
  store i32 %177, ptr %176, align 4
  call void @set_offset(ptr %169, ptr @Iterator2)
  %178 = load ptr, ptr %170, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %178, 0
  %180 = load ptr, ptr %172, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %180, 1
  %182 = load ptr, ptr %174, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %182, 2
  %184 = load i32, ptr %176, align 4
  %185 = insertvalue { ptr, ptr, ptr, i32 } %183, i32 %184, 3
  ret { ptr, ptr, ptr, i32 } %185
}

define { i64, i64 } @_data_size_ProductIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %29
  %37 = select i1 %36, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %29
  %38 = urem i64 %35, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %41
  %43 = add i64 %35, %42
  %44 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %37
  %45 = select i1 %44, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 %37
  %46 = urem i64 %43, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %47 = icmp eq i64 %46, 0
  %48 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %46
  %49 = select i1 %47, i64 0, i64 %48
  %50 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %49
  %51 = add i64 %43, %50
  %52 = urem i64 %51, %45
  %53 = icmp eq i64 %52, 0
  %54 = sub i64 %45, %52
  %55 = select i1 %53, i64 0, i64 %54
  %56 = add i64 %51, %55
  %57 = insertvalue { i64, i64 } undef, i64 %56, 0
  %58 = insertvalue { i64, i64 } %57, i64 %45, 1
  ret { i64, i64 } %58
}

define ptr @ProductIterator2_field_ProductIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ProductIterator2_field_ProductIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterator2_field_ProductIterator2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable2, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable2 to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 9, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [14 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ProductIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 10, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [14 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ProductIterator2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %34, align 8
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @Iterable2)
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %37, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %52 = load ptr, ptr %40, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %54 = load ptr, ptr %43, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %56 = load i32, ptr %46, align 4
  store i32 %56, ptr %55, align 4
  call void @set_offset(ptr %48, ptr @Iterable2)
  %57 = load ptr, ptr %12, align 8
  %58 = load ptr, ptr %7, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 112, ptr %58)
  %60 = load i32, ptr %18, align 4
  %61 = getelementptr ptr, ptr %58, i32 %60
  %62 = getelementptr ptr, ptr %61, i32 5
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr { ptr, ptr }, ptr %63, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %49, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = load ptr, ptr %51, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 1
  %70 = load ptr, ptr %53, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 2
  %72 = load i32, ptr %55, align 4
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %72, 3
  call void %65(ptr %57, { ptr, ptr, ptr, i32 } %73) #16
  %74 = load ptr, ptr %23, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = load ptr, ptr %26, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %76, 1
  %78 = load ptr, ptr %29, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 2
  %80 = load i32, ptr %32, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, i32 %80, 3
  %82 = alloca [0 x ptr], align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 0, ptr %82)
  %84 = call ptr @llvm.invariant.start.p0(i64 184, ptr %74)
  %85 = getelementptr ptr, ptr %74, i32 %80
  %86 = getelementptr ptr, ptr %85, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = alloca {}, align 8
  %89 = call ptr @behavior_wrapper(ptr %87, { ptr, ptr, ptr, i32 } %81, ptr %88)
  %90 = call { ptr, ptr, ptr, i32 } %89({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr %82) #15
  %91 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %90, ptr %91, align 8
  %92 = alloca { ptr, ptr, ptr, i32 }, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 0
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 0
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 1
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 1
  %98 = load ptr, ptr %96, align 8
  store ptr %98, ptr %97, align 8
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 2
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 2
  %101 = load ptr, ptr %99, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 3
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 3
  %104 = load i32, ptr %102, align 4
  store i32 %104, ptr %103, align 4
  call void @set_offset(ptr %92, ptr @Iterator2)
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %107 = load ptr, ptr %94, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %109 = load ptr, ptr %97, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %111 = load ptr, ptr %100, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %113 = load i32, ptr %103, align 4
  store i32 %113, ptr %112, align 4
  call void @set_offset(ptr %105, ptr @Iterator2)
  %114 = load ptr, ptr %12, align 8
  %115 = load ptr, ptr %7, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 112, ptr %115)
  %117 = load i32, ptr %18, align 4
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 3
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 1
  %122 = load ptr, ptr %121, align 8
  %123 = load ptr, ptr %106, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = load ptr, ptr %108, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %125, 1
  %127 = load ptr, ptr %110, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %127, 2
  %129 = load i32, ptr %112, align 4
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 %129, 3
  call void %122(ptr %114, { ptr, ptr, ptr, i32 } %130) #16
  %131 = load ptr, ptr %12, align 8
  %132 = load ptr, ptr %7, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 112, ptr %132)
  %134 = load i32, ptr %18, align 4
  %135 = getelementptr ptr, ptr %132, i32 %134
  %136 = getelementptr ptr, ptr %135, i32 5
  %137 = load ptr, ptr %136, align 8
  %138 = getelementptr { ptr, ptr }, ptr %137, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  %140 = call { ptr, ptr, ptr, i32 } %139(ptr %131) #17
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %140, ptr %141, align 8
  call void @assume_offset(ptr %141, ptr @Iterable2)
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %143, 0
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %146, 1
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %149, 2
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %152 = load i32, ptr %151, align 4
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %152, 3
  %154 = alloca [0 x ptr], align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 0, ptr %154)
  %156 = call ptr @llvm.invariant.start.p0(i64 184, ptr %143)
  %157 = getelementptr ptr, ptr %143, i32 %152
  %158 = getelementptr ptr, ptr %157, i32 1
  %159 = load ptr, ptr %158, align 8
  %160 = alloca {}, align 8
  %161 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %153, ptr %160)
  %162 = call { ptr, ptr, ptr, i32 } %161({ ptr, ptr, ptr, i32 } %153, { ptr, ptr, ptr, i32 } %153, ptr %154) #15
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %162, ptr %163, align 8
  %164 = alloca { ptr, ptr, ptr, i32 }, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 0
  %167 = load ptr, ptr %165, align 8
  store ptr %167, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 1
  %170 = load ptr, ptr %168, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 2
  %173 = load ptr, ptr %171, align 8
  store ptr %173, ptr %172, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 3
  %176 = load i32, ptr %174, align 4
  store i32 %176, ptr %175, align 4
  call void @set_offset(ptr %164, ptr @Iterator2)
  %177 = alloca { ptr, ptr, ptr, i32 }, align 8
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 0
  %179 = load ptr, ptr %166, align 8
  store ptr %179, ptr %178, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 1
  %181 = load ptr, ptr %169, align 8
  store ptr %181, ptr %180, align 8
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 2
  %183 = load ptr, ptr %172, align 8
  store ptr %183, ptr %182, align 8
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 3
  %185 = load i32, ptr %175, align 4
  store i32 %185, ptr %184, align 4
  call void @set_offset(ptr %177, ptr @Iterator2)
  %186 = load ptr, ptr %12, align 8
  %187 = load ptr, ptr %7, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 112, ptr %187)
  %189 = load i32, ptr %18, align 4
  %190 = getelementptr ptr, ptr %187, i32 %189
  %191 = getelementptr ptr, ptr %190, i32 4
  %192 = load ptr, ptr %191, align 8
  %193 = getelementptr { ptr, ptr }, ptr %192, i32 0, i32 1
  %194 = load ptr, ptr %193, align 8
  %195 = load ptr, ptr %178, align 8
  %196 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %195, 0
  %197 = load ptr, ptr %180, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %196, ptr %197, 1
  %199 = load ptr, ptr %182, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %199, 2
  %201 = load i32, ptr %184, align 4
  %202 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %201, 3
  call void %194(ptr %186, { ptr, ptr, ptr, i32 } %202) #16
  %203 = load ptr, ptr %12, align 8
  %204 = load ptr, ptr %7, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 112, ptr %204)
  %206 = load i32, ptr %18, align 4
  %207 = getelementptr ptr, ptr %204, i32 %206
  %208 = getelementptr ptr, ptr %207, i32 3
  %209 = load ptr, ptr %208, align 8
  %210 = getelementptr { ptr, ptr }, ptr %209, i32 0, i32 0
  %211 = load ptr, ptr %210, align 8
  %212 = call { ptr, ptr, ptr, i32 } %211(ptr %203) #17
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %212, ptr %213, align 8
  call void @assume_offset(ptr %213, ptr @Iterator2)
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %215, 0
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 1
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %218, 1
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 2
  %221 = load ptr, ptr %220, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, ptr %221, 2
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 3
  %224 = load i32, ptr %223, align 4
  %225 = insertvalue { ptr, ptr, ptr, i32 } %222, i32 %224, 3
  %226 = alloca [0 x ptr], align 8
  %227 = call ptr @llvm.invariant.start.p0(i64 0, ptr %226)
  %228 = call ptr @llvm.invariant.start.p0(i64 24, ptr %215)
  %229 = getelementptr ptr, ptr %215, i32 %224
  %230 = getelementptr ptr, ptr %229, i32 1
  %231 = load ptr, ptr %230, align 8
  %232 = alloca {}, align 8
  %233 = call ptr @behavior_wrapper(ptr %231, { ptr, ptr, ptr, i32 } %225, ptr %232)
  %234 = call { ptr, i160 } %233({ ptr, ptr, ptr, i32 } %225, { ptr, ptr, ptr, i32 } %225, ptr %226) #15
  %235 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %234, ptr %235, align 8
  %236 = load ptr, ptr %12, align 8
  %237 = load ptr, ptr %7, align 8
  %238 = call ptr @llvm.invariant.start.p0(i64 112, ptr %237)
  %239 = load i32, ptr %18, align 4
  %240 = getelementptr ptr, ptr %237, i32 %239
  %241 = getelementptr ptr, ptr %240, i32 6
  %242 = load ptr, ptr %241, align 8
  %243 = getelementptr { ptr, ptr }, ptr %242, i32 0, i32 1
  %244 = load ptr, ptr %243, align 8
  %245 = getelementptr { ptr, i160 }, ptr %235, i32 0, i32 0
  %246 = load ptr, ptr %245, align 8
  %247 = insertvalue { ptr, i160 } undef, ptr %246, 0
  %248 = getelementptr { ptr, i160 }, ptr %235, i32 0, i32 1
  %249 = load i160, ptr %248, align 4
  %250 = insertvalue { ptr, i160 } %247, i160 %249, 1
  call void %244(ptr %236, { ptr, i160 } %250) #16
  ret void
}

define { ptr, i160 } @ProductIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [0 x ptr], align 8
  %9 = alloca {}, align 8
  %10 = alloca { ptr, i160 }, align 8
  %11 = alloca i1, align 1
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [3 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca [2 x ptr], align 8
  %21 = alloca { ptr, ptr }, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = alloca [0 x ptr], align 8
  %24 = alloca {}, align 8
  %25 = alloca { ptr, i160 }, align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca [0 x ptr], align 8
  %28 = alloca {}, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = alloca { ptr, i160 }, align 8
  %33 = alloca i160, align 8
  %34 = alloca ptr, align 8
  %35 = alloca i64, align 8
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem37 = alloca ptr, align 8
  %.reg2mem49 = alloca { ptr, i160 }, align 8
  %.reg2mem51 = alloca ptr, align 8
  %.reg2mem53 = alloca i32, align 4
  %.reg2mem55 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %36, align 8
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  store ptr %42, ptr %.reg2mem37, align 8
  %43 = load ptr, ptr %41, align 8
  %.reload48 = load ptr, ptr %.reg2mem37, align 8
  store ptr %43, ptr %.reload48, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  store ptr %48, ptr %.reg2mem25, align 8
  %49 = load i32, ptr %47, align 4
  %.reload36 = load ptr, ptr %.reg2mem25, align 8
  store i32 %49, ptr %.reload36, align 4
  call void @set_offset(ptr %37, ptr @ProductIterator2)
  %.reload47 = load ptr, ptr %.reg2mem37, align 8
  %50 = load ptr, ptr %.reload47, align 8
  %51 = load ptr, ptr %37, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 112, ptr %51)
  %.reload35 = load ptr, ptr %.reg2mem25, align 8
  %53 = load i32, ptr %.reload35, align 4
  %54 = getelementptr ptr, ptr %51, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 6
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call { ptr, i160 } %58(ptr %50) #17
  %60 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %59, ptr %60, align 8
  br label %61

61:                                               ; preds = %259, %3
  %.reload46 = load ptr, ptr %.reg2mem37, align 8
  %62 = load ptr, ptr %.reload46, align 8
  %63 = load ptr, ptr %37, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 112, ptr %63)
  %.reload34 = load ptr, ptr %.reg2mem25, align 8
  %65 = load i32, ptr %.reload34, align 4
  %66 = getelementptr ptr, ptr %63, i32 %65
  %67 = load ptr, ptr %66, align 8
  %68 = call ptr @typegetter_wrapper(ptr %67, ptr %62)
  %69 = load ptr, ptr %60, align 8
  %70 = ptrtoint ptr %69 to i64
  %71 = icmp eq i64 %70, ptrtoint (ptr @nil_typ to i64)
  %72 = icmp eq i64 %70, 0
  %73 = or i1 %71, %72
  %74 = icmp eq i1 %73, false
  store i1 %74, ptr %4, align 1
  %75 = load i1, ptr %4, align 1
  br i1 %75, label %76, label %255

76:                                               ; preds = %61
  %77 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 0
  store ptr %77, ptr %.reg2mem22, align 8
  %.reload24 = load ptr, ptr %.reg2mem22, align 8
  %78 = load ptr, ptr %.reload24, align 8
  store ptr %78, ptr %6, align 8
  %79 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 1
  store ptr %79, ptr %.reg2mem19, align 8
  %.reload21 = load ptr, ptr %.reg2mem19, align 8
  %80 = load i160, ptr %.reload21, align 4
  store i160 %80, ptr %5, align 4
  %.reload45 = load ptr, ptr %.reg2mem37, align 8
  %81 = load ptr, ptr %.reload45, align 8
  %82 = load ptr, ptr %37, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 112, ptr %82)
  %.reload33 = load ptr, ptr %.reg2mem25, align 8
  %84 = load i32, ptr %.reload33, align 4
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 4
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr { ptr, ptr }, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = call { ptr, ptr, ptr, i32 } %89(ptr %81) #17
  store { ptr, ptr, ptr, i32 } %90, ptr %7, align 8
  call void @assume_offset(ptr %7, ptr @Iterator2)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %95, 1
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 2
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %101 = load i32, ptr %100, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %101, 3
  %103 = call ptr @llvm.invariant.start.p0(i64 0, ptr %8)
  %104 = call ptr @llvm.invariant.start.p0(i64 24, ptr %92)
  %105 = getelementptr ptr, ptr %92, i32 %101
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = call ptr @behavior_wrapper(ptr %107, { ptr, ptr, ptr, i32 } %102, ptr %9)
  %109 = call { ptr, i160 } %108({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %8) #15
  store { ptr, i160 } %109, ptr %10, align 8
  %.reload44 = load ptr, ptr %.reg2mem37, align 8
  %110 = load ptr, ptr %.reload44, align 8
  %111 = load ptr, ptr %37, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 112, ptr %111)
  %.reload32 = load ptr, ptr %.reg2mem25, align 8
  %113 = load i32, ptr %.reload32, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = getelementptr ptr, ptr %114, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = call ptr @typegetter_wrapper(ptr %116, ptr %110)
  store ptr %117, ptr %.reg2mem17, align 8
  %118 = load ptr, ptr %10, align 8
  %119 = ptrtoint ptr %118 to i64
  %120 = icmp eq i64 %119, ptrtoint (ptr @nil_typ to i64)
  %121 = icmp eq i64 %119, 0
  %122 = or i1 %120, %121
  %123 = icmp eq i1 %122, false
  store i1 %123, ptr %11, align 1
  %124 = load i1, ptr %11, align 1
  %125 = zext i1 %124 to i32
  store i32 %125, ptr %.reg2mem15, align 4
  %126 = xor i1 %124, true
  %127 = zext i1 %126 to i32
  store i32 %127, ptr %.reg2mem13, align 4
  br i1 %124, label %128, label %129

128:                                              ; preds = %76
  br label %254

129:                                              ; preds = %76
  %.reload43 = load ptr, ptr %.reg2mem37, align 8
  %130 = load ptr, ptr %.reload43, align 8
  %131 = load ptr, ptr %37, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 112, ptr %131)
  %.reload31 = load ptr, ptr %.reg2mem25, align 8
  %133 = load i32, ptr %.reload31, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 3
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #17
  store { ptr, ptr, ptr, i32 } %139, ptr %22, align 8
  call void @assume_offset(ptr %22, ptr @Iterator2)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %147, 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, i32 %150, 3
  %152 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %153 = call ptr @llvm.invariant.start.p0(i64 24, ptr %141)
  %154 = getelementptr ptr, ptr %141, i32 %150
  %155 = getelementptr ptr, ptr %154, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = call ptr @behavior_wrapper(ptr %156, { ptr, ptr, ptr, i32 } %151, ptr %24)
  %158 = call { ptr, i160 } %157({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %23) #15
  store { ptr, i160 } %158, ptr %25, align 8
  %.reload42 = load ptr, ptr %.reg2mem37, align 8
  %159 = load ptr, ptr %.reload42, align 8
  %160 = load ptr, ptr %37, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 112, ptr %160)
  %.reload30 = load ptr, ptr %.reg2mem25, align 8
  %162 = load i32, ptr %.reload30, align 4
  %163 = getelementptr ptr, ptr %160, i32 %162
  %164 = getelementptr ptr, ptr %163, i32 6
  %165 = load ptr, ptr %164, align 8
  %166 = getelementptr { ptr, ptr }, ptr %165, i32 0, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = getelementptr { ptr, i160 }, ptr %25, i32 0, i32 0
  %169 = load ptr, ptr %168, align 8
  %170 = insertvalue { ptr, i160 } undef, ptr %169, 0
  %171 = getelementptr { ptr, i160 }, ptr %25, i32 0, i32 1
  %172 = load i160, ptr %171, align 4
  %173 = insertvalue { ptr, i160 } %170, i160 %172, 1
  call void %167(ptr %159, { ptr, i160 } %173) #16
  %.reload41 = load ptr, ptr %.reg2mem37, align 8
  %174 = load ptr, ptr %.reload41, align 8
  %175 = load ptr, ptr %37, align 8
  %176 = call ptr @llvm.invariant.start.p0(i64 112, ptr %175)
  %.reload29 = load ptr, ptr %.reg2mem25, align 8
  %177 = load i32, ptr %.reload29, align 4
  %178 = getelementptr ptr, ptr %175, i32 %177
  %179 = getelementptr ptr, ptr %178, i32 5
  %180 = load ptr, ptr %179, align 8
  %181 = getelementptr { ptr, ptr }, ptr %180, i32 0, i32 0
  %182 = load ptr, ptr %181, align 8
  %183 = call { ptr, ptr, ptr, i32 } %182(ptr %174) #17
  store { ptr, ptr, ptr, i32 } %183, ptr %26, align 8
  call void @assume_offset(ptr %26, ptr @Iterable2)
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %185 = load ptr, ptr %184, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %185, 0
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } %186, ptr %188, 1
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 2
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %194 = load i32, ptr %193, align 4
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, i32 %194, 3
  %196 = call ptr @llvm.invariant.start.p0(i64 0, ptr %27)
  %197 = call ptr @llvm.invariant.start.p0(i64 184, ptr %185)
  %198 = getelementptr ptr, ptr %185, i32 %194
  %199 = getelementptr ptr, ptr %198, i32 1
  %200 = load ptr, ptr %199, align 8
  %201 = call ptr @behavior_wrapper(ptr %200, { ptr, ptr, ptr, i32 } %195, ptr %28)
  %202 = call { ptr, ptr, ptr, i32 } %201({ ptr, ptr, ptr, i32 } %195, { ptr, ptr, ptr, i32 } %195, ptr %27) #15
  store { ptr, ptr, ptr, i32 } %202, ptr %29, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %205 = load ptr, ptr %203, align 8
  store ptr %205, ptr %204, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %211 = load ptr, ptr %209, align 8
  store ptr %211, ptr %210, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %214 = load i32, ptr %212, align 4
  store i32 %214, ptr %213, align 4
  call void @set_offset(ptr %30, ptr @Iterator2)
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %216 = load ptr, ptr %204, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %218 = load ptr, ptr %207, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %220 = load ptr, ptr %210, align 8
  store ptr %220, ptr %219, align 8
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %222 = load i32, ptr %213, align 4
  store i32 %222, ptr %221, align 4
  call void @set_offset(ptr %31, ptr @Iterator2)
  %.reload40 = load ptr, ptr %.reg2mem37, align 8
  %223 = load ptr, ptr %.reload40, align 8
  %224 = load ptr, ptr %37, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 112, ptr %224)
  %.reload28 = load ptr, ptr %.reg2mem25, align 8
  %226 = load i32, ptr %.reload28, align 4
  %227 = getelementptr ptr, ptr %224, i32 %226
  %228 = getelementptr ptr, ptr %227, i32 4
  %229 = load ptr, ptr %228, align 8
  %230 = getelementptr { ptr, ptr }, ptr %229, i32 0, i32 1
  %231 = load ptr, ptr %230, align 8
  %232 = load ptr, ptr %215, align 8
  %233 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %232, 0
  %234 = load ptr, ptr %217, align 8
  %235 = insertvalue { ptr, ptr, ptr, i32 } %233, ptr %234, 1
  %236 = load ptr, ptr %219, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %235, ptr %236, 2
  %238 = load i32, ptr %221, align 4
  %239 = insertvalue { ptr, ptr, ptr, i32 } %237, i32 %238, 3
  call void %231(ptr %223, { ptr, ptr, ptr, i32 } %239) #16
  %.reload39 = load ptr, ptr %.reg2mem37, align 8
  %240 = load ptr, ptr %.reload39, align 8
  %241 = load ptr, ptr %37, align 8
  %242 = call ptr @llvm.invariant.start.p0(i64 112, ptr %241)
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  %243 = load i32, ptr %.reload27, align 4
  %244 = getelementptr ptr, ptr %241, i32 %243
  %245 = getelementptr ptr, ptr %244, i32 6
  %246 = load ptr, ptr %245, align 8
  %247 = getelementptr { ptr, ptr }, ptr %246, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = call { ptr, i160 } %248(ptr %240) #17
  store { ptr, i160 } %249, ptr %32, align 8
  %250 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %251 = load ptr, ptr %250, align 8
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  store ptr %251, ptr %.reload23, align 8
  %252 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %253 = load i160, ptr %252, align 4
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  store i160 %253, ptr %.reload20, align 4
  br label %254

254:                                              ; preds = %129, %128
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  store ptr %.reload18, ptr %.reg2mem51, align 8
  store i32 %.reload14, ptr %.reg2mem53, align 4
  store i32 %.reload16, ptr %.reg2mem55, align 4
  br label %256

255:                                              ; preds = %61
  store ptr poison, ptr %.reg2mem51, align 8
  store i32 0, ptr %.reg2mem53, align 4
  store i32 2, ptr %.reg2mem55, align 4
  br label %256

256:                                              ; preds = %255, %254
  %.reload56 = load i32, ptr %.reg2mem55, align 4
  %.reload54 = load i32, ptr %.reg2mem53, align 4
  %.reload52 = load ptr, ptr %.reg2mem51, align 8
  store i32 %.reload56, ptr %.reg2mem10, align 4
  store i32 %.reload54, ptr %.reg2mem8, align 4
  store ptr %.reload52, ptr %.reg2mem3, align 8
  br label %257

257:                                              ; preds = %256
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %258 = trunc i32 %.reload9 to i1
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  %.reload12 = load i32, ptr %.reg2mem10, align 4
  br i1 %258, label %259, label %260

259:                                              ; preds = %257
  br label %61

260:                                              ; preds = %257
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  %261 = zext i32 %.reload11 to i64
  %262 = trunc i64 %261 to i32
  switch i32 %262, label %325 [
    i32 1, label %263
  ]

263:                                              ; preds = %260
  %264 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 0
  %265 = load ptr, ptr %264, align 8
  store ptr %265, ptr %13, align 8
  %266 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 1
  %267 = load i160, ptr %266, align 4
  store i160 %267, ptr %12, align 4
  %.reload38 = load ptr, ptr %.reg2mem37, align 8
  %268 = load ptr, ptr %.reload38, align 8
  %269 = load ptr, ptr %37, align 8
  %270 = call ptr @llvm.invariant.start.p0(i64 112, ptr %269)
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %271 = load i32, ptr %.reload26, align 4
  %272 = getelementptr ptr, ptr %269, i32 %271
  %273 = load ptr, ptr %272, align 8
  %274 = call ptr @typegetter_wrapper(ptr %273, ptr %268)
  store ptr @Pair, ptr %14, align 8
  %275 = getelementptr ptr, ptr %14, i32 1
  store ptr %274, ptr %275, align 8
  %276 = getelementptr ptr, ptr %14, i32 2
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store ptr %.reload6, ptr %276, align 8
  %277 = load ptr, ptr %14, align 8
  %278 = getelementptr ptr, ptr %277, i32 6
  %279 = load ptr, ptr %278, align 8
  %280 = call { i64, i64 } @size_wrapper(ptr %279, ptr %14)
  %281 = extractvalue { i64, i64 } %280, 0
  %282 = call ptr @bump_malloc(i64 %281)
  store ptr %274, ptr %282, align 8
  %283 = getelementptr ptr, ptr %282, i32 1
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  store ptr %.reload5, ptr %283, align 8
  %284 = call ptr @llvm.invariant.start.p0(i64 16, ptr %282)
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr @Pair, ptr %15, align 8
  store ptr %282, ptr %285, align 8
  store i32 10, ptr %286, align 4
  %287 = load ptr, ptr %6, align 8
  store ptr %287, ptr %17, align 8
  %288 = load i160, ptr %5, align 4
  store i160 %288, ptr %16, align 4
  %289 = load ptr, ptr %17, align 8
  %290 = insertvalue { ptr, i160 } undef, ptr %289, 0
  %291 = load i160, ptr %16, align 4
  %292 = insertvalue { ptr, i160 } %290, i160 %291, 1
  %293 = load ptr, ptr %13, align 8
  store ptr %293, ptr %19, align 8
  %294 = load i160, ptr %12, align 4
  store i160 %294, ptr %18, align 4
  %295 = load ptr, ptr %19, align 8
  %296 = insertvalue { ptr, i160 } undef, ptr %295, 0
  %297 = load i160, ptr %18, align 4
  %298 = insertvalue { ptr, i160 } %296, i160 %297, 1
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %300 = load ptr, ptr %299, align 8
  %301 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %300, 0
  %302 = load ptr, ptr %285, align 8
  %303 = insertvalue { ptr, ptr, ptr, i32 } %301, ptr %302, 1
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %305 = load ptr, ptr %304, align 8
  %306 = insertvalue { ptr, ptr, ptr, i32 } %303, ptr %305, 2
  %307 = load i32, ptr %286, align 4
  %308 = insertvalue { ptr, ptr, ptr, i32 } %306, i32 %307, 3
  %309 = getelementptr [2 x ptr], ptr %20, i32 0, i32 0
  store ptr %274, ptr %309, align 8
  %310 = getelementptr [2 x ptr], ptr %20, i32 0, i32 1
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  store ptr %.reload4, ptr %310, align 8
  %311 = call ptr @llvm.invariant.start.p0(i64 4, ptr %20)
  %312 = call ptr @llvm.invariant.start.p0(i64 80, ptr %300)
  %313 = getelementptr ptr, ptr %300, i32 %307
  %314 = getelementptr ptr, ptr %313, i32 4
  %315 = load ptr, ptr %314, align 8
  %316 = getelementptr { ptr, ptr }, ptr %21, i32 0, i32 0
  store ptr %289, ptr %316, align 8
  %317 = getelementptr { ptr, ptr }, ptr %21, i32 0, i32 1
  store ptr %295, ptr %317, align 8
  %318 = call ptr @behavior_wrapper(ptr %315, { ptr, ptr, ptr, i32 } %308, ptr %21)
  call void %318({ ptr, ptr, ptr, i32 } %308, { ptr, ptr, ptr, i32 } %308, ptr %20, { ptr, i160 } %292, { ptr, i160 } %298) #15
  %319 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 0
  %320 = load ptr, ptr %319, align 8
  %321 = insertvalue { ptr, i160 } undef, ptr %320, 0
  %322 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 1
  %323 = load i160, ptr %322, align 4
  %324 = insertvalue { ptr, i160 } %321, i160 %323, 1
  store { ptr, i160 } %324, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem49, align 8
  br label %331

325:                                              ; preds = %260
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %35, align 4
  %326 = load i64, ptr %35, align 4
  store i64 %326, ptr %34, align 4
  %327 = load ptr, ptr %34, align 8
  %328 = insertvalue { ptr, i160 } undef, ptr %327, 0
  %329 = load i160, ptr %33, align 4
  %330 = insertvalue { ptr, i160 } %328, i160 %329, 1
  store { ptr, i160 } %330, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem49, align 8
  br label %331

331:                                              ; preds = %325, %263
  %.reload50 = load { ptr, i160 }, ptr %.reg2mem49, align 8
  ret { ptr, i160 } %.reload50
}

define { ptr, i160 } @ProductIterator2_getter_current_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = getelementptr i8, ptr %0, i64 %36
  %38 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %42 = load i160, ptr %41, align 4
  %43 = insertvalue { ptr, i160 } %40, i160 %42, 1
  ret { ptr, i160 } %43
}

define void @ProductIterator2_setter_current_first(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 %32, %36
  %38 = getelementptr i8, ptr %0, i64 %37
  %39 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %39, align 8
  %40 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 0
  %41 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 0
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %44 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 1
  %45 = load i160, ptr %43, align 4
  store i160 %45, ptr %44, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %25, %29
  %31 = getelementptr i8, ptr %0, i64 %30
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  ret { ptr, ptr, ptr, i32 } %43
}

define void @ProductIterator2_setter_second_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %26, %30
  %32 = getelementptr i8, ptr %0, i64 %31
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %33, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %45 = load i32, ptr %43, align 4
  store i32 %45, ptr %44, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ProductIterator2_setter_second_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_first_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ProductIterator2_setter_first_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ProductIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ProductIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { i64, i64 } @_data_size_ZipIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ZipIterable2_field_ZipIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ZipIterable2_field_ZipIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterable2_field_ZipIterable2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable2, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable2 to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 17, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [52 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ZipIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 18, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [52 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ZipIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Pair, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Pair to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 20, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [52 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [52 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ZipIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ZipIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ZipIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ZipIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 28, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [52 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @ZipIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ZipIterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable2)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 416, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #16
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable2)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 416, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 4
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ZipIterable2)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 416, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 3
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #17
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable2)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #15
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator2)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 416, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 4
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #17
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  call void @assume_offset(ptr %74, ptr @Iterable2)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = alloca [0 x ptr], align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %87)
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %76)
  %90 = getelementptr ptr, ptr %76, i32 %85
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = alloca {}, align 8
  %94 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %86, ptr %93)
  %95 = call { ptr, ptr, ptr, i32 } %94({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %87) #15
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %95, ptr %96, align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator2)
  %110 = load ptr, ptr %10, align 8
  %111 = load ptr, ptr %5, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 416, ptr %111)
  %113 = load i32, ptr %16, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = call ptr @typegetter_wrapper(ptr %115, ptr %110)
  %117 = load ptr, ptr %10, align 8
  %118 = load ptr, ptr %5, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 416, ptr %118)
  %120 = load i32, ptr %16, align 4
  %121 = getelementptr ptr, ptr %118, i32 %120
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @typegetter_wrapper(ptr %123, ptr %117)
  %125 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %126 = getelementptr [4 x ptr], ptr %125, i32 0, i32 2
  store ptr %124, ptr %126, align 8
  %127 = getelementptr [4 x ptr], ptr %125, i32 0, i32 1
  store ptr %116, ptr %127, align 8
  %128 = getelementptr [4 x ptr], ptr %125, i32 0, i32 3
  store ptr null, ptr %128, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 24, ptr %125)
  store ptr @Pair, ptr %125, align 8
  %130 = alloca [4 x ptr], align 8
  store ptr @ZipIterator2, ptr %130, align 8
  %131 = getelementptr ptr, ptr %130, i32 1
  store ptr %116, ptr %131, align 8
  %132 = getelementptr ptr, ptr %130, i32 2
  store ptr %124, ptr %132, align 8
  %133 = getelementptr ptr, ptr %130, i32 3
  store ptr %125, ptr %133, align 8
  %134 = load ptr, ptr %130, align 8
  %135 = getelementptr ptr, ptr %134, i32 6
  %136 = load ptr, ptr %135, align 8
  %137 = call { i64, i64 } @size_wrapper(ptr %136, ptr %130)
  %138 = extractvalue { i64, i64 } %137, 0
  %139 = call ptr @bump_malloc(i64 %138)
  store ptr %116, ptr %139, align 8
  %140 = getelementptr ptr, ptr %139, i32 1
  store ptr %124, ptr %140, align 8
  %141 = getelementptr ptr, ptr %139, i32 2
  store ptr %125, ptr %141, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 24, ptr %139)
  %143 = alloca i32, align 4
  %144 = alloca ptr, align 8
  %145 = alloca ptr, align 8
  %146 = alloca ptr, align 8
  store ptr @ZipIterator2, ptr %146, align 8
  store ptr %139, ptr %145, align 8
  store i32 10, ptr %143, align 4
  %147 = load ptr, ptr %10, align 8
  %148 = load ptr, ptr %5, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 416, ptr %148)
  %150 = load i32, ptr %16, align 4
  %151 = getelementptr ptr, ptr %148, i32 %150
  %152 = getelementptr ptr, ptr %151, i32 3
  %153 = load ptr, ptr %152, align 8
  %154 = getelementptr { ptr, ptr }, ptr %153, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = call { ptr, ptr, ptr, i32 } %155(ptr %147) #17
  %157 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %156, ptr %157, align 8
  call void @assume_offset(ptr %157, ptr @Iterable2)
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 0
  %159 = load ptr, ptr %158, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %159, 0
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 1
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %160, ptr %162, 1
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 2
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %165, 2
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 3
  %168 = load i32, ptr %167, align 4
  %169 = insertvalue { ptr, ptr, ptr, i32 } %166, i32 %168, 3
  %170 = alloca [0 x ptr], align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 0, ptr %170)
  %172 = call ptr @llvm.invariant.start.p0(i64 184, ptr %159)
  %173 = getelementptr ptr, ptr %159, i32 %168
  %174 = getelementptr ptr, ptr %173, i32 1
  %175 = load ptr, ptr %174, align 8
  %176 = alloca {}, align 8
  %177 = call ptr @behavior_wrapper(ptr %175, { ptr, ptr, ptr, i32 } %169, ptr %176)
  %178 = call { ptr, ptr, ptr, i32 } %177({ ptr, ptr, ptr, i32 } %169, { ptr, ptr, ptr, i32 } %169, ptr %170) #15
  %179 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %178, ptr %179, align 8
  %180 = alloca { ptr, ptr, ptr, i32 }, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 0
  %183 = load ptr, ptr %181, align 8
  store ptr %183, ptr %182, align 8
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 1
  %186 = load ptr, ptr %184, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 2
  %189 = load ptr, ptr %187, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %180, i32 0, i32 3
  %192 = load i32, ptr %190, align 4
  store i32 %192, ptr %191, align 4
  call void @set_offset(ptr %180, ptr @Iterator2)
  %193 = load ptr, ptr %10, align 8
  %194 = load ptr, ptr %5, align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 416, ptr %194)
  %196 = load i32, ptr %16, align 4
  %197 = getelementptr ptr, ptr %194, i32 %196
  %198 = getelementptr ptr, ptr %197, i32 4
  %199 = load ptr, ptr %198, align 8
  %200 = getelementptr { ptr, ptr }, ptr %199, i32 0, i32 0
  %201 = load ptr, ptr %200, align 8
  %202 = call { ptr, ptr, ptr, i32 } %201(ptr %193) #17
  %203 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %202, ptr %203, align 8
  call void @assume_offset(ptr %203, ptr @Iterable2)
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 0
  %205 = load ptr, ptr %204, align 8
  %206 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %205, 0
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 1
  %208 = load ptr, ptr %207, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } %206, ptr %208, 1
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 2
  %211 = load ptr, ptr %210, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %211, 2
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 3
  %214 = load i32, ptr %213, align 4
  %215 = insertvalue { ptr, ptr, ptr, i32 } %212, i32 %214, 3
  %216 = alloca [0 x ptr], align 8
  %217 = call ptr @llvm.invariant.start.p0(i64 0, ptr %216)
  %218 = call ptr @llvm.invariant.start.p0(i64 184, ptr %205)
  %219 = getelementptr ptr, ptr %205, i32 %214
  %220 = getelementptr ptr, ptr %219, i32 1
  %221 = load ptr, ptr %220, align 8
  %222 = alloca {}, align 8
  %223 = call ptr @behavior_wrapper(ptr %221, { ptr, ptr, ptr, i32 } %215, ptr %222)
  %224 = call { ptr, ptr, ptr, i32 } %223({ ptr, ptr, ptr, i32 } %215, { ptr, ptr, ptr, i32 } %215, ptr %216) #15
  %225 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %224, ptr %225, align 8
  %226 = alloca { ptr, ptr, ptr, i32 }, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 0
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 0
  %229 = load ptr, ptr %227, align 8
  store ptr %229, ptr %228, align 8
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 1
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 1
  %232 = load ptr, ptr %230, align 8
  store ptr %232, ptr %231, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 2
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 2
  %235 = load ptr, ptr %233, align 8
  store ptr %235, ptr %234, align 8
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 3
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 3
  %238 = load i32, ptr %236, align 4
  store i32 %238, ptr %237, align 4
  call void @set_offset(ptr %226, ptr @Iterator2)
  %239 = alloca { ptr, ptr, ptr, i32 }, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 0
  %241 = load ptr, ptr %182, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 1
  %243 = load ptr, ptr %185, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 2
  %245 = load ptr, ptr %188, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 3
  %247 = load i32, ptr %191, align 4
  store i32 %247, ptr %246, align 4
  call void @set_offset(ptr %239, ptr @Iterator2)
  %248 = load ptr, ptr %240, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = load ptr, ptr %242, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %250, 1
  %252 = load ptr, ptr %244, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } %251, ptr %252, 2
  %254 = load i32, ptr %246, align 4
  %255 = insertvalue { ptr, ptr, ptr, i32 } %253, i32 %254, 3
  %256 = alloca { ptr, ptr, ptr, i32 }, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 0
  %258 = load ptr, ptr %228, align 8
  store ptr %258, ptr %257, align 8
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 1
  %260 = load ptr, ptr %231, align 8
  store ptr %260, ptr %259, align 8
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 2
  %262 = load ptr, ptr %234, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 3
  %264 = load i32, ptr %237, align 4
  store i32 %264, ptr %263, align 4
  call void @set_offset(ptr %256, ptr @Iterator2)
  %265 = load ptr, ptr %257, align 8
  %266 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %265, 0
  %267 = load ptr, ptr %259, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } %266, ptr %267, 1
  %269 = load ptr, ptr %261, align 8
  %270 = insertvalue { ptr, ptr, ptr, i32 } %268, ptr %269, 2
  %271 = load i32, ptr %263, align 4
  %272 = insertvalue { ptr, ptr, ptr, i32 } %270, i32 %271, 3
  %273 = load ptr, ptr %146, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %273, 0
  %275 = load ptr, ptr %145, align 8
  %276 = insertvalue { ptr, ptr, ptr, i32 } %274, ptr %275, 1
  %277 = load ptr, ptr %144, align 8
  %278 = insertvalue { ptr, ptr, ptr, i32 } %276, ptr %277, 2
  %279 = load i32, ptr %143, align 4
  %280 = insertvalue { ptr, ptr, ptr, i32 } %278, i32 %279, 3
  %281 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %282 = getelementptr [3 x ptr], ptr %281, i32 0, i32 1
  store ptr %116, ptr %282, align 8
  %283 = getelementptr [3 x ptr], ptr %281, i32 0, i32 2
  store ptr null, ptr %283, align 8
  %284 = call ptr @llvm.invariant.start.p0(i64 16, ptr %281)
  store ptr @Iterator2, ptr %281, align 8
  %285 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %286 = getelementptr [3 x ptr], ptr %285, i32 0, i32 1
  store ptr %124, ptr %286, align 8
  %287 = getelementptr [3 x ptr], ptr %285, i32 0, i32 2
  store ptr null, ptr %287, align 8
  %288 = call ptr @llvm.invariant.start.p0(i64 16, ptr %285)
  store ptr @Iterator2, ptr %285, align 8
  %289 = alloca [2 x ptr], align 8
  %290 = getelementptr [2 x ptr], ptr %289, i32 0, i32 0
  store ptr %281, ptr %290, align 8
  %291 = getelementptr [2 x ptr], ptr %289, i32 0, i32 1
  store ptr %285, ptr %291, align 8
  %292 = call ptr @llvm.invariant.start.p0(i64 4, ptr %289)
  %293 = call ptr @llvm.invariant.start.p0(i64 96, ptr %273)
  %294 = getelementptr ptr, ptr %273, i32 %279
  %295 = getelementptr ptr, ptr %294, i32 5
  %296 = load ptr, ptr %295, align 8
  %297 = alloca { ptr, ptr }, align 8
  %298 = getelementptr { ptr, ptr }, ptr %297, i32 0, i32 0
  store ptr %248, ptr %298, align 8
  %299 = getelementptr { ptr, ptr }, ptr %297, i32 0, i32 1
  store ptr %265, ptr %299, align 8
  %300 = call ptr @behavior_wrapper(ptr %296, { ptr, ptr, ptr, i32 } %280, ptr %297)
  call void %300({ ptr, ptr, ptr, i32 } %280, { ptr, ptr, ptr, i32 } %280, ptr %289, { ptr, ptr, ptr, i32 } %255, { ptr, ptr, ptr, i32 } %272) #15
  %301 = alloca { ptr, ptr, ptr, i32 }, align 8
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %301, i32 0, i32 0
  %303 = load ptr, ptr %146, align 8
  store ptr %303, ptr %302, align 8
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %301, i32 0, i32 1
  %305 = load ptr, ptr %145, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %301, i32 0, i32 2
  %307 = load ptr, ptr %144, align 8
  store ptr %307, ptr %306, align 8
  %308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %301, i32 0, i32 3
  %309 = load i32, ptr %143, align 4
  store i32 %309, ptr %308, align 4
  call void @set_offset(ptr %301, ptr @Iterator2)
  %310 = load ptr, ptr %302, align 8
  %311 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %310, 0
  %312 = load ptr, ptr %304, align 8
  %313 = insertvalue { ptr, ptr, ptr, i32 } %311, ptr %312, 1
  %314 = load ptr, ptr %306, align 8
  %315 = insertvalue { ptr, ptr, ptr, i32 } %313, ptr %314, 2
  %316 = load i32, ptr %308, align 4
  %317 = insertvalue { ptr, ptr, ptr, i32 } %315, i32 %316, 3
  ret { ptr, ptr, ptr, i32 } %317
}

define { i64, i64 } @_data_size_ZipIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ZipIterator2_field_ZipIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ZipIterator2_field_ZipIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterator2_field_ZipIterator2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterator2, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterator2 to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 7, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [12 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ZipIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 8, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [12 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ZipIterator2_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ZipIterator2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator2)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 96, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #16
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterator2)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 96, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 4
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #16
  ret void
}

define { ptr, i160 } @ZipIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i1, align 1
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca [3 x ptr], align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca [2 x ptr], align 8
  %16 = alloca { ptr, ptr }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i64, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem21 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem37 = alloca { ptr, i160 }, align 8
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca { ptr, i160 }, align 8
  %.reg2mem43 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  store ptr %26, ptr %.reg2mem31, align 8
  %27 = load ptr, ptr %25, align 8
  %.reload36 = load ptr, ptr %.reg2mem31, align 8
  store ptr %27, ptr %.reload36, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr %32, ptr %.reg2mem25, align 8
  %33 = load i32, ptr %31, align 4
  %.reload30 = load ptr, ptr %.reg2mem25, align 8
  store i32 %33, ptr %.reload30, align 4
  call void @set_offset(ptr %21, ptr @ZipIterator2)
  %.reload35 = load ptr, ptr %.reg2mem31, align 8
  %34 = load ptr, ptr %.reload35, align 8
  %35 = load ptr, ptr %21, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 96, ptr %35)
  %.reload29 = load ptr, ptr %.reg2mem25, align 8
  %37 = load i32, ptr %.reload29, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 3
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = call { ptr, ptr, ptr, i32 } %42(ptr %34) #17
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %43, ptr %44, align 8
  call void @assume_offset(ptr %44, ptr @Iterator2)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %55 = load i32, ptr %54, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %55, 3
  %57 = alloca [0 x ptr], align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 0, ptr %57)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr ptr, ptr %46, i32 %55
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = alloca {}, align 8
  %64 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %56, ptr %63)
  %65 = call { ptr, i160 } %64({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr %57) #15
  %66 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %65, ptr %66, align 8
  %.reload34 = load ptr, ptr %.reg2mem31, align 8
  %67 = load ptr, ptr %.reload34, align 8
  %68 = load ptr, ptr %21, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 96, ptr %68)
  %.reload28 = load ptr, ptr %.reg2mem25, align 8
  %70 = load i32, ptr %.reload28, align 4
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = getelementptr ptr, ptr %71, i32 4
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = call { ptr, ptr, ptr, i32 } %75(ptr %67) #17
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %76, ptr %77, align 8
  call void @assume_offset(ptr %77, ptr @Iterator2)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %88, 3
  %90 = alloca [0 x ptr], align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 0, ptr %90)
  %92 = call ptr @llvm.invariant.start.p0(i64 24, ptr %79)
  %93 = getelementptr ptr, ptr %79, i32 %88
  %94 = getelementptr ptr, ptr %93, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = alloca {}, align 8
  %97 = call ptr @behavior_wrapper(ptr %95, { ptr, ptr, ptr, i32 } %89, ptr %96)
  %98 = call { ptr, i160 } %97({ ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %89, ptr %90) #15
  %99 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %98, ptr %99, align 8
  %.reload33 = load ptr, ptr %.reg2mem31, align 8
  %100 = load ptr, ptr %.reload33, align 8
  %101 = load ptr, ptr %21, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 96, ptr %101)
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  %103 = load i32, ptr %.reload27, align 4
  %104 = getelementptr ptr, ptr %101, i32 %103
  %105 = load ptr, ptr %104, align 8
  %106 = call ptr @typegetter_wrapper(ptr %105, ptr %100)
  store ptr %106, ptr %.reg2mem21, align 8
  %107 = load ptr, ptr %66, align 8
  %108 = ptrtoint ptr %107 to i64
  %109 = icmp eq i64 %108, ptrtoint (ptr @nil_typ to i64)
  %110 = icmp eq i64 %108, 0
  %111 = or i1 %109, %110
  %112 = icmp eq i1 %111, false
  %113 = alloca i1, align 1
  store i1 %112, ptr %113, align 1
  %114 = load i1, ptr %113, align 1
  br i1 %114, label %115, label %197

115:                                              ; preds = %3
  %116 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 0
  store ptr %116, ptr %.reg2mem18, align 8
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %117 = load ptr, ptr %.reload20, align 8
  store ptr %117, ptr %5, align 8
  %118 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 1
  store ptr %118, ptr %.reg2mem15, align 8
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %119 = load i160, ptr %.reload17, align 4
  store i160 %119, ptr %4, align 4
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %120 = load ptr, ptr %.reload32, align 8
  %121 = load ptr, ptr %21, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 96, ptr %121)
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %123 = load i32, ptr %.reload26, align 4
  %124 = getelementptr ptr, ptr %121, i32 %123
  %125 = getelementptr ptr, ptr %124, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = call ptr @typegetter_wrapper(ptr %126, ptr %120)
  store ptr %127, ptr %.reg2mem11, align 8
  %128 = load ptr, ptr %99, align 8
  %129 = ptrtoint ptr %128 to i64
  %130 = icmp eq i64 %129, ptrtoint (ptr @nil_typ to i64)
  %131 = icmp eq i64 %129, 0
  %132 = or i1 %130, %131
  %133 = icmp eq i1 %132, false
  store i1 %133, ptr %6, align 1
  %134 = load i1, ptr %6, align 1
  %135 = xor i1 %134, true
  %136 = zext i1 %135 to i32
  store i32 %136, ptr %.reg2mem9, align 4
  br i1 %134, label %137, label %192

137:                                              ; preds = %115
  %138 = getelementptr { ptr, i160 }, ptr %99, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  store ptr %139, ptr %8, align 8
  %140 = getelementptr { ptr, i160 }, ptr %99, i32 0, i32 1
  %141 = load i160, ptr %140, align 4
  store i160 %141, ptr %7, align 4
  store ptr @Pair, ptr %9, align 8
  %142 = getelementptr ptr, ptr %9, i32 1
  %.reload24 = load ptr, ptr %.reg2mem21, align 8
  store ptr %.reload24, ptr %142, align 8
  %143 = getelementptr ptr, ptr %9, i32 2
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  store ptr %.reload14, ptr %143, align 8
  %144 = load ptr, ptr %9, align 8
  %145 = getelementptr ptr, ptr %144, i32 6
  %146 = load ptr, ptr %145, align 8
  %147 = call { i64, i64 } @size_wrapper(ptr %146, ptr %9)
  %148 = extractvalue { i64, i64 } %147, 0
  %149 = call ptr @bump_malloc(i64 %148)
  %.reload23 = load ptr, ptr %.reg2mem21, align 8
  store ptr %.reload23, ptr %149, align 8
  %150 = getelementptr ptr, ptr %149, i32 1
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  store ptr %.reload13, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 16, ptr %149)
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  store ptr @Pair, ptr %10, align 8
  store ptr %149, ptr %152, align 8
  store i32 10, ptr %153, align 4
  %154 = load ptr, ptr %5, align 8
  store ptr %154, ptr %12, align 8
  %155 = load i160, ptr %4, align 4
  store i160 %155, ptr %11, align 4
  %156 = load ptr, ptr %12, align 8
  %157 = insertvalue { ptr, i160 } undef, ptr %156, 0
  %158 = load i160, ptr %11, align 4
  %159 = insertvalue { ptr, i160 } %157, i160 %158, 1
  %160 = load ptr, ptr %8, align 8
  store ptr %160, ptr %14, align 8
  %161 = load i160, ptr %7, align 4
  store i160 %161, ptr %13, align 4
  %162 = load ptr, ptr %14, align 8
  %163 = insertvalue { ptr, i160 } undef, ptr %162, 0
  %164 = load i160, ptr %13, align 4
  %165 = insertvalue { ptr, i160 } %163, i160 %164, 1
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = load ptr, ptr %152, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %169, 1
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %172 = load ptr, ptr %171, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } %170, ptr %172, 2
  %174 = load i32, ptr %153, align 4
  %175 = insertvalue { ptr, ptr, ptr, i32 } %173, i32 %174, 3
  %176 = getelementptr [2 x ptr], ptr %15, i32 0, i32 0
  %.reload22 = load ptr, ptr %.reg2mem21, align 8
  store ptr %.reload22, ptr %176, align 8
  %177 = getelementptr [2 x ptr], ptr %15, i32 0, i32 1
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  store ptr %.reload12, ptr %177, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 4, ptr %15)
  %179 = call ptr @llvm.invariant.start.p0(i64 80, ptr %167)
  %180 = getelementptr ptr, ptr %167, i32 %174
  %181 = getelementptr ptr, ptr %180, i32 4
  %182 = load ptr, ptr %181, align 8
  %183 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 0
  store ptr %156, ptr %183, align 8
  %184 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 1
  store ptr %162, ptr %184, align 8
  %185 = call ptr @behavior_wrapper(ptr %182, { ptr, ptr, ptr, i32 } %175, ptr %16)
  call void %185({ ptr, ptr, ptr, i32 } %175, { ptr, ptr, ptr, i32 } %175, ptr %15, { ptr, i160 } %159, { ptr, i160 } %165) #15
  %186 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 0
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, i160 } undef, ptr %187, 0
  %189 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 1
  %190 = load i160, ptr %189, align 4
  %191 = insertvalue { ptr, i160 } %188, i160 %190, 1
  store { ptr, i160 } %191, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem43, align 8
  br label %195

192:                                              ; preds = %115
  %193 = load ptr, ptr %5, align 8
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  store ptr %193, ptr %.reload19, align 8
  %194 = load i160, ptr %4, align 4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  store i160 %194, ptr %.reload16, align 4
  store { ptr, i160 } poison, ptr %.reg2mem43, align 8
  br label %195

195:                                              ; preds = %192, %137
  %.reload44 = load { ptr, i160 }, ptr %.reg2mem43, align 8
  store { ptr, i160 } %.reload44, ptr %.reg2mem5, align 8
  br label %196

196:                                              ; preds = %195
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem39, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem41, align 8
  br label %198

197:                                              ; preds = %3
  store i32 1, ptr %.reg2mem39, align 4
  store { ptr, i160 } poison, ptr %.reg2mem41, align 8
  br label %198

198:                                              ; preds = %197, %196
  %.reload42 = load { ptr, i160 }, ptr %.reg2mem41, align 8
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store { ptr, i160 } %.reload42, ptr %.reg2mem3, align 8
  store i32 %.reload40, ptr %.reg2mem1, align 4
  br label %199

199:                                              ; preds = %198
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %200 = zext i32 %.reload2 to i64
  %201 = trunc i64 %200 to i32
  switch i32 %201, label %203 [
    i32 0, label %202
  ]

202:                                              ; preds = %199
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem37, align 8
  br label %209

203:                                              ; preds = %199
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %19, align 4
  %204 = load i64, ptr %19, align 4
  store i64 %204, ptr %18, align 4
  %205 = load ptr, ptr %18, align 8
  %206 = insertvalue { ptr, i160 } undef, ptr %205, 0
  %207 = load i160, ptr %17, align 4
  %208 = insertvalue { ptr, i160 } %206, i160 %207, 1
  store { ptr, i160 } %208, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem37, align 8
  br label %209

209:                                              ; preds = %203, %202
  %.reload38 = load { ptr, i160 }, ptr %.reg2mem37, align 8
  ret { ptr, i160 } %.reload38
}

define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ZipIterator2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ZipIterator2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ZipIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ZipIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define { i64, i64 } @_data_size_InterleaveIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @InterleaveIterable2_field_InterleaveIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable2, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable2 to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 15, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [50 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @InterleaveIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [50 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 18, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @InterleaveIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @InterleaveIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @InterleaveIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @InterleaveIterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable2)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 400, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #16
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable2)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 400, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @InterleaveIterable2)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 400, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #17
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable2)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #15
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator2)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 400, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #17
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  call void @assume_offset(ptr %74, ptr @Iterable2)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = alloca [0 x ptr], align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %87)
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %76)
  %90 = getelementptr ptr, ptr %76, i32 %85
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = alloca {}, align 8
  %94 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %86, ptr %93)
  %95 = call { ptr, ptr, ptr, i32 } %94({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %87) #15
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %95, ptr %96, align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator2)
  %110 = load ptr, ptr %10, align 8
  %111 = load ptr, ptr %5, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 400, ptr %111)
  %113 = load i32, ptr %16, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = call ptr @typegetter_wrapper(ptr %115, ptr %110)
  %117 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterator2, ptr %117, align 8
  %118 = getelementptr ptr, ptr %117, i32 1
  store ptr %116, ptr %118, align 8
  %119 = load ptr, ptr %117, align 8
  %120 = getelementptr ptr, ptr %119, i32 6
  %121 = load ptr, ptr %120, align 8
  %122 = call { i64, i64 } @size_wrapper(ptr %121, ptr %117)
  %123 = extractvalue { i64, i64 } %122, 0
  %124 = call ptr @bump_malloc(i64 %123)
  store ptr %116, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 8, ptr %124)
  %126 = alloca i32, align 4
  %127 = alloca ptr, align 8
  %128 = alloca ptr, align 8
  %129 = alloca ptr, align 8
  store ptr @InterleaveIterator2, ptr %129, align 8
  store ptr %124, ptr %128, align 8
  store i32 10, ptr %126, align 4
  %130 = load ptr, ptr %10, align 8
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 400, ptr %131)
  %133 = load i32, ptr %16, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #17
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %139, ptr %140, align 8
  call void @assume_offset(ptr %140, ptr @Iterable2)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %145, 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %148, 2
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %151 = load i32, ptr %150, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %151, 3
  %153 = alloca [0 x ptr], align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 0, ptr %153)
  %155 = call ptr @llvm.invariant.start.p0(i64 184, ptr %142)
  %156 = getelementptr ptr, ptr %142, i32 %151
  %157 = getelementptr ptr, ptr %156, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = alloca {}, align 8
  %160 = call ptr @behavior_wrapper(ptr %158, { ptr, ptr, ptr, i32 } %152, ptr %159)
  %161 = call { ptr, ptr, ptr, i32 } %160({ ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %152, ptr %153) #15
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %161, ptr %162, align 8
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %163, ptr @Iterator2)
  %176 = load ptr, ptr %10, align 8
  %177 = load ptr, ptr %5, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 400, ptr %177)
  %179 = load i32, ptr %16, align 4
  %180 = getelementptr ptr, ptr %177, i32 %179
  %181 = getelementptr ptr, ptr %180, i32 2
  %182 = load ptr, ptr %181, align 8
  %183 = getelementptr { ptr, ptr }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = call { ptr, ptr, ptr, i32 } %184(ptr %176) #17
  %186 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %185, ptr %186, align 8
  call void @assume_offset(ptr %186, ptr @Iterable2)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %194, 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %197, 3
  %199 = alloca [0 x ptr], align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 0, ptr %199)
  %201 = call ptr @llvm.invariant.start.p0(i64 184, ptr %188)
  %202 = getelementptr ptr, ptr %188, i32 %197
  %203 = getelementptr ptr, ptr %202, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = alloca {}, align 8
  %206 = call ptr @behavior_wrapper(ptr %204, { ptr, ptr, ptr, i32 } %198, ptr %205)
  %207 = call { ptr, ptr, ptr, i32 } %206({ ptr, ptr, ptr, i32 } %198, { ptr, ptr, ptr, i32 } %198, ptr %199) #15
  %208 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %207, ptr %208, align 8
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %221 = load i32, ptr %219, align 4
  store i32 %221, ptr %220, align 4
  call void @set_offset(ptr %209, ptr @Iterator2)
  %222 = alloca { ptr, ptr, ptr, i32 }, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %224 = load ptr, ptr %165, align 8
  store ptr %224, ptr %223, align 8
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %226 = load ptr, ptr %168, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %228 = load ptr, ptr %171, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %230 = load i32, ptr %174, align 4
  store i32 %230, ptr %229, align 4
  call void @set_offset(ptr %222, ptr @Iterator2)
  %231 = load ptr, ptr %223, align 8
  %232 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %231, 0
  %233 = load ptr, ptr %225, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } %232, ptr %233, 1
  %235 = load ptr, ptr %227, align 8
  %236 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %235, 2
  %237 = load i32, ptr %229, align 4
  %238 = insertvalue { ptr, ptr, ptr, i32 } %236, i32 %237, 3
  %239 = alloca { ptr, ptr, ptr, i32 }, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 0
  %241 = load ptr, ptr %211, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 1
  %243 = load ptr, ptr %214, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 2
  %245 = load ptr, ptr %217, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 3
  %247 = load i32, ptr %220, align 4
  store i32 %247, ptr %246, align 4
  call void @set_offset(ptr %239, ptr @Iterator2)
  %248 = load ptr, ptr %240, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = load ptr, ptr %242, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %250, 1
  %252 = load ptr, ptr %244, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } %251, ptr %252, 2
  %254 = load i32, ptr %246, align 4
  %255 = insertvalue { ptr, ptr, ptr, i32 } %253, i32 %254, 3
  %256 = load ptr, ptr %129, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %256, 0
  %258 = load ptr, ptr %128, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %257, ptr %258, 1
  %260 = load ptr, ptr %127, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } %259, ptr %260, 2
  %262 = load i32, ptr %126, align 4
  %263 = insertvalue { ptr, ptr, ptr, i32 } %261, i32 %262, 3
  %264 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %265 = getelementptr [3 x ptr], ptr %264, i32 0, i32 1
  store ptr %116, ptr %265, align 8
  %266 = getelementptr [3 x ptr], ptr %264, i32 0, i32 2
  store ptr null, ptr %266, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 16, ptr %264)
  store ptr @Iterator2, ptr %264, align 8
  %268 = alloca [2 x ptr], align 8
  %269 = getelementptr [2 x ptr], ptr %268, i32 0, i32 0
  store ptr %264, ptr %269, align 8
  %270 = getelementptr [2 x ptr], ptr %268, i32 0, i32 1
  store ptr %264, ptr %270, align 8
  %271 = call ptr @llvm.invariant.start.p0(i64 4, ptr %268)
  %272 = call ptr @llvm.invariant.start.p0(i64 88, ptr %256)
  %273 = getelementptr ptr, ptr %256, i32 %262
  %274 = getelementptr ptr, ptr %273, i32 4
  %275 = load ptr, ptr %274, align 8
  %276 = alloca { ptr, ptr }, align 8
  %277 = getelementptr { ptr, ptr }, ptr %276, i32 0, i32 0
  store ptr %231, ptr %277, align 8
  %278 = getelementptr { ptr, ptr }, ptr %276, i32 0, i32 1
  store ptr %248, ptr %278, align 8
  %279 = call ptr @behavior_wrapper(ptr %275, { ptr, ptr, ptr, i32 } %263, ptr %276)
  call void %279({ ptr, ptr, ptr, i32 } %263, { ptr, ptr, ptr, i32 } %263, ptr %268, { ptr, ptr, ptr, i32 } %238, { ptr, ptr, ptr, i32 } %255) #15
  %280 = alloca { ptr, ptr, ptr, i32 }, align 8
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 0
  %282 = load ptr, ptr %129, align 8
  store ptr %282, ptr %281, align 8
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 1
  %284 = load ptr, ptr %128, align 8
  store ptr %284, ptr %283, align 8
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 2
  %286 = load ptr, ptr %127, align 8
  store ptr %286, ptr %285, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 3
  %288 = load i32, ptr %126, align 4
  store i32 %288, ptr %287, align 4
  call void @set_offset(ptr %280, ptr @Iterator2)
  %289 = load ptr, ptr %281, align 8
  %290 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %289, 0
  %291 = load ptr, ptr %283, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } %290, ptr %291, 1
  %293 = load ptr, ptr %285, align 8
  %294 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %293, 2
  %295 = load i32, ptr %287, align 4
  %296 = insertvalue { ptr, ptr, ptr, i32 } %294, i32 %295, 3
  ret { ptr, ptr, ptr, i32 } %296
}

define { i64, i64 } @_data_size_InterleaveIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @InterleaveIterator2_field_InterleaveIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterator2, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterator2 to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 6, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [11 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @InterleaveIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [11 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @InterleaveIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @InterleaveIterator2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator2)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #16
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterator2)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 88, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #16
  %100 = alloca i1, align 1
  store i1 true, ptr %100, align 1
  %101 = load ptr, ptr %12, align 8
  %102 = load ptr, ptr %7, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = load i32, ptr %18, align 4
  %105 = getelementptr ptr, ptr %102, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 3
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load i1, ptr %100, align 1
  call void %109(ptr %101, i1 %110) #16
  ret void
}

define { ptr, i160 } @InterleaveIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem19 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  store ptr %20, ptr %.reg2mem12, align 8
  %21 = load ptr, ptr %19, align 8
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  store ptr %21, ptr %.reload18, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr %26, ptr %.reg2mem5, align 8
  %27 = load i32, ptr %25, align 4
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  store i32 %27, ptr %.reload11, align 4
  call void @set_offset(ptr %15, ptr @InterleaveIterator2)
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %28 = load ptr, ptr %.reload17, align 8
  %29 = load ptr, ptr %15, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 88, ptr %29)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %31 = load i32, ptr %.reload10, align 4
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 3
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call i1 %36(ptr %28) #17
  %38 = alloca i1, align 1
  store i1 %37, ptr %38, align 1
  %39 = load i1, ptr %38, align 1
  br i1 %39, label %40, label %86

40:                                               ; preds = %3
  store i1 false, ptr %4, align 1
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %41 = load ptr, ptr %.reload16, align 8
  %42 = load ptr, ptr %15, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 88, ptr %42)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %44 = load i32, ptr %.reload9, align 4
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 3
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load i1, ptr %4, align 1
  call void %49(ptr %41, i1 %50) #16
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %51 = load ptr, ptr %.reload15, align 8
  %52 = load ptr, ptr %15, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 88, ptr %52)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %54 = load i32, ptr %.reload8, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = call { ptr, ptr, ptr, i32 } %59(ptr %51) #17
  store { ptr, ptr, ptr, i32 } %60, ptr %5, align 8
  call void @assume_offset(ptr %5, ptr @Iterator2)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %71, 3
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %62)
  %75 = getelementptr ptr, ptr %62, i32 %71
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @behavior_wrapper(ptr %77, { ptr, ptr, ptr, i32 } %72, ptr %7)
  %79 = call { ptr, i160 } %78({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr %6) #15
  store { ptr, i160 } %79, ptr %8, align 8
  %80 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, i160 } undef, ptr %81, 0
  %83 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %84 = load i160, ptr %83, align 4
  %85 = insertvalue { ptr, i160 } %82, i160 %84, 1
  store { ptr, i160 } %85, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem19, align 8
  br label %132

86:                                               ; preds = %3
  store i1 true, ptr %9, align 1
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %87 = load ptr, ptr %.reload14, align 8
  %88 = load ptr, ptr %15, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 88, ptr %88)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %90 = load i32, ptr %.reload7, align 4
  %91 = getelementptr ptr, ptr %88, i32 %90
  %92 = getelementptr ptr, ptr %91, i32 3
  %93 = load ptr, ptr %92, align 8
  %94 = getelementptr { ptr, ptr }, ptr %93, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = load i1, ptr %9, align 1
  call void %95(ptr %87, i1 %96) #16
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %97 = load ptr, ptr %.reload13, align 8
  %98 = load ptr, ptr %15, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 88, ptr %98)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %100 = load i32, ptr %.reload6, align 4
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = getelementptr ptr, ptr %101, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = getelementptr { ptr, ptr }, ptr %103, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = call { ptr, ptr, ptr, i32 } %105(ptr %97) #17
  store { ptr, ptr, ptr, i32 } %106, ptr %10, align 8
  call void @assume_offset(ptr %10, ptr @Iterator2)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 2
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %117, 3
  %119 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %120 = call ptr @llvm.invariant.start.p0(i64 24, ptr %108)
  %121 = getelementptr ptr, ptr %108, i32 %117
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @behavior_wrapper(ptr %123, { ptr, ptr, ptr, i32 } %118, ptr %12)
  %125 = call { ptr, i160 } %124({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr %11) #15
  store { ptr, i160 } %125, ptr %13, align 8
  %126 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, i160 } undef, ptr %127, 0
  %129 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 1
  %130 = load i160, ptr %129, align 4
  %131 = insertvalue { ptr, i160 } %128, i160 %130, 1
  store { ptr, i160 } %131, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem19, align 8
  br label %132

132:                                              ; preds = %86, %40
  %.reload20 = load { ptr, i160 }, ptr %.reg2mem19, align 8
  store { ptr, i160 } %.reload20, ptr %.reg2mem, align 8
  br label %133

133:                                              ; preds = %132
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i1 @InterleaveIterator2_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @InterleaveIterator2_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca i1, align 1
  store i1 %1, ptr %21, align 1
  %22 = load i1, ptr %21, align 1
  store i1 %22, ptr %20, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @InterleaveIterator2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterator2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @InterleaveIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { i64, i64 } @_data_size_ChainIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ChainIterable2_field_ChainIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterable2, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterable2 to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 15, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [50 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ChainIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [50 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ChainIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 18, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ChainIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ChainIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @ChainIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ChainIterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable2)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 400, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #16
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterable2)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 400, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ChainIterable2)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 400, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #17
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable2)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #15
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator2)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 400, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #17
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  call void @assume_offset(ptr %74, ptr @Iterable2)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = alloca [0 x ptr], align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %87)
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %76)
  %90 = getelementptr ptr, ptr %76, i32 %85
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = alloca {}, align 8
  %94 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %86, ptr %93)
  %95 = call { ptr, ptr, ptr, i32 } %94({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %87) #15
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %95, ptr %96, align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator2)
  %110 = load ptr, ptr %10, align 8
  %111 = load ptr, ptr %5, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 400, ptr %111)
  %113 = load i32, ptr %16, align 4
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = call ptr @typegetter_wrapper(ptr %115, ptr %110)
  %117 = alloca [2 x ptr], align 8
  store ptr @ChainIterator2, ptr %117, align 8
  %118 = getelementptr ptr, ptr %117, i32 1
  store ptr %116, ptr %118, align 8
  %119 = load ptr, ptr %117, align 8
  %120 = getelementptr ptr, ptr %119, i32 6
  %121 = load ptr, ptr %120, align 8
  %122 = call { i64, i64 } @size_wrapper(ptr %121, ptr %117)
  %123 = extractvalue { i64, i64 } %122, 0
  %124 = call ptr @bump_malloc(i64 %123)
  store ptr %116, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 8, ptr %124)
  %126 = alloca i32, align 4
  %127 = alloca ptr, align 8
  %128 = alloca ptr, align 8
  %129 = alloca ptr, align 8
  store ptr @ChainIterator2, ptr %129, align 8
  store ptr %124, ptr %128, align 8
  store i32 10, ptr %126, align 4
  %130 = load ptr, ptr %10, align 8
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 400, ptr %131)
  %133 = load i32, ptr %16, align 4
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #17
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %139, ptr %140, align 8
  call void @assume_offset(ptr %140, ptr @Iterable2)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %145, 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %148, 2
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %151 = load i32, ptr %150, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %151, 3
  %153 = alloca [0 x ptr], align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 0, ptr %153)
  %155 = call ptr @llvm.invariant.start.p0(i64 184, ptr %142)
  %156 = getelementptr ptr, ptr %142, i32 %151
  %157 = getelementptr ptr, ptr %156, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = alloca {}, align 8
  %160 = call ptr @behavior_wrapper(ptr %158, { ptr, ptr, ptr, i32 } %152, ptr %159)
  %161 = call { ptr, ptr, ptr, i32 } %160({ ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %152, ptr %153) #15
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %161, ptr %162, align 8
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %163, ptr @Iterator2)
  %176 = load ptr, ptr %10, align 8
  %177 = load ptr, ptr %5, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 400, ptr %177)
  %179 = load i32, ptr %16, align 4
  %180 = getelementptr ptr, ptr %177, i32 %179
  %181 = getelementptr ptr, ptr %180, i32 2
  %182 = load ptr, ptr %181, align 8
  %183 = getelementptr { ptr, ptr }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = call { ptr, ptr, ptr, i32 } %184(ptr %176) #17
  %186 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %185, ptr %186, align 8
  call void @assume_offset(ptr %186, ptr @Iterable2)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %194, 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %197, 3
  %199 = alloca [0 x ptr], align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 0, ptr %199)
  %201 = call ptr @llvm.invariant.start.p0(i64 184, ptr %188)
  %202 = getelementptr ptr, ptr %188, i32 %197
  %203 = getelementptr ptr, ptr %202, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = alloca {}, align 8
  %206 = call ptr @behavior_wrapper(ptr %204, { ptr, ptr, ptr, i32 } %198, ptr %205)
  %207 = call { ptr, ptr, ptr, i32 } %206({ ptr, ptr, ptr, i32 } %198, { ptr, ptr, ptr, i32 } %198, ptr %199) #15
  %208 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %207, ptr %208, align 8
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %221 = load i32, ptr %219, align 4
  store i32 %221, ptr %220, align 4
  call void @set_offset(ptr %209, ptr @Iterator2)
  %222 = alloca { ptr, ptr, ptr, i32 }, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %224 = load ptr, ptr %165, align 8
  store ptr %224, ptr %223, align 8
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %226 = load ptr, ptr %168, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %228 = load ptr, ptr %171, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %230 = load i32, ptr %174, align 4
  store i32 %230, ptr %229, align 4
  call void @set_offset(ptr %222, ptr @Iterator2)
  %231 = load ptr, ptr %223, align 8
  %232 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %231, 0
  %233 = load ptr, ptr %225, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } %232, ptr %233, 1
  %235 = load ptr, ptr %227, align 8
  %236 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %235, 2
  %237 = load i32, ptr %229, align 4
  %238 = insertvalue { ptr, ptr, ptr, i32 } %236, i32 %237, 3
  %239 = alloca { ptr, ptr, ptr, i32 }, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 0
  %241 = load ptr, ptr %211, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 1
  %243 = load ptr, ptr %214, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 2
  %245 = load ptr, ptr %217, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %239, i32 0, i32 3
  %247 = load i32, ptr %220, align 4
  store i32 %247, ptr %246, align 4
  call void @set_offset(ptr %239, ptr @Iterator2)
  %248 = load ptr, ptr %240, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = load ptr, ptr %242, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %250, 1
  %252 = load ptr, ptr %244, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } %251, ptr %252, 2
  %254 = load i32, ptr %246, align 4
  %255 = insertvalue { ptr, ptr, ptr, i32 } %253, i32 %254, 3
  %256 = load ptr, ptr %129, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %256, 0
  %258 = load ptr, ptr %128, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %257, ptr %258, 1
  %260 = load ptr, ptr %127, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } %259, ptr %260, 2
  %262 = load i32, ptr %126, align 4
  %263 = insertvalue { ptr, ptr, ptr, i32 } %261, i32 %262, 3
  %264 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %265 = getelementptr [3 x ptr], ptr %264, i32 0, i32 1
  store ptr %116, ptr %265, align 8
  %266 = getelementptr [3 x ptr], ptr %264, i32 0, i32 2
  store ptr null, ptr %266, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 16, ptr %264)
  store ptr @Iterator2, ptr %264, align 8
  %268 = alloca [2 x ptr], align 8
  %269 = getelementptr [2 x ptr], ptr %268, i32 0, i32 0
  store ptr %264, ptr %269, align 8
  %270 = getelementptr [2 x ptr], ptr %268, i32 0, i32 1
  store ptr %264, ptr %270, align 8
  %271 = call ptr @llvm.invariant.start.p0(i64 4, ptr %268)
  %272 = call ptr @llvm.invariant.start.p0(i64 88, ptr %256)
  %273 = getelementptr ptr, ptr %256, i32 %262
  %274 = getelementptr ptr, ptr %273, i32 4
  %275 = load ptr, ptr %274, align 8
  %276 = alloca { ptr, ptr }, align 8
  %277 = getelementptr { ptr, ptr }, ptr %276, i32 0, i32 0
  store ptr %231, ptr %277, align 8
  %278 = getelementptr { ptr, ptr }, ptr %276, i32 0, i32 1
  store ptr %248, ptr %278, align 8
  %279 = call ptr @behavior_wrapper(ptr %275, { ptr, ptr, ptr, i32 } %263, ptr %276)
  call void %279({ ptr, ptr, ptr, i32 } %263, { ptr, ptr, ptr, i32 } %263, ptr %268, { ptr, ptr, ptr, i32 } %238, { ptr, ptr, ptr, i32 } %255) #15
  %280 = alloca { ptr, ptr, ptr, i32 }, align 8
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 0
  %282 = load ptr, ptr %129, align 8
  store ptr %282, ptr %281, align 8
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 1
  %284 = load ptr, ptr %128, align 8
  store ptr %284, ptr %283, align 8
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 2
  %286 = load ptr, ptr %127, align 8
  store ptr %286, ptr %285, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %280, i32 0, i32 3
  %288 = load i32, ptr %126, align 4
  store i32 %288, ptr %287, align 4
  call void @set_offset(ptr %280, ptr @Iterator2)
  %289 = load ptr, ptr %281, align 8
  %290 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %289, 0
  %291 = load ptr, ptr %283, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } %290, ptr %291, 1
  %293 = load ptr, ptr %285, align 8
  %294 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %293, 2
  %295 = load i32, ptr %287, align 4
  %296 = insertvalue { ptr, ptr, ptr, i32 } %294, i32 %295, 3
  ret { ptr, ptr, ptr, i32 } %296
}

define { i64, i64 } @_data_size_ChainIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @ChainIterator2_field_ChainIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 1
  %21 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 0, i32 2
  %22 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 0
  %23 = getelementptr { [3 x i64], [3 x ptr] }, ptr %19, i32 0, i32 1, i32 1
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = load i64, ptr @Iterator2, align 4
  %29 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 %28, i64 ptrtoint (ptr @Iterator2 to i64), ptr %27)
  store i1 %29, ptr %3, align 1
  store i32 6, ptr %6, align 4
  %30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %31 = load i32, ptr %6, align 4
  %32 = getelementptr [11 x ptr], ptr %30, i32 0, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 10
  %34 = load ptr, ptr %33, align 8
  ret ptr %34
}

define ptr @ChainIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [11 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ChainIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ChainIterator2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator2)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #16
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %60, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @Iterator2)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %63, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %78 = load ptr, ptr %66, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %80 = load ptr, ptr %69, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %82 = load i32, ptr %72, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %83 = load ptr, ptr %12, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 88, ptr %84)
  %86 = load i32, ptr %18, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %75, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = load ptr, ptr %77, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 1
  %96 = load ptr, ptr %79, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 2
  %98 = load i32, ptr %81, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %98, 3
  call void %91(ptr %83, { ptr, ptr, ptr, i32 } %99) #16
  %100 = alloca i1, align 1
  store i1 true, ptr %100, align 1
  %101 = load ptr, ptr %12, align 8
  %102 = load ptr, ptr %7, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = load i32, ptr %18, align 4
  %105 = getelementptr ptr, ptr %102, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 3
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load i1, ptr %100, align 1
  call void %109(ptr %101, i1 %110) #16
  ret void
}

define { ptr, i160 } @ChainIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i1, align 1
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca [0 x ptr], align 8
  %14 = alloca {}, align 8
  %15 = alloca { ptr, i160 }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem25 = alloca { ptr, i160 }, align 8
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca { ptr, i160 }, align 8
  %.reg2mem31 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  store ptr %22, ptr %.reg2mem18, align 8
  %23 = load ptr, ptr %21, align 8
  %.reload24 = load ptr, ptr %.reg2mem18, align 8
  store ptr %23, ptr %.reload24, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr %28, ptr %.reg2mem11, align 8
  %29 = load i32, ptr %27, align 4
  %.reload17 = load ptr, ptr %.reg2mem11, align 8
  store i32 %29, ptr %.reload17, align 4
  call void @set_offset(ptr %17, ptr @ChainIterator2)
  %.reload23 = load ptr, ptr %.reg2mem18, align 8
  %30 = load ptr, ptr %.reload23, align 8
  %31 = load ptr, ptr %17, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 88, ptr %31)
  %.reload16 = load ptr, ptr %.reg2mem11, align 8
  %33 = load i32, ptr %.reload16, align 4
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 3
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = call i1 %38(ptr %30) #17
  %40 = alloca i1, align 1
  store i1 %39, ptr %40, align 1
  %41 = load i1, ptr %40, align 1
  br i1 %41, label %42, label %110

42:                                               ; preds = %3
  %.reload22 = load ptr, ptr %.reg2mem18, align 8
  %43 = load ptr, ptr %.reload22, align 8
  %44 = load ptr, ptr %17, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %.reload15 = load ptr, ptr %.reg2mem11, align 8
  %46 = load i32, ptr %.reload15, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = call { ptr, ptr, ptr, i32 } %51(ptr %43) #17
  store { ptr, ptr, ptr, i32 } %52, ptr %4, align 8
  call void @assume_offset(ptr %4, ptr @Iterator2)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %66 = call ptr @llvm.invariant.start.p0(i64 24, ptr %54)
  %67 = getelementptr ptr, ptr %54, i32 %63
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %64, ptr %6)
  %71 = call { ptr, i160 } %70({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %5) #15
  store { ptr, i160 } %71, ptr %7, align 8
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  %72 = load ptr, ptr %.reload21, align 8
  %73 = load ptr, ptr %17, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 88, ptr %73)
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %75 = load i32, ptr %.reload14, align 4
  %76 = getelementptr ptr, ptr %73, i32 %75
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %72)
  %79 = load ptr, ptr %7, align 8
  %80 = ptrtoint ptr %79 to i64
  %81 = icmp eq i64 %80, ptrtoint (ptr @nil_typ to i64)
  %82 = icmp eq i64 %80, 0
  %83 = or i1 %81, %82
  %84 = icmp eq i1 %83, false
  store i1 %84, ptr %8, align 1
  %85 = load i1, ptr %8, align 1
  %86 = xor i1 %85, true
  %87 = zext i1 %86 to i32
  store i32 %87, ptr %.reg2mem9, align 4
  br i1 %85, label %88, label %97

88:                                               ; preds = %42
  %89 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  store ptr %90, ptr %10, align 8
  %91 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %92 = load i160, ptr %91, align 4
  store i160 %92, ptr %9, align 4
  %93 = load ptr, ptr %10, align 8
  %94 = insertvalue { ptr, i160 } undef, ptr %93, 0
  %95 = load i160, ptr %9, align 4
  %96 = insertvalue { ptr, i160 } %94, i160 %95, 1
  store { ptr, i160 } %96, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem31, align 8
  br label %108

97:                                               ; preds = %42
  store i1 false, ptr %11, align 1
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %98 = load ptr, ptr %.reload20, align 8
  %99 = load ptr, ptr %17, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 88, ptr %99)
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %101 = load i32, ptr %.reload13, align 4
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 3
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = load i1, ptr %11, align 1
  call void %106(ptr %98, i1 %107) #16
  store { ptr, i160 } poison, ptr %.reg2mem31, align 8
  br label %108

108:                                              ; preds = %97, %88
  %.reload32 = load { ptr, i160 }, ptr %.reg2mem31, align 8
  store { ptr, i160 } %.reload32, ptr %.reg2mem5, align 8
  br label %109

109:                                              ; preds = %108
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem27, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem29, align 8
  br label %111

110:                                              ; preds = %3
  store i32 1, ptr %.reg2mem27, align 4
  store { ptr, i160 } poison, ptr %.reg2mem29, align 8
  br label %111

111:                                              ; preds = %110, %109
  %.reload30 = load { ptr, i160 }, ptr %.reg2mem29, align 8
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store { ptr, i160 } %.reload30, ptr %.reg2mem3, align 8
  store i32 %.reload28, ptr %.reg2mem1, align 4
  br label %112

112:                                              ; preds = %111
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %113 = zext i32 %.reload2 to i64
  %114 = trunc i64 %113 to i32
  switch i32 %114, label %116 [
    i32 0, label %115
  ]

115:                                              ; preds = %112
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem25, align 8
  br label %152

116:                                              ; preds = %112
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %117 = load ptr, ptr %.reload19, align 8
  %118 = load ptr, ptr %17, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 88, ptr %118)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %120 = load i32, ptr %.reload12, align 4
  %121 = getelementptr ptr, ptr %118, i32 %120
  %122 = getelementptr ptr, ptr %121, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = getelementptr { ptr, ptr }, ptr %123, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  %126 = call { ptr, ptr, ptr, i32 } %125(ptr %117) #17
  store { ptr, ptr, ptr, i32 } %126, ptr %12, align 8
  call void @assume_offset(ptr %12, ptr @Iterator2)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %137, 3
  %139 = call ptr @llvm.invariant.start.p0(i64 0, ptr %13)
  %140 = call ptr @llvm.invariant.start.p0(i64 24, ptr %128)
  %141 = getelementptr ptr, ptr %128, i32 %137
  %142 = getelementptr ptr, ptr %141, i32 1
  %143 = load ptr, ptr %142, align 8
  %144 = call ptr @behavior_wrapper(ptr %143, { ptr, ptr, ptr, i32 } %138, ptr %14)
  %145 = call { ptr, i160 } %144({ ptr, ptr, ptr, i32 } %138, { ptr, ptr, ptr, i32 } %138, ptr %13) #15
  store { ptr, i160 } %145, ptr %15, align 8
  %146 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, i160 } undef, ptr %147, 0
  %149 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 1
  %150 = load i160, ptr %149, align 4
  %151 = insertvalue { ptr, i160 } %148, i160 %150, 1
  store { ptr, i160 } %151, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem25, align 8
  br label %152

152:                                              ; preds = %116, %115
  %.reload26 = load { ptr, i160 }, ptr %.reg2mem25, align 8
  ret { ptr, i160 } %.reload26
}

define i1 @ChainIterator2_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @ChainIterator2_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca i1, align 1
  store i1 %1, ptr %21, align 1
  %22 = load i1, ptr %21, align 1
  store i1 %22, ptr %20, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ChainIterator2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterator2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ChainIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { i64, i64 } @_data_size_FilterIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FilterIterable2_field_FilterIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 15, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FilterIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [50 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @FilterIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 18, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [50 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [50 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @FilterIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @FilterIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [50 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @FilterIterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable2)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 400, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #16
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 400, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @FilterIterable2)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 400, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #17
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable2)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #15
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator2)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 400, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %64) #17
  %74 = alloca ptr, align 8
  store { ptr } %73, ptr %74, align 8
  %75 = load ptr, ptr %10, align 8
  %76 = load ptr, ptr %5, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 400, ptr %76)
  %78 = load i32, ptr %16, align 4
  %79 = getelementptr ptr, ptr %76, i32 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %75)
  %82 = alloca [2 x ptr], align 8
  store ptr @FilterIterator2, ptr %82, align 8
  %83 = getelementptr ptr, ptr %82, i32 1
  store ptr %81, ptr %83, align 8
  %84 = load ptr, ptr %82, align 8
  %85 = getelementptr ptr, ptr %84, i32 6
  %86 = load ptr, ptr %85, align 8
  %87 = call { i64, i64 } @size_wrapper(ptr %86, ptr %82)
  %88 = extractvalue { i64, i64 } %87, 0
  %89 = call ptr @bump_malloc(i64 %88)
  store ptr %81, ptr %89, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 8, ptr %89)
  %91 = alloca i32, align 4
  %92 = alloca ptr, align 8
  %93 = alloca ptr, align 8
  %94 = alloca ptr, align 8
  store ptr @FilterIterator2, ptr %94, align 8
  store ptr %89, ptr %93, align 8
  store i32 10, ptr %91, align 4
  %95 = load ptr, ptr %10, align 8
  %96 = load ptr, ptr %5, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 400, ptr %96)
  %98 = load i32, ptr %16, align 4
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = getelementptr ptr, ptr %99, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = getelementptr { ptr, ptr }, ptr %101, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = call { ptr, ptr, ptr, i32 } %103(ptr %95) #17
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %104, ptr %105, align 8
  call void @assume_offset(ptr %105, ptr @Iterable2)
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %110, 1
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 2
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 %116, 3
  %118 = alloca [0 x ptr], align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 0, ptr %118)
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %107)
  %121 = getelementptr ptr, ptr %107, i32 %116
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = alloca {}, align 8
  %125 = call ptr @behavior_wrapper(ptr %123, { ptr, ptr, ptr, i32 } %117, ptr %124)
  %126 = call { ptr, ptr, ptr, i32 } %125({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %118) #15
  %127 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %126, ptr %127, align 8
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 0
  %131 = load ptr, ptr %129, align 8
  store ptr %131, ptr %130, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %134 = load ptr, ptr %132, align 8
  store ptr %134, ptr %133, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 2
  %137 = load ptr, ptr %135, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 3
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %140 = load i32, ptr %138, align 4
  store i32 %140, ptr %139, align 4
  call void @set_offset(ptr %128, ptr @Iterator2)
  %141 = load ptr, ptr %10, align 8
  %142 = load ptr, ptr %5, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 400, ptr %142)
  %144 = load i32, ptr %16, align 4
  %145 = getelementptr ptr, ptr %142, i32 %144
  %146 = getelementptr ptr, ptr %145, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = getelementptr { ptr, ptr }, ptr %147, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  %150 = call { ptr } %149(ptr %141) #17
  %151 = alloca ptr, align 8
  store { ptr } %150, ptr %151, align 8
  %152 = alloca { ptr, ptr, ptr, i32 }, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %154 = load ptr, ptr %130, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %156 = load ptr, ptr %133, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %158 = load ptr, ptr %136, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %160 = load i32, ptr %139, align 4
  store i32 %160, ptr %159, align 4
  call void @set_offset(ptr %152, ptr @Iterator2)
  %161 = load ptr, ptr %153, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %161, 0
  %163 = load ptr, ptr %155, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %162, ptr %163, 1
  %165 = load ptr, ptr %157, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %165, 2
  %167 = load i32, ptr %159, align 4
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, i32 %167, 3
  %169 = load ptr, ptr %151, align 8
  %170 = insertvalue { ptr } undef, ptr %169, 0
  %171 = load ptr, ptr %94, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %93, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %92, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %91, align 4
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %180 = getelementptr [3 x ptr], ptr %179, i32 0, i32 1
  store ptr %81, ptr %180, align 8
  %181 = getelementptr [3 x ptr], ptr %179, i32 0, i32 2
  store ptr null, ptr %181, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 16, ptr %179)
  store ptr @Iterator2, ptr %179, align 8
  %183 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %184 = getelementptr [4 x ptr], ptr %183, i32 0, i32 2
  store ptr %81, ptr %184, align 8
  %185 = getelementptr [4 x ptr], ptr %183, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %185, align 8
  %186 = getelementptr [4 x ptr], ptr %183, i32 0, i32 3
  store ptr null, ptr %186, align 8
  %187 = call ptr @llvm.invariant.start.p0(i64 24, ptr %183)
  store ptr @function_typ, ptr %183, align 8
  %188 = alloca [2 x ptr], align 8
  %189 = getelementptr [2 x ptr], ptr %188, i32 0, i32 0
  store ptr %179, ptr %189, align 8
  %190 = getelementptr [2 x ptr], ptr %188, i32 0, i32 1
  store ptr %183, ptr %190, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 4, ptr %188)
  %192 = call ptr @llvm.invariant.start.p0(i64 80, ptr %171)
  %193 = getelementptr ptr, ptr %171, i32 %177
  %194 = getelementptr ptr, ptr %193, i32 3
  %195 = load ptr, ptr %194, align 8
  %196 = alloca { ptr, ptr }, align 8
  %197 = getelementptr { ptr, ptr }, ptr %196, i32 0, i32 0
  store ptr %161, ptr %197, align 8
  %198 = getelementptr { ptr, ptr }, ptr %196, i32 0, i32 1
  store ptr @function_typ, ptr %198, align 8
  %199 = call ptr @behavior_wrapper(ptr %195, { ptr, ptr, ptr, i32 } %178, ptr %196)
  call void %199({ ptr, ptr, ptr, i32 } %178, { ptr, ptr, ptr, i32 } %178, ptr %188, { ptr, ptr, ptr, i32 } %168, { ptr } %170) #15
  %200 = alloca { ptr, ptr, ptr, i32 }, align 8
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 0
  %202 = load ptr, ptr %94, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 1
  %204 = load ptr, ptr %93, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 2
  %206 = load ptr, ptr %92, align 8
  store ptr %206, ptr %205, align 8
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 3
  %208 = load i32, ptr %91, align 4
  store i32 %208, ptr %207, align 4
  call void @set_offset(ptr %200, ptr @Iterator2)
  %209 = load ptr, ptr %201, align 8
  %210 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %209, 0
  %211 = load ptr, ptr %203, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %211, 1
  %213 = load ptr, ptr %205, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %212, ptr %213, 2
  %215 = load i32, ptr %207, align 4
  %216 = insertvalue { ptr, ptr, ptr, i32 } %214, i32 %215, 3
  ret { ptr, ptr, ptr, i32 } %216
}

define { i64, i64 } @_data_size_FilterIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FilterIterator2_field_FilterIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 5, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [10 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @FilterIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @FilterIterator2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator2)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 80, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #16
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 80, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #16
  ret void
}

define { ptr, i160 } @FilterIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i1, align 1
  %5 = alloca i160, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i1, align 1
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca [0 x ptr], align 8
  %13 = alloca {}, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca i160, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i64, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem30 = alloca { ptr, i160 }, align 8
  %.reg2mem32 = alloca i32, align 4
  %.reg2mem34 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %24, ptr %.reg2mem24, align 8
  %25 = load ptr, ptr %23, align 8
  %.reload29 = load ptr, ptr %.reg2mem24, align 8
  store ptr %25, ptr %.reload29, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %30, ptr %.reg2mem18, align 8
  %31 = load i32, ptr %29, align 4
  %.reload23 = load ptr, ptr %.reg2mem18, align 8
  store i32 %31, ptr %.reload23, align 4
  call void @set_offset(ptr %19, ptr @FilterIterator2)
  %.reload28 = load ptr, ptr %.reg2mem24, align 8
  %32 = load ptr, ptr %.reload28, align 8
  %33 = load ptr, ptr %19, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 80, ptr %33)
  %.reload22 = load ptr, ptr %.reg2mem18, align 8
  %35 = load i32, ptr %.reload22, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr, ptr, ptr, i32 } %40(ptr %32) #17
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  call void @assume_offset(ptr %42, ptr @Iterator2)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %47, 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %53, 3
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 0, ptr %55)
  %57 = call ptr @llvm.invariant.start.p0(i64 24, ptr %44)
  %58 = getelementptr ptr, ptr %44, i32 %53
  %59 = getelementptr ptr, ptr %58, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = alloca {}, align 8
  %62 = call ptr @behavior_wrapper(ptr %60, { ptr, ptr, ptr, i32 } %54, ptr %61)
  %63 = call { ptr, i160 } %62({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr %55) #15
  %64 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %63, ptr %64, align 8
  br label %65

65:                                               ; preds = %147, %3
  %.reload27 = load ptr, ptr %.reg2mem24, align 8
  %66 = load ptr, ptr %.reload27, align 8
  %67 = load ptr, ptr %19, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 80, ptr %67)
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  %69 = load i32, ptr %.reload21, align 4
  %70 = getelementptr ptr, ptr %67, i32 %69
  %71 = load ptr, ptr %70, align 8
  %72 = call ptr @typegetter_wrapper(ptr %71, ptr %66)
  %73 = load ptr, ptr %64, align 8
  %74 = ptrtoint ptr %73 to i64
  %75 = icmp eq i64 %74, ptrtoint (ptr @nil_typ to i64)
  %76 = icmp eq i64 %74, 0
  %77 = or i1 %75, %76
  %78 = icmp eq i1 %77, false
  store i1 %78, ptr %4, align 1
  %79 = load i1, ptr %4, align 1
  br i1 %79, label %80, label %143

80:                                               ; preds = %65
  %81 = getelementptr { ptr, i160 }, ptr %64, i32 0, i32 0
  store ptr %81, ptr %.reg2mem15, align 8
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %82 = load ptr, ptr %.reload17, align 8
  store ptr %82, ptr %6, align 8
  %83 = getelementptr { ptr, i160 }, ptr %64, i32 0, i32 1
  store ptr %83, ptr %.reg2mem12, align 8
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %84 = load i160, ptr %.reload14, align 4
  store i160 %84, ptr %5, align 4
  %85 = load ptr, ptr %6, align 8
  store ptr %85, ptr %8, align 8
  %86 = load i160, ptr %5, align 4
  store i160 %86, ptr %7, align 4
  %87 = load ptr, ptr %8, align 8
  %88 = insertvalue { ptr, i160 } undef, ptr %87, 0
  %89 = load i160, ptr %7, align 4
  %90 = insertvalue { ptr, i160 } %88, i160 %89, 1
  %.reload26 = load ptr, ptr %.reg2mem24, align 8
  %91 = load ptr, ptr %.reload26, align 8
  %92 = load ptr, ptr %19, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 80, ptr %92)
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %94 = load i32, ptr %.reload20, align 4
  %95 = getelementptr ptr, ptr %92, i32 %94
  %96 = getelementptr ptr, ptr %95, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr { ptr, ptr }, ptr %97, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = call { ptr } %99(ptr %91) #17
  store { ptr } %100, ptr %9, align 8
  %101 = load ptr, ptr %9, align 8
  %102 = call i1 %101({ ptr, i160 } %90)
  store i1 %102, ptr %10, align 1
  %103 = load i1, ptr %10, align 1
  %104 = zext i1 %103 to i32
  store i32 %104, ptr %.reg2mem10, align 4
  %105 = xor i1 %103, true
  %106 = zext i1 %105 to i32
  store i32 %106, ptr %.reg2mem8, align 4
  br i1 %103, label %107, label %108

107:                                              ; preds = %80
  br label %142

108:                                              ; preds = %80
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %109 = load ptr, ptr %.reload25, align 8
  %110 = load ptr, ptr %19, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 80, ptr %110)
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %112 = load i32, ptr %.reload19, align 4
  %113 = getelementptr ptr, ptr %110, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call { ptr, ptr, ptr, i32 } %117(ptr %109) #17
  store { ptr, ptr, ptr, i32 } %118, ptr %11, align 8
  call void @assume_offset(ptr %11, ptr @Iterator2)
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %126, 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %129 = load i32, ptr %128, align 4
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, i32 %129, 3
  %131 = call ptr @llvm.invariant.start.p0(i64 0, ptr %12)
  %132 = call ptr @llvm.invariant.start.p0(i64 24, ptr %120)
  %133 = getelementptr ptr, ptr %120, i32 %129
  %134 = getelementptr ptr, ptr %133, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = call ptr @behavior_wrapper(ptr %135, { ptr, ptr, ptr, i32 } %130, ptr %13)
  %137 = call { ptr, i160 } %136({ ptr, ptr, ptr, i32 } %130, { ptr, ptr, ptr, i32 } %130, ptr %12) #15
  store { ptr, i160 } %137, ptr %14, align 8
  %138 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  store ptr %139, ptr %.reload16, align 8
  %140 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 1
  %141 = load i160, ptr %140, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  store i160 %141, ptr %.reload13, align 4
  br label %142

142:                                              ; preds = %108, %107
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem32, align 4
  store i32 %.reload11, ptr %.reg2mem34, align 4
  br label %144

143:                                              ; preds = %65
  store i32 0, ptr %.reg2mem32, align 4
  store i32 2, ptr %.reg2mem34, align 4
  br label %144

144:                                              ; preds = %143, %142
  %.reload35 = load i32, ptr %.reg2mem34, align 4
  %.reload33 = load i32, ptr %.reg2mem32, align 4
  store i32 %.reload35, ptr %.reg2mem5, align 4
  store i32 %.reload33, ptr %.reg2mem3, align 4
  br label %145

145:                                              ; preds = %144
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %146 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %146, label %147, label %148

147:                                              ; preds = %145
  br label %65

148:                                              ; preds = %145
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %149 = zext i32 %.reload6 to i64
  %150 = trunc i64 %149 to i32
  switch i32 %150, label %156 [
    i32 1, label %151
  ]

151:                                              ; preds = %148
  %152 = load ptr, ptr %6, align 8
  %153 = insertvalue { ptr, i160 } undef, ptr %152, 0
  %154 = load i160, ptr %5, align 4
  %155 = insertvalue { ptr, i160 } %153, i160 %154, 1
  store { ptr, i160 } %155, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem30, align 8
  br label %162

156:                                              ; preds = %148
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %17, align 4
  %157 = load i64, ptr %17, align 4
  store i64 %157, ptr %16, align 4
  %158 = load ptr, ptr %16, align 8
  %159 = insertvalue { ptr, i160 } undef, ptr %158, 0
  %160 = load i160, ptr %15, align 4
  %161 = insertvalue { ptr, i160 } %159, i160 %160, 1
  store { ptr, i160 } %161, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem30, align 8
  br label %162

162:                                              ; preds = %156, %151
  %.reload31 = load { ptr, i160 }, ptr %.reg2mem30, align 8
  ret { ptr, i160 } %.reload31
}

define { ptr } @FilterIterator2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @FilterIterator2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterator2_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FilterIterator2_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { ptr } @FilterIterable2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @FilterIterable2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable2_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FilterIterable2_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define { i64, i64 } @_data_size_MapIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @MapIterable2_field_MapIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @MapIterable2_field_MapIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterable2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 16, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [51 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @MapIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 17, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [51 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @MapIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 19, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [51 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @MapIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 23, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [51 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @MapIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 24, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 25, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 26, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @MapIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 27, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [51 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @MapIterable2_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @MapIterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterable2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterable2)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 408, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #16
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 408, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 3
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @MapIterable2)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 408, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %18) #17
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %27, ptr %28, align 8
  call void @assume_offset(ptr %28, ptr @Iterable2)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 184, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = alloca {}, align 8
  %48 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41) #15
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterator2)
  %64 = load ptr, ptr %10, align 8
  %65 = load ptr, ptr %5, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 408, ptr %65)
  %67 = load i32, ptr %16, align 4
  %68 = getelementptr ptr, ptr %65, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 3
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %64) #17
  %74 = alloca ptr, align 8
  store { ptr } %73, ptr %74, align 8
  %75 = load ptr, ptr %10, align 8
  %76 = load ptr, ptr %5, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 408, ptr %76)
  %78 = load i32, ptr %16, align 4
  %79 = getelementptr ptr, ptr %76, i32 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %75)
  %82 = load ptr, ptr %10, align 8
  %83 = load ptr, ptr %5, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 408, ptr %83)
  %85 = load i32, ptr %16, align 4
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr @typegetter_wrapper(ptr %88, ptr %82)
  %90 = alloca [3 x ptr], align 8
  store ptr @MapIterator2, ptr %90, align 8
  %91 = getelementptr ptr, ptr %90, i32 1
  store ptr %81, ptr %91, align 8
  %92 = getelementptr ptr, ptr %90, i32 2
  store ptr %89, ptr %92, align 8
  %93 = load ptr, ptr %90, align 8
  %94 = getelementptr ptr, ptr %93, i32 6
  %95 = load ptr, ptr %94, align 8
  %96 = call { i64, i64 } @size_wrapper(ptr %95, ptr %90)
  %97 = extractvalue { i64, i64 } %96, 0
  %98 = call ptr @bump_malloc(i64 %97)
  store ptr %81, ptr %98, align 8
  %99 = getelementptr ptr, ptr %98, i32 1
  store ptr %89, ptr %99, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 16, ptr %98)
  %101 = alloca i32, align 4
  %102 = alloca ptr, align 8
  %103 = alloca ptr, align 8
  %104 = alloca ptr, align 8
  store ptr @MapIterator2, ptr %104, align 8
  store ptr %98, ptr %103, align 8
  store i32 10, ptr %101, align 4
  %105 = load ptr, ptr %10, align 8
  %106 = load ptr, ptr %5, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 408, ptr %106)
  %108 = load i32, ptr %16, align 4
  %109 = getelementptr ptr, ptr %106, i32 %108
  %110 = getelementptr ptr, ptr %109, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = call { ptr, ptr, ptr, i32 } %113(ptr %105) #17
  %115 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %114, ptr %115, align 8
  call void @assume_offset(ptr %115, ptr @Iterable2)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %126, 3
  %128 = alloca [0 x ptr], align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 0, ptr %128)
  %130 = call ptr @llvm.invariant.start.p0(i64 184, ptr %117)
  %131 = getelementptr ptr, ptr %117, i32 %126
  %132 = getelementptr ptr, ptr %131, i32 1
  %133 = load ptr, ptr %132, align 8
  %134 = alloca {}, align 8
  %135 = call ptr @behavior_wrapper(ptr %133, { ptr, ptr, ptr, i32 } %127, ptr %134)
  %136 = call { ptr, ptr, ptr, i32 } %135({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %128) #15
  %137 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %136, ptr %137, align 8
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 0
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %141 = load ptr, ptr %139, align 8
  store ptr %141, ptr %140, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %144 = load ptr, ptr %142, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 2
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %150 = load i32, ptr %148, align 4
  store i32 %150, ptr %149, align 4
  call void @set_offset(ptr %138, ptr @Iterator2)
  %151 = load ptr, ptr %10, align 8
  %152 = load ptr, ptr %5, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 408, ptr %152)
  %154 = load i32, ptr %16, align 4
  %155 = getelementptr ptr, ptr %152, i32 %154
  %156 = getelementptr ptr, ptr %155, i32 3
  %157 = load ptr, ptr %156, align 8
  %158 = getelementptr { ptr, ptr }, ptr %157, i32 0, i32 0
  %159 = load ptr, ptr %158, align 8
  %160 = call { ptr } %159(ptr %151) #17
  %161 = alloca ptr, align 8
  store { ptr } %160, ptr %161, align 8
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %164 = load ptr, ptr %140, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %166 = load ptr, ptr %143, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %168 = load ptr, ptr %146, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %170 = load i32, ptr %149, align 4
  store i32 %170, ptr %169, align 4
  call void @set_offset(ptr %162, ptr @Iterator2)
  %171 = load ptr, ptr %163, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %169, align 4
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = load ptr, ptr %161, align 8
  %180 = insertvalue { ptr } undef, ptr %179, 0
  %181 = load ptr, ptr %104, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = load ptr, ptr %103, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %183, 1
  %185 = load ptr, ptr %102, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %185, 2
  %187 = load i32, ptr %101, align 4
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, i32 %187, 3
  %189 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %190 = getelementptr [3 x ptr], ptr %189, i32 0, i32 1
  store ptr %81, ptr %190, align 8
  %191 = getelementptr [3 x ptr], ptr %189, i32 0, i32 2
  store ptr null, ptr %191, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 16, ptr %189)
  store ptr @Iterator2, ptr %189, align 8
  %193 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %194 = getelementptr [4 x ptr], ptr %193, i32 0, i32 2
  store ptr %81, ptr %194, align 8
  %195 = getelementptr [4 x ptr], ptr %193, i32 0, i32 1
  store ptr %89, ptr %195, align 8
  %196 = getelementptr [4 x ptr], ptr %193, i32 0, i32 3
  store ptr null, ptr %196, align 8
  %197 = call ptr @llvm.invariant.start.p0(i64 24, ptr %193)
  store ptr @function_typ, ptr %193, align 8
  %198 = alloca [2 x ptr], align 8
  %199 = getelementptr [2 x ptr], ptr %198, i32 0, i32 0
  store ptr %189, ptr %199, align 8
  %200 = getelementptr [2 x ptr], ptr %198, i32 0, i32 1
  store ptr %193, ptr %200, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 4, ptr %198)
  %202 = call ptr @llvm.invariant.start.p0(i64 88, ptr %181)
  %203 = getelementptr ptr, ptr %181, i32 %187
  %204 = getelementptr ptr, ptr %203, i32 4
  %205 = load ptr, ptr %204, align 8
  %206 = alloca { ptr, ptr }, align 8
  %207 = getelementptr { ptr, ptr }, ptr %206, i32 0, i32 0
  store ptr %171, ptr %207, align 8
  %208 = getelementptr { ptr, ptr }, ptr %206, i32 0, i32 1
  store ptr @function_typ, ptr %208, align 8
  %209 = call ptr @behavior_wrapper(ptr %205, { ptr, ptr, ptr, i32 } %188, ptr %206)
  call void %209({ ptr, ptr, ptr, i32 } %188, { ptr, ptr, ptr, i32 } %188, ptr %198, { ptr, ptr, ptr, i32 } %178, { ptr } %180) #15
  %210 = alloca { ptr, ptr, ptr, i32 }, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 0
  %212 = load ptr, ptr %104, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 1
  %214 = load ptr, ptr %103, align 8
  store ptr %214, ptr %213, align 8
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 2
  %216 = load ptr, ptr %102, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 3
  %218 = load i32, ptr %101, align 4
  store i32 %218, ptr %217, align 4
  call void @set_offset(ptr %210, ptr @Iterator2)
  %219 = load ptr, ptr %211, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %219, 0
  %221 = load ptr, ptr %213, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %221, 1
  %223 = load ptr, ptr %215, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %223, 2
  %225 = load i32, ptr %217, align 4
  %226 = insertvalue { ptr, ptr, ptr, i32 } %224, i32 %225, 3
  ret { ptr, ptr, ptr, i32 } %226
}

define { i64, i64 } @_data_size_MapIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @MapIterator2_field_MapIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @MapIterator2_field_MapIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Iterator2, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Iterator2 to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 6, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [11 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @MapIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [11 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @MapIterator2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @Iterator2)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %23, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %38 = load ptr, ptr %26, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %40 = load ptr, ptr %29, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %42 = load i32, ptr %32, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %34, ptr @Iterator2)
  %43 = load ptr, ptr %12, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = load i32, ptr %18, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %35, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %37, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %39, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %41, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  call void %51(ptr %43, { ptr, ptr, ptr, i32 } %59) #16
  %60 = alloca ptr, align 8
  store { ptr } %4, ptr %60, align 8
  %61 = load ptr, ptr %12, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 88, ptr %62)
  %64 = load i32, ptr %18, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 3
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %60, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  call void %69(ptr %61, { ptr } %71) #16
  ret void
}

define { ptr, i160 } @MapIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i64, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %13, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  store ptr %19, ptr %.reg2mem10, align 8
  %20 = load ptr, ptr %18, align 8
  %.reload14 = load ptr, ptr %.reg2mem10, align 8
  store ptr %20, ptr %.reload14, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  store ptr %25, ptr %.reg2mem5, align 8
  %26 = load i32, ptr %24, align 4
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  store i32 %26, ptr %.reload9, align 4
  call void @set_offset(ptr %14, ptr @MapIterator2)
  %.reload13 = load ptr, ptr %.reg2mem10, align 8
  %27 = load ptr, ptr %.reload13, align 8
  %28 = load ptr, ptr %14, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 88, ptr %28)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %30 = load i32, ptr %.reload8, align 4
  %31 = getelementptr ptr, ptr %28, i32 %30
  %32 = getelementptr ptr, ptr %31, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr { ptr, ptr }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = call { ptr, ptr, ptr, i32 } %35(ptr %27) #17
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %36, ptr %37, align 8
  call void @assume_offset(ptr %37, ptr @Iterator2)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %42, 1
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %45, 2
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %48, 3
  %50 = alloca [0 x ptr], align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr %50)
  %52 = call ptr @llvm.invariant.start.p0(i64 24, ptr %39)
  %53 = getelementptr ptr, ptr %39, i32 %48
  %54 = getelementptr ptr, ptr %53, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = alloca {}, align 8
  %57 = call ptr @behavior_wrapper(ptr %55, { ptr, ptr, ptr, i32 } %49, ptr %56)
  %58 = call { ptr, i160 } %57({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr %50) #15
  %59 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %58, ptr %59, align 8
  %.reload12 = load ptr, ptr %.reg2mem10, align 8
  %60 = load ptr, ptr %.reload12, align 8
  %61 = load ptr, ptr %14, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 88, ptr %61)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %63 = load i32, ptr %.reload7, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr @typegetter_wrapper(ptr %65, ptr %60)
  %67 = load ptr, ptr %59, align 8
  %68 = ptrtoint ptr %67 to i64
  %69 = icmp eq i64 %68, ptrtoint (ptr @nil_typ to i64)
  %70 = icmp eq i64 %68, 0
  %71 = or i1 %69, %70
  %72 = icmp eq i1 %71, false
  %73 = alloca i1, align 1
  store i1 %72, ptr %73, align 1
  %74 = load i1, ptr %73, align 1
  br i1 %74, label %75, label %104

75:                                               ; preds = %3
  %76 = getelementptr { ptr, i160 }, ptr %59, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  store ptr %77, ptr %5, align 8
  %78 = getelementptr { ptr, i160 }, ptr %59, i32 0, i32 1
  %79 = load i160, ptr %78, align 4
  store i160 %79, ptr %4, align 4
  %80 = load ptr, ptr %5, align 8
  store ptr %80, ptr %7, align 8
  %81 = load i160, ptr %4, align 4
  store i160 %81, ptr %6, align 4
  %82 = load ptr, ptr %7, align 8
  %83 = insertvalue { ptr, i160 } undef, ptr %82, 0
  %84 = load i160, ptr %6, align 4
  %85 = insertvalue { ptr, i160 } %83, i160 %84, 1
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %86 = load ptr, ptr %.reload11, align 8
  %87 = load ptr, ptr %14, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 88, ptr %87)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %89 = load i32, ptr %.reload6, align 4
  %90 = getelementptr ptr, ptr %87, i32 %89
  %91 = getelementptr ptr, ptr %90, i32 3
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = call { ptr } %94(ptr %86) #17
  store { ptr } %95, ptr %8, align 8
  %96 = load ptr, ptr %8, align 8
  %97 = call { ptr, i160 } %96({ ptr, i160 } %85)
  store { ptr, i160 } %97, ptr %9, align 8
  %98 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, i160 } undef, ptr %99, 0
  %101 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %102 = load i160, ptr %101, align 4
  %103 = insertvalue { ptr, i160 } %100, i160 %102, 1
  store { ptr, i160 } %103, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem15, align 8
  br label %110

104:                                              ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %12, align 4
  %105 = load i64, ptr %12, align 4
  store i64 %105, ptr %11, align 4
  %106 = load ptr, ptr %11, align 8
  %107 = insertvalue { ptr, i160 } undef, ptr %106, 0
  %108 = load i160, ptr %10, align 4
  %109 = insertvalue { ptr, i160 } %107, i160 %108, 1
  store { ptr, i160 } %109, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem15, align 8
  br label %110

110:                                              ; preds = %104, %75
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  store { ptr, i160 } %.reload16, ptr %.reg2mem, align 8
  br label %111

111:                                              ; preds = %110
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr } @MapIterator2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @MapIterator2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterator2_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @MapIterator2_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr } @MapIterable2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @MapIterable2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable2_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @MapIterable2_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { i64, i64 } @_data_size_ArrayIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ArrayIterator_field_ArrayIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Array, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Array to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 5, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [10 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 6, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [10 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ArrayIterator)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @Array)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @Array)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 80, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %34, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %36, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %38, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %40, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  call void %50(ptr %42, { ptr, ptr, ptr, i32 } %58) #16
  %59 = alloca i32, align 4
  store i32 0, ptr %59, align 4
  %60 = load ptr, ptr %11, align 8
  %61 = load ptr, ptr %6, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 80, ptr %61)
  %63 = load i32, ptr %17, align 4
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load i32, ptr %59, align 4
  call void %68(ptr %60, i32 %69) #16
  ret void
}

define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca { ptr, i160 }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem21 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  store ptr %25, ptr %.reg2mem13, align 8
  %26 = load ptr, ptr %24, align 8
  %.reload20 = load ptr, ptr %.reg2mem13, align 8
  store ptr %26, ptr %.reload20, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr %31, ptr %.reg2mem5, align 8
  %32 = load i32, ptr %30, align 4
  %.reload12 = load ptr, ptr %.reg2mem5, align 8
  store i32 %32, ptr %.reload12, align 4
  call void @set_offset(ptr %20, ptr @ArrayIterator)
  %.reload19 = load ptr, ptr %.reg2mem13, align 8
  %33 = load ptr, ptr %.reload19, align 8
  %34 = load ptr, ptr %20, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 80, ptr %34)
  %.reload11 = load ptr, ptr %.reg2mem5, align 8
  %36 = load i32, ptr %.reload11, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = call i32 %41(ptr %33) #17
  %43 = alloca i32, align 4
  store i32 %42, ptr %43, align 4
  %.reload18 = load ptr, ptr %.reg2mem13, align 8
  %44 = load ptr, ptr %.reload18, align 8
  %45 = load ptr, ptr %20, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 80, ptr %45)
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  %47 = load i32, ptr %.reload10, align 4
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call { ptr, ptr, ptr, i32 } %52(ptr %44) #17
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %53, ptr %54, align 8
  call void @assume_offset(ptr %54, ptr @Array)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = alloca [0 x ptr], align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 0, ptr %67)
  %69 = call ptr @llvm.invariant.start.p0(i64 552, ptr %56)
  %70 = getelementptr ptr, ptr %56, i32 %65
  %71 = getelementptr ptr, ptr %70, i32 7
  %72 = load ptr, ptr %71, align 8
  %73 = alloca {}, align 8
  %74 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %66, ptr %73)
  %75 = call i32 %74({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67) #15
  %76 = alloca i32, align 4
  store i32 %75, ptr %76, align 4
  %77 = load i32, ptr %43, align 4
  %78 = load i32, ptr %76, align 4
  %79 = icmp sge i32 %77, %78
  %80 = alloca i1, align 1
  store i1 %79, ptr %80, align 1
  %81 = load i1, ptr %80, align 1
  br i1 %81, label %82, label %88

82:                                               ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %6, align 4
  %83 = load i64, ptr %6, align 4
  store i64 %83, ptr %5, align 4
  %84 = load ptr, ptr %5, align 8
  %85 = insertvalue { ptr, i160 } undef, ptr %84, 0
  %86 = load i160, ptr %4, align 4
  %87 = insertvalue { ptr, i160 } %85, i160 %86, 1
  store { ptr, i160 } %87, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem21, align 8
  br label %165

88:                                               ; preds = %3
  %.reload17 = load ptr, ptr %.reg2mem13, align 8
  %89 = load ptr, ptr %.reload17, align 8
  %90 = load ptr, ptr %20, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 80, ptr %90)
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %92 = load i32, ptr %.reload9, align 4
  %93 = getelementptr ptr, ptr %90, i32 %92
  %94 = getelementptr ptr, ptr %93, i32 2
  %95 = load ptr, ptr %94, align 8
  %96 = getelementptr { ptr, ptr }, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = call i32 %97(ptr %89) #17
  store i32 %98, ptr %7, align 4
  store i32 1, ptr %8, align 4
  %99 = load i32, ptr %7, align 4
  %100 = load i32, ptr %8, align 4
  %101 = add i32 %99, %100
  store i32 %101, ptr %9, align 4
  %.reload16 = load ptr, ptr %.reg2mem13, align 8
  %102 = load ptr, ptr %.reload16, align 8
  %103 = load ptr, ptr %20, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 80, ptr %103)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %105 = load i32, ptr %.reload8, align 4
  %106 = getelementptr ptr, ptr %103, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = load i32, ptr %9, align 4
  call void %110(ptr %102, i32 %111) #16
  %.reload15 = load ptr, ptr %.reg2mem13, align 8
  %112 = load ptr, ptr %.reload15, align 8
  %113 = load ptr, ptr %20, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 80, ptr %113)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %115 = load i32, ptr %.reload7, align 4
  %116 = getelementptr ptr, ptr %113, i32 %115
  %117 = getelementptr ptr, ptr %116, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = call i32 %120(ptr %112) #17
  store i32 %121, ptr %10, align 4
  store i32 1, ptr %11, align 4
  %122 = load i32, ptr %10, align 4
  %123 = load i32, ptr %11, align 4
  %124 = sub i32 %122, %123
  store i32 %124, ptr %12, align 4
  %125 = load i32, ptr %12, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %126 = load ptr, ptr %.reload14, align 8
  %127 = load ptr, ptr %20, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 80, ptr %127)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %129 = load i32, ptr %.reload6, align 4
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr, ptr }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = call { ptr, ptr, ptr, i32 } %134(ptr %126) #17
  store { ptr, ptr, ptr, i32 } %135, ptr %13, align 8
  call void @assume_offset(ptr %13, ptr @Array)
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %137, 0
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 1
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %143, 2
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %146 = load i32, ptr %145, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 %146, 3
  %148 = getelementptr [1 x ptr], ptr %14, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %148, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 1, ptr %14)
  %150 = call ptr @llvm.invariant.start.p0(i64 552, ptr %137)
  %151 = getelementptr ptr, ptr %137, i32 %146
  %152 = getelementptr ptr, ptr %151, i32 13
  %153 = load ptr, ptr %152, align 8
  %154 = getelementptr { ptr }, ptr %15, i32 0, i32 0
  store ptr @i32_typ, ptr %154, align 8
  %155 = call ptr @behavior_wrapper(ptr %153, { ptr, ptr, ptr, i32 } %147, ptr %15)
  %156 = call { ptr, i160 } %155({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %14, i32 %125) #15
  store { ptr, i160 } %156, ptr %16, align 8
  %157 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %158 = load ptr, ptr %157, align 8
  store ptr %158, ptr %18, align 8
  %159 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %160 = load i160, ptr %159, align 4
  store i160 %160, ptr %17, align 4
  %161 = load ptr, ptr %18, align 8
  %162 = insertvalue { ptr, i160 } undef, ptr %161, 0
  %163 = load i160, ptr %17, align 4
  %164 = insertvalue { ptr, i160 } %162, i160 %163, 1
  store { ptr, i160 } %164, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem21, align 8
  br label %165

165:                                              ; preds = %88, %82
  %.reload22 = load { ptr, i160 }, ptr %.reg2mem21, align 8
  store { ptr, i160 } %.reload22, ptr %.reg2mem, align 8
  br label %166

166:                                              ; preds = %165
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i32 @ArrayIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @ArrayIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ArrayIterator_setter_array(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  ret void
}

define i32 @Array_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i32, ptr %19, align 4
  ret i32 %20
}

define void @Array_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca i32, align 4
  store i32 %1, ptr %21, align 4
  %22 = load i32, ptr %21, align 4
  store i32 %22, ptr %20, align 4
  ret void
}

define i32 @Array_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Array_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define { ptr } @Array_getter_buffer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @Array_setter_buffer(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { i64, i64 } @_data_size_Math(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Math_B__Self_sqrt_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 7, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define ptr @Math_B__Self_abs_xPtri32__Self_abs_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %0, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %2, align 1
  %9 = load i1, ptr %2, align 1
  %10 = select i1 %9, i32 8, i32 9
  store i32 %10, ptr %.reg2mem, align 4
  br i1 %9, label %11, label %12

11:                                               ; preds = %1
  br label %16

12:                                               ; preds = %1
  %13 = load ptr, ptr %0, align 8
  %14 = ptrtoint ptr %13 to i64
  %15 = icmp eq i64 %14, ptrtoint (ptr @f64_typ to i64)
  store i1 %15, ptr %3, align 1
  br label %16

16:                                               ; preds = %12, %11
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %5, align 4
  %17 = load i32, ptr %5, align 4
  %18 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %17
  %19 = getelementptr ptr, ptr %18, i32 10
  %20 = load ptr, ptr %19, align 8
  ret ptr %20
}

define ptr @Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %0, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @f64_typ to i64)
  store i1 %10, ptr %4, align 1
  %11 = load i1, ptr %4, align 1
  %12 = select i1 %11, i32 11, i32 10
  store i32 %12, ptr %.reg2mem, align 4
  br i1 %11, label %13, label %18

13:                                               ; preds = %1
  %14 = getelementptr ptr, ptr %0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = ptrtoint ptr %15 to i64
  %17 = icmp eq i64 %16, ptrtoint (ptr @f64_typ to i64)
  store i1 %17, ptr %2, align 1
  br label %26

18:                                               ; preds = %1
  %19 = load ptr, ptr %0, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @i32_typ to i64)
  store i1 %21, ptr %5, align 1
  %22 = getelementptr ptr, ptr %0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = ptrtoint ptr %23 to i64
  %25 = icmp eq i64 %24, ptrtoint (ptr @i32_typ to i64)
  store i1 %25, ptr %3, align 1
  br label %26

26:                                               ; preds = %18, %13
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %7, align 4
  %27 = load i32, ptr %7, align 4
  %28 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %27
  %29 = getelementptr ptr, ptr %28, i32 10
  %30 = load ptr, ptr %29, align 8
  ret ptr %30
}

define ptr @Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %0, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @f64_typ to i64)
  store i1 %10, ptr %4, align 1
  %11 = load i1, ptr %4, align 1
  %12 = select i1 %11, i32 13, i32 12
  store i32 %12, ptr %.reg2mem, align 4
  br i1 %11, label %13, label %18

13:                                               ; preds = %1
  %14 = getelementptr ptr, ptr %0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = ptrtoint ptr %15 to i64
  %17 = icmp eq i64 %16, ptrtoint (ptr @f64_typ to i64)
  store i1 %17, ptr %2, align 1
  br label %26

18:                                               ; preds = %1
  %19 = load ptr, ptr %0, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @i32_typ to i64)
  store i1 %21, ptr %5, align 1
  %22 = getelementptr ptr, ptr %0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = ptrtoint ptr %23 to i64
  %25 = icmp eq i64 %24, ptrtoint (ptr @i32_typ to i64)
  store i1 %25, ptr %3, align 1
  br label %26

26:                                               ; preds = %18, %13
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %7, align 4
  %27 = load i32, ptr %7, align 4
  %28 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %27
  %29 = getelementptr ptr, ptr %28, i32 10
  %30 = load ptr, ptr %29, align 8
  ret ptr %30
}

define ptr @Math_B__Self_round_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 14, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define ptr @Math_B__Self_floor_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 15, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define ptr @Math_B__Self_ceiling_xPtrf64(ptr %0) {
  %2 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = alloca ptr, align 8
  %5 = load ptr, ptr %0, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = icmp eq i64 %6, ptrtoint (ptr @f64_typ to i64)
  store i1 %7, ptr %2, align 1
  store i32 16, ptr %4, align 4
  %8 = load i32, ptr %4, align 4
  %9 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %8
  %10 = getelementptr ptr, ptr %9, i32 10
  %11 = load ptr, ptr %10, align 8
  ret ptr %11
}

define double @Math__Self_sqrt_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.sqrt.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

define { ptr, i64 } @Math__Self_abs_xPtri32(ptr %0, { ptr, i64 } %1) {
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i64, align 8
  %11 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %11, align 8
  %12 = alloca i32, align 4
  %13 = getelementptr { ptr, i64 }, ptr %11, i32 0, i32 1
  %14 = load i32, ptr %13, align 4
  store i32 %14, ptr %12, align 4
  %15 = alloca i32, align 4
  store i32 0, ptr %15, align 4
  %16 = load i32, ptr %12, align 4
  %17 = load i32, ptr %15, align 4
  %18 = icmp sge i32 %16, %17
  %19 = alloca i1, align 1
  store i1 %18, ptr %19, align 1
  %20 = load i1, ptr %19, align 1
  br i1 %20, label %21, label %28

21:                                               ; preds = %2
  %22 = load i32, ptr %12, align 4
  store i32 %22, ptr %3, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %5, align 4
  %23 = load i64, ptr %5, align 4
  store i64 %23, ptr %4, align 4
  %24 = load ptr, ptr %4, align 8
  %25 = insertvalue { ptr, i64 } undef, ptr %24, 0
  %26 = load i64, ptr %3, align 4
  %27 = insertvalue { ptr, i64 } %25, i64 %26, 1
  store { ptr, i64 } %27, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem5, align 8
  br label %38

28:                                               ; preds = %2
  store i32 -1, ptr %6, align 4
  %29 = load i32, ptr %6, align 4
  %30 = load i32, ptr %12, align 4
  %31 = mul i32 %29, %30
  store i32 %31, ptr %7, align 4
  %32 = load i32, ptr %7, align 4
  store i32 %32, ptr %8, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %10, align 4
  %33 = load i64, ptr %10, align 4
  store i64 %33, ptr %9, align 4
  %34 = load ptr, ptr %9, align 8
  %35 = insertvalue { ptr, i64 } undef, ptr %34, 0
  %36 = load i64, ptr %8, align 4
  %37 = insertvalue { ptr, i64 } %35, i64 %36, 1
  store { ptr, i64 } %37, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem5, align 8
  br label %38

38:                                               ; preds = %28, %21
  %.reload6 = load { ptr, i64 }, ptr %.reg2mem5, align 8
  store { ptr, i64 } %.reload6, ptr %.reg2mem, align 8
  br label %39

39:                                               ; preds = %38
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_abs_xPtrf64(ptr %0, { ptr, i64 } %1) {
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca i64, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i64, align 8
  %13 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %13, align 8
  %14 = alloca double, align 8
  %15 = getelementptr { ptr, i64 }, ptr %13, i32 0, i32 1
  %16 = load double, ptr %15, align 8
  store double %16, ptr %14, align 8
  %17 = alloca double, align 8
  store double 0.000000e+00, ptr %17, align 8
  %18 = load double, ptr %14, align 8
  %19 = load double, ptr %17, align 8
  %20 = fcmp oge double %18, %19
  %21 = alloca i1, align 1
  store i1 %20, ptr %21, align 1
  %22 = load i1, ptr %21, align 1
  br i1 %22, label %23, label %30

23:                                               ; preds = %2
  %24 = load double, ptr %14, align 8
  store double %24, ptr %3, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %5, align 4
  %25 = load i64, ptr %5, align 4
  store i64 %25, ptr %4, align 4
  %26 = load ptr, ptr %4, align 8
  %27 = insertvalue { ptr, i64 } undef, ptr %26, 0
  %28 = load i64, ptr %3, align 4
  %29 = insertvalue { ptr, i64 } %27, i64 %28, 1
  store { ptr, i64 } %29, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem5, align 8
  br label %43

30:                                               ; preds = %2
  store double 0.000000e+00, ptr %6, align 8
  store double 1.000000e+00, ptr %7, align 8
  %31 = load double, ptr %6, align 8
  %32 = load double, ptr %7, align 8
  %33 = fsub double %31, %32
  store double %33, ptr %8, align 8
  %34 = load double, ptr %8, align 8
  %35 = load double, ptr %14, align 8
  %36 = fmul double %34, %35
  store double %36, ptr %9, align 8
  %37 = load double, ptr %9, align 8
  store double %37, ptr %10, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %12, align 4
  %38 = load i64, ptr %12, align 4
  store i64 %38, ptr %11, align 4
  %39 = load ptr, ptr %11, align 8
  %40 = insertvalue { ptr, i64 } undef, ptr %39, 0
  %41 = load i64, ptr %10, align 4
  %42 = insertvalue { ptr, i64 } %40, i64 %41, 1
  store { ptr, i64 } %42, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem5, align 8
  br label %43

43:                                               ; preds = %30, %23
  %.reload6 = load { ptr, i64 }, ptr %.reg2mem5, align 8
  store { ptr, i64 } %.reload6, ptr %.reg2mem, align 8
  br label %44

44:                                               ; preds = %43
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_max_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %8, align 8
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %12, align 8
  %13 = alloca i32, align 4
  %14 = getelementptr { ptr, i64 }, ptr %12, i32 0, i32 1
  %15 = load i32, ptr %14, align 4
  store i32 %15, ptr %13, align 4
  %16 = load i32, ptr %9, align 4
  %17 = load i32, ptr %13, align 4
  %18 = icmp sgt i32 %16, %17
  %19 = alloca i1, align 1
  store i1 %18, ptr %19, align 1
  %20 = load i1, ptr %19, align 1
  %21 = select i1 %20, ptr %4, ptr %6
  %22 = select i1 %20, ptr %9, ptr %13
  %23 = select i1 %20, ptr %5, ptr %7
  %24 = getelementptr { ptr, i64 }, ptr %21, i32 0, i32 1
  %25 = load i32, ptr %22, align 4
  store i32 %25, ptr %24, align 4
  %26 = getelementptr { ptr, i64 }, ptr %21, i32 0, i32 0
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %23, align 4
  %27 = load i64, ptr %23, align 4
  store i64 %27, ptr %26, align 4
  %28 = load ptr, ptr %26, align 8
  %29 = insertvalue { ptr, i64 } undef, ptr %28, 0
  %30 = load i64, ptr %24, align 4
  %31 = insertvalue { ptr, i64 } %29, i64 %30, 1
  ret { ptr, i64 } %31
}

define { ptr, i64 } @Math__Self_max_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %8, align 8
  %9 = alloca double, align 8
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load double, ptr %10, align 8
  store double %11, ptr %9, align 8
  %12 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %12, align 8
  %13 = alloca double, align 8
  %14 = getelementptr { ptr, i64 }, ptr %12, i32 0, i32 1
  %15 = load double, ptr %14, align 8
  store double %15, ptr %13, align 8
  %16 = load double, ptr %9, align 8
  %17 = load double, ptr %13, align 8
  %18 = fcmp ogt double %16, %17
  %19 = alloca i1, align 1
  store i1 %18, ptr %19, align 1
  %20 = load i1, ptr %19, align 1
  %21 = select i1 %20, ptr %4, ptr %6
  %22 = select i1 %20, ptr %9, ptr %13
  %23 = select i1 %20, ptr %5, ptr %7
  %24 = getelementptr { ptr, i64 }, ptr %21, i32 0, i32 1
  %25 = load double, ptr %22, align 8
  store double %25, ptr %24, align 8
  %26 = getelementptr { ptr, i64 }, ptr %21, i32 0, i32 0
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %23, align 4
  %27 = load i64, ptr %23, align 4
  store i64 %27, ptr %26, align 4
  %28 = load ptr, ptr %26, align 8
  %29 = insertvalue { ptr, i64 } undef, ptr %28, 0
  %30 = load i64, ptr %24, align 4
  %31 = insertvalue { ptr, i64 } %29, i64 %30, 1
  ret { ptr, i64 } %31
}

define { ptr, i64 } @Math__Self_min_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %8, align 8
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %12, align 8
  %13 = alloca i32, align 4
  %14 = getelementptr { ptr, i64 }, ptr %12, i32 0, i32 1
  %15 = load i32, ptr %14, align 4
  store i32 %15, ptr %13, align 4
  %16 = load i32, ptr %9, align 4
  %17 = load i32, ptr %13, align 4
  %18 = icmp slt i32 %16, %17
  %19 = alloca i1, align 1
  store i1 %18, ptr %19, align 1
  %20 = load i1, ptr %19, align 1
  %21 = select i1 %20, ptr %4, ptr %6
  %22 = select i1 %20, ptr %9, ptr %13
  %23 = select i1 %20, ptr %5, ptr %7
  %24 = getelementptr { ptr, i64 }, ptr %21, i32 0, i32 1
  %25 = load i32, ptr %22, align 4
  store i32 %25, ptr %24, align 4
  %26 = getelementptr { ptr, i64 }, ptr %21, i32 0, i32 0
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %23, align 4
  %27 = load i64, ptr %23, align 4
  store i64 %27, ptr %26, align 4
  %28 = load ptr, ptr %26, align 8
  %29 = insertvalue { ptr, i64 } undef, ptr %28, 0
  %30 = load i64, ptr %24, align 4
  %31 = insertvalue { ptr, i64 } %29, i64 %30, 1
  ret { ptr, i64 } %31
}

define { ptr, i64 } @Math__Self_min_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %8, align 8
  %9 = alloca double, align 8
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load double, ptr %10, align 8
  store double %11, ptr %9, align 8
  %12 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %12, align 8
  %13 = alloca double, align 8
  %14 = getelementptr { ptr, i64 }, ptr %12, i32 0, i32 1
  %15 = load double, ptr %14, align 8
  store double %15, ptr %13, align 8
  %16 = load double, ptr %9, align 8
  %17 = load double, ptr %13, align 8
  %18 = fcmp olt double %16, %17
  %19 = alloca i1, align 1
  store i1 %18, ptr %19, align 1
  %20 = load i1, ptr %19, align 1
  %21 = select i1 %20, ptr %4, ptr %6
  %22 = select i1 %20, ptr %9, ptr %13
  %23 = select i1 %20, ptr %5, ptr %7
  %24 = getelementptr { ptr, i64 }, ptr %21, i32 0, i32 1
  %25 = load double, ptr %22, align 8
  store double %25, ptr %24, align 8
  %26 = getelementptr { ptr, i64 }, ptr %21, i32 0, i32 0
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %23, align 4
  %27 = load i64, ptr %23, align 4
  store i64 %27, ptr %26, align 4
  %28 = load ptr, ptr %26, align 8
  %29 = insertvalue { ptr, i64 } undef, ptr %28, 0
  %30 = load i64, ptr %24, align 4
  %31 = insertvalue { ptr, i64 } %29, i64 %30, 1
  ret { ptr, i64 } %31
}

define double @Math__Self_round_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.round.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

define double @Math__Self_floor_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.floor.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

define double @Math__Self_ceiling_xPtrf64(ptr %0, double %1) {
  %3 = alloca double, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store double %1, ptr %3, align 8
  %4 = load double, ptr %3, align 8
  %5 = call double @llvm.ceil.f64(double %4)
  %6 = alloca double, align 8
  store double %5, ptr %6, align 8
  %7 = load double, ptr %6, align 8
  ret double %7
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.ceil.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.round.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.sqrt.f64(double) #1

define { i64, i64 } @_data_size_Integer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Integer_B_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 7, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer_B__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 8, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer_B__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 9, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer_B__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 10, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer_B__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 11, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer_B_print_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Integer_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = load i32, ptr %19, align 4
  call void %27(ptr %20, i32 %28) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @Integer__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %20) #17
  %29 = alloca i32, align 4
  store i32 %28, ptr %29, align 4
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %19, align 4
  %32 = add i32 %30, %31
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %34, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr ptr, ptr %35, i32 6
  %37 = load ptr, ptr %36, align 8
  %38 = call { i64, i64 } @size_wrapper(ptr %37, ptr %34)
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = call ptr @bump_malloc(i64 %39)
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  store ptr @Integer, ptr %44, align 8
  store ptr %40, ptr %43, align 8
  store i32 10, ptr %41, align 4
  %45 = load ptr, ptr %11, align 8
  %46 = load ptr, ptr %6, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 104, ptr %46)
  %48 = load i32, ptr %17, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %45) #17
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %55 = load i32, ptr %54, align 4
  %56 = load i32, ptr %19, align 4
  %57 = add i32 %55, %56
  %58 = alloca i32, align 4
  store i32 %57, ptr %58, align 4
  %59 = load i32, ptr %58, align 4
  %60 = load ptr, ptr %44, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %43, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %42, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %41, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca [1 x ptr], align 8
  %69 = getelementptr [1 x ptr], ptr %68, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 1, ptr %68)
  %71 = call ptr @llvm.invariant.start.p0(i64 104, ptr %60)
  %72 = getelementptr ptr, ptr %60, i32 %66
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = alloca { ptr }, align 8
  %76 = getelementptr { ptr }, ptr %75, i32 0, i32 0
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %67, ptr %75)
  call void %77({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %68, i32 %59) #15
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %44, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %82 = load ptr, ptr %43, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %84 = load ptr, ptr %42, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %86 = load i32, ptr %41, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %78, ptr @Integer)
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %81, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %85, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define { ptr, ptr, ptr, i32 } @Integer__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %20) #17
  %29 = alloca i32, align 4
  store i32 %28, ptr %29, align 4
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %19, align 4
  %32 = sub i32 %30, %31
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %34, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr ptr, ptr %35, i32 6
  %37 = load ptr, ptr %36, align 8
  %38 = call { i64, i64 } @size_wrapper(ptr %37, ptr %34)
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = call ptr @bump_malloc(i64 %39)
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  store ptr @Integer, ptr %44, align 8
  store ptr %40, ptr %43, align 8
  store i32 10, ptr %41, align 4
  %45 = load ptr, ptr %11, align 8
  %46 = load ptr, ptr %6, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 104, ptr %46)
  %48 = load i32, ptr %17, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %45) #17
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %55 = load i32, ptr %54, align 4
  %56 = load i32, ptr %19, align 4
  %57 = sub i32 %55, %56
  %58 = alloca i32, align 4
  store i32 %57, ptr %58, align 4
  %59 = load i32, ptr %58, align 4
  %60 = load ptr, ptr %44, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %43, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %42, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %41, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca [1 x ptr], align 8
  %69 = getelementptr [1 x ptr], ptr %68, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 1, ptr %68)
  %71 = call ptr @llvm.invariant.start.p0(i64 104, ptr %60)
  %72 = getelementptr ptr, ptr %60, i32 %66
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = alloca { ptr }, align 8
  %76 = getelementptr { ptr }, ptr %75, i32 0, i32 0
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %67, ptr %75)
  call void %77({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %68, i32 %59) #15
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %44, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %82 = load ptr, ptr %43, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %84 = load ptr, ptr %42, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %86 = load i32, ptr %41, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %78, ptr @Integer)
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %81, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %85, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define { ptr, ptr, ptr, i32 } @Integer__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %20) #17
  %29 = alloca i32, align 4
  store i32 %28, ptr %29, align 4
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %19, align 4
  %32 = mul i32 %30, %31
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %34, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr ptr, ptr %35, i32 6
  %37 = load ptr, ptr %36, align 8
  %38 = call { i64, i64 } @size_wrapper(ptr %37, ptr %34)
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = call ptr @bump_malloc(i64 %39)
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  store ptr @Integer, ptr %44, align 8
  store ptr %40, ptr %43, align 8
  store i32 10, ptr %41, align 4
  %45 = load ptr, ptr %11, align 8
  %46 = load ptr, ptr %6, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 104, ptr %46)
  %48 = load i32, ptr %17, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %45) #17
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %55 = load i32, ptr %54, align 4
  %56 = load i32, ptr %19, align 4
  %57 = mul i32 %55, %56
  %58 = alloca i32, align 4
  store i32 %57, ptr %58, align 4
  %59 = load i32, ptr %58, align 4
  %60 = load ptr, ptr %44, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %43, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %42, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %41, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca [1 x ptr], align 8
  %69 = getelementptr [1 x ptr], ptr %68, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 1, ptr %68)
  %71 = call ptr @llvm.invariant.start.p0(i64 104, ptr %60)
  %72 = getelementptr ptr, ptr %60, i32 %66
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = alloca { ptr }, align 8
  %76 = getelementptr { ptr }, ptr %75, i32 0, i32 0
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %67, ptr %75)
  call void %77({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %68, i32 %59) #15
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %44, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %82 = load ptr, ptr %43, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %84 = load ptr, ptr %42, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %86 = load i32, ptr %41, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %78, ptr @Integer)
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %81, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %85, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define { ptr, ptr, ptr, i32 } @Integer__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %20) #17
  %29 = alloca i32, align 4
  store i32 %28, ptr %29, align 4
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %19, align 4
  %32 = sdiv i32 %30, %31
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %34, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr ptr, ptr %35, i32 6
  %37 = load ptr, ptr %36, align 8
  %38 = call { i64, i64 } @size_wrapper(ptr %37, ptr %34)
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = call ptr @bump_malloc(i64 %39)
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca ptr, align 8
  store ptr @Integer, ptr %44, align 8
  store ptr %40, ptr %43, align 8
  store i32 10, ptr %41, align 4
  %45 = load ptr, ptr %11, align 8
  %46 = load ptr, ptr %6, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 104, ptr %46)
  %48 = load i32, ptr %17, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %45) #17
  %54 = alloca i32, align 4
  store i32 %53, ptr %54, align 4
  %55 = load i32, ptr %54, align 4
  %56 = load i32, ptr %19, align 4
  %57 = sdiv i32 %55, %56
  %58 = alloca i32, align 4
  store i32 %57, ptr %58, align 4
  %59 = load i32, ptr %58, align 4
  %60 = load ptr, ptr %44, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %43, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %42, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %41, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca [1 x ptr], align 8
  %69 = getelementptr [1 x ptr], ptr %68, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 1, ptr %68)
  %71 = call ptr @llvm.invariant.start.p0(i64 104, ptr %60)
  %72 = getelementptr ptr, ptr %60, i32 %66
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = alloca { ptr }, align 8
  %76 = getelementptr { ptr }, ptr %75, i32 0, i32 0
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %67, ptr %75)
  call void %77({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %68, i32 %59) #15
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %44, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %82 = load ptr, ptr %43, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %84 = load ptr, ptr %42, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %86 = load i32, ptr %41, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %78, ptr @Integer)
  %87 = load ptr, ptr %79, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %81, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %85, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define void @Integer_print_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Integer)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 104, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #17
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load i32, ptr %27, align 4
  store i32 %30, ptr %28, align 4
  %31 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %31, align 4
  %32 = load i64, ptr %31, align 4
  store i64 %32, ptr %29, align 4
  %33 = load ptr, ptr %29, align 8
  %34 = insertvalue { ptr, i160 } undef, ptr %33, 0
  %35 = load i160, ptr %28, align 4
  %36 = insertvalue { ptr, i160 } %34, i160 %35, 1
  %37 = alloca [1 x ptr], align 8
  %38 = getelementptr [1 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 1, ptr %37)
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %41 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %42 = alloca { ptr }, align 8
  %43 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  store ptr %33, ptr %43, align 8
  %44 = call ptr @class_behavior_wrapper(ptr %41, ptr %42)
  call void %44(ptr %37, { ptr, i160 } %36) #15
  ret void
}

define i32 @Integer_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Integer_setter_value(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_BigBoy(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @BigBoy_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 2, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [6 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @BigBoy_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 3, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [6 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @BigBoy_introduce_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @BigBoy)
  %18 = alloca i32, align 4
  store i32 11, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([10 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <10 x i8>, ptr @reyrn_Here_I_am, align 16
  store <10 x i8> %33, ptr %32, align 16
  %34 = alloca i32, align 4
  store i32 10, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 11, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  store ptr @String, ptr %43, align 8
  store ptr %42, ptr %44, align 8
  store i32 10, ptr %45, align 4
  %46 = alloca i32, align 4
  store i32 10, ptr %46, align 4
  %47 = alloca i32, align 4
  store i32 11, ptr %47, align 4
  %48 = load ptr, ptr %24, align 8
  %49 = insertvalue { ptr } undef, ptr %48, 0
  %50 = load i32, ptr %46, align 4
  %51 = load i32, ptr %47, align 4
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %44, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 2
  %60 = load i32, ptr %45, align 4
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %60, 3
  %62 = alloca [3 x ptr], align 8
  %63 = getelementptr [3 x ptr], ptr %62, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %62, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = getelementptr [3 x ptr], ptr %62, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 9, ptr %62)
  %67 = call ptr @llvm.invariant.start.p0(i64 280, ptr %53)
  %68 = getelementptr ptr, ptr %53, i32 %60
  %69 = getelementptr ptr, ptr %68, i32 4
  %70 = load ptr, ptr %69, align 8
  %71 = alloca { ptr, ptr, ptr }, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 0
  store ptr @buffer_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 1
  store ptr @i32_typ, ptr %73, align 8
  %74 = getelementptr { ptr, ptr, ptr }, ptr %71, i32 0, i32 2
  store ptr @i32_typ, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr %70, { ptr, ptr, ptr, i32 } %61, ptr %71)
  call void %75({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr %62, { ptr } %49, i32 %50, i32 %51) #15
  %76 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, i160 } undef, ptr %77, 0
  %79 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 1
  %80 = load i160, ptr %79, align 4
  %81 = insertvalue { ptr, i160 } %78, i160 %80, 1
  %82 = alloca [1 x ptr], align 8
  %83 = getelementptr [1 x ptr], ptr %82, i32 0, i32 0
  store ptr @_parameterization_String, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 1, ptr %82)
  %85 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %86 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %87 = alloca { ptr }, align 8
  %88 = getelementptr { ptr }, ptr %87, i32 0, i32 0
  store ptr %77, ptr %88, align 8
  %89 = call ptr @class_behavior_wrapper(ptr %86, ptr %87)
  call void %89(ptr %82, { ptr, i160 } %81) #15
  ret void
}

define { i64, i64 } @_data_size_Integer2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Integer2_B_value_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 10, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [40 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Integer2_B_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 11, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [40 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer2_B__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 12, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [40 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer2_B__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 13, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [40 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer2_B__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 14, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [40 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer2_B__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 15, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [40 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Integer2_B_print_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 16, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [40 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Integer2_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 17, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [40 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Integer2_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 18, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [40 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i32 @Integer2_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Integer2)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 320, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #17
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = load i32, ptr %27, align 4
  ret i32 %28
}

define { ptr, ptr, ptr, i32 } @Integer2_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Integer2)
  %18 = alloca i32, align 4
  store i32 9, ptr %18, align 4
  %19 = load i32, ptr %18, align 4
  %20 = sext i32 %19 to i64
  %21 = alloca ptr, align 8
  %22 = mul i64 %20, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call ptr @bump_malloc(i64 %22)
  store ptr %23, ptr %21, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = alloca i32, align 4
  store i32 0, ptr %27, align 4
  %28 = load ptr, ptr %24, align 8
  %29 = load i32, ptr %27, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 ptrtoint (ptr getelementptr ([8 x i8], ptr null, i32 1) to i64), %30
  %32 = getelementptr i8, ptr %28, i64 %31
  %33 = load <8 x i8>, ptr @mlkom_Integer, align 8
  store <8 x i8> %33, ptr %32, align 8
  %34 = alloca i32, align 4
  store i32 8, ptr %34, align 4
  %35 = alloca i32, align 4
  store i32 9, ptr %35, align 4
  %36 = alloca [1 x ptr], align 8
  store ptr @String, ptr %36, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %36)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  %43 = alloca i32, align 4
  %44 = alloca ptr, align 8
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  store ptr @String, ptr %46, align 8
  store ptr %42, ptr %45, align 8
  store i32 10, ptr %43, align 4
  %47 = alloca i32, align 4
  store i32 8, ptr %47, align 4
  %48 = alloca i32, align 4
  store i32 9, ptr %48, align 4
  %49 = load ptr, ptr %24, align 8
  %50 = insertvalue { ptr } undef, ptr %49, 0
  %51 = load i32, ptr %47, align 4
  %52 = load i32, ptr %48, align 4
  %53 = load ptr, ptr %46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %45, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %44, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %43, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  %61 = alloca [3 x ptr], align 8
  %62 = getelementptr [3 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %61, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %63, align 8
  %64 = getelementptr [3 x ptr], ptr %61, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr %61)
  %66 = call ptr @llvm.invariant.start.p0(i64 280, ptr %53)
  %67 = getelementptr ptr, ptr %53, i32 %59
  %68 = getelementptr ptr, ptr %67, i32 4
  %69 = load ptr, ptr %68, align 8
  %70 = alloca { ptr, ptr, ptr }, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr }, ptr %70, i32 0, i32 2
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %60, ptr %70)
  call void %74({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr } %50, i32 %51, i32 %52) #15
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %77 = load ptr, ptr %46, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %79 = load ptr, ptr %45, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %81 = load ptr, ptr %44, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %83 = load i32, ptr %43, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %75, ptr @String)
  %84 = load ptr, ptr %76, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %78, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %80, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %82, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  ret { ptr, ptr, ptr, i32 } %91
}

define i32 @Integer2_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Integer2_setter_value(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_Animal(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Animal_B_init_agePtri32_hpPtrf64_skillPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr %1, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @i32_typ to i64)
  store i1 %10, ptr %5, align 1
  %11 = getelementptr ptr, ptr %1, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @f64_typ to i64)
  store i1 %14, ptr %4, align 1
  %15 = getelementptr ptr, ptr %1, i32 2
  %16 = load ptr, ptr %15, align 8
  %17 = ptrtoint ptr %16 to i64
  %18 = icmp eq i64 %17, ptrtoint (ptr @i32_typ to i64)
  store i1 %18, ptr %3, align 1
  store i32 8, ptr %7, align 4
  %19 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %20 = load i32, ptr %7, align 4
  %21 = getelementptr [13 x ptr], ptr %19, i32 0, i32 %20
  %22 = getelementptr ptr, ptr %21, i32 10
  %23 = load ptr, ptr %22, align 8
  ret ptr %23
}

define ptr @Animal_B_say_age_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Animal_B_say_skill_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 10, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Animal_B_say_messagePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 11, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [13 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Animal_B_do_nothing_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [13 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Animal_init_agePtri32_hpPtrf64_skillPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, double %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Animal)
  %21 = alloca i32, align 4
  store i32 %3, ptr %21, align 4
  %22 = load ptr, ptr %13, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = load i32, ptr %19, align 4
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load i32, ptr %21, align 4
  call void %29(ptr %22, i32 %30) #16
  %31 = alloca double, align 8
  store double %4, ptr %31, align 8
  %32 = load ptr, ptr %13, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 104, ptr %33)
  %35 = load i32, ptr %19, align 4
  %36 = getelementptr ptr, ptr %33, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = load double, ptr %31, align 8
  call void %40(ptr %32, double %41) #16
  %42 = alloca i32, align 4
  store i32 %5, ptr %42, align 4
  %43 = load ptr, ptr %13, align 8
  %44 = load ptr, ptr %8, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 104, ptr %44)
  %46 = load i32, ptr %19, align 4
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load i32, ptr %42, align 4
  call void %51(ptr %43, i32 %52) #16
  ret void
}

define void @Animal_say_age_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Animal)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 104, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #17
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = load i32, ptr %27, align 4
  %29 = load ptr, ptr %7, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = load ptr, ptr %10, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 1
  %33 = load ptr, ptr %13, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = load i32, ptr %16, align 4
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %35, 3
  %37 = alloca [1 x ptr], align 8
  %38 = getelementptr [1 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 1, ptr %37)
  %40 = call ptr @llvm.invariant.start.p0(i64 104, ptr %29)
  %41 = getelementptr ptr, ptr %29, i32 %35
  %42 = getelementptr ptr, ptr %41, i32 6
  %43 = load ptr, ptr %42, align 8
  %44 = alloca { ptr }, align 8
  %45 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  store ptr @i32_typ, ptr %45, align 8
  %46 = call ptr @behavior_wrapper(ptr %43, { ptr, ptr, ptr, i32 } %36, ptr %44)
  call void %46({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr %37, i32 %28) #15
  %47 = load ptr, ptr %10, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 104, ptr %48)
  %50 = load i32, ptr %16, align 4
  %51 = getelementptr ptr, ptr %48, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = call i32 %54(ptr %47) #17
  %56 = alloca i32, align 4
  store i32 %55, ptr %56, align 4
  %57 = load i32, ptr %56, align 4
  %58 = load ptr, ptr %7, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %58, 0
  %60 = load ptr, ptr %10, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %60, 1
  %62 = load ptr, ptr %13, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 2
  %64 = load i32, ptr %16, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %64, 3
  %66 = alloca [1 x ptr], align 8
  %67 = getelementptr [1 x ptr], ptr %66, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 1, ptr %66)
  %69 = call ptr @llvm.invariant.start.p0(i64 104, ptr %58)
  %70 = getelementptr ptr, ptr %58, i32 %64
  %71 = getelementptr ptr, ptr %70, i32 6
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr }, align 8
  %74 = getelementptr { ptr }, ptr %73, i32 0, i32 0
  store ptr @i32_typ, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %65, ptr %73)
  call void %75({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %66, i32 %57) #15
  ret void
}

define void @Animal_say_skill_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %9, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  call void @set_offset(ptr %10, ptr @Animal)
  %23 = load ptr, ptr %15, align 8
  %24 = load ptr, ptr %10, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 104, ptr %24)
  %26 = load i32, ptr %21, align 4
  %27 = getelementptr ptr, ptr %24, i32 %26
  %28 = getelementptr ptr, ptr %27, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = call i32 %31(ptr %23) #17
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = alloca i1, align 1
  store i1 true, ptr %34, align 1
  %35 = load i1, ptr %34, align 1
  br i1 %35, label %36, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %50

36:                                               ; preds = %3
  %37 = load i32, ptr %33, align 4
  store i32 %37, ptr %4, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %6, align 4
  %38 = load i64, ptr %6, align 4
  store i64 %38, ptr %5, align 4
  %39 = load ptr, ptr %5, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = load i160, ptr %4, align 4
  %42 = insertvalue { ptr, i160 } %40, i160 %41, 1
  %43 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %45 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %46 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %47 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr %39, ptr %47, align 8
  %48 = call ptr @class_behavior_wrapper(ptr %46, ptr %8)
  call void %48(ptr %7, { ptr, i160 } %42) #15
  %49 = load i32, ptr %33, align 4
  store i32 %49, ptr %33, align 4
  br label %50

50:                                               ; preds = %._crit_edge, %36
  ret void
}

define void @Animal_say_messagePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Animal)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = alloca i160, align 8
  %21 = alloca ptr, align 8
  %22 = load i32, ptr %19, align 4
  store i32 %22, ptr %20, align 4
  %23 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %23, align 4
  %24 = load i64, ptr %23, align 4
  store i64 %24, ptr %21, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = insertvalue { ptr, i160 } undef, ptr %25, 0
  %27 = load i160, ptr %20, align 4
  %28 = insertvalue { ptr, i160 } %26, i160 %27, 1
  %29 = alloca [1 x ptr], align 8
  %30 = getelementptr [1 x ptr], ptr %29, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 1, ptr %29)
  %32 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %33 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %34 = alloca { ptr }, align 8
  %35 = getelementptr { ptr }, ptr %34, i32 0, i32 0
  store ptr %25, ptr %35, align 8
  %36 = call ptr @class_behavior_wrapper(ptr %33, ptr %34)
  call void %36(ptr %29, { ptr, i160 } %28) #15
  ret void
}

define { ptr, i160 } @Animal_do_nothing_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Animal)
  %18 = alloca i32, align 4
  store i32 5, ptr %18, align 4
  %19 = alloca double, align 8
  store double 5.000000e+00, ptr %19, align 8
  %20 = alloca i32, align 4
  store i32 5, ptr %20, align 4
  %21 = alloca [1 x ptr], align 8
  store ptr @Animal, ptr %21, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 6
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = call ptr @bump_malloc(i64 %26)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr @Animal, ptr %28, align 8
  store ptr %27, ptr %29, align 8
  store i32 10, ptr %30, align 4
  %31 = alloca i32, align 4
  store i32 5, ptr %31, align 4
  %32 = alloca double, align 8
  store double 5.000000e+00, ptr %32, align 8
  %33 = alloca i32, align 4
  store i32 5, ptr %33, align 4
  %34 = load i32, ptr %31, align 4
  %35 = load double, ptr %32, align 8
  %36 = load i32, ptr %33, align 4
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = load ptr, ptr %29, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %43, 2
  %45 = load i32, ptr %30, align 4
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %45, 3
  %47 = alloca [3 x ptr], align 8
  %48 = getelementptr [3 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %48, align 8
  %49 = getelementptr [3 x ptr], ptr %47, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %49, align 8
  %50 = getelementptr [3 x ptr], ptr %47, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 9, ptr %47)
  %52 = call ptr @llvm.invariant.start.p0(i64 104, ptr %38)
  %53 = getelementptr ptr, ptr %38, i32 %45
  %54 = getelementptr ptr, ptr %53, i32 3
  %55 = load ptr, ptr %54, align 8
  %56 = alloca { ptr, ptr, ptr }, align 8
  %57 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 0
  store ptr @i32_typ, ptr %57, align 8
  %58 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 1
  store ptr @f64_typ, ptr %58, align 8
  %59 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 2
  store ptr @i32_typ, ptr %59, align 8
  %60 = call ptr @behavior_wrapper(ptr %55, { ptr, ptr, ptr, i32 } %46, ptr %56)
  call void %60({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr %47, i32 %34, double %35, i32 %36) #15
  %61 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, i160 } undef, ptr %62, 0
  %64 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %65 = load i160, ptr %64, align 4
  %66 = insertvalue { ptr, i160 } %63, i160 %65, 1
  ret { ptr, i160 } %66
}

define i32 @Animal_getter_skill(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Animal_setter_skill(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca i32, align 4
  store i32 %1, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  store i32 %16, ptr %14, align 4
  ret void
}

define double @Animal_getter_hp(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load double, ptr %7, align 8
  ret double %8
}

define void @Animal_setter_hp(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca double, align 8
  store double %1, ptr %9, align 8
  %10 = load double, ptr %9, align 8
  store double %10, ptr %8, align 8
  ret void
}

define i32 @Animal_getter_age(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Animal_setter_age(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_Beaver(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @Beaver_B_init_colorPtri32_namePtrf64({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @f64_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 5, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [8 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Beaver_B__ADD_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 6, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [8 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Beaver_B_say_color_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 7, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [8 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @Beaver_init_colorPtri32_namePtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, double %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Beaver)
  %20 = alloca i32, align 4
  store i32 %3, ptr %20, align 4
  %21 = load ptr, ptr %12, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 64, ptr %22)
  %24 = load i32, ptr %18, align 4
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load i32, ptr %20, align 4
  call void %28(ptr %21, i32 %29) #16
  %30 = alloca double, align 8
  store double %4, ptr %30, align 8
  %31 = load ptr, ptr %12, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 64, ptr %32)
  %34 = load i32, ptr %18, align 4
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = load double, ptr %30, align 8
  call void %39(ptr %31, double %40) #16
  ret void
}

define void @Beaver__ADD_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Beaver)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %20) #17
  %29 = alloca i32, align 4
  store i32 %28, ptr %29, align 4
  %30 = load i32, ptr %29, align 4
  %31 = load i32, ptr %19, align 4
  %32 = add i32 %30, %31
  %33 = alloca i32, align 4
  store i32 %32, ptr %33, align 4
  %34 = load ptr, ptr %11, align 8
  %35 = load ptr, ptr %6, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 64, ptr %35)
  %37 = load i32, ptr %17, align 4
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load i32, ptr %33, align 4
  call void %41(ptr %34, i32 %42) #16
  ret void
}

define void @Beaver_say_color_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Beaver)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 64, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #17
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load i32, ptr %27, align 4
  store i32 %30, ptr %28, align 4
  %31 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %31, align 4
  %32 = load i64, ptr %31, align 4
  store i64 %32, ptr %29, align 4
  %33 = load ptr, ptr %29, align 8
  %34 = insertvalue { ptr, i160 } undef, ptr %33, 0
  %35 = load i160, ptr %28, align 4
  %36 = insertvalue { ptr, i160 } %34, i160 %35, 1
  %37 = alloca [1 x ptr], align 8
  %38 = getelementptr [1 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 1, ptr %37)
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %41 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %42 = alloca { ptr }, align 8
  %43 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  store ptr %33, ptr %43, align 8
  %44 = call ptr @class_behavior_wrapper(ptr %41, ptr %42)
  call void %44(ptr %37, { ptr, i160 } %36) #15
  ret void
}

define double @Beaver_getter_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load double, ptr %7, align 8
  ret double %8
}

define void @Beaver_setter_name(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca double, align 8
  store double %1, ptr %9, align 8
  %10 = load double, ptr %9, align 8
  store double %10, ptr %8, align 8
  ret void
}

define i32 @Beaver_getter_color(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Beaver_setter_color(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_ListNode(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @ListNode_B_init_dataPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @i32_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 7, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [12 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @ListNode_B_push_nextListNode({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @ListNode, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @ListNode to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 8, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [12 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ListNode_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 9, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [12 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ListNode_B_data_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 10, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [12 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @ListNode_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 11, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [12 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ListNode_init_dataPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = alloca i32, align 4
  store i32 %3, ptr %19, align 4
  %20 = load ptr, ptr %11, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = load i32, ptr %17, align 4
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr { ptr, ptr }, ptr %25, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = load i32, ptr %19, align 4
  call void %27(ptr %20, i32 %28) #16
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = alloca i64, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %31, align 4
  %32 = load i64, ptr %31, align 4
  store i64 %32, ptr %30, align 4
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 96, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %30, align 8
  %43 = insertvalue { ptr, i160 } undef, ptr %42, 0
  %44 = load i160, ptr %29, align 4
  %45 = insertvalue { ptr, i160 } %43, i160 %44, 1
  call void %41(ptr %33, { ptr, i160 } %45) #16
  ret void
}

define { ptr, ptr, ptr, i32 } @ListNode_push_nextListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @ListNode)
  %33 = load ptr, ptr %11, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 96, ptr %34)
  %36 = load i32, ptr %17, align 4
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %46 = load i160, ptr %45, align 4
  %47 = insertvalue { ptr, i160 } %44, i160 %46, 1
  call void %41(ptr %33, { ptr, i160 } %47) #16
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %22, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %52 = load ptr, ptr %25, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %54 = load ptr, ptr %28, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %56 = load i32, ptr %31, align 4
  store i32 %56, ptr %55, align 4
  call void @set_offset(ptr %48, ptr @ListNode)
  %57 = load ptr, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = load ptr, ptr %51, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 1
  %61 = load ptr, ptr %53, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %61, 2
  %63 = load i32, ptr %55, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %63, 3
  ret { ptr, ptr, ptr, i32 } %64
}

define { ptr, i160 } @ListNode_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ListNode)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 96, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = getelementptr ptr, ptr %22, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, i160 } %26(ptr %18) #17
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %27, ptr %28, align 8
  %29 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, i160 } undef, ptr %30, 0
  %32 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %33 = load i160, ptr %32, align 4
  %34 = insertvalue { ptr, i160 } %31, i160 %33, 1
  ret { ptr, i160 } %34
}

define i32 @ListNode_data_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ListNode)
  %18 = load ptr, ptr %10, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 96, ptr %19)
  %21 = load i32, ptr %16, align 4
  %22 = getelementptr ptr, ptr %19, i32 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr { ptr, ptr }, ptr %23, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %18) #17
  %27 = alloca i32, align 4
  store i32 %26, ptr %27, align 4
  %28 = load i32, ptr %27, align 4
  ret i32 %28
}

define { ptr, ptr, ptr, i32 } @ListNode_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @ListNode)
  %18 = alloca i32, align 4
  store i32 0, ptr %18, align 4
  %19 = alloca [1 x ptr], align 8
  store ptr @ListNode, ptr %19, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr ptr, ptr %20, i32 6
  %22 = load ptr, ptr %21, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr %22, ptr %19)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  %26 = alloca i32, align 4
  %27 = alloca ptr, align 8
  %28 = alloca ptr, align 8
  %29 = alloca ptr, align 8
  store ptr @ListNode, ptr %29, align 8
  store ptr %25, ptr %28, align 8
  store i32 10, ptr %26, align 4
  %30 = alloca i32, align 4
  store i32 0, ptr %30, align 4
  %31 = load i32, ptr %30, align 4
  %32 = load ptr, ptr %29, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %28, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %27, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %26, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  %40 = alloca [1 x ptr], align 8
  %41 = getelementptr [1 x ptr], ptr %40, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %41, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 1, ptr %40)
  %43 = call ptr @llvm.invariant.start.p0(i64 96, ptr %32)
  %44 = getelementptr ptr, ptr %32, i32 %38
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = alloca { ptr }, align 8
  %48 = getelementptr { ptr }, ptr %47, i32 0, i32 0
  store ptr @i32_typ, ptr %48, align 8
  %49 = call ptr @behavior_wrapper(ptr %46, { ptr, ptr, ptr, i32 } %39, ptr %47)
  call void %49({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40, i32 %31) #15
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %29, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %54 = load ptr, ptr %28, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %56 = load ptr, ptr %27, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %58 = load i32, ptr %26, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %50, ptr @ListNode)
  %59 = alloca i32, align 4
  %60 = alloca ptr, align 8
  %61 = alloca ptr, align 8
  %62 = alloca ptr, align 8
  %63 = load ptr, ptr %51, align 8
  store ptr %63, ptr %62, align 8
  %64 = load ptr, ptr %53, align 8
  store ptr %64, ptr %61, align 8
  %65 = load ptr, ptr %55, align 8
  store ptr %65, ptr %60, align 8
  %66 = load i32, ptr %57, align 4
  store i32 %66, ptr %59, align 4
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %69 = load ptr, ptr %7, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %71 = load ptr, ptr %10, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %73 = load ptr, ptr %13, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %75 = load i32, ptr %16, align 4
  store i32 %75, ptr %74, align 4
  call void @set_offset(ptr %67, ptr @ListNode)
  %76 = load ptr, ptr %68, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = load ptr, ptr %70, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %80 = load ptr, ptr %72, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %82 = load i32, ptr %74, align 4
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = load ptr, ptr %62, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %61, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %60, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %59, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  %92 = alloca [1 x ptr], align 8
  %93 = getelementptr [1 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %93, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 1, ptr %92)
  %95 = call ptr @llvm.invariant.start.p0(i64 96, ptr %84)
  %96 = getelementptr ptr, ptr %84, i32 %90
  %97 = getelementptr ptr, ptr %96, i32 3
  %98 = load ptr, ptr %97, align 8
  %99 = alloca { ptr }, align 8
  %100 = getelementptr { ptr }, ptr %99, i32 0, i32 0
  store ptr %76, ptr %100, align 8
  %101 = call ptr @behavior_wrapper(ptr %98, { ptr, ptr, ptr, i32 } %91, ptr %99)
  %102 = call { ptr, ptr, ptr, i32 } %101({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr %92, { ptr, ptr, ptr, i32 } %83) #15
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %102, ptr %103, align 8
  %104 = alloca { ptr, ptr, ptr, i32 }, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 0
  %107 = load ptr, ptr %105, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 1
  %110 = load ptr, ptr %108, align 8
  store ptr %110, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 2
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 3
  %116 = load i32, ptr %114, align 4
  store i32 %116, ptr %115, align 4
  call void @set_offset(ptr %104, ptr @ListNode)
  %117 = alloca [1 x ptr], align 8
  store ptr @ListIterator, ptr %117, align 8
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr ptr, ptr %118, i32 6
  %120 = load ptr, ptr %119, align 8
  %121 = call { i64, i64 } @size_wrapper(ptr %120, ptr %117)
  %122 = extractvalue { i64, i64 } %121, 0
  %123 = call ptr @bump_malloc(i64 %122)
  %124 = alloca i32, align 4
  %125 = alloca ptr, align 8
  %126 = alloca ptr, align 8
  %127 = alloca ptr, align 8
  store ptr @ListIterator, ptr %127, align 8
  store ptr %123, ptr %126, align 8
  store i32 10, ptr %124, align 4
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 0
  %130 = load ptr, ptr %62, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %132 = load ptr, ptr %61, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 2
  %134 = load ptr, ptr %60, align 8
  store ptr %134, ptr %133, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %136 = load i32, ptr %59, align 4
  store i32 %136, ptr %135, align 4
  call void @set_offset(ptr %128, ptr @ListNode)
  %137 = load ptr, ptr %129, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %137, 0
  %139 = load ptr, ptr %131, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %139, 1
  %141 = load ptr, ptr %133, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %140, ptr %141, 2
  %143 = load i32, ptr %135, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %142, i32 %143, 3
  %145 = load ptr, ptr %127, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %145, 0
  %147 = load ptr, ptr %126, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %147, 1
  %149 = load ptr, ptr %125, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %149, 2
  %151 = load i32, ptr %124, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %151, 3
  %153 = alloca [1 x ptr], align 8
  %154 = getelementptr [1 x ptr], ptr %153, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %154, align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 1, ptr %153)
  %156 = call ptr @llvm.invariant.start.p0(i64 40, ptr %145)
  %157 = getelementptr ptr, ptr %145, i32 %151
  %158 = getelementptr ptr, ptr %157, i32 1
  %159 = load ptr, ptr %158, align 8
  %160 = alloca { ptr }, align 8
  %161 = getelementptr { ptr }, ptr %160, i32 0, i32 0
  store ptr %137, ptr %161, align 8
  %162 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %152, ptr %160)
  call void %162({ ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %152, ptr %153, { ptr, ptr, ptr, i32 } %144) #15
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %165 = load ptr, ptr %127, align 8
  store ptr %165, ptr %164, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %167 = load ptr, ptr %126, align 8
  store ptr %167, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %169 = load ptr, ptr %125, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %171 = load i32, ptr %124, align 4
  store i32 %171, ptr %170, align 4
  call void @set_offset(ptr %163, ptr @ListIterator)
  %172 = load ptr, ptr %164, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %172, 0
  %174 = load ptr, ptr %166, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } %173, ptr %174, 1
  %176 = load ptr, ptr %168, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %176, 2
  %178 = load i32, ptr %170, align 4
  %179 = insertvalue { ptr, ptr, ptr, i32 } %177, i32 %178, 3
  ret { ptr, ptr, ptr, i32 } %179
}

define { i64, i64 } @_data_size_ListIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @ListIterator_B_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @ListNode, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @ListNode to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 3, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [5 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @ListIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 4, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [5 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @ListIterator_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListIterator)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @ListNode)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %22, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %37 = load ptr, ptr %25, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %39 = load ptr, ptr %28, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %41 = load i32, ptr %31, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %33, ptr @ListNode)
  %42 = load ptr, ptr %11, align 8
  %43 = load ptr, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 40, ptr %43)
  %45 = load i32, ptr %17, align 4
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %34, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %36, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %38, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %40, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  call void %49(ptr %42, { ptr, ptr, ptr, i32 } %57) #16
  ret void
}

define { ptr, i160 } @ListIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %10, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  store ptr %16, ptr %.reg2mem10, align 8
  %17 = load ptr, ptr %15, align 8
  %.reload14 = load ptr, ptr %.reg2mem10, align 8
  store ptr %17, ptr %.reload14, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  store ptr %22, ptr %.reg2mem5, align 8
  %23 = load i32, ptr %21, align 4
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  store i32 %23, ptr %.reload9, align 4
  call void @set_offset(ptr %11, ptr @ListIterator)
  %.reload13 = load ptr, ptr %.reg2mem10, align 8
  %24 = load ptr, ptr %.reload13, align 8
  %25 = load ptr, ptr %11, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 40, ptr %25)
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %27 = load i32, ptr %.reload8, align 4
  %28 = getelementptr ptr, ptr %25, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = call { ptr, ptr, ptr, i32 } %31(ptr %24) #17
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %32, ptr %33, align 8
  call void @assume_offset(ptr %33, ptr @ListNode)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %38, 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %44 = load i32, ptr %43, align 4
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %44, 3
  %46 = alloca [0 x ptr], align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 0, ptr %46)
  %48 = call ptr @llvm.invariant.start.p0(i64 96, ptr %35)
  %49 = getelementptr ptr, ptr %35, i32 %44
  %50 = getelementptr ptr, ptr %49, i32 4
  %51 = load ptr, ptr %50, align 8
  %52 = alloca {}, align 8
  %53 = call ptr @behavior_wrapper(ptr %51, { ptr, ptr, ptr, i32 } %45, ptr %52)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr %46) #15
  %55 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %54, ptr %55, align 8
  %56 = load ptr, ptr %55, align 8
  %57 = ptrtoint ptr %56 to i64
  %58 = icmp eq i64 %57, ptrtoint (ptr @nil_typ to i64)
  %59 = icmp eq i64 %57, 0
  %60 = or i1 %58, %59
  %61 = icmp eq i1 %60, false
  %62 = alloca i1, align 1
  store i1 %61, ptr %62, align 1
  %63 = load i1, ptr %62, align 1
  br i1 %63, label %64, label %114

64:                                               ; preds = %3
  %65 = getelementptr { ptr, i160 }, ptr %55, i32 0, i32 0
  %66 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, i160 }, ptr %55, i32 0, i32 1
  %69 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %70 = load i160, ptr %68, align 4
  store i160 %70, ptr %69, align 4
  call void @set_offset(ptr %4, ptr @ListNode)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %82 = load i32, ptr %80, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %5, ptr @ListNode)
  %.reload12 = load ptr, ptr %.reg2mem10, align 8
  %83 = load ptr, ptr %.reload12, align 8
  %84 = load ptr, ptr %11, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 40, ptr %84)
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %86 = load i32, ptr %.reload7, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = load ptr, ptr %87, align 8
  %89 = getelementptr { ptr, ptr }, ptr %88, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %72, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %75, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %81, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  call void %90(ptr %83, { ptr, ptr, ptr, i32 } %98) #16
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %99 = load ptr, ptr %.reload11, align 8
  %100 = load ptr, ptr %11, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 40, ptr %100)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %102 = load i32, ptr %.reload6, align 4
  %103 = getelementptr ptr, ptr %100, i32 %102
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = call { ptr, ptr, ptr, i32 } %106(ptr %99) #17
  store { ptr, ptr, ptr, i32 } %107, ptr %6, align 8
  call void @assume_offset(ptr %6, ptr @ListNode)
  %108 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, i160 } undef, ptr %109, 0
  %111 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 1
  %112 = load i160, ptr %111, align 4
  %113 = insertvalue { ptr, i160 } %110, i160 %112, 1
  store { ptr, i160 } %113, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem15, align 8
  br label %120

114:                                              ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %9, align 4
  %115 = load i64, ptr %9, align 4
  store i64 %115, ptr %8, align 4
  %116 = load ptr, ptr %8, align 8
  %117 = insertvalue { ptr, i160 } undef, ptr %116, 0
  %118 = load i160, ptr %7, align 4
  %119 = insertvalue { ptr, i160 } %117, i160 %118, 1
  store { ptr, i160 } %119, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem15, align 8
  br label %120

120:                                              ; preds = %114, %64
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  store { ptr, i160 } %.reload16, ptr %.reg2mem, align 8
  br label %121

121:                                              ; preds = %120
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr, ptr, ptr, i32 } @ListIterator_getter_node(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ListIterator_setter_node(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  ret void
}

define { ptr, i160 } @ListNode_getter_next(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, i160 } undef, ptr %9, 0
  %11 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %12 = load i160, ptr %11, align 4
  %13 = insertvalue { ptr, i160 } %10, i160 %12, 1
  ret { ptr, i160 } %13
}

define void @ListNode_setter_next(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %15 = load i160, ptr %13, align 4
  store i160 %15, ptr %14, align 4
  ret void
}

define i32 @ListNode_getter_data(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @ListNode_setter_data(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %3, align 4
  ret void
}

define { i64, i64 } @_data_size_Bard(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Bard_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 2, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [7 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Bard_B_take_aPtri32_bPtrf64_take_aPtri32_bPtri32_take_aAnimal_bBeaver_take_aPtrf64_bPtrf64({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %11 = alloca ptr, align 8
  %12 = load ptr, ptr %1, align 8
  %13 = ptrtoint ptr %12 to i64
  %14 = icmp eq i64 %13, ptrtoint (ptr @f64_typ to i64)
  store i1 %14, ptr %7, align 1
  %15 = load i1, ptr %7, align 1
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = getelementptr ptr, ptr %1, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = ptrtoint ptr %18 to i64
  %20 = icmp eq i64 %19, ptrtoint (ptr @f64_typ to i64)
  store i1 %20, ptr %3, align 1
  store i32 6, ptr %.reg2mem8, align 4
  br label %65

21:                                               ; preds = %2
  %22 = load ptr, ptr %1, align 8
  %23 = ptrtoint ptr %22 to i64
  %24 = icmp eq i64 %23, ptrtoint (ptr @i32_typ to i64)
  store i1 %24, ptr %8, align 1
  %25 = load i1, ptr %8, align 1
  br i1 %25, label %26, label %39

26:                                               ; preds = %21
  %27 = getelementptr ptr, ptr %1, i32 1
  store ptr %27, ptr %.reg2mem5, align 8
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %28 = load ptr, ptr %.reload7, align 8
  %29 = ptrtoint ptr %28 to i64
  %30 = icmp eq i64 %29, ptrtoint (ptr @f64_typ to i64)
  store i1 %30, ptr %4, align 1
  %31 = load i1, ptr %4, align 1
  %32 = select i1 %31, i32 3, i32 4
  store i32 %32, ptr %.reg2mem3, align 4
  br i1 %31, label %33, label %34

33:                                               ; preds = %26
  br label %38

34:                                               ; preds = %26
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %35 = load ptr, ptr %.reload6, align 8
  %36 = ptrtoint ptr %35 to i64
  %37 = icmp eq i64 %36, ptrtoint (ptr @i32_typ to i64)
  store i1 %37, ptr %5, align 1
  br label %38

38:                                               ; preds = %34, %33
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem10, align 4
  br label %63

39:                                               ; preds = %21
  %40 = load ptr, ptr %1, align 8
  %41 = getelementptr { [3 x i64], [3 x ptr] }, ptr %40, i32 0, i32 0, i32 1
  %42 = getelementptr { [3 x i64], [3 x ptr] }, ptr %40, i32 0, i32 0, i32 2
  %43 = getelementptr { [3 x i64], [3 x ptr] }, ptr %40, i32 0, i32 1, i32 0
  %44 = getelementptr { [3 x i64], [3 x ptr] }, ptr %40, i32 0, i32 1, i32 1
  %45 = load i64, ptr %41, align 4
  %46 = load i64, ptr %42, align 4
  %47 = load ptr, ptr %43, align 8
  %48 = load ptr, ptr %44, align 8
  %49 = load i64, ptr @Animal, align 4
  %50 = call i1 @subtype_test_wrapper(ptr %47, i64 %46, i64 %45, i64 %49, i64 ptrtoint (ptr @Animal to i64), ptr %48)
  store i1 %50, ptr %9, align 1
  %51 = getelementptr ptr, ptr %1, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr { [3 x i64], [3 x ptr] }, ptr %52, i32 0, i32 0, i32 1
  %54 = getelementptr { [3 x i64], [3 x ptr] }, ptr %52, i32 0, i32 0, i32 2
  %55 = getelementptr { [3 x i64], [3 x ptr] }, ptr %52, i32 0, i32 1, i32 0
  %56 = getelementptr { [3 x i64], [3 x ptr] }, ptr %52, i32 0, i32 1, i32 1
  %57 = load i64, ptr %53, align 4
  %58 = load i64, ptr %54, align 4
  %59 = load ptr, ptr %55, align 8
  %60 = load ptr, ptr %56, align 8
  %61 = load i64, ptr @Beaver, align 4
  %62 = call i1 @subtype_test_wrapper(ptr %59, i64 %58, i64 %57, i64 %61, i64 ptrtoint (ptr @Beaver to i64), ptr %60)
  store i1 %62, ptr %6, align 1
  store i32 5, ptr %.reg2mem10, align 4
  br label %63

63:                                               ; preds = %39, %38
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload11, ptr %.reg2mem1, align 4
  br label %64

64:                                               ; preds = %63
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem8, align 4
  br label %65

65:                                               ; preds = %64, %16
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  store i32 %.reload9, ptr %.reg2mem, align 4
  br label %66

66:                                               ; preds = %65
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %11, align 4
  %67 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %68 = load i32, ptr %11, align 4
  %69 = getelementptr [7 x ptr], ptr %67, i32 0, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 10
  %71 = load ptr, ptr %70, align 8
  ret ptr %71
}

define void @Bard_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Bard)
  ret void
}

define void @Bard_take_aPtri32_bPtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Bard)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca i32, align 4
  %22 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %23 = load i32, ptr %22, align 4
  store i32 %23, ptr %21, align 4
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = alloca double, align 8
  %26 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %27 = load double, ptr %26, align 8
  store double %27, ptr %25, align 8
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load i32, ptr %21, align 4
  store i32 %30, ptr %28, align 4
  %31 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %31, align 4
  %32 = load i64, ptr %31, align 4
  store i64 %32, ptr %29, align 4
  %33 = load ptr, ptr %29, align 8
  %34 = insertvalue { ptr, i160 } undef, ptr %33, 0
  %35 = load i160, ptr %28, align 4
  %36 = insertvalue { ptr, i160 } %34, i160 %35, 1
  %37 = alloca [1 x ptr], align 8
  %38 = getelementptr [1 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 1, ptr %37)
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %41 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %42 = alloca { ptr }, align 8
  %43 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  store ptr %33, ptr %43, align 8
  %44 = call ptr @class_behavior_wrapper(ptr %41, ptr %42)
  call void %44(ptr %37, { ptr, i160 } %36) #15
  %45 = alloca i160, align 8
  %46 = alloca ptr, align 8
  %47 = load double, ptr %25, align 8
  store double %47, ptr %45, align 8
  %48 = alloca i64, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %48, align 4
  %49 = load i64, ptr %48, align 4
  store i64 %49, ptr %46, align 4
  %50 = load ptr, ptr %46, align 8
  %51 = insertvalue { ptr, i160 } undef, ptr %50, 0
  %52 = load i160, ptr %45, align 4
  %53 = insertvalue { ptr, i160 } %51, i160 %52, 1
  %54 = alloca [1 x ptr], align 8
  %55 = getelementptr [1 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 1, ptr %54)
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %58 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %59 = alloca { ptr }, align 8
  %60 = getelementptr { ptr }, ptr %59, i32 0, i32 0
  store ptr %50, ptr %60, align 8
  %61 = call ptr @class_behavior_wrapper(ptr %58, ptr %59)
  call void %61(ptr %54, { ptr, i160 } %53) #15
  ret void
}

define void @Bard_take_aPtri32_bPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Bard)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca i32, align 4
  %22 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %23 = load i32, ptr %22, align 4
  store i32 %23, ptr %21, align 4
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = alloca i32, align 4
  %26 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %27 = load i32, ptr %26, align 4
  store i32 %27, ptr %25, align 4
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load i32, ptr %21, align 4
  store i32 %30, ptr %28, align 4
  %31 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %31, align 4
  %32 = load i64, ptr %31, align 4
  store i64 %32, ptr %29, align 4
  %33 = load ptr, ptr %29, align 8
  %34 = insertvalue { ptr, i160 } undef, ptr %33, 0
  %35 = load i160, ptr %28, align 4
  %36 = insertvalue { ptr, i160 } %34, i160 %35, 1
  %37 = alloca [1 x ptr], align 8
  %38 = getelementptr [1 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 1, ptr %37)
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %41 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %42 = alloca { ptr }, align 8
  %43 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  store ptr %33, ptr %43, align 8
  %44 = call ptr @class_behavior_wrapper(ptr %41, ptr %42)
  call void %44(ptr %37, { ptr, i160 } %36) #15
  %45 = alloca i160, align 8
  %46 = alloca ptr, align 8
  %47 = load i32, ptr %25, align 4
  store i32 %47, ptr %45, align 4
  %48 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %48, align 4
  %49 = load i64, ptr %48, align 4
  store i64 %49, ptr %46, align 4
  %50 = load ptr, ptr %46, align 8
  %51 = insertvalue { ptr, i160 } undef, ptr %50, 0
  %52 = load i160, ptr %45, align 4
  %53 = insertvalue { ptr, i160 } %51, i160 %52, 1
  %54 = alloca [1 x ptr], align 8
  %55 = getelementptr [1 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 1, ptr %54)
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %58 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %59 = alloca { ptr }, align 8
  %60 = getelementptr { ptr }, ptr %59, i32 0, i32 0
  store ptr %50, ptr %60, align 8
  %61 = call ptr @class_behavior_wrapper(ptr %58, ptr %59)
  call void %61(ptr %54, { ptr, i160 } %53) #15
  ret void
}

define void @Bard_take_aAnimal_bBeaver({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Bard)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %27 = load i160, ptr %25, align 4
  store i160 %27, ptr %26, align 4
  call void @set_offset(ptr %21, ptr @Animal)
  %28 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %28, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %31 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 0
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 1
  %35 = load i160, ptr %33, align 4
  store i160 %35, ptr %34, align 4
  call void @set_offset(ptr %29, ptr @Beaver)
  %36 = alloca i32, align 4
  store i32 8, ptr %36, align 4
  %37 = load i32, ptr %36, align 4
  %38 = sext i32 %37 to i64
  %39 = alloca ptr, align 8
  %40 = mul i64 %38, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %41 = call ptr @bump_malloc(i64 %40)
  store ptr %41, ptr %39, align 8
  %42 = alloca ptr, align 8
  %43 = getelementptr { ptr }, ptr %39, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  store ptr %44, ptr %42, align 8
  %45 = alloca i32, align 4
  store i32 0, ptr %45, align 4
  %46 = load ptr, ptr %42, align 8
  %47 = load i32, ptr %45, align 4
  %48 = sext i32 %47 to i64
  %49 = mul i64 ptrtoint (ptr getelementptr ([7 x i8], ptr null, i32 1) to i64), %48
  %50 = getelementptr i8, ptr %46, i64 %49
  %51 = load <7 x i8>, ptr @osngq_animal, align 8
  store <7 x i8> %51, ptr %50, align 8
  %52 = alloca i32, align 4
  store i32 7, ptr %52, align 4
  %53 = alloca i32, align 4
  store i32 8, ptr %53, align 4
  %54 = alloca [1 x ptr], align 8
  store ptr @String, ptr %54, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr ptr, ptr %55, i32 6
  %57 = load ptr, ptr %56, align 8
  %58 = call { i64, i64 } @size_wrapper(ptr %57, ptr %54)
  %59 = extractvalue { i64, i64 } %58, 0
  %60 = call ptr @bump_malloc(i64 %59)
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  store ptr @String, ptr %61, align 8
  store ptr %60, ptr %62, align 8
  store i32 10, ptr %63, align 4
  %64 = alloca i32, align 4
  store i32 7, ptr %64, align 4
  %65 = alloca i32, align 4
  store i32 8, ptr %65, align 4
  %66 = load ptr, ptr %42, align 8
  %67 = insertvalue { ptr } undef, ptr %66, 0
  %68 = load i32, ptr %64, align 4
  %69 = load i32, ptr %65, align 4
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = load ptr, ptr %62, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %73, 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %76, 2
  %78 = load i32, ptr %63, align 4
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, i32 %78, 3
  %80 = alloca [3 x ptr], align 8
  %81 = getelementptr [3 x ptr], ptr %80, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %81, align 8
  %82 = getelementptr [3 x ptr], ptr %80, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %82, align 8
  %83 = getelementptr [3 x ptr], ptr %80, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 9, ptr %80)
  %85 = call ptr @llvm.invariant.start.p0(i64 280, ptr %71)
  %86 = getelementptr ptr, ptr %71, i32 %78
  %87 = getelementptr ptr, ptr %86, i32 4
  %88 = load ptr, ptr %87, align 8
  %89 = alloca { ptr, ptr, ptr }, align 8
  %90 = getelementptr { ptr, ptr, ptr }, ptr %89, i32 0, i32 0
  store ptr @buffer_typ, ptr %90, align 8
  %91 = getelementptr { ptr, ptr, ptr }, ptr %89, i32 0, i32 1
  store ptr @i32_typ, ptr %91, align 8
  %92 = getelementptr { ptr, ptr, ptr }, ptr %89, i32 0, i32 2
  store ptr @i32_typ, ptr %92, align 8
  %93 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %79, ptr %89)
  call void %93({ ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %79, ptr %80, { ptr } %67, i32 %68, i32 %69) #15
  %94 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, i160 } undef, ptr %95, 0
  %97 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 1
  %98 = load i160, ptr %97, align 4
  %99 = insertvalue { ptr, i160 } %96, i160 %98, 1
  %100 = alloca [1 x ptr], align 8
  %101 = getelementptr [1 x ptr], ptr %100, i32 0, i32 0
  store ptr @_parameterization_String, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 1, ptr %100)
  %103 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %104 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %105 = alloca { ptr }, align 8
  %106 = getelementptr { ptr }, ptr %105, i32 0, i32 0
  store ptr %95, ptr %106, align 8
  %107 = call ptr @class_behavior_wrapper(ptr %104, ptr %105)
  call void %107(ptr %100, { ptr, i160 } %99) #15
  %108 = alloca i32, align 4
  store i32 8, ptr %108, align 4
  %109 = load i32, ptr %108, align 4
  %110 = sext i32 %109 to i64
  %111 = alloca ptr, align 8
  %112 = mul i64 %110, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %113 = call ptr @bump_malloc(i64 %112)
  store ptr %113, ptr %111, align 8
  %114 = alloca ptr, align 8
  %115 = getelementptr { ptr }, ptr %111, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  store ptr %116, ptr %114, align 8
  %117 = alloca i32, align 4
  store i32 0, ptr %117, align 4
  %118 = load ptr, ptr %114, align 8
  %119 = load i32, ptr %117, align 4
  %120 = sext i32 %119 to i64
  %121 = mul i64 ptrtoint (ptr getelementptr ([7 x i8], ptr null, i32 1) to i64), %120
  %122 = getelementptr i8, ptr %118, i64 %121
  %123 = load <7 x i8>, ptr @uclzf_beaver, align 8
  store <7 x i8> %123, ptr %122, align 8
  %124 = alloca i32, align 4
  store i32 7, ptr %124, align 4
  %125 = alloca i32, align 4
  store i32 8, ptr %125, align 4
  %126 = alloca [1 x ptr], align 8
  store ptr @String, ptr %126, align 8
  %127 = load ptr, ptr %126, align 8
  %128 = getelementptr ptr, ptr %127, i32 6
  %129 = load ptr, ptr %128, align 8
  %130 = call { i64, i64 } @size_wrapper(ptr %129, ptr %126)
  %131 = extractvalue { i64, i64 } %130, 0
  %132 = call ptr @bump_malloc(i64 %131)
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  store ptr @String, ptr %133, align 8
  store ptr %132, ptr %134, align 8
  store i32 10, ptr %135, align 4
  %136 = alloca i32, align 4
  store i32 7, ptr %136, align 4
  %137 = alloca i32, align 4
  store i32 8, ptr %137, align 4
  %138 = load ptr, ptr %114, align 8
  %139 = insertvalue { ptr } undef, ptr %138, 0
  %140 = load i32, ptr %136, align 4
  %141 = load i32, ptr %137, align 4
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %143, 0
  %145 = load ptr, ptr %134, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %145, 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %148, 2
  %150 = load i32, ptr %135, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %150, 3
  %152 = alloca [3 x ptr], align 8
  %153 = getelementptr [3 x ptr], ptr %152, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %153, align 8
  %154 = getelementptr [3 x ptr], ptr %152, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %154, align 8
  %155 = getelementptr [3 x ptr], ptr %152, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %155, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 9, ptr %152)
  %157 = call ptr @llvm.invariant.start.p0(i64 280, ptr %143)
  %158 = getelementptr ptr, ptr %143, i32 %150
  %159 = getelementptr ptr, ptr %158, i32 4
  %160 = load ptr, ptr %159, align 8
  %161 = alloca { ptr, ptr, ptr }, align 8
  %162 = getelementptr { ptr, ptr, ptr }, ptr %161, i32 0, i32 0
  store ptr @buffer_typ, ptr %162, align 8
  %163 = getelementptr { ptr, ptr, ptr }, ptr %161, i32 0, i32 1
  store ptr @i32_typ, ptr %163, align 8
  %164 = getelementptr { ptr, ptr, ptr }, ptr %161, i32 0, i32 2
  store ptr @i32_typ, ptr %164, align 8
  %165 = call ptr @behavior_wrapper(ptr %160, { ptr, ptr, ptr, i32 } %151, ptr %161)
  call void %165({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %152, { ptr } %139, i32 %140, i32 %141) #15
  %166 = getelementptr { ptr, i160 }, ptr %133, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, i160 } undef, ptr %167, 0
  %169 = getelementptr { ptr, i160 }, ptr %133, i32 0, i32 1
  %170 = load i160, ptr %169, align 4
  %171 = insertvalue { ptr, i160 } %168, i160 %170, 1
  %172 = alloca [1 x ptr], align 8
  %173 = getelementptr [1 x ptr], ptr %172, i32 0, i32 0
  store ptr @_parameterization_String, ptr %173, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 1, ptr %172)
  %175 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %176 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %177 = alloca { ptr }, align 8
  %178 = getelementptr { ptr }, ptr %177, i32 0, i32 0
  store ptr %167, ptr %178, align 8
  %179 = call ptr @class_behavior_wrapper(ptr %176, ptr %177)
  call void %179(ptr %172, { ptr, i160 } %171) #15
  ret void
}

define void @Bard_take_aPtrf64_bPtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Bard)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca double, align 8
  %22 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %23 = load double, ptr %22, align 8
  store double %23, ptr %21, align 8
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = alloca double, align 8
  %26 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %27 = load double, ptr %26, align 8
  store double %27, ptr %25, align 8
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load double, ptr %21, align 8
  store double %30, ptr %28, align 8
  %31 = alloca i64, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %31, align 4
  %32 = load i64, ptr %31, align 4
  store i64 %32, ptr %29, align 4
  %33 = load ptr, ptr %29, align 8
  %34 = insertvalue { ptr, i160 } undef, ptr %33, 0
  %35 = load i160, ptr %28, align 4
  %36 = insertvalue { ptr, i160 } %34, i160 %35, 1
  %37 = alloca [1 x ptr], align 8
  %38 = getelementptr [1 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 1, ptr %37)
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %41 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %42 = alloca { ptr }, align 8
  %43 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  store ptr %33, ptr %43, align 8
  %44 = call ptr @class_behavior_wrapper(ptr %41, ptr %42)
  call void %44(ptr %37, { ptr, i160 } %36) #15
  %45 = alloca i160, align 8
  %46 = alloca ptr, align 8
  %47 = load double, ptr %25, align 8
  store double %47, ptr %45, align 8
  %48 = alloca i64, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %48, align 4
  %49 = load i64, ptr %48, align 4
  store i64 %49, ptr %46, align 4
  %50 = load ptr, ptr %46, align 8
  %51 = insertvalue { ptr, i160 } undef, ptr %50, 0
  %52 = load i160, ptr %45, align 4
  %53 = insertvalue { ptr, i160 } %51, i160 %52, 1
  %54 = alloca [1 x ptr], align 8
  %55 = getelementptr [1 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 1, ptr %54)
  %57 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %58 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %59 = alloca { ptr }, align 8
  %60 = getelementptr { ptr }, ptr %59, i32 0, i32 0
  store ptr %50, ptr %60, align 8
  %61 = call ptr @class_behavior_wrapper(ptr %58, ptr %59)
  call void %61(ptr %54, { ptr, i160 } %53) #15
  ret void
}

define ptr @Iterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 1, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [2 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define void @report_exception({ ptr } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr } %0, ptr %5, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %6, i32 0, i32 4
  %8 = load { ptr, i160 }, ptr %7, align 8
  %9 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %8, ptr %9, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = ptrtoint ptr %10 to i64
  %12 = icmp eq i64 %11, ptrtoint (ptr @nil_typ to i64)
  %13 = icmp eq i64 %11, 0
  %14 = or i1 %12, %13
  %15 = icmp eq i1 %14, false
  %16 = alloca i1, align 1
  store i1 %15, ptr %16, align 1
  %17 = load i1, ptr %16, align 1
  br i1 %17, label %18, label %._crit_edge

._crit_edge:                                      ; preds = %1
  br label %45

18:                                               ; preds = %1
  %19 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %20 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %23 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %24 = load i160, ptr %22, align 4
  store i160 %24, ptr %23, align 4
  call void @set_offset(ptr %2, ptr @Exception)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 1
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 2
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %35, 3
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %38 = call ptr @llvm.invariant.start.p0(i64 104, ptr %26)
  %39 = getelementptr ptr, ptr %26, i32 %35
  %40 = getelementptr ptr, ptr %39, i32 6
  %41 = load ptr, ptr %40, align 8
  %42 = call ptr @behavior_wrapper(ptr %41, { ptr, ptr, ptr, i32 } %36, ptr %4)
  call void %42({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr %3) #15
  %43 = load ptr, ptr %20, align 8
  store ptr %43, ptr %19, align 8
  %44 = load i160, ptr %23, align 4
  store i160 %44, ptr %22, align 4
  br label %45

45:                                               ; preds = %._crit_edge, %18
  ret void
}

define ptr @IntIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 1, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [2 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @IntIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 11, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [24 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = ptrtoint ptr %7 to i64
  %9 = icmp eq i64 %8, ptrtoint (ptr @i32_typ to i64)
  store i1 %9, ptr %4, align 1
  %10 = getelementptr ptr, ptr %1, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @function_typ to i64)
  store i1 %13, ptr %3, align 1
  store i32 12, ptr %6, align 4
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = load i32, ptr %6, align 4
  %16 = getelementptr [24 x ptr], ptr %14, i32 0, i32 %15
  %17 = getelementptr ptr, ptr %16, i32 10
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 13, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [24 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 14, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [24 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 15, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [24 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 16, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [24 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @IntIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [24 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @IntIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [24 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @IntIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [24 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @IntIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @IntIterable, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [24 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @IntIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 21, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [24 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @IntTupleIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 1, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [4 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @IntTupleIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 1, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [2 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Iterator2_field_Iterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Iterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 2, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [3 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Iterable2_field_Iterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Iterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = alloca ptr, align 8
  store i32 12, ptr %4, align 4
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = load i32, ptr %4, align 4
  %7 = getelementptr [23 x ptr], ptr %5, i32 0, i32 %6
  %8 = getelementptr ptr, ptr %7, i32 10
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define ptr @Iterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 13, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = alloca ptr, align 8
  %7 = load ptr, ptr %1, align 8
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 1
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 0, i32 2
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 0
  %11 = getelementptr { [3 x i64], [3 x ptr] }, ptr %7, i32 0, i32 1, i32 1
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @any_typ, align 4
  %17 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @any_typ to i64), ptr %15)
  store i1 %17, ptr %4, align 1
  %18 = getelementptr ptr, ptr %1, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = ptrtoint ptr %19 to i64
  %21 = icmp eq i64 %20, ptrtoint (ptr @function_typ to i64)
  store i1 %21, ptr %3, align 1
  store i32 14, ptr %6, align 4
  %22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %23 = load i32, ptr %6, align 4
  %24 = getelementptr [23 x ptr], ptr %22, i32 0, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 10
  %26 = load ptr, ptr %25, align 8
  ret ptr %26
}

define ptr @Iterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 15, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 16, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 17, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = ptrtoint ptr %6 to i64
  %8 = icmp eq i64 %7, ptrtoint (ptr @function_typ to i64)
  store i1 %8, ptr %3, align 1
  store i32 18, ptr %5, align 4
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = load i32, ptr %5, align 4
  %11 = getelementptr [23 x ptr], ptr %9, i32 0, i32 %10
  %12 = getelementptr ptr, ptr %11, i32 10
  %13 = load ptr, ptr %12, align 8
  ret ptr %13
}

define ptr @Iterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 19, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Iterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 20, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Iterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 21, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define ptr @Iterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %3 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = alloca ptr, align 8
  %6 = load ptr, ptr %1, align 8
  %7 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 1
  %8 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 0, i32 2
  %9 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 0
  %10 = getelementptr { [3 x i64], [3 x ptr] }, ptr %6, i32 0, i32 1, i32 1
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = load i64, ptr @Iterable2, align 4
  %16 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 %15, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  store i1 %16, ptr %3, align 1
  store i32 22, ptr %5, align 4
  %17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %18 = load i32, ptr %5, align 4
  %19 = getelementptr [23 x ptr], ptr %17, i32 0, i32 %18
  %20 = getelementptr ptr, ptr %19, i32 10
  %21 = load ptr, ptr %20, align 8
  ret ptr %21
}

define void @number_taker({ ptr, i64 } %0) {
  %2 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %0, ptr %2, align 8
  %3 = alloca i32, align 4
  store i32 7, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = sext i32 %4 to i64
  %6 = alloca ptr, align 8
  %7 = mul i64 %5, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %8 = call ptr @bump_malloc(i64 %7)
  store ptr %8, ptr %6, align 8
  %9 = alloca ptr, align 8
  %10 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  store ptr %11, ptr %9, align 8
  %12 = alloca i32, align 4
  store i32 0, ptr %12, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load i32, ptr %12, align 4
  %15 = sext i32 %14 to i64
  %16 = mul i64 ptrtoint (ptr getelementptr ([6 x i8], ptr null, i32 1) to i64), %15
  %17 = getelementptr i8, ptr %13, i64 %16
  %18 = load <6 x i8>, ptr @ffter_number, align 8
  store <6 x i8> %18, ptr %17, align 8
  %19 = alloca i32, align 4
  store i32 6, ptr %19, align 4
  %20 = alloca i32, align 4
  store i32 7, ptr %20, align 4
  %21 = alloca [1 x ptr], align 8
  store ptr @String, ptr %21, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 6
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = call ptr @bump_malloc(i64 %26)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr @String, ptr %28, align 8
  store ptr %27, ptr %29, align 8
  store i32 10, ptr %30, align 4
  %31 = alloca i32, align 4
  store i32 6, ptr %31, align 4
  %32 = alloca i32, align 4
  store i32 7, ptr %32, align 4
  %33 = load ptr, ptr %9, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  %35 = load i32, ptr %31, align 4
  %36 = load i32, ptr %32, align 4
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = load ptr, ptr %29, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %43, 2
  %45 = load i32, ptr %30, align 4
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %45, 3
  %47 = alloca [3 x ptr], align 8
  %48 = getelementptr [3 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %48, align 8
  %49 = getelementptr [3 x ptr], ptr %47, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %49, align 8
  %50 = getelementptr [3 x ptr], ptr %47, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 9, ptr %47)
  %52 = call ptr @llvm.invariant.start.p0(i64 280, ptr %38)
  %53 = getelementptr ptr, ptr %38, i32 %45
  %54 = getelementptr ptr, ptr %53, i32 4
  %55 = load ptr, ptr %54, align 8
  %56 = alloca { ptr, ptr, ptr }, align 8
  %57 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 0
  store ptr @buffer_typ, ptr %57, align 8
  %58 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 1
  store ptr @i32_typ, ptr %58, align 8
  %59 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 2
  store ptr @i32_typ, ptr %59, align 8
  %60 = call ptr @behavior_wrapper(ptr %55, { ptr, ptr, ptr, i32 } %46, ptr %56)
  call void %60({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr %47, { ptr } %34, i32 %35, i32 %36) #15
  %61 = load { ptr, ptr, ptr, i32 }, ptr %28, align 8
  %62 = call i32 (ptr, ...) @printf(ptr @i32_string, { ptr, ptr, ptr, i32 } %61)
  ret void
}

define i32 @early_return_in_else() {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 5, ptr %3, align 4
  %4 = alloca i32, align 4
  store i32 3, ptr %4, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load i32, ptr %4, align 4
  %7 = icmp sgt i32 %5, %6
  %8 = alloca i1, align 1
  store i1 %7, ptr %8, align 1
  %9 = load i1, ptr %8, align 1
  %10 = select i1 %9, i32 1, i32 2
  %11 = select i1 %9, ptr %1, ptr %2
  store i32 %10, ptr %11, align 4
  %12 = load i32, ptr %11, align 4
  ret i32 %12
}

define void @make_em_speak({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %4 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %15 = load i32, ptr %13, align 4
  store i32 %15, ptr %14, align 4
  call void @set_offset(ptr %3, ptr @Animal)
  %16 = load ptr, ptr %5, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %16, 0
  %18 = load ptr, ptr %8, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %18, 1
  %20 = load ptr, ptr %11, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %20, 2
  %22 = load i32, ptr %14, align 4
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %22, 3
  %24 = alloca [0 x ptr], align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 0, ptr %24)
  %26 = call ptr @llvm.invariant.start.p0(i64 104, ptr %16)
  %27 = getelementptr ptr, ptr %16, i32 %22
  %28 = getelementptr ptr, ptr %27, i32 4
  %29 = load ptr, ptr %28, align 8
  %30 = alloca {}, align 8
  %31 = call ptr @behavior_wrapper(ptr %29, { ptr, ptr, ptr, i32 } %23, ptr %30)
  call void %31({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr %24) #15
  ret void
}

define i32 @fibonacci(i32 %0) {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %9, align 4
  %10 = alloca i32, align 4
  store i32 2, ptr %10, align 4
  %11 = load i32, ptr %9, align 4
  %12 = load i32, ptr %10, align 4
  %13 = icmp slt i32 %11, %12
  %14 = alloca i1, align 1
  store i1 %13, ptr %14, align 1
  %15 = load i1, ptr %14, align 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %1
  %17 = load i32, ptr %9, align 4
  store i32 %17, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem5, align 4
  br label %33

18:                                               ; preds = %1
  store i32 2, ptr %2, align 4
  %19 = load i32, ptr %9, align 4
  %20 = load i32, ptr %2, align 4
  %21 = sub i32 %19, %20
  store i32 %21, ptr %3, align 4
  %22 = load i32, ptr %3, align 4
  %23 = call i32 @fibonacci(i32 %22)
  store i32 %23, ptr %4, align 4
  store i32 1, ptr %5, align 4
  %24 = load i32, ptr %9, align 4
  %25 = load i32, ptr %5, align 4
  %26 = sub i32 %24, %25
  store i32 %26, ptr %6, align 4
  %27 = load i32, ptr %6, align 4
  %28 = call i32 @fibonacci(i32 %27)
  store i32 %28, ptr %7, align 4
  %29 = load i32, ptr %4, align 4
  %30 = load i32, ptr %7, align 4
  %31 = add i32 %29, %30
  store i32 %31, ptr %8, align 4
  %32 = load i32, ptr %8, align 4
  store i32 %32, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem5, align 4
  br label %33

33:                                               ; preds = %18, %16
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem, align 4
  br label %34

34:                                               ; preds = %33
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define i32 @factorial(i32 %0) {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %7, align 4
  %8 = alloca i32, align 4
  store i32 2, ptr %8, align 4
  %9 = load i32, ptr %7, align 4
  %10 = load i32, ptr %8, align 4
  %11 = icmp slt i32 %9, %10
  %12 = alloca i1, align 1
  store i1 %11, ptr %12, align 1
  %13 = load i1, ptr %12, align 1
  br i1 %13, label %14, label %16

14:                                               ; preds = %1
  store i32 1, ptr %2, align 4
  %15 = load i32, ptr %2, align 4
  store i32 %15, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem5, align 4
  br label %26

16:                                               ; preds = %1
  store i32 1, ptr %3, align 4
  %17 = load i32, ptr %7, align 4
  %18 = load i32, ptr %3, align 4
  %19 = sub i32 %17, %18
  store i32 %19, ptr %4, align 4
  %20 = load i32, ptr %4, align 4
  %21 = call i32 @factorial(i32 %20)
  store i32 %21, ptr %5, align 4
  %22 = load i32, ptr %7, align 4
  %23 = load i32, ptr %5, align 4
  %24 = mul i32 %22, %23
  store i32 %24, ptr %6, align 4
  %25 = load i32, ptr %6, align 4
  store i32 %25, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem5, align 4
  br label %26

26:                                               ; preds = %16, %14
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem, align 4
  br label %27

27:                                               ; preds = %26
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define void @throw() {
  %1 = alloca [1 x ptr], align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store ptr @Exception, ptr %1, align 8
  %2 = load ptr, ptr %1, align 8
  %3 = getelementptr ptr, ptr %2, i32 6
  %4 = load ptr, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr %4, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  %7 = call ptr @bump_malloc(i64 %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  store ptr @Exception, ptr %8, align 8
  store ptr %7, ptr %9, align 8
  store i32 10, ptr %10, align 4
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = load ptr, ptr %9, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %16, align 8
  %18 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %17, 2
  %19 = load i32, ptr %10, align 4
  %20 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 %19, 3
  %21 = alloca [0 x ptr], align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 0, ptr %21)
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %12)
  %24 = getelementptr ptr, ptr %12, i32 %19
  %25 = getelementptr ptr, ptr %24, i32 4
  %26 = load ptr, ptr %25, align 8
  %27 = alloca {}, align 8
  %28 = call ptr @behavior_wrapper(ptr %26, { ptr, ptr, ptr, i32 } %20, ptr %27)
  call void %28({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr %21) #15
  %29 = alloca i32, align 4
  store i32 1205, ptr %29, align 4
  %30 = alloca i32, align 4
  store i32 59, ptr %30, align 4
  %31 = load i32, ptr %30, align 4
  %32 = sext i32 %31 to i64
  %33 = alloca ptr, align 8
  %34 = mul i64 %32, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %35 = call ptr @bump_malloc(i64 %34)
  store ptr %35, ptr %33, align 8
  %36 = alloca ptr, align 8
  %37 = getelementptr { ptr }, ptr %33, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  store ptr %38, ptr %36, align 8
  %39 = alloca i32, align 4
  store i32 0, ptr %39, align 4
  %40 = load ptr, ptr %36, align 8
  %41 = load i32, ptr %39, align 4
  %42 = sext i32 %41 to i64
  %43 = mul i64 ptrtoint (ptr getelementptr ([58 x i8], ptr null, i32 1) to i64), %42
  %44 = getelementptr i8, ptr %40, i64 %43
  %45 = load <58 x i8>, ptr @fmczg_CUsersPaulKOneDriveDocumentsPLPyPLtmpgjbyyomini, align 64
  store <58 x i8> %45, ptr %44, align 64
  %46 = alloca i32, align 4
  store i32 58, ptr %46, align 4
  %47 = alloca i32, align 4
  store i32 59, ptr %47, align 4
  %48 = alloca [1 x ptr], align 8
  store ptr @String, ptr %48, align 8
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr ptr, ptr %49, i32 6
  %51 = load ptr, ptr %50, align 8
  %52 = call { i64, i64 } @size_wrapper(ptr %51, ptr %48)
  %53 = extractvalue { i64, i64 } %52, 0
  %54 = call ptr @bump_malloc(i64 %53)
  %55 = alloca i32, align 4
  %56 = alloca ptr, align 8
  %57 = alloca ptr, align 8
  %58 = alloca ptr, align 8
  store ptr @String, ptr %58, align 8
  store ptr %54, ptr %57, align 8
  store i32 10, ptr %55, align 4
  %59 = alloca i32, align 4
  store i32 58, ptr %59, align 4
  %60 = alloca i32, align 4
  store i32 59, ptr %60, align 4
  %61 = load ptr, ptr %36, align 8
  %62 = insertvalue { ptr } undef, ptr %61, 0
  %63 = load i32, ptr %59, align 4
  %64 = load i32, ptr %60, align 4
  %65 = load ptr, ptr %58, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %67 = load ptr, ptr %57, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %67, 1
  %69 = load ptr, ptr %56, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %69, 2
  %71 = load i32, ptr %55, align 4
  %72 = insertvalue { ptr, ptr, ptr, i32 } %70, i32 %71, 3
  %73 = alloca [3 x ptr], align 8
  %74 = getelementptr [3 x ptr], ptr %73, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %74, align 8
  %75 = getelementptr [3 x ptr], ptr %73, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %75, align 8
  %76 = getelementptr [3 x ptr], ptr %73, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 9, ptr %73)
  %78 = call ptr @llvm.invariant.start.p0(i64 280, ptr %65)
  %79 = getelementptr ptr, ptr %65, i32 %71
  %80 = getelementptr ptr, ptr %79, i32 4
  %81 = load ptr, ptr %80, align 8
  %82 = alloca { ptr, ptr, ptr }, align 8
  %83 = getelementptr { ptr, ptr, ptr }, ptr %82, i32 0, i32 0
  store ptr @buffer_typ, ptr %83, align 8
  %84 = getelementptr { ptr, ptr, ptr }, ptr %82, i32 0, i32 1
  store ptr @i32_typ, ptr %84, align 8
  %85 = getelementptr { ptr, ptr, ptr }, ptr %82, i32 0, i32 2
  store ptr @i32_typ, ptr %85, align 8
  %86 = call ptr @behavior_wrapper(ptr %81, { ptr, ptr, ptr, i32 } %72, ptr %82)
  call void %86({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr %73, { ptr } %62, i32 %63, i32 %64) #15
  %87 = load i32, ptr %29, align 4
  %88 = alloca { ptr, ptr, ptr, i32 }, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  %90 = load ptr, ptr %58, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  %92 = load ptr, ptr %57, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  %94 = load ptr, ptr %56, align 8
  store ptr %94, ptr %93, align 8
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  %96 = load i32, ptr %55, align 4
  store i32 %96, ptr %95, align 4
  call void @set_offset(ptr %88, ptr @String)
  %97 = load ptr, ptr %89, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = load ptr, ptr %91, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %101 = load ptr, ptr %93, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %103 = load i32, ptr %95, align 4
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  %105 = load ptr, ptr %11, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = load ptr, ptr %9, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %107, 1
  %109 = load ptr, ptr %16, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 2
  %111 = load i32, ptr %10, align 4
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %111, 3
  %113 = alloca [2 x ptr], align 8
  %114 = getelementptr [2 x ptr], ptr %113, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %114, align 8
  %115 = getelementptr [2 x ptr], ptr %113, i32 0, i32 1
  store ptr @_parameterization_String, ptr %115, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 4, ptr %113)
  %117 = call ptr @llvm.invariant.start.p0(i64 104, ptr %105)
  %118 = getelementptr ptr, ptr %105, i32 %111
  %119 = getelementptr ptr, ptr %118, i32 5
  %120 = load ptr, ptr %119, align 8
  %121 = alloca { ptr, ptr }, align 8
  %122 = getelementptr { ptr, ptr }, ptr %121, i32 0, i32 0
  store ptr @i32_typ, ptr %122, align 8
  %123 = getelementptr { ptr, ptr }, ptr %121, i32 0, i32 1
  store ptr %97, ptr %123, align 8
  %124 = call ptr @behavior_wrapper(ptr %120, { ptr, ptr, ptr, i32 } %112, ptr %121)
  call void %124({ ptr, ptr, ptr, i32 } %112, { ptr, ptr, ptr, i32 } %112, ptr %113, i32 %87, { ptr, ptr, ptr, i32 } %104) #15
  %125 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, i160 } undef, ptr %126, 0
  %128 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %129 = load i160, ptr %128, align 4
  %130 = insertvalue { ptr, i160 } %127, i160 %129, 1
  %131 = call ptr @get_current_coroutine()
  %132 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %131, i32 0, i32 4
  store { ptr, i160 } %130, ptr %132, align 8
  call void @coroutine_yield(ptr %131)
  %133 = load { ptr, i160 }, ptr %132, align 8
  %134 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %133, ptr %134, align 8
  ret void
}

define void @print88() {
  %1 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 88, ptr %1, align 4
  %2 = alloca i160, align 8
  %3 = alloca ptr, align 8
  %4 = load i32, ptr %1, align 4
  store i32 %4, ptr %2, align 4
  %5 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %5, align 4
  %6 = load i64, ptr %5, align 4
  store i64 %6, ptr %3, align 4
  %7 = load ptr, ptr %3, align 8
  %8 = insertvalue { ptr, i160 } undef, ptr %7, 0
  %9 = load i160, ptr %2, align 4
  %10 = insertvalue { ptr, i160 } %8, i160 %9, 1
  %11 = alloca [1 x ptr], align 8
  %12 = getelementptr [1 x ptr], ptr %11, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 1, ptr %11)
  %14 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %15 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %16 = alloca { ptr }, align 8
  %17 = getelementptr { ptr }, ptr %16, i32 0, i32 0
  store ptr %7, ptr %17, align 8
  %18 = call ptr @class_behavior_wrapper(ptr %15, ptr %16)
  call void %18(ptr %11, { ptr, i160 } %10) #15
  %19 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %19)
  %20 = alloca i32, align 4
  store i32 90, ptr %20, align 4
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = load i32, ptr %20, align 4
  store i32 %23, ptr %21, align 4
  %24 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %24, align 4
  %25 = load i64, ptr %24, align 4
  store i64 %25, ptr %22, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = insertvalue { ptr, i160 } undef, ptr %26, 0
  %28 = load i160, ptr %21, align 4
  %29 = insertvalue { ptr, i160 } %27, i160 %28, 1
  %30 = alloca [1 x ptr], align 8
  %31 = getelementptr [1 x ptr], ptr %30, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 1, ptr %30)
  %33 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %34 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %35 = alloca { ptr }, align 8
  %36 = getelementptr { ptr }, ptr %35, i32 0, i32 0
  store ptr %26, ptr %36, align 8
  %37 = call ptr @class_behavior_wrapper(ptr %34, ptr %35)
  call void %37(ptr %30, { ptr, i160 } %29) #15
  ret void
}

define void @coroutine_zhdmrpsinq_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  call void %2()
  ret void
}

define void @coroutine_zhdmrpsinq_buffer_filler(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define void @grabo() {
  %1 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 4, ptr %1, align 4
  %2 = load i32, ptr %1, align 4
  %3 = sext i32 %2 to i64
  %4 = alloca ptr, align 8
  %5 = mul i64 %3, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %6 = call ptr @bump_malloc(i64 %5)
  store ptr %6, ptr %4, align 8
  %7 = alloca ptr, align 8
  %8 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %7, align 8
  %10 = alloca i32, align 4
  store i32 0, ptr %10, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load i32, ptr %10, align 4
  %13 = sext i32 %12 to i64
  %14 = mul i64 ptrtoint (ptr getelementptr ([3 x i8], ptr null, i32 1) to i64), %13
  %15 = getelementptr i8, ptr %11, i64 %14
  %16 = load <3 x i8>, ptr @dmgph_one, align 4
  store <3 x i8> %16, ptr %15, align 4
  %17 = alloca i32, align 4
  store i32 3, ptr %17, align 4
  %18 = alloca i32, align 4
  store i32 4, ptr %18, align 4
  %19 = alloca [1 x ptr], align 8
  store ptr @String, ptr %19, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr ptr, ptr %20, i32 6
  %22 = load ptr, ptr %21, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr %22, ptr %19)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @String, ptr %26, align 8
  store ptr %25, ptr %27, align 8
  store i32 10, ptr %28, align 4
  %29 = alloca i32, align 4
  store i32 3, ptr %29, align 4
  %30 = alloca i32, align 4
  store i32 4, ptr %30, align 4
  %31 = load ptr, ptr %7, align 8
  %32 = insertvalue { ptr } undef, ptr %31, 0
  %33 = load i32, ptr %29, align 4
  %34 = load i32, ptr %30, align 4
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = load ptr, ptr %27, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 2
  %43 = load i32, ptr %28, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %43, 3
  %45 = alloca [3 x ptr], align 8
  %46 = getelementptr [3 x ptr], ptr %45, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %46, align 8
  %47 = getelementptr [3 x ptr], ptr %45, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %47, align 8
  %48 = getelementptr [3 x ptr], ptr %45, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 9, ptr %45)
  %50 = call ptr @llvm.invariant.start.p0(i64 280, ptr %36)
  %51 = getelementptr ptr, ptr %36, i32 %43
  %52 = getelementptr ptr, ptr %51, i32 4
  %53 = load ptr, ptr %52, align 8
  %54 = alloca { ptr, ptr, ptr }, align 8
  %55 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 0
  store ptr @buffer_typ, ptr %55, align 8
  %56 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 1
  store ptr @i32_typ, ptr %56, align 8
  %57 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 2
  store ptr @i32_typ, ptr %57, align 8
  %58 = call ptr @behavior_wrapper(ptr %53, { ptr, ptr, ptr, i32 } %44, ptr %54)
  call void %58({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %45, { ptr } %32, i32 %33, i32 %34) #15
  %59 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, i160 } undef, ptr %60, 0
  %62 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 1
  %63 = load i160, ptr %62, align 4
  %64 = insertvalue { ptr, i160 } %61, i160 %63, 1
  %65 = alloca [1 x ptr], align 8
  %66 = getelementptr [1 x ptr], ptr %65, i32 0, i32 0
  store ptr @_parameterization_String, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 1, ptr %65)
  %68 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %69 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %70 = alloca { ptr }, align 8
  %71 = getelementptr { ptr }, ptr %70, i32 0, i32 0
  store ptr %60, ptr %71, align 8
  %72 = call ptr @class_behavior_wrapper(ptr %69, ptr %70)
  call void %72(ptr %65, { ptr, i160 } %64) #15
  ret void
}

define i32 @_functionliteral_bnzhunqefr(i32 %0, i32 %1) {
  %3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %3, align 4
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load i32, ptr %4, align 4
  %7 = add i32 %5, %6
  %8 = alloca i32, align 4
  store i32 %7, ptr %8, align 4
  %9 = load i32, ptr %8, align 4
  ret i32 %9
}

define i32 @_functionliteral_sajmqyzgff(i32 %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  %3 = alloca i32, align 4
  store i32 2, ptr %3, align 4
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = mul i32 %4, %5
  %7 = alloca i32, align 4
  store i32 %6, ptr %7, align 4
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define i32 @_functionliteral_wzqxsoskrj() {
  %1 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 5, ptr %1, align 4
  %2 = load i32, ptr %1, align 4
  ret i32 %2
}

define void @_functionliteral_atwhrfvhau(i32 %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  %3 = alloca i160, align 8
  %4 = alloca ptr, align 8
  %5 = load i32, ptr %2, align 4
  store i32 %5, ptr %3, align 4
  %6 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %6, align 4
  %7 = load i64, ptr %6, align 4
  store i64 %7, ptr %4, align 4
  %8 = load ptr, ptr %4, align 8
  %9 = insertvalue { ptr, i160 } undef, ptr %8, 0
  %10 = load i160, ptr %3, align 4
  %11 = insertvalue { ptr, i160 } %9, i160 %10, 1
  %12 = alloca [1 x ptr], align 8
  %13 = getelementptr [1 x ptr], ptr %12, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %13, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 1, ptr %12)
  %15 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %16 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %17 = alloca { ptr }, align 8
  %18 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  store ptr %8, ptr %18, align 8
  %19 = call ptr @class_behavior_wrapper(ptr %16, ptr %17)
  call void %19(ptr %12, { ptr, i160 } %11) #15
  ret void
}

define i8 @i32toi8(i32 %0) {
  %2 = alloca i1, align 1
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %.reg2mem = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %6, align 4
  %7 = alloca i32, align 4
  store i32 0, ptr %7, align 4
  %8 = alloca i8, align 1
  store i8 0, ptr %8, align 1
  %9 = alloca i8, align 1
  store i8 1, ptr %9, align 1
  br label %10

10:                                               ; preds = %._crit_edge1, %1
  %11 = load i32, ptr %7, align 4
  %12 = load i32, ptr %6, align 4
  %13 = icmp slt i32 %11, %12
  store i1 %13, ptr %2, align 1
  %14 = load i1, ptr %2, align 1
  store i1 %14, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %15, label %._crit_edge

._crit_edge:                                      ; preds = %10
  br label %24

15:                                               ; preds = %10
  %16 = load i8, ptr %8, align 1
  %17 = load i8, ptr %9, align 1
  %18 = add i8 %16, %17
  store i8 %18, ptr %3, align 1
  %19 = load i8, ptr %3, align 1
  store i8 %19, ptr %8, align 1
  store i32 1, ptr %4, align 4
  %20 = load i32, ptr %7, align 4
  %21 = load i32, ptr %4, align 4
  %22 = add i32 %20, %21
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %5, align 4
  store i32 %23, ptr %7, align 4
  br label %24

24:                                               ; preds = %._crit_edge, %15
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %25

._crit_edge1:                                     ; preds = %24
  br label %10

25:                                               ; preds = %24
  %26 = load i8, ptr %8, align 1
  ret i8 %26
}

define { ptr, ptr, ptr, i32 } @read_file({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca i8, align 1
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca i32, align 4
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %13, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @String)
  %27 = alloca i32, align 4
  store i32 1, ptr %27, align 4
  %28 = load i32, ptr %27, align 4
  %29 = sext i32 %28 to i64
  %30 = alloca ptr, align 8
  %31 = mul i64 %29, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %32 = call ptr @bump_malloc(i64 %31)
  store ptr %32, ptr %30, align 8
  %33 = alloca ptr, align 8
  %34 = getelementptr { ptr }, ptr %30, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  store ptr %35, ptr %33, align 8
  %36 = alloca i32, align 4
  store i32 0, ptr %36, align 4
  %37 = alloca i32, align 4
  store i32 0, ptr %37, align 4
  %38 = alloca i32, align 4
  store i32 1, ptr %38, align 4
  %39 = alloca [1 x ptr], align 8
  store ptr @String, ptr %39, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr ptr, ptr %40, i32 6
  %42 = load ptr, ptr %41, align 8
  %43 = call { i64, i64 } @size_wrapper(ptr %42, ptr %39)
  %44 = extractvalue { i64, i64 } %43, 0
  %45 = call ptr @bump_malloc(i64 %44)
  %46 = alloca i32, align 4
  %47 = alloca ptr, align 8
  %48 = alloca ptr, align 8
  %49 = alloca ptr, align 8
  store ptr @String, ptr %49, align 8
  store ptr %45, ptr %48, align 8
  store i32 10, ptr %46, align 4
  %50 = alloca i32, align 4
  store i32 0, ptr %50, align 4
  %51 = alloca i32, align 4
  store i32 1, ptr %51, align 4
  %52 = load ptr, ptr %33, align 8
  %53 = insertvalue { ptr } undef, ptr %52, 0
  %54 = load i32, ptr %50, align 4
  %55 = load i32, ptr %51, align 4
  %56 = load ptr, ptr %49, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = load ptr, ptr %48, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %58, 1
  %60 = load ptr, ptr %47, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %60, 2
  %62 = load i32, ptr %46, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %62, 3
  %64 = alloca [3 x ptr], align 8
  %65 = getelementptr [3 x ptr], ptr %64, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %65, align 8
  %66 = getelementptr [3 x ptr], ptr %64, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %66, align 8
  %67 = getelementptr [3 x ptr], ptr %64, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 9, ptr %64)
  %69 = call ptr @llvm.invariant.start.p0(i64 280, ptr %56)
  %70 = getelementptr ptr, ptr %56, i32 %62
  %71 = getelementptr ptr, ptr %70, i32 4
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr, ptr, ptr }, align 8
  %74 = getelementptr { ptr, ptr, ptr }, ptr %73, i32 0, i32 0
  store ptr @buffer_typ, ptr %74, align 8
  %75 = getelementptr { ptr, ptr, ptr }, ptr %73, i32 0, i32 1
  store ptr @i32_typ, ptr %75, align 8
  %76 = getelementptr { ptr, ptr, ptr }, ptr %73, i32 0, i32 2
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %63, ptr %73)
  call void %77({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr %64, { ptr } %53, i32 %54, i32 %55) #15
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %49, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %82 = load ptr, ptr %48, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %84 = load ptr, ptr %47, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %86 = load i32, ptr %46, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %78, ptr @String)
  %87 = alloca i32, align 4
  %88 = alloca ptr, align 8
  %89 = alloca ptr, align 8
  %90 = alloca ptr, align 8
  %91 = load ptr, ptr %79, align 8
  store ptr %91, ptr %90, align 8
  %92 = load ptr, ptr %81, align 8
  store ptr %92, ptr %89, align 8
  %93 = load ptr, ptr %83, align 8
  store ptr %93, ptr %88, align 8
  %94 = load i32, ptr %85, align 4
  store i32 %94, ptr %87, align 4
  %95 = load ptr, ptr %16, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = load ptr, ptr %19, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 1
  %99 = load ptr, ptr %22, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %101 = load i32, ptr %25, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  %103 = alloca [0 x ptr], align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 0, ptr %103)
  %105 = call ptr @llvm.invariant.start.p0(i64 280, ptr %95)
  %106 = getelementptr ptr, ptr %95, i32 %101
  %107 = getelementptr ptr, ptr %106, i32 14
  %108 = load ptr, ptr %107, align 8
  %109 = alloca {}, align 8
  %110 = call ptr @behavior_wrapper(ptr %108, { ptr, ptr, ptr, i32 } %102, ptr %109)
  %111 = call { ptr } %110({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %103) #15
  %112 = alloca ptr, align 8
  store { ptr } %111, ptr %112, align 8
  %113 = alloca i32, align 4
  store i32 2, ptr %113, align 4
  %114 = load i32, ptr %113, align 4
  %115 = sext i32 %114 to i64
  %116 = alloca ptr, align 8
  %117 = mul i64 %115, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %118 = call ptr @bump_malloc(i64 %117)
  store ptr %118, ptr %116, align 8
  %119 = alloca ptr, align 8
  %120 = getelementptr { ptr }, ptr %116, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  store ptr %121, ptr %119, align 8
  %122 = alloca i32, align 4
  store i32 0, ptr %122, align 4
  %123 = load ptr, ptr %119, align 8
  %124 = load i32, ptr %122, align 4
  %125 = sext i32 %124 to i64
  %126 = mul i64 ptrtoint (ptr getelementptr ([1 x i8], ptr null, i32 1) to i64), %125
  %127 = getelementptr i8, ptr %123, i64 %126
  %128 = load <1 x i8>, ptr @ibcbk_r, align 1
  store <1 x i8> %128, ptr %127, align 1
  %129 = alloca i32, align 4
  store i32 1, ptr %129, align 4
  %130 = alloca i32, align 4
  store i32 2, ptr %130, align 4
  %131 = alloca [1 x ptr], align 8
  store ptr @String, ptr %131, align 8
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr ptr, ptr %132, i32 6
  %134 = load ptr, ptr %133, align 8
  %135 = call { i64, i64 } @size_wrapper(ptr %134, ptr %131)
  %136 = extractvalue { i64, i64 } %135, 0
  %137 = call ptr @bump_malloc(i64 %136)
  %138 = alloca i32, align 4
  %139 = alloca ptr, align 8
  %140 = alloca ptr, align 8
  %141 = alloca ptr, align 8
  store ptr @String, ptr %141, align 8
  store ptr %137, ptr %140, align 8
  store i32 10, ptr %138, align 4
  %142 = alloca i32, align 4
  store i32 1, ptr %142, align 4
  %143 = alloca i32, align 4
  store i32 2, ptr %143, align 4
  %144 = load ptr, ptr %119, align 8
  %145 = insertvalue { ptr } undef, ptr %144, 0
  %146 = load i32, ptr %142, align 4
  %147 = load i32, ptr %143, align 4
  %148 = load ptr, ptr %141, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %148, 0
  %150 = load ptr, ptr %140, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %149, ptr %150, 1
  %152 = load ptr, ptr %139, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %152, 2
  %154 = load i32, ptr %138, align 4
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, i32 %154, 3
  %156 = alloca [3 x ptr], align 8
  %157 = getelementptr [3 x ptr], ptr %156, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %157, align 8
  %158 = getelementptr [3 x ptr], ptr %156, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %158, align 8
  %159 = getelementptr [3 x ptr], ptr %156, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %159, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 9, ptr %156)
  %161 = call ptr @llvm.invariant.start.p0(i64 280, ptr %148)
  %162 = getelementptr ptr, ptr %148, i32 %154
  %163 = getelementptr ptr, ptr %162, i32 4
  %164 = load ptr, ptr %163, align 8
  %165 = alloca { ptr, ptr, ptr }, align 8
  %166 = getelementptr { ptr, ptr, ptr }, ptr %165, i32 0, i32 0
  store ptr @buffer_typ, ptr %166, align 8
  %167 = getelementptr { ptr, ptr, ptr }, ptr %165, i32 0, i32 1
  store ptr @i32_typ, ptr %167, align 8
  %168 = getelementptr { ptr, ptr, ptr }, ptr %165, i32 0, i32 2
  store ptr @i32_typ, ptr %168, align 8
  %169 = call ptr @behavior_wrapper(ptr %164, { ptr, ptr, ptr, i32 } %155, ptr %165)
  call void %169({ ptr, ptr, ptr, i32 } %155, { ptr, ptr, ptr, i32 } %155, ptr %156, { ptr } %145, i32 %146, i32 %147) #15
  %170 = load ptr, ptr %141, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %170, 0
  %172 = load ptr, ptr %140, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %172, 1
  %174 = load ptr, ptr %139, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } %173, ptr %174, 2
  %176 = load i32, ptr %138, align 4
  %177 = insertvalue { ptr, ptr, ptr, i32 } %175, i32 %176, 3
  %178 = alloca [0 x ptr], align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 0, ptr %178)
  %180 = call ptr @llvm.invariant.start.p0(i64 280, ptr %170)
  %181 = getelementptr ptr, ptr %170, i32 %176
  %182 = getelementptr ptr, ptr %181, i32 14
  %183 = load ptr, ptr %182, align 8
  %184 = alloca {}, align 8
  %185 = call ptr @behavior_wrapper(ptr %183, { ptr, ptr, ptr, i32 } %177, ptr %184)
  %186 = call { ptr } %185({ ptr, ptr, ptr, i32 } %177, { ptr, ptr, ptr, i32 } %177, ptr %178) #15
  %187 = alloca ptr, align 8
  store { ptr } %186, ptr %187, align 8
  %188 = load ptr, ptr %112, align 8
  %189 = insertvalue { ptr } undef, ptr %188, 0
  %190 = load ptr, ptr %187, align 8
  %191 = insertvalue { ptr } undef, ptr %190, 0
  %192 = call { ptr } @fopen({ ptr } %189, { ptr } %191)
  %193 = alloca ptr, align 8
  store { ptr } %192, ptr %193, align 8
  %194 = alloca ptr, align 8
  %195 = load ptr, ptr %193, align 8
  store ptr %195, ptr %194, align 8
  br label %196

196:                                              ; preds = %._crit_edge, %1
  store i1 true, ptr %2, align 1
  %197 = load i1, ptr %2, align 1
  br i1 %197, label %198, label %243

198:                                              ; preds = %196
  %199 = load ptr, ptr %194, align 8
  %200 = insertvalue { ptr } undef, ptr %199, 0
  %201 = call i32 @fgetc({ ptr } %200)
  store i32 %201, ptr %3, align 4
  store i32 -1, ptr %4, align 4
  %202 = load i32, ptr %3, align 4
  %203 = load i32, ptr %4, align 4
  %204 = icmp eq i32 %202, %203
  store i1 %204, ptr %5, align 1
  %205 = load i1, ptr %5, align 1
  %206 = xor i1 %205, true
  %207 = zext i1 %206 to i32
  store i32 %207, ptr %.reg2mem1, align 4
  br i1 %205, label %208, label %209

208:                                              ; preds = %198
  br label %242

209:                                              ; preds = %198
  %210 = load i32, ptr %3, align 4
  %211 = call i8 @i32toi8(i32 %210)
  store i8 %211, ptr %6, align 1
  %212 = load i8, ptr %6, align 1
  %213 = load ptr, ptr %90, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %213, 0
  %215 = load ptr, ptr %89, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %215, 1
  %217 = load ptr, ptr %88, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %217, 2
  %219 = load i32, ptr %87, align 4
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, i32 %219, 3
  %221 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %221, align 8
  %222 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %223 = call ptr @llvm.invariant.start.p0(i64 280, ptr %213)
  %224 = getelementptr ptr, ptr %213, i32 %219
  %225 = getelementptr ptr, ptr %224, i32 8
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr @i8_typ, ptr %227, align 8
  %228 = call ptr @behavior_wrapper(ptr %226, { ptr, ptr, ptr, i32 } %220, ptr %8)
  %229 = call { ptr, ptr, ptr, i32 } %228({ ptr, ptr, ptr, i32 } %220, { ptr, ptr, ptr, i32 } %220, ptr %7, i8 %212) #15
  store { ptr, ptr, ptr, i32 } %229, ptr %9, align 8
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %232 = load ptr, ptr %230, align 8
  store ptr %232, ptr %231, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %235 = load ptr, ptr %233, align 8
  store ptr %235, ptr %234, align 8
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %238 = load ptr, ptr %236, align 8
  store ptr %238, ptr %237, align 8
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %241 = load i32, ptr %239, align 4
  store i32 %241, ptr %240, align 4
  call void @set_offset(ptr %10, ptr @String)
  br label %242

242:                                              ; preds = %209, %208
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem3, align 4
  br label %244

243:                                              ; preds = %196
  store i32 0, ptr %.reg2mem3, align 4
  br label %244

244:                                              ; preds = %243, %242
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem, align 4
  br label %245

245:                                              ; preds = %244
  %.reload = load i32, ptr %.reg2mem, align 4
  %246 = trunc i32 %.reload to i1
  br i1 %246, label %._crit_edge, label %247

._crit_edge:                                      ; preds = %245
  br label %196

247:                                              ; preds = %245
  %248 = load ptr, ptr %194, align 8
  %249 = insertvalue { ptr } undef, ptr %248, 0
  %250 = call i32 @fclose({ ptr } %249)
  store i32 %250, ptr %11, align 4
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %252 = load ptr, ptr %90, align 8
  store ptr %252, ptr %251, align 8
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %254 = load ptr, ptr %89, align 8
  store ptr %254, ptr %253, align 8
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %256 = load ptr, ptr %88, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %258 = load i32, ptr %87, align 4
  store i32 %258, ptr %257, align 4
  call void @set_offset(ptr %12, ptr @String)
  %259 = load ptr, ptr %251, align 8
  %260 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %259, 0
  %261 = load ptr, ptr %253, align 8
  %262 = insertvalue { ptr, ptr, ptr, i32 } %260, ptr %261, 1
  %263 = load ptr, ptr %255, align 8
  %264 = insertvalue { ptr, ptr, ptr, i32 } %262, ptr %263, 2
  %265 = load i32, ptr %257, align 4
  %266 = insertvalue { ptr, ptr, ptr, i32 } %264, i32 %265, 3
  ret { ptr, ptr, ptr, i32 } %266
}

declare { ptr } @fopen({ ptr }, { ptr })

declare i32 @fgetc({ ptr })

declare i32 @fclose({ ptr })

define void @write_file({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @String)
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %17, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = load i32, ptr %28, align 4
  store i32 %30, ptr %29, align 4
  call void @set_offset(ptr %18, ptr @String)
  %31 = load ptr, ptr %6, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %9, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %12, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %15, align 4
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  %39 = alloca [0 x ptr], align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 0, ptr %39)
  %41 = call ptr @llvm.invariant.start.p0(i64 280, ptr %31)
  %42 = getelementptr ptr, ptr %31, i32 %37
  %43 = getelementptr ptr, ptr %42, i32 14
  %44 = load ptr, ptr %43, align 8
  %45 = alloca {}, align 8
  %46 = call ptr @behavior_wrapper(ptr %44, { ptr, ptr, ptr, i32 } %38, ptr %45)
  %47 = call { ptr } %46({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr %39) #15
  %48 = alloca ptr, align 8
  store { ptr } %47, ptr %48, align 8
  %49 = alloca i32, align 4
  store i32 2, ptr %49, align 4
  %50 = load i32, ptr %49, align 4
  %51 = sext i32 %50 to i64
  %52 = alloca ptr, align 8
  %53 = mul i64 %51, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %54 = call ptr @bump_malloc(i64 %53)
  store ptr %54, ptr %52, align 8
  %55 = alloca ptr, align 8
  %56 = getelementptr { ptr }, ptr %52, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  store ptr %57, ptr %55, align 8
  %58 = alloca i32, align 4
  store i32 0, ptr %58, align 4
  %59 = load ptr, ptr %55, align 8
  %60 = load i32, ptr %58, align 4
  %61 = sext i32 %60 to i64
  %62 = mul i64 ptrtoint (ptr getelementptr ([1 x i8], ptr null, i32 1) to i64), %61
  %63 = getelementptr i8, ptr %59, i64 %62
  %64 = load <1 x i8>, ptr @ekesy_w, align 1
  store <1 x i8> %64, ptr %63, align 1
  %65 = alloca i32, align 4
  store i32 1, ptr %65, align 4
  %66 = alloca i32, align 4
  store i32 2, ptr %66, align 4
  %67 = alloca [1 x ptr], align 8
  store ptr @String, ptr %67, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr ptr, ptr %68, i32 6
  %70 = load ptr, ptr %69, align 8
  %71 = call { i64, i64 } @size_wrapper(ptr %70, ptr %67)
  %72 = extractvalue { i64, i64 } %71, 0
  %73 = call ptr @bump_malloc(i64 %72)
  %74 = alloca i32, align 4
  %75 = alloca ptr, align 8
  %76 = alloca ptr, align 8
  %77 = alloca ptr, align 8
  store ptr @String, ptr %77, align 8
  store ptr %73, ptr %76, align 8
  store i32 10, ptr %74, align 4
  %78 = alloca i32, align 4
  store i32 1, ptr %78, align 4
  %79 = alloca i32, align 4
  store i32 2, ptr %79, align 4
  %80 = load ptr, ptr %55, align 8
  %81 = insertvalue { ptr } undef, ptr %80, 0
  %82 = load i32, ptr %78, align 4
  %83 = load i32, ptr %79, align 4
  %84 = load ptr, ptr %77, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = load ptr, ptr %76, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 1
  %88 = load ptr, ptr %75, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 2
  %90 = load i32, ptr %74, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %90, 3
  %92 = alloca [3 x ptr], align 8
  %93 = getelementptr [3 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %93, align 8
  %94 = getelementptr [3 x ptr], ptr %92, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %94, align 8
  %95 = getelementptr [3 x ptr], ptr %92, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %95, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 9, ptr %92)
  %97 = call ptr @llvm.invariant.start.p0(i64 280, ptr %84)
  %98 = getelementptr ptr, ptr %84, i32 %90
  %99 = getelementptr ptr, ptr %98, i32 4
  %100 = load ptr, ptr %99, align 8
  %101 = alloca { ptr, ptr, ptr }, align 8
  %102 = getelementptr { ptr, ptr, ptr }, ptr %101, i32 0, i32 0
  store ptr @buffer_typ, ptr %102, align 8
  %103 = getelementptr { ptr, ptr, ptr }, ptr %101, i32 0, i32 1
  store ptr @i32_typ, ptr %103, align 8
  %104 = getelementptr { ptr, ptr, ptr }, ptr %101, i32 0, i32 2
  store ptr @i32_typ, ptr %104, align 8
  %105 = call ptr @behavior_wrapper(ptr %100, { ptr, ptr, ptr, i32 } %91, ptr %101)
  call void %105({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr %92, { ptr } %81, i32 %82, i32 %83) #15
  %106 = load ptr, ptr %77, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %106, 0
  %108 = load ptr, ptr %76, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %108, 1
  %110 = load ptr, ptr %75, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 2
  %112 = load i32, ptr %74, align 4
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, i32 %112, 3
  %114 = alloca [0 x ptr], align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 0, ptr %114)
  %116 = call ptr @llvm.invariant.start.p0(i64 280, ptr %106)
  %117 = getelementptr ptr, ptr %106, i32 %112
  %118 = getelementptr ptr, ptr %117, i32 14
  %119 = load ptr, ptr %118, align 8
  %120 = alloca {}, align 8
  %121 = call ptr @behavior_wrapper(ptr %119, { ptr, ptr, ptr, i32 } %113, ptr %120)
  %122 = call { ptr } %121({ ptr, ptr, ptr, i32 } %113, { ptr, ptr, ptr, i32 } %113, ptr %114) #15
  %123 = alloca ptr, align 8
  store { ptr } %122, ptr %123, align 8
  %124 = load ptr, ptr %48, align 8
  %125 = insertvalue { ptr } undef, ptr %124, 0
  %126 = load ptr, ptr %123, align 8
  %127 = insertvalue { ptr } undef, ptr %126, 0
  %128 = call { ptr } @fopen({ ptr } %125, { ptr } %127)
  %129 = alloca ptr, align 8
  store { ptr } %128, ptr %129, align 8
  %130 = alloca ptr, align 8
  %131 = load ptr, ptr %129, align 8
  store ptr %131, ptr %130, align 8
  %132 = load ptr, ptr %20, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %132, 0
  %134 = load ptr, ptr %23, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %134, 1
  %136 = load ptr, ptr %26, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %136, 2
  %138 = load i32, ptr %29, align 4
  %139 = insertvalue { ptr, ptr, ptr, i32 } %137, i32 %138, 3
  %140 = alloca [0 x ptr], align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 0, ptr %140)
  %142 = call ptr @llvm.invariant.start.p0(i64 280, ptr %132)
  %143 = getelementptr ptr, ptr %132, i32 %138
  %144 = getelementptr ptr, ptr %143, i32 14
  %145 = load ptr, ptr %144, align 8
  %146 = alloca {}, align 8
  %147 = call ptr @behavior_wrapper(ptr %145, { ptr, ptr, ptr, i32 } %139, ptr %146)
  %148 = call { ptr } %147({ ptr, ptr, ptr, i32 } %139, { ptr, ptr, ptr, i32 } %139, ptr %140) #15
  %149 = alloca ptr, align 8
  store { ptr } %148, ptr %149, align 8
  %150 = load ptr, ptr %130, align 8
  %151 = insertvalue { ptr } undef, ptr %150, 0
  %152 = load ptr, ptr %149, align 8
  %153 = insertvalue { ptr } undef, ptr %152, 0
  %154 = call i32 @fprintf({ ptr } %151, { ptr } %153)
  %155 = alloca i32, align 4
  store i32 %154, ptr %155, align 4
  %156 = load ptr, ptr %130, align 8
  %157 = insertvalue { ptr } undef, ptr %156, 0
  %158 = call i32 @fclose({ ptr } %157)
  %159 = alloca i32, align 4
  store i32 %158, ptr %159, align 4
  ret void
}

declare i32 @fprintf({ ptr }, { ptr })

define void @_functionliteral_xwqjhjpryd(i32 %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = mul i32 %3, %3
  %5 = alloca i32, align 4
  store i32 %4, ptr %5, align 4
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = load i32, ptr %5, align 4
  store i32 %8, ptr %6, align 4
  %9 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %9, align 4
  %10 = load i64, ptr %9, align 4
  store i64 %10, ptr %7, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = insertvalue { ptr, i160 } undef, ptr %11, 0
  %13 = load i160, ptr %6, align 4
  %14 = insertvalue { ptr, i160 } %12, i160 %13, 1
  %15 = alloca [1 x ptr], align 8
  %16 = getelementptr [1 x ptr], ptr %15, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %16, align 8
  %17 = call ptr @llvm.invariant.start.p0(i64 1, ptr %15)
  %18 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %19 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %20 = alloca { ptr }, align 8
  %21 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  store ptr %11, ptr %21, align 8
  %22 = call ptr @class_behavior_wrapper(ptr %19, ptr %20)
  call void %22(ptr %15, { ptr, i160 } %14) #15
  ret void
}

define i32 @_functionliteral_fqpyolvewo(i32 %0, i32 %1) {
  %3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %3, align 4
  %4 = alloca i32, align 4
  store i32 %1, ptr %4, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load i32, ptr %4, align 4
  %7 = add i32 %5, %6
  %8 = alloca i32, align 4
  store i32 %7, ptr %8, align 4
  %9 = load i32, ptr %8, align 4
  ret i32 %9
}

define void @_functionliteral_zcwfishgpw(i32 %0, i32 %1) {
  %3 = alloca i1, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca i64, align 8
  %9 = alloca { ptr, i32 }, align 8
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %.reg2mem = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %16, align 4
  %17 = alloca i32, align 4
  store i32 %1, ptr %17, align 4
  %18 = alloca i32, align 4
  store i32 7, ptr %18, align 4
  %19 = alloca ptr, align 8
  store ptr @_functionliteral_fqpyolvewo, ptr %19, align 8
  br label %20

20:                                               ; preds = %._crit_edge2, %2
  store i1 true, ptr %3, align 1
  %21 = load i1, ptr %3, align 1
  store i1 %21, ptr %.reg2mem, align 1
  %.reload3 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload3, label %22, label %._crit_edge

._crit_edge:                                      ; preds = %20
  br label %59

22:                                               ; preds = %20
  %23 = load i32, ptr %16, align 4
  %24 = load i32, ptr %17, align 4
  %25 = load ptr, ptr %19, align 8
  %26 = call i32 %25(i32 %23, i32 %24)
  store i32 %26, ptr %4, align 4
  %27 = load i32, ptr %4, align 4
  %28 = load i32, ptr %18, align 4
  %29 = add i32 %27, %28
  store i32 %29, ptr %5, align 4
  %30 = load i32, ptr %5, align 4
  store i32 %30, ptr %6, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %8, align 4
  %31 = load i64, ptr %8, align 4
  store i64 %31, ptr %7, align 4
  %32 = load ptr, ptr %7, align 8
  %33 = insertvalue { ptr, i32 } undef, ptr %32, 0
  %34 = load i32, ptr %6, align 4
  %35 = insertvalue { ptr, i32 } %33, i32 %34, 1
  %36 = call ptr @get_current_coroutine()
  %37 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %36, i32 0, i32 4
  store { ptr, i32 } %35, ptr %37, align 8
  call void @coroutine_yield(ptr %36)
  %38 = load { ptr, i32 }, ptr %37, align 8
  store { ptr, i32 } %38, ptr %9, align 8
  %39 = load ptr, ptr %9, align 8
  %40 = ptrtoint ptr %39 to i64
  %41 = icmp eq i64 %40, ptrtoint (ptr @nil_typ to i64)
  %42 = icmp eq i64 %40, 0
  %43 = or i1 %41, %42
  %44 = icmp eq i1 %43, false
  store i1 %44, ptr %10, align 1
  %45 = load i1, ptr %10, align 1
  br i1 %45, label %46, label %._crit_edge1

._crit_edge1:                                     ; preds = %22
  br label %58

46:                                               ; preds = %22
  %47 = getelementptr { ptr, i32 }, ptr %9, i32 0, i32 1
  %48 = load i32, ptr %47, align 4
  store i32 %48, ptr %11, align 4
  %49 = load i32, ptr %18, align 4
  %50 = load i32, ptr %11, align 4
  %51 = add i32 %49, %50
  store i32 %51, ptr %12, align 4
  %52 = load i32, ptr %12, align 4
  store i32 %52, ptr %18, align 4
  %53 = load i32, ptr %11, align 4
  store i32 %53, ptr %13, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %15, align 4
  %54 = load i64, ptr %15, align 4
  store i64 %54, ptr %14, align 4
  %55 = getelementptr { ptr, i32 }, ptr %9, i32 0, i32 0
  %56 = load ptr, ptr %14, align 8
  store ptr %56, ptr %55, align 8
  %57 = load i32, ptr %13, align 4
  store i32 %57, ptr %47, align 4
  br label %58

58:                                               ; preds = %._crit_edge1, %46
  br label %59

59:                                               ; preds = %._crit_edge, %58
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge2, label %60

._crit_edge2:                                     ; preds = %59
  br label %20

60:                                               ; preds = %59
  ret void
}

define void @coroutine_zerlfaimah_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 1
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 2
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load ptr, ptr %0, align 8
  call void %6(i32 %4, i32 %5)
  ret void
}

define void @coroutine_zerlfaimah_buffer_filler(ptr %0, i32 %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 1
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 2
  store i32 %1, ptr %4, align 4
  store i32 %2, ptr %5, align 4
  ret void
}

define void @coroutine_lxaqpmihnb_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  %3 = call i32 %2()
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %0, i32 0, i32 4, i32 1
  store i32 %3, ptr %4, align 4
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %0, i32 0, i32 4, i32 0
  store ptr @i32_typ, ptr %5, align 8
  ret void
}

define void @coroutine_lxaqpmihnb_buffer_filler(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define void @coroutine_xkuywylxja_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  %3 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %4 = load ptr, ptr %0, align 8
  call void %4({ ptr, ptr, ptr, i32 } %3)
  ret void
}

define void @coroutine_xkuywylxja_buffer_filler(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  ret void
}

define void @_functionliteral_dhyzoofutg({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = alloca i32, align 4
  store i32 88, ptr %3, align 4
  %4 = load i32, ptr %3, align 4
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %15 = load i32, ptr %14, align 4
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %15, 3
  %17 = alloca [1 x ptr], align 8
  %18 = getelementptr [1 x ptr], ptr %17, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 1, ptr %17)
  %20 = call ptr @llvm.invariant.start.p0(i64 56, ptr %6)
  %21 = getelementptr ptr, ptr %6, i32 %15
  %22 = getelementptr ptr, ptr %21, i32 3
  %23 = load ptr, ptr %22, align 8
  %24 = alloca { ptr }, align 8
  %25 = getelementptr { ptr }, ptr %24, i32 0, i32 0
  store ptr @i32_typ, ptr %25, align 8
  %26 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %16, ptr %24)
  call void %26({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr %17, i32 %4) #15
  ret void
}

define i1 @_functionliteral_qpqtvtqzif(i32 %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  %3 = alloca i32, align 4
  store i32 2, ptr %3, align 4
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = srem i32 %4, %5
  %7 = alloca i32, align 4
  store i32 %6, ptr %7, align 4
  %8 = alloca i32, align 4
  store i32 0, ptr %8, align 4
  %9 = load i32, ptr %7, align 4
  %10 = load i32, ptr %8, align 4
  %11 = icmp eq i32 %9, %10
  %12 = alloca i1, align 1
  store i1 %11, ptr %12, align 1
  %13 = load i1, ptr %12, align 1
  ret i1 %13
}

define i32 @_functionliteral_papvnxfhfl(i32 %0) {
  %2 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  %3 = load i32, ptr %2, align 4
  %4 = mul i32 %3, %3
  %5 = alloca i32, align 4
  store i32 %4, ptr %5, align 4
  %6 = load i32, ptr %5, align 4
  ret i32 %6
}

define i32 @main() {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca i32, align 4
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca [3 x ptr], align 8
  %20 = alloca { ptr, ptr, ptr }, align 8
  %21 = alloca [1 x ptr], align 8
  %22 = alloca { ptr }, align 8
  %23 = alloca i1, align 1
  %24 = alloca i1, align 1
  %25 = alloca i1, align 1
  %26 = alloca i1, align 1
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  %29 = alloca i64, align 8
  %30 = alloca [1 x ptr], align 8
  %31 = alloca { ptr }, align 8
  %32 = alloca [1 x ptr], align 8
  %33 = alloca i32, align 4
  %34 = alloca ptr, align 8
  %35 = alloca ptr, align 8
  %36 = alloca ptr, align 8
  %37 = alloca [0 x ptr], align 8
  %38 = alloca {}, align 8
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  %40 = alloca i32, align 4
  %41 = alloca ptr, align 8
  %42 = alloca ptr, align 8
  %43 = alloca ptr, align 8
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i160, align 8
  %47 = alloca ptr, align 8
  %48 = alloca i64, align 8
  %49 = alloca i160, align 8
  %50 = alloca ptr, align 8
  %51 = alloca i64, align 8
  %52 = alloca [2 x ptr], align 8
  %53 = alloca { ptr, ptr }, align 8
  %54 = alloca double, align 8
  %55 = alloca i64, align 8
  %56 = alloca ptr, align 8
  %57 = alloca i64, align 8
  %58 = alloca double, align 8
  %59 = alloca { ptr, i64 }, align 8
  %60 = alloca i160, align 8
  %61 = alloca ptr, align 8
  %62 = alloca i64, align 8
  %63 = alloca [2 x ptr], align 8
  %64 = alloca { ptr, ptr }, align 8
  %65 = alloca i32, align 4
  %66 = alloca ptr, align 8
  %67 = alloca ptr, align 8
  %68 = alloca i32, align 4
  %69 = alloca i32, align 4
  %70 = alloca i32, align 4
  %71 = alloca [1 x ptr], align 8
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  %73 = alloca i32, align 4
  %74 = alloca i32, align 4
  %75 = alloca [3 x ptr], align 8
  %76 = alloca { ptr, ptr, ptr }, align 8
  %77 = alloca [1 x ptr], align 8
  %78 = alloca { ptr }, align 8
  %79 = alloca i32, align 4
  %80 = alloca double, align 8
  %81 = alloca i32, align 4
  %82 = alloca [1 x ptr], align 8
  %83 = alloca i32, align 4
  %84 = alloca ptr, align 8
  %85 = alloca ptr, align 8
  %86 = alloca ptr, align 8
  %87 = alloca i32, align 4
  %88 = alloca double, align 8
  %89 = alloca i32, align 4
  %90 = alloca [3 x ptr], align 8
  %91 = alloca { ptr, ptr, ptr }, align 8
  %92 = alloca { ptr, ptr, ptr, i32 }, align 8
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  %94 = alloca i32, align 4
  %95 = alloca ptr, align 8
  %96 = alloca ptr, align 8
  %97 = alloca i32, align 4
  %98 = alloca i32, align 4
  %99 = alloca i32, align 4
  %100 = alloca [1 x ptr], align 8
  %101 = alloca { ptr, ptr, ptr, i32 }, align 8
  %102 = alloca i32, align 4
  %103 = alloca i32, align 4
  %104 = alloca [3 x ptr], align 8
  %105 = alloca { ptr, ptr, ptr }, align 8
  %106 = alloca [1 x ptr], align 8
  %107 = alloca { ptr }, align 8
  %108 = alloca i32, align 4
  %109 = alloca double, align 8
  %110 = alloca [1 x ptr], align 8
  %111 = alloca i32, align 4
  %112 = alloca ptr, align 8
  %113 = alloca ptr, align 8
  %114 = alloca ptr, align 8
  %115 = alloca i32, align 4
  %116 = alloca double, align 8
  %117 = alloca [2 x ptr], align 8
  %118 = alloca { ptr, ptr }, align 8
  %119 = alloca { ptr, ptr, ptr, i32 }, align 8
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = alloca [2 x ptr], align 8
  %122 = alloca { ptr, ptr }, align 8
  %123 = alloca i32, align 4
  %124 = alloca i160, align 8
  %125 = alloca ptr, align 8
  %126 = alloca i64, align 8
  %127 = alloca { ptr, i64 }, align 8
  %128 = alloca [2 x ptr], align 8
  %129 = alloca { ptr, ptr }, align 8
  %130 = alloca i32, align 4
  %131 = alloca ptr, align 8
  %132 = alloca ptr, align 8
  %133 = alloca i32, align 4
  %134 = alloca i32, align 4
  %135 = alloca i32, align 4
  %136 = alloca [1 x ptr], align 8
  %137 = alloca { ptr, ptr, ptr, i32 }, align 8
  %138 = alloca i32, align 4
  %139 = alloca i32, align 4
  %140 = alloca [3 x ptr], align 8
  %141 = alloca { ptr, ptr, ptr }, align 8
  %142 = alloca [1 x ptr], align 8
  %143 = alloca { ptr }, align 8
  %144 = alloca [0 x ptr], align 8
  %145 = alloca {}, align 8
  %146 = alloca i32, align 4
  %147 = alloca [1 x ptr], align 8
  %148 = alloca { ptr }, align 8
  %149 = alloca [0 x ptr], align 8
  %150 = alloca {}, align 8
  %151 = alloca i32, align 4
  %152 = alloca [1 x ptr], align 8
  %153 = alloca i32, align 4
  %154 = alloca ptr, align 8
  %155 = alloca ptr, align 8
  %156 = alloca ptr, align 8
  %157 = alloca i32, align 4
  %158 = alloca [1 x ptr], align 8
  %159 = alloca { ptr }, align 8
  %160 = alloca { ptr, ptr, ptr, i32 }, align 8
  %161 = alloca i32, align 4
  %162 = alloca ptr, align 8
  %163 = alloca ptr, align 8
  %164 = alloca ptr, align 8
  %165 = alloca i32, align 4
  %166 = alloca [1 x ptr], align 8
  %167 = alloca { ptr }, align 8
  %168 = alloca { ptr, ptr, ptr, i32 }, align 8
  %169 = alloca { ptr, ptr, ptr, i32 }, align 8
  %170 = alloca [0 x ptr], align 8
  %171 = alloca {}, align 8
  %172 = alloca double, align 8
  %173 = alloca [1 x ptr], align 8
  %174 = alloca { ptr }, align 8
  %175 = alloca double, align 8
  %176 = alloca i32, align 4
  %177 = alloca i64, align 8
  %178 = alloca ptr, align 8
  %179 = alloca i64, align 8
  %180 = alloca [1 x ptr], align 8
  %181 = alloca { ptr }, align 8
  %182 = alloca { ptr, i64 }, align 8
  %183 = alloca i32, align 4
  %184 = alloca i160, align 8
  %185 = alloca ptr, align 8
  %186 = alloca i64, align 8
  %187 = alloca [1 x ptr], align 8
  %188 = alloca { ptr }, align 8
  %189 = alloca i160, align 8
  %190 = alloca ptr, align 8
  %191 = alloca i64, align 8
  %192 = alloca [1 x ptr], align 8
  %193 = alloca { ptr }, align 8
  %194 = alloca [0 x ptr], align 8
  %195 = alloca {}, align 8
  %196 = alloca { ptr, i160 }, align 8
  %197 = alloca i32, align 4
  %198 = alloca i160, align 8
  %199 = alloca ptr, align 8
  %200 = alloca i64, align 8
  %201 = alloca i1, align 1
  %202 = alloca i32, align 4
  %203 = alloca i160, align 8
  %204 = alloca ptr, align 8
  %205 = alloca i64, align 8
  %206 = alloca [1 x ptr], align 8
  %207 = alloca { ptr }, align 8
  %208 = alloca i32, align 4
  %209 = alloca i32, align 4
  %210 = alloca i32, align 4
  %211 = alloca i1, align 1
  %212 = alloca i160, align 8
  %213 = alloca ptr, align 8
  %214 = alloca i64, align 8
  %215 = alloca i32, align 4
  %216 = alloca double, align 8
  %217 = alloca i32, align 4
  %218 = alloca [1 x ptr], align 8
  %219 = alloca i32, align 4
  %220 = alloca ptr, align 8
  %221 = alloca ptr, align 8
  %222 = alloca ptr, align 8
  %223 = alloca i32, align 4
  %224 = alloca double, align 8
  %225 = alloca i32, align 4
  %226 = alloca [3 x ptr], align 8
  %227 = alloca { ptr, ptr, ptr }, align 8
  %228 = alloca { ptr, ptr, ptr, i32 }, align 8
  %229 = alloca { ptr, ptr, ptr, i32 }, align 8
  %230 = alloca i1, align 1
  %231 = alloca i32, align 4
  %232 = alloca i160, align 8
  %233 = alloca ptr, align 8
  %234 = alloca i64, align 8
  %235 = alloca [1 x ptr], align 8
  %236 = alloca { ptr }, align 8
  %237 = alloca i160, align 8
  %238 = alloca ptr, align 8
  %239 = alloca i64, align 8
  %240 = alloca i1, align 1
  %241 = alloca { ptr, ptr, ptr, i32 }, align 8
  %242 = alloca [0 x ptr], align 8
  %243 = alloca {}, align 8
  %244 = alloca i32, align 4
  %245 = alloca [1 x ptr], align 8
  %246 = alloca i32, align 4
  %247 = alloca ptr, align 8
  %248 = alloca ptr, align 8
  %249 = alloca ptr, align 8
  %250 = alloca i32, align 4
  %251 = alloca [1 x ptr], align 8
  %252 = alloca { ptr }, align 8
  %253 = alloca { ptr, ptr, ptr, i32 }, align 8
  %254 = alloca i32, align 4
  %255 = alloca ptr, align 8
  %256 = alloca ptr, align 8
  %257 = alloca ptr, align 8
  %258 = alloca { ptr, ptr, ptr, i32 }, align 8
  %259 = alloca i32, align 4
  %260 = alloca ptr, align 8
  %261 = alloca ptr, align 8
  %262 = alloca ptr, align 8
  %263 = alloca i32, align 4
  %264 = alloca i32, align 4
  %265 = alloca [1 x ptr], align 8
  %266 = alloca i32, align 4
  %267 = alloca ptr, align 8
  %268 = alloca ptr, align 8
  %269 = alloca ptr, align 8
  %270 = alloca i32, align 4
  %271 = alloca i32, align 4
  %272 = alloca [2 x ptr], align 8
  %273 = alloca { ptr, ptr }, align 8
  %274 = alloca [0 x ptr], align 8
  %275 = alloca {}, align 8
  %276 = alloca { ptr, ptr, ptr, i32 }, align 8
  %277 = alloca { ptr, ptr, ptr, i32 }, align 8
  %278 = alloca { ptr, ptr, ptr, i32 }, align 8
  %279 = alloca i32, align 4
  %280 = alloca ptr, align 8
  %281 = alloca ptr, align 8
  %282 = alloca ptr, align 8
  %283 = alloca [0 x ptr], align 8
  %284 = alloca {}, align 8
  %285 = alloca { ptr, i32 }, align 8
  %286 = alloca i1, align 1
  %287 = alloca i32, align 4
  %288 = alloca [1 x ptr], align 8
  %289 = alloca i32, align 4
  %290 = alloca ptr, align 8
  %291 = alloca ptr, align 8
  %292 = alloca ptr, align 8
  %293 = alloca [1 x ptr], align 8
  %294 = alloca { ptr }, align 8
  %295 = alloca { ptr, ptr, ptr, i32 }, align 8
  %296 = alloca [1 x ptr], align 8
  %297 = alloca { ptr }, align 8
  %298 = alloca { ptr, ptr, ptr, i32 }, align 8
  %299 = alloca { ptr, ptr, ptr, i32 }, align 8
  %300 = alloca { ptr, ptr, ptr, i32 }, align 8
  %301 = alloca [0 x ptr], align 8
  %302 = alloca {}, align 8
  %303 = alloca i32, align 4
  %304 = alloca i160, align 8
  %305 = alloca ptr, align 8
  %306 = alloca i64, align 8
  %307 = alloca [1 x ptr], align 8
  %308 = alloca { ptr }, align 8
  %309 = alloca [0 x ptr], align 8
  %310 = alloca {}, align 8
  %311 = alloca { ptr, ptr, ptr, i32 }, align 8
  %312 = alloca { ptr, ptr, ptr, i32 }, align 8
  %313 = alloca { ptr, ptr, ptr, i32 }, align 8
  %314 = alloca i32, align 4
  %315 = alloca ptr, align 8
  %316 = alloca ptr, align 8
  %317 = alloca ptr, align 8
  %318 = alloca [0 x ptr], align 8
  %319 = alloca {}, align 8
  %320 = alloca { ptr, i160 }, align 8
  %321 = alloca i1, align 1
  %322 = alloca { ptr, ptr, ptr, i32 }, align 8
  %323 = alloca [0 x ptr], align 8
  %324 = alloca {}, align 8
  %325 = alloca i32, align 4
  %326 = alloca i160, align 8
  %327 = alloca ptr, align 8
  %328 = alloca i64, align 8
  %329 = alloca [1 x ptr], align 8
  %330 = alloca { ptr }, align 8
  %331 = alloca { ptr, ptr, ptr, i32 }, align 8
  %332 = alloca ptr, align 8
  %333 = alloca ptr, align 8
  %334 = alloca ptr, align 8
  %335 = alloca { ptr, i160 }, align 8
  %336 = alloca i32, align 4
  %337 = alloca i160, align 8
  %338 = alloca ptr, align 8
  %339 = alloca i64, align 8
  %340 = alloca [1 x ptr], align 8
  %341 = alloca { ptr }, align 8
  %342 = alloca { ptr, i160 }, align 8
  %343 = alloca i32, align 4
  %344 = alloca i32, align 4
  %345 = alloca [1 x ptr], align 8
  %346 = alloca i32, align 4
  %347 = alloca ptr, align 8
  %348 = alloca ptr, align 8
  %349 = alloca ptr, align 8
  %350 = alloca i32, align 4
  %351 = alloca i32, align 4
  %352 = alloca [2 x ptr], align 8
  %353 = alloca { ptr, ptr }, align 8
  %354 = alloca [0 x ptr], align 8
  %355 = alloca {}, align 8
  %356 = alloca { ptr, ptr, ptr, i32 }, align 8
  %357 = alloca { ptr, ptr, ptr, i32 }, align 8
  %358 = alloca { ptr, ptr, ptr, i32 }, align 8
  %359 = alloca i32, align 4
  %360 = alloca ptr, align 8
  %361 = alloca ptr, align 8
  %362 = alloca ptr, align 8
  %363 = alloca [0 x ptr], align 8
  %364 = alloca {}, align 8
  %365 = alloca { ptr, i32 }, align 8
  %366 = alloca i1, align 1
  %367 = alloca i32, align 4
  %368 = alloca i32, align 4
  %369 = alloca i1, align 1
  %370 = alloca i160, align 8
  %371 = alloca ptr, align 8
  %372 = alloca i64, align 8
  %373 = alloca [1 x ptr], align 8
  %374 = alloca { ptr }, align 8
  %375 = alloca i32, align 4
  %376 = alloca ptr, align 8
  %377 = alloca ptr, align 8
  %378 = alloca i32, align 4
  %379 = alloca i32, align 4
  %380 = alloca i32, align 4
  %381 = alloca i32, align 4
  %382 = alloca i32, align 4
  %383 = alloca i32, align 4
  %384 = alloca i32, align 4
  %385 = alloca i32, align 4
  %386 = alloca i32, align 4
  %387 = alloca i32, align 4
  %388 = alloca [1 x ptr], align 8
  %389 = alloca i32, align 4
  %390 = alloca ptr, align 8
  %391 = alloca ptr, align 8
  %392 = alloca ptr, align 8
  %393 = alloca i32, align 4
  %394 = alloca i32, align 4
  %395 = alloca [3 x ptr], align 8
  %396 = alloca { ptr, ptr, ptr }, align 8
  %397 = alloca { ptr, ptr, ptr, i32 }, align 8
  %398 = alloca i32, align 4
  %399 = alloca ptr, align 8
  %400 = alloca ptr, align 8
  %401 = alloca ptr, align 8
  %402 = alloca i32, align 4
  %403 = alloca ptr, align 8
  %404 = alloca ptr, align 8
  %405 = alloca i32, align 4
  %406 = alloca i32, align 4
  %407 = alloca i32, align 4
  %408 = alloca i32, align 4
  %409 = alloca i32, align 4
  %410 = alloca i32, align 4
  %411 = alloca i32, align 4
  %412 = alloca i32, align 4
  %413 = alloca i32, align 4
  %414 = alloca i32, align 4
  %415 = alloca i32, align 4
  %416 = alloca i32, align 4
  %417 = alloca i32, align 4
  %418 = alloca i32, align 4
  %419 = alloca [1 x ptr], align 8
  %420 = alloca i32, align 4
  %421 = alloca ptr, align 8
  %422 = alloca ptr, align 8
  %423 = alloca ptr, align 8
  %424 = alloca i32, align 4
  %425 = alloca i32, align 4
  %426 = alloca [3 x ptr], align 8
  %427 = alloca { ptr, ptr, ptr }, align 8
  %428 = alloca { ptr, ptr, ptr, i32 }, align 8
  %429 = alloca [1 x ptr], align 8
  %430 = alloca { ptr }, align 8
  %431 = alloca { ptr, ptr, ptr, i32 }, align 8
  %432 = alloca { ptr, ptr, ptr, i32 }, align 8
  %433 = alloca i32, align 4
  %434 = alloca [1 x ptr], align 8
  %435 = alloca { ptr }, align 8
  %436 = alloca i32, align 4
  %437 = alloca i160, align 8
  %438 = alloca ptr, align 8
  %439 = alloca i64, align 8
  %440 = alloca [1 x ptr], align 8
  %441 = alloca { ptr }, align 8
  %442 = alloca i32, align 4
  %443 = alloca ptr, align 8
  %444 = alloca ptr, align 8
  %445 = alloca i32, align 4
  %446 = alloca i32, align 4
  %447 = alloca [1 x ptr], align 8
  %448 = alloca i32, align 4
  %449 = alloca ptr, align 8
  %450 = alloca ptr, align 8
  %451 = alloca ptr, align 8
  %452 = alloca i32, align 4
  %453 = alloca i32, align 4
  %454 = alloca [3 x ptr], align 8
  %455 = alloca { ptr, ptr, ptr }, align 8
  %456 = alloca { ptr, ptr, ptr, i32 }, align 8
  %457 = alloca i32, align 4
  %458 = alloca ptr, align 8
  %459 = alloca ptr, align 8
  %460 = alloca ptr, align 8
  %461 = alloca i32, align 4
  %462 = alloca ptr, align 8
  %463 = alloca ptr, align 8
  %464 = alloca i32, align 4
  %465 = alloca i32, align 4
  %466 = alloca i32, align 4
  %467 = alloca i32, align 4
  %468 = alloca i32, align 4
  %469 = alloca i32, align 4
  %470 = alloca i32, align 4
  %471 = alloca i32, align 4
  %472 = alloca i32, align 4
  %473 = alloca i32, align 4
  %474 = alloca [1 x ptr], align 8
  %475 = alloca i32, align 4
  %476 = alloca ptr, align 8
  %477 = alloca ptr, align 8
  %478 = alloca ptr, align 8
  %479 = alloca i32, align 4
  %480 = alloca i32, align 4
  %481 = alloca [3 x ptr], align 8
  %482 = alloca { ptr, ptr, ptr }, align 8
  %483 = alloca { ptr, ptr, ptr, i32 }, align 8
  %484 = alloca [1 x ptr], align 8
  %485 = alloca { ptr }, align 8
  %486 = alloca { ptr, ptr, ptr, i32 }, align 8
  %487 = alloca { ptr, ptr, ptr, i32 }, align 8
  %488 = alloca i32, align 4
  %489 = alloca [1 x ptr], align 8
  %490 = alloca { ptr }, align 8
  %491 = alloca i32, align 4
  %492 = alloca i160, align 8
  %493 = alloca ptr, align 8
  %494 = alloca i64, align 8
  %495 = alloca [1 x ptr], align 8
  %496 = alloca { ptr }, align 8
  %497 = alloca i1, align 1
  %498 = alloca i1, align 1
  %499 = alloca i32, align 4
  %500 = alloca [1 x ptr], align 8
  %501 = alloca { ptr }, align 8
  %502 = alloca i32, align 4
  %503 = alloca i32, align 4
  %504 = alloca i1, align 1
  %505 = alloca i1, align 1
  %506 = alloca i32, align 4
  %507 = alloca ptr, align 8
  %508 = alloca ptr, align 8
  %509 = alloca i32, align 4
  %510 = alloca i32, align 4
  %511 = alloca i32, align 4
  %512 = alloca [1 x ptr], align 8
  %513 = alloca { ptr, ptr, ptr, i32 }, align 8
  %514 = alloca i32, align 4
  %515 = alloca i32, align 4
  %516 = alloca [3 x ptr], align 8
  %517 = alloca { ptr, ptr, ptr }, align 8
  %518 = alloca [1 x ptr], align 8
  %519 = alloca { ptr }, align 8
  %520 = alloca i64, align 8
  %521 = alloca i160, align 8
  %522 = alloca ptr, align 8
  %523 = alloca i64, align 8
  %524 = alloca [1 x ptr], align 8
  %525 = alloca { ptr }, align 8
  %526 = alloca i32, align 4
  %527 = alloca double, align 8
  %528 = alloca i160, align 8
  %529 = alloca ptr, align 8
  %530 = alloca i64, align 8
  %531 = alloca [1 x ptr], align 8
  %532 = alloca { ptr }, align 8
  %533 = alloca i32, align 4
  %534 = alloca i32, align 4
  %535 = alloca [1 x ptr], align 8
  %536 = alloca i32, align 4
  %537 = alloca ptr, align 8
  %538 = alloca ptr, align 8
  %539 = alloca ptr, align 8
  %540 = alloca i32, align 4
  %541 = alloca i32, align 4
  %542 = alloca [2 x ptr], align 8
  %543 = alloca { ptr, ptr }, align 8
  %544 = alloca [0 x ptr], align 8
  %545 = alloca {}, align 8
  %546 = alloca { ptr, ptr, ptr, i32 }, align 8
  %547 = alloca { ptr, ptr, ptr, i32 }, align 8
  %548 = alloca { ptr, ptr, ptr, i32 }, align 8
  %549 = alloca i32, align 4
  %550 = alloca ptr, align 8
  %551 = alloca ptr, align 8
  %552 = alloca ptr, align 8
  %553 = alloca [0 x ptr], align 8
  %554 = alloca {}, align 8
  %555 = alloca { ptr, i32 }, align 8
  %556 = alloca i1, align 1
  %557 = alloca i32, align 4
  %558 = alloca i160, align 8
  %559 = alloca ptr, align 8
  %560 = alloca i64, align 8
  %561 = alloca [1 x ptr], align 8
  %562 = alloca { ptr }, align 8
  %563 = alloca i32, align 4
  %564 = alloca ptr, align 8
  %565 = alloca ptr, align 8
  %566 = alloca i32, align 4
  %567 = alloca i32, align 4
  %568 = alloca i32, align 4
  %569 = alloca i32, align 4
  %570 = alloca i32, align 4
  %571 = alloca i32, align 4
  %572 = alloca i32, align 4
  %573 = alloca i32, align 4
  %574 = alloca [1 x ptr], align 8
  %575 = alloca i32, align 4
  %576 = alloca ptr, align 8
  %577 = alloca ptr, align 8
  %578 = alloca ptr, align 8
  %579 = alloca i32, align 4
  %580 = alloca i32, align 4
  %581 = alloca [3 x ptr], align 8
  %582 = alloca { ptr, ptr, ptr }, align 8
  %583 = alloca [0 x ptr], align 8
  %584 = alloca {}, align 8
  %585 = alloca { ptr, ptr, ptr, i32 }, align 8
  %586 = alloca { ptr, ptr, ptr, i32 }, align 8
  %587 = alloca { ptr, ptr, ptr, i32 }, align 8
  %588 = alloca i32, align 4
  %589 = alloca ptr, align 8
  %590 = alloca ptr, align 8
  %591 = alloca ptr, align 8
  %592 = alloca [0 x ptr], align 8
  %593 = alloca {}, align 8
  %594 = alloca { ptr, i32 }, align 8
  %595 = alloca i1, align 1
  %596 = alloca i32, align 4
  %597 = alloca i160, align 8
  %598 = alloca ptr, align 8
  %599 = alloca i64, align 8
  %600 = alloca [1 x ptr], align 8
  %601 = alloca { ptr }, align 8
  %602 = alloca i8, align 1
  %603 = alloca i160, align 8
  %604 = alloca ptr, align 8
  %605 = alloca i64, align 8
  %606 = alloca [1 x ptr], align 8
  %607 = alloca { ptr }, align 8
  %608 = alloca i32, align 4
  %609 = alloca ptr, align 8
  %610 = alloca ptr, align 8
  %611 = alloca i32, align 4
  %612 = alloca i32, align 4
  %613 = alloca i32, align 4
  %614 = alloca [1 x ptr], align 8
  %615 = alloca i32, align 4
  %616 = alloca ptr, align 8
  %617 = alloca ptr, align 8
  %618 = alloca ptr, align 8
  %619 = alloca i32, align 4
  %620 = alloca i32, align 4
  %621 = alloca [3 x ptr], align 8
  %622 = alloca { ptr, ptr, ptr }, align 8
  %623 = alloca [0 x ptr], align 8
  %624 = alloca {}, align 8
  %625 = alloca { ptr, ptr, ptr, i32 }, align 8
  %626 = alloca { ptr, ptr, ptr, i32 }, align 8
  %627 = alloca { ptr, ptr, ptr, i32 }, align 8
  %628 = alloca i32, align 4
  %629 = alloca ptr, align 8
  %630 = alloca ptr, align 8
  %631 = alloca ptr, align 8
  %632 = alloca [0 x ptr], align 8
  %633 = alloca {}, align 8
  %634 = alloca { ptr, i160 }, align 8
  %635 = alloca i1, align 1
  %636 = alloca { ptr, ptr, ptr, i32 }, align 8
  %637 = alloca [1 x ptr], align 8
  %638 = alloca { ptr }, align 8
  %639 = alloca { ptr, ptr, ptr, i32 }, align 8
  %640 = alloca i32, align 4
  %641 = alloca ptr, align 8
  %642 = alloca ptr, align 8
  %643 = alloca i32, align 4
  %644 = alloca i32, align 4
  %645 = alloca i32, align 4
  %646 = alloca i32, align 4
  %647 = alloca i32, align 4
  %648 = alloca i32, align 4
  %649 = alloca i32, align 4
  %650 = alloca i32, align 4
  %651 = alloca [1 x ptr], align 8
  %652 = alloca i32, align 4
  %653 = alloca ptr, align 8
  %654 = alloca ptr, align 8
  %655 = alloca ptr, align 8
  %656 = alloca i32, align 4
  %657 = alloca i32, align 4
  %658 = alloca [3 x ptr], align 8
  %659 = alloca { ptr, ptr, ptr }, align 8
  %660 = alloca [0 x ptr], align 8
  %661 = alloca {}, align 8
  %662 = alloca { ptr, ptr, ptr, i32 }, align 8
  %663 = alloca { ptr, ptr, ptr, i32 }, align 8
  %664 = alloca [1 x ptr], align 8
  %665 = alloca { ptr }, align 8
  %666 = alloca i32, align 4
  %667 = alloca [1 x ptr], align 8
  %668 = alloca i32, align 4
  %669 = alloca ptr, align 8
  %670 = alloca ptr, align 8
  %671 = alloca ptr, align 8
  %672 = alloca i32, align 4
  %673 = alloca [1 x ptr], align 8
  %674 = alloca { ptr }, align 8
  %675 = alloca { ptr, ptr, ptr, i32 }, align 8
  %676 = alloca { ptr, ptr, ptr, i32 }, align 8
  %677 = alloca [0 x ptr], align 8
  %678 = alloca {}, align 8
  %679 = alloca [1 x ptr], align 8
  %680 = alloca { ptr }, align 8
  %681 = alloca [0 x ptr], align 8
  %682 = alloca {}, align 8
  %683 = alloca i32, align 4
  %684 = alloca i32, align 4
  %685 = alloca i32, align 4
  %686 = alloca [1 x ptr], align 8
  %687 = alloca i32, align 4
  %688 = alloca ptr, align 8
  %689 = alloca ptr, align 8
  %690 = alloca ptr, align 8
  %691 = alloca i32, align 4
  %692 = alloca i32, align 4
  %693 = alloca [2 x ptr], align 8
  %694 = alloca { ptr, ptr }, align 8
  %695 = alloca [1 x ptr], align 8
  %696 = alloca { ptr }, align 8
  %697 = alloca { ptr, ptr, ptr, i32 }, align 8
  %698 = alloca { ptr, ptr, ptr, i32 }, align 8
  %699 = alloca [0 x ptr], align 8
  %700 = alloca {}, align 8
  %701 = alloca { ptr, ptr, ptr, i32 }, align 8
  %702 = alloca { ptr, ptr, ptr, i32 }, align 8
  %703 = alloca { ptr, ptr, ptr, i32 }, align 8
  %704 = alloca i32, align 4
  %705 = alloca ptr, align 8
  %706 = alloca ptr, align 8
  %707 = alloca ptr, align 8
  %708 = alloca [0 x ptr], align 8
  %709 = alloca {}, align 8
  %710 = alloca { ptr, i32 }, align 8
  %711 = alloca i1, align 1
  %712 = alloca i32, align 4
  %713 = alloca i160, align 8
  %714 = alloca ptr, align 8
  %715 = alloca i64, align 8
  %716 = alloca [1 x ptr], align 8
  %717 = alloca { ptr }, align 8
  %718 = alloca ptr, align 8
  %719 = alloca ptr, align 8
  %720 = alloca ptr, align 8
  %721 = alloca i32, align 4
  %722 = alloca i32, align 4
  %723 = alloca ptr, align 8
  %724 = alloca ptr, align 8
  %725 = alloca i32, align 4
  %726 = alloca i32, align 4
  %727 = alloca i32, align 4
  %728 = alloca i32, align 4
  %729 = alloca i32, align 4
  %730 = alloca i32, align 4
  %731 = alloca i32, align 4
  %732 = alloca i32, align 4
  %733 = alloca i32, align 4
  %734 = alloca i32, align 4
  %735 = alloca [1 x ptr], align 8
  %736 = alloca i32, align 4
  %737 = alloca ptr, align 8
  %738 = alloca ptr, align 8
  %739 = alloca ptr, align 8
  %740 = alloca i32, align 4
  %741 = alloca i32, align 4
  %742 = alloca [3 x ptr], align 8
  %743 = alloca { ptr, ptr, ptr }, align 8
  %744 = alloca [1 x ptr], align 8
  %745 = alloca { ptr }, align 8
  %746 = alloca { ptr, ptr, ptr, i32 }, align 8
  %747 = alloca { ptr, ptr, ptr, i32 }, align 8
  %748 = alloca [2 x ptr], align 8
  %749 = alloca { ptr, ptr }, align 8
  %750 = alloca i32, align 4
  %751 = alloca i160, align 8
  %752 = alloca ptr, align 8
  %753 = alloca i64, align 8
  %754 = alloca [1 x ptr], align 8
  %755 = alloca { ptr }, align 8
  %756 = alloca ptr, align 8
  %757 = alloca i32, align 4
  %758 = alloca ptr, align 8
  %759 = alloca ptr, align 8
  %760 = alloca i32, align 4
  %761 = alloca i32, align 4
  %762 = alloca i32, align 4
  %763 = alloca i32, align 4
  %764 = alloca i32, align 4
  %765 = alloca i32, align 4
  %766 = alloca i32, align 4
  %767 = alloca i32, align 4
  %768 = alloca i32, align 4
  %769 = alloca i32, align 4
  %770 = alloca [1 x ptr], align 8
  %771 = alloca i32, align 4
  %772 = alloca ptr, align 8
  %773 = alloca ptr, align 8
  %774 = alloca ptr, align 8
  %775 = alloca i32, align 4
  %776 = alloca i32, align 4
  %777 = alloca [3 x ptr], align 8
  %778 = alloca { ptr, ptr, ptr }, align 8
  %779 = alloca [1 x ptr], align 8
  %780 = alloca { ptr }, align 8
  %781 = alloca i32, align 4
  %782 = alloca ptr, align 8
  %783 = alloca ptr, align 8
  %784 = alloca i32, align 4
  %785 = alloca i32, align 4
  %786 = alloca i32, align 4
  %787 = alloca [1 x ptr], align 8
  %788 = alloca i32, align 4
  %789 = alloca ptr, align 8
  %790 = alloca ptr, align 8
  %791 = alloca ptr, align 8
  %792 = alloca i32, align 4
  %793 = alloca i32, align 4
  %794 = alloca [3 x ptr], align 8
  %795 = alloca { ptr, ptr, ptr }, align 8
  %796 = alloca i32, align 4
  %797 = alloca ptr, align 8
  %798 = alloca ptr, align 8
  %799 = alloca i32, align 4
  %800 = alloca i32, align 4
  %801 = alloca i32, align 4
  %802 = alloca [1 x ptr], align 8
  %803 = alloca i32, align 4
  %804 = alloca ptr, align 8
  %805 = alloca ptr, align 8
  %806 = alloca ptr, align 8
  %807 = alloca i32, align 4
  %808 = alloca i32, align 4
  %809 = alloca [3 x ptr], align 8
  %810 = alloca { ptr, ptr, ptr }, align 8
  %811 = alloca i32, align 4
  %812 = alloca ptr, align 8
  %813 = alloca ptr, align 8
  %814 = alloca i32, align 4
  %815 = alloca i32, align 4
  %816 = alloca i32, align 4
  %817 = alloca [1 x ptr], align 8
  %818 = alloca i32, align 4
  %819 = alloca ptr, align 8
  %820 = alloca ptr, align 8
  %821 = alloca ptr, align 8
  %822 = alloca i32, align 4
  %823 = alloca i32, align 4
  %824 = alloca [3 x ptr], align 8
  %825 = alloca { ptr, ptr, ptr }, align 8
  %826 = alloca { ptr, ptr, ptr, i32 }, align 8
  %827 = alloca [1 x ptr], align 8
  %828 = alloca { ptr }, align 8
  %829 = alloca ptr, align 8
  %830 = alloca i32, align 4
  %831 = alloca i32, align 4
  %832 = alloca [1 x ptr], align 8
  %833 = alloca i32, align 4
  %834 = alloca ptr, align 8
  %835 = alloca ptr, align 8
  %836 = alloca ptr, align 8
  %837 = alloca i32, align 4
  %838 = alloca i32, align 4
  %839 = alloca [2 x ptr], align 8
  %840 = alloca { ptr, ptr }, align 8
  %841 = alloca [1 x ptr], align 8
  %842 = alloca { ptr }, align 8
  %843 = alloca ptr, align 8
  %844 = alloca i32, align 4
  %845 = alloca i8, align 1
  %846 = alloca i160, align 8
  %847 = alloca ptr, align 8
  %848 = alloca i64, align 8
  %849 = alloca [1 x ptr], align 8
  %850 = alloca { ptr }, align 8
  %851 = alloca ptr, align 8
  %852 = alloca i32, align 4
  %853 = alloca i32, align 4
  %854 = alloca ptr, align 8
  %855 = alloca ptr, align 8
  %856 = alloca i32, align 4
  %857 = alloca i32, align 4
  %858 = alloca ptr, align 8
  %859 = alloca i64, align 8
  %860 = alloca { ptr, i32 }, align 8
  %861 = alloca { ptr, i32 }, align 8
  %862 = alloca [1 x ptr], align 8
  %863 = alloca { ptr }, align 8
  %864 = alloca i32, align 4
  %865 = alloca i32, align 4
  %866 = alloca ptr, align 8
  %867 = alloca i64, align 8
  %868 = alloca { ptr, i32 }, align 8
  %869 = alloca { ptr, i32 }, align 8
  %870 = alloca [1 x ptr], align 8
  %871 = alloca { ptr }, align 8
  %872 = alloca ptr, align 8
  %873 = alloca ptr, align 8
  %874 = alloca { ptr, i160 }, align 8
  %875 = alloca { ptr, i32 }, align 8
  %876 = alloca { ptr, i32 }, align 8
  %877 = alloca [1 x ptr], align 8
  %878 = alloca { ptr }, align 8
  %879 = alloca [1 x ptr], align 8
  %880 = alloca i32, align 4
  %881 = alloca ptr, align 8
  %882 = alloca ptr, align 8
  %883 = alloca ptr, align 8
  %884 = alloca [0 x ptr], align 8
  %885 = alloca {}, align 8
  %886 = alloca { ptr, ptr, ptr, i32 }, align 8
  %887 = alloca i32, align 4
  %888 = alloca ptr, align 8
  %889 = alloca ptr, align 8
  %890 = alloca ptr, align 8
  %891 = alloca ptr, align 8
  %892 = alloca ptr, align 8
  %893 = alloca ptr, align 8
  %894 = alloca { ptr, i160 }, align 8
  %895 = alloca [0 x ptr], align 8
  %896 = alloca {}, align 8
  %897 = alloca i32, align 4
  %898 = alloca i160, align 8
  %899 = alloca ptr, align 8
  %900 = alloca i64, align 8
  %901 = alloca [1 x ptr], align 8
  %902 = alloca { ptr }, align 8
  %903 = alloca i32, align 4
  %904 = alloca ptr, align 8
  %905 = alloca ptr, align 8
  %906 = alloca i32, align 4
  %907 = alloca i32, align 4
  %908 = alloca [1 x ptr], align 8
  %909 = alloca i32, align 4
  %910 = alloca ptr, align 8
  %911 = alloca ptr, align 8
  %912 = alloca ptr, align 8
  %913 = alloca i32, align 4
  %914 = alloca i32, align 4
  %915 = alloca [2 x ptr], align 8
  %916 = alloca { ptr, ptr }, align 8
  %917 = alloca [1 x ptr], align 8
  %918 = alloca { ptr }, align 8
  %919 = alloca { ptr, ptr, ptr, i32 }, align 8
  %920 = alloca { ptr, ptr, ptr, i32 }, align 8
  %921 = alloca [1 x ptr], align 8
  %922 = alloca { ptr }, align 8
  %923 = alloca { ptr, ptr, ptr, i32 }, align 8
  %924 = alloca { ptr, ptr, ptr, i32 }, align 8
  %925 = alloca [2 x ptr], align 8
  %926 = alloca { ptr, ptr }, align 8
  %927 = alloca i32, align 4
  %928 = alloca i160, align 8
  %929 = alloca ptr, align 8
  %930 = alloca i64, align 8
  %931 = alloca [1 x ptr], align 8
  %932 = alloca { ptr }, align 8
  %933 = alloca i32, align 4
  %934 = alloca i160, align 8
  %935 = alloca ptr, align 8
  %936 = alloca i64, align 8
  %937 = alloca [1 x ptr], align 8
  %938 = alloca { ptr }, align 8
  %939 = alloca i32, align 4
  %940 = alloca i32, align 4
  %941 = alloca i32, align 4
  %942 = alloca i32, align 4
  %943 = alloca i32, align 4
  %944 = alloca i32, align 4
  %945 = alloca i160, align 8
  %946 = alloca ptr, align 8
  %947 = alloca i64, align 8
  %948 = alloca [1 x ptr], align 8
  %949 = alloca { ptr }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem22 = alloca i1, align 1
  %.reg2mem25 = alloca i1, align 1
  %.reg2mem28 = alloca i1, align 1
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i1, align 1
  %.reg2mem38 = alloca i1, align 1
  %.reg2mem41 = alloca i1, align 1
  %.reg2mem44 = alloca ptr, align 8
  %.reg2mem49 = alloca ptr, align 8
  %.reg2mem54 = alloca ptr, align 8
  %.reg2mem59 = alloca ptr, align 8
  %.reg2mem64 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void @setup_landing_pad()
  store i32 1, ptr %1, align 4
  store i32 2, ptr %2, align 4
  %950 = load i32, ptr %1, align 4
  %951 = load i32, ptr %2, align 4
  %952 = add i32 %950, %951
  store i32 %952, ptr %3, align 4
  %953 = load i32, ptr %3, align 4
  store i32 %953, ptr %4, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %6, align 4
  %954 = load i64, ptr %6, align 4
  store i64 %954, ptr %5, align 4
  %955 = load ptr, ptr %5, align 8
  %956 = insertvalue { ptr, i160 } undef, ptr %955, 0
  %957 = load i160, ptr %4, align 4
  %958 = insertvalue { ptr, i160 } %956, i160 %957, 1
  %959 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %959, align 8
  %960 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %961 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %962 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %963 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr %955, ptr %963, align 8
  %964 = call ptr @class_behavior_wrapper(ptr %962, ptr %8)
  call void %964(ptr %7, { ptr, i160 } %958) #15
  store i32 14, ptr %9, align 4
  %965 = load i32, ptr %9, align 4
  %966 = sext i32 %965 to i64
  %967 = mul i64 %966, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %968 = call ptr @bump_malloc(i64 %967)
  store ptr %968, ptr %10, align 8
  %969 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %970 = load ptr, ptr %969, align 8
  store ptr %970, ptr %11, align 8
  store i32 0, ptr %12, align 4
  %971 = load ptr, ptr %11, align 8
  %972 = load i32, ptr %12, align 4
  %973 = sext i32 %972 to i64
  %974 = mul i64 ptrtoint (ptr getelementptr ([13 x i8], ptr null, i32 1) to i64), %973
  %975 = getelementptr i8, ptr %971, i64 %974
  %976 = load <13 x i8>, ptr @uudzy_Hello_World, align 16
  store <13 x i8> %976, ptr %975, align 16
  store i32 13, ptr %13, align 4
  store i32 14, ptr %14, align 4
  store ptr @String, ptr %15, align 8
  %977 = load ptr, ptr %15, align 8
  %978 = getelementptr ptr, ptr %977, i32 6
  %979 = load ptr, ptr %978, align 8
  %980 = call { i64, i64 } @size_wrapper(ptr %979, ptr %15)
  %981 = extractvalue { i64, i64 } %980, 0
  %982 = call ptr @bump_malloc(i64 %981)
  %983 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %984 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr @String, ptr %16, align 8
  store ptr %982, ptr %983, align 8
  store i32 10, ptr %984, align 4
  store i32 13, ptr %17, align 4
  store i32 14, ptr %18, align 4
  %985 = load ptr, ptr %11, align 8
  %986 = insertvalue { ptr } undef, ptr %985, 0
  %987 = load i32, ptr %17, align 4
  %988 = load i32, ptr %18, align 4
  %989 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %990 = load ptr, ptr %989, align 8
  %991 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %990, 0
  %992 = load ptr, ptr %983, align 8
  %993 = insertvalue { ptr, ptr, ptr, i32 } %991, ptr %992, 1
  %994 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %995 = load ptr, ptr %994, align 8
  %996 = insertvalue { ptr, ptr, ptr, i32 } %993, ptr %995, 2
  %997 = load i32, ptr %984, align 4
  %998 = insertvalue { ptr, ptr, ptr, i32 } %996, i32 %997, 3
  %999 = getelementptr [3 x ptr], ptr %19, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %999, align 8
  %1000 = getelementptr [3 x ptr], ptr %19, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1000, align 8
  %1001 = getelementptr [3 x ptr], ptr %19, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1001, align 8
  %1002 = call ptr @llvm.invariant.start.p0(i64 9, ptr %19)
  %1003 = call ptr @llvm.invariant.start.p0(i64 280, ptr %990)
  %1004 = getelementptr ptr, ptr %990, i32 %997
  %1005 = getelementptr ptr, ptr %1004, i32 4
  %1006 = load ptr, ptr %1005, align 8
  %1007 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 0
  store ptr @buffer_typ, ptr %1007, align 8
  %1008 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 1
  store ptr @i32_typ, ptr %1008, align 8
  %1009 = getelementptr { ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  store ptr @i32_typ, ptr %1009, align 8
  %1010 = call ptr @behavior_wrapper(ptr %1006, { ptr, ptr, ptr, i32 } %998, ptr %20)
  call void %1010({ ptr, ptr, ptr, i32 } %998, { ptr, ptr, ptr, i32 } %998, ptr %19, { ptr } %986, i32 %987, i32 %988) #15
  %1011 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 0
  %1012 = load ptr, ptr %1011, align 8
  %1013 = insertvalue { ptr, i160 } undef, ptr %1012, 0
  %1014 = getelementptr { ptr, i160 }, ptr %16, i32 0, i32 1
  %1015 = load i160, ptr %1014, align 4
  %1016 = insertvalue { ptr, i160 } %1013, i160 %1015, 1
  %1017 = getelementptr [1 x ptr], ptr %21, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1017, align 8
  %1018 = call ptr @llvm.invariant.start.p0(i64 1, ptr %21)
  %1019 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1020 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1021 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  store ptr %1012, ptr %1021, align 8
  %1022 = call ptr @class_behavior_wrapper(ptr %1020, ptr %22)
  call void %1022(ptr %21, { ptr, i160 } %1016) #15
  store i1 true, ptr %23, align 1
  %1023 = load i1, ptr %23, align 1
  store i1 %1023, ptr %24, align 1
  br i1 %1023, label %1024, label %._crit_edge

._crit_edge:                                      ; preds = %0
  br label %1026

1024:                                             ; preds = %0
  store i1 false, ptr %25, align 1
  %1025 = load i1, ptr %25, align 1
  store i1 %1025, ptr %24, align 1
  br label %1026

1026:                                             ; preds = %._crit_edge, %1024
  %1027 = load i1, ptr %24, align 1
  store i1 %1027, ptr %26, align 1
  %1028 = load i1, ptr %26, align 1
  store i1 %1028, ptr %27, align 1
  store i64 ptrtoint (ptr @bool_typ to i64), ptr %29, align 4
  %1029 = load i64, ptr %29, align 4
  store i64 %1029, ptr %28, align 4
  %1030 = load ptr, ptr %28, align 8
  %1031 = insertvalue { ptr, i160 } undef, ptr %1030, 0
  %1032 = load i160, ptr %27, align 4
  %1033 = insertvalue { ptr, i160 } %1031, i160 %1032, 1
  %1034 = getelementptr [1 x ptr], ptr %30, i32 0, i32 0
  store ptr @_parameterization_Ptri1, ptr %1034, align 8
  %1035 = call ptr @llvm.invariant.start.p0(i64 1, ptr %30)
  %1036 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1037 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1038 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  store ptr %1030, ptr %1038, align 8
  %1039 = call ptr @class_behavior_wrapper(ptr %1037, ptr %31)
  call void %1039(ptr %30, { ptr, i160 } %1033) #15
  store ptr @Bard, ptr %32, align 8
  %1040 = load ptr, ptr %32, align 8
  %1041 = getelementptr ptr, ptr %1040, i32 6
  %1042 = load ptr, ptr %1041, align 8
  %1043 = call { i64, i64 } @size_wrapper(ptr %1042, ptr %32)
  %1044 = extractvalue { i64, i64 } %1043, 0
  %1045 = call ptr @bump_malloc(i64 %1044)
  store ptr @Bard, ptr %36, align 8
  store ptr %1045, ptr %35, align 8
  store i32 10, ptr %33, align 4
  %1046 = load ptr, ptr %36, align 8
  %1047 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1046, 0
  %1048 = load ptr, ptr %35, align 8
  %1049 = insertvalue { ptr, ptr, ptr, i32 } %1047, ptr %1048, 1
  %1050 = load ptr, ptr %34, align 8
  %1051 = insertvalue { ptr, ptr, ptr, i32 } %1049, ptr %1050, 2
  %1052 = load i32, ptr %33, align 4
  %1053 = insertvalue { ptr, ptr, ptr, i32 } %1051, i32 %1052, 3
  %1054 = call ptr @llvm.invariant.start.p0(i64 0, ptr %37)
  %1055 = call ptr @llvm.invariant.start.p0(i64 56, ptr %1046)
  %1056 = getelementptr ptr, ptr %1046, i32 %1052
  %1057 = load ptr, ptr %1056, align 8
  %1058 = call ptr @behavior_wrapper(ptr %1057, { ptr, ptr, ptr, i32 } %1053, ptr %38)
  call void %1058({ ptr, ptr, ptr, i32 } %1053, { ptr, ptr, ptr, i32 } %1053, ptr %37) #15
  %1059 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %1060 = load ptr, ptr %36, align 8
  store ptr %1060, ptr %1059, align 8
  %1061 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %1062 = load ptr, ptr %35, align 8
  store ptr %1062, ptr %1061, align 8
  %1063 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %1064 = load ptr, ptr %34, align 8
  store ptr %1064, ptr %1063, align 8
  %1065 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %1066 = load i32, ptr %33, align 4
  store i32 %1066, ptr %1065, align 4
  call void @set_offset(ptr %39, ptr @Bard)
  %1067 = load ptr, ptr %1059, align 8
  store ptr %1067, ptr %43, align 8
  %1068 = load ptr, ptr %1061, align 8
  store ptr %1068, ptr %42, align 8
  %1069 = load ptr, ptr %1063, align 8
  store ptr %1069, ptr %41, align 8
  %1070 = load i32, ptr %1065, align 4
  store i32 %1070, ptr %40, align 4
  store i32 5, ptr %44, align 4
  store i32 10, ptr %45, align 4
  %1071 = load i32, ptr %44, align 4
  store i32 %1071, ptr %46, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %48, align 4
  %1072 = load i64, ptr %48, align 4
  store i64 %1072, ptr %47, align 4
  %1073 = load ptr, ptr %47, align 8
  %1074 = insertvalue { ptr, i160 } undef, ptr %1073, 0
  %1075 = load i160, ptr %46, align 4
  %1076 = insertvalue { ptr, i160 } %1074, i160 %1075, 1
  %1077 = load i32, ptr %45, align 4
  store i32 %1077, ptr %49, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %51, align 4
  %1078 = load i64, ptr %51, align 4
  store i64 %1078, ptr %50, align 4
  %1079 = load ptr, ptr %50, align 8
  %1080 = insertvalue { ptr, i160 } undef, ptr %1079, 0
  %1081 = load i160, ptr %49, align 4
  %1082 = insertvalue { ptr, i160 } %1080, i160 %1081, 1
  %1083 = load ptr, ptr %43, align 8
  %1084 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1083, 0
  %1085 = load ptr, ptr %42, align 8
  %1086 = insertvalue { ptr, ptr, ptr, i32 } %1084, ptr %1085, 1
  %1087 = load ptr, ptr %41, align 8
  %1088 = insertvalue { ptr, ptr, ptr, i32 } %1086, ptr %1087, 2
  %1089 = load i32, ptr %40, align 4
  %1090 = insertvalue { ptr, ptr, ptr, i32 } %1088, i32 %1089, 3
  %1091 = getelementptr [2 x ptr], ptr %52, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1091, align 8
  %1092 = getelementptr [2 x ptr], ptr %52, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1092, align 8
  %1093 = call ptr @llvm.invariant.start.p0(i64 4, ptr %52)
  %1094 = call ptr @llvm.invariant.start.p0(i64 56, ptr %1083)
  %1095 = getelementptr ptr, ptr %1083, i32 %1089
  %1096 = getelementptr ptr, ptr %1095, i32 1
  %1097 = load ptr, ptr %1096, align 8
  %1098 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 0
  store ptr %1073, ptr %1098, align 8
  %1099 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 1
  store ptr %1079, ptr %1099, align 8
  %1100 = call ptr @behavior_wrapper(ptr %1097, { ptr, ptr, ptr, i32 } %1090, ptr %53)
  call void %1100({ ptr, ptr, ptr, i32 } %1090, { ptr, ptr, ptr, i32 } %1090, ptr %52, { ptr, i160 } %1076, { ptr, i160 } %1082) #15
  store double 7.000000e+00, ptr %54, align 8
  %1101 = load double, ptr %54, align 8
  store double %1101, ptr %55, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %57, align 4
  %1102 = load i64, ptr %57, align 4
  store i64 %1102, ptr %56, align 4
  store double 1.400000e+01, ptr %58, align 8
  %1103 = getelementptr { ptr, i64 }, ptr %59, i32 0, i32 0
  %1104 = load ptr, ptr %56, align 8
  store ptr %1104, ptr %1103, align 8
  %1105 = getelementptr { ptr, i64 }, ptr %59, i32 0, i32 1
  %1106 = load i64, ptr %55, align 4
  store i64 %1106, ptr %1105, align 4
  %1107 = getelementptr { ptr, i160 }, ptr %59, i32 0, i32 0
  %1108 = load ptr, ptr %1107, align 8
  %1109 = insertvalue { ptr, i160 } undef, ptr %1108, 0
  %1110 = getelementptr { ptr, i160 }, ptr %59, i32 0, i32 1
  %1111 = load i160, ptr %1110, align 4
  %1112 = insertvalue { ptr, i160 } %1109, i160 %1111, 1
  %1113 = load double, ptr %58, align 8
  store double %1113, ptr %60, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %62, align 4
  %1114 = load i64, ptr %62, align 4
  store i64 %1114, ptr %61, align 4
  %1115 = load ptr, ptr %61, align 8
  %1116 = insertvalue { ptr, i160 } undef, ptr %1115, 0
  %1117 = load i160, ptr %60, align 4
  %1118 = insertvalue { ptr, i160 } %1116, i160 %1117, 1
  %1119 = load ptr, ptr %43, align 8
  %1120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1119, 0
  %1121 = load ptr, ptr %42, align 8
  %1122 = insertvalue { ptr, ptr, ptr, i32 } %1120, ptr %1121, 1
  %1123 = load ptr, ptr %41, align 8
  %1124 = insertvalue { ptr, ptr, ptr, i32 } %1122, ptr %1123, 2
  %1125 = load i32, ptr %40, align 4
  %1126 = insertvalue { ptr, ptr, ptr, i32 } %1124, i32 %1125, 3
  %1127 = getelementptr [2 x ptr], ptr %63, i32 0, i32 0
  store ptr @_parameterization_Ptrf64_or_Ptri32, ptr %1127, align 8
  %1128 = getelementptr [2 x ptr], ptr %63, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %1128, align 8
  %1129 = call ptr @llvm.invariant.start.p0(i64 4, ptr %63)
  %1130 = call ptr @llvm.invariant.start.p0(i64 56, ptr %1119)
  %1131 = getelementptr ptr, ptr %1119, i32 %1125
  %1132 = getelementptr ptr, ptr %1131, i32 1
  %1133 = load ptr, ptr %1132, align 8
  %1134 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 0
  store ptr %1108, ptr %1134, align 8
  %1135 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 1
  store ptr %1115, ptr %1135, align 8
  %1136 = call ptr @behavior_wrapper(ptr %1133, { ptr, ptr, ptr, i32 } %1126, ptr %64)
  call void %1136({ ptr, ptr, ptr, i32 } %1126, { ptr, ptr, ptr, i32 } %1126, ptr %63, { ptr, i160 } %1112, { ptr, i160 } %1118) #15
  store i32 6, ptr %65, align 4
  %1137 = load i32, ptr %65, align 4
  %1138 = sext i32 %1137 to i64
  %1139 = mul i64 %1138, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1140 = call ptr @bump_malloc(i64 %1139)
  store ptr %1140, ptr %66, align 8
  %1141 = getelementptr { ptr }, ptr %66, i32 0, i32 0
  %1142 = load ptr, ptr %1141, align 8
  store ptr %1142, ptr %67, align 8
  store i32 0, ptr %68, align 4
  %1143 = load ptr, ptr %67, align 8
  %1144 = load i32, ptr %68, align 4
  %1145 = sext i32 %1144 to i64
  %1146 = mul i64 ptrtoint (ptr getelementptr ([5 x i8], ptr null, i32 1) to i64), %1145
  %1147 = getelementptr i8, ptr %1143, i64 %1146
  %1148 = load <5 x i8>, ptr @hwsxs_start, align 8
  store <5 x i8> %1148, ptr %1147, align 8
  store i32 5, ptr %69, align 4
  store i32 6, ptr %70, align 4
  store ptr @String, ptr %71, align 8
  %1149 = load ptr, ptr %71, align 8
  %1150 = getelementptr ptr, ptr %1149, i32 6
  %1151 = load ptr, ptr %1150, align 8
  %1152 = call { i64, i64 } @size_wrapper(ptr %1151, ptr %71)
  %1153 = extractvalue { i64, i64 } %1152, 0
  %1154 = call ptr @bump_malloc(i64 %1153)
  %1155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %1156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  store ptr @String, ptr %72, align 8
  store ptr %1154, ptr %1155, align 8
  store i32 10, ptr %1156, align 4
  store i32 5, ptr %73, align 4
  store i32 6, ptr %74, align 4
  %1157 = load ptr, ptr %67, align 8
  %1158 = insertvalue { ptr } undef, ptr %1157, 0
  %1159 = load i32, ptr %73, align 4
  %1160 = load i32, ptr %74, align 4
  %1161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %1162 = load ptr, ptr %1161, align 8
  %1163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1162, 0
  %1164 = load ptr, ptr %1155, align 8
  %1165 = insertvalue { ptr, ptr, ptr, i32 } %1163, ptr %1164, 1
  %1166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %1167 = load ptr, ptr %1166, align 8
  %1168 = insertvalue { ptr, ptr, ptr, i32 } %1165, ptr %1167, 2
  %1169 = load i32, ptr %1156, align 4
  %1170 = insertvalue { ptr, ptr, ptr, i32 } %1168, i32 %1169, 3
  %1171 = getelementptr [3 x ptr], ptr %75, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1171, align 8
  %1172 = getelementptr [3 x ptr], ptr %75, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1172, align 8
  %1173 = getelementptr [3 x ptr], ptr %75, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1173, align 8
  %1174 = call ptr @llvm.invariant.start.p0(i64 9, ptr %75)
  %1175 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1162)
  %1176 = getelementptr ptr, ptr %1162, i32 %1169
  %1177 = getelementptr ptr, ptr %1176, i32 4
  %1178 = load ptr, ptr %1177, align 8
  %1179 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 0
  store ptr @buffer_typ, ptr %1179, align 8
  %1180 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 1
  store ptr @i32_typ, ptr %1180, align 8
  %1181 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 2
  store ptr @i32_typ, ptr %1181, align 8
  %1182 = call ptr @behavior_wrapper(ptr %1178, { ptr, ptr, ptr, i32 } %1170, ptr %76)
  call void %1182({ ptr, ptr, ptr, i32 } %1170, { ptr, ptr, ptr, i32 } %1170, ptr %75, { ptr } %1158, i32 %1159, i32 %1160) #15
  %1183 = getelementptr { ptr, i160 }, ptr %72, i32 0, i32 0
  %1184 = load ptr, ptr %1183, align 8
  %1185 = insertvalue { ptr, i160 } undef, ptr %1184, 0
  %1186 = getelementptr { ptr, i160 }, ptr %72, i32 0, i32 1
  %1187 = load i160, ptr %1186, align 4
  %1188 = insertvalue { ptr, i160 } %1185, i160 %1187, 1
  %1189 = getelementptr [1 x ptr], ptr %77, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1189, align 8
  %1190 = call ptr @llvm.invariant.start.p0(i64 1, ptr %77)
  %1191 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1192 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1193 = getelementptr { ptr }, ptr %78, i32 0, i32 0
  store ptr %1184, ptr %1193, align 8
  %1194 = call ptr @class_behavior_wrapper(ptr %1192, ptr %78)
  call void %1194(ptr %77, { ptr, i160 } %1188) #15
  store i32 55, ptr %79, align 4
  store double 8.000000e+00, ptr %80, align 8
  store i32 13, ptr %81, align 4
  store ptr @Animal, ptr %82, align 8
  %1195 = load ptr, ptr %82, align 8
  %1196 = getelementptr ptr, ptr %1195, i32 6
  %1197 = load ptr, ptr %1196, align 8
  %1198 = call { i64, i64 } @size_wrapper(ptr %1197, ptr %82)
  %1199 = extractvalue { i64, i64 } %1198, 0
  %1200 = call ptr @bump_malloc(i64 %1199)
  store ptr @Animal, ptr %86, align 8
  store ptr %1200, ptr %85, align 8
  store i32 10, ptr %83, align 4
  store i32 55, ptr %87, align 4
  store double 8.000000e+00, ptr %88, align 8
  store i32 13, ptr %89, align 4
  %1201 = load i32, ptr %87, align 4
  %1202 = load double, ptr %88, align 8
  %1203 = load i32, ptr %89, align 4
  %1204 = load ptr, ptr %86, align 8
  %1205 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1204, 0
  %1206 = load ptr, ptr %85, align 8
  %1207 = insertvalue { ptr, ptr, ptr, i32 } %1205, ptr %1206, 1
  %1208 = load ptr, ptr %84, align 8
  %1209 = insertvalue { ptr, ptr, ptr, i32 } %1207, ptr %1208, 2
  %1210 = load i32, ptr %83, align 4
  %1211 = insertvalue { ptr, ptr, ptr, i32 } %1209, i32 %1210, 3
  %1212 = getelementptr [3 x ptr], ptr %90, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1212, align 8
  %1213 = getelementptr [3 x ptr], ptr %90, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %1213, align 8
  %1214 = getelementptr [3 x ptr], ptr %90, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1214, align 8
  %1215 = call ptr @llvm.invariant.start.p0(i64 9, ptr %90)
  %1216 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1204)
  %1217 = getelementptr ptr, ptr %1204, i32 %1210
  %1218 = getelementptr ptr, ptr %1217, i32 3
  %1219 = load ptr, ptr %1218, align 8
  %1220 = getelementptr { ptr, ptr, ptr }, ptr %91, i32 0, i32 0
  store ptr @i32_typ, ptr %1220, align 8
  %1221 = getelementptr { ptr, ptr, ptr }, ptr %91, i32 0, i32 1
  store ptr @f64_typ, ptr %1221, align 8
  %1222 = getelementptr { ptr, ptr, ptr }, ptr %91, i32 0, i32 2
  store ptr @i32_typ, ptr %1222, align 8
  %1223 = call ptr @behavior_wrapper(ptr %1219, { ptr, ptr, ptr, i32 } %1211, ptr %91)
  call void %1223({ ptr, ptr, ptr, i32 } %1211, { ptr, ptr, ptr, i32 } %1211, ptr %90, i32 %1201, double %1202, i32 %1203) #15
  %1224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 0
  %1225 = load ptr, ptr %86, align 8
  store ptr %1225, ptr %1224, align 8
  %1226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 1
  %1227 = load ptr, ptr %85, align 8
  store ptr %1227, ptr %1226, align 8
  %1228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 2
  %1229 = load ptr, ptr %84, align 8
  store ptr %1229, ptr %1228, align 8
  %1230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %92, i32 0, i32 3
  %1231 = load i32, ptr %83, align 4
  store i32 %1231, ptr %1230, align 4
  call void @set_offset(ptr %92, ptr @Animal)
  %1232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 0
  store ptr %1232, ptr %.reg2mem59, align 8
  %1233 = load ptr, ptr %1224, align 8
  %.reload63 = load ptr, ptr %.reg2mem59, align 8
  store ptr %1233, ptr %.reload63, align 8
  %1234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 1
  store ptr %1234, ptr %.reg2mem54, align 8
  %1235 = load ptr, ptr %1226, align 8
  %.reload58 = load ptr, ptr %.reg2mem54, align 8
  store ptr %1235, ptr %.reload58, align 8
  %1236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 2
  store ptr %1236, ptr %.reg2mem49, align 8
  %1237 = load ptr, ptr %1228, align 8
  %.reload53 = load ptr, ptr %.reg2mem49, align 8
  store ptr %1237, ptr %.reload53, align 8
  %1238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 3
  store ptr %1238, ptr %.reg2mem44, align 8
  %1239 = load i32, ptr %1230, align 4
  %.reload48 = load ptr, ptr %.reg2mem44, align 8
  store i32 %1239, ptr %.reload48, align 4
  store i32 14, ptr %94, align 4
  %1240 = load i32, ptr %94, align 4
  %1241 = sext i32 %1240 to i64
  %1242 = mul i64 %1241, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1243 = call ptr @bump_malloc(i64 %1242)
  store ptr %1243, ptr %95, align 8
  %1244 = getelementptr { ptr }, ptr %95, i32 0, i32 0
  %1245 = load ptr, ptr %1244, align 8
  store ptr %1245, ptr %96, align 8
  store i32 0, ptr %97, align 4
  %1246 = load ptr, ptr %96, align 8
  %1247 = load i32, ptr %97, align 4
  %1248 = sext i32 %1247 to i64
  %1249 = mul i64 ptrtoint (ptr getelementptr ([13 x i8], ptr null, i32 1) to i64), %1248
  %1250 = getelementptr i8, ptr %1246, i64 %1249
  %1251 = load <13 x i8>, ptr @xmbrp_did_get_here, align 16
  store <13 x i8> %1251, ptr %1250, align 16
  store i32 13, ptr %98, align 4
  store i32 14, ptr %99, align 4
  store ptr @String, ptr %100, align 8
  %1252 = load ptr, ptr %100, align 8
  %1253 = getelementptr ptr, ptr %1252, i32 6
  %1254 = load ptr, ptr %1253, align 8
  %1255 = call { i64, i64 } @size_wrapper(ptr %1254, ptr %100)
  %1256 = extractvalue { i64, i64 } %1255, 0
  %1257 = call ptr @bump_malloc(i64 %1256)
  %1258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 1
  %1259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 3
  store ptr @String, ptr %101, align 8
  store ptr %1257, ptr %1258, align 8
  store i32 10, ptr %1259, align 4
  store i32 13, ptr %102, align 4
  store i32 14, ptr %103, align 4
  %1260 = load ptr, ptr %96, align 8
  %1261 = insertvalue { ptr } undef, ptr %1260, 0
  %1262 = load i32, ptr %102, align 4
  %1263 = load i32, ptr %103, align 4
  %1264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 0
  %1265 = load ptr, ptr %1264, align 8
  %1266 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1265, 0
  %1267 = load ptr, ptr %1258, align 8
  %1268 = insertvalue { ptr, ptr, ptr, i32 } %1266, ptr %1267, 1
  %1269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 2
  %1270 = load ptr, ptr %1269, align 8
  %1271 = insertvalue { ptr, ptr, ptr, i32 } %1268, ptr %1270, 2
  %1272 = load i32, ptr %1259, align 4
  %1273 = insertvalue { ptr, ptr, ptr, i32 } %1271, i32 %1272, 3
  %1274 = getelementptr [3 x ptr], ptr %104, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1274, align 8
  %1275 = getelementptr [3 x ptr], ptr %104, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1275, align 8
  %1276 = getelementptr [3 x ptr], ptr %104, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1276, align 8
  %1277 = call ptr @llvm.invariant.start.p0(i64 9, ptr %104)
  %1278 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1265)
  %1279 = getelementptr ptr, ptr %1265, i32 %1272
  %1280 = getelementptr ptr, ptr %1279, i32 4
  %1281 = load ptr, ptr %1280, align 8
  %1282 = getelementptr { ptr, ptr, ptr }, ptr %105, i32 0, i32 0
  store ptr @buffer_typ, ptr %1282, align 8
  %1283 = getelementptr { ptr, ptr, ptr }, ptr %105, i32 0, i32 1
  store ptr @i32_typ, ptr %1283, align 8
  %1284 = getelementptr { ptr, ptr, ptr }, ptr %105, i32 0, i32 2
  store ptr @i32_typ, ptr %1284, align 8
  %1285 = call ptr @behavior_wrapper(ptr %1281, { ptr, ptr, ptr, i32 } %1273, ptr %105)
  call void %1285({ ptr, ptr, ptr, i32 } %1273, { ptr, ptr, ptr, i32 } %1273, ptr %104, { ptr } %1261, i32 %1262, i32 %1263) #15
  %1286 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 0
  %1287 = load ptr, ptr %1286, align 8
  %1288 = insertvalue { ptr, i160 } undef, ptr %1287, 0
  %1289 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 1
  %1290 = load i160, ptr %1289, align 4
  %1291 = insertvalue { ptr, i160 } %1288, i160 %1290, 1
  %1292 = getelementptr [1 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1292, align 8
  %1293 = call ptr @llvm.invariant.start.p0(i64 1, ptr %106)
  %1294 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1295 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1296 = getelementptr { ptr }, ptr %107, i32 0, i32 0
  store ptr %1287, ptr %1296, align 8
  %1297 = call ptr @class_behavior_wrapper(ptr %1295, ptr %107)
  call void %1297(ptr %106, { ptr, i160 } %1291) #15
  store i32 10, ptr %108, align 4
  store double 1.000000e+01, ptr %109, align 8
  store ptr @Beaver, ptr %110, align 8
  %1298 = load ptr, ptr %110, align 8
  %1299 = getelementptr ptr, ptr %1298, i32 6
  %1300 = load ptr, ptr %1299, align 8
  %1301 = call { i64, i64 } @size_wrapper(ptr %1300, ptr %110)
  %1302 = extractvalue { i64, i64 } %1301, 0
  %1303 = call ptr @bump_malloc(i64 %1302)
  store ptr @Beaver, ptr %114, align 8
  store ptr %1303, ptr %113, align 8
  store i32 10, ptr %111, align 4
  store i32 10, ptr %115, align 4
  store double 1.000000e+01, ptr %116, align 8
  %1304 = load i32, ptr %115, align 4
  %1305 = load double, ptr %116, align 8
  %1306 = load ptr, ptr %114, align 8
  %1307 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1306, 0
  %1308 = load ptr, ptr %113, align 8
  %1309 = insertvalue { ptr, ptr, ptr, i32 } %1307, ptr %1308, 1
  %1310 = load ptr, ptr %112, align 8
  %1311 = insertvalue { ptr, ptr, ptr, i32 } %1309, ptr %1310, 2
  %1312 = load i32, ptr %111, align 4
  %1313 = insertvalue { ptr, ptr, ptr, i32 } %1311, i32 %1312, 3
  %1314 = getelementptr [2 x ptr], ptr %117, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1314, align 8
  %1315 = getelementptr [2 x ptr], ptr %117, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %1315, align 8
  %1316 = call ptr @llvm.invariant.start.p0(i64 4, ptr %117)
  %1317 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1306)
  %1318 = getelementptr ptr, ptr %1306, i32 %1312
  %1319 = getelementptr ptr, ptr %1318, i32 2
  %1320 = load ptr, ptr %1319, align 8
  %1321 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 0
  store ptr @i32_typ, ptr %1321, align 8
  %1322 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 1
  store ptr @f64_typ, ptr %1322, align 8
  %1323 = call ptr @behavior_wrapper(ptr %1320, { ptr, ptr, ptr, i32 } %1313, ptr %118)
  call void %1323({ ptr, ptr, ptr, i32 } %1313, { ptr, ptr, ptr, i32 } %1313, ptr %117, i32 %1304, double %1305) #15
  %1324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %1325 = load ptr, ptr %114, align 8
  store ptr %1325, ptr %1324, align 8
  %1326 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %1327 = load ptr, ptr %113, align 8
  store ptr %1327, ptr %1326, align 8
  %1328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %1329 = load ptr, ptr %112, align 8
  store ptr %1329, ptr %1328, align 8
  %1330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %1331 = load i32, ptr %111, align 4
  store i32 %1331, ptr %1330, align 4
  call void @set_offset(ptr %119, ptr @Beaver)
  %1332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %1333 = load ptr, ptr %1324, align 8
  store ptr %1333, ptr %1332, align 8
  %1334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %1335 = load ptr, ptr %1326, align 8
  store ptr %1335, ptr %1334, align 8
  %1336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %1337 = load ptr, ptr %1328, align 8
  store ptr %1337, ptr %1336, align 8
  %1338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %1339 = load i32, ptr %1330, align 4
  store i32 %1339, ptr %1338, align 4
  %1340 = getelementptr { ptr, i160 }, ptr %93, i32 0, i32 0
  %1341 = load ptr, ptr %1340, align 8
  %1342 = insertvalue { ptr, i160 } undef, ptr %1341, 0
  %1343 = getelementptr { ptr, i160 }, ptr %93, i32 0, i32 1
  %1344 = load i160, ptr %1343, align 4
  %1345 = insertvalue { ptr, i160 } %1342, i160 %1344, 1
  %1346 = getelementptr { ptr, i160 }, ptr %120, i32 0, i32 0
  %1347 = load ptr, ptr %1346, align 8
  %1348 = insertvalue { ptr, i160 } undef, ptr %1347, 0
  %1349 = getelementptr { ptr, i160 }, ptr %120, i32 0, i32 1
  %1350 = load i160, ptr %1349, align 4
  %1351 = insertvalue { ptr, i160 } %1348, i160 %1350, 1
  %1352 = load ptr, ptr %43, align 8
  %1353 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1352, 0
  %1354 = load ptr, ptr %42, align 8
  %1355 = insertvalue { ptr, ptr, ptr, i32 } %1353, ptr %1354, 1
  %1356 = load ptr, ptr %41, align 8
  %1357 = insertvalue { ptr, ptr, ptr, i32 } %1355, ptr %1356, 2
  %1358 = load i32, ptr %40, align 4
  %1359 = insertvalue { ptr, ptr, ptr, i32 } %1357, i32 %1358, 3
  %1360 = getelementptr [2 x ptr], ptr %121, i32 0, i32 0
  store ptr @_parameterization_Animal, ptr %1360, align 8
  %1361 = getelementptr [2 x ptr], ptr %121, i32 0, i32 1
  store ptr @_parameterization_Beaver, ptr %1361, align 8
  %1362 = call ptr @llvm.invariant.start.p0(i64 4, ptr %121)
  %1363 = call ptr @llvm.invariant.start.p0(i64 56, ptr %1352)
  %1364 = getelementptr ptr, ptr %1352, i32 %1358
  %1365 = getelementptr ptr, ptr %1364, i32 1
  %1366 = load ptr, ptr %1365, align 8
  %1367 = getelementptr { ptr, ptr }, ptr %122, i32 0, i32 0
  store ptr %1341, ptr %1367, align 8
  %1368 = getelementptr { ptr, ptr }, ptr %122, i32 0, i32 1
  store ptr %1347, ptr %1368, align 8
  %1369 = call ptr @behavior_wrapper(ptr %1366, { ptr, ptr, ptr, i32 } %1359, ptr %122)
  call void %1369({ ptr, ptr, ptr, i32 } %1359, { ptr, ptr, ptr, i32 } %1359, ptr %121, { ptr, i160 } %1345, { ptr, i160 } %1351) #15
  store i32 7, ptr %123, align 4
  %1370 = load i32, ptr %123, align 4
  store i32 %1370, ptr %124, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %126, align 4
  %1371 = load i64, ptr %126, align 4
  store i64 %1371, ptr %125, align 4
  %1372 = load ptr, ptr %125, align 8
  %1373 = insertvalue { ptr, i160 } undef, ptr %1372, 0
  %1374 = load i160, ptr %124, align 4
  %1375 = insertvalue { ptr, i160 } %1373, i160 %1374, 1
  %1376 = getelementptr { ptr, i64 }, ptr %127, i32 0, i32 0
  %1377 = load ptr, ptr %56, align 8
  store ptr %1377, ptr %1376, align 8
  %1378 = getelementptr { ptr, i64 }, ptr %127, i32 0, i32 1
  %1379 = load i64, ptr %55, align 4
  store i64 %1379, ptr %1378, align 4
  %1380 = getelementptr { ptr, i160 }, ptr %127, i32 0, i32 0
  %1381 = load ptr, ptr %1380, align 8
  %1382 = insertvalue { ptr, i160 } undef, ptr %1381, 0
  %1383 = getelementptr { ptr, i160 }, ptr %127, i32 0, i32 1
  %1384 = load i160, ptr %1383, align 4
  %1385 = insertvalue { ptr, i160 } %1382, i160 %1384, 1
  %1386 = load ptr, ptr %43, align 8
  %1387 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1386, 0
  %1388 = load ptr, ptr %42, align 8
  %1389 = insertvalue { ptr, ptr, ptr, i32 } %1387, ptr %1388, 1
  %1390 = load ptr, ptr %41, align 8
  %1391 = insertvalue { ptr, ptr, ptr, i32 } %1389, ptr %1390, 2
  %1392 = load i32, ptr %40, align 4
  %1393 = insertvalue { ptr, ptr, ptr, i32 } %1391, i32 %1392, 3
  %1394 = getelementptr [2 x ptr], ptr %128, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1394, align 8
  %1395 = getelementptr [2 x ptr], ptr %128, i32 0, i32 1
  store ptr @_parameterization_Ptrf64_or_Ptri32, ptr %1395, align 8
  %1396 = call ptr @llvm.invariant.start.p0(i64 4, ptr %128)
  %1397 = call ptr @llvm.invariant.start.p0(i64 56, ptr %1386)
  %1398 = getelementptr ptr, ptr %1386, i32 %1392
  %1399 = getelementptr ptr, ptr %1398, i32 1
  %1400 = load ptr, ptr %1399, align 8
  %1401 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 0
  store ptr %1372, ptr %1401, align 8
  %1402 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 1
  store ptr %1381, ptr %1402, align 8
  %1403 = call ptr @behavior_wrapper(ptr %1400, { ptr, ptr, ptr, i32 } %1393, ptr %129)
  call void %1403({ ptr, ptr, ptr, i32 } %1393, { ptr, ptr, ptr, i32 } %1393, ptr %128, { ptr, i160 } %1375, { ptr, i160 } %1385) #15
  store i32 17, ptr %130, align 4
  %1404 = load i32, ptr %130, align 4
  %1405 = sext i32 %1404 to i64
  %1406 = mul i64 %1405, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %1407 = call ptr @bump_malloc(i64 %1406)
  store ptr %1407, ptr %131, align 8
  %1408 = getelementptr { ptr }, ptr %131, i32 0, i32 0
  %1409 = load ptr, ptr %1408, align 8
  store ptr %1409, ptr %132, align 8
  store i32 0, ptr %133, align 4
  %1410 = load ptr, ptr %132, align 8
  %1411 = load i32, ptr %133, align 4
  %1412 = sext i32 %1411 to i64
  %1413 = mul i64 ptrtoint (ptr getelementptr ([16 x i8], ptr null, i32 1) to i64), %1412
  %1414 = getelementptr i8, ptr %1410, i64 %1413
  %1415 = load <16 x i8>, ptr @tlobn_barrys_color_is, align 16
  store <16 x i8> %1415, ptr %1414, align 16
  store i32 16, ptr %134, align 4
  store i32 17, ptr %135, align 4
  store ptr @String, ptr %136, align 8
  %1416 = load ptr, ptr %136, align 8
  %1417 = getelementptr ptr, ptr %1416, i32 6
  %1418 = load ptr, ptr %1417, align 8
  %1419 = call { i64, i64 } @size_wrapper(ptr %1418, ptr %136)
  %1420 = extractvalue { i64, i64 } %1419, 0
  %1421 = call ptr @bump_malloc(i64 %1420)
  %1422 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %1423 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  store ptr @String, ptr %137, align 8
  store ptr %1421, ptr %1422, align 8
  store i32 10, ptr %1423, align 4
  store i32 16, ptr %138, align 4
  store i32 17, ptr %139, align 4
  %1424 = load ptr, ptr %132, align 8
  %1425 = insertvalue { ptr } undef, ptr %1424, 0
  %1426 = load i32, ptr %138, align 4
  %1427 = load i32, ptr %139, align 4
  %1428 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 0
  %1429 = load ptr, ptr %1428, align 8
  %1430 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1429, 0
  %1431 = load ptr, ptr %1422, align 8
  %1432 = insertvalue { ptr, ptr, ptr, i32 } %1430, ptr %1431, 1
  %1433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 2
  %1434 = load ptr, ptr %1433, align 8
  %1435 = insertvalue { ptr, ptr, ptr, i32 } %1432, ptr %1434, 2
  %1436 = load i32, ptr %1423, align 4
  %1437 = insertvalue { ptr, ptr, ptr, i32 } %1435, i32 %1436, 3
  %1438 = getelementptr [3 x ptr], ptr %140, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1438, align 8
  %1439 = getelementptr [3 x ptr], ptr %140, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1439, align 8
  %1440 = getelementptr [3 x ptr], ptr %140, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1440, align 8
  %1441 = call ptr @llvm.invariant.start.p0(i64 9, ptr %140)
  %1442 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1429)
  %1443 = getelementptr ptr, ptr %1429, i32 %1436
  %1444 = getelementptr ptr, ptr %1443, i32 4
  %1445 = load ptr, ptr %1444, align 8
  %1446 = getelementptr { ptr, ptr, ptr }, ptr %141, i32 0, i32 0
  store ptr @buffer_typ, ptr %1446, align 8
  %1447 = getelementptr { ptr, ptr, ptr }, ptr %141, i32 0, i32 1
  store ptr @i32_typ, ptr %1447, align 8
  %1448 = getelementptr { ptr, ptr, ptr }, ptr %141, i32 0, i32 2
  store ptr @i32_typ, ptr %1448, align 8
  %1449 = call ptr @behavior_wrapper(ptr %1445, { ptr, ptr, ptr, i32 } %1437, ptr %141)
  call void %1449({ ptr, ptr, ptr, i32 } %1437, { ptr, ptr, ptr, i32 } %1437, ptr %140, { ptr } %1425, i32 %1426, i32 %1427) #15
  %1450 = getelementptr { ptr, i160 }, ptr %137, i32 0, i32 0
  %1451 = load ptr, ptr %1450, align 8
  %1452 = insertvalue { ptr, i160 } undef, ptr %1451, 0
  %1453 = getelementptr { ptr, i160 }, ptr %137, i32 0, i32 1
  %1454 = load i160, ptr %1453, align 4
  %1455 = insertvalue { ptr, i160 } %1452, i160 %1454, 1
  %1456 = getelementptr [1 x ptr], ptr %142, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1456, align 8
  %1457 = call ptr @llvm.invariant.start.p0(i64 1, ptr %142)
  %1458 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1459 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1460 = getelementptr { ptr }, ptr %143, i32 0, i32 0
  store ptr %1451, ptr %1460, align 8
  %1461 = call ptr @class_behavior_wrapper(ptr %1459, ptr %143)
  call void %1461(ptr %142, { ptr, i160 } %1455) #15
  %1462 = load ptr, ptr %1332, align 8
  %1463 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1462, 0
  %1464 = load ptr, ptr %1334, align 8
  %1465 = insertvalue { ptr, ptr, ptr, i32 } %1463, ptr %1464, 1
  %1466 = load ptr, ptr %1336, align 8
  %1467 = insertvalue { ptr, ptr, ptr, i32 } %1465, ptr %1466, 2
  %1468 = load i32, ptr %1338, align 4
  %1469 = insertvalue { ptr, ptr, ptr, i32 } %1467, i32 %1468, 3
  %1470 = call ptr @llvm.invariant.start.p0(i64 0, ptr %144)
  %1471 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1462)
  %1472 = getelementptr ptr, ptr %1462, i32 %1468
  %1473 = getelementptr ptr, ptr %1472, i32 4
  %1474 = load ptr, ptr %1473, align 8
  %1475 = call ptr @behavior_wrapper(ptr %1474, { ptr, ptr, ptr, i32 } %1469, ptr %145)
  call void %1475({ ptr, ptr, ptr, i32 } %1469, { ptr, ptr, ptr, i32 } %1469, ptr %144) #15
  store i32 5, ptr %146, align 4
  %1476 = load i32, ptr %146, align 4
  %1477 = load ptr, ptr %1332, align 8
  %1478 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1477, 0
  %1479 = load ptr, ptr %1334, align 8
  %1480 = insertvalue { ptr, ptr, ptr, i32 } %1478, ptr %1479, 1
  %1481 = load ptr, ptr %1336, align 8
  %1482 = insertvalue { ptr, ptr, ptr, i32 } %1480, ptr %1481, 2
  %1483 = load i32, ptr %1338, align 4
  %1484 = insertvalue { ptr, ptr, ptr, i32 } %1482, i32 %1483, 3
  %1485 = getelementptr [1 x ptr], ptr %147, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1485, align 8
  %1486 = call ptr @llvm.invariant.start.p0(i64 1, ptr %147)
  %1487 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1477)
  %1488 = getelementptr ptr, ptr %1477, i32 %1483
  %1489 = getelementptr ptr, ptr %1488, i32 3
  %1490 = load ptr, ptr %1489, align 8
  %1491 = getelementptr { ptr }, ptr %148, i32 0, i32 0
  store ptr @i32_typ, ptr %1491, align 8
  %1492 = call ptr @behavior_wrapper(ptr %1490, { ptr, ptr, ptr, i32 } %1484, ptr %148)
  call void %1492({ ptr, ptr, ptr, i32 } %1484, { ptr, ptr, ptr, i32 } %1484, ptr %147, i32 %1476) #15
  %1493 = load ptr, ptr %1332, align 8
  %1494 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1493, 0
  %1495 = load ptr, ptr %1334, align 8
  %1496 = insertvalue { ptr, ptr, ptr, i32 } %1494, ptr %1495, 1
  %1497 = load ptr, ptr %1336, align 8
  %1498 = insertvalue { ptr, ptr, ptr, i32 } %1496, ptr %1497, 2
  %1499 = load i32, ptr %1338, align 4
  %1500 = insertvalue { ptr, ptr, ptr, i32 } %1498, i32 %1499, 3
  %1501 = call ptr @llvm.invariant.start.p0(i64 0, ptr %149)
  %1502 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1493)
  %1503 = getelementptr ptr, ptr %1493, i32 %1499
  %1504 = getelementptr ptr, ptr %1503, i32 4
  %1505 = load ptr, ptr %1504, align 8
  %1506 = call ptr @behavior_wrapper(ptr %1505, { ptr, ptr, ptr, i32 } %1500, ptr %150)
  call void %1506({ ptr, ptr, ptr, i32 } %1500, { ptr, ptr, ptr, i32 } %1500, ptr %149) #15
  store i32 89, ptr %151, align 4
  store ptr @Integer, ptr %152, align 8
  %1507 = load ptr, ptr %152, align 8
  %1508 = getelementptr ptr, ptr %1507, i32 6
  %1509 = load ptr, ptr %1508, align 8
  %1510 = call { i64, i64 } @size_wrapper(ptr %1509, ptr %152)
  %1511 = extractvalue { i64, i64 } %1510, 0
  %1512 = call ptr @bump_malloc(i64 %1511)
  store ptr @Integer, ptr %156, align 8
  store ptr %1512, ptr %155, align 8
  store i32 10, ptr %153, align 4
  store i32 89, ptr %157, align 4
  %1513 = load i32, ptr %157, align 4
  %1514 = load ptr, ptr %156, align 8
  %1515 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1514, 0
  %1516 = load ptr, ptr %155, align 8
  %1517 = insertvalue { ptr, ptr, ptr, i32 } %1515, ptr %1516, 1
  %1518 = load ptr, ptr %154, align 8
  %1519 = insertvalue { ptr, ptr, ptr, i32 } %1517, ptr %1518, 2
  %1520 = load i32, ptr %153, align 4
  %1521 = insertvalue { ptr, ptr, ptr, i32 } %1519, i32 %1520, 3
  %1522 = getelementptr [1 x ptr], ptr %158, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1522, align 8
  %1523 = call ptr @llvm.invariant.start.p0(i64 1, ptr %158)
  %1524 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1514)
  %1525 = getelementptr ptr, ptr %1514, i32 %1520
  %1526 = getelementptr ptr, ptr %1525, i32 1
  %1527 = load ptr, ptr %1526, align 8
  %1528 = getelementptr { ptr }, ptr %159, i32 0, i32 0
  store ptr @i32_typ, ptr %1528, align 8
  %1529 = call ptr @behavior_wrapper(ptr %1527, { ptr, ptr, ptr, i32 } %1521, ptr %159)
  call void %1529({ ptr, ptr, ptr, i32 } %1521, { ptr, ptr, ptr, i32 } %1521, ptr %158, i32 %1513) #15
  %1530 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 0
  %1531 = load ptr, ptr %156, align 8
  store ptr %1531, ptr %1530, align 8
  %1532 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 1
  %1533 = load ptr, ptr %155, align 8
  store ptr %1533, ptr %1532, align 8
  %1534 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 2
  %1535 = load ptr, ptr %154, align 8
  store ptr %1535, ptr %1534, align 8
  %1536 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 3
  %1537 = load i32, ptr %153, align 4
  store i32 %1537, ptr %1536, align 4
  call void @set_offset(ptr %160, ptr @Integer)
  %1538 = load ptr, ptr %1530, align 8
  store ptr %1538, ptr %164, align 8
  %1539 = load ptr, ptr %1532, align 8
  store ptr %1539, ptr %163, align 8
  %1540 = load ptr, ptr %1534, align 8
  store ptr %1540, ptr %162, align 8
  %1541 = load i32, ptr %1536, align 4
  store i32 %1541, ptr %161, align 4
  store i32 7, ptr %165, align 4
  %1542 = load i32, ptr %165, align 4
  %1543 = load ptr, ptr %164, align 8
  %1544 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1543, 0
  %1545 = load ptr, ptr %163, align 8
  %1546 = insertvalue { ptr, ptr, ptr, i32 } %1544, ptr %1545, 1
  %1547 = load ptr, ptr %162, align 8
  %1548 = insertvalue { ptr, ptr, ptr, i32 } %1546, ptr %1547, 2
  %1549 = load i32, ptr %161, align 4
  %1550 = insertvalue { ptr, ptr, ptr, i32 } %1548, i32 %1549, 3
  %1551 = getelementptr [1 x ptr], ptr %166, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1551, align 8
  %1552 = call ptr @llvm.invariant.start.p0(i64 1, ptr %166)
  %1553 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1543)
  %1554 = getelementptr ptr, ptr %1543, i32 %1549
  %1555 = getelementptr ptr, ptr %1554, i32 3
  %1556 = load ptr, ptr %1555, align 8
  %1557 = getelementptr { ptr }, ptr %167, i32 0, i32 0
  store ptr @i32_typ, ptr %1557, align 8
  %1558 = call ptr @behavior_wrapper(ptr %1556, { ptr, ptr, ptr, i32 } %1550, ptr %167)
  %1559 = call { ptr, ptr, ptr, i32 } %1558({ ptr, ptr, ptr, i32 } %1550, { ptr, ptr, ptr, i32 } %1550, ptr %166, i32 %1542) #15
  store { ptr, ptr, ptr, i32 } %1559, ptr %168, align 8
  %1560 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 0
  %1561 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 0
  %1562 = load ptr, ptr %1560, align 8
  store ptr %1562, ptr %1561, align 8
  %1563 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 1
  %1564 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 1
  %1565 = load ptr, ptr %1563, align 8
  store ptr %1565, ptr %1564, align 8
  %1566 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 2
  %1567 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 2
  %1568 = load ptr, ptr %1566, align 8
  store ptr %1568, ptr %1567, align 8
  %1569 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 3
  %1570 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 3
  %1571 = load i32, ptr %1569, align 4
  store i32 %1571, ptr %1570, align 4
  call void @set_offset(ptr %169, ptr @Integer)
  %1572 = load ptr, ptr %1561, align 8
  %1573 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1572, 0
  %1574 = load ptr, ptr %1564, align 8
  %1575 = insertvalue { ptr, ptr, ptr, i32 } %1573, ptr %1574, 1
  %1576 = load ptr, ptr %1567, align 8
  %1577 = insertvalue { ptr, ptr, ptr, i32 } %1575, ptr %1576, 2
  %1578 = load i32, ptr %1570, align 4
  %1579 = insertvalue { ptr, ptr, ptr, i32 } %1577, i32 %1578, 3
  %1580 = call ptr @llvm.invariant.start.p0(i64 0, ptr %170)
  %1581 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1572)
  %1582 = getelementptr ptr, ptr %1572, i32 %1578
  %1583 = getelementptr ptr, ptr %1582, i32 6
  %1584 = load ptr, ptr %1583, align 8
  %1585 = call ptr @behavior_wrapper(ptr %1584, { ptr, ptr, ptr, i32 } %1579, ptr %171)
  call void %1585({ ptr, ptr, ptr, i32 } %1579, { ptr, ptr, ptr, i32 } %1579, ptr %170) #15
  store double 9.000000e+00, ptr %172, align 8
  %1586 = load double, ptr %172, align 8
  %1587 = getelementptr [1 x ptr], ptr %173, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %1587, align 8
  %1588 = call ptr @llvm.invariant.start.p0(i64 1, ptr %173)
  %1589 = call ptr @llvm.invariant.start.p0(i64 136, ptr @Math)
  %1590 = load ptr, ptr getelementptr (ptr, ptr @Math, i32 10), align 8
  %1591 = getelementptr { ptr }, ptr %174, i32 0, i32 0
  store ptr @f64_typ, ptr %1591, align 8
  %1592 = call ptr @class_behavior_wrapper(ptr %1590, ptr %174)
  %1593 = call double %1592(ptr %173, double %1586) #15
  store double %1593, ptr %175, align 8
  store i32 -9, ptr %176, align 4
  %1594 = load i32, ptr %176, align 4
  store i32 %1594, ptr %177, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %179, align 4
  %1595 = load i64, ptr %179, align 4
  store i64 %1595, ptr %178, align 4
  %1596 = load ptr, ptr %178, align 8
  %1597 = insertvalue { ptr, i64 } undef, ptr %1596, 0
  %1598 = load i64, ptr %177, align 4
  %1599 = insertvalue { ptr, i64 } %1597, i64 %1598, 1
  %1600 = getelementptr [1 x ptr], ptr %180, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1600, align 8
  %1601 = call ptr @llvm.invariant.start.p0(i64 1, ptr %180)
  %1602 = call ptr @llvm.invariant.start.p0(i64 136, ptr @Math)
  %1603 = load ptr, ptr getelementptr (ptr, ptr getelementptr (ptr, ptr @Math, i32 10), i32 1), align 8
  %1604 = getelementptr { ptr }, ptr %181, i32 0, i32 0
  store ptr %1596, ptr %1604, align 8
  %1605 = call ptr @class_behavior_wrapper(ptr %1603, ptr %181)
  %1606 = call { ptr, i64 } %1605(ptr %180, { ptr, i64 } %1599) #15
  store { ptr, i64 } %1606, ptr %182, align 8
  %1607 = getelementptr { ptr, i64 }, ptr %182, i32 0, i32 1
  %1608 = load i32, ptr %1607, align 4
  store i32 %1608, ptr %183, align 4
  %1609 = load i32, ptr %183, align 4
  store i32 %1609, ptr %184, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %186, align 4
  %1610 = load i64, ptr %186, align 4
  store i64 %1610, ptr %185, align 4
  %1611 = load ptr, ptr %185, align 8
  %1612 = insertvalue { ptr, i160 } undef, ptr %1611, 0
  %1613 = load i160, ptr %184, align 4
  %1614 = insertvalue { ptr, i160 } %1612, i160 %1613, 1
  %1615 = getelementptr [1 x ptr], ptr %187, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1615, align 8
  %1616 = call ptr @llvm.invariant.start.p0(i64 1, ptr %187)
  %1617 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1618 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1619 = getelementptr { ptr }, ptr %188, i32 0, i32 0
  store ptr %1611, ptr %1619, align 8
  %1620 = call ptr @class_behavior_wrapper(ptr %1618, ptr %188)
  call void %1620(ptr %187, { ptr, i160 } %1614) #15
  %1621 = load double, ptr %175, align 8
  store double %1621, ptr %189, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %191, align 4
  %1622 = load i64, ptr %191, align 4
  store i64 %1622, ptr %190, align 4
  %1623 = load ptr, ptr %190, align 8
  %1624 = insertvalue { ptr, i160 } undef, ptr %1623, 0
  %1625 = load i160, ptr %189, align 4
  %1626 = insertvalue { ptr, i160 } %1624, i160 %1625, 1
  %1627 = getelementptr [1 x ptr], ptr %192, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %1627, align 8
  %1628 = call ptr @llvm.invariant.start.p0(i64 1, ptr %192)
  %1629 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1630 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1631 = getelementptr { ptr }, ptr %193, i32 0, i32 0
  store ptr %1623, ptr %1631, align 8
  %1632 = call ptr @class_behavior_wrapper(ptr %1630, ptr %193)
  call void %1632(ptr %192, { ptr, i160 } %1626) #15
  %.reload62 = load ptr, ptr %.reg2mem59, align 8
  %1633 = load ptr, ptr %.reload62, align 8
  %1634 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1633, 0
  %.reload57 = load ptr, ptr %.reg2mem54, align 8
  %1635 = load ptr, ptr %.reload57, align 8
  %1636 = insertvalue { ptr, ptr, ptr, i32 } %1634, ptr %1635, 1
  %.reload52 = load ptr, ptr %.reg2mem49, align 8
  %1637 = load ptr, ptr %.reload52, align 8
  %1638 = insertvalue { ptr, ptr, ptr, i32 } %1636, ptr %1637, 2
  %.reload47 = load ptr, ptr %.reg2mem44, align 8
  %1639 = load i32, ptr %.reload47, align 4
  %1640 = insertvalue { ptr, ptr, ptr, i32 } %1638, i32 %1639, 3
  call void @make_em_speak({ ptr, ptr, ptr, i32 } %1640)
  %.reload61 = load ptr, ptr %.reg2mem59, align 8
  %1641 = load ptr, ptr %.reload61, align 8
  %1642 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1641, 0
  %.reload56 = load ptr, ptr %.reg2mem54, align 8
  %1643 = load ptr, ptr %.reload56, align 8
  %1644 = insertvalue { ptr, ptr, ptr, i32 } %1642, ptr %1643, 1
  %.reload51 = load ptr, ptr %.reg2mem49, align 8
  %1645 = load ptr, ptr %.reload51, align 8
  %1646 = insertvalue { ptr, ptr, ptr, i32 } %1644, ptr %1645, 2
  %.reload46 = load ptr, ptr %.reg2mem44, align 8
  %1647 = load i32, ptr %.reload46, align 4
  %1648 = insertvalue { ptr, ptr, ptr, i32 } %1646, i32 %1647, 3
  %1649 = call ptr @llvm.invariant.start.p0(i64 0, ptr %194)
  %1650 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1641)
  %1651 = getelementptr ptr, ptr %1641, i32 %1647
  %1652 = getelementptr ptr, ptr %1651, i32 7
  %1653 = load ptr, ptr %1652, align 8
  %1654 = call ptr @behavior_wrapper(ptr %1653, { ptr, ptr, ptr, i32 } %1648, ptr %195)
  %1655 = call { ptr, i160 } %1654({ ptr, ptr, ptr, i32 } %1648, { ptr, ptr, ptr, i32 } %1648, ptr %194) #15
  store { ptr, i160 } %1655, ptr %196, align 8
  store i32 5, ptr %197, align 4
  %1656 = load i32, ptr %197, align 4
  store i32 %1656, ptr %198, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %200, align 4
  %1657 = load i64, ptr %200, align 4
  store i64 %1657, ptr %199, align 4
  br label %1658

1658:                                             ; preds = %._crit_edge3, %1026
  %1659 = load ptr, ptr %199, align 8
  %1660 = ptrtoint ptr %1659 to i64
  %1661 = icmp eq i64 %1660, ptrtoint (ptr @i32_typ to i64)
  store i1 %1661, ptr %201, align 1
  %1662 = load i1, ptr %201, align 1
  store i1 %1662, ptr %.reg2mem41, align 1
  %.reload43 = load i1, ptr %.reg2mem41, align 1
  br i1 %.reload43, label %1663, label %._crit_edge1

._crit_edge1:                                     ; preds = %1658
  br label %1740

1663:                                             ; preds = %1658
  %1664 = load i32, ptr %198, align 4
  store i32 %1664, ptr %202, align 4
  %1665 = load i32, ptr %202, align 4
  store i32 %1665, ptr %203, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %205, align 4
  %1666 = load i64, ptr %205, align 4
  store i64 %1666, ptr %204, align 4
  %1667 = load ptr, ptr %204, align 8
  %1668 = insertvalue { ptr, i160 } undef, ptr %1667, 0
  %1669 = load i160, ptr %203, align 4
  %1670 = insertvalue { ptr, i160 } %1668, i160 %1669, 1
  %1671 = getelementptr [1 x ptr], ptr %206, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1671, align 8
  %1672 = call ptr @llvm.invariant.start.p0(i64 1, ptr %206)
  %1673 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1674 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1675 = getelementptr { ptr }, ptr %207, i32 0, i32 0
  store ptr %1667, ptr %1675, align 8
  %1676 = call ptr @class_behavior_wrapper(ptr %1674, ptr %207)
  call void %1676(ptr %206, { ptr, i160 } %1670) #15
  store i32 1, ptr %208, align 4
  %1677 = load i32, ptr %202, align 4
  %1678 = load i32, ptr %208, align 4
  %1679 = add i32 %1677, %1678
  store i32 %1679, ptr %209, align 4
  %1680 = load i32, ptr %209, align 4
  store i32 %1680, ptr %202, align 4
  store i32 9, ptr %210, align 4
  %1681 = load i32, ptr %202, align 4
  %1682 = load i32, ptr %210, align 4
  %1683 = icmp eq i32 %1681, %1682
  store i1 %1683, ptr %211, align 1
  %1684 = load i1, ptr %211, align 1
  %1685 = load i32, ptr %202, align 4
  store i32 %1685, ptr %212, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %214, align 4
  %1686 = load i64, ptr %214, align 4
  store i64 %1686, ptr %213, align 4
  br i1 %1684, label %1687, label %._crit_edge2

._crit_edge2:                                     ; preds = %1663
  br label %1737

1687:                                             ; preds = %1663
  store i32 65, ptr %215, align 4
  store double 1.800000e+01, ptr %216, align 8
  store i32 23, ptr %217, align 4
  store ptr @Animal, ptr %218, align 8
  %1688 = load ptr, ptr %218, align 8
  %1689 = getelementptr ptr, ptr %1688, i32 6
  %1690 = load ptr, ptr %1689, align 8
  %1691 = call { i64, i64 } @size_wrapper(ptr %1690, ptr %218)
  %1692 = extractvalue { i64, i64 } %1691, 0
  %1693 = call ptr @bump_malloc(i64 %1692)
  store ptr @Animal, ptr %222, align 8
  store ptr %1693, ptr %221, align 8
  store i32 10, ptr %219, align 4
  store i32 65, ptr %223, align 4
  store double 1.800000e+01, ptr %224, align 8
  store i32 23, ptr %225, align 4
  %1694 = load i32, ptr %223, align 4
  %1695 = load double, ptr %224, align 8
  %1696 = load i32, ptr %225, align 4
  %1697 = load ptr, ptr %222, align 8
  %1698 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1697, 0
  %1699 = load ptr, ptr %221, align 8
  %1700 = insertvalue { ptr, ptr, ptr, i32 } %1698, ptr %1699, 1
  %1701 = load ptr, ptr %220, align 8
  %1702 = insertvalue { ptr, ptr, ptr, i32 } %1700, ptr %1701, 2
  %1703 = load i32, ptr %219, align 4
  %1704 = insertvalue { ptr, ptr, ptr, i32 } %1702, i32 %1703, 3
  %1705 = getelementptr [3 x ptr], ptr %226, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1705, align 8
  %1706 = getelementptr [3 x ptr], ptr %226, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %1706, align 8
  %1707 = getelementptr [3 x ptr], ptr %226, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1707, align 8
  %1708 = call ptr @llvm.invariant.start.p0(i64 9, ptr %226)
  %1709 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1697)
  %1710 = getelementptr ptr, ptr %1697, i32 %1703
  %1711 = getelementptr ptr, ptr %1710, i32 3
  %1712 = load ptr, ptr %1711, align 8
  %1713 = getelementptr { ptr, ptr, ptr }, ptr %227, i32 0, i32 0
  store ptr @i32_typ, ptr %1713, align 8
  %1714 = getelementptr { ptr, ptr, ptr }, ptr %227, i32 0, i32 1
  store ptr @f64_typ, ptr %1714, align 8
  %1715 = getelementptr { ptr, ptr, ptr }, ptr %227, i32 0, i32 2
  store ptr @i32_typ, ptr %1715, align 8
  %1716 = call ptr @behavior_wrapper(ptr %1712, { ptr, ptr, ptr, i32 } %1704, ptr %227)
  call void %1716({ ptr, ptr, ptr, i32 } %1704, { ptr, ptr, ptr, i32 } %1704, ptr %226, i32 %1694, double %1695, i32 %1696) #15
  %1717 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %1718 = load ptr, ptr %222, align 8
  store ptr %1718, ptr %1717, align 8
  %1719 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %1720 = load ptr, ptr %221, align 8
  store ptr %1720, ptr %1719, align 8
  %1721 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %1722 = load ptr, ptr %220, align 8
  store ptr %1722, ptr %1721, align 8
  %1723 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %1724 = load i32, ptr %219, align 4
  store i32 %1724, ptr %1723, align 4
  call void @set_offset(ptr %228, ptr @Animal)
  %1725 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 0
  %1726 = load ptr, ptr %1717, align 8
  store ptr %1726, ptr %1725, align 8
  %1727 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 1
  %1728 = load ptr, ptr %1719, align 8
  store ptr %1728, ptr %1727, align 8
  %1729 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 2
  %1730 = load ptr, ptr %1721, align 8
  store ptr %1730, ptr %1729, align 8
  %1731 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 3
  %1732 = load i32, ptr %1723, align 4
  store i32 %1732, ptr %1731, align 4
  %1733 = getelementptr { ptr, i160 }, ptr %229, i32 0, i32 0
  %1734 = load ptr, ptr %1733, align 8
  store ptr %1734, ptr %213, align 8
  %1735 = getelementptr { ptr, i160 }, ptr %229, i32 0, i32 1
  %1736 = load i160, ptr %1735, align 4
  store i160 %1736, ptr %212, align 4
  br label %1737

1737:                                             ; preds = %._crit_edge2, %1687
  %1738 = load ptr, ptr %213, align 8
  store ptr %1738, ptr %199, align 8
  %1739 = load i160, ptr %212, align 4
  store i160 %1739, ptr %198, align 4
  br label %1740

1740:                                             ; preds = %._crit_edge1, %1737
  %.reload42 = load i1, ptr %.reg2mem41, align 1
  br i1 %.reload42, label %._crit_edge3, label %1741

._crit_edge3:                                     ; preds = %1740
  br label %1658

1741:                                             ; preds = %1740
  %1742 = load ptr, ptr %199, align 8
  %1743 = ptrtoint ptr %1742 to i64
  %1744 = icmp eq i64 %1743, ptrtoint (ptr @i32_typ to i64)
  store i1 %1744, ptr %230, align 1
  %1745 = load i1, ptr %230, align 1
  br i1 %1745, label %1746, label %._crit_edge4

._crit_edge4:                                     ; preds = %1741
  br label %1764

1746:                                             ; preds = %1741
  %1747 = load i32, ptr %198, align 4
  store i32 %1747, ptr %231, align 4
  %1748 = load i32, ptr %231, align 4
  store i32 %1748, ptr %232, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %234, align 4
  %1749 = load i64, ptr %234, align 4
  store i64 %1749, ptr %233, align 4
  %1750 = load ptr, ptr %233, align 8
  %1751 = insertvalue { ptr, i160 } undef, ptr %1750, 0
  %1752 = load i160, ptr %232, align 4
  %1753 = insertvalue { ptr, i160 } %1751, i160 %1752, 1
  %1754 = getelementptr [1 x ptr], ptr %235, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1754, align 8
  %1755 = call ptr @llvm.invariant.start.p0(i64 1, ptr %235)
  %1756 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1757 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %1758 = getelementptr { ptr }, ptr %236, i32 0, i32 0
  store ptr %1750, ptr %1758, align 8
  %1759 = call ptr @class_behavior_wrapper(ptr %1757, ptr %236)
  call void %1759(ptr %235, { ptr, i160 } %1753) #15
  %1760 = load i32, ptr %231, align 4
  store i32 %1760, ptr %237, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %239, align 4
  %1761 = load i64, ptr %239, align 4
  store i64 %1761, ptr %238, align 4
  %1762 = load ptr, ptr %238, align 8
  store ptr %1762, ptr %199, align 8
  %1763 = load i160, ptr %237, align 4
  store i160 %1763, ptr %198, align 4
  br label %1764

1764:                                             ; preds = %._crit_edge4, %1746
  %1765 = load ptr, ptr %199, align 8
  %1766 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1765, i32 0, i32 0, i32 1
  %1767 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1765, i32 0, i32 0, i32 2
  %1768 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1765, i32 0, i32 1, i32 0
  %1769 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1765, i32 0, i32 1, i32 1
  %1770 = load i64, ptr %1766, align 4
  %1771 = load i64, ptr %1767, align 4
  %1772 = load ptr, ptr %1768, align 8
  %1773 = load ptr, ptr %1769, align 8
  %1774 = load i64, ptr @Animal, align 4
  %1775 = call i1 @subtype_test_wrapper(ptr %1772, i64 %1771, i64 %1770, i64 %1774, i64 ptrtoint (ptr @Animal to i64), ptr %1773)
  store i1 %1775, ptr %240, align 1
  %1776 = load i1, ptr %240, align 1
  br i1 %1776, label %1777, label %._crit_edge5

._crit_edge5:                                     ; preds = %1764
  br label %1796

1777:                                             ; preds = %1764
  %1778 = getelementptr { ptr, i160 }, ptr %241, i32 0, i32 0
  %1779 = load ptr, ptr %199, align 8
  store ptr %1779, ptr %1778, align 8
  %1780 = getelementptr { ptr, i160 }, ptr %241, i32 0, i32 1
  %1781 = load i160, ptr %198, align 4
  store i160 %1781, ptr %1780, align 4
  call void @set_offset(ptr %241, ptr @Animal)
  %1782 = getelementptr { ptr, ptr, ptr, i32 }, ptr %241, i32 0, i32 0
  %1783 = load ptr, ptr %1782, align 8
  %1784 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1783, 0
  %1785 = getelementptr { ptr, ptr, ptr, i32 }, ptr %241, i32 0, i32 1
  %1786 = load ptr, ptr %1785, align 8
  %1787 = insertvalue { ptr, ptr, ptr, i32 } %1784, ptr %1786, 1
  %1788 = getelementptr { ptr, ptr, ptr, i32 }, ptr %241, i32 0, i32 2
  %1789 = load ptr, ptr %1788, align 8
  %1790 = insertvalue { ptr, ptr, ptr, i32 } %1787, ptr %1789, 2
  %1791 = getelementptr { ptr, ptr, ptr, i32 }, ptr %241, i32 0, i32 3
  %1792 = load i32, ptr %1791, align 4
  %1793 = insertvalue { ptr, ptr, ptr, i32 } %1790, i32 %1792, 3
  call void @make_em_speak({ ptr, ptr, ptr, i32 } %1793)
  %1794 = load ptr, ptr %1778, align 8
  store ptr %1794, ptr %199, align 8
  %1795 = load i160, ptr %1780, align 4
  store i160 %1795, ptr %198, align 4
  br label %1796

1796:                                             ; preds = %._crit_edge5, %1777
  %.reload60 = load ptr, ptr %.reg2mem59, align 8
  %1797 = load ptr, ptr %.reload60, align 8
  %1798 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1797, 0
  %.reload55 = load ptr, ptr %.reg2mem54, align 8
  %1799 = load ptr, ptr %.reload55, align 8
  %1800 = insertvalue { ptr, ptr, ptr, i32 } %1798, ptr %1799, 1
  %.reload50 = load ptr, ptr %.reg2mem49, align 8
  %1801 = load ptr, ptr %.reload50, align 8
  %1802 = insertvalue { ptr, ptr, ptr, i32 } %1800, ptr %1801, 2
  %.reload45 = load ptr, ptr %.reg2mem44, align 8
  %1803 = load i32, ptr %.reload45, align 4
  %1804 = insertvalue { ptr, ptr, ptr, i32 } %1802, i32 %1803, 3
  %1805 = call ptr @llvm.invariant.start.p0(i64 0, ptr %242)
  %1806 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1797)
  %1807 = getelementptr ptr, ptr %1797, i32 %1803
  %1808 = getelementptr ptr, ptr %1807, i32 5
  %1809 = load ptr, ptr %1808, align 8
  %1810 = call ptr @behavior_wrapper(ptr %1809, { ptr, ptr, ptr, i32 } %1804, ptr %243)
  call void %1810({ ptr, ptr, ptr, i32 } %1804, { ptr, ptr, ptr, i32 } %1804, ptr %242) #15
  store i32 0, ptr %244, align 4
  store ptr @ListNode, ptr %245, align 8
  %1811 = load ptr, ptr %245, align 8
  %1812 = getelementptr ptr, ptr %1811, i32 6
  %1813 = load ptr, ptr %1812, align 8
  %1814 = call { i64, i64 } @size_wrapper(ptr %1813, ptr %245)
  %1815 = extractvalue { i64, i64 } %1814, 0
  %1816 = call ptr @bump_malloc(i64 %1815)
  store ptr @ListNode, ptr %249, align 8
  store ptr %1816, ptr %248, align 8
  store i32 10, ptr %246, align 4
  store i32 0, ptr %250, align 4
  %1817 = load i32, ptr %250, align 4
  %1818 = load ptr, ptr %249, align 8
  %1819 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1818, 0
  %1820 = load ptr, ptr %248, align 8
  %1821 = insertvalue { ptr, ptr, ptr, i32 } %1819, ptr %1820, 1
  %1822 = load ptr, ptr %247, align 8
  %1823 = insertvalue { ptr, ptr, ptr, i32 } %1821, ptr %1822, 2
  %1824 = load i32, ptr %246, align 4
  %1825 = insertvalue { ptr, ptr, ptr, i32 } %1823, i32 %1824, 3
  %1826 = getelementptr [1 x ptr], ptr %251, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1826, align 8
  %1827 = call ptr @llvm.invariant.start.p0(i64 1, ptr %251)
  %1828 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1818)
  %1829 = getelementptr ptr, ptr %1818, i32 %1824
  %1830 = getelementptr ptr, ptr %1829, i32 2
  %1831 = load ptr, ptr %1830, align 8
  %1832 = getelementptr { ptr }, ptr %252, i32 0, i32 0
  store ptr @i32_typ, ptr %1832, align 8
  %1833 = call ptr @behavior_wrapper(ptr %1831, { ptr, ptr, ptr, i32 } %1825, ptr %252)
  call void %1833({ ptr, ptr, ptr, i32 } %1825, { ptr, ptr, ptr, i32 } %1825, ptr %251, i32 %1817) #15
  %1834 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %1835 = load ptr, ptr %249, align 8
  store ptr %1835, ptr %1834, align 8
  %1836 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %1837 = load ptr, ptr %248, align 8
  store ptr %1837, ptr %1836, align 8
  %1838 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %1839 = load ptr, ptr %247, align 8
  store ptr %1839, ptr %1838, align 8
  %1840 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %1841 = load i32, ptr %246, align 4
  store i32 %1841, ptr %1840, align 4
  call void @set_offset(ptr %253, ptr @ListNode)
  %1842 = load ptr, ptr %1834, align 8
  store ptr %1842, ptr %257, align 8
  %1843 = load ptr, ptr %1836, align 8
  store ptr %1843, ptr %256, align 8
  %1844 = load ptr, ptr %1838, align 8
  store ptr %1844, ptr %255, align 8
  %1845 = load i32, ptr %1840, align 4
  store i32 %1845, ptr %254, align 4
  %1846 = getelementptr { ptr, ptr, ptr, i32 }, ptr %258, i32 0, i32 0
  %1847 = load ptr, ptr %257, align 8
  store ptr %1847, ptr %1846, align 8
  %1848 = getelementptr { ptr, ptr, ptr, i32 }, ptr %258, i32 0, i32 1
  %1849 = load ptr, ptr %256, align 8
  store ptr %1849, ptr %1848, align 8
  %1850 = getelementptr { ptr, ptr, ptr, i32 }, ptr %258, i32 0, i32 2
  %1851 = load ptr, ptr %255, align 8
  store ptr %1851, ptr %1850, align 8
  %1852 = getelementptr { ptr, ptr, ptr, i32 }, ptr %258, i32 0, i32 3
  %1853 = load i32, ptr %254, align 4
  store i32 %1853, ptr %1852, align 4
  call void @set_offset(ptr %258, ptr @ListNode)
  %1854 = load ptr, ptr %1846, align 8
  store ptr %1854, ptr %262, align 8
  %1855 = load ptr, ptr %1848, align 8
  store ptr %1855, ptr %261, align 8
  %1856 = load ptr, ptr %1850, align 8
  store ptr %1856, ptr %260, align 8
  %1857 = load i32, ptr %1852, align 4
  store i32 %1857, ptr %259, align 4
  store i32 1, ptr %263, align 4
  store i32 10, ptr %264, align 4
  store ptr @Range, ptr %265, align 8
  %1858 = load ptr, ptr %265, align 8
  %1859 = getelementptr ptr, ptr %1858, i32 6
  %1860 = load ptr, ptr %1859, align 8
  %1861 = call { i64, i64 } @size_wrapper(ptr %1860, ptr %265)
  %1862 = extractvalue { i64, i64 } %1861, 0
  %1863 = call ptr @bump_malloc(i64 %1862)
  store ptr @Range, ptr %269, align 8
  store ptr %1863, ptr %268, align 8
  store i32 10, ptr %266, align 4
  store i32 1, ptr %270, align 4
  store i32 10, ptr %271, align 4
  %1864 = load i32, ptr %270, align 4
  %1865 = load i32, ptr %271, align 4
  %1866 = load ptr, ptr %269, align 8
  %1867 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1866, 0
  %1868 = load ptr, ptr %268, align 8
  %1869 = insertvalue { ptr, ptr, ptr, i32 } %1867, ptr %1868, 1
  %1870 = load ptr, ptr %267, align 8
  %1871 = insertvalue { ptr, ptr, ptr, i32 } %1869, ptr %1870, 2
  %1872 = load i32, ptr %266, align 4
  %1873 = insertvalue { ptr, ptr, ptr, i32 } %1871, i32 %1872, 3
  %1874 = getelementptr [2 x ptr], ptr %272, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1874, align 8
  %1875 = getelementptr [2 x ptr], ptr %272, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1875, align 8
  %1876 = call ptr @llvm.invariant.start.p0(i64 4, ptr %272)
  %1877 = call ptr @llvm.invariant.start.p0(i64 456, ptr %1866)
  %1878 = getelementptr ptr, ptr %1866, i32 %1872
  %1879 = getelementptr ptr, ptr %1878, i32 4
  %1880 = load ptr, ptr %1879, align 8
  %1881 = getelementptr { ptr, ptr }, ptr %273, i32 0, i32 0
  store ptr @i32_typ, ptr %1881, align 8
  %1882 = getelementptr { ptr, ptr }, ptr %273, i32 0, i32 1
  store ptr @i32_typ, ptr %1882, align 8
  %1883 = call ptr @behavior_wrapper(ptr %1880, { ptr, ptr, ptr, i32 } %1873, ptr %273)
  call void %1883({ ptr, ptr, ptr, i32 } %1873, { ptr, ptr, ptr, i32 } %1873, ptr %272, i32 %1864, i32 %1865) #15
  %1884 = load ptr, ptr %269, align 8
  %1885 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1884, 0
  %1886 = load ptr, ptr %268, align 8
  %1887 = insertvalue { ptr, ptr, ptr, i32 } %1885, ptr %1886, 1
  %1888 = load ptr, ptr %267, align 8
  %1889 = insertvalue { ptr, ptr, ptr, i32 } %1887, ptr %1888, 2
  %1890 = load i32, ptr %266, align 4
  %1891 = insertvalue { ptr, ptr, ptr, i32 } %1889, i32 %1890, 3
  %1892 = call ptr @llvm.invariant.start.p0(i64 0, ptr %274)
  %1893 = call ptr @llvm.invariant.start.p0(i64 456, ptr %1884)
  %1894 = getelementptr ptr, ptr %1884, i32 %1890
  %1895 = getelementptr ptr, ptr %1894, i32 16
  %1896 = load ptr, ptr %1895, align 8
  %1897 = call ptr @behavior_wrapper(ptr %1896, { ptr, ptr, ptr, i32 } %1891, ptr %275)
  %1898 = call { ptr, ptr, ptr, i32 } %1897({ ptr, ptr, ptr, i32 } %1891, { ptr, ptr, ptr, i32 } %1891, ptr %274) #15
  store { ptr, ptr, ptr, i32 } %1898, ptr %276, align 8
  %1899 = getelementptr { ptr, ptr, ptr, i32 }, ptr %276, i32 0, i32 0
  %1900 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 0
  %1901 = load ptr, ptr %1899, align 8
  store ptr %1901, ptr %1900, align 8
  %1902 = getelementptr { ptr, ptr, ptr, i32 }, ptr %276, i32 0, i32 1
  %1903 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 1
  %1904 = load ptr, ptr %1902, align 8
  store ptr %1904, ptr %1903, align 8
  %1905 = getelementptr { ptr, ptr, ptr, i32 }, ptr %276, i32 0, i32 2
  %1906 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 2
  %1907 = load ptr, ptr %1905, align 8
  store ptr %1907, ptr %1906, align 8
  %1908 = getelementptr { ptr, ptr, ptr, i32 }, ptr %276, i32 0, i32 3
  %1909 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 3
  %1910 = load i32, ptr %1908, align 4
  store i32 %1910, ptr %1909, align 4
  call void @set_offset(ptr %277, ptr @RangeIterator)
  %1911 = getelementptr { ptr, ptr, ptr, i32 }, ptr %278, i32 0, i32 0
  %1912 = load ptr, ptr %1900, align 8
  store ptr %1912, ptr %1911, align 8
  %1913 = getelementptr { ptr, ptr, ptr, i32 }, ptr %278, i32 0, i32 1
  %1914 = load ptr, ptr %1903, align 8
  store ptr %1914, ptr %1913, align 8
  %1915 = getelementptr { ptr, ptr, ptr, i32 }, ptr %278, i32 0, i32 2
  %1916 = load ptr, ptr %1906, align 8
  store ptr %1916, ptr %1915, align 8
  %1917 = getelementptr { ptr, ptr, ptr, i32 }, ptr %278, i32 0, i32 3
  %1918 = load i32, ptr %1909, align 4
  store i32 %1918, ptr %1917, align 4
  call void @set_offset(ptr %278, ptr @RangeIterator)
  %1919 = load ptr, ptr %1911, align 8
  store ptr %1919, ptr %282, align 8
  %1920 = load ptr, ptr %1913, align 8
  store ptr %1920, ptr %281, align 8
  %1921 = load ptr, ptr %1915, align 8
  store ptr %1921, ptr %280, align 8
  %1922 = load i32, ptr %1917, align 4
  store i32 %1922, ptr %279, align 4
  br label %1923

1923:                                             ; preds = %._crit_edge7, %1796
  %1924 = load ptr, ptr %282, align 8
  %1925 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1924, 0
  %1926 = load ptr, ptr %281, align 8
  %1927 = insertvalue { ptr, ptr, ptr, i32 } %1925, ptr %1926, 1
  %1928 = load ptr, ptr %280, align 8
  %1929 = insertvalue { ptr, ptr, ptr, i32 } %1927, ptr %1928, 2
  %1930 = load i32, ptr %279, align 4
  %1931 = insertvalue { ptr, ptr, ptr, i32 } %1929, i32 %1930, 3
  %1932 = call ptr @llvm.invariant.start.p0(i64 0, ptr %283)
  %1933 = call ptr @llvm.invariant.start.p0(i64 72, ptr %1924)
  %1934 = getelementptr ptr, ptr %1924, i32 %1930
  %1935 = getelementptr ptr, ptr %1934, i32 4
  %1936 = load ptr, ptr %1935, align 8
  %1937 = call ptr @behavior_wrapper(ptr %1936, { ptr, ptr, ptr, i32 } %1931, ptr %284)
  %1938 = call { ptr, i32 } %1937({ ptr, ptr, ptr, i32 } %1931, { ptr, ptr, ptr, i32 } %1931, ptr %283) #15
  store { ptr, i32 } %1938, ptr %285, align 8
  %1939 = load ptr, ptr %285, align 8
  %1940 = ptrtoint ptr %1939 to i64
  %1941 = icmp eq i64 %1940, ptrtoint (ptr @nil_typ to i64)
  %1942 = icmp eq i64 %1940, 0
  %1943 = or i1 %1941, %1942
  %1944 = icmp eq i1 %1943, false
  store i1 %1944, ptr %286, align 1
  %1945 = load i1, ptr %286, align 1
  store i1 %1945, ptr %.reg2mem38, align 1
  %.reload40 = load i1, ptr %.reg2mem38, align 1
  br i1 %.reload40, label %1946, label %._crit_edge6

._crit_edge6:                                     ; preds = %1923
  br label %2030

1946:                                             ; preds = %1923
  %1947 = getelementptr { ptr, i32 }, ptr %285, i32 0, i32 1
  %1948 = load i32, ptr %1947, align 4
  store i32 %1948, ptr %287, align 4
  store ptr @ListNode, ptr %288, align 8
  %1949 = load ptr, ptr %288, align 8
  %1950 = getelementptr ptr, ptr %1949, i32 6
  %1951 = load ptr, ptr %1950, align 8
  %1952 = call { i64, i64 } @size_wrapper(ptr %1951, ptr %288)
  %1953 = extractvalue { i64, i64 } %1952, 0
  %1954 = call ptr @bump_malloc(i64 %1953)
  store ptr @ListNode, ptr %292, align 8
  store ptr %1954, ptr %291, align 8
  store i32 10, ptr %289, align 4
  %1955 = load i32, ptr %287, align 4
  %1956 = load ptr, ptr %292, align 8
  %1957 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1956, 0
  %1958 = load ptr, ptr %291, align 8
  %1959 = insertvalue { ptr, ptr, ptr, i32 } %1957, ptr %1958, 1
  %1960 = load ptr, ptr %290, align 8
  %1961 = insertvalue { ptr, ptr, ptr, i32 } %1959, ptr %1960, 2
  %1962 = load i32, ptr %289, align 4
  %1963 = insertvalue { ptr, ptr, ptr, i32 } %1961, i32 %1962, 3
  %1964 = getelementptr [1 x ptr], ptr %293, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1964, align 8
  %1965 = call ptr @llvm.invariant.start.p0(i64 1, ptr %293)
  %1966 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1956)
  %1967 = getelementptr ptr, ptr %1956, i32 %1962
  %1968 = getelementptr ptr, ptr %1967, i32 2
  %1969 = load ptr, ptr %1968, align 8
  %1970 = getelementptr { ptr }, ptr %294, i32 0, i32 0
  store ptr @i32_typ, ptr %1970, align 8
  %1971 = call ptr @behavior_wrapper(ptr %1969, { ptr, ptr, ptr, i32 } %1963, ptr %294)
  call void %1971({ ptr, ptr, ptr, i32 } %1963, { ptr, ptr, ptr, i32 } %1963, ptr %293, i32 %1955) #15
  %1972 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %1973 = load ptr, ptr %292, align 8
  store ptr %1973, ptr %1972, align 8
  %1974 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %1975 = load ptr, ptr %291, align 8
  store ptr %1975, ptr %1974, align 8
  %1976 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %1977 = load ptr, ptr %290, align 8
  store ptr %1977, ptr %1976, align 8
  %1978 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %1979 = load i32, ptr %289, align 4
  store i32 %1979, ptr %1978, align 4
  call void @set_offset(ptr %295, ptr @ListNode)
  %1980 = load ptr, ptr %1972, align 8
  %1981 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1980, 0
  %1982 = load ptr, ptr %1974, align 8
  %1983 = insertvalue { ptr, ptr, ptr, i32 } %1981, ptr %1982, 1
  %1984 = load ptr, ptr %1976, align 8
  %1985 = insertvalue { ptr, ptr, ptr, i32 } %1983, ptr %1984, 2
  %1986 = load i32, ptr %1978, align 4
  %1987 = insertvalue { ptr, ptr, ptr, i32 } %1985, i32 %1986, 3
  %1988 = load ptr, ptr %262, align 8
  %1989 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1988, 0
  %1990 = load ptr, ptr %261, align 8
  %1991 = insertvalue { ptr, ptr, ptr, i32 } %1989, ptr %1990, 1
  %1992 = load ptr, ptr %260, align 8
  %1993 = insertvalue { ptr, ptr, ptr, i32 } %1991, ptr %1992, 2
  %1994 = load i32, ptr %259, align 4
  %1995 = insertvalue { ptr, ptr, ptr, i32 } %1993, i32 %1994, 3
  %1996 = getelementptr [1 x ptr], ptr %296, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %1996, align 8
  %1997 = call ptr @llvm.invariant.start.p0(i64 1, ptr %296)
  %1998 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1988)
  %1999 = getelementptr ptr, ptr %1988, i32 %1994
  %2000 = getelementptr ptr, ptr %1999, i32 3
  %2001 = load ptr, ptr %2000, align 8
  %2002 = getelementptr { ptr }, ptr %297, i32 0, i32 0
  store ptr %1980, ptr %2002, align 8
  %2003 = call ptr @behavior_wrapper(ptr %2001, { ptr, ptr, ptr, i32 } %1995, ptr %297)
  %2004 = call { ptr, ptr, ptr, i32 } %2003({ ptr, ptr, ptr, i32 } %1995, { ptr, ptr, ptr, i32 } %1995, ptr %296, { ptr, ptr, ptr, i32 } %1987) #15
  store { ptr, ptr, ptr, i32 } %2004, ptr %298, align 8
  %2005 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 0
  %2006 = getelementptr { ptr, ptr, ptr, i32 }, ptr %299, i32 0, i32 0
  %2007 = load ptr, ptr %2005, align 8
  store ptr %2007, ptr %2006, align 8
  %2008 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 1
  %2009 = getelementptr { ptr, ptr, ptr, i32 }, ptr %299, i32 0, i32 1
  %2010 = load ptr, ptr %2008, align 8
  store ptr %2010, ptr %2009, align 8
  %2011 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 2
  %2012 = getelementptr { ptr, ptr, ptr, i32 }, ptr %299, i32 0, i32 2
  %2013 = load ptr, ptr %2011, align 8
  store ptr %2013, ptr %2012, align 8
  %2014 = getelementptr { ptr, ptr, ptr, i32 }, ptr %298, i32 0, i32 3
  %2015 = getelementptr { ptr, ptr, ptr, i32 }, ptr %299, i32 0, i32 3
  %2016 = load i32, ptr %2014, align 4
  store i32 %2016, ptr %2015, align 4
  call void @set_offset(ptr %299, ptr @ListNode)
  %2017 = getelementptr { ptr, ptr, ptr, i32 }, ptr %300, i32 0, i32 0
  %2018 = load ptr, ptr %2006, align 8
  store ptr %2018, ptr %2017, align 8
  %2019 = getelementptr { ptr, ptr, ptr, i32 }, ptr %300, i32 0, i32 1
  %2020 = load ptr, ptr %2009, align 8
  store ptr %2020, ptr %2019, align 8
  %2021 = getelementptr { ptr, ptr, ptr, i32 }, ptr %300, i32 0, i32 2
  %2022 = load ptr, ptr %2012, align 8
  store ptr %2022, ptr %2021, align 8
  %2023 = getelementptr { ptr, ptr, ptr, i32 }, ptr %300, i32 0, i32 3
  %2024 = load i32, ptr %2015, align 4
  store i32 %2024, ptr %2023, align 4
  call void @set_offset(ptr %300, ptr @ListNode)
  %2025 = load ptr, ptr %2017, align 8
  store ptr %2025, ptr %262, align 8
  %2026 = load ptr, ptr %2019, align 8
  store ptr %2026, ptr %261, align 8
  %2027 = load ptr, ptr %2021, align 8
  store ptr %2027, ptr %260, align 8
  %2028 = load i32, ptr %2023, align 4
  store i32 %2028, ptr %259, align 4
  %2029 = load i32, ptr %287, align 4
  store i32 %2029, ptr %285, align 4
  br label %2030

2030:                                             ; preds = %._crit_edge6, %1946
  %.reload39 = load i1, ptr %.reg2mem38, align 1
  br i1 %.reload39, label %._crit_edge7, label %2031

._crit_edge7:                                     ; preds = %2030
  br label %1923

2031:                                             ; preds = %2030
  %2032 = load ptr, ptr %257, align 8
  %2033 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2032, 0
  %2034 = load ptr, ptr %256, align 8
  %2035 = insertvalue { ptr, ptr, ptr, i32 } %2033, ptr %2034, 1
  %2036 = load ptr, ptr %255, align 8
  %2037 = insertvalue { ptr, ptr, ptr, i32 } %2035, ptr %2036, 2
  %2038 = load i32, ptr %254, align 4
  %2039 = insertvalue { ptr, ptr, ptr, i32 } %2037, i32 %2038, 3
  %2040 = call ptr @llvm.invariant.start.p0(i64 0, ptr %301)
  %2041 = call ptr @llvm.invariant.start.p0(i64 96, ptr %2032)
  %2042 = getelementptr ptr, ptr %2032, i32 %2038
  %2043 = getelementptr ptr, ptr %2042, i32 5
  %2044 = load ptr, ptr %2043, align 8
  %2045 = call ptr @behavior_wrapper(ptr %2044, { ptr, ptr, ptr, i32 } %2039, ptr %302)
  %2046 = call i32 %2045({ ptr, ptr, ptr, i32 } %2039, { ptr, ptr, ptr, i32 } %2039, ptr %301) #15
  store i32 %2046, ptr %303, align 4
  %2047 = load i32, ptr %303, align 4
  store i32 %2047, ptr %304, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %306, align 4
  %2048 = load i64, ptr %306, align 4
  store i64 %2048, ptr %305, align 4
  %2049 = load ptr, ptr %305, align 8
  %2050 = insertvalue { ptr, i160 } undef, ptr %2049, 0
  %2051 = load i160, ptr %304, align 4
  %2052 = insertvalue { ptr, i160 } %2050, i160 %2051, 1
  %2053 = getelementptr [1 x ptr], ptr %307, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2053, align 8
  %2054 = call ptr @llvm.invariant.start.p0(i64 1, ptr %307)
  %2055 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2056 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2057 = getelementptr { ptr }, ptr %308, i32 0, i32 0
  store ptr %2049, ptr %2057, align 8
  %2058 = call ptr @class_behavior_wrapper(ptr %2056, ptr %308)
  call void %2058(ptr %307, { ptr, i160 } %2052) #15
  %2059 = load ptr, ptr %257, align 8
  %2060 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2059, 0
  %2061 = load ptr, ptr %256, align 8
  %2062 = insertvalue { ptr, ptr, ptr, i32 } %2060, ptr %2061, 1
  %2063 = load ptr, ptr %255, align 8
  %2064 = insertvalue { ptr, ptr, ptr, i32 } %2062, ptr %2063, 2
  %2065 = load i32, ptr %254, align 4
  %2066 = insertvalue { ptr, ptr, ptr, i32 } %2064, i32 %2065, 3
  %2067 = call ptr @llvm.invariant.start.p0(i64 0, ptr %309)
  %2068 = call ptr @llvm.invariant.start.p0(i64 96, ptr %2059)
  %2069 = getelementptr ptr, ptr %2059, i32 %2065
  %2070 = getelementptr ptr, ptr %2069, i32 6
  %2071 = load ptr, ptr %2070, align 8
  %2072 = call ptr @behavior_wrapper(ptr %2071, { ptr, ptr, ptr, i32 } %2066, ptr %310)
  %2073 = call { ptr, ptr, ptr, i32 } %2072({ ptr, ptr, ptr, i32 } %2066, { ptr, ptr, ptr, i32 } %2066, ptr %309) #15
  store { ptr, ptr, ptr, i32 } %2073, ptr %311, align 8
  %2074 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 0
  %2075 = getelementptr { ptr, ptr, ptr, i32 }, ptr %312, i32 0, i32 0
  %2076 = load ptr, ptr %2074, align 8
  store ptr %2076, ptr %2075, align 8
  %2077 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 1
  %2078 = getelementptr { ptr, ptr, ptr, i32 }, ptr %312, i32 0, i32 1
  %2079 = load ptr, ptr %2077, align 8
  store ptr %2079, ptr %2078, align 8
  %2080 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 2
  %2081 = getelementptr { ptr, ptr, ptr, i32 }, ptr %312, i32 0, i32 2
  %2082 = load ptr, ptr %2080, align 8
  store ptr %2082, ptr %2081, align 8
  %2083 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 3
  %2084 = getelementptr { ptr, ptr, ptr, i32 }, ptr %312, i32 0, i32 3
  %2085 = load i32, ptr %2083, align 4
  store i32 %2085, ptr %2084, align 4
  call void @set_offset(ptr %312, ptr @ListIterator)
  %2086 = getelementptr { ptr, ptr, ptr, i32 }, ptr %313, i32 0, i32 0
  %2087 = load ptr, ptr %2075, align 8
  store ptr %2087, ptr %2086, align 8
  %2088 = getelementptr { ptr, ptr, ptr, i32 }, ptr %313, i32 0, i32 1
  %2089 = load ptr, ptr %2078, align 8
  store ptr %2089, ptr %2088, align 8
  %2090 = getelementptr { ptr, ptr, ptr, i32 }, ptr %313, i32 0, i32 2
  %2091 = load ptr, ptr %2081, align 8
  store ptr %2091, ptr %2090, align 8
  %2092 = getelementptr { ptr, ptr, ptr, i32 }, ptr %313, i32 0, i32 3
  %2093 = load i32, ptr %2084, align 4
  store i32 %2093, ptr %2092, align 4
  call void @set_offset(ptr %313, ptr @ListIterator)
  %2094 = load ptr, ptr %2086, align 8
  store ptr %2094, ptr %317, align 8
  %2095 = load ptr, ptr %2088, align 8
  store ptr %2095, ptr %316, align 8
  %2096 = load ptr, ptr %2090, align 8
  store ptr %2096, ptr %315, align 8
  %2097 = load i32, ptr %2092, align 4
  store i32 %2097, ptr %314, align 4
  br label %2098

2098:                                             ; preds = %._crit_edge9, %2031
  %2099 = load ptr, ptr %317, align 8
  %2100 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2099, 0
  %2101 = load ptr, ptr %316, align 8
  %2102 = insertvalue { ptr, ptr, ptr, i32 } %2100, ptr %2101, 1
  %2103 = load ptr, ptr %315, align 8
  %2104 = insertvalue { ptr, ptr, ptr, i32 } %2102, ptr %2103, 2
  %2105 = load i32, ptr %314, align 4
  %2106 = insertvalue { ptr, ptr, ptr, i32 } %2104, i32 %2105, 3
  %2107 = call ptr @llvm.invariant.start.p0(i64 0, ptr %318)
  %2108 = call ptr @llvm.invariant.start.p0(i64 40, ptr %2099)
  %2109 = getelementptr ptr, ptr %2099, i32 %2105
  %2110 = getelementptr ptr, ptr %2109, i32 2
  %2111 = load ptr, ptr %2110, align 8
  %2112 = call ptr @behavior_wrapper(ptr %2111, { ptr, ptr, ptr, i32 } %2106, ptr %319)
  %2113 = call { ptr, i160 } %2112({ ptr, ptr, ptr, i32 } %2106, { ptr, ptr, ptr, i32 } %2106, ptr %318) #15
  store { ptr, i160 } %2113, ptr %320, align 8
  %2114 = load ptr, ptr %320, align 8
  %2115 = ptrtoint ptr %2114 to i64
  %2116 = icmp eq i64 %2115, ptrtoint (ptr @nil_typ to i64)
  %2117 = icmp eq i64 %2115, 0
  %2118 = or i1 %2116, %2117
  %2119 = icmp eq i1 %2118, false
  store i1 %2119, ptr %321, align 1
  %2120 = load i1, ptr %321, align 1
  store i1 %2120, ptr %.reg2mem35, align 1
  %.reload37 = load i1, ptr %.reg2mem35, align 1
  br i1 %.reload37, label %2121, label %._crit_edge8

._crit_edge8:                                     ; preds = %2098
  br label %2175

2121:                                             ; preds = %2098
  %2122 = getelementptr { ptr, i160 }, ptr %320, i32 0, i32 0
  %2123 = getelementptr { ptr, i160 }, ptr %322, i32 0, i32 0
  %2124 = load ptr, ptr %2122, align 8
  store ptr %2124, ptr %2123, align 8
  %2125 = getelementptr { ptr, i160 }, ptr %320, i32 0, i32 1
  %2126 = getelementptr { ptr, i160 }, ptr %322, i32 0, i32 1
  %2127 = load i160, ptr %2125, align 4
  store i160 %2127, ptr %2126, align 4
  call void @set_offset(ptr %322, ptr @ListNode)
  %2128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 0
  %2129 = load ptr, ptr %2128, align 8
  %2130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2129, 0
  %2131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 1
  %2132 = load ptr, ptr %2131, align 8
  %2133 = insertvalue { ptr, ptr, ptr, i32 } %2130, ptr %2132, 1
  %2134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 2
  %2135 = load ptr, ptr %2134, align 8
  %2136 = insertvalue { ptr, ptr, ptr, i32 } %2133, ptr %2135, 2
  %2137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 3
  %2138 = load i32, ptr %2137, align 4
  %2139 = insertvalue { ptr, ptr, ptr, i32 } %2136, i32 %2138, 3
  %2140 = call ptr @llvm.invariant.start.p0(i64 0, ptr %323)
  %2141 = call ptr @llvm.invariant.start.p0(i64 96, ptr %2129)
  %2142 = getelementptr ptr, ptr %2129, i32 %2138
  %2143 = getelementptr ptr, ptr %2142, i32 5
  %2144 = load ptr, ptr %2143, align 8
  %2145 = call ptr @behavior_wrapper(ptr %2144, { ptr, ptr, ptr, i32 } %2139, ptr %324)
  %2146 = call i32 %2145({ ptr, ptr, ptr, i32 } %2139, { ptr, ptr, ptr, i32 } %2139, ptr %323) #15
  store i32 %2146, ptr %325, align 4
  %2147 = load i32, ptr %325, align 4
  store i32 %2147, ptr %326, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %328, align 4
  %2148 = load i64, ptr %328, align 4
  store i64 %2148, ptr %327, align 4
  %2149 = load ptr, ptr %327, align 8
  %2150 = insertvalue { ptr, i160 } undef, ptr %2149, 0
  %2151 = load i160, ptr %326, align 4
  %2152 = insertvalue { ptr, i160 } %2150, i160 %2151, 1
  %2153 = getelementptr [1 x ptr], ptr %329, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2153, align 8
  %2154 = call ptr @llvm.invariant.start.p0(i64 1, ptr %329)
  %2155 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2156 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2157 = getelementptr { ptr }, ptr %330, i32 0, i32 0
  store ptr %2149, ptr %2157, align 8
  %2158 = call ptr @class_behavior_wrapper(ptr %2156, ptr %330)
  call void %2158(ptr %329, { ptr, i160 } %2152) #15
  %2159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 0
  %2160 = load ptr, ptr %2128, align 8
  store ptr %2160, ptr %2159, align 8
  %2161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 1
  %2162 = load ptr, ptr %2131, align 8
  store ptr %2162, ptr %2161, align 8
  %2163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 2
  %2164 = load ptr, ptr %2134, align 8
  store ptr %2164, ptr %2163, align 8
  %2165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 3
  %2166 = load i32, ptr %2137, align 4
  store i32 %2166, ptr %2165, align 4
  call void @set_offset(ptr %331, ptr @ListNode)
  %2167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %320, i32 0, i32 0
  %2168 = load ptr, ptr %2159, align 8
  store ptr %2168, ptr %2167, align 8
  %2169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %320, i32 0, i32 1
  %2170 = load ptr, ptr %2161, align 8
  store ptr %2170, ptr %2169, align 8
  %2171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %320, i32 0, i32 2
  %2172 = load ptr, ptr %2163, align 8
  store ptr %2172, ptr %2171, align 8
  %2173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %320, i32 0, i32 3
  %2174 = load i32, ptr %2165, align 4
  store i32 %2174, ptr %2173, align 4
  br label %2175

2175:                                             ; preds = %._crit_edge8, %2121
  %.reload36 = load i1, ptr %.reg2mem35, align 1
  br i1 %.reload36, label %._crit_edge9, label %2176

._crit_edge9:                                     ; preds = %2175
  br label %2098

2176:                                             ; preds = %2175
  store ptr @print88, ptr %332, align 8
  %2177 = load ptr, ptr %332, align 8
  %2178 = call ptr @coroutine_create(ptr %2177, ptr @coroutine_zhdmrpsinq_passer)
  call void @coroutine_zhdmrpsinq_buffer_filler(ptr %2178)
  store ptr %2178, ptr %333, align 8
  %2179 = getelementptr { ptr }, ptr %333, i32 0, i32 0
  %2180 = load ptr, ptr %2179, align 8
  store ptr %2180, ptr %334, align 8
  %2181 = load ptr, ptr %334, align 8
  call void @coroutine_call(ptr %2181)
  %2182 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %2181, i32 0, i32 4
  %2183 = load { ptr, i160 }, ptr %2182, align 8
  store { ptr, i160 } %2183, ptr %335, align 8
  store i32 89, ptr %336, align 4
  %2184 = load i32, ptr %336, align 4
  store i32 %2184, ptr %337, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %339, align 4
  %2185 = load i64, ptr %339, align 4
  store i64 %2185, ptr %338, align 4
  %2186 = load ptr, ptr %338, align 8
  %2187 = insertvalue { ptr, i160 } undef, ptr %2186, 0
  %2188 = load i160, ptr %337, align 4
  %2189 = insertvalue { ptr, i160 } %2187, i160 %2188, 1
  %2190 = getelementptr [1 x ptr], ptr %340, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2190, align 8
  %2191 = call ptr @llvm.invariant.start.p0(i64 1, ptr %340)
  %2192 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2193 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2194 = getelementptr { ptr }, ptr %341, i32 0, i32 0
  store ptr %2186, ptr %2194, align 8
  %2195 = call ptr @class_behavior_wrapper(ptr %2193, ptr %341)
  call void %2195(ptr %340, { ptr, i160 } %2189) #15
  %2196 = load ptr, ptr %334, align 8
  call void @coroutine_call(ptr %2196)
  %2197 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %2196, i32 0, i32 4
  %2198 = load { ptr, i160 }, ptr %2197, align 8
  store { ptr, i160 } %2198, ptr %342, align 8
  store i32 1, ptr %343, align 4
  store i32 10, ptr %344, align 4
  store ptr @Range, ptr %345, align 8
  %2199 = load ptr, ptr %345, align 8
  %2200 = getelementptr ptr, ptr %2199, i32 6
  %2201 = load ptr, ptr %2200, align 8
  %2202 = call { i64, i64 } @size_wrapper(ptr %2201, ptr %345)
  %2203 = extractvalue { i64, i64 } %2202, 0
  %2204 = call ptr @bump_malloc(i64 %2203)
  store ptr @Range, ptr %349, align 8
  store ptr %2204, ptr %348, align 8
  store i32 10, ptr %346, align 4
  store i32 1, ptr %350, align 4
  store i32 10, ptr %351, align 4
  %2205 = load i32, ptr %350, align 4
  %2206 = load i32, ptr %351, align 4
  %2207 = load ptr, ptr %349, align 8
  %2208 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2207, 0
  %2209 = load ptr, ptr %348, align 8
  %2210 = insertvalue { ptr, ptr, ptr, i32 } %2208, ptr %2209, 1
  %2211 = load ptr, ptr %347, align 8
  %2212 = insertvalue { ptr, ptr, ptr, i32 } %2210, ptr %2211, 2
  %2213 = load i32, ptr %346, align 4
  %2214 = insertvalue { ptr, ptr, ptr, i32 } %2212, i32 %2213, 3
  %2215 = getelementptr [2 x ptr], ptr %352, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2215, align 8
  %2216 = getelementptr [2 x ptr], ptr %352, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2216, align 8
  %2217 = call ptr @llvm.invariant.start.p0(i64 4, ptr %352)
  %2218 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2207)
  %2219 = getelementptr ptr, ptr %2207, i32 %2213
  %2220 = getelementptr ptr, ptr %2219, i32 4
  %2221 = load ptr, ptr %2220, align 8
  %2222 = getelementptr { ptr, ptr }, ptr %353, i32 0, i32 0
  store ptr @i32_typ, ptr %2222, align 8
  %2223 = getelementptr { ptr, ptr }, ptr %353, i32 0, i32 1
  store ptr @i32_typ, ptr %2223, align 8
  %2224 = call ptr @behavior_wrapper(ptr %2221, { ptr, ptr, ptr, i32 } %2214, ptr %353)
  call void %2224({ ptr, ptr, ptr, i32 } %2214, { ptr, ptr, ptr, i32 } %2214, ptr %352, i32 %2205, i32 %2206) #15
  %2225 = load ptr, ptr %349, align 8
  %2226 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2225, 0
  %2227 = load ptr, ptr %348, align 8
  %2228 = insertvalue { ptr, ptr, ptr, i32 } %2226, ptr %2227, 1
  %2229 = load ptr, ptr %347, align 8
  %2230 = insertvalue { ptr, ptr, ptr, i32 } %2228, ptr %2229, 2
  %2231 = load i32, ptr %346, align 4
  %2232 = insertvalue { ptr, ptr, ptr, i32 } %2230, i32 %2231, 3
  %2233 = call ptr @llvm.invariant.start.p0(i64 0, ptr %354)
  %2234 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2225)
  %2235 = getelementptr ptr, ptr %2225, i32 %2231
  %2236 = getelementptr ptr, ptr %2235, i32 16
  %2237 = load ptr, ptr %2236, align 8
  %2238 = call ptr @behavior_wrapper(ptr %2237, { ptr, ptr, ptr, i32 } %2232, ptr %355)
  %2239 = call { ptr, ptr, ptr, i32 } %2238({ ptr, ptr, ptr, i32 } %2232, { ptr, ptr, ptr, i32 } %2232, ptr %354) #15
  store { ptr, ptr, ptr, i32 } %2239, ptr %356, align 8
  %2240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %356, i32 0, i32 0
  %2241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 0
  %2242 = load ptr, ptr %2240, align 8
  store ptr %2242, ptr %2241, align 8
  %2243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %356, i32 0, i32 1
  %2244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 1
  %2245 = load ptr, ptr %2243, align 8
  store ptr %2245, ptr %2244, align 8
  %2246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %356, i32 0, i32 2
  %2247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 2
  %2248 = load ptr, ptr %2246, align 8
  store ptr %2248, ptr %2247, align 8
  %2249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %356, i32 0, i32 3
  %2250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 3
  %2251 = load i32, ptr %2249, align 4
  store i32 %2251, ptr %2250, align 4
  call void @set_offset(ptr %357, ptr @RangeIterator)
  %2252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 0
  %2253 = load ptr, ptr %2241, align 8
  store ptr %2253, ptr %2252, align 8
  %2254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 1
  %2255 = load ptr, ptr %2244, align 8
  store ptr %2255, ptr %2254, align 8
  %2256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 2
  %2257 = load ptr, ptr %2247, align 8
  store ptr %2257, ptr %2256, align 8
  %2258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 3
  %2259 = load i32, ptr %2250, align 4
  store i32 %2259, ptr %2258, align 4
  call void @set_offset(ptr %358, ptr @RangeIterator)
  %2260 = load ptr, ptr %2252, align 8
  store ptr %2260, ptr %362, align 8
  %2261 = load ptr, ptr %2254, align 8
  store ptr %2261, ptr %361, align 8
  %2262 = load ptr, ptr %2256, align 8
  store ptr %2262, ptr %360, align 8
  %2263 = load i32, ptr %2258, align 4
  store i32 %2263, ptr %359, align 4
  br label %2264

2264:                                             ; preds = %._crit_edge10, %2176
  %2265 = load ptr, ptr %362, align 8
  %2266 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2265, 0
  %2267 = load ptr, ptr %361, align 8
  %2268 = insertvalue { ptr, ptr, ptr, i32 } %2266, ptr %2267, 1
  %2269 = load ptr, ptr %360, align 8
  %2270 = insertvalue { ptr, ptr, ptr, i32 } %2268, ptr %2269, 2
  %2271 = load i32, ptr %359, align 4
  %2272 = insertvalue { ptr, ptr, ptr, i32 } %2270, i32 %2271, 3
  %2273 = call ptr @llvm.invariant.start.p0(i64 0, ptr %363)
  %2274 = call ptr @llvm.invariant.start.p0(i64 72, ptr %2265)
  %2275 = getelementptr ptr, ptr %2265, i32 %2271
  %2276 = getelementptr ptr, ptr %2275, i32 4
  %2277 = load ptr, ptr %2276, align 8
  %2278 = call ptr @behavior_wrapper(ptr %2277, { ptr, ptr, ptr, i32 } %2272, ptr %364)
  %2279 = call { ptr, i32 } %2278({ ptr, ptr, ptr, i32 } %2272, { ptr, ptr, ptr, i32 } %2272, ptr %363) #15
  store { ptr, i32 } %2279, ptr %365, align 8
  %2280 = load ptr, ptr %365, align 8
  %2281 = ptrtoint ptr %2280 to i64
  %2282 = icmp eq i64 %2281, ptrtoint (ptr @nil_typ to i64)
  %2283 = icmp eq i64 %2281, 0
  %2284 = or i1 %2282, %2283
  %2285 = icmp eq i1 %2284, false
  store i1 %2285, ptr %366, align 1
  %2286 = load i1, ptr %366, align 1
  br i1 %2286, label %2287, label %2312

2287:                                             ; preds = %2264
  %2288 = getelementptr { ptr, i32 }, ptr %365, i32 0, i32 1
  %2289 = load i32, ptr %2288, align 4
  store i32 %2289, ptr %367, align 4
  store i32 5, ptr %368, align 4
  %2290 = load i32, ptr %367, align 4
  %2291 = load i32, ptr %368, align 4
  %2292 = icmp eq i32 %2290, %2291
  store i1 %2292, ptr %369, align 1
  %2293 = load i1, ptr %369, align 1
  %2294 = xor i1 %2293, true
  %2295 = zext i1 %2294 to i32
  store i32 %2295, ptr %.reg2mem33, align 4
  br i1 %2293, label %2296, label %2297

2296:                                             ; preds = %2287
  br label %2311

2297:                                             ; preds = %2287
  %2298 = load i32, ptr %367, align 4
  store i32 %2298, ptr %370, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %372, align 4
  %2299 = load i64, ptr %372, align 4
  store i64 %2299, ptr %371, align 4
  %2300 = load ptr, ptr %371, align 8
  %2301 = insertvalue { ptr, i160 } undef, ptr %2300, 0
  %2302 = load i160, ptr %370, align 4
  %2303 = insertvalue { ptr, i160 } %2301, i160 %2302, 1
  %2304 = getelementptr [1 x ptr], ptr %373, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2304, align 8
  %2305 = call ptr @llvm.invariant.start.p0(i64 1, ptr %373)
  %2306 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2307 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2308 = getelementptr { ptr }, ptr %374, i32 0, i32 0
  store ptr %2300, ptr %2308, align 8
  %2309 = call ptr @class_behavior_wrapper(ptr %2307, ptr %374)
  call void %2309(ptr %373, { ptr, i160 } %2303) #15
  %2310 = load i32, ptr %367, align 4
  store i32 %2310, ptr %365, align 4
  br label %2311

2311:                                             ; preds = %2297, %2296
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  store i32 %.reload34, ptr %.reg2mem64, align 4
  br label %2313

2312:                                             ; preds = %2264
  store i32 0, ptr %.reg2mem64, align 4
  br label %2313

2313:                                             ; preds = %2312, %2311
  %.reload65 = load i32, ptr %.reg2mem64, align 4
  store i32 %.reload65, ptr %.reg2mem31, align 4
  br label %2314

2314:                                             ; preds = %2313
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  %2315 = trunc i32 %.reload32 to i1
  br i1 %2315, label %._crit_edge10, label %2316

._crit_edge10:                                    ; preds = %2314
  br label %2264

2316:                                             ; preds = %2314
  store i32 5, ptr %375, align 4
  %2317 = load i32, ptr %375, align 4
  %2318 = sext i32 %2317 to i64
  %2319 = mul i64 %2318, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %2320 = call ptr @bump_malloc(i64 %2319)
  store ptr %2320, ptr %376, align 8
  %2321 = getelementptr { ptr }, ptr %376, i32 0, i32 0
  %2322 = load ptr, ptr %2321, align 8
  store ptr %2322, ptr %377, align 8
  store i32 1, ptr %378, align 4
  store i32 0, ptr %379, align 4
  %2323 = load ptr, ptr %377, align 8
  %2324 = load i32, ptr %379, align 4
  %2325 = sext i32 %2324 to i64
  %2326 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2325
  %2327 = getelementptr i8, ptr %2323, i64 %2326
  %2328 = load i32, ptr %378, align 4
  store i32 %2328, ptr %2327, align 4
  store i32 2, ptr %380, align 4
  store i32 1, ptr %381, align 4
  %2329 = load ptr, ptr %377, align 8
  %2330 = load i32, ptr %381, align 4
  %2331 = sext i32 %2330 to i64
  %2332 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2331
  %2333 = getelementptr i8, ptr %2329, i64 %2332
  %2334 = load i32, ptr %380, align 4
  store i32 %2334, ptr %2333, align 4
  store i32 3, ptr %382, align 4
  store i32 2, ptr %383, align 4
  %2335 = load ptr, ptr %377, align 8
  %2336 = load i32, ptr %383, align 4
  %2337 = sext i32 %2336 to i64
  %2338 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2337
  %2339 = getelementptr i8, ptr %2335, i64 %2338
  %2340 = load i32, ptr %382, align 4
  store i32 %2340, ptr %2339, align 4
  store i32 4, ptr %384, align 4
  store i32 3, ptr %385, align 4
  %2341 = load ptr, ptr %377, align 8
  %2342 = load i32, ptr %385, align 4
  %2343 = sext i32 %2342 to i64
  %2344 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2343
  %2345 = getelementptr i8, ptr %2341, i64 %2344
  %2346 = load i32, ptr %384, align 4
  store i32 %2346, ptr %2345, align 4
  store i32 4, ptr %386, align 4
  store i32 5, ptr %387, align 4
  store ptr @IntArray, ptr %388, align 8
  %2347 = load ptr, ptr %388, align 8
  %2348 = getelementptr ptr, ptr %2347, i32 6
  %2349 = load ptr, ptr %2348, align 8
  %2350 = call { i64, i64 } @size_wrapper(ptr %2349, ptr %388)
  %2351 = extractvalue { i64, i64 } %2350, 0
  %2352 = call ptr @bump_malloc(i64 %2351)
  store ptr @IntArray, ptr %392, align 8
  store ptr %2352, ptr %391, align 8
  store i32 10, ptr %389, align 4
  store i32 4, ptr %393, align 4
  store i32 5, ptr %394, align 4
  %2353 = load ptr, ptr %377, align 8
  %2354 = insertvalue { ptr } undef, ptr %2353, 0
  %2355 = load i32, ptr %393, align 4
  %2356 = load i32, ptr %394, align 4
  %2357 = load ptr, ptr %392, align 8
  %2358 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2357, 0
  %2359 = load ptr, ptr %391, align 8
  %2360 = insertvalue { ptr, ptr, ptr, i32 } %2358, ptr %2359, 1
  %2361 = load ptr, ptr %390, align 8
  %2362 = insertvalue { ptr, ptr, ptr, i32 } %2360, ptr %2361, 2
  %2363 = load i32, ptr %389, align 4
  %2364 = insertvalue { ptr, ptr, ptr, i32 } %2362, i32 %2363, 3
  %2365 = getelementptr [3 x ptr], ptr %395, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2365, align 8
  %2366 = getelementptr [3 x ptr], ptr %395, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2366, align 8
  %2367 = getelementptr [3 x ptr], ptr %395, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2367, align 8
  %2368 = call ptr @llvm.invariant.start.p0(i64 9, ptr %395)
  %2369 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2357)
  %2370 = getelementptr ptr, ptr %2357, i32 %2363
  %2371 = getelementptr ptr, ptr %2370, i32 5
  %2372 = load ptr, ptr %2371, align 8
  %2373 = getelementptr { ptr, ptr, ptr }, ptr %396, i32 0, i32 0
  store ptr @buffer_typ, ptr %2373, align 8
  %2374 = getelementptr { ptr, ptr, ptr }, ptr %396, i32 0, i32 1
  store ptr @i32_typ, ptr %2374, align 8
  %2375 = getelementptr { ptr, ptr, ptr }, ptr %396, i32 0, i32 2
  store ptr @i32_typ, ptr %2375, align 8
  %2376 = call ptr @behavior_wrapper(ptr %2372, { ptr, ptr, ptr, i32 } %2364, ptr %396)
  call void %2376({ ptr, ptr, ptr, i32 } %2364, { ptr, ptr, ptr, i32 } %2364, ptr %395, { ptr } %2354, i32 %2355, i32 %2356) #15
  %2377 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 0
  %2378 = load ptr, ptr %392, align 8
  store ptr %2378, ptr %2377, align 8
  %2379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 1
  %2380 = load ptr, ptr %391, align 8
  store ptr %2380, ptr %2379, align 8
  %2381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 2
  %2382 = load ptr, ptr %390, align 8
  store ptr %2382, ptr %2381, align 8
  %2383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 3
  %2384 = load i32, ptr %389, align 4
  store i32 %2384, ptr %2383, align 4
  call void @set_offset(ptr %397, ptr @IntArray)
  %2385 = load ptr, ptr %2377, align 8
  store ptr %2385, ptr %401, align 8
  %2386 = load ptr, ptr %2379, align 8
  store ptr %2386, ptr %400, align 8
  %2387 = load ptr, ptr %2381, align 8
  store ptr %2387, ptr %399, align 8
  %2388 = load i32, ptr %2383, align 4
  store i32 %2388, ptr %398, align 4
  store i32 7, ptr %402, align 4
  %2389 = load i32, ptr %402, align 4
  %2390 = sext i32 %2389 to i64
  %2391 = mul i64 %2390, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %2392 = call ptr @bump_malloc(i64 %2391)
  store ptr %2392, ptr %403, align 8
  %2393 = getelementptr { ptr }, ptr %403, i32 0, i32 0
  %2394 = load ptr, ptr %2393, align 8
  store ptr %2394, ptr %404, align 8
  store i32 5, ptr %405, align 4
  store i32 0, ptr %406, align 4
  %2395 = load ptr, ptr %404, align 8
  %2396 = load i32, ptr %406, align 4
  %2397 = sext i32 %2396 to i64
  %2398 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2397
  %2399 = getelementptr i8, ptr %2395, i64 %2398
  %2400 = load i32, ptr %405, align 4
  store i32 %2400, ptr %2399, align 4
  store i32 6, ptr %407, align 4
  store i32 1, ptr %408, align 4
  %2401 = load ptr, ptr %404, align 8
  %2402 = load i32, ptr %408, align 4
  %2403 = sext i32 %2402 to i64
  %2404 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2403
  %2405 = getelementptr i8, ptr %2401, i64 %2404
  %2406 = load i32, ptr %407, align 4
  store i32 %2406, ptr %2405, align 4
  store i32 7, ptr %409, align 4
  store i32 2, ptr %410, align 4
  %2407 = load ptr, ptr %404, align 8
  %2408 = load i32, ptr %410, align 4
  %2409 = sext i32 %2408 to i64
  %2410 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2409
  %2411 = getelementptr i8, ptr %2407, i64 %2410
  %2412 = load i32, ptr %409, align 4
  store i32 %2412, ptr %2411, align 4
  store i32 8, ptr %411, align 4
  store i32 3, ptr %412, align 4
  %2413 = load ptr, ptr %404, align 8
  %2414 = load i32, ptr %412, align 4
  %2415 = sext i32 %2414 to i64
  %2416 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2415
  %2417 = getelementptr i8, ptr %2413, i64 %2416
  %2418 = load i32, ptr %411, align 4
  store i32 %2418, ptr %2417, align 4
  store i32 9, ptr %413, align 4
  store i32 4, ptr %414, align 4
  %2419 = load ptr, ptr %404, align 8
  %2420 = load i32, ptr %414, align 4
  %2421 = sext i32 %2420 to i64
  %2422 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2421
  %2423 = getelementptr i8, ptr %2419, i64 %2422
  %2424 = load i32, ptr %413, align 4
  store i32 %2424, ptr %2423, align 4
  store i32 10, ptr %415, align 4
  store i32 5, ptr %416, align 4
  %2425 = load ptr, ptr %404, align 8
  %2426 = load i32, ptr %416, align 4
  %2427 = sext i32 %2426 to i64
  %2428 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2427
  %2429 = getelementptr i8, ptr %2425, i64 %2428
  %2430 = load i32, ptr %415, align 4
  store i32 %2430, ptr %2429, align 4
  store i32 6, ptr %417, align 4
  store i32 7, ptr %418, align 4
  store ptr @IntArray, ptr %419, align 8
  %2431 = load ptr, ptr %419, align 8
  %2432 = getelementptr ptr, ptr %2431, i32 6
  %2433 = load ptr, ptr %2432, align 8
  %2434 = call { i64, i64 } @size_wrapper(ptr %2433, ptr %419)
  %2435 = extractvalue { i64, i64 } %2434, 0
  %2436 = call ptr @bump_malloc(i64 %2435)
  store ptr @IntArray, ptr %423, align 8
  store ptr %2436, ptr %422, align 8
  store i32 10, ptr %420, align 4
  store i32 6, ptr %424, align 4
  store i32 7, ptr %425, align 4
  %2437 = load ptr, ptr %404, align 8
  %2438 = insertvalue { ptr } undef, ptr %2437, 0
  %2439 = load i32, ptr %424, align 4
  %2440 = load i32, ptr %425, align 4
  %2441 = load ptr, ptr %423, align 8
  %2442 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2441, 0
  %2443 = load ptr, ptr %422, align 8
  %2444 = insertvalue { ptr, ptr, ptr, i32 } %2442, ptr %2443, 1
  %2445 = load ptr, ptr %421, align 8
  %2446 = insertvalue { ptr, ptr, ptr, i32 } %2444, ptr %2445, 2
  %2447 = load i32, ptr %420, align 4
  %2448 = insertvalue { ptr, ptr, ptr, i32 } %2446, i32 %2447, 3
  %2449 = getelementptr [3 x ptr], ptr %426, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2449, align 8
  %2450 = getelementptr [3 x ptr], ptr %426, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2450, align 8
  %2451 = getelementptr [3 x ptr], ptr %426, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2451, align 8
  %2452 = call ptr @llvm.invariant.start.p0(i64 9, ptr %426)
  %2453 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2441)
  %2454 = getelementptr ptr, ptr %2441, i32 %2447
  %2455 = getelementptr ptr, ptr %2454, i32 5
  %2456 = load ptr, ptr %2455, align 8
  %2457 = getelementptr { ptr, ptr, ptr }, ptr %427, i32 0, i32 0
  store ptr @buffer_typ, ptr %2457, align 8
  %2458 = getelementptr { ptr, ptr, ptr }, ptr %427, i32 0, i32 1
  store ptr @i32_typ, ptr %2458, align 8
  %2459 = getelementptr { ptr, ptr, ptr }, ptr %427, i32 0, i32 2
  store ptr @i32_typ, ptr %2459, align 8
  %2460 = call ptr @behavior_wrapper(ptr %2456, { ptr, ptr, ptr, i32 } %2448, ptr %427)
  call void %2460({ ptr, ptr, ptr, i32 } %2448, { ptr, ptr, ptr, i32 } %2448, ptr %426, { ptr } %2438, i32 %2439, i32 %2440) #15
  %2461 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 0
  %2462 = load ptr, ptr %423, align 8
  store ptr %2462, ptr %2461, align 8
  %2463 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 1
  %2464 = load ptr, ptr %422, align 8
  store ptr %2464, ptr %2463, align 8
  %2465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 2
  %2466 = load ptr, ptr %421, align 8
  store ptr %2466, ptr %2465, align 8
  %2467 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 3
  %2468 = load i32, ptr %420, align 4
  store i32 %2468, ptr %2467, align 4
  call void @set_offset(ptr %428, ptr @IntArray)
  %2469 = load ptr, ptr %2461, align 8
  %2470 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2469, 0
  %2471 = load ptr, ptr %2463, align 8
  %2472 = insertvalue { ptr, ptr, ptr, i32 } %2470, ptr %2471, 1
  %2473 = load ptr, ptr %2465, align 8
  %2474 = insertvalue { ptr, ptr, ptr, i32 } %2472, ptr %2473, 2
  %2475 = load i32, ptr %2467, align 4
  %2476 = insertvalue { ptr, ptr, ptr, i32 } %2474, i32 %2475, 3
  %2477 = load ptr, ptr %401, align 8
  %2478 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2477, 0
  %2479 = load ptr, ptr %400, align 8
  %2480 = insertvalue { ptr, ptr, ptr, i32 } %2478, ptr %2479, 1
  %2481 = load ptr, ptr %399, align 8
  %2482 = insertvalue { ptr, ptr, ptr, i32 } %2480, ptr %2481, 2
  %2483 = load i32, ptr %398, align 4
  %2484 = insertvalue { ptr, ptr, ptr, i32 } %2482, i32 %2483, 3
  %2485 = getelementptr [1 x ptr], ptr %429, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %2485, align 8
  %2486 = call ptr @llvm.invariant.start.p0(i64 1, ptr %429)
  %2487 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2477)
  %2488 = getelementptr ptr, ptr %2477, i32 %2483
  %2489 = getelementptr ptr, ptr %2488, i32 10
  %2490 = load ptr, ptr %2489, align 8
  %2491 = getelementptr { ptr }, ptr %430, i32 0, i32 0
  store ptr %2469, ptr %2491, align 8
  %2492 = call ptr @behavior_wrapper(ptr %2490, { ptr, ptr, ptr, i32 } %2484, ptr %430)
  %2493 = call { ptr, ptr, ptr, i32 } %2492({ ptr, ptr, ptr, i32 } %2484, { ptr, ptr, ptr, i32 } %2484, ptr %429, { ptr, ptr, ptr, i32 } %2476) #15
  store { ptr, ptr, ptr, i32 } %2493, ptr %431, align 8
  %2494 = getelementptr { ptr, ptr, ptr, i32 }, ptr %431, i32 0, i32 0
  %2495 = getelementptr { ptr, ptr, ptr, i32 }, ptr %432, i32 0, i32 0
  %2496 = load ptr, ptr %2494, align 8
  store ptr %2496, ptr %2495, align 8
  %2497 = getelementptr { ptr, ptr, ptr, i32 }, ptr %431, i32 0, i32 1
  %2498 = getelementptr { ptr, ptr, ptr, i32 }, ptr %432, i32 0, i32 1
  %2499 = load ptr, ptr %2497, align 8
  store ptr %2499, ptr %2498, align 8
  %2500 = getelementptr { ptr, ptr, ptr, i32 }, ptr %431, i32 0, i32 2
  %2501 = getelementptr { ptr, ptr, ptr, i32 }, ptr %432, i32 0, i32 2
  %2502 = load ptr, ptr %2500, align 8
  store ptr %2502, ptr %2501, align 8
  %2503 = getelementptr { ptr, ptr, ptr, i32 }, ptr %431, i32 0, i32 3
  %2504 = getelementptr { ptr, ptr, ptr, i32 }, ptr %432, i32 0, i32 3
  %2505 = load i32, ptr %2503, align 4
  store i32 %2505, ptr %2504, align 4
  call void @set_offset(ptr %432, ptr @IntArray)
  store i32 7, ptr %433, align 4
  %2506 = load i32, ptr %433, align 4
  %2507 = load ptr, ptr %401, align 8
  %2508 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2507, 0
  %2509 = load ptr, ptr %400, align 8
  %2510 = insertvalue { ptr, ptr, ptr, i32 } %2508, ptr %2509, 1
  %2511 = load ptr, ptr %399, align 8
  %2512 = insertvalue { ptr, ptr, ptr, i32 } %2510, ptr %2511, 2
  %2513 = load i32, ptr %398, align 4
  %2514 = insertvalue { ptr, ptr, ptr, i32 } %2512, i32 %2513, 3
  %2515 = getelementptr [1 x ptr], ptr %434, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2515, align 8
  %2516 = call ptr @llvm.invariant.start.p0(i64 1, ptr %434)
  %2517 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2507)
  %2518 = getelementptr ptr, ptr %2507, i32 %2513
  %2519 = getelementptr ptr, ptr %2518, i32 11
  %2520 = load ptr, ptr %2519, align 8
  %2521 = getelementptr { ptr }, ptr %435, i32 0, i32 0
  store ptr @i32_typ, ptr %2521, align 8
  %2522 = call ptr @behavior_wrapper(ptr %2520, { ptr, ptr, ptr, i32 } %2514, ptr %435)
  %2523 = call i32 %2522({ ptr, ptr, ptr, i32 } %2514, { ptr, ptr, ptr, i32 } %2514, ptr %434, i32 %2506) #15
  store i32 %2523, ptr %436, align 4
  %2524 = load i32, ptr %436, align 4
  store i32 %2524, ptr %437, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %439, align 4
  %2525 = load i64, ptr %439, align 4
  store i64 %2525, ptr %438, align 4
  %2526 = load ptr, ptr %438, align 8
  %2527 = insertvalue { ptr, i160 } undef, ptr %2526, 0
  %2528 = load i160, ptr %437, align 4
  %2529 = insertvalue { ptr, i160 } %2527, i160 %2528, 1
  %2530 = getelementptr [1 x ptr], ptr %440, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2530, align 8
  %2531 = call ptr @llvm.invariant.start.p0(i64 1, ptr %440)
  %2532 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2533 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2534 = getelementptr { ptr }, ptr %441, i32 0, i32 0
  store ptr %2526, ptr %2534, align 8
  %2535 = call ptr @class_behavior_wrapper(ptr %2533, ptr %441)
  call void %2535(ptr %440, { ptr, i160 } %2529) #15
  store i32 1, ptr %442, align 4
  %2536 = load i32, ptr %442, align 4
  %2537 = sext i32 %2536 to i64
  %2538 = mul i64 %2537, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %2539 = call ptr @bump_malloc(i64 %2538)
  store ptr %2539, ptr %443, align 8
  %2540 = getelementptr { ptr }, ptr %443, i32 0, i32 0
  %2541 = load ptr, ptr %2540, align 8
  store ptr %2541, ptr %444, align 8
  store i32 0, ptr %445, align 4
  store i32 1, ptr %446, align 4
  store ptr @IntArray, ptr %447, align 8
  %2542 = load ptr, ptr %447, align 8
  %2543 = getelementptr ptr, ptr %2542, i32 6
  %2544 = load ptr, ptr %2543, align 8
  %2545 = call { i64, i64 } @size_wrapper(ptr %2544, ptr %447)
  %2546 = extractvalue { i64, i64 } %2545, 0
  %2547 = call ptr @bump_malloc(i64 %2546)
  store ptr @IntArray, ptr %451, align 8
  store ptr %2547, ptr %450, align 8
  store i32 10, ptr %448, align 4
  store i32 0, ptr %452, align 4
  store i32 1, ptr %453, align 4
  %2548 = load ptr, ptr %444, align 8
  %2549 = insertvalue { ptr } undef, ptr %2548, 0
  %2550 = load i32, ptr %452, align 4
  %2551 = load i32, ptr %453, align 4
  %2552 = load ptr, ptr %451, align 8
  %2553 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2552, 0
  %2554 = load ptr, ptr %450, align 8
  %2555 = insertvalue { ptr, ptr, ptr, i32 } %2553, ptr %2554, 1
  %2556 = load ptr, ptr %449, align 8
  %2557 = insertvalue { ptr, ptr, ptr, i32 } %2555, ptr %2556, 2
  %2558 = load i32, ptr %448, align 4
  %2559 = insertvalue { ptr, ptr, ptr, i32 } %2557, i32 %2558, 3
  %2560 = getelementptr [3 x ptr], ptr %454, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2560, align 8
  %2561 = getelementptr [3 x ptr], ptr %454, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2561, align 8
  %2562 = getelementptr [3 x ptr], ptr %454, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2562, align 8
  %2563 = call ptr @llvm.invariant.start.p0(i64 9, ptr %454)
  %2564 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2552)
  %2565 = getelementptr ptr, ptr %2552, i32 %2558
  %2566 = getelementptr ptr, ptr %2565, i32 5
  %2567 = load ptr, ptr %2566, align 8
  %2568 = getelementptr { ptr, ptr, ptr }, ptr %455, i32 0, i32 0
  store ptr @buffer_typ, ptr %2568, align 8
  %2569 = getelementptr { ptr, ptr, ptr }, ptr %455, i32 0, i32 1
  store ptr @i32_typ, ptr %2569, align 8
  %2570 = getelementptr { ptr, ptr, ptr }, ptr %455, i32 0, i32 2
  store ptr @i32_typ, ptr %2570, align 8
  %2571 = call ptr @behavior_wrapper(ptr %2567, { ptr, ptr, ptr, i32 } %2559, ptr %455)
  call void %2571({ ptr, ptr, ptr, i32 } %2559, { ptr, ptr, ptr, i32 } %2559, ptr %454, { ptr } %2549, i32 %2550, i32 %2551) #15
  %2572 = getelementptr { ptr, ptr, ptr, i32 }, ptr %456, i32 0, i32 0
  %2573 = load ptr, ptr %451, align 8
  store ptr %2573, ptr %2572, align 8
  %2574 = getelementptr { ptr, ptr, ptr, i32 }, ptr %456, i32 0, i32 1
  %2575 = load ptr, ptr %450, align 8
  store ptr %2575, ptr %2574, align 8
  %2576 = getelementptr { ptr, ptr, ptr, i32 }, ptr %456, i32 0, i32 2
  %2577 = load ptr, ptr %449, align 8
  store ptr %2577, ptr %2576, align 8
  %2578 = getelementptr { ptr, ptr, ptr, i32 }, ptr %456, i32 0, i32 3
  %2579 = load i32, ptr %448, align 4
  store i32 %2579, ptr %2578, align 4
  call void @set_offset(ptr %456, ptr @IntArray)
  %2580 = load ptr, ptr %2572, align 8
  store ptr %2580, ptr %460, align 8
  %2581 = load ptr, ptr %2574, align 8
  store ptr %2581, ptr %459, align 8
  %2582 = load ptr, ptr %2576, align 8
  store ptr %2582, ptr %458, align 8
  %2583 = load i32, ptr %2578, align 4
  store i32 %2583, ptr %457, align 4
  store i32 5, ptr %461, align 4
  %2584 = load i32, ptr %461, align 4
  %2585 = sext i32 %2584 to i64
  %2586 = mul i64 %2585, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %2587 = call ptr @bump_malloc(i64 %2586)
  store ptr %2587, ptr %462, align 8
  %2588 = getelementptr { ptr }, ptr %462, i32 0, i32 0
  %2589 = load ptr, ptr %2588, align 8
  store ptr %2589, ptr %463, align 8
  store i32 8, ptr %464, align 4
  store i32 0, ptr %465, align 4
  %2590 = load ptr, ptr %463, align 8
  %2591 = load i32, ptr %465, align 4
  %2592 = sext i32 %2591 to i64
  %2593 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2592
  %2594 = getelementptr i8, ptr %2590, i64 %2593
  %2595 = load i32, ptr %464, align 4
  store i32 %2595, ptr %2594, align 4
  store i32 7, ptr %466, align 4
  store i32 1, ptr %467, align 4
  %2596 = load ptr, ptr %463, align 8
  %2597 = load i32, ptr %467, align 4
  %2598 = sext i32 %2597 to i64
  %2599 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2598
  %2600 = getelementptr i8, ptr %2596, i64 %2599
  %2601 = load i32, ptr %466, align 4
  store i32 %2601, ptr %2600, align 4
  store i32 6, ptr %468, align 4
  store i32 2, ptr %469, align 4
  %2602 = load ptr, ptr %463, align 8
  %2603 = load i32, ptr %469, align 4
  %2604 = sext i32 %2603 to i64
  %2605 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2604
  %2606 = getelementptr i8, ptr %2602, i64 %2605
  %2607 = load i32, ptr %468, align 4
  store i32 %2607, ptr %2606, align 4
  store i32 5, ptr %470, align 4
  store i32 3, ptr %471, align 4
  %2608 = load ptr, ptr %463, align 8
  %2609 = load i32, ptr %471, align 4
  %2610 = sext i32 %2609 to i64
  %2611 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2610
  %2612 = getelementptr i8, ptr %2608, i64 %2611
  %2613 = load i32, ptr %470, align 4
  store i32 %2613, ptr %2612, align 4
  store i32 4, ptr %472, align 4
  store i32 5, ptr %473, align 4
  store ptr @IntArray, ptr %474, align 8
  %2614 = load ptr, ptr %474, align 8
  %2615 = getelementptr ptr, ptr %2614, i32 6
  %2616 = load ptr, ptr %2615, align 8
  %2617 = call { i64, i64 } @size_wrapper(ptr %2616, ptr %474)
  %2618 = extractvalue { i64, i64 } %2617, 0
  %2619 = call ptr @bump_malloc(i64 %2618)
  store ptr @IntArray, ptr %478, align 8
  store ptr %2619, ptr %477, align 8
  store i32 10, ptr %475, align 4
  store i32 4, ptr %479, align 4
  store i32 5, ptr %480, align 4
  %2620 = load ptr, ptr %463, align 8
  %2621 = insertvalue { ptr } undef, ptr %2620, 0
  %2622 = load i32, ptr %479, align 4
  %2623 = load i32, ptr %480, align 4
  %2624 = load ptr, ptr %478, align 8
  %2625 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2624, 0
  %2626 = load ptr, ptr %477, align 8
  %2627 = insertvalue { ptr, ptr, ptr, i32 } %2625, ptr %2626, 1
  %2628 = load ptr, ptr %476, align 8
  %2629 = insertvalue { ptr, ptr, ptr, i32 } %2627, ptr %2628, 2
  %2630 = load i32, ptr %475, align 4
  %2631 = insertvalue { ptr, ptr, ptr, i32 } %2629, i32 %2630, 3
  %2632 = getelementptr [3 x ptr], ptr %481, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2632, align 8
  %2633 = getelementptr [3 x ptr], ptr %481, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2633, align 8
  %2634 = getelementptr [3 x ptr], ptr %481, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2634, align 8
  %2635 = call ptr @llvm.invariant.start.p0(i64 9, ptr %481)
  %2636 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2624)
  %2637 = getelementptr ptr, ptr %2624, i32 %2630
  %2638 = getelementptr ptr, ptr %2637, i32 5
  %2639 = load ptr, ptr %2638, align 8
  %2640 = getelementptr { ptr, ptr, ptr }, ptr %482, i32 0, i32 0
  store ptr @buffer_typ, ptr %2640, align 8
  %2641 = getelementptr { ptr, ptr, ptr }, ptr %482, i32 0, i32 1
  store ptr @i32_typ, ptr %2641, align 8
  %2642 = getelementptr { ptr, ptr, ptr }, ptr %482, i32 0, i32 2
  store ptr @i32_typ, ptr %2642, align 8
  %2643 = call ptr @behavior_wrapper(ptr %2639, { ptr, ptr, ptr, i32 } %2631, ptr %482)
  call void %2643({ ptr, ptr, ptr, i32 } %2631, { ptr, ptr, ptr, i32 } %2631, ptr %481, { ptr } %2621, i32 %2622, i32 %2623) #15
  %2644 = getelementptr { ptr, ptr, ptr, i32 }, ptr %483, i32 0, i32 0
  %2645 = load ptr, ptr %478, align 8
  store ptr %2645, ptr %2644, align 8
  %2646 = getelementptr { ptr, ptr, ptr, i32 }, ptr %483, i32 0, i32 1
  %2647 = load ptr, ptr %477, align 8
  store ptr %2647, ptr %2646, align 8
  %2648 = getelementptr { ptr, ptr, ptr, i32 }, ptr %483, i32 0, i32 2
  %2649 = load ptr, ptr %476, align 8
  store ptr %2649, ptr %2648, align 8
  %2650 = getelementptr { ptr, ptr, ptr, i32 }, ptr %483, i32 0, i32 3
  %2651 = load i32, ptr %475, align 4
  store i32 %2651, ptr %2650, align 4
  call void @set_offset(ptr %483, ptr @IntArray)
  %2652 = load ptr, ptr %2644, align 8
  %2653 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2652, 0
  %2654 = load ptr, ptr %2646, align 8
  %2655 = insertvalue { ptr, ptr, ptr, i32 } %2653, ptr %2654, 1
  %2656 = load ptr, ptr %2648, align 8
  %2657 = insertvalue { ptr, ptr, ptr, i32 } %2655, ptr %2656, 2
  %2658 = load i32, ptr %2650, align 4
  %2659 = insertvalue { ptr, ptr, ptr, i32 } %2657, i32 %2658, 3
  %2660 = load ptr, ptr %460, align 8
  %2661 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2660, 0
  %2662 = load ptr, ptr %459, align 8
  %2663 = insertvalue { ptr, ptr, ptr, i32 } %2661, ptr %2662, 1
  %2664 = load ptr, ptr %458, align 8
  %2665 = insertvalue { ptr, ptr, ptr, i32 } %2663, ptr %2664, 2
  %2666 = load i32, ptr %457, align 4
  %2667 = insertvalue { ptr, ptr, ptr, i32 } %2665, i32 %2666, 3
  %2668 = getelementptr [1 x ptr], ptr %484, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %2668, align 8
  %2669 = call ptr @llvm.invariant.start.p0(i64 1, ptr %484)
  %2670 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2660)
  %2671 = getelementptr ptr, ptr %2660, i32 %2666
  %2672 = getelementptr ptr, ptr %2671, i32 10
  %2673 = load ptr, ptr %2672, align 8
  %2674 = getelementptr { ptr }, ptr %485, i32 0, i32 0
  store ptr %2652, ptr %2674, align 8
  %2675 = call ptr @behavior_wrapper(ptr %2673, { ptr, ptr, ptr, i32 } %2667, ptr %485)
  %2676 = call { ptr, ptr, ptr, i32 } %2675({ ptr, ptr, ptr, i32 } %2667, { ptr, ptr, ptr, i32 } %2667, ptr %484, { ptr, ptr, ptr, i32 } %2659) #15
  store { ptr, ptr, ptr, i32 } %2676, ptr %486, align 8
  %2677 = getelementptr { ptr, ptr, ptr, i32 }, ptr %486, i32 0, i32 0
  %2678 = getelementptr { ptr, ptr, ptr, i32 }, ptr %487, i32 0, i32 0
  %2679 = load ptr, ptr %2677, align 8
  store ptr %2679, ptr %2678, align 8
  %2680 = getelementptr { ptr, ptr, ptr, i32 }, ptr %486, i32 0, i32 1
  %2681 = getelementptr { ptr, ptr, ptr, i32 }, ptr %487, i32 0, i32 1
  %2682 = load ptr, ptr %2680, align 8
  store ptr %2682, ptr %2681, align 8
  %2683 = getelementptr { ptr, ptr, ptr, i32 }, ptr %486, i32 0, i32 2
  %2684 = getelementptr { ptr, ptr, ptr, i32 }, ptr %487, i32 0, i32 2
  %2685 = load ptr, ptr %2683, align 8
  store ptr %2685, ptr %2684, align 8
  %2686 = getelementptr { ptr, ptr, ptr, i32 }, ptr %486, i32 0, i32 3
  %2687 = getelementptr { ptr, ptr, ptr, i32 }, ptr %487, i32 0, i32 3
  %2688 = load i32, ptr %2686, align 4
  store i32 %2688, ptr %2687, align 4
  call void @set_offset(ptr %487, ptr @IntArray)
  store i32 3, ptr %488, align 4
  %2689 = load i32, ptr %488, align 4
  %2690 = load ptr, ptr %460, align 8
  %2691 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2690, 0
  %2692 = load ptr, ptr %459, align 8
  %2693 = insertvalue { ptr, ptr, ptr, i32 } %2691, ptr %2692, 1
  %2694 = load ptr, ptr %458, align 8
  %2695 = insertvalue { ptr, ptr, ptr, i32 } %2693, ptr %2694, 2
  %2696 = load i32, ptr %457, align 4
  %2697 = insertvalue { ptr, ptr, ptr, i32 } %2695, i32 %2696, 3
  %2698 = getelementptr [1 x ptr], ptr %489, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2698, align 8
  %2699 = call ptr @llvm.invariant.start.p0(i64 1, ptr %489)
  %2700 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2690)
  %2701 = getelementptr ptr, ptr %2690, i32 %2696
  %2702 = getelementptr ptr, ptr %2701, i32 11
  %2703 = load ptr, ptr %2702, align 8
  %2704 = getelementptr { ptr }, ptr %490, i32 0, i32 0
  store ptr @i32_typ, ptr %2704, align 8
  %2705 = call ptr @behavior_wrapper(ptr %2703, { ptr, ptr, ptr, i32 } %2697, ptr %490)
  %2706 = call i32 %2705({ ptr, ptr, ptr, i32 } %2697, { ptr, ptr, ptr, i32 } %2697, ptr %489, i32 %2689) #15
  store i32 %2706, ptr %491, align 4
  %2707 = load i32, ptr %491, align 4
  store i32 %2707, ptr %492, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %494, align 4
  %2708 = load i64, ptr %494, align 4
  store i64 %2708, ptr %493, align 4
  %2709 = load ptr, ptr %493, align 8
  %2710 = insertvalue { ptr, i160 } undef, ptr %2709, 0
  %2711 = load i160, ptr %492, align 4
  %2712 = insertvalue { ptr, i160 } %2710, i160 %2711, 1
  %2713 = getelementptr [1 x ptr], ptr %495, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2713, align 8
  %2714 = call ptr @llvm.invariant.start.p0(i64 1, ptr %495)
  %2715 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2716 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2717 = getelementptr { ptr }, ptr %496, i32 0, i32 0
  store ptr %2709, ptr %2717, align 8
  %2718 = call ptr @class_behavior_wrapper(ptr %2716, ptr %496)
  call void %2718(ptr %495, { ptr, i160 } %2712) #15
  call void @grabo()
  %2719 = load ptr, ptr %401, align 8
  %2720 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2719, i32 0, i32 0, i32 1
  %2721 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2719, i32 0, i32 0, i32 2
  %2722 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2719, i32 0, i32 1, i32 0
  %2723 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2719, i32 0, i32 1, i32 1
  %2724 = load i64, ptr %2720, align 4
  %2725 = load i64, ptr %2721, align 4
  %2726 = load ptr, ptr %2722, align 8
  %2727 = load ptr, ptr %2723, align 8
  %2728 = load i64, ptr @IntArray, align 4
  %2729 = call i1 @subtype_test_wrapper(ptr %2726, i64 %2725, i64 %2724, i64 %2728, i64 ptrtoint (ptr @IntArray to i64), ptr %2727)
  store i1 %2729, ptr %497, align 1
  %2730 = load i1, ptr %497, align 1
  store i1 %2730, ptr %498, align 1
  br i1 %2730, label %2731, label %._crit_edge11

._crit_edge11:                                    ; preds = %2316
  br label %2754

2731:                                             ; preds = %2316
  store i32 0, ptr %499, align 4
  %2732 = load i32, ptr %499, align 4
  %2733 = load ptr, ptr %401, align 8
  %2734 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2733, 0
  %2735 = load ptr, ptr %400, align 8
  %2736 = insertvalue { ptr, ptr, ptr, i32 } %2734, ptr %2735, 1
  %2737 = load ptr, ptr %399, align 8
  %2738 = insertvalue { ptr, ptr, ptr, i32 } %2736, ptr %2737, 2
  %2739 = load i32, ptr %398, align 4
  %2740 = insertvalue { ptr, ptr, ptr, i32 } %2738, i32 %2739, 3
  %2741 = getelementptr [1 x ptr], ptr %500, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2741, align 8
  %2742 = call ptr @llvm.invariant.start.p0(i64 1, ptr %500)
  %2743 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2733)
  %2744 = getelementptr ptr, ptr %2733, i32 %2739
  %2745 = getelementptr ptr, ptr %2744, i32 11
  %2746 = load ptr, ptr %2745, align 8
  %2747 = getelementptr { ptr }, ptr %501, i32 0, i32 0
  store ptr @i32_typ, ptr %2747, align 8
  %2748 = call ptr @behavior_wrapper(ptr %2746, { ptr, ptr, ptr, i32 } %2740, ptr %501)
  %2749 = call i32 %2748({ ptr, ptr, ptr, i32 } %2740, { ptr, ptr, ptr, i32 } %2740, ptr %500, i32 %2732) #15
  store i32 %2749, ptr %502, align 4
  store i32 5, ptr %503, align 4
  %2750 = load i32, ptr %502, align 4
  %2751 = load i32, ptr %503, align 4
  %2752 = icmp eq i32 %2750, %2751
  store i1 %2752, ptr %504, align 1
  %2753 = load i1, ptr %504, align 1
  store i1 %2753, ptr %498, align 1
  br label %2754

2754:                                             ; preds = %._crit_edge11, %2731
  %2755 = load i1, ptr %498, align 1
  store i1 %2755, ptr %505, align 1
  %2756 = load i1, ptr %505, align 1
  br i1 %2756, label %2757, label %._crit_edge12

._crit_edge12:                                    ; preds = %2754
  br label %2816

2757:                                             ; preds = %2754
  store i32 15, ptr %506, align 4
  %2758 = load i32, ptr %506, align 4
  %2759 = sext i32 %2758 to i64
  %2760 = mul i64 %2759, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %2761 = call ptr @bump_malloc(i64 %2760)
  store ptr %2761, ptr %507, align 8
  %2762 = getelementptr { ptr }, ptr %507, i32 0, i32 0
  %2763 = load ptr, ptr %2762, align 8
  store ptr %2763, ptr %508, align 8
  store i32 0, ptr %509, align 4
  %2764 = load ptr, ptr %508, align 8
  %2765 = load i32, ptr %509, align 4
  %2766 = sext i32 %2765 to i64
  %2767 = mul i64 ptrtoint (ptr getelementptr ([14 x i8], ptr null, i32 1) to i64), %2766
  %2768 = getelementptr i8, ptr %2764, i64 %2767
  %2769 = load <14 x i8>, ptr @wntye_so_it_is_true, align 16
  store <14 x i8> %2769, ptr %2768, align 16
  store i32 14, ptr %510, align 4
  store i32 15, ptr %511, align 4
  store ptr @String, ptr %512, align 8
  %2770 = load ptr, ptr %512, align 8
  %2771 = getelementptr ptr, ptr %2770, i32 6
  %2772 = load ptr, ptr %2771, align 8
  %2773 = call { i64, i64 } @size_wrapper(ptr %2772, ptr %512)
  %2774 = extractvalue { i64, i64 } %2773, 0
  %2775 = call ptr @bump_malloc(i64 %2774)
  %2776 = getelementptr { ptr, ptr, ptr, i32 }, ptr %513, i32 0, i32 1
  %2777 = getelementptr { ptr, ptr, ptr, i32 }, ptr %513, i32 0, i32 3
  store ptr @String, ptr %513, align 8
  store ptr %2775, ptr %2776, align 8
  store i32 10, ptr %2777, align 4
  store i32 14, ptr %514, align 4
  store i32 15, ptr %515, align 4
  %2778 = load ptr, ptr %508, align 8
  %2779 = insertvalue { ptr } undef, ptr %2778, 0
  %2780 = load i32, ptr %514, align 4
  %2781 = load i32, ptr %515, align 4
  %2782 = getelementptr { ptr, ptr, ptr, i32 }, ptr %513, i32 0, i32 0
  %2783 = load ptr, ptr %2782, align 8
  %2784 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2783, 0
  %2785 = load ptr, ptr %2776, align 8
  %2786 = insertvalue { ptr, ptr, ptr, i32 } %2784, ptr %2785, 1
  %2787 = getelementptr { ptr, ptr, ptr, i32 }, ptr %513, i32 0, i32 2
  %2788 = load ptr, ptr %2787, align 8
  %2789 = insertvalue { ptr, ptr, ptr, i32 } %2786, ptr %2788, 2
  %2790 = load i32, ptr %2777, align 4
  %2791 = insertvalue { ptr, ptr, ptr, i32 } %2789, i32 %2790, 3
  %2792 = getelementptr [3 x ptr], ptr %516, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %2792, align 8
  %2793 = getelementptr [3 x ptr], ptr %516, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2793, align 8
  %2794 = getelementptr [3 x ptr], ptr %516, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2794, align 8
  %2795 = call ptr @llvm.invariant.start.p0(i64 9, ptr %516)
  %2796 = call ptr @llvm.invariant.start.p0(i64 280, ptr %2783)
  %2797 = getelementptr ptr, ptr %2783, i32 %2790
  %2798 = getelementptr ptr, ptr %2797, i32 4
  %2799 = load ptr, ptr %2798, align 8
  %2800 = getelementptr { ptr, ptr, ptr }, ptr %517, i32 0, i32 0
  store ptr @buffer_typ, ptr %2800, align 8
  %2801 = getelementptr { ptr, ptr, ptr }, ptr %517, i32 0, i32 1
  store ptr @i32_typ, ptr %2801, align 8
  %2802 = getelementptr { ptr, ptr, ptr }, ptr %517, i32 0, i32 2
  store ptr @i32_typ, ptr %2802, align 8
  %2803 = call ptr @behavior_wrapper(ptr %2799, { ptr, ptr, ptr, i32 } %2791, ptr %517)
  call void %2803({ ptr, ptr, ptr, i32 } %2791, { ptr, ptr, ptr, i32 } %2791, ptr %516, { ptr } %2779, i32 %2780, i32 %2781) #15
  %2804 = getelementptr { ptr, i160 }, ptr %513, i32 0, i32 0
  %2805 = load ptr, ptr %2804, align 8
  %2806 = insertvalue { ptr, i160 } undef, ptr %2805, 0
  %2807 = getelementptr { ptr, i160 }, ptr %513, i32 0, i32 1
  %2808 = load i160, ptr %2807, align 4
  %2809 = insertvalue { ptr, i160 } %2806, i160 %2808, 1
  %2810 = getelementptr [1 x ptr], ptr %518, i32 0, i32 0
  store ptr @_parameterization_String, ptr %2810, align 8
  %2811 = call ptr @llvm.invariant.start.p0(i64 1, ptr %518)
  %2812 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2813 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2814 = getelementptr { ptr }, ptr %519, i32 0, i32 0
  store ptr %2805, ptr %2814, align 8
  %2815 = call ptr @class_behavior_wrapper(ptr %2813, ptr %519)
  call void %2815(ptr %518, { ptr, i160 } %2809) #15
  br label %2816

2816:                                             ; preds = %._crit_edge12, %2757
  store i64 5, ptr %520, align 4
  %2817 = load i64, ptr %520, align 4
  store i64 %2817, ptr %521, align 4
  store i64 ptrtoint (ptr @i64_typ to i64), ptr %523, align 4
  %2818 = load i64, ptr %523, align 4
  store i64 %2818, ptr %522, align 4
  %2819 = load ptr, ptr %522, align 8
  %2820 = insertvalue { ptr, i160 } undef, ptr %2819, 0
  %2821 = load i160, ptr %521, align 4
  %2822 = insertvalue { ptr, i160 } %2820, i160 %2821, 1
  %2823 = getelementptr [1 x ptr], ptr %524, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %2823, align 8
  %2824 = call ptr @llvm.invariant.start.p0(i64 1, ptr %524)
  %2825 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2826 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2827 = getelementptr { ptr }, ptr %525, i32 0, i32 0
  store ptr %2819, ptr %2827, align 8
  %2828 = call ptr @class_behavior_wrapper(ptr %2826, ptr %525)
  call void %2828(ptr %524, { ptr, i160 } %2822) #15
  store i32 5, ptr %526, align 4
  %2829 = load i32, ptr %526, align 4
  %2830 = sitofp i32 %2829 to double
  store double %2830, ptr %527, align 8
  %2831 = load double, ptr %527, align 8
  store double %2831, ptr %528, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %530, align 4
  %2832 = load i64, ptr %530, align 4
  store i64 %2832, ptr %529, align 4
  %2833 = load ptr, ptr %529, align 8
  %2834 = insertvalue { ptr, i160 } undef, ptr %2833, 0
  %2835 = load i160, ptr %528, align 4
  %2836 = insertvalue { ptr, i160 } %2834, i160 %2835, 1
  %2837 = getelementptr [1 x ptr], ptr %531, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %2837, align 8
  %2838 = call ptr @llvm.invariant.start.p0(i64 1, ptr %531)
  %2839 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2840 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2841 = getelementptr { ptr }, ptr %532, i32 0, i32 0
  store ptr %2833, ptr %2841, align 8
  %2842 = call ptr @class_behavior_wrapper(ptr %2840, ptr %532)
  call void %2842(ptr %531, { ptr, i160 } %2836) #15
  store i32 11, ptr %533, align 4
  store i32 14, ptr %534, align 4
  store ptr @Range, ptr %535, align 8
  %2843 = load ptr, ptr %535, align 8
  %2844 = getelementptr ptr, ptr %2843, i32 6
  %2845 = load ptr, ptr %2844, align 8
  %2846 = call { i64, i64 } @size_wrapper(ptr %2845, ptr %535)
  %2847 = extractvalue { i64, i64 } %2846, 0
  %2848 = call ptr @bump_malloc(i64 %2847)
  store ptr @Range, ptr %539, align 8
  store ptr %2848, ptr %538, align 8
  store i32 10, ptr %536, align 4
  store i32 11, ptr %540, align 4
  store i32 14, ptr %541, align 4
  %2849 = load i32, ptr %540, align 4
  %2850 = load i32, ptr %541, align 4
  %2851 = load ptr, ptr %539, align 8
  %2852 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2851, 0
  %2853 = load ptr, ptr %538, align 8
  %2854 = insertvalue { ptr, ptr, ptr, i32 } %2852, ptr %2853, 1
  %2855 = load ptr, ptr %537, align 8
  %2856 = insertvalue { ptr, ptr, ptr, i32 } %2854, ptr %2855, 2
  %2857 = load i32, ptr %536, align 4
  %2858 = insertvalue { ptr, ptr, ptr, i32 } %2856, i32 %2857, 3
  %2859 = getelementptr [2 x ptr], ptr %542, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2859, align 8
  %2860 = getelementptr [2 x ptr], ptr %542, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2860, align 8
  %2861 = call ptr @llvm.invariant.start.p0(i64 4, ptr %542)
  %2862 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2851)
  %2863 = getelementptr ptr, ptr %2851, i32 %2857
  %2864 = getelementptr ptr, ptr %2863, i32 4
  %2865 = load ptr, ptr %2864, align 8
  %2866 = getelementptr { ptr, ptr }, ptr %543, i32 0, i32 0
  store ptr @i32_typ, ptr %2866, align 8
  %2867 = getelementptr { ptr, ptr }, ptr %543, i32 0, i32 1
  store ptr @i32_typ, ptr %2867, align 8
  %2868 = call ptr @behavior_wrapper(ptr %2865, { ptr, ptr, ptr, i32 } %2858, ptr %543)
  call void %2868({ ptr, ptr, ptr, i32 } %2858, { ptr, ptr, ptr, i32 } %2858, ptr %542, i32 %2849, i32 %2850) #15
  %2869 = load ptr, ptr %539, align 8
  %2870 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2869, 0
  %2871 = load ptr, ptr %538, align 8
  %2872 = insertvalue { ptr, ptr, ptr, i32 } %2870, ptr %2871, 1
  %2873 = load ptr, ptr %537, align 8
  %2874 = insertvalue { ptr, ptr, ptr, i32 } %2872, ptr %2873, 2
  %2875 = load i32, ptr %536, align 4
  %2876 = insertvalue { ptr, ptr, ptr, i32 } %2874, i32 %2875, 3
  %2877 = call ptr @llvm.invariant.start.p0(i64 0, ptr %544)
  %2878 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2869)
  %2879 = getelementptr ptr, ptr %2869, i32 %2875
  %2880 = getelementptr ptr, ptr %2879, i32 16
  %2881 = load ptr, ptr %2880, align 8
  %2882 = call ptr @behavior_wrapper(ptr %2881, { ptr, ptr, ptr, i32 } %2876, ptr %545)
  %2883 = call { ptr, ptr, ptr, i32 } %2882({ ptr, ptr, ptr, i32 } %2876, { ptr, ptr, ptr, i32 } %2876, ptr %544) #15
  store { ptr, ptr, ptr, i32 } %2883, ptr %546, align 8
  %2884 = getelementptr { ptr, ptr, ptr, i32 }, ptr %546, i32 0, i32 0
  %2885 = getelementptr { ptr, ptr, ptr, i32 }, ptr %547, i32 0, i32 0
  %2886 = load ptr, ptr %2884, align 8
  store ptr %2886, ptr %2885, align 8
  %2887 = getelementptr { ptr, ptr, ptr, i32 }, ptr %546, i32 0, i32 1
  %2888 = getelementptr { ptr, ptr, ptr, i32 }, ptr %547, i32 0, i32 1
  %2889 = load ptr, ptr %2887, align 8
  store ptr %2889, ptr %2888, align 8
  %2890 = getelementptr { ptr, ptr, ptr, i32 }, ptr %546, i32 0, i32 2
  %2891 = getelementptr { ptr, ptr, ptr, i32 }, ptr %547, i32 0, i32 2
  %2892 = load ptr, ptr %2890, align 8
  store ptr %2892, ptr %2891, align 8
  %2893 = getelementptr { ptr, ptr, ptr, i32 }, ptr %546, i32 0, i32 3
  %2894 = getelementptr { ptr, ptr, ptr, i32 }, ptr %547, i32 0, i32 3
  %2895 = load i32, ptr %2893, align 4
  store i32 %2895, ptr %2894, align 4
  call void @set_offset(ptr %547, ptr @RangeIterator)
  %2896 = getelementptr { ptr, ptr, ptr, i32 }, ptr %548, i32 0, i32 0
  %2897 = load ptr, ptr %2885, align 8
  store ptr %2897, ptr %2896, align 8
  %2898 = getelementptr { ptr, ptr, ptr, i32 }, ptr %548, i32 0, i32 1
  %2899 = load ptr, ptr %2888, align 8
  store ptr %2899, ptr %2898, align 8
  %2900 = getelementptr { ptr, ptr, ptr, i32 }, ptr %548, i32 0, i32 2
  %2901 = load ptr, ptr %2891, align 8
  store ptr %2901, ptr %2900, align 8
  %2902 = getelementptr { ptr, ptr, ptr, i32 }, ptr %548, i32 0, i32 3
  %2903 = load i32, ptr %2894, align 4
  store i32 %2903, ptr %2902, align 4
  call void @set_offset(ptr %548, ptr @RangeIterator)
  %2904 = load ptr, ptr %2896, align 8
  store ptr %2904, ptr %552, align 8
  %2905 = load ptr, ptr %2898, align 8
  store ptr %2905, ptr %551, align 8
  %2906 = load ptr, ptr %2900, align 8
  store ptr %2906, ptr %550, align 8
  %2907 = load i32, ptr %2902, align 4
  store i32 %2907, ptr %549, align 4
  br label %2908

2908:                                             ; preds = %._crit_edge14, %2816
  %2909 = load ptr, ptr %552, align 8
  %2910 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2909, 0
  %2911 = load ptr, ptr %551, align 8
  %2912 = insertvalue { ptr, ptr, ptr, i32 } %2910, ptr %2911, 1
  %2913 = load ptr, ptr %550, align 8
  %2914 = insertvalue { ptr, ptr, ptr, i32 } %2912, ptr %2913, 2
  %2915 = load i32, ptr %549, align 4
  %2916 = insertvalue { ptr, ptr, ptr, i32 } %2914, i32 %2915, 3
  %2917 = call ptr @llvm.invariant.start.p0(i64 0, ptr %553)
  %2918 = call ptr @llvm.invariant.start.p0(i64 72, ptr %2909)
  %2919 = getelementptr ptr, ptr %2909, i32 %2915
  %2920 = getelementptr ptr, ptr %2919, i32 4
  %2921 = load ptr, ptr %2920, align 8
  %2922 = call ptr @behavior_wrapper(ptr %2921, { ptr, ptr, ptr, i32 } %2916, ptr %554)
  %2923 = call { ptr, i32 } %2922({ ptr, ptr, ptr, i32 } %2916, { ptr, ptr, ptr, i32 } %2916, ptr %553) #15
  store { ptr, i32 } %2923, ptr %555, align 8
  %2924 = load ptr, ptr %555, align 8
  %2925 = ptrtoint ptr %2924 to i64
  %2926 = icmp eq i64 %2925, ptrtoint (ptr @nil_typ to i64)
  %2927 = icmp eq i64 %2925, 0
  %2928 = or i1 %2926, %2927
  %2929 = icmp eq i1 %2928, false
  store i1 %2929, ptr %556, align 1
  %2930 = load i1, ptr %556, align 1
  store i1 %2930, ptr %.reg2mem28, align 1
  %.reload30 = load i1, ptr %.reg2mem28, align 1
  br i1 %.reload30, label %2931, label %._crit_edge13

._crit_edge13:                                    ; preds = %2908
  br label %2947

2931:                                             ; preds = %2908
  %2932 = getelementptr { ptr, i32 }, ptr %555, i32 0, i32 1
  %2933 = load i32, ptr %2932, align 4
  store i32 %2933, ptr %557, align 4
  %2934 = load i32, ptr %557, align 4
  store i32 %2934, ptr %558, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %560, align 4
  %2935 = load i64, ptr %560, align 4
  store i64 %2935, ptr %559, align 4
  %2936 = load ptr, ptr %559, align 8
  %2937 = insertvalue { ptr, i160 } undef, ptr %2936, 0
  %2938 = load i160, ptr %558, align 4
  %2939 = insertvalue { ptr, i160 } %2937, i160 %2938, 1
  %2940 = getelementptr [1 x ptr], ptr %561, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2940, align 8
  %2941 = call ptr @llvm.invariant.start.p0(i64 1, ptr %561)
  %2942 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2943 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %2944 = getelementptr { ptr }, ptr %562, i32 0, i32 0
  store ptr %2936, ptr %2944, align 8
  %2945 = call ptr @class_behavior_wrapper(ptr %2943, ptr %562)
  call void %2945(ptr %561, { ptr, i160 } %2939) #15
  %2946 = load i32, ptr %557, align 4
  store i32 %2946, ptr %555, align 4
  br label %2947

2947:                                             ; preds = %._crit_edge13, %2931
  %.reload29 = load i1, ptr %.reg2mem28, align 1
  br i1 %.reload29, label %._crit_edge14, label %2948

._crit_edge14:                                    ; preds = %2947
  br label %2908

2948:                                             ; preds = %2947
  store i32 4, ptr %563, align 4
  %2949 = load i32, ptr %563, align 4
  %2950 = sext i32 %2949 to i64
  %2951 = mul i64 %2950, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %2952 = call ptr @bump_malloc(i64 %2951)
  store ptr %2952, ptr %564, align 8
  %2953 = getelementptr { ptr }, ptr %564, i32 0, i32 0
  %2954 = load ptr, ptr %2953, align 8
  store ptr %2954, ptr %565, align 8
  store i32 44, ptr %566, align 4
  store i32 0, ptr %567, align 4
  %2955 = load ptr, ptr %565, align 8
  %2956 = load i32, ptr %567, align 4
  %2957 = sext i32 %2956 to i64
  %2958 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2957
  %2959 = getelementptr i8, ptr %2955, i64 %2958
  %2960 = load i32, ptr %566, align 4
  store i32 %2960, ptr %2959, align 4
  store i32 55, ptr %568, align 4
  store i32 1, ptr %569, align 4
  %2961 = load ptr, ptr %565, align 8
  %2962 = load i32, ptr %569, align 4
  %2963 = sext i32 %2962 to i64
  %2964 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2963
  %2965 = getelementptr i8, ptr %2961, i64 %2964
  %2966 = load i32, ptr %568, align 4
  store i32 %2966, ptr %2965, align 4
  store i32 66, ptr %570, align 4
  store i32 2, ptr %571, align 4
  %2967 = load ptr, ptr %565, align 8
  %2968 = load i32, ptr %571, align 4
  %2969 = sext i32 %2968 to i64
  %2970 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %2969
  %2971 = getelementptr i8, ptr %2967, i64 %2970
  %2972 = load i32, ptr %570, align 4
  store i32 %2972, ptr %2971, align 4
  store i32 3, ptr %572, align 4
  store i32 4, ptr %573, align 4
  store ptr @IntArray, ptr %574, align 8
  %2973 = load ptr, ptr %574, align 8
  %2974 = getelementptr ptr, ptr %2973, i32 6
  %2975 = load ptr, ptr %2974, align 8
  %2976 = call { i64, i64 } @size_wrapper(ptr %2975, ptr %574)
  %2977 = extractvalue { i64, i64 } %2976, 0
  %2978 = call ptr @bump_malloc(i64 %2977)
  store ptr @IntArray, ptr %578, align 8
  store ptr %2978, ptr %577, align 8
  store i32 10, ptr %575, align 4
  store i32 3, ptr %579, align 4
  store i32 4, ptr %580, align 4
  %2979 = load ptr, ptr %565, align 8
  %2980 = insertvalue { ptr } undef, ptr %2979, 0
  %2981 = load i32, ptr %579, align 4
  %2982 = load i32, ptr %580, align 4
  %2983 = load ptr, ptr %578, align 8
  %2984 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2983, 0
  %2985 = load ptr, ptr %577, align 8
  %2986 = insertvalue { ptr, ptr, ptr, i32 } %2984, ptr %2985, 1
  %2987 = load ptr, ptr %576, align 8
  %2988 = insertvalue { ptr, ptr, ptr, i32 } %2986, ptr %2987, 2
  %2989 = load i32, ptr %575, align 4
  %2990 = insertvalue { ptr, ptr, ptr, i32 } %2988, i32 %2989, 3
  %2991 = getelementptr [3 x ptr], ptr %581, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2991, align 8
  %2992 = getelementptr [3 x ptr], ptr %581, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2992, align 8
  %2993 = getelementptr [3 x ptr], ptr %581, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2993, align 8
  %2994 = call ptr @llvm.invariant.start.p0(i64 9, ptr %581)
  %2995 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2983)
  %2996 = getelementptr ptr, ptr %2983, i32 %2989
  %2997 = getelementptr ptr, ptr %2996, i32 5
  %2998 = load ptr, ptr %2997, align 8
  %2999 = getelementptr { ptr, ptr, ptr }, ptr %582, i32 0, i32 0
  store ptr @buffer_typ, ptr %2999, align 8
  %3000 = getelementptr { ptr, ptr, ptr }, ptr %582, i32 0, i32 1
  store ptr @i32_typ, ptr %3000, align 8
  %3001 = getelementptr { ptr, ptr, ptr }, ptr %582, i32 0, i32 2
  store ptr @i32_typ, ptr %3001, align 8
  %3002 = call ptr @behavior_wrapper(ptr %2998, { ptr, ptr, ptr, i32 } %2990, ptr %582)
  call void %3002({ ptr, ptr, ptr, i32 } %2990, { ptr, ptr, ptr, i32 } %2990, ptr %581, { ptr } %2980, i32 %2981, i32 %2982) #15
  %3003 = load ptr, ptr %578, align 8
  %3004 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3003, 0
  %3005 = load ptr, ptr %577, align 8
  %3006 = insertvalue { ptr, ptr, ptr, i32 } %3004, ptr %3005, 1
  %3007 = load ptr, ptr %576, align 8
  %3008 = insertvalue { ptr, ptr, ptr, i32 } %3006, ptr %3007, 2
  %3009 = load i32, ptr %575, align 4
  %3010 = insertvalue { ptr, ptr, ptr, i32 } %3008, i32 %3009, 3
  %3011 = call ptr @llvm.invariant.start.p0(i64 0, ptr %583)
  %3012 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3003)
  %3013 = getelementptr ptr, ptr %3003, i32 %3009
  %3014 = getelementptr ptr, ptr %3013, i32 24
  %3015 = load ptr, ptr %3014, align 8
  %3016 = call ptr @behavior_wrapper(ptr %3015, { ptr, ptr, ptr, i32 } %3010, ptr %584)
  %3017 = call { ptr, ptr, ptr, i32 } %3016({ ptr, ptr, ptr, i32 } %3010, { ptr, ptr, ptr, i32 } %3010, ptr %583) #15
  store { ptr, ptr, ptr, i32 } %3017, ptr %585, align 8
  %3018 = getelementptr { ptr, ptr, ptr, i32 }, ptr %585, i32 0, i32 0
  %3019 = getelementptr { ptr, ptr, ptr, i32 }, ptr %586, i32 0, i32 0
  %3020 = load ptr, ptr %3018, align 8
  store ptr %3020, ptr %3019, align 8
  %3021 = getelementptr { ptr, ptr, ptr, i32 }, ptr %585, i32 0, i32 1
  %3022 = getelementptr { ptr, ptr, ptr, i32 }, ptr %586, i32 0, i32 1
  %3023 = load ptr, ptr %3021, align 8
  store ptr %3023, ptr %3022, align 8
  %3024 = getelementptr { ptr, ptr, ptr, i32 }, ptr %585, i32 0, i32 2
  %3025 = getelementptr { ptr, ptr, ptr, i32 }, ptr %586, i32 0, i32 2
  %3026 = load ptr, ptr %3024, align 8
  store ptr %3026, ptr %3025, align 8
  %3027 = getelementptr { ptr, ptr, ptr, i32 }, ptr %585, i32 0, i32 3
  %3028 = getelementptr { ptr, ptr, ptr, i32 }, ptr %586, i32 0, i32 3
  %3029 = load i32, ptr %3027, align 4
  store i32 %3029, ptr %3028, align 4
  call void @set_offset(ptr %586, ptr @IntArrayIterator)
  %3030 = getelementptr { ptr, ptr, ptr, i32 }, ptr %587, i32 0, i32 0
  %3031 = load ptr, ptr %3019, align 8
  store ptr %3031, ptr %3030, align 8
  %3032 = getelementptr { ptr, ptr, ptr, i32 }, ptr %587, i32 0, i32 1
  %3033 = load ptr, ptr %3022, align 8
  store ptr %3033, ptr %3032, align 8
  %3034 = getelementptr { ptr, ptr, ptr, i32 }, ptr %587, i32 0, i32 2
  %3035 = load ptr, ptr %3025, align 8
  store ptr %3035, ptr %3034, align 8
  %3036 = getelementptr { ptr, ptr, ptr, i32 }, ptr %587, i32 0, i32 3
  %3037 = load i32, ptr %3028, align 4
  store i32 %3037, ptr %3036, align 4
  call void @set_offset(ptr %587, ptr @IntArrayIterator)
  %3038 = load ptr, ptr %3030, align 8
  store ptr %3038, ptr %591, align 8
  %3039 = load ptr, ptr %3032, align 8
  store ptr %3039, ptr %590, align 8
  %3040 = load ptr, ptr %3034, align 8
  store ptr %3040, ptr %589, align 8
  %3041 = load i32, ptr %3036, align 4
  store i32 %3041, ptr %588, align 4
  br label %3042

3042:                                             ; preds = %._crit_edge16, %2948
  %3043 = load ptr, ptr %591, align 8
  %3044 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3043, 0
  %3045 = load ptr, ptr %590, align 8
  %3046 = insertvalue { ptr, ptr, ptr, i32 } %3044, ptr %3045, 1
  %3047 = load ptr, ptr %589, align 8
  %3048 = insertvalue { ptr, ptr, ptr, i32 } %3046, ptr %3047, 2
  %3049 = load i32, ptr %588, align 4
  %3050 = insertvalue { ptr, ptr, ptr, i32 } %3048, i32 %3049, 3
  %3051 = call ptr @llvm.invariant.start.p0(i64 0, ptr %592)
  %3052 = call ptr @llvm.invariant.start.p0(i64 64, ptr %3043)
  %3053 = getelementptr ptr, ptr %3043, i32 %3049
  %3054 = getelementptr ptr, ptr %3053, i32 3
  %3055 = load ptr, ptr %3054, align 8
  %3056 = call ptr @behavior_wrapper(ptr %3055, { ptr, ptr, ptr, i32 } %3050, ptr %593)
  %3057 = call { ptr, i32 } %3056({ ptr, ptr, ptr, i32 } %3050, { ptr, ptr, ptr, i32 } %3050, ptr %592) #15
  store { ptr, i32 } %3057, ptr %594, align 8
  %3058 = load ptr, ptr %594, align 8
  %3059 = ptrtoint ptr %3058 to i64
  %3060 = icmp eq i64 %3059, ptrtoint (ptr @nil_typ to i64)
  %3061 = icmp eq i64 %3059, 0
  %3062 = or i1 %3060, %3061
  %3063 = icmp eq i1 %3062, false
  store i1 %3063, ptr %595, align 1
  %3064 = load i1, ptr %595, align 1
  store i1 %3064, ptr %.reg2mem25, align 1
  %.reload27 = load i1, ptr %.reg2mem25, align 1
  br i1 %.reload27, label %3065, label %._crit_edge15

._crit_edge15:                                    ; preds = %3042
  br label %3081

3065:                                             ; preds = %3042
  %3066 = getelementptr { ptr, i32 }, ptr %594, i32 0, i32 1
  %3067 = load i32, ptr %3066, align 4
  store i32 %3067, ptr %596, align 4
  %3068 = load i32, ptr %596, align 4
  store i32 %3068, ptr %597, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %599, align 4
  %3069 = load i64, ptr %599, align 4
  store i64 %3069, ptr %598, align 4
  %3070 = load ptr, ptr %598, align 8
  %3071 = insertvalue { ptr, i160 } undef, ptr %3070, 0
  %3072 = load i160, ptr %597, align 4
  %3073 = insertvalue { ptr, i160 } %3071, i160 %3072, 1
  %3074 = getelementptr [1 x ptr], ptr %600, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3074, align 8
  %3075 = call ptr @llvm.invariant.start.p0(i64 1, ptr %600)
  %3076 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3077 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3078 = getelementptr { ptr }, ptr %601, i32 0, i32 0
  store ptr %3070, ptr %3078, align 8
  %3079 = call ptr @class_behavior_wrapper(ptr %3077, ptr %601)
  call void %3079(ptr %600, { ptr, i160 } %3073) #15
  %3080 = load i32, ptr %596, align 4
  store i32 %3080, ptr %594, align 4
  br label %3081

3081:                                             ; preds = %._crit_edge15, %3065
  %.reload26 = load i1, ptr %.reg2mem25, align 1
  br i1 %.reload26, label %._crit_edge16, label %3082

._crit_edge16:                                    ; preds = %3081
  br label %3042

3082:                                             ; preds = %3081
  store i8 3, ptr %602, align 1
  %3083 = load i8, ptr %602, align 1
  store i8 %3083, ptr %603, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %605, align 4
  %3084 = load i64, ptr %605, align 4
  store i64 %3084, ptr %604, align 4
  %3085 = load ptr, ptr %604, align 8
  %3086 = insertvalue { ptr, i160 } undef, ptr %3085, 0
  %3087 = load i160, ptr %603, align 4
  %3088 = insertvalue { ptr, i160 } %3086, i160 %3087, 1
  %3089 = getelementptr [1 x ptr], ptr %606, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %3089, align 8
  %3090 = call ptr @llvm.invariant.start.p0(i64 1, ptr %606)
  %3091 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3092 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3093 = getelementptr { ptr }, ptr %607, i32 0, i32 0
  store ptr %3085, ptr %3093, align 8
  %3094 = call ptr @class_behavior_wrapper(ptr %3092, ptr %607)
  call void %3094(ptr %606, { ptr, i160 } %3088) #15
  store i32 6, ptr %608, align 4
  %3095 = load i32, ptr %608, align 4
  %3096 = sext i32 %3095 to i64
  %3097 = mul i64 %3096, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %3098 = call ptr @bump_malloc(i64 %3097)
  store ptr %3098, ptr %609, align 8
  %3099 = getelementptr { ptr }, ptr %609, i32 0, i32 0
  %3100 = load ptr, ptr %3099, align 8
  store ptr %3100, ptr %610, align 8
  store i32 0, ptr %611, align 4
  %3101 = load ptr, ptr %610, align 8
  %3102 = load i32, ptr %611, align 4
  %3103 = sext i32 %3102 to i64
  %3104 = mul i64 ptrtoint (ptr getelementptr ([5 x i8], ptr null, i32 1) to i64), %3103
  %3105 = getelementptr i8, ptr %3101, i64 %3104
  %3106 = load <5 x i8>, ptr @jufhx_boom, align 8
  store <5 x i8> %3106, ptr %3105, align 8
  store i32 5, ptr %612, align 4
  store i32 6, ptr %613, align 4
  store ptr @String, ptr %614, align 8
  %3107 = load ptr, ptr %614, align 8
  %3108 = getelementptr ptr, ptr %3107, i32 6
  %3109 = load ptr, ptr %3108, align 8
  %3110 = call { i64, i64 } @size_wrapper(ptr %3109, ptr %614)
  %3111 = extractvalue { i64, i64 } %3110, 0
  %3112 = call ptr @bump_malloc(i64 %3111)
  store ptr @String, ptr %618, align 8
  store ptr %3112, ptr %617, align 8
  store i32 10, ptr %615, align 4
  store i32 5, ptr %619, align 4
  store i32 6, ptr %620, align 4
  %3113 = load ptr, ptr %610, align 8
  %3114 = insertvalue { ptr } undef, ptr %3113, 0
  %3115 = load i32, ptr %619, align 4
  %3116 = load i32, ptr %620, align 4
  %3117 = load ptr, ptr %618, align 8
  %3118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3117, 0
  %3119 = load ptr, ptr %617, align 8
  %3120 = insertvalue { ptr, ptr, ptr, i32 } %3118, ptr %3119, 1
  %3121 = load ptr, ptr %616, align 8
  %3122 = insertvalue { ptr, ptr, ptr, i32 } %3120, ptr %3121, 2
  %3123 = load i32, ptr %615, align 4
  %3124 = insertvalue { ptr, ptr, ptr, i32 } %3122, i32 %3123, 3
  %3125 = getelementptr [3 x ptr], ptr %621, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3125, align 8
  %3126 = getelementptr [3 x ptr], ptr %621, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3126, align 8
  %3127 = getelementptr [3 x ptr], ptr %621, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3127, align 8
  %3128 = call ptr @llvm.invariant.start.p0(i64 9, ptr %621)
  %3129 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3117)
  %3130 = getelementptr ptr, ptr %3117, i32 %3123
  %3131 = getelementptr ptr, ptr %3130, i32 4
  %3132 = load ptr, ptr %3131, align 8
  %3133 = getelementptr { ptr, ptr, ptr }, ptr %622, i32 0, i32 0
  store ptr @buffer_typ, ptr %3133, align 8
  %3134 = getelementptr { ptr, ptr, ptr }, ptr %622, i32 0, i32 1
  store ptr @i32_typ, ptr %3134, align 8
  %3135 = getelementptr { ptr, ptr, ptr }, ptr %622, i32 0, i32 2
  store ptr @i32_typ, ptr %3135, align 8
  %3136 = call ptr @behavior_wrapper(ptr %3132, { ptr, ptr, ptr, i32 } %3124, ptr %622)
  call void %3136({ ptr, ptr, ptr, i32 } %3124, { ptr, ptr, ptr, i32 } %3124, ptr %621, { ptr } %3114, i32 %3115, i32 %3116) #15
  %3137 = load ptr, ptr %618, align 8
  %3138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3137, 0
  %3139 = load ptr, ptr %617, align 8
  %3140 = insertvalue { ptr, ptr, ptr, i32 } %3138, ptr %3139, 1
  %3141 = load ptr, ptr %616, align 8
  %3142 = insertvalue { ptr, ptr, ptr, i32 } %3140, ptr %3141, 2
  %3143 = load i32, ptr %615, align 4
  %3144 = insertvalue { ptr, ptr, ptr, i32 } %3142, i32 %3143, 3
  %3145 = call ptr @llvm.invariant.start.p0(i64 0, ptr %623)
  %3146 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3137)
  %3147 = getelementptr ptr, ptr %3137, i32 %3143
  %3148 = getelementptr ptr, ptr %3147, i32 15
  %3149 = load ptr, ptr %3148, align 8
  %3150 = call ptr @behavior_wrapper(ptr %3149, { ptr, ptr, ptr, i32 } %3144, ptr %624)
  %3151 = call { ptr, ptr, ptr, i32 } %3150({ ptr, ptr, ptr, i32 } %3144, { ptr, ptr, ptr, i32 } %3144, ptr %623) #15
  store { ptr, ptr, ptr, i32 } %3151, ptr %625, align 8
  %3152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %625, i32 0, i32 0
  %3153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %626, i32 0, i32 0
  %3154 = load ptr, ptr %3152, align 8
  store ptr %3154, ptr %3153, align 8
  %3155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %625, i32 0, i32 1
  %3156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %626, i32 0, i32 1
  %3157 = load ptr, ptr %3155, align 8
  store ptr %3157, ptr %3156, align 8
  %3158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %625, i32 0, i32 2
  %3159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %626, i32 0, i32 2
  %3160 = load ptr, ptr %3158, align 8
  store ptr %3160, ptr %3159, align 8
  %3161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %625, i32 0, i32 3
  %3162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %626, i32 0, i32 3
  %3163 = load i32, ptr %3161, align 4
  store i32 %3163, ptr %3162, align 4
  call void @set_offset(ptr %626, ptr @StringIterator)
  %3164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %627, i32 0, i32 0
  %3165 = load ptr, ptr %3153, align 8
  store ptr %3165, ptr %3164, align 8
  %3166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %627, i32 0, i32 1
  %3167 = load ptr, ptr %3156, align 8
  store ptr %3167, ptr %3166, align 8
  %3168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %627, i32 0, i32 2
  %3169 = load ptr, ptr %3159, align 8
  store ptr %3169, ptr %3168, align 8
  %3170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %627, i32 0, i32 3
  %3171 = load i32, ptr %3162, align 4
  store i32 %3171, ptr %3170, align 4
  call void @set_offset(ptr %627, ptr @StringIterator)
  %3172 = load ptr, ptr %3164, align 8
  store ptr %3172, ptr %631, align 8
  %3173 = load ptr, ptr %3166, align 8
  store ptr %3173, ptr %630, align 8
  %3174 = load ptr, ptr %3168, align 8
  store ptr %3174, ptr %629, align 8
  %3175 = load i32, ptr %3170, align 4
  store i32 %3175, ptr %628, align 4
  br label %3176

3176:                                             ; preds = %._crit_edge18, %3082
  %3177 = load ptr, ptr %631, align 8
  %3178 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3177, 0
  %3179 = load ptr, ptr %630, align 8
  %3180 = insertvalue { ptr, ptr, ptr, i32 } %3178, ptr %3179, 1
  %3181 = load ptr, ptr %629, align 8
  %3182 = insertvalue { ptr, ptr, ptr, i32 } %3180, ptr %3181, 2
  %3183 = load i32, ptr %628, align 4
  %3184 = insertvalue { ptr, ptr, ptr, i32 } %3182, i32 %3183, 3
  %3185 = call ptr @llvm.invariant.start.p0(i64 0, ptr %632)
  %3186 = call ptr @llvm.invariant.start.p0(i64 48, ptr %3177)
  %3187 = getelementptr ptr, ptr %3177, i32 %3183
  %3188 = getelementptr ptr, ptr %3187, i32 3
  %3189 = load ptr, ptr %3188, align 8
  %3190 = call ptr @behavior_wrapper(ptr %3189, { ptr, ptr, ptr, i32 } %3184, ptr %633)
  %3191 = call { ptr, i160 } %3190({ ptr, ptr, ptr, i32 } %3184, { ptr, ptr, ptr, i32 } %3184, ptr %632) #15
  store { ptr, i160 } %3191, ptr %634, align 8
  %3192 = load ptr, ptr %634, align 8
  %3193 = ptrtoint ptr %3192 to i64
  %3194 = icmp eq i64 %3193, ptrtoint (ptr @nil_typ to i64)
  %3195 = icmp eq i64 %3193, 0
  %3196 = or i1 %3194, %3195
  %3197 = icmp eq i1 %3196, false
  store i1 %3197, ptr %635, align 1
  %3198 = load i1, ptr %635, align 1
  store i1 %3198, ptr %.reg2mem22, align 1
  %.reload24 = load i1, ptr %.reg2mem22, align 1
  br i1 %.reload24, label %3199, label %._crit_edge17

._crit_edge17:                                    ; preds = %3176
  br label %3236

3199:                                             ; preds = %3176
  %3200 = getelementptr { ptr, i160 }, ptr %634, i32 0, i32 0
  %3201 = getelementptr { ptr, i160 }, ptr %636, i32 0, i32 0
  %3202 = load ptr, ptr %3200, align 8
  store ptr %3202, ptr %3201, align 8
  %3203 = getelementptr { ptr, i160 }, ptr %634, i32 0, i32 1
  %3204 = getelementptr { ptr, i160 }, ptr %636, i32 0, i32 1
  %3205 = load i160, ptr %3203, align 4
  store i160 %3205, ptr %3204, align 4
  call void @set_offset(ptr %636, ptr @Character)
  %3206 = load ptr, ptr %3201, align 8
  %3207 = insertvalue { ptr, i160 } undef, ptr %3206, 0
  %3208 = load i160, ptr %3204, align 4
  %3209 = insertvalue { ptr, i160 } %3207, i160 %3208, 1
  %3210 = getelementptr [1 x ptr], ptr %637, i32 0, i32 0
  store ptr @_parameterization_Character, ptr %3210, align 8
  %3211 = call ptr @llvm.invariant.start.p0(i64 1, ptr %637)
  %3212 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3213 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3214 = getelementptr { ptr }, ptr %638, i32 0, i32 0
  store ptr %3206, ptr %3214, align 8
  %3215 = call ptr @class_behavior_wrapper(ptr %3213, ptr %638)
  call void %3215(ptr %637, { ptr, i160 } %3209) #15
  %3216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %636, i32 0, i32 0
  %3217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %639, i32 0, i32 0
  %3218 = load ptr, ptr %3216, align 8
  store ptr %3218, ptr %3217, align 8
  %3219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %636, i32 0, i32 1
  %3220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %639, i32 0, i32 1
  %3221 = load ptr, ptr %3219, align 8
  store ptr %3221, ptr %3220, align 8
  %3222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %636, i32 0, i32 2
  %3223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %639, i32 0, i32 2
  %3224 = load ptr, ptr %3222, align 8
  store ptr %3224, ptr %3223, align 8
  %3225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %636, i32 0, i32 3
  %3226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %639, i32 0, i32 3
  %3227 = load i32, ptr %3225, align 4
  store i32 %3227, ptr %3226, align 4
  call void @set_offset(ptr %639, ptr @Character)
  %3228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %634, i32 0, i32 0
  %3229 = load ptr, ptr %3217, align 8
  store ptr %3229, ptr %3228, align 8
  %3230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %634, i32 0, i32 1
  %3231 = load ptr, ptr %3220, align 8
  store ptr %3231, ptr %3230, align 8
  %3232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %634, i32 0, i32 2
  %3233 = load ptr, ptr %3223, align 8
  store ptr %3233, ptr %3232, align 8
  %3234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %634, i32 0, i32 3
  %3235 = load i32, ptr %3226, align 4
  store i32 %3235, ptr %3234, align 4
  br label %3236

3236:                                             ; preds = %._crit_edge17, %3199
  %.reload23 = load i1, ptr %.reg2mem22, align 1
  br i1 %.reload23, label %._crit_edge18, label %3237

._crit_edge18:                                    ; preds = %3236
  br label %3176

3237:                                             ; preds = %3236
  store i32 4, ptr %640, align 4
  %3238 = load i32, ptr %640, align 4
  %3239 = sext i32 %3238 to i64
  %3240 = mul i64 %3239, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %3241 = call ptr @bump_malloc(i64 %3240)
  store ptr %3241, ptr %641, align 8
  %3242 = getelementptr { ptr }, ptr %641, i32 0, i32 0
  %3243 = load ptr, ptr %3242, align 8
  store ptr %3243, ptr %642, align 8
  store i32 1, ptr %643, align 4
  store i32 0, ptr %644, align 4
  %3244 = load ptr, ptr %642, align 8
  %3245 = load i32, ptr %644, align 4
  %3246 = sext i32 %3245 to i64
  %3247 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3246
  %3248 = getelementptr i8, ptr %3244, i64 %3247
  %3249 = load i32, ptr %643, align 4
  store i32 %3249, ptr %3248, align 4
  store i32 2, ptr %645, align 4
  store i32 1, ptr %646, align 4
  %3250 = load ptr, ptr %642, align 8
  %3251 = load i32, ptr %646, align 4
  %3252 = sext i32 %3251 to i64
  %3253 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3252
  %3254 = getelementptr i8, ptr %3250, i64 %3253
  %3255 = load i32, ptr %645, align 4
  store i32 %3255, ptr %3254, align 4
  store i32 3, ptr %647, align 4
  store i32 2, ptr %648, align 4
  %3256 = load ptr, ptr %642, align 8
  %3257 = load i32, ptr %648, align 4
  %3258 = sext i32 %3257 to i64
  %3259 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3258
  %3260 = getelementptr i8, ptr %3256, i64 %3259
  %3261 = load i32, ptr %647, align 4
  store i32 %3261, ptr %3260, align 4
  store i32 3, ptr %649, align 4
  store i32 4, ptr %650, align 4
  store ptr @IntArray, ptr %651, align 8
  %3262 = load ptr, ptr %651, align 8
  %3263 = getelementptr ptr, ptr %3262, i32 6
  %3264 = load ptr, ptr %3263, align 8
  %3265 = call { i64, i64 } @size_wrapper(ptr %3264, ptr %651)
  %3266 = extractvalue { i64, i64 } %3265, 0
  %3267 = call ptr @bump_malloc(i64 %3266)
  store ptr @IntArray, ptr %655, align 8
  store ptr %3267, ptr %654, align 8
  store i32 10, ptr %652, align 4
  store i32 3, ptr %656, align 4
  store i32 4, ptr %657, align 4
  %3268 = load ptr, ptr %642, align 8
  %3269 = insertvalue { ptr } undef, ptr %3268, 0
  %3270 = load i32, ptr %656, align 4
  %3271 = load i32, ptr %657, align 4
  %3272 = load ptr, ptr %655, align 8
  %3273 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3272, 0
  %3274 = load ptr, ptr %654, align 8
  %3275 = insertvalue { ptr, ptr, ptr, i32 } %3273, ptr %3274, 1
  %3276 = load ptr, ptr %653, align 8
  %3277 = insertvalue { ptr, ptr, ptr, i32 } %3275, ptr %3276, 2
  %3278 = load i32, ptr %652, align 4
  %3279 = insertvalue { ptr, ptr, ptr, i32 } %3277, i32 %3278, 3
  %3280 = getelementptr [3 x ptr], ptr %658, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3280, align 8
  %3281 = getelementptr [3 x ptr], ptr %658, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3281, align 8
  %3282 = getelementptr [3 x ptr], ptr %658, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3282, align 8
  %3283 = call ptr @llvm.invariant.start.p0(i64 9, ptr %658)
  %3284 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3272)
  %3285 = getelementptr ptr, ptr %3272, i32 %3278
  %3286 = getelementptr ptr, ptr %3285, i32 5
  %3287 = load ptr, ptr %3286, align 8
  %3288 = getelementptr { ptr, ptr, ptr }, ptr %659, i32 0, i32 0
  store ptr @buffer_typ, ptr %3288, align 8
  %3289 = getelementptr { ptr, ptr, ptr }, ptr %659, i32 0, i32 1
  store ptr @i32_typ, ptr %3289, align 8
  %3290 = getelementptr { ptr, ptr, ptr }, ptr %659, i32 0, i32 2
  store ptr @i32_typ, ptr %3290, align 8
  %3291 = call ptr @behavior_wrapper(ptr %3287, { ptr, ptr, ptr, i32 } %3279, ptr %659)
  call void %3291({ ptr, ptr, ptr, i32 } %3279, { ptr, ptr, ptr, i32 } %3279, ptr %658, { ptr } %3269, i32 %3270, i32 %3271) #15
  %3292 = load ptr, ptr %655, align 8
  %3293 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3292, 0
  %3294 = load ptr, ptr %654, align 8
  %3295 = insertvalue { ptr, ptr, ptr, i32 } %3293, ptr %3294, 1
  %3296 = load ptr, ptr %653, align 8
  %3297 = insertvalue { ptr, ptr, ptr, i32 } %3295, ptr %3296, 2
  %3298 = load i32, ptr %652, align 4
  %3299 = insertvalue { ptr, ptr, ptr, i32 } %3297, i32 %3298, 3
  %3300 = call ptr @llvm.invariant.start.p0(i64 0, ptr %660)
  %3301 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3292)
  %3302 = getelementptr ptr, ptr %3292, i32 %3298
  %3303 = getelementptr ptr, ptr %3302, i32 25
  %3304 = load ptr, ptr %3303, align 8
  %3305 = call ptr @behavior_wrapper(ptr %3304, { ptr, ptr, ptr, i32 } %3299, ptr %661)
  %3306 = call { ptr, ptr, ptr, i32 } %3305({ ptr, ptr, ptr, i32 } %3299, { ptr, ptr, ptr, i32 } %3299, ptr %660) #15
  store { ptr, ptr, ptr, i32 } %3306, ptr %662, align 8
  %3307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %662, i32 0, i32 0
  %3308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %663, i32 0, i32 0
  %3309 = load ptr, ptr %3307, align 8
  store ptr %3309, ptr %3308, align 8
  %3310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %662, i32 0, i32 1
  %3311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %663, i32 0, i32 1
  %3312 = load ptr, ptr %3310, align 8
  store ptr %3312, ptr %3311, align 8
  %3313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %662, i32 0, i32 2
  %3314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %663, i32 0, i32 2
  %3315 = load ptr, ptr %3313, align 8
  store ptr %3315, ptr %3314, align 8
  %3316 = getelementptr { ptr, ptr, ptr, i32 }, ptr %662, i32 0, i32 3
  %3317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %663, i32 0, i32 3
  %3318 = load i32, ptr %3316, align 4
  store i32 %3318, ptr %3317, align 4
  call void @set_offset(ptr %663, ptr @String)
  %3319 = getelementptr { ptr, i160 }, ptr %663, i32 0, i32 0
  %3320 = load ptr, ptr %3319, align 8
  %3321 = insertvalue { ptr, i160 } undef, ptr %3320, 0
  %3322 = getelementptr { ptr, i160 }, ptr %663, i32 0, i32 1
  %3323 = load i160, ptr %3322, align 4
  %3324 = insertvalue { ptr, i160 } %3321, i160 %3323, 1
  %3325 = getelementptr [1 x ptr], ptr %664, i32 0, i32 0
  store ptr @_parameterization_String, ptr %3325, align 8
  %3326 = call ptr @llvm.invariant.start.p0(i64 1, ptr %664)
  %3327 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3328 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3329 = getelementptr { ptr }, ptr %665, i32 0, i32 0
  store ptr %3320, ptr %3329, align 8
  %3330 = call ptr @class_behavior_wrapper(ptr %3328, ptr %665)
  call void %3330(ptr %664, { ptr, i160 } %3324) #15
  store i32 77, ptr %666, align 4
  store ptr @Integer2, ptr %667, align 8
  %3331 = load ptr, ptr %667, align 8
  %3332 = getelementptr ptr, ptr %3331, i32 6
  %3333 = load ptr, ptr %3332, align 8
  %3334 = call { i64, i64 } @size_wrapper(ptr %3333, ptr %667)
  %3335 = extractvalue { i64, i64 } %3334, 0
  %3336 = call ptr @bump_malloc(i64 %3335)
  store ptr @Integer2, ptr %671, align 8
  store ptr %3336, ptr %670, align 8
  store i32 10, ptr %668, align 4
  store i32 77, ptr %672, align 4
  %3337 = load i32, ptr %672, align 4
  %3338 = load ptr, ptr %671, align 8
  %3339 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3338, 0
  %3340 = load ptr, ptr %670, align 8
  %3341 = insertvalue { ptr, ptr, ptr, i32 } %3339, ptr %3340, 1
  %3342 = load ptr, ptr %669, align 8
  %3343 = insertvalue { ptr, ptr, ptr, i32 } %3341, ptr %3342, 2
  %3344 = load i32, ptr %668, align 4
  %3345 = insertvalue { ptr, ptr, ptr, i32 } %3343, i32 %3344, 3
  %3346 = getelementptr [1 x ptr], ptr %673, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3346, align 8
  %3347 = call ptr @llvm.invariant.start.p0(i64 1, ptr %673)
  %3348 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3338)
  %3349 = getelementptr ptr, ptr %3338, i32 %3344
  %3350 = getelementptr ptr, ptr %3349, i32 2
  %3351 = load ptr, ptr %3350, align 8
  %3352 = getelementptr { ptr }, ptr %674, i32 0, i32 0
  store ptr @i32_typ, ptr %3352, align 8
  %3353 = call ptr @behavior_wrapper(ptr %3351, { ptr, ptr, ptr, i32 } %3345, ptr %674)
  call void %3353({ ptr, ptr, ptr, i32 } %3345, { ptr, ptr, ptr, i32 } %3345, ptr %673, i32 %3337) #15
  %3354 = getelementptr { ptr, ptr, ptr, i32 }, ptr %675, i32 0, i32 0
  %3355 = load ptr, ptr %671, align 8
  store ptr %3355, ptr %3354, align 8
  %3356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %675, i32 0, i32 1
  %3357 = load ptr, ptr %670, align 8
  store ptr %3357, ptr %3356, align 8
  %3358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %675, i32 0, i32 2
  %3359 = load ptr, ptr %669, align 8
  store ptr %3359, ptr %3358, align 8
  %3360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %675, i32 0, i32 3
  %3361 = load i32, ptr %668, align 4
  store i32 %3361, ptr %3360, align 4
  call void @set_offset(ptr %675, ptr @Integer2)
  %3362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %676, i32 0, i32 0
  %3363 = load ptr, ptr %3354, align 8
  store ptr %3363, ptr %3362, align 8
  %3364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %676, i32 0, i32 1
  %3365 = load ptr, ptr %3356, align 8
  store ptr %3365, ptr %3364, align 8
  %3366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %676, i32 0, i32 2
  %3367 = load ptr, ptr %3358, align 8
  store ptr %3367, ptr %3366, align 8
  %3368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %676, i32 0, i32 3
  %3369 = load i32, ptr %3360, align 4
  store i32 %3369, ptr %3368, align 4
  %3370 = load ptr, ptr %3362, align 8
  %3371 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3370, 0
  %3372 = load ptr, ptr %3364, align 8
  %3373 = insertvalue { ptr, ptr, ptr, i32 } %3371, ptr %3372, 1
  %3374 = load ptr, ptr %3366, align 8
  %3375 = insertvalue { ptr, ptr, ptr, i32 } %3373, ptr %3374, 2
  %3376 = load i32, ptr %3368, align 4
  %3377 = insertvalue { ptr, ptr, ptr, i32 } %3375, i32 %3376, 3
  %3378 = call ptr @llvm.invariant.start.p0(i64 0, ptr %677)
  %3379 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3370)
  %3380 = getelementptr ptr, ptr %3370, i32 %3376
  %3381 = getelementptr ptr, ptr %3380, i32 7
  %3382 = load ptr, ptr %3381, align 8
  %3383 = call ptr @behavior_wrapper(ptr %3382, { ptr, ptr, ptr, i32 } %3377, ptr %678)
  call void %3383({ ptr, ptr, ptr, i32 } %3377, { ptr, ptr, ptr, i32 } %3377, ptr %677) #15
  %3384 = getelementptr { ptr, i160 }, ptr %676, i32 0, i32 0
  %3385 = load ptr, ptr %3384, align 8
  %3386 = insertvalue { ptr, i160 } undef, ptr %3385, 0
  %3387 = getelementptr { ptr, i160 }, ptr %676, i32 0, i32 1
  %3388 = load i160, ptr %3387, align 4
  %3389 = insertvalue { ptr, i160 } %3386, i160 %3388, 1
  %3390 = getelementptr [1 x ptr], ptr %679, i32 0, i32 0
  store ptr @_parameterization_Integer2, ptr %3390, align 8
  %3391 = call ptr @llvm.invariant.start.p0(i64 1, ptr %679)
  %3392 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3393 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3394 = getelementptr { ptr }, ptr %680, i32 0, i32 0
  store ptr %3385, ptr %3394, align 8
  %3395 = call ptr @class_behavior_wrapper(ptr %3393, ptr %680)
  call void %3395(ptr %679, { ptr, i160 } %3389) #15
  %3396 = load ptr, ptr %3362, align 8
  %3397 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3396, 0
  %3398 = load ptr, ptr %3364, align 8
  %3399 = insertvalue { ptr, ptr, ptr, i32 } %3397, ptr %3398, 1
  %3400 = load ptr, ptr %3366, align 8
  %3401 = insertvalue { ptr, ptr, ptr, i32 } %3399, ptr %3400, 2
  %3402 = load i32, ptr %3368, align 4
  %3403 = insertvalue { ptr, ptr, ptr, i32 } %3401, i32 %3402, 3
  %3404 = call ptr @llvm.invariant.start.p0(i64 0, ptr %681)
  %3405 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3396)
  %3406 = getelementptr ptr, ptr %3396, i32 %3402
  %3407 = getelementptr ptr, ptr %3406, i32 8
  %3408 = load ptr, ptr %3407, align 8
  %3409 = call ptr @behavior_wrapper(ptr %3408, { ptr, ptr, ptr, i32 } %3403, ptr %682)
  call void %3409({ ptr, ptr, ptr, i32 } %3403, { ptr, ptr, ptr, i32 } %3403, ptr %681) #15
  store i32 5, ptr %683, align 4
  %3410 = load i32, ptr %683, align 4
  store i32 0, ptr %684, align 4
  store i32 25, ptr %685, align 4
  store ptr @Range, ptr %686, align 8
  %3411 = load ptr, ptr %686, align 8
  %3412 = getelementptr ptr, ptr %3411, i32 6
  %3413 = load ptr, ptr %3412, align 8
  %3414 = call { i64, i64 } @size_wrapper(ptr %3413, ptr %686)
  %3415 = extractvalue { i64, i64 } %3414, 0
  %3416 = call ptr @bump_malloc(i64 %3415)
  store ptr @Range, ptr %690, align 8
  store ptr %3416, ptr %689, align 8
  store i32 10, ptr %687, align 4
  store i32 0, ptr %691, align 4
  store i32 25, ptr %692, align 4
  %3417 = load i32, ptr %691, align 4
  %3418 = load i32, ptr %692, align 4
  %3419 = load ptr, ptr %690, align 8
  %3420 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3419, 0
  %3421 = load ptr, ptr %689, align 8
  %3422 = insertvalue { ptr, ptr, ptr, i32 } %3420, ptr %3421, 1
  %3423 = load ptr, ptr %688, align 8
  %3424 = insertvalue { ptr, ptr, ptr, i32 } %3422, ptr %3423, 2
  %3425 = load i32, ptr %687, align 4
  %3426 = insertvalue { ptr, ptr, ptr, i32 } %3424, i32 %3425, 3
  %3427 = getelementptr [2 x ptr], ptr %693, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3427, align 8
  %3428 = getelementptr [2 x ptr], ptr %693, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3428, align 8
  %3429 = call ptr @llvm.invariant.start.p0(i64 4, ptr %693)
  %3430 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3419)
  %3431 = getelementptr ptr, ptr %3419, i32 %3425
  %3432 = getelementptr ptr, ptr %3431, i32 4
  %3433 = load ptr, ptr %3432, align 8
  %3434 = getelementptr { ptr, ptr }, ptr %694, i32 0, i32 0
  store ptr @i32_typ, ptr %3434, align 8
  %3435 = getelementptr { ptr, ptr }, ptr %694, i32 0, i32 1
  store ptr @i32_typ, ptr %3435, align 8
  %3436 = call ptr @behavior_wrapper(ptr %3433, { ptr, ptr, ptr, i32 } %3426, ptr %694)
  call void %3436({ ptr, ptr, ptr, i32 } %3426, { ptr, ptr, ptr, i32 } %3426, ptr %693, i32 %3417, i32 %3418) #15
  %3437 = load ptr, ptr %690, align 8
  %3438 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3437, 0
  %3439 = load ptr, ptr %689, align 8
  %3440 = insertvalue { ptr, ptr, ptr, i32 } %3438, ptr %3439, 1
  %3441 = load ptr, ptr %688, align 8
  %3442 = insertvalue { ptr, ptr, ptr, i32 } %3440, ptr %3441, 2
  %3443 = load i32, ptr %687, align 4
  %3444 = insertvalue { ptr, ptr, ptr, i32 } %3442, i32 %3443, 3
  %3445 = getelementptr [1 x ptr], ptr %695, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3445, align 8
  %3446 = call ptr @llvm.invariant.start.p0(i64 1, ptr %695)
  %3447 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3437)
  %3448 = getelementptr ptr, ptr %3437, i32 %3443
  %3449 = getelementptr ptr, ptr %3448, i32 5
  %3450 = load ptr, ptr %3449, align 8
  %3451 = getelementptr { ptr }, ptr %696, i32 0, i32 0
  store ptr @i32_typ, ptr %3451, align 8
  %3452 = call ptr @behavior_wrapper(ptr %3450, { ptr, ptr, ptr, i32 } %3444, ptr %696)
  %3453 = call { ptr, ptr, ptr, i32 } %3452({ ptr, ptr, ptr, i32 } %3444, { ptr, ptr, ptr, i32 } %3444, ptr %695, i32 %3410) #15
  store { ptr, ptr, ptr, i32 } %3453, ptr %697, align 8
  %3454 = getelementptr { ptr, ptr, ptr, i32 }, ptr %697, i32 0, i32 0
  %3455 = getelementptr { ptr, ptr, ptr, i32 }, ptr %698, i32 0, i32 0
  %3456 = load ptr, ptr %3454, align 8
  store ptr %3456, ptr %3455, align 8
  %3457 = getelementptr { ptr, ptr, ptr, i32 }, ptr %697, i32 0, i32 1
  %3458 = getelementptr { ptr, ptr, ptr, i32 }, ptr %698, i32 0, i32 1
  %3459 = load ptr, ptr %3457, align 8
  store ptr %3459, ptr %3458, align 8
  %3460 = getelementptr { ptr, ptr, ptr, i32 }, ptr %697, i32 0, i32 2
  %3461 = getelementptr { ptr, ptr, ptr, i32 }, ptr %698, i32 0, i32 2
  %3462 = load ptr, ptr %3460, align 8
  store ptr %3462, ptr %3461, align 8
  %3463 = getelementptr { ptr, ptr, ptr, i32 }, ptr %697, i32 0, i32 3
  %3464 = getelementptr { ptr, ptr, ptr, i32 }, ptr %698, i32 0, i32 3
  %3465 = load i32, ptr %3463, align 4
  store i32 %3465, ptr %3464, align 4
  call void @set_offset(ptr %698, ptr @Range)
  %3466 = load ptr, ptr %3455, align 8
  %3467 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3466, 0
  %3468 = load ptr, ptr %3458, align 8
  %3469 = insertvalue { ptr, ptr, ptr, i32 } %3467, ptr %3468, 1
  %3470 = load ptr, ptr %3461, align 8
  %3471 = insertvalue { ptr, ptr, ptr, i32 } %3469, ptr %3470, 2
  %3472 = load i32, ptr %3464, align 4
  %3473 = insertvalue { ptr, ptr, ptr, i32 } %3471, i32 %3472, 3
  %3474 = call ptr @llvm.invariant.start.p0(i64 0, ptr %699)
  %3475 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3466)
  %3476 = getelementptr ptr, ptr %3466, i32 %3472
  %3477 = getelementptr ptr, ptr %3476, i32 16
  %3478 = load ptr, ptr %3477, align 8
  %3479 = call ptr @behavior_wrapper(ptr %3478, { ptr, ptr, ptr, i32 } %3473, ptr %700)
  %3480 = call { ptr, ptr, ptr, i32 } %3479({ ptr, ptr, ptr, i32 } %3473, { ptr, ptr, ptr, i32 } %3473, ptr %699) #15
  store { ptr, ptr, ptr, i32 } %3480, ptr %701, align 8
  %3481 = getelementptr { ptr, ptr, ptr, i32 }, ptr %701, i32 0, i32 0
  %3482 = getelementptr { ptr, ptr, ptr, i32 }, ptr %702, i32 0, i32 0
  %3483 = load ptr, ptr %3481, align 8
  store ptr %3483, ptr %3482, align 8
  %3484 = getelementptr { ptr, ptr, ptr, i32 }, ptr %701, i32 0, i32 1
  %3485 = getelementptr { ptr, ptr, ptr, i32 }, ptr %702, i32 0, i32 1
  %3486 = load ptr, ptr %3484, align 8
  store ptr %3486, ptr %3485, align 8
  %3487 = getelementptr { ptr, ptr, ptr, i32 }, ptr %701, i32 0, i32 2
  %3488 = getelementptr { ptr, ptr, ptr, i32 }, ptr %702, i32 0, i32 2
  %3489 = load ptr, ptr %3487, align 8
  store ptr %3489, ptr %3488, align 8
  %3490 = getelementptr { ptr, ptr, ptr, i32 }, ptr %701, i32 0, i32 3
  %3491 = getelementptr { ptr, ptr, ptr, i32 }, ptr %702, i32 0, i32 3
  %3492 = load i32, ptr %3490, align 4
  store i32 %3492, ptr %3491, align 4
  call void @set_offset(ptr %702, ptr @RangeIterator)
  %3493 = getelementptr { ptr, ptr, ptr, i32 }, ptr %703, i32 0, i32 0
  %3494 = load ptr, ptr %3482, align 8
  store ptr %3494, ptr %3493, align 8
  %3495 = getelementptr { ptr, ptr, ptr, i32 }, ptr %703, i32 0, i32 1
  %3496 = load ptr, ptr %3485, align 8
  store ptr %3496, ptr %3495, align 8
  %3497 = getelementptr { ptr, ptr, ptr, i32 }, ptr %703, i32 0, i32 2
  %3498 = load ptr, ptr %3488, align 8
  store ptr %3498, ptr %3497, align 8
  %3499 = getelementptr { ptr, ptr, ptr, i32 }, ptr %703, i32 0, i32 3
  %3500 = load i32, ptr %3491, align 4
  store i32 %3500, ptr %3499, align 4
  call void @set_offset(ptr %703, ptr @RangeIterator)
  %3501 = load ptr, ptr %3493, align 8
  store ptr %3501, ptr %707, align 8
  %3502 = load ptr, ptr %3495, align 8
  store ptr %3502, ptr %706, align 8
  %3503 = load ptr, ptr %3497, align 8
  store ptr %3503, ptr %705, align 8
  %3504 = load i32, ptr %3499, align 4
  store i32 %3504, ptr %704, align 4
  br label %3505

3505:                                             ; preds = %._crit_edge20, %3237
  %3506 = load ptr, ptr %707, align 8
  %3507 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3506, 0
  %3508 = load ptr, ptr %706, align 8
  %3509 = insertvalue { ptr, ptr, ptr, i32 } %3507, ptr %3508, 1
  %3510 = load ptr, ptr %705, align 8
  %3511 = insertvalue { ptr, ptr, ptr, i32 } %3509, ptr %3510, 2
  %3512 = load i32, ptr %704, align 4
  %3513 = insertvalue { ptr, ptr, ptr, i32 } %3511, i32 %3512, 3
  %3514 = call ptr @llvm.invariant.start.p0(i64 0, ptr %708)
  %3515 = call ptr @llvm.invariant.start.p0(i64 72, ptr %3506)
  %3516 = getelementptr ptr, ptr %3506, i32 %3512
  %3517 = getelementptr ptr, ptr %3516, i32 4
  %3518 = load ptr, ptr %3517, align 8
  %3519 = call ptr @behavior_wrapper(ptr %3518, { ptr, ptr, ptr, i32 } %3513, ptr %709)
  %3520 = call { ptr, i32 } %3519({ ptr, ptr, ptr, i32 } %3513, { ptr, ptr, ptr, i32 } %3513, ptr %708) #15
  store { ptr, i32 } %3520, ptr %710, align 8
  %3521 = load ptr, ptr %710, align 8
  %3522 = ptrtoint ptr %3521 to i64
  %3523 = icmp eq i64 %3522, ptrtoint (ptr @nil_typ to i64)
  %3524 = icmp eq i64 %3522, 0
  %3525 = or i1 %3523, %3524
  %3526 = icmp eq i1 %3525, false
  store i1 %3526, ptr %711, align 1
  %3527 = load i1, ptr %711, align 1
  store i1 %3527, ptr %.reg2mem, align 1
  %.reload21 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload21, label %3528, label %._crit_edge19

._crit_edge19:                                    ; preds = %3505
  br label %3544

3528:                                             ; preds = %3505
  %3529 = getelementptr { ptr, i32 }, ptr %710, i32 0, i32 1
  %3530 = load i32, ptr %3529, align 4
  store i32 %3530, ptr %712, align 4
  %3531 = load i32, ptr %712, align 4
  store i32 %3531, ptr %713, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %715, align 4
  %3532 = load i64, ptr %715, align 4
  store i64 %3532, ptr %714, align 4
  %3533 = load ptr, ptr %714, align 8
  %3534 = insertvalue { ptr, i160 } undef, ptr %3533, 0
  %3535 = load i160, ptr %713, align 4
  %3536 = insertvalue { ptr, i160 } %3534, i160 %3535, 1
  %3537 = getelementptr [1 x ptr], ptr %716, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3537, align 8
  %3538 = call ptr @llvm.invariant.start.p0(i64 1, ptr %716)
  %3539 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3540 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3541 = getelementptr { ptr }, ptr %717, i32 0, i32 0
  store ptr %3533, ptr %3541, align 8
  %3542 = call ptr @class_behavior_wrapper(ptr %3540, ptr %717)
  call void %3542(ptr %716, { ptr, i160 } %3536) #15
  %3543 = load i32, ptr %712, align 4
  store i32 %3543, ptr %710, align 4
  br label %3544

3544:                                             ; preds = %._crit_edge19, %3528
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge20, label %3545

._crit_edge20:                                    ; preds = %3544
  br label %3505

3545:                                             ; preds = %3544
  store ptr @_functionliteral_bnzhunqefr, ptr %718, align 8
  store ptr @_functionliteral_sajmqyzgff, ptr %719, align 8
  store ptr @_functionliteral_wzqxsoskrj, ptr %720, align 8
  store i32 0, ptr %721, align 4
  %3546 = load i32, ptr %721, align 4
  %3547 = getelementptr { ptr }, ptr %718, i32 0, i32 0
  %3548 = load ptr, ptr %3547, align 8
  %3549 = insertvalue { ptr } undef, ptr %3548, 0
  %3550 = getelementptr { ptr }, ptr %719, i32 0, i32 0
  %3551 = load ptr, ptr %3550, align 8
  %3552 = insertvalue { ptr } undef, ptr %3551, 0
  store i32 5, ptr %722, align 4
  %3553 = load i32, ptr %722, align 4
  %3554 = sext i32 %3553 to i64
  %3555 = mul i64 %3554, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %3556 = call ptr @bump_malloc(i64 %3555)
  store ptr %3556, ptr %723, align 8
  %3557 = getelementptr { ptr }, ptr %723, i32 0, i32 0
  %3558 = load ptr, ptr %3557, align 8
  store ptr %3558, ptr %724, align 8
  store i32 1, ptr %725, align 4
  store i32 0, ptr %726, align 4
  %3559 = load ptr, ptr %724, align 8
  %3560 = load i32, ptr %726, align 4
  %3561 = sext i32 %3560 to i64
  %3562 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3561
  %3563 = getelementptr i8, ptr %3559, i64 %3562
  %3564 = load i32, ptr %725, align 4
  store i32 %3564, ptr %3563, align 4
  store i32 2, ptr %727, align 4
  store i32 1, ptr %728, align 4
  %3565 = load ptr, ptr %724, align 8
  %3566 = load i32, ptr %728, align 4
  %3567 = sext i32 %3566 to i64
  %3568 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3567
  %3569 = getelementptr i8, ptr %3565, i64 %3568
  %3570 = load i32, ptr %727, align 4
  store i32 %3570, ptr %3569, align 4
  store i32 3, ptr %729, align 4
  store i32 2, ptr %730, align 4
  %3571 = load ptr, ptr %724, align 8
  %3572 = load i32, ptr %730, align 4
  %3573 = sext i32 %3572 to i64
  %3574 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3573
  %3575 = getelementptr i8, ptr %3571, i64 %3574
  %3576 = load i32, ptr %729, align 4
  store i32 %3576, ptr %3575, align 4
  store i32 4, ptr %731, align 4
  store i32 3, ptr %732, align 4
  %3577 = load ptr, ptr %724, align 8
  %3578 = load i32, ptr %732, align 4
  %3579 = sext i32 %3578 to i64
  %3580 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3579
  %3581 = getelementptr i8, ptr %3577, i64 %3580
  %3582 = load i32, ptr %731, align 4
  store i32 %3582, ptr %3581, align 4
  store i32 4, ptr %733, align 4
  store i32 5, ptr %734, align 4
  store ptr @IntArray, ptr %735, align 8
  %3583 = load ptr, ptr %735, align 8
  %3584 = getelementptr ptr, ptr %3583, i32 6
  %3585 = load ptr, ptr %3584, align 8
  %3586 = call { i64, i64 } @size_wrapper(ptr %3585, ptr %735)
  %3587 = extractvalue { i64, i64 } %3586, 0
  %3588 = call ptr @bump_malloc(i64 %3587)
  store ptr @IntArray, ptr %739, align 8
  store ptr %3588, ptr %738, align 8
  store i32 10, ptr %736, align 4
  store i32 4, ptr %740, align 4
  store i32 5, ptr %741, align 4
  %3589 = load ptr, ptr %724, align 8
  %3590 = insertvalue { ptr } undef, ptr %3589, 0
  %3591 = load i32, ptr %740, align 4
  %3592 = load i32, ptr %741, align 4
  %3593 = load ptr, ptr %739, align 8
  %3594 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3593, 0
  %3595 = load ptr, ptr %738, align 8
  %3596 = insertvalue { ptr, ptr, ptr, i32 } %3594, ptr %3595, 1
  %3597 = load ptr, ptr %737, align 8
  %3598 = insertvalue { ptr, ptr, ptr, i32 } %3596, ptr %3597, 2
  %3599 = load i32, ptr %736, align 4
  %3600 = insertvalue { ptr, ptr, ptr, i32 } %3598, i32 %3599, 3
  %3601 = getelementptr [3 x ptr], ptr %742, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3601, align 8
  %3602 = getelementptr [3 x ptr], ptr %742, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3602, align 8
  %3603 = getelementptr [3 x ptr], ptr %742, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3603, align 8
  %3604 = call ptr @llvm.invariant.start.p0(i64 9, ptr %742)
  %3605 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3593)
  %3606 = getelementptr ptr, ptr %3593, i32 %3599
  %3607 = getelementptr ptr, ptr %3606, i32 5
  %3608 = load ptr, ptr %3607, align 8
  %3609 = getelementptr { ptr, ptr, ptr }, ptr %743, i32 0, i32 0
  store ptr @buffer_typ, ptr %3609, align 8
  %3610 = getelementptr { ptr, ptr, ptr }, ptr %743, i32 0, i32 1
  store ptr @i32_typ, ptr %3610, align 8
  %3611 = getelementptr { ptr, ptr, ptr }, ptr %743, i32 0, i32 2
  store ptr @i32_typ, ptr %3611, align 8
  %3612 = call ptr @behavior_wrapper(ptr %3608, { ptr, ptr, ptr, i32 } %3600, ptr %743)
  call void %3612({ ptr, ptr, ptr, i32 } %3600, { ptr, ptr, ptr, i32 } %3600, ptr %742, { ptr } %3590, i32 %3591, i32 %3592) #15
  %3613 = load ptr, ptr %739, align 8
  %3614 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3613, 0
  %3615 = load ptr, ptr %738, align 8
  %3616 = insertvalue { ptr, ptr, ptr, i32 } %3614, ptr %3615, 1
  %3617 = load ptr, ptr %737, align 8
  %3618 = insertvalue { ptr, ptr, ptr, i32 } %3616, ptr %3617, 2
  %3619 = load i32, ptr %736, align 4
  %3620 = insertvalue { ptr, ptr, ptr, i32 } %3618, i32 %3619, 3
  %3621 = getelementptr [1 x ptr], ptr %744, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %3621, align 8
  %3622 = call ptr @llvm.invariant.start.p0(i64 1, ptr %744)
  %3623 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3613)
  %3624 = getelementptr ptr, ptr %3613, i32 %3619
  %3625 = getelementptr ptr, ptr %3624, i32 18
  %3626 = load ptr, ptr %3625, align 8
  %3627 = getelementptr { ptr }, ptr %745, i32 0, i32 0
  store ptr @function_typ, ptr %3627, align 8
  %3628 = call ptr @behavior_wrapper(ptr %3626, { ptr, ptr, ptr, i32 } %3620, ptr %745)
  %3629 = call { ptr, ptr, ptr, i32 } %3628({ ptr, ptr, ptr, i32 } %3620, { ptr, ptr, ptr, i32 } %3620, ptr %744, { ptr } %3552) #15
  store { ptr, ptr, ptr, i32 } %3629, ptr %746, align 8
  %3630 = getelementptr { ptr, ptr, ptr, i32 }, ptr %746, i32 0, i32 0
  %3631 = getelementptr { ptr, ptr, ptr, i32 }, ptr %747, i32 0, i32 0
  %3632 = load ptr, ptr %3630, align 8
  store ptr %3632, ptr %3631, align 8
  %3633 = getelementptr { ptr, ptr, ptr, i32 }, ptr %746, i32 0, i32 1
  %3634 = getelementptr { ptr, ptr, ptr, i32 }, ptr %747, i32 0, i32 1
  %3635 = load ptr, ptr %3633, align 8
  store ptr %3635, ptr %3634, align 8
  %3636 = getelementptr { ptr, ptr, ptr, i32 }, ptr %746, i32 0, i32 2
  %3637 = getelementptr { ptr, ptr, ptr, i32 }, ptr %747, i32 0, i32 2
  %3638 = load ptr, ptr %3636, align 8
  store ptr %3638, ptr %3637, align 8
  %3639 = getelementptr { ptr, ptr, ptr, i32 }, ptr %746, i32 0, i32 3
  %3640 = getelementptr { ptr, ptr, ptr, i32 }, ptr %747, i32 0, i32 3
  %3641 = load i32, ptr %3639, align 4
  store i32 %3641, ptr %3640, align 4
  call void @set_offset(ptr %747, ptr @IntArray)
  %3642 = load ptr, ptr %3631, align 8
  %3643 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3642, 0
  %3644 = load ptr, ptr %3634, align 8
  %3645 = insertvalue { ptr, ptr, ptr, i32 } %3643, ptr %3644, 1
  %3646 = load ptr, ptr %3637, align 8
  %3647 = insertvalue { ptr, ptr, ptr, i32 } %3645, ptr %3646, 2
  %3648 = load i32, ptr %3640, align 4
  %3649 = insertvalue { ptr, ptr, ptr, i32 } %3647, i32 %3648, 3
  %3650 = getelementptr [2 x ptr], ptr %748, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3650, align 8
  %3651 = getelementptr [2 x ptr], ptr %748, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri32, ptr %3651, align 8
  %3652 = call ptr @llvm.invariant.start.p0(i64 4, ptr %748)
  %3653 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3642)
  %3654 = getelementptr ptr, ptr %3642, i32 %3648
  %3655 = getelementptr ptr, ptr %3654, i32 15
  %3656 = load ptr, ptr %3655, align 8
  %3657 = getelementptr { ptr, ptr }, ptr %749, i32 0, i32 0
  store ptr @i32_typ, ptr %3657, align 8
  %3658 = getelementptr { ptr, ptr }, ptr %749, i32 0, i32 1
  store ptr @function_typ, ptr %3658, align 8
  %3659 = call ptr @behavior_wrapper(ptr %3656, { ptr, ptr, ptr, i32 } %3649, ptr %749)
  %3660 = call i32 %3659({ ptr, ptr, ptr, i32 } %3649, { ptr, ptr, ptr, i32 } %3649, ptr %748, i32 %3546, { ptr } %3549) #15
  store i32 %3660, ptr %750, align 4
  %3661 = load i32, ptr %750, align 4
  store i32 %3661, ptr %751, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %753, align 4
  %3662 = load i64, ptr %753, align 4
  store i64 %3662, ptr %752, align 4
  %3663 = load ptr, ptr %752, align 8
  %3664 = insertvalue { ptr, i160 } undef, ptr %3663, 0
  %3665 = load i160, ptr %751, align 4
  %3666 = insertvalue { ptr, i160 } %3664, i160 %3665, 1
  %3667 = getelementptr [1 x ptr], ptr %754, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3667, align 8
  %3668 = call ptr @llvm.invariant.start.p0(i64 1, ptr %754)
  %3669 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3670 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3671 = getelementptr { ptr }, ptr %755, i32 0, i32 0
  store ptr %3663, ptr %3671, align 8
  %3672 = call ptr @class_behavior_wrapper(ptr %3670, ptr %755)
  call void %3672(ptr %754, { ptr, i160 } %3666) #15
  store ptr @_functionliteral_atwhrfvhau, ptr %756, align 8
  %3673 = getelementptr { ptr }, ptr %756, i32 0, i32 0
  %3674 = load ptr, ptr %3673, align 8
  %3675 = insertvalue { ptr } undef, ptr %3674, 0
  store i32 5, ptr %757, align 4
  %3676 = load i32, ptr %757, align 4
  %3677 = sext i32 %3676 to i64
  %3678 = mul i64 %3677, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %3679 = call ptr @bump_malloc(i64 %3678)
  store ptr %3679, ptr %758, align 8
  %3680 = getelementptr { ptr }, ptr %758, i32 0, i32 0
  %3681 = load ptr, ptr %3680, align 8
  store ptr %3681, ptr %759, align 8
  store i32 5, ptr %760, align 4
  store i32 0, ptr %761, align 4
  %3682 = load ptr, ptr %759, align 8
  %3683 = load i32, ptr %761, align 4
  %3684 = sext i32 %3683 to i64
  %3685 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3684
  %3686 = getelementptr i8, ptr %3682, i64 %3685
  %3687 = load i32, ptr %760, align 4
  store i32 %3687, ptr %3686, align 4
  store i32 6, ptr %762, align 4
  store i32 1, ptr %763, align 4
  %3688 = load ptr, ptr %759, align 8
  %3689 = load i32, ptr %763, align 4
  %3690 = sext i32 %3689 to i64
  %3691 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3690
  %3692 = getelementptr i8, ptr %3688, i64 %3691
  %3693 = load i32, ptr %762, align 4
  store i32 %3693, ptr %3692, align 4
  store i32 7, ptr %764, align 4
  store i32 2, ptr %765, align 4
  %3694 = load ptr, ptr %759, align 8
  %3695 = load i32, ptr %765, align 4
  %3696 = sext i32 %3695 to i64
  %3697 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3696
  %3698 = getelementptr i8, ptr %3694, i64 %3697
  %3699 = load i32, ptr %764, align 4
  store i32 %3699, ptr %3698, align 4
  store i32 8, ptr %766, align 4
  store i32 3, ptr %767, align 4
  %3700 = load ptr, ptr %759, align 8
  %3701 = load i32, ptr %767, align 4
  %3702 = sext i32 %3701 to i64
  %3703 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3702
  %3704 = getelementptr i8, ptr %3700, i64 %3703
  %3705 = load i32, ptr %766, align 4
  store i32 %3705, ptr %3704, align 4
  store i32 4, ptr %768, align 4
  store i32 5, ptr %769, align 4
  store ptr @IntArray, ptr %770, align 8
  %3706 = load ptr, ptr %770, align 8
  %3707 = getelementptr ptr, ptr %3706, i32 6
  %3708 = load ptr, ptr %3707, align 8
  %3709 = call { i64, i64 } @size_wrapper(ptr %3708, ptr %770)
  %3710 = extractvalue { i64, i64 } %3709, 0
  %3711 = call ptr @bump_malloc(i64 %3710)
  store ptr @IntArray, ptr %774, align 8
  store ptr %3711, ptr %773, align 8
  store i32 10, ptr %771, align 4
  store i32 4, ptr %775, align 4
  store i32 5, ptr %776, align 4
  %3712 = load ptr, ptr %759, align 8
  %3713 = insertvalue { ptr } undef, ptr %3712, 0
  %3714 = load i32, ptr %775, align 4
  %3715 = load i32, ptr %776, align 4
  %3716 = load ptr, ptr %774, align 8
  %3717 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3716, 0
  %3718 = load ptr, ptr %773, align 8
  %3719 = insertvalue { ptr, ptr, ptr, i32 } %3717, ptr %3718, 1
  %3720 = load ptr, ptr %772, align 8
  %3721 = insertvalue { ptr, ptr, ptr, i32 } %3719, ptr %3720, 2
  %3722 = load i32, ptr %771, align 4
  %3723 = insertvalue { ptr, ptr, ptr, i32 } %3721, i32 %3722, 3
  %3724 = getelementptr [3 x ptr], ptr %777, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3724, align 8
  %3725 = getelementptr [3 x ptr], ptr %777, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3725, align 8
  %3726 = getelementptr [3 x ptr], ptr %777, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3726, align 8
  %3727 = call ptr @llvm.invariant.start.p0(i64 9, ptr %777)
  %3728 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3716)
  %3729 = getelementptr ptr, ptr %3716, i32 %3722
  %3730 = getelementptr ptr, ptr %3729, i32 5
  %3731 = load ptr, ptr %3730, align 8
  %3732 = getelementptr { ptr, ptr, ptr }, ptr %778, i32 0, i32 0
  store ptr @buffer_typ, ptr %3732, align 8
  %3733 = getelementptr { ptr, ptr, ptr }, ptr %778, i32 0, i32 1
  store ptr @i32_typ, ptr %3733, align 8
  %3734 = getelementptr { ptr, ptr, ptr }, ptr %778, i32 0, i32 2
  store ptr @i32_typ, ptr %3734, align 8
  %3735 = call ptr @behavior_wrapper(ptr %3731, { ptr, ptr, ptr, i32 } %3723, ptr %778)
  call void %3735({ ptr, ptr, ptr, i32 } %3723, { ptr, ptr, ptr, i32 } %3723, ptr %777, { ptr } %3713, i32 %3714, i32 %3715) #15
  %3736 = load ptr, ptr %774, align 8
  %3737 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3736, 0
  %3738 = load ptr, ptr %773, align 8
  %3739 = insertvalue { ptr, ptr, ptr, i32 } %3737, ptr %3738, 1
  %3740 = load ptr, ptr %772, align 8
  %3741 = insertvalue { ptr, ptr, ptr, i32 } %3739, ptr %3740, 2
  %3742 = load i32, ptr %771, align 4
  %3743 = insertvalue { ptr, ptr, ptr, i32 } %3741, i32 %3742, 3
  %3744 = getelementptr [1 x ptr], ptr %779, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Nothing, ptr %3744, align 8
  %3745 = call ptr @llvm.invariant.start.p0(i64 1, ptr %779)
  %3746 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3736)
  %3747 = getelementptr ptr, ptr %3736, i32 %3742
  %3748 = getelementptr ptr, ptr %3747, i32 14
  %3749 = load ptr, ptr %3748, align 8
  %3750 = getelementptr { ptr }, ptr %780, i32 0, i32 0
  store ptr @function_typ, ptr %3750, align 8
  %3751 = call ptr @behavior_wrapper(ptr %3749, { ptr, ptr, ptr, i32 } %3743, ptr %780)
  call void %3751({ ptr, ptr, ptr, i32 } %3743, { ptr, ptr, ptr, i32 } %3743, ptr %779, { ptr } %3675) #15
  store i32 13, ptr %781, align 4
  %3752 = load i32, ptr %781, align 4
  %3753 = sext i32 %3752 to i64
  %3754 = mul i64 %3753, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %3755 = call ptr @bump_malloc(i64 %3754)
  store ptr %3755, ptr %782, align 8
  %3756 = getelementptr { ptr }, ptr %782, i32 0, i32 0
  %3757 = load ptr, ptr %3756, align 8
  store ptr %3757, ptr %783, align 8
  store i32 0, ptr %784, align 4
  %3758 = load ptr, ptr %783, align 8
  %3759 = load i32, ptr %784, align 4
  %3760 = sext i32 %3759 to i64
  %3761 = mul i64 ptrtoint (ptr getelementptr ([12 x i8], ptr null, i32 1) to i64), %3760
  %3762 = getelementptr i8, ptr %3758, i64 %3761
  %3763 = load <12 x i8>, ptr @sciqs_bigtingstxt, align 16
  store <12 x i8> %3763, ptr %3762, align 16
  store i32 12, ptr %785, align 4
  store i32 13, ptr %786, align 4
  store ptr @String, ptr %787, align 8
  %3764 = load ptr, ptr %787, align 8
  %3765 = getelementptr ptr, ptr %3764, i32 6
  %3766 = load ptr, ptr %3765, align 8
  %3767 = call { i64, i64 } @size_wrapper(ptr %3766, ptr %787)
  %3768 = extractvalue { i64, i64 } %3767, 0
  %3769 = call ptr @bump_malloc(i64 %3768)
  store ptr @String, ptr %791, align 8
  store ptr %3769, ptr %790, align 8
  store i32 10, ptr %788, align 4
  store i32 12, ptr %792, align 4
  store i32 13, ptr %793, align 4
  %3770 = load ptr, ptr %783, align 8
  %3771 = insertvalue { ptr } undef, ptr %3770, 0
  %3772 = load i32, ptr %792, align 4
  %3773 = load i32, ptr %793, align 4
  %3774 = load ptr, ptr %791, align 8
  %3775 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3774, 0
  %3776 = load ptr, ptr %790, align 8
  %3777 = insertvalue { ptr, ptr, ptr, i32 } %3775, ptr %3776, 1
  %3778 = load ptr, ptr %789, align 8
  %3779 = insertvalue { ptr, ptr, ptr, i32 } %3777, ptr %3778, 2
  %3780 = load i32, ptr %788, align 4
  %3781 = insertvalue { ptr, ptr, ptr, i32 } %3779, i32 %3780, 3
  %3782 = getelementptr [3 x ptr], ptr %794, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3782, align 8
  %3783 = getelementptr [3 x ptr], ptr %794, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3783, align 8
  %3784 = getelementptr [3 x ptr], ptr %794, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3784, align 8
  %3785 = call ptr @llvm.invariant.start.p0(i64 9, ptr %794)
  %3786 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3774)
  %3787 = getelementptr ptr, ptr %3774, i32 %3780
  %3788 = getelementptr ptr, ptr %3787, i32 4
  %3789 = load ptr, ptr %3788, align 8
  %3790 = getelementptr { ptr, ptr, ptr }, ptr %795, i32 0, i32 0
  store ptr @buffer_typ, ptr %3790, align 8
  %3791 = getelementptr { ptr, ptr, ptr }, ptr %795, i32 0, i32 1
  store ptr @i32_typ, ptr %3791, align 8
  %3792 = getelementptr { ptr, ptr, ptr }, ptr %795, i32 0, i32 2
  store ptr @i32_typ, ptr %3792, align 8
  %3793 = call ptr @behavior_wrapper(ptr %3789, { ptr, ptr, ptr, i32 } %3781, ptr %795)
  call void %3793({ ptr, ptr, ptr, i32 } %3781, { ptr, ptr, ptr, i32 } %3781, ptr %794, { ptr } %3771, i32 %3772, i32 %3773) #15
  store i32 21, ptr %796, align 4
  %3794 = load i32, ptr %796, align 4
  %3795 = sext i32 %3794 to i64
  %3796 = mul i64 %3795, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %3797 = call ptr @bump_malloc(i64 %3796)
  store ptr %3797, ptr %797, align 8
  %3798 = getelementptr { ptr }, ptr %797, i32 0, i32 0
  %3799 = load ptr, ptr %3798, align 8
  store ptr %3799, ptr %798, align 8
  store i32 0, ptr %799, align 4
  %3800 = load ptr, ptr %798, align 8
  %3801 = load i32, ptr %799, align 4
  %3802 = sext i32 %3801 to i64
  %3803 = mul i64 ptrtoint (ptr getelementptr ([20 x i8], ptr null, i32 1) to i64), %3802
  %3804 = getelementptr i8, ptr %3800, i64 %3803
  %3805 = load <20 x i8>, ptr @pmocy_thisnis_hownwe_donit, align 32
  store <20 x i8> %3805, ptr %3804, align 32
  store i32 20, ptr %800, align 4
  store i32 21, ptr %801, align 4
  store ptr @String, ptr %802, align 8
  %3806 = load ptr, ptr %802, align 8
  %3807 = getelementptr ptr, ptr %3806, i32 6
  %3808 = load ptr, ptr %3807, align 8
  %3809 = call { i64, i64 } @size_wrapper(ptr %3808, ptr %802)
  %3810 = extractvalue { i64, i64 } %3809, 0
  %3811 = call ptr @bump_malloc(i64 %3810)
  store ptr @String, ptr %806, align 8
  store ptr %3811, ptr %805, align 8
  store i32 10, ptr %803, align 4
  store i32 20, ptr %807, align 4
  store i32 21, ptr %808, align 4
  %3812 = load ptr, ptr %798, align 8
  %3813 = insertvalue { ptr } undef, ptr %3812, 0
  %3814 = load i32, ptr %807, align 4
  %3815 = load i32, ptr %808, align 4
  %3816 = load ptr, ptr %806, align 8
  %3817 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3816, 0
  %3818 = load ptr, ptr %805, align 8
  %3819 = insertvalue { ptr, ptr, ptr, i32 } %3817, ptr %3818, 1
  %3820 = load ptr, ptr %804, align 8
  %3821 = insertvalue { ptr, ptr, ptr, i32 } %3819, ptr %3820, 2
  %3822 = load i32, ptr %803, align 4
  %3823 = insertvalue { ptr, ptr, ptr, i32 } %3821, i32 %3822, 3
  %3824 = getelementptr [3 x ptr], ptr %809, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3824, align 8
  %3825 = getelementptr [3 x ptr], ptr %809, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3825, align 8
  %3826 = getelementptr [3 x ptr], ptr %809, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3826, align 8
  %3827 = call ptr @llvm.invariant.start.p0(i64 9, ptr %809)
  %3828 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3816)
  %3829 = getelementptr ptr, ptr %3816, i32 %3822
  %3830 = getelementptr ptr, ptr %3829, i32 4
  %3831 = load ptr, ptr %3830, align 8
  %3832 = getelementptr { ptr, ptr, ptr }, ptr %810, i32 0, i32 0
  store ptr @buffer_typ, ptr %3832, align 8
  %3833 = getelementptr { ptr, ptr, ptr }, ptr %810, i32 0, i32 1
  store ptr @i32_typ, ptr %3833, align 8
  %3834 = getelementptr { ptr, ptr, ptr }, ptr %810, i32 0, i32 2
  store ptr @i32_typ, ptr %3834, align 8
  %3835 = call ptr @behavior_wrapper(ptr %3831, { ptr, ptr, ptr, i32 } %3823, ptr %810)
  call void %3835({ ptr, ptr, ptr, i32 } %3823, { ptr, ptr, ptr, i32 } %3823, ptr %809, { ptr } %3813, i32 %3814, i32 %3815) #15
  %3836 = load ptr, ptr %791, align 8
  %3837 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3836, 0
  %3838 = load ptr, ptr %790, align 8
  %3839 = insertvalue { ptr, ptr, ptr, i32 } %3837, ptr %3838, 1
  %3840 = load ptr, ptr %789, align 8
  %3841 = insertvalue { ptr, ptr, ptr, i32 } %3839, ptr %3840, 2
  %3842 = load i32, ptr %788, align 4
  %3843 = insertvalue { ptr, ptr, ptr, i32 } %3841, i32 %3842, 3
  %3844 = load ptr, ptr %806, align 8
  %3845 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3844, 0
  %3846 = load ptr, ptr %805, align 8
  %3847 = insertvalue { ptr, ptr, ptr, i32 } %3845, ptr %3846, 1
  %3848 = load ptr, ptr %804, align 8
  %3849 = insertvalue { ptr, ptr, ptr, i32 } %3847, ptr %3848, 2
  %3850 = load i32, ptr %803, align 4
  %3851 = insertvalue { ptr, ptr, ptr, i32 } %3849, i32 %3850, 3
  call void @write_file({ ptr, ptr, ptr, i32 } %3843, { ptr, ptr, ptr, i32 } %3851)
  store i32 13, ptr %811, align 4
  %3852 = load i32, ptr %811, align 4
  %3853 = sext i32 %3852 to i64
  %3854 = mul i64 %3853, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %3855 = call ptr @bump_malloc(i64 %3854)
  store ptr %3855, ptr %812, align 8
  %3856 = getelementptr { ptr }, ptr %812, i32 0, i32 0
  %3857 = load ptr, ptr %3856, align 8
  store ptr %3857, ptr %813, align 8
  store i32 0, ptr %814, align 4
  %3858 = load ptr, ptr %813, align 8
  %3859 = load i32, ptr %814, align 4
  %3860 = sext i32 %3859 to i64
  %3861 = mul i64 ptrtoint (ptr getelementptr ([12 x i8], ptr null, i32 1) to i64), %3860
  %3862 = getelementptr i8, ptr %3858, i64 %3861
  %3863 = load <12 x i8>, ptr @mutqy_bigtingstxt, align 16
  store <12 x i8> %3863, ptr %3862, align 16
  store i32 12, ptr %815, align 4
  store i32 13, ptr %816, align 4
  store ptr @String, ptr %817, align 8
  %3864 = load ptr, ptr %817, align 8
  %3865 = getelementptr ptr, ptr %3864, i32 6
  %3866 = load ptr, ptr %3865, align 8
  %3867 = call { i64, i64 } @size_wrapper(ptr %3866, ptr %817)
  %3868 = extractvalue { i64, i64 } %3867, 0
  %3869 = call ptr @bump_malloc(i64 %3868)
  store ptr @String, ptr %821, align 8
  store ptr %3869, ptr %820, align 8
  store i32 10, ptr %818, align 4
  store i32 12, ptr %822, align 4
  store i32 13, ptr %823, align 4
  %3870 = load ptr, ptr %813, align 8
  %3871 = insertvalue { ptr } undef, ptr %3870, 0
  %3872 = load i32, ptr %822, align 4
  %3873 = load i32, ptr %823, align 4
  %3874 = load ptr, ptr %821, align 8
  %3875 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3874, 0
  %3876 = load ptr, ptr %820, align 8
  %3877 = insertvalue { ptr, ptr, ptr, i32 } %3875, ptr %3876, 1
  %3878 = load ptr, ptr %819, align 8
  %3879 = insertvalue { ptr, ptr, ptr, i32 } %3877, ptr %3878, 2
  %3880 = load i32, ptr %818, align 4
  %3881 = insertvalue { ptr, ptr, ptr, i32 } %3879, i32 %3880, 3
  %3882 = getelementptr [3 x ptr], ptr %824, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3882, align 8
  %3883 = getelementptr [3 x ptr], ptr %824, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3883, align 8
  %3884 = getelementptr [3 x ptr], ptr %824, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3884, align 8
  %3885 = call ptr @llvm.invariant.start.p0(i64 9, ptr %824)
  %3886 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3874)
  %3887 = getelementptr ptr, ptr %3874, i32 %3880
  %3888 = getelementptr ptr, ptr %3887, i32 4
  %3889 = load ptr, ptr %3888, align 8
  %3890 = getelementptr { ptr, ptr, ptr }, ptr %825, i32 0, i32 0
  store ptr @buffer_typ, ptr %3890, align 8
  %3891 = getelementptr { ptr, ptr, ptr }, ptr %825, i32 0, i32 1
  store ptr @i32_typ, ptr %3891, align 8
  %3892 = getelementptr { ptr, ptr, ptr }, ptr %825, i32 0, i32 2
  store ptr @i32_typ, ptr %3892, align 8
  %3893 = call ptr @behavior_wrapper(ptr %3889, { ptr, ptr, ptr, i32 } %3881, ptr %825)
  call void %3893({ ptr, ptr, ptr, i32 } %3881, { ptr, ptr, ptr, i32 } %3881, ptr %824, { ptr } %3871, i32 %3872, i32 %3873) #15
  %3894 = load ptr, ptr %821, align 8
  %3895 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3894, 0
  %3896 = load ptr, ptr %820, align 8
  %3897 = insertvalue { ptr, ptr, ptr, i32 } %3895, ptr %3896, 1
  %3898 = load ptr, ptr %819, align 8
  %3899 = insertvalue { ptr, ptr, ptr, i32 } %3897, ptr %3898, 2
  %3900 = load i32, ptr %818, align 4
  %3901 = insertvalue { ptr, ptr, ptr, i32 } %3899, i32 %3900, 3
  %3902 = call { ptr, ptr, ptr, i32 } @read_file({ ptr, ptr, ptr, i32 } %3901)
  store { ptr, ptr, ptr, i32 } %3902, ptr %826, align 8
  %3903 = getelementptr { ptr, i160 }, ptr %826, i32 0, i32 0
  %3904 = load ptr, ptr %3903, align 8
  %3905 = insertvalue { ptr, i160 } undef, ptr %3904, 0
  %3906 = getelementptr { ptr, i160 }, ptr %826, i32 0, i32 1
  %3907 = load i160, ptr %3906, align 4
  %3908 = insertvalue { ptr, i160 } %3905, i160 %3907, 1
  %3909 = getelementptr [1 x ptr], ptr %827, i32 0, i32 0
  store ptr @_parameterization_String, ptr %3909, align 8
  %3910 = call ptr @llvm.invariant.start.p0(i64 1, ptr %827)
  %3911 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3912 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3913 = getelementptr { ptr }, ptr %828, i32 0, i32 0
  store ptr %3904, ptr %3913, align 8
  %3914 = call ptr @class_behavior_wrapper(ptr %3912, ptr %828)
  call void %3914(ptr %827, { ptr, i160 } %3908) #15
  store ptr @_functionliteral_xwqjhjpryd, ptr %829, align 8
  %3915 = getelementptr { ptr }, ptr %829, i32 0, i32 0
  %3916 = load ptr, ptr %3915, align 8
  %3917 = insertvalue { ptr } undef, ptr %3916, 0
  store i32 2, ptr %830, align 4
  store i32 5, ptr %831, align 4
  store ptr @Range, ptr %832, align 8
  %3918 = load ptr, ptr %832, align 8
  %3919 = getelementptr ptr, ptr %3918, i32 6
  %3920 = load ptr, ptr %3919, align 8
  %3921 = call { i64, i64 } @size_wrapper(ptr %3920, ptr %832)
  %3922 = extractvalue { i64, i64 } %3921, 0
  %3923 = call ptr @bump_malloc(i64 %3922)
  store ptr @Range, ptr %836, align 8
  store ptr %3923, ptr %835, align 8
  store i32 10, ptr %833, align 4
  store i32 2, ptr %837, align 4
  store i32 5, ptr %838, align 4
  %3924 = load i32, ptr %837, align 4
  %3925 = load i32, ptr %838, align 4
  %3926 = load ptr, ptr %836, align 8
  %3927 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3926, 0
  %3928 = load ptr, ptr %835, align 8
  %3929 = insertvalue { ptr, ptr, ptr, i32 } %3927, ptr %3928, 1
  %3930 = load ptr, ptr %834, align 8
  %3931 = insertvalue { ptr, ptr, ptr, i32 } %3929, ptr %3930, 2
  %3932 = load i32, ptr %833, align 4
  %3933 = insertvalue { ptr, ptr, ptr, i32 } %3931, i32 %3932, 3
  %3934 = getelementptr [2 x ptr], ptr %839, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3934, align 8
  %3935 = getelementptr [2 x ptr], ptr %839, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3935, align 8
  %3936 = call ptr @llvm.invariant.start.p0(i64 4, ptr %839)
  %3937 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3926)
  %3938 = getelementptr ptr, ptr %3926, i32 %3932
  %3939 = getelementptr ptr, ptr %3938, i32 4
  %3940 = load ptr, ptr %3939, align 8
  %3941 = getelementptr { ptr, ptr }, ptr %840, i32 0, i32 0
  store ptr @i32_typ, ptr %3941, align 8
  %3942 = getelementptr { ptr, ptr }, ptr %840, i32 0, i32 1
  store ptr @i32_typ, ptr %3942, align 8
  %3943 = call ptr @behavior_wrapper(ptr %3940, { ptr, ptr, ptr, i32 } %3933, ptr %840)
  call void %3943({ ptr, ptr, ptr, i32 } %3933, { ptr, ptr, ptr, i32 } %3933, ptr %839, i32 %3924, i32 %3925) #15
  %3944 = load ptr, ptr %836, align 8
  %3945 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3944, 0
  %3946 = load ptr, ptr %835, align 8
  %3947 = insertvalue { ptr, ptr, ptr, i32 } %3945, ptr %3946, 1
  %3948 = load ptr, ptr %834, align 8
  %3949 = insertvalue { ptr, ptr, ptr, i32 } %3947, ptr %3948, 2
  %3950 = load i32, ptr %833, align 4
  %3951 = insertvalue { ptr, ptr, ptr, i32 } %3949, i32 %3950, 3
  %3952 = getelementptr [1 x ptr], ptr %841, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Nothing, ptr %3952, align 8
  %3953 = call ptr @llvm.invariant.start.p0(i64 1, ptr %841)
  %3954 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3944)
  %3955 = getelementptr ptr, ptr %3944, i32 %3950
  %3956 = getelementptr ptr, ptr %3955, i32 6
  %3957 = load ptr, ptr %3956, align 8
  %3958 = getelementptr { ptr }, ptr %842, i32 0, i32 0
  store ptr @function_typ, ptr %3958, align 8
  %3959 = call ptr @behavior_wrapper(ptr %3957, { ptr, ptr, ptr, i32 } %3951, ptr %842)
  call void %3959({ ptr, ptr, ptr, i32 } %3951, { ptr, ptr, ptr, i32 } %3951, ptr %841, { ptr } %3917) #15
  store ptr @i32toi8, ptr %843, align 8
  store i32 5, ptr %844, align 4
  %3960 = load i32, ptr %844, align 4
  %3961 = load ptr, ptr %843, align 8
  %3962 = call i8 %3961(i32 %3960)
  store i8 %3962, ptr %845, align 1
  %3963 = load i8, ptr %845, align 1
  store i8 %3963, ptr %846, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %848, align 4
  %3964 = load i64, ptr %848, align 4
  store i64 %3964, ptr %847, align 4
  %3965 = load ptr, ptr %847, align 8
  %3966 = insertvalue { ptr, i160 } undef, ptr %3965, 0
  %3967 = load i160, ptr %846, align 4
  %3968 = insertvalue { ptr, i160 } %3966, i160 %3967, 1
  %3969 = getelementptr [1 x ptr], ptr %849, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %3969, align 8
  %3970 = call ptr @llvm.invariant.start.p0(i64 1, ptr %849)
  %3971 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3972 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %3973 = getelementptr { ptr }, ptr %850, i32 0, i32 0
  store ptr %3965, ptr %3973, align 8
  %3974 = call ptr @class_behavior_wrapper(ptr %3972, ptr %850)
  call void %3974(ptr %849, { ptr, i160 } %3968) #15
  store ptr @_functionliteral_zcwfishgpw, ptr %851, align 8
  store i32 6, ptr %852, align 4
  store i32 4, ptr %853, align 4
  %3975 = load i32, ptr %852, align 4
  %3976 = load i32, ptr %853, align 4
  %3977 = load ptr, ptr %851, align 8
  %3978 = call ptr @coroutine_create(ptr %3977, ptr @coroutine_zerlfaimah_passer)
  call void @coroutine_zerlfaimah_buffer_filler(ptr %3978, i32 %3975, i32 %3976)
  store ptr %3978, ptr %854, align 8
  %3979 = getelementptr { ptr }, ptr %854, i32 0, i32 0
  %3980 = load ptr, ptr %3979, align 8
  store ptr %3980, ptr %855, align 8
  store i32 2, ptr %856, align 4
  %3981 = load i32, ptr %856, align 4
  store i32 %3981, ptr %857, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %859, align 4
  %3982 = load i64, ptr %859, align 4
  store i64 %3982, ptr %858, align 4
  %3983 = load ptr, ptr %858, align 8
  %3984 = insertvalue { ptr, i32 } undef, ptr %3983, 0
  %3985 = load i32, ptr %857, align 4
  %3986 = insertvalue { ptr, i32 } %3984, i32 %3985, 1
  %3987 = load ptr, ptr %855, align 8
  %3988 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %3987, i32 0, i32 4
  store { ptr, i32 } %3986, ptr %3988, align 8
  %3989 = load ptr, ptr %855, align 8
  call void @coroutine_call(ptr %3989)
  %3990 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %3989, i32 0, i32 4
  %3991 = load { ptr, i32 }, ptr %3990, align 8
  store { ptr, i32 } %3991, ptr %860, align 8
  %3992 = getelementptr { ptr, i32 }, ptr %860, i32 0, i32 0
  %3993 = getelementptr { ptr, i32 }, ptr %861, i32 0, i32 0
  %3994 = load ptr, ptr %3992, align 8
  store ptr %3994, ptr %3993, align 8
  %3995 = getelementptr { ptr, i32 }, ptr %860, i32 0, i32 1
  %3996 = getelementptr { ptr, i32 }, ptr %861, i32 0, i32 1
  %3997 = load i32, ptr %3995, align 4
  store i32 %3997, ptr %3996, align 4
  %3998 = getelementptr { ptr, i160 }, ptr %861, i32 0, i32 0
  %3999 = load ptr, ptr %3998, align 8
  %4000 = insertvalue { ptr, i160 } undef, ptr %3999, 0
  %4001 = getelementptr { ptr, i160 }, ptr %861, i32 0, i32 1
  %4002 = load i160, ptr %4001, align 4
  %4003 = insertvalue { ptr, i160 } %4000, i160 %4002, 1
  %4004 = getelementptr [1 x ptr], ptr %862, i32 0, i32 0
  store ptr @_parameterization_Ptri32_or_Nil, ptr %4004, align 8
  %4005 = call ptr @llvm.invariant.start.p0(i64 1, ptr %862)
  %4006 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4007 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4008 = getelementptr { ptr }, ptr %863, i32 0, i32 0
  store ptr %3999, ptr %4008, align 8
  %4009 = call ptr @class_behavior_wrapper(ptr %4007, ptr %863)
  call void %4009(ptr %862, { ptr, i160 } %4003) #15
  store i32 3, ptr %864, align 4
  %4010 = load i32, ptr %864, align 4
  store i32 %4010, ptr %865, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %867, align 4
  %4011 = load i64, ptr %867, align 4
  store i64 %4011, ptr %866, align 4
  %4012 = load ptr, ptr %866, align 8
  %4013 = insertvalue { ptr, i32 } undef, ptr %4012, 0
  %4014 = load i32, ptr %865, align 4
  %4015 = insertvalue { ptr, i32 } %4013, i32 %4014, 1
  %4016 = load ptr, ptr %855, align 8
  %4017 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4016, i32 0, i32 4
  store { ptr, i32 } %4015, ptr %4017, align 8
  %4018 = load ptr, ptr %855, align 8
  call void @coroutine_call(ptr %4018)
  %4019 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4018, i32 0, i32 4
  %4020 = load { ptr, i32 }, ptr %4019, align 8
  store { ptr, i32 } %4020, ptr %868, align 8
  %4021 = getelementptr { ptr, i32 }, ptr %868, i32 0, i32 0
  %4022 = getelementptr { ptr, i32 }, ptr %869, i32 0, i32 0
  %4023 = load ptr, ptr %4021, align 8
  store ptr %4023, ptr %4022, align 8
  %4024 = getelementptr { ptr, i32 }, ptr %868, i32 0, i32 1
  %4025 = getelementptr { ptr, i32 }, ptr %869, i32 0, i32 1
  %4026 = load i32, ptr %4024, align 4
  store i32 %4026, ptr %4025, align 4
  %4027 = getelementptr { ptr, i160 }, ptr %869, i32 0, i32 0
  %4028 = load ptr, ptr %4027, align 8
  %4029 = insertvalue { ptr, i160 } undef, ptr %4028, 0
  %4030 = getelementptr { ptr, i160 }, ptr %869, i32 0, i32 1
  %4031 = load i160, ptr %4030, align 4
  %4032 = insertvalue { ptr, i160 } %4029, i160 %4031, 1
  %4033 = getelementptr [1 x ptr], ptr %870, i32 0, i32 0
  store ptr @_parameterization_Ptri32_or_Nil, ptr %4033, align 8
  %4034 = call ptr @llvm.invariant.start.p0(i64 1, ptr %870)
  %4035 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4036 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4037 = getelementptr { ptr }, ptr %871, i32 0, i32 0
  store ptr %4028, ptr %4037, align 8
  %4038 = call ptr @class_behavior_wrapper(ptr %4036, ptr %871)
  call void %4038(ptr %870, { ptr, i160 } %4032) #15
  %4039 = load ptr, ptr %720, align 8
  %4040 = call ptr @coroutine_create(ptr %4039, ptr @coroutine_lxaqpmihnb_passer)
  call void @coroutine_lxaqpmihnb_buffer_filler(ptr %4040)
  store ptr %4040, ptr %872, align 8
  %4041 = getelementptr { ptr }, ptr %872, i32 0, i32 0
  %4042 = load ptr, ptr %4041, align 8
  store ptr %4042, ptr %873, align 8
  %4043 = load ptr, ptr %873, align 8
  call void @coroutine_call(ptr %4043)
  %4044 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %4043, i32 0, i32 4
  %4045 = load { ptr, i160 }, ptr %4044, align 8
  store { ptr, i160 } %4045, ptr %874, align 8
  %4046 = load ptr, ptr %873, align 8
  %4047 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4046, i32 0, i32 4
  %4048 = load { ptr, i32 }, ptr %4047, align 8
  store { ptr, i32 } %4048, ptr %875, align 8
  %4049 = getelementptr { ptr, i32 }, ptr %875, i32 0, i32 0
  %4050 = getelementptr { ptr, i32 }, ptr %876, i32 0, i32 0
  %4051 = load ptr, ptr %4049, align 8
  store ptr %4051, ptr %4050, align 8
  %4052 = getelementptr { ptr, i32 }, ptr %875, i32 0, i32 1
  %4053 = getelementptr { ptr, i32 }, ptr %876, i32 0, i32 1
  %4054 = load i32, ptr %4052, align 4
  store i32 %4054, ptr %4053, align 4
  %4055 = getelementptr { ptr, i160 }, ptr %876, i32 0, i32 0
  %4056 = load ptr, ptr %4055, align 8
  %4057 = insertvalue { ptr, i160 } undef, ptr %4056, 0
  %4058 = getelementptr { ptr, i160 }, ptr %876, i32 0, i32 1
  %4059 = load i160, ptr %4058, align 4
  %4060 = insertvalue { ptr, i160 } %4057, i160 %4059, 1
  %4061 = getelementptr [1 x ptr], ptr %877, i32 0, i32 0
  store ptr @_parameterization_Ptri32_or_Nil, ptr %4061, align 8
  %4062 = call ptr @llvm.invariant.start.p0(i64 1, ptr %877)
  %4063 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4064 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4065 = getelementptr { ptr }, ptr %878, i32 0, i32 0
  store ptr %4056, ptr %4065, align 8
  %4066 = call ptr @class_behavior_wrapper(ptr %4064, ptr %878)
  call void %4066(ptr %877, { ptr, i160 } %4060) #15
  store ptr @Channel, ptr %879, align 8
  %4067 = load ptr, ptr %879, align 8
  %4068 = getelementptr ptr, ptr %4067, i32 6
  %4069 = load ptr, ptr %4068, align 8
  %4070 = call { i64, i64 } @size_wrapper(ptr %4069, ptr %879)
  %4071 = extractvalue { i64, i64 } %4070, 0
  %4072 = call ptr @bump_malloc(i64 %4071)
  store ptr @Channel, ptr %883, align 8
  store ptr %4072, ptr %882, align 8
  store i32 10, ptr %880, align 4
  %4073 = load ptr, ptr %883, align 8
  %4074 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4073, 0
  %4075 = load ptr, ptr %882, align 8
  %4076 = insertvalue { ptr, ptr, ptr, i32 } %4074, ptr %4075, 1
  %4077 = load ptr, ptr %881, align 8
  %4078 = insertvalue { ptr, ptr, ptr, i32 } %4076, ptr %4077, 2
  %4079 = load i32, ptr %880, align 4
  %4080 = insertvalue { ptr, ptr, ptr, i32 } %4078, i32 %4079, 3
  %4081 = call ptr @llvm.invariant.start.p0(i64 0, ptr %884)
  %4082 = call ptr @llvm.invariant.start.p0(i64 56, ptr %4073)
  %4083 = getelementptr ptr, ptr %4073, i32 %4079
  %4084 = getelementptr ptr, ptr %4083, i32 1
  %4085 = load ptr, ptr %4084, align 8
  %4086 = call ptr @behavior_wrapper(ptr %4085, { ptr, ptr, ptr, i32 } %4080, ptr %885)
  call void %4086({ ptr, ptr, ptr, i32 } %4080, { ptr, ptr, ptr, i32 } %4080, ptr %884) #15
  %4087 = getelementptr { ptr, ptr, ptr, i32 }, ptr %886, i32 0, i32 0
  %4088 = load ptr, ptr %883, align 8
  store ptr %4088, ptr %4087, align 8
  %4089 = getelementptr { ptr, ptr, ptr, i32 }, ptr %886, i32 0, i32 1
  %4090 = load ptr, ptr %882, align 8
  store ptr %4090, ptr %4089, align 8
  %4091 = getelementptr { ptr, ptr, ptr, i32 }, ptr %886, i32 0, i32 2
  %4092 = load ptr, ptr %881, align 8
  store ptr %4092, ptr %4091, align 8
  %4093 = getelementptr { ptr, ptr, ptr, i32 }, ptr %886, i32 0, i32 3
  %4094 = load i32, ptr %880, align 4
  store i32 %4094, ptr %4093, align 4
  call void @set_offset(ptr %886, ptr @Channel)
  %4095 = load ptr, ptr %4087, align 8
  store ptr %4095, ptr %890, align 8
  %4096 = load ptr, ptr %4089, align 8
  store ptr %4096, ptr %889, align 8
  %4097 = load ptr, ptr %4091, align 8
  store ptr %4097, ptr %888, align 8
  %4098 = load i32, ptr %4093, align 4
  store i32 %4098, ptr %887, align 4
  store ptr @_functionliteral_dhyzoofutg, ptr %891, align 8
  %4099 = load ptr, ptr %890, align 8
  %4100 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4099, 0
  %4101 = load ptr, ptr %889, align 8
  %4102 = insertvalue { ptr, ptr, ptr, i32 } %4100, ptr %4101, 1
  %4103 = load ptr, ptr %888, align 8
  %4104 = insertvalue { ptr, ptr, ptr, i32 } %4102, ptr %4103, 2
  %4105 = load i32, ptr %887, align 4
  %4106 = insertvalue { ptr, ptr, ptr, i32 } %4104, i32 %4105, 3
  %4107 = load ptr, ptr %891, align 8
  %4108 = call ptr @coroutine_create(ptr %4107, ptr @coroutine_xkuywylxja_passer)
  call void @coroutine_xkuywylxja_buffer_filler(ptr %4108, { ptr, ptr, ptr, i32 } %4106)
  store ptr %4108, ptr %892, align 8
  %4109 = getelementptr { ptr }, ptr %892, i32 0, i32 0
  %4110 = load ptr, ptr %4109, align 8
  store ptr %4110, ptr %893, align 8
  %4111 = load ptr, ptr %893, align 8
  call void @coroutine_call(ptr %4111)
  %4112 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %4111, i32 0, i32 4
  %4113 = load { ptr, i160 }, ptr %4112, align 8
  store { ptr, i160 } %4113, ptr %894, align 8
  %4114 = load ptr, ptr %890, align 8
  %4115 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4114, 0
  %4116 = load ptr, ptr %889, align 8
  %4117 = insertvalue { ptr, ptr, ptr, i32 } %4115, ptr %4116, 1
  %4118 = load ptr, ptr %888, align 8
  %4119 = insertvalue { ptr, ptr, ptr, i32 } %4117, ptr %4118, 2
  %4120 = load i32, ptr %887, align 4
  %4121 = insertvalue { ptr, ptr, ptr, i32 } %4119, i32 %4120, 3
  %4122 = call ptr @llvm.invariant.start.p0(i64 0, ptr %895)
  %4123 = call ptr @llvm.invariant.start.p0(i64 56, ptr %4114)
  %4124 = getelementptr ptr, ptr %4114, i32 %4120
  %4125 = getelementptr ptr, ptr %4124, i32 2
  %4126 = load ptr, ptr %4125, align 8
  %4127 = call ptr @behavior_wrapper(ptr %4126, { ptr, ptr, ptr, i32 } %4121, ptr %896)
  %4128 = call i32 %4127({ ptr, ptr, ptr, i32 } %4121, { ptr, ptr, ptr, i32 } %4121, ptr %895) #15
  store i32 %4128, ptr %897, align 4
  %4129 = load i32, ptr %897, align 4
  store i32 %4129, ptr %898, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %900, align 4
  %4130 = load i64, ptr %900, align 4
  store i64 %4130, ptr %899, align 4
  %4131 = load ptr, ptr %899, align 8
  %4132 = insertvalue { ptr, i160 } undef, ptr %4131, 0
  %4133 = load i160, ptr %898, align 4
  %4134 = insertvalue { ptr, i160 } %4132, i160 %4133, 1
  %4135 = getelementptr [1 x ptr], ptr %901, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4135, align 8
  %4136 = call ptr @llvm.invariant.start.p0(i64 1, ptr %901)
  %4137 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4138 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4139 = getelementptr { ptr }, ptr %902, i32 0, i32 0
  store ptr %4131, ptr %4139, align 8
  %4140 = call ptr @class_behavior_wrapper(ptr %4138, ptr %902)
  call void %4140(ptr %901, { ptr, i160 } %4134) #15
  store i32 0, ptr %903, align 4
  %4141 = load i32, ptr %903, align 4
  %4142 = load ptr, ptr %3547, align 8
  %4143 = insertvalue { ptr } undef, ptr %4142, 0
  store ptr @_functionliteral_qpqtvtqzif, ptr %904, align 8
  %4144 = getelementptr { ptr }, ptr %904, i32 0, i32 0
  %4145 = load ptr, ptr %4144, align 8
  %4146 = insertvalue { ptr } undef, ptr %4145, 0
  store ptr @_functionliteral_papvnxfhfl, ptr %905, align 8
  %4147 = getelementptr { ptr }, ptr %905, i32 0, i32 0
  %4148 = load ptr, ptr %4147, align 8
  %4149 = insertvalue { ptr } undef, ptr %4148, 0
  store i32 1, ptr %906, align 4
  store i32 15, ptr %907, align 4
  store ptr @Range, ptr %908, align 8
  %4150 = load ptr, ptr %908, align 8
  %4151 = getelementptr ptr, ptr %4150, i32 6
  %4152 = load ptr, ptr %4151, align 8
  %4153 = call { i64, i64 } @size_wrapper(ptr %4152, ptr %908)
  %4154 = extractvalue { i64, i64 } %4153, 0
  %4155 = call ptr @bump_malloc(i64 %4154)
  store ptr @Range, ptr %912, align 8
  store ptr %4155, ptr %911, align 8
  store i32 10, ptr %909, align 4
  store i32 1, ptr %913, align 4
  store i32 15, ptr %914, align 4
  %4156 = load i32, ptr %913, align 4
  %4157 = load i32, ptr %914, align 4
  %4158 = load ptr, ptr %912, align 8
  %4159 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4158, 0
  %4160 = load ptr, ptr %911, align 8
  %4161 = insertvalue { ptr, ptr, ptr, i32 } %4159, ptr %4160, 1
  %4162 = load ptr, ptr %910, align 8
  %4163 = insertvalue { ptr, ptr, ptr, i32 } %4161, ptr %4162, 2
  %4164 = load i32, ptr %909, align 4
  %4165 = insertvalue { ptr, ptr, ptr, i32 } %4163, i32 %4164, 3
  %4166 = getelementptr [2 x ptr], ptr %915, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4166, align 8
  %4167 = getelementptr [2 x ptr], ptr %915, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4167, align 8
  %4168 = call ptr @llvm.invariant.start.p0(i64 4, ptr %915)
  %4169 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4158)
  %4170 = getelementptr ptr, ptr %4158, i32 %4164
  %4171 = getelementptr ptr, ptr %4170, i32 4
  %4172 = load ptr, ptr %4171, align 8
  %4173 = getelementptr { ptr, ptr }, ptr %916, i32 0, i32 0
  store ptr @i32_typ, ptr %4173, align 8
  %4174 = getelementptr { ptr, ptr }, ptr %916, i32 0, i32 1
  store ptr @i32_typ, ptr %4174, align 8
  %4175 = call ptr @behavior_wrapper(ptr %4172, { ptr, ptr, ptr, i32 } %4165, ptr %916)
  call void %4175({ ptr, ptr, ptr, i32 } %4165, { ptr, ptr, ptr, i32 } %4165, ptr %915, i32 %4156, i32 %4157) #15
  %4176 = load ptr, ptr %912, align 8
  %4177 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4176, 0
  %4178 = load ptr, ptr %911, align 8
  %4179 = insertvalue { ptr, ptr, ptr, i32 } %4177, ptr %4178, 1
  %4180 = load ptr, ptr %910, align 8
  %4181 = insertvalue { ptr, ptr, ptr, i32 } %4179, ptr %4180, 2
  %4182 = load i32, ptr %909, align 4
  %4183 = insertvalue { ptr, ptr, ptr, i32 } %4181, i32 %4182, 3
  %4184 = getelementptr [1 x ptr], ptr %917, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %4184, align 8
  %4185 = call ptr @llvm.invariant.start.p0(i64 1, ptr %917)
  %4186 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4176)
  %4187 = getelementptr ptr, ptr %4176, i32 %4182
  %4188 = getelementptr ptr, ptr %4187, i32 10
  %4189 = load ptr, ptr %4188, align 8
  %4190 = getelementptr { ptr }, ptr %918, i32 0, i32 0
  store ptr @function_typ, ptr %4190, align 8
  %4191 = call ptr @behavior_wrapper(ptr %4189, { ptr, ptr, ptr, i32 } %4183, ptr %918)
  %4192 = call { ptr, ptr, ptr, i32 } %4191({ ptr, ptr, ptr, i32 } %4183, { ptr, ptr, ptr, i32 } %4183, ptr %917, { ptr } %4149) #15
  store { ptr, ptr, ptr, i32 } %4192, ptr %919, align 8
  %4193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %919, i32 0, i32 0
  %4194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %920, i32 0, i32 0
  %4195 = load ptr, ptr %4193, align 8
  store ptr %4195, ptr %4194, align 8
  %4196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %919, i32 0, i32 1
  %4197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %920, i32 0, i32 1
  %4198 = load ptr, ptr %4196, align 8
  store ptr %4198, ptr %4197, align 8
  %4199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %919, i32 0, i32 2
  %4200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %920, i32 0, i32 2
  %4201 = load ptr, ptr %4199, align 8
  store ptr %4201, ptr %4200, align 8
  %4202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %919, i32 0, i32 3
  %4203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %920, i32 0, i32 3
  %4204 = load i32, ptr %4202, align 4
  store i32 %4204, ptr %4203, align 4
  call void @set_offset(ptr %920, ptr @IntIterable)
  %4205 = load ptr, ptr %4194, align 8
  %4206 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4205, 0
  %4207 = load ptr, ptr %4197, align 8
  %4208 = insertvalue { ptr, ptr, ptr, i32 } %4206, ptr %4207, 1
  %4209 = load ptr, ptr %4200, align 8
  %4210 = insertvalue { ptr, ptr, ptr, i32 } %4208, ptr %4209, 2
  %4211 = load i32, ptr %4203, align 4
  %4212 = insertvalue { ptr, ptr, ptr, i32 } %4210, i32 %4211, 3
  %4213 = getelementptr [1 x ptr], ptr %921, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %4213, align 8
  %4214 = call ptr @llvm.invariant.start.p0(i64 1, ptr %921)
  %4215 = call ptr @llvm.invariant.start.p0(i64 192, ptr %4205)
  %4216 = getelementptr ptr, ptr %4205, i32 %4211
  %4217 = getelementptr ptr, ptr %4216, i32 5
  %4218 = load ptr, ptr %4217, align 8
  %4219 = getelementptr { ptr }, ptr %922, i32 0, i32 0
  store ptr @function_typ, ptr %4219, align 8
  %4220 = call ptr @behavior_wrapper(ptr %4218, { ptr, ptr, ptr, i32 } %4212, ptr %922)
  %4221 = call { ptr, ptr, ptr, i32 } %4220({ ptr, ptr, ptr, i32 } %4212, { ptr, ptr, ptr, i32 } %4212, ptr %921, { ptr } %4146) #15
  store { ptr, ptr, ptr, i32 } %4221, ptr %923, align 8
  %4222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %923, i32 0, i32 0
  %4223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %924, i32 0, i32 0
  %4224 = load ptr, ptr %4222, align 8
  store ptr %4224, ptr %4223, align 8
  %4225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %923, i32 0, i32 1
  %4226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %924, i32 0, i32 1
  %4227 = load ptr, ptr %4225, align 8
  store ptr %4227, ptr %4226, align 8
  %4228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %923, i32 0, i32 2
  %4229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %924, i32 0, i32 2
  %4230 = load ptr, ptr %4228, align 8
  store ptr %4230, ptr %4229, align 8
  %4231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %923, i32 0, i32 3
  %4232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %924, i32 0, i32 3
  %4233 = load i32, ptr %4231, align 4
  store i32 %4233, ptr %4232, align 4
  call void @set_offset(ptr %924, ptr @IntIterable)
  %4234 = load ptr, ptr %4223, align 8
  %4235 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4234, 0
  %4236 = load ptr, ptr %4226, align 8
  %4237 = insertvalue { ptr, ptr, ptr, i32 } %4235, ptr %4236, 1
  %4238 = load ptr, ptr %4229, align 8
  %4239 = insertvalue { ptr, ptr, ptr, i32 } %4237, ptr %4238, 2
  %4240 = load i32, ptr %4232, align 4
  %4241 = insertvalue { ptr, ptr, ptr, i32 } %4239, i32 %4240, 3
  %4242 = getelementptr [2 x ptr], ptr %925, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4242, align 8
  %4243 = getelementptr [2 x ptr], ptr %925, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri32, ptr %4243, align 8
  %4244 = call ptr @llvm.invariant.start.p0(i64 4, ptr %925)
  %4245 = call ptr @llvm.invariant.start.p0(i64 192, ptr %4234)
  %4246 = getelementptr ptr, ptr %4234, i32 %4240
  %4247 = getelementptr ptr, ptr %4246, i32 1
  %4248 = load ptr, ptr %4247, align 8
  %4249 = getelementptr { ptr, ptr }, ptr %926, i32 0, i32 0
  store ptr @i32_typ, ptr %4249, align 8
  %4250 = getelementptr { ptr, ptr }, ptr %926, i32 0, i32 1
  store ptr @function_typ, ptr %4250, align 8
  %4251 = call ptr @behavior_wrapper(ptr %4248, { ptr, ptr, ptr, i32 } %4241, ptr %926)
  %4252 = call i32 %4251({ ptr, ptr, ptr, i32 } %4241, { ptr, ptr, ptr, i32 } %4241, ptr %925, i32 %4141, { ptr } %4143) #15
  store i32 %4252, ptr %927, align 4
  %4253 = load i32, ptr %927, align 4
  store i32 %4253, ptr %928, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %930, align 4
  %4254 = load i64, ptr %930, align 4
  store i64 %4254, ptr %929, align 4
  %4255 = load ptr, ptr %929, align 8
  %4256 = insertvalue { ptr, i160 } undef, ptr %4255, 0
  %4257 = load i160, ptr %928, align 4
  %4258 = insertvalue { ptr, i160 } %4256, i160 %4257, 1
  %4259 = getelementptr [1 x ptr], ptr %931, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4259, align 8
  %4260 = call ptr @llvm.invariant.start.p0(i64 1, ptr %931)
  %4261 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4262 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4263 = getelementptr { ptr }, ptr %932, i32 0, i32 0
  store ptr %4255, ptr %4263, align 8
  %4264 = call ptr @class_behavior_wrapper(ptr %4262, ptr %932)
  call void %4264(ptr %931, { ptr, i160 } %4258) #15
  store i32 256, ptr %933, align 4
  %4265 = load i32, ptr %933, align 4
  store i32 %4265, ptr %934, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %936, align 4
  %4266 = load i64, ptr %936, align 4
  store i64 %4266, ptr %935, align 4
  %4267 = load ptr, ptr %935, align 8
  %4268 = insertvalue { ptr, i160 } undef, ptr %4267, 0
  %4269 = load i160, ptr %934, align 4
  %4270 = insertvalue { ptr, i160 } %4268, i160 %4269, 1
  %4271 = getelementptr [1 x ptr], ptr %937, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4271, align 8
  %4272 = call ptr @llvm.invariant.start.p0(i64 1, ptr %937)
  %4273 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4274 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4275 = getelementptr { ptr }, ptr %938, i32 0, i32 0
  store ptr %4267, ptr %4275, align 8
  %4276 = call ptr @class_behavior_wrapper(ptr %4274, ptr %938)
  call void %4276(ptr %937, { ptr, i160 } %4270) #15
  store i32 4, ptr %939, align 4
  store i32 5, ptr %940, align 4
  store i32 6, ptr %941, align 4
  %4277 = load i32, ptr %939, align 4
  %4278 = load i32, ptr %940, align 4
  %4279 = load i32, ptr %941, align 4
  store i32 %4277, ptr %944, align 4
  store i32 %4278, ptr %942, align 4
  store i32 %4279, ptr %943, align 4
  %4280 = load i32, ptr %942, align 4
  store i32 %4280, ptr %945, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %947, align 4
  %4281 = load i64, ptr %947, align 4
  store i64 %4281, ptr %946, align 4
  %4282 = load ptr, ptr %946, align 8
  %4283 = insertvalue { ptr, i160 } undef, ptr %4282, 0
  %4284 = load i160, ptr %945, align 4
  %4285 = insertvalue { ptr, i160 } %4283, i160 %4284, 1
  %4286 = getelementptr [1 x ptr], ptr %948, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4286, align 8
  %4287 = call ptr @llvm.invariant.start.p0(i64 1, ptr %948)
  %4288 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4289 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 10), align 8
  %4290 = getelementptr { ptr }, ptr %949, i32 0, i32 0
  store ptr %4282, ptr %4290, align 8
  %4291 = call ptr @class_behavior_wrapper(ptr %4289, ptr %949)
  call void %4291(ptr %948, { ptr, i160 } %4285) #15
  ret i32 0
}

define { i64, i64 } @_data_size_bool_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_bool_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @bool_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_bool_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_bool_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_bool_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

define { i64, i64 } @_data_size_any_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_data_size_Object(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_data_size_i8_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i8_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i8_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i8_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i8_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i8_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_i32_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i32_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i32_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i32_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i32_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i32_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_i64_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i64 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i64 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i64_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i64_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i64_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_i128_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i128 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i128 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i128, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i128, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i128_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i128_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_i128_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_i128_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_i128_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_f64_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_f64_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @f64_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_f64_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_f64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_f64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_nil_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_nil_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @nil_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_nil_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_nil_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_nil_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_nothing_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_nothing_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @nothing_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_nothing_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_nothing_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_nothing_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_coroutine_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_coroutine_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @coroutine_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_coroutine_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_coroutine_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_coroutine_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_function_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_function_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @function_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_function_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_function_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_function_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_data_size_buffer_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_buffer_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @buffer_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_buffer_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_buffer_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_buffer_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_tuple_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @tuple_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_tuple_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload7, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload6, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  %15 = load i160, ptr %.reload5, align 4
  %16 = insertvalue { ptr, i160 } %14, i160 %15, 1
  ret { ptr, i160 } %16
}

define void @_unbox_tuple_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_data_size_tuple_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_union_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem6, align 8
  store ptr @union_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_data_size_union_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload5 = load i64, ptr %.reg2mem, align 4
  %7 = icmp eq i64 %.reload5, 32
  br i1 %7, label %._crit_edge, label %9

._crit_edge:                                      ; preds = %2
  store ptr %3, ptr %.reg2mem10, align 8
  br label %8

8:                                                ; preds = %._crit_edge1, %._crit_edge
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %.reload4 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload11, ptr %0, i64 %.reload4, i1 false)
  br label %13

9:                                                ; preds = %2
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %10 = icmp sle i64 %.reload3, 16
  br i1 %10, label %._crit_edge1, label %11

._crit_edge1:                                     ; preds = %9
  %.reload9 = load ptr, ptr %.reg2mem6, align 8
  store ptr %.reload9, ptr %.reg2mem10, align 8
  br label %8

11:                                               ; preds = %9
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %12 = call ptr @bump_malloc(i64 %.reload2)
  %.reload = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %12, ptr %0, i64 %.reload, i1 false)
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  store ptr %12, ptr %.reload8, align 8
  br label %13

13:                                               ; preds = %11, %8
  %14 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, i160 } undef, ptr %15, 0
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %17 = load i160, ptr %.reload7, align 4
  %18 = insertvalue { ptr, i160 } %16, i160 %17, 1
  ret { ptr, i160 } %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define ptr @typegetter_wrapper(ptr %f, ptr nocapture nofree noundef nonnull readonly %0) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f(ptr nocapture nofree noundef nonnull readonly %0) #18
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { i64, i64 } @size_wrapper(ptr %f, ptr nocapture nofree readonly %0) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call { i64, i64 } %f(ptr nocapture nofree readonly %0) #18
  ret { i64, i64 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { ptr, i160 } @box_wrapper(ptr %f, ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call { ptr, i160 } %f(ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #18
  ret { ptr, i160 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: readwrite)
define void @unbox_wrapper(ptr %f, { ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #4 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void %f({ ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #19
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @behavior_wrapper(ptr %f, { ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #5 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #20
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @class_behavior_wrapper(ptr %f, ptr nocapture nofree noundef nonnull %0) #5 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f(ptr nocapture nofree noundef nonnull %0) #20
  ret ptr %result
}

define ptr @adjust_trampoline(ptr %tramp) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %ret = call ptr @llvm.adjust.trampoline(ptr %tramp) #21
  ret ptr %ret
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #6

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc(i64 noundef %size) #7 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr @current_ptr) #7
  ret ptr %result
}

; Function Attrs: mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr %current_ptr) #8 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %size_plus_15 = add i64 %size, 15
  %aligned_size = and i64 %size_plus_15, -16
  %current = load ptr, ptr %current_ptr, align 8
  %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
  store ptr %new_ptr, ptr %current_ptr, align 8
  ret ptr %current
}

define { i64, i64 } @_data_size_tuple_typ(ptr %0) {
  %.reg2mem = alloca i64, align 8
  %.reg2mem2 = alloca i64, align 8
  %.reg2mem5 = alloca i64, align 8
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem11 = alloca i64, align 8
  %.reg2mem22.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.010.reg2mem = alloca i64, align 8
  %.reg2mem22.011.reg2mem = alloca i64, align 8
  %.reg2mem14 = alloca i64, align 8
  %.in.reg2mem = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  store i64 %3, ptr %.reg2mem11, align 4
  %.reload13 = load i64, ptr %.reg2mem11, align 4
  %4 = icmp eq i64 %.reload13, 0
  br i1 %4, label %.._crit_edge_crit_edge, label %..lr.ph_crit_edge

..lr.ph_crit_edge:                                ; preds = %1
  %.reload12 = load i64, ptr %.reg2mem11, align 4
  store i64 1, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 0, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 1, ptr %.reg2mem14, align 4
  store i64 %.reload12, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.._crit_edge_crit_edge:                           ; preds = %1
  store i64 0, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 1, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph..lr.ph_crit_edge, %..lr.ph_crit_edge
  %.in.reload = load i64, ptr %.in.reg2mem, align 4
  %.reload15 = load i64, ptr %.reg2mem14, align 4
  %.reg2mem22.011.reload = load i64, ptr %.reg2mem22.011.reg2mem, align 4
  %.reg2mem20.010.reload = load i64, ptr %.reg2mem20.010.reg2mem, align 4
  %5 = inttoptr i64 %.in.reload to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 72
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reload)
  store i64 %12, ptr %.reg2mem8, align 4
  %13 = urem i64 %.reg2mem22.011.reload, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reload
  %18 = add i64 %17, %16
  store i64 %18, ptr %.reg2mem5, align 4
  %19 = add i64 %.reload15, 1
  store i64 %19, ptr %.reg2mem2, align 4
  %.reload3 = load i64, ptr %.reg2mem2, align 4
  %20 = getelementptr ptr, ptr %0, i64 %.reload3
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %.reg2mem, align 4
  %.reload = load i64, ptr %.reg2mem, align 4
  %22 = icmp eq i64 %.reload, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph..lr.ph_crit_edge

.lr.ph..lr.ph_crit_edge:                          ; preds = %.lr.ph
  %.reload1 = load i64, ptr %.reg2mem, align 4
  %.reload4 = load i64, ptr %.reg2mem2, align 4
  %.reload7 = load i64, ptr %.reg2mem5, align 4
  %.reload10 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload10, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 %.reload7, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 %.reload4, ptr %.reg2mem14, align 4
  store i64 %.reload1, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %.reload6 = load i64, ptr %.reg2mem5, align 4
  %.reload9 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload6, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 %.reload9, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.._crit_edge_crit_edge, %.._crit_edge_crit_edge
  %.reg2mem20.0.lcssa.reload = load i64, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  %.reg2mem22.0.lcssa.reload = load i64, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  %23 = urem i64 %.reg2mem22.0.lcssa.reload, %.reg2mem20.0.lcssa.reload
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reload, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %.reg2mem22.0.lcssa.reload
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reload, 1
  ret { i64, i64 } %29
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #1

define { i64, i64 } @_data_size_union_typ(ptr %0) {
  %.reg2mem = alloca i64, align 8
  %.reg2mem2 = alloca i64, align 8
  %.reg2mem5 = alloca i64, align 8
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem11 = alloca i64, align 8
  %.reg2mem22.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.010.reg2mem = alloca i64, align 8
  %.reg2mem22.011.reg2mem = alloca i64, align 8
  %.reg2mem14 = alloca i64, align 8
  %.in.reg2mem = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  store i64 %3, ptr %.reg2mem11, align 4
  %.reload13 = load i64, ptr %.reg2mem11, align 4
  %4 = icmp eq i64 %.reload13, 0
  br i1 %4, label %.._crit_edge_crit_edge, label %..lr.ph_crit_edge

..lr.ph_crit_edge:                                ; preds = %1
  %.reload12 = load i64, ptr %.reg2mem11, align 4
  store i64 1, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 0, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 1, ptr %.reg2mem14, align 4
  store i64 %.reload12, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.._crit_edge_crit_edge:                           ; preds = %1
  store i64 0, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 1, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph..lr.ph_crit_edge, %..lr.ph_crit_edge
  %.in.reload = load i64, ptr %.in.reg2mem, align 4
  %.reload15 = load i64, ptr %.reg2mem14, align 4
  %.reg2mem22.011.reload = load i64, ptr %.reg2mem22.011.reg2mem, align 4
  %.reg2mem20.010.reload = load i64, ptr %.reg2mem20.010.reg2mem, align 4
  %5 = inttoptr i64 %.in.reload to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 72
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reload)
  store i64 %12, ptr %.reg2mem8, align 4
  %13 = urem i64 %.reg2mem22.011.reload, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reload
  %18 = tail call i64 @llvm.umax.i64(i64 %17, i64 %16)
  store i64 %18, ptr %.reg2mem5, align 4
  %19 = add i64 %.reload15, 1
  store i64 %19, ptr %.reg2mem2, align 4
  %.reload3 = load i64, ptr %.reg2mem2, align 4
  %20 = getelementptr ptr, ptr %0, i64 %.reload3
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %.reg2mem, align 4
  %.reload = load i64, ptr %.reg2mem, align 4
  %22 = icmp eq i64 %.reload, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph..lr.ph_crit_edge

.lr.ph..lr.ph_crit_edge:                          ; preds = %.lr.ph
  %.reload1 = load i64, ptr %.reg2mem, align 4
  %.reload4 = load i64, ptr %.reg2mem2, align 4
  %.reload7 = load i64, ptr %.reg2mem5, align 4
  %.reload10 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload10, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 %.reload7, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 %.reload4, ptr %.reg2mem14, align 4
  store i64 %.reload1, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %.reload6 = load i64, ptr %.reg2mem5, align 4
  %.reload9 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload6, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 %.reload9, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.._crit_edge_crit_edge, %.._crit_edge_crit_edge
  %.reg2mem20.0.lcssa.reload = load i64, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  %.reg2mem22.0.lcssa.reload = load i64, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  %final_size = add i64 %.reg2mem22.0.lcssa.reload, 8
  %23 = urem i64 %final_size, %.reg2mem20.0.lcssa.reload
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reload, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %final_size
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reload, 1
  ret { i64, i64 } %29
}

define void @_unbox_union_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @_data_size_union_typ(ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = icmp eq i64 %8, 32
  %11 = select i1 %9, ptr %5, ptr %6
  %12 = select i1 %10, ptr %4, ptr %11
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %12, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_Default(ptr %parameterization) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 32, i64 8 }
}

define { ptr, i160 } @_box_Default(ptr %fat_ptr, ptr %parameterization) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %1 = insertvalue { ptr, i160 } undef, ptr %vptr, 0
  %2 = getelementptr i8, ptr %fat_ptr, i64 8
  %3 = load i160, ptr %2, align 4
  %4 = insertvalue { ptr, i160 } %1, i160 %3, 1
  ret { ptr, i160 } %4
}

define void @_unbox_Default({ ptr, i160 } %fat_ptr, ptr %parameterization, ptr %destination) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = extractvalue { ptr, i160 } %fat_ptr, 0
  %data = extractvalue { ptr, i160 } %fat_ptr, 1
  %dest_data = getelementptr i8, ptr %destination, i64 8
  store ptr %vptr, ptr %destination, align 8
  store i160 %data, ptr %dest_data, align 4
  ret void
}

define void @anoint_trampoline(ptr %tramp) {
  %oldProtect = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr %oldProtect) #9
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) #9

define ptr @coroutine_create(ptr %func, ptr %arg_passer) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %stack = call noalias ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #22
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 0
  store ptr %func, ptr %func_ptr, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 1
  %arg_passer_slot = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 2
  %into_callee_first_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 0
  %into_callee_second_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 1
  %into_callee_third_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 2
  store i64 %stack_top_aligned, ptr %into_callee_first_word, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 3
  store i1 false, ptr %is_finished, align 1
  call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1)
declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) #10

declare void @coroutine_trampoline(ptr)

define void @setup_landing_pad() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %region = call noalias ptr @VirtualAlloc(ptr null, i64 21474836480, i32 12288, i32 4) #22
  store ptr %region, ptr @current_ptr, align 8
  %buf_first_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 0
  %buf_second_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 1
  %buf_third_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 2
  %sp = call ptr @llvm.stacksave.p0() #23
  store ptr %sp, ptr %buf_first_word, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr %buf_second_word, align 8
  store ptr %sp, ptr %buf_third_word, align 8
  %current_coroutine = call ptr @coroutine_create(ptr @setup_landing_pad, ptr @arg_passer)
  store ptr %current_coroutine, ptr @current_coroutine, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = call i32 @printf(ptr @string_string.57, ptr @exception_message)
  %cc = load { ptr }, ptr @current_coroutine, align 8
  call void @report_exception({ ptr } %cc)
  call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #11

define void @arg_passer(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 0
  %func = load ptr, ptr %func_ptr, align 8
  call void %func()
  ret void
}

define i1 @returns_one() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

declare void @exit()

define i32 @get_offset(ptr %vptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %id = load i64, ptr %id_ptr, align 4
  %id_of_casted = load i64, ptr %vptr, align 4
  %hash_coef_ptr = getelementptr i64, ptr %vptr, i32 1
  %tbl_size_ptr = getelementptr i64, ptr %vptr, i32 2
  %offset_tbl_ptr = getelementptr ptr, ptr %vptr, i32 5
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %index = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %id)
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %index
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %product, %shifted
  %hash = and i64 %xored, %tbl_size
  %bug = icmp sgt i64 %hash, %tbl_size
  ret i64 %hash
}

define void @assume_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  %dest_value = load i32, ptr %destination, align 4
  %slot = alloca i32, align 4
  store i32 %dest_value, ptr %slot, align 4
  %slotval = load i32, ptr %slot, align 4
  %eq = icmp eq i32 %slotval, %offset
  call void @llvm.assume(i1 %eq) #24
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #12

define void @set_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  store i32 %offset, ptr %destination, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %hash = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id)
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #18
  ret i1 %result
}

define void @arg_buffer_filler(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define ptr @get_current_coroutine() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

; Function Attrs: noinline nounwind memory(readwrite)
define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #13 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %from_buf_first_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 0
  %from_buf_second_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 1
  %from_buf_third_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 2
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = call ptr @llvm.stacksave.p0() #23
  store ptr %sp, ptr %from_buf_first_word, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %is_first_time = call i1 @returns_one()
  br i1 %is_first_time, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #14
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #14

define void @coroutine_yield(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr @into_caller_buf) #25
  ret void
}

define void @coroutine_call(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %old_into_caller = load [3 x ptr], ptr @into_caller_buf, align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly @into_caller_buf, ptr %into_callee_buf) #25
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store [3 x ptr] %old_into_caller, ptr @into_caller_buf, align 8
  ret void
}

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #4 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: readwrite) }
attributes #5 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none) }
attributes #6 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #7 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #8 = { mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #9 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #10 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1) "alloc-family"="malloc" }
attributes #11 = { nocallback nofree nosync nounwind willreturn }
attributes #12 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #13 = { noinline nounwind memory(readwrite) }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind }
attributes #16 = { nounwind willreturn memory(argmem: readwrite) }
attributes #17 = { nounwind willreturn memory(argmem: read, inaccessiblemem: readwrite) }
attributes #18 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #19 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) }
attributes #20 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
attributes #21 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
attributes #22 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1) "alloc-family"="malloc" }
attributes #23 = { mustprogress nofree nosync nounwind willreturn }
attributes #24 = { mustprogress nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #25 = { nounwind memory(readwrite) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
