; ModuleID = '<stdin>'
source_filename = "llvm-link"

@wohtp__Benchmarks_Complete_ = internal constant [27 x i8] c"--- Benchmarks Complete ---"
@itqol__HashMap_Benchmarks_ = internal constant [26 x i8] c"--- HashMap Benchmarks ---"
@kghaa_ = internal constant [1 x i8] c")"
@mqbyx_____Items_removed_ = internal constant [20 x i8] c"    (Items removed: "
@qnuhs_FAIL = internal constant [4 x i8] c"FAIL"
@tiler_PASS = internal constant [4 x i8] c"PASS"
@xrkjj_____Verification_ = internal constant [18 x i8] c"    Verification: "
@ctedc_Remove_Random = internal constant [13 x i8] c"Remove Random"
@vwqeg_Warning_Remove_returned_Nil_for_key_ = internal constant [37 x i8] c"Warning: Remove returned Nil for key "
@pwkue_Warning_Remove_returned_wrong_value_for_key_ = internal constant [45 x i8] c"Warning: Remove returned wrong value for key "
@ouvoi__unique_keys_for_remove_test = internal constant [29 x i8] c" unique keys for remove test."
@hoedz_Warning_Could_only_generate_ = internal constant [29 x i8] c"Warning: Could only generate "
@fhwka_ = internal constant [1 x i8] c")"
@qennl__Hits_ = internal constant [8 x i8] c", Hits: "
@wwuso_____Misses_ = internal constant [13 x i8] c"    (Misses: "
@pzbcl_FAIL = internal constant [4 x i8] c"FAIL"
@qgcyq_PASS = internal constant [4 x i8] c"PASS"
@yregk_____Verification_ = internal constant [18 x i8] c"    Verification: "
@boodd_Get_Random_Miss = internal constant [15 x i8] c"Get Random Miss"
@vltpv__guaranteed_miss_keys = internal constant [22 x i8] c" guaranteed miss keys."
@monlt_Warning_Could_only_generate_ = internal constant [29 x i8] c"Warning: Could only generate "
@bapjf_FAIL = internal constant [4 x i8] c"FAIL"
@mqkrg_PASS = internal constant [4 x i8] c"PASS"
@jxhac_____Verification_ = internal constant [18 x i8] c"    Verification: "
@uepwp_Get_Random_Hit = internal constant [14 x i8] c"Get Random Hit"
@ercqh_Error_Nil_returned_during_random_hit_test_for_key_ = internal constant [51 x i8] c"Error: Nil returned during random hit test for key "
@feykl__unique_keys_for_random_hit_test = internal constant [33 x i8] c" unique keys for random hit test."
@wjbxp_Warning_Could_only_generate_ = internal constant [29 x i8] c"Warning: Could only generate "
@qrjmn_FAIL = internal constant [4 x i8] c"FAIL"
@vaoqd_PASS = internal constant [4 x i8] c"PASS"
@wisxg_____Verification_ = internal constant [18 x i8] c"    Verification: "
@wzqal_Get_Sequential_Hit = internal constant [18 x i8] c"Get Sequential Hit"
@kkaaq_Error_Nil_returned_during_sequential_hit_test_for_key_ = internal constant [55 x i8] c"Error: Nil returned during sequential hit test for key "
@lvwyt_ = internal constant [1 x i8] c")"
@omboo_____Expected_unique_size_ = internal constant [27 x i8] c"    (Expected unique size: "
@hqeqa_FAIL = internal constant [4 x i8] c"FAIL"
@vzyan_PASS = internal constant [4 x i8] c"PASS"
@nborv_____Verification_ = internal constant [18 x i8] c"    Verification: "
@jebza_Insert_Random = internal constant [13 x i8] c"Insert Random"
@_parameterization_PairPtri32._Ptri1 = linkonce_odr constant [4 x ptr] [ptr @Pair, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri1, ptr null]
@nkqcd_FAIL = internal constant [4 x i8] c"FAIL"
@onknt_PASS = internal constant [4 x i8] c"PASS"
@zjzap_____Verification_ = internal constant [18 x i8] c"    Verification: "
@xnwho_Insert_Sequential = internal constant [17 x i8] c"Insert Sequential"
@_parameterization_FunctionPtri32._Ptri32_to_Ptri1 = linkonce_odr constant [5 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri1, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_FunctionPtri32_to_Ptri32 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_PairPtri32._Ptri32 = linkonce_odr constant [4 x ptr] [ptr @Pair, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@oatkc__ns = internal constant [3 x i8] c" ns"
@vnnkx___TimeOp____ = internal constant [15 x i8] c"  Time/Op:    ~"
@ecdbv__ms = internal constant [3 x i8] c" ms"
@_parameterization_Ptri64 = linkonce_odr constant [2 x ptr] [ptr @i64_typ, ptr null]
@mvqdz___Total_Time_ = internal constant [14 x i8] c"  Total Time: "
@yknfe___Operations_ = internal constant [14 x i8] c"  Operations: "
@PRNG_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @PRNG, ptr null]
@PRNG_offset_tbl = constant [4 x i32] [i32 14, i32 9, i32 9, i32 0]
@PRNG = constant { [3 x i64], [6 x ptr], [5 x ptr] } { [3 x i64] [i64 -4401938362882229211, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @PRNG_hashtbl, ptr @PRNG_offset_tbl, ptr @_size_PRNG, ptr @_box_Default, ptr @_unbox_Default], [5 x ptr] [ptr @PRNG_field_seed, ptr @PRNG_B_init_initial_seedPtri32, ptr @PRNG_B_next_, ptr @PRNG_init_initial_seedPtri32, ptr @PRNG_next_] }
@PRNG_field_seed = internal constant { ptr, ptr } { ptr @PRNG_getter_seed, ptr @PRNG_setter_seed }
@bool_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@i8_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@i32_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@i64_typ_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @i64_typ, ptr null]
@i64_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@i128_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @i128_typ, ptr @any_typ, ptr null]
@i128_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@f64_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@nil_typ_hashtbl = constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = constant [2 x i32] [i32 9, i32 9]
@any_typ_hashtbl = constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = constant [1 x i32] [i32 9]
@nothing_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @nothing_typ]
@nothing_typ_offset_tbl = constant [4 x i32] [i32 0, i32 9, i32 9, i32 9]
@coroutine_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @coroutine_typ]
@coroutine_typ_offset_tbl = constant [4 x i32] [i32 0, i32 9, i32 9, i32 9]
@function_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@buffer_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @buffer_typ, ptr @any_typ, ptr null]
@buffer_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@tuple_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @tuple_typ]
@tuple_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@union_typ_hashtbl = constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = constant [4 x i32] [i32 9, i32 0, i32 9, i32 9]
@Object_hashtbl = constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = constant [2 x i32] [i32 9, i32 9]
@_parameterization_Nil = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr null]
@Entry_hashtbl = constant [4 x ptr] [ptr @Entry, ptr @Object, ptr @any_typ, ptr null]
@Entry_offset_tbl = constant [4 x i32] [i32 9, i32 24, i32 9, i32 0]
@Entry = constant { [3 x i64], [6 x ptr], [15 x ptr] } { [3 x i64] [i64 4015701072841558310, i64 4611686018427388181, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Entry_hashtbl, ptr @Entry_offset_tbl, ptr @_size_Entry, ptr @_box_Default, ptr @_unbox_Default], [15 x ptr] [ptr @Entry_field_Entry_0, ptr @Entry_field_Entry_1, ptr @Entry_field_primary_hash, ptr @Entry_field_key, ptr @Entry_field_value, ptr @Entry_B_init_keyK_valueV_primary_hashPtri32, ptr @Entry_B_key_, ptr @Entry_B_value_, ptr @Entry_B_primary_hash_, ptr @Entry_B_to_pair_, ptr @Entry_init_keyK_valueV_primary_hashPtri32, ptr @Entry_key_, ptr @Entry_value_, ptr @Entry_primary_hash_, ptr @Entry_to_pair_] }
@HashMap_hashtbl = constant [8 x ptr] [ptr null, ptr @HashMap, ptr @Container, ptr null, ptr @Object, ptr null, ptr @any_typ, ptr @Iterable2]
@HashMap_offset_tbl = constant [8 x i32] [i32 0, i32 9, i32 95, i32 0, i32 95, i32 0, i32 9, i32 72]
@HashMap = constant { [3 x i64], [6 x ptr], [86 x ptr] } { [3 x i64] [i64 -2849643283898152329, i64 4611686018427388091, i64 7], [6 x ptr] [ptr @subtype_test, ptr @HashMap_hashtbl, ptr @HashMap_offset_tbl, ptr @_size_HashMap, ptr @_box_Default, ptr @_unbox_Default], [86 x ptr] [ptr @HashMap_field_HashMap_0, ptr @HashMap_field_HashMap_1, ptr @HashMap_field_HashMap_2, ptr @HashMap_field_table1, ptr @HashMap_field_table2, ptr @HashMap_field_size, ptr @HashMap_field_hasher, ptr @HashMap_field_eq, ptr @HashMap_field_max_displacements, ptr @HashMap_B_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1, ptr @HashMap_B_hash1_keyK, ptr @HashMap_B_hash2_from_primary_primary_hashPtri32, ptr @HashMap_B_index1_primary_hashPtri32, ptr @HashMap_B_index2_primary_hashPtri32, ptr @HashMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V, ptr @HashMap_B_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32, ptr @HashMap_B_resize_, ptr @HashMap_B_replace_in_table_keyK_valueV_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil, ptr @HashMap_B_insert_keyK_valueV, ptr @HashMap_B_get_from_table_keyK_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil, ptr @HashMap_B_get_keyK, ptr @HashMap_B_remove_from_table_keyK_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil, ptr @HashMap_B_remove_keyK, ptr @HashMap_B_clear_, ptr @HashMap_B_size_, ptr @HashMap_B_iterator_, ptr @HashMap_B_each_fFunctionT_to_Nothing, ptr @HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @HashMap_B_all_fFunctionT_to_Ptri1, ptr @HashMap_B_any_fFunctionT_to_Ptri1, ptr @HashMap_B_map_fFunctionT_to_U, ptr @HashMap_B_filter_fFunctionT_to_Ptri1, ptr @HashMap_B_chain_otherIterable2T, ptr @HashMap_B_interleave_otherIterable2T, ptr @HashMap_B_zip_otherIterable2U, ptr @HashMap_B_product_otherIterable2U, ptr @HashMap_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1, ptr @HashMap_hash1_keyK, ptr @HashMap_hash2_from_primary_primary_hashPtri32, ptr @HashMap_index1_primary_hashPtri32, ptr @HashMap_index2_primary_hashPtri32, ptr @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V, ptr @HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32, ptr @HashMap_resize_, ptr @HashMap_replace_in_table_keyK_valueV_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil, ptr @HashMap_insert_keyK_valueV, ptr @HashMap_get_from_table_keyK_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil, ptr @HashMap_get_keyK, ptr @HashMap_remove_from_table_keyK_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil, ptr @HashMap_remove_keyK, ptr @HashMap_clear_, ptr @HashMap_size_, ptr @HashMap_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @HashMap_field_HashMap_2, ptr @HashMap_B_iterator_, ptr @HashMap_B_each_fFunctionT_to_Nothing, ptr @HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @HashMap_B_all_fFunctionT_to_Ptri1, ptr @HashMap_B_any_fFunctionT_to_Ptri1, ptr @HashMap_B_map_fFunctionT_to_U, ptr @HashMap_B_filter_fFunctionT_to_Ptri1, ptr @HashMap_B_chain_otherIterable2T, ptr @HashMap_B_interleave_otherIterable2T, ptr @HashMap_B_zip_otherIterable2U, ptr @HashMap_B_product_otherIterable2U, ptr @HashMap_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@HashMapIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @HashMapIterator, ptr null, ptr @Iterator2, ptr null]
@HashMapIterator_offset_tbl = constant [8 x i32] [i32 25, i32 9, i32 0, i32 25, i32 9, i32 0, i32 22, i32 0]
@HashMapIterator = constant { [3 x i64], [6 x ptr], [16 x ptr] } { [3 x i64] [i64 -704669437586349537, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @HashMapIterator_hashtbl, ptr @HashMapIterator_offset_tbl, ptr @_size_HashMapIterator, ptr @_box_Default, ptr @_unbox_Default], [16 x ptr] [ptr @HashMapIterator_field_HashMapIterator_0, ptr @HashMapIterator_field_HashMapIterator_1, ptr @HashMapIterator_field_HashMapIterator_2, ptr @HashMapIterator_field_map_table1, ptr @HashMapIterator_field_map_table2, ptr @HashMapIterator_field_index, ptr @HashMapIterator_field_on_second, ptr @HashMapIterator_B_init_map_table1ArrayEntryK._V_or_Nil_map_table2ArrayEntryK._V_or_Nil, ptr @HashMapIterator_B_next_from_table_tableArrayEntryK._V_or_Nil, ptr @HashMapIterator_B_next_, ptr @HashMapIterator_init_map_table1ArrayEntryK._V_or_Nil_map_table2ArrayEntryK._V_or_Nil, ptr @HashMapIterator_next_from_table_tableArrayEntryK._V_or_Nil, ptr @HashMapIterator_next_, ptr @HashMapIterator_field_HashMapIterator_2, ptr @HashMapIterator_B_next_, ptr @HashMapIterator_next_] }
@Entry_field_primary_hash = internal constant { ptr, ptr } { ptr @Entry_getter_primary_hash, ptr @Entry_setter_primary_hash }
@Entry_field_key = internal constant { ptr, ptr } { ptr @Entry_getter_key, ptr @Entry_setter_key }
@Entry_field_value = internal constant { ptr, ptr } { ptr @Entry_getter_value, ptr @Entry_setter_value }
@HashMap_field_table1 = internal constant { ptr, ptr } { ptr @HashMap_getter_table1, ptr @HashMap_setter_table1 }
@HashMap_field_table2 = internal constant { ptr, ptr } { ptr @HashMap_getter_table2, ptr @HashMap_setter_table2 }
@HashMap_field_size = internal constant { ptr, ptr } { ptr @HashMap_getter_size, ptr @HashMap_setter_size }
@HashMap_field_hasher = internal constant { ptr, ptr } { ptr @HashMap_getter_hasher, ptr @HashMap_setter_hasher }
@HashMap_field_eq = internal constant { ptr, ptr } { ptr @HashMap_getter_eq, ptr @HashMap_setter_eq }
@HashMap_field_max_displacements = internal constant { ptr, ptr } { ptr @HashMap_getter_max_displacements, ptr @HashMap_setter_max_displacements }
@HashMapIterator_field_map_table1 = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_map_table1, ptr @HashMapIterator_setter_map_table1 }
@HashMapIterator_field_map_table2 = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_map_table2, ptr @HashMapIterator_setter_map_table2 }
@HashMapIterator_field_index = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_index, ptr @HashMapIterator_setter_index }
@HashMapIterator_field_on_second = internal constant { ptr, ptr } { ptr @HashMapIterator_getter_on_second, ptr @HashMapIterator_setter_on_second }
@_parameterization_Ptri1 = linkonce_odr constant [2 x ptr] [ptr @bool_typ, ptr null]
@jskps_collectionsmini = internal constant [16 x i8] c"collections.mini"
@Pair_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
@Pair_offset_tbl = constant [4 x i32] [i32 19, i32 9, i32 9, i32 0]
@Pair = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr @_size_Pair, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Container_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container]
@Container_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@Container = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 9056556090793359372, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Container_hashtbl, ptr @Container_offset_tbl, ptr @_size_Container, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterator2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Iterator2, ptr @Container]
@Iterator2_offset_tbl = constant [4 x i32] [i32 12, i32 9, i32 9, i32 12]
@Iterator2 = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 4189192806087951739, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterator2_hashtbl, ptr @Iterator2_offset_tbl, ptr @_size_Iterator2, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterable2_hashtbl = constant [4 x ptr] [ptr @Iterable2, ptr @any_typ, ptr @Container, ptr @Object]
@Iterable2_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 32, i32 32]
@Iterable2 = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 5693646204635713916, i64 4611686018427388349, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterable2_hashtbl, ptr @Iterable2_offset_tbl, ptr @_size_Iterable2, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Array_hashtbl = constant [8 x ptr] [ptr @Container, ptr null, ptr @Iterable2, ptr @Object, ptr @any_typ, ptr null, ptr null, ptr @Array]
@Array_offset_tbl = constant [8 x i32] [i32 84, i32 0, i32 61, i32 84, i32 9, i32 0, i32 0, i32 9]
@Array = constant { [3 x i64], [6 x ptr], [75 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388289, i64 7], [6 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr @_size_Array, ptr @_box_Default, ptr @_unbox_Default], [75 x ptr] [ptr @Array_field_Array_0, ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_B__Self_from_iterable_iterableIterable2T, ptr @Array_B_init_, ptr @Array_B_init_capacityPtri32, ptr @Array_B_init_lengthPtri32_capacityPtri32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_reserve_new_capacityPtri32, ptr @Array_B__index_xPtri32, ptr @Array_B__set_index_xPtri32_valueT, ptr @Array_B_throw_oob_xPtri32, ptr @Array_B_unchecked_index_xPtri32, ptr @Array_B_unchecked_insert_xPtri32_valueT, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array__Self_from_iterable_iterableIterable2T, ptr @Array_init_, ptr @Array_init_capacityPtri32, ptr @Array_init_lengthPtri32_capacityPtri32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_reserve_new_capacityPtri32, ptr @Array__index_xPtri32, ptr @Array__set_index_xPtri32_valueT, ptr @Array_throw_oob_xPtri32, ptr @Array_unchecked_index_xPtri32, ptr @Array_unchecked_insert_xPtri32_valueT, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ArrayIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @ArrayIterator, ptr null, ptr @Iterator2, ptr null]
@ArrayIterator_offset_tbl = constant [8 x i32] [i32 19, i32 9, i32 0, i32 19, i32 9, i32 0, i32 16, i32 0]
@ArrayIterator = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr @_size_ArrayIterator, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@MapIterable2_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterable2, ptr @Container, ptr null, ptr @Iterable2, ptr null, ptr null]
@MapIterable2_offset_tbl = constant [8 x i32] [i32 60, i32 9, i32 9, i32 60, i32 0, i32 37, i32 0, i32 0]
@MapIterable2 = constant { [3 x i64], [6 x ptr], [51 x ptr] } { [3 x i64] [i64 -1724859134596891929, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @MapIterable2_hashtbl, ptr @MapIterable2_offset_tbl, ptr @_size_MapIterable2, ptr @_box_Default, ptr @_unbox_Default], [51 x ptr] [ptr @MapIterable2_field_MapIterable2_0, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_field_iterable, ptr @MapIterable2_field_f, ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@MapIterator2_hashtbl = constant [8 x ptr] [ptr null, ptr @Container, ptr @MapIterator2, ptr null, ptr @Object, ptr @Iterator2, ptr null, ptr @any_typ]
@MapIterator2_offset_tbl = constant [8 x i32] [i32 0, i32 20, i32 9, i32 0, i32 20, i32 17, i32 0, i32 9]
@MapIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 -10255947709272500, i64 4611686018427388279, i64 7], [6 x ptr] [ptr @subtype_test, ptr @MapIterator2_hashtbl, ptr @MapIterator2_offset_tbl, ptr @_size_MapIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @MapIterator2_field_MapIterator2_0, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_field_iterator, ptr @MapIterator2_field_f, ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_B_next_, ptr @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_next_, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_B_next_, ptr @MapIterator2_next_] }
@FilterIterable2_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable2, ptr @FilterIterable2, ptr null]
@FilterIterable2_offset_tbl = constant [8 x i32] [i32 59, i32 9, i32 0, i32 59, i32 0, i32 36, i32 9, i32 0]
@FilterIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 1178467452958968374, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @FilterIterable2_hashtbl, ptr @FilterIterable2_offset_tbl, ptr @_size_FilterIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_field_iterable, ptr @FilterIterable2_field_f, ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@FilterIterator2_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @FilterIterator2, ptr @Container, ptr null, ptr null, ptr @Iterator2, ptr null]
@FilterIterator2_offset_tbl = constant [8 x i32] [i32 19, i32 9, i32 9, i32 19, i32 0, i32 0, i32 16, i32 0]
@FilterIterator2 = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 8213847504843366470, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @FilterIterator2_hashtbl, ptr @FilterIterator2_offset_tbl, ptr @_size_FilterIterator2, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_field_iterator, ptr @FilterIterator2_field_f, ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_next_, ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_next_] }
@ChainIterable2_hashtbl = constant [8 x ptr] [ptr @ChainIterable2, ptr @Object, ptr @any_typ, ptr null, ptr null, ptr @Container, ptr null, ptr @Iterable2]
@ChainIterable2_offset_tbl = constant [8 x i32] [i32 9, i32 59, i32 9, i32 0, i32 0, i32 59, i32 0, i32 36]
@ChainIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 -5233298072945030060, i64 4611686018427388319, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ChainIterable2_hashtbl, ptr @ChainIterable2_offset_tbl, ptr @_size_ChainIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_field_first, ptr @ChainIterable2_field_second, ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ChainIterator2_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr null, ptr @Iterator2, ptr @ChainIterator2]
@ChainIterator2_offset_tbl = constant [8 x i32] [i32 20, i32 9, i32 0, i32 20, i32 0, i32 0, i32 17, i32 9]
@ChainIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 -228267985060461774, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ChainIterator2_hashtbl, ptr @ChainIterator2_offset_tbl, ptr @_size_ChainIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_field_first, ptr @ChainIterator2_field_second, ptr @ChainIterator2_field_on_first, ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_next_, ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_next_] }
@InterleaveIterable2_hashtbl = constant [8 x ptr] [ptr @Iterable2, ptr null, ptr null, ptr @InterleaveIterable2, ptr @any_typ, ptr @Object, ptr null, ptr @Container]
@InterleaveIterable2_offset_tbl = constant [8 x i32] [i32 36, i32 0, i32 0, i32 9, i32 9, i32 59, i32 0, i32 59]
@InterleaveIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 -6258231685215461775, i64 4611686018427388207, i64 7], [6 x ptr] [ptr @subtype_test, ptr @InterleaveIterable2_hashtbl, ptr @InterleaveIterable2_offset_tbl, ptr @_size_InterleaveIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_field_first, ptr @InterleaveIterable2_field_second, ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@InterleaveIterator2_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr null, ptr @InterleaveIterator2, ptr @Container, ptr null, ptr @Iterator2, ptr @Object]
@InterleaveIterator2_offset_tbl = constant [8 x i32] [i32 9, i32 0, i32 0, i32 9, i32 20, i32 0, i32 17, i32 20]
@InterleaveIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 6709847746581360093, i64 4611686018427388247, i64 7], [6 x ptr] [ptr @subtype_test, ptr @InterleaveIterator2_hashtbl, ptr @InterleaveIterator2_offset_tbl, ptr @_size_InterleaveIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_field_first, ptr @InterleaveIterator2_field_second, ptr @InterleaveIterator2_field_on_first, ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_next_, ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_next_] }
@ZipIterable2_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @ZipIterable2, ptr @Container, ptr null, ptr @Iterable2, ptr null, ptr null]
@ZipIterable2_offset_tbl = constant [8 x i32] [i32 61, i32 9, i32 9, i32 61, i32 0, i32 38, i32 0, i32 0]
@ZipIterable2 = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 -3218950579047519815, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ZipIterable2_hashtbl, ptr @ZipIterable2_offset_tbl, ptr @_size_ZipIterable2, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @ZipIterable2_field_ZipIterable2_0, ptr @ZipIterable2_field_ZipIterable2_1, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_field_first, ptr @ZipIterable2_field_second, ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ZipIterator2_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr null, ptr @ZipIterator2, ptr @Container, ptr null, ptr @Iterator2, ptr @Object]
@ZipIterator2_offset_tbl = constant [8 x i32] [i32 9, i32 0, i32 0, i32 9, i32 21, i32 0, i32 18, i32 21]
@ZipIterator2 = constant { [3 x i64], [6 x ptr], [12 x ptr] } { [3 x i64] [i64 5502728639611621286, i64 4611686018427388247, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ZipIterator2_hashtbl, ptr @ZipIterator2_offset_tbl, ptr @_size_ZipIterator2, ptr @_box_Default, ptr @_unbox_Default], [12 x ptr] [ptr @ZipIterator2_field_ZipIterator2_0, ptr @ZipIterator2_field_ZipIterator2_1, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_field_first, ptr @ZipIterator2_field_second, ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_next_, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_next_] }
@ProductIterable2_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable2, ptr @ProductIterable2, ptr null]
@ProductIterable2_offset_tbl = constant [8 x i32] [i32 61, i32 9, i32 0, i32 61, i32 0, i32 38, i32 9, i32 0]
@ProductIterable2 = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 7827074759551300494, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ProductIterable2_hashtbl, ptr @ProductIterable2_offset_tbl, ptr @_size_ProductIterable2, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @ProductIterable2_field_ProductIterable2_0, ptr @ProductIterable2_field_ProductIterable2_1, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_field_first, ptr @ProductIterable2_field_second, ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ProductIterator2_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @ProductIterator2, ptr @Iterator2, ptr null]
@ProductIterator2_offset_tbl = constant [8 x i32] [i32 23, i32 9, i32 0, i32 23, i32 0, i32 9, i32 20, i32 0]
@ProductIterator2 = constant { [3 x i64], [6 x ptr], [14 x ptr] } { [3 x i64] [i64 4440657219728359865, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ProductIterator2_hashtbl, ptr @ProductIterator2_offset_tbl, ptr @_size_ProductIterator2, ptr @_box_Default, ptr @_unbox_Default], [14 x ptr] [ptr @ProductIterator2_field_ProductIterator2_0, ptr @ProductIterator2_field_ProductIterator2_1, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_field_first_iterator, ptr @ProductIterator2_field_second_iterator, ptr @ProductIterator2_field_second_iterable, ptr @ProductIterator2_field_current_first, ptr @ProductIterator2_B_init_first_iteratorIterator2T_second_iterableIterable2U, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_init_first_iteratorIterator2T_second_iterableIterable2U, ptr @ProductIterator2_next_, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_next_] }
@Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
@Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
@Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
@Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
@Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
@ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
@ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
@MapIterable2_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable2_getter_iterable, ptr @MapIterable2_setter_iterable }
@MapIterable2_field_f = internal constant { ptr, ptr } { ptr @MapIterable2_getter_f, ptr @MapIterable2_setter_f }
@MapIterator2_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator2_getter_iterator, ptr @MapIterator2_setter_iterator }
@MapIterator2_field_f = internal constant { ptr, ptr } { ptr @MapIterator2_getter_f, ptr @MapIterator2_setter_f }
@FilterIterable2_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_iterable, ptr @FilterIterable2_setter_iterable }
@FilterIterable2_field_f = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_f, ptr @FilterIterable2_setter_f }
@FilterIterator2_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_iterator, ptr @FilterIterator2_setter_iterator }
@FilterIterator2_field_f = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_f, ptr @FilterIterator2_setter_f }
@ChainIterable2_field_first = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_first, ptr @ChainIterable2_setter_first }
@ChainIterable2_field_second = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_second, ptr @ChainIterable2_setter_second }
@ChainIterator2_field_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_first, ptr @ChainIterator2_setter_first }
@ChainIterator2_field_second = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_second, ptr @ChainIterator2_setter_second }
@ChainIterator2_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_on_first, ptr @ChainIterator2_setter_on_first }
@InterleaveIterable2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_first, ptr @InterleaveIterable2_setter_first }
@InterleaveIterable2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_second, ptr @InterleaveIterable2_setter_second }
@InterleaveIterator2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_first, ptr @InterleaveIterator2_setter_first }
@InterleaveIterator2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_second, ptr @InterleaveIterator2_setter_second }
@InterleaveIterator2_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_on_first, ptr @InterleaveIterator2_setter_on_first }
@ZipIterable2_field_first = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_first, ptr @ZipIterable2_setter_first }
@ZipIterable2_field_second = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_second, ptr @ZipIterable2_setter_second }
@ZipIterator2_field_first = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_first, ptr @ZipIterator2_setter_first }
@ZipIterator2_field_second = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_second, ptr @ZipIterator2_setter_second }
@ProductIterable2_field_first = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_first, ptr @ProductIterable2_setter_first }
@ProductIterable2_field_second = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_second, ptr @ProductIterable2_setter_second }
@ProductIterator2_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_first_iterator, ptr @ProductIterator2_setter_first_iterator }
@ProductIterator2_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterator, ptr @ProductIterator2_setter_second_iterator }
@ProductIterator2_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterable, ptr @ProductIterator2_setter_second_iterable }
@ProductIterator2_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_current_first, ptr @ProductIterator2_setter_current_first }
@bvaeg_ = internal constant [9 x i8] c"---------"
@ulsun_With_message = internal constant [12 x i8] c"With message"
@viajg_At_line = internal constant [7 x i8] c"At line"
@thyzv_Exception_thrown_from_file = internal constant [26 x i8] c"Exception thrown from file"
@wrhgg_ = internal constant [9 x i8] c"---------"
@scxxp_ = internal constant [0 x i8] zeroinitializer
@tuoot_None = internal constant [6 x i8] c"<None>"
@ioxwb_ = internal constant [0 x i8] zeroinitializer
@_parameterization_Ptri8 = linkonce_odr constant [2 x ptr] [ptr @i8_typ, ptr null]
@_parameterization_String = linkonce_odr constant [2 x ptr] [ptr @String, ptr null]
@dwbqu_Object = internal constant [6 x i8] c"Object"
@Iterator_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Iterator]
@Iterator_offset_tbl = constant [4 x i32] [i32 9, i32 0, i32 9, i32 9]
@Iterable_hashtbl = constant [4 x ptr] [ptr null, ptr @Iterable, ptr @any_typ, ptr @Object]
@Iterable_offset_tbl = constant [4 x i32] [i32 0, i32 9, i32 9, i32 11]
@Representable_hashtbl = constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = constant [4 x i32] [i32 9, i32 0, i32 9, i32 11]
@String_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @String, ptr @Representable, ptr @Object, ptr null, ptr null, ptr @Iterable]
@String_offset_tbl = constant [8 x i32] [i32 9, i32 0, i32 9, i32 42, i32 42, i32 0, i32 0, i32 40]
@Character_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = constant [4 x i32] [i32 14, i32 0, i32 9, i32 9]
@StringIterator_hashtbl = constant [4 x ptr] [ptr @StringIterator, ptr @Object, ptr @any_typ, ptr @Iterator]
@StringIterator_offset_tbl = constant [4 x i32] [i32 9, i32 15, i32 9, i32 15]
@Exception_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = constant [4 x i32] [i32 22, i32 0, i32 9, i32 9]
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@lqphx_false = internal constant [5 x i8] c"false"
@rztzt_true = internal constant [4 x i8] c"true"
@_parameterization_Ptri32 = linkonce_odr constant [2 x ptr] [ptr @i32_typ, ptr null]
@_parameterization_BufferPtri8 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@lubhs_nil = internal constant [3 x i8] c"nil"
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@string_string = linkonce_odr constant [4 x i8] c"%s\0A\00"
@bool_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr @_size_bool_typ, ptr @_box_bool_typ, ptr @_unbox_bool_typ], [0 x ptr] undef }
@i8_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr @_size_i8_typ, ptr @_box_i8_typ, ptr @_unbox_i8_typ], [0 x ptr] undef }
@i32_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr @_size_i32_typ, ptr @_box_i32_typ, ptr @_unbox_i32_typ], [0 x ptr] undef }
@i64_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388157, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr @_size_i64_typ, ptr @_box_i64_typ, ptr @_unbox_i64_typ], [0 x ptr] undef }
@i128_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -8755878215469463641, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i128_typ_hashtbl, ptr @i128_typ_offset_tbl, ptr @_size_i128_typ, ptr @_box_i128_typ, ptr @_unbox_i128_typ], [0 x ptr] undef }
@f64_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr @_size_f64_typ, ptr @_box_f64_typ, ptr @_unbox_f64_typ], [0 x ptr] undef }
@nil_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [6 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr @_size_nil_typ, ptr @_box_nil_typ, ptr @_unbox_nil_typ], [0 x ptr] undef }
@any_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [6 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr @_size_any_typ, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@nothing_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -3334456163433371378, i64 4611686018427388097, i64 3], [6 x ptr] [ptr @subtype_test, ptr @nothing_typ_hashtbl, ptr @nothing_typ_offset_tbl, ptr @_size_nothing_typ, ptr @_box_nothing_typ, ptr @_unbox_nothing_typ], [0 x ptr] undef }
@coroutine_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 7194361020959218064, i64 4611686018427388097, i64 3], [6 x ptr] [ptr @subtype_test, ptr @coroutine_typ_hashtbl, ptr @coroutine_typ_offset_tbl, ptr @_size_coroutine_typ, ptr @_box_coroutine_typ, ptr @_unbox_coroutine_typ], [0 x ptr] undef }
@function_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr @_size_function_typ, ptr @_box_function_typ, ptr @_unbox_function_typ], [0 x ptr] undef }
@buffer_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -318192747195410237, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @buffer_typ_hashtbl, ptr @buffer_typ_offset_tbl, ptr @_size_buffer_typ, ptr @_box_buffer_typ, ptr @_unbox_buffer_typ], [0 x ptr] undef }
@tuple_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3422634369532007740, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @tuple_typ_hashtbl, ptr @tuple_typ_offset_tbl, ptr @_size_tuple_typ, ptr @_box_tuple_typ, ptr @_unbox_tuple_typ], [0 x ptr] undef }
@union_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr @_size_union_typ, ptr @_box_union_typ, ptr @_unbox_union_typ], [0 x ptr] undef }
@Object = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [6 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr @_size_Object, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterator = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr @_size_Iterator, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterable = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr @_size_Iterable, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Representable = constant { [3 x i64], [6 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr @_size_Representable, ptr @_box_Default, ptr @_unbox_Default], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@String = constant { [3 x i64], [6 x ptr], [35 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388073, i64 7], [6 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr @_size_String, ptr @_box_Default, ptr @_unbox_Default], [35 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_B_init_, ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_append_xPtri8, ptr @String_B_extend_strString, ptr @String_B__index_xPtri32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_c_string_, ptr @String_B_iterator_, ptr @String_B_repr_, ptr @String_init_, ptr @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_append_xPtri8, ptr @String_extend_strString, ptr @String__index_xPtri32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_c_string_, ptr @String_iterator_, ptr @String_repr_, ptr @String_B_iterator_, ptr @String_iterator_, ptr @String_B_repr_, ptr @String_repr_] }
@Character = constant { [3 x i64], [6 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr @_size_Character, ptr @_box_Default, ptr @_unbox_Default], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytePtri8, ptr @Character_byte_, ptr @Character_init_bytePtri8] }
@StringIterator = constant { [3 x i64], [6 x ptr], [6 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388097, i64 3], [6 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr @_size_StringIterator, ptr @_box_Default, ptr @_unbox_Default], [6 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_] }
@Exception = constant { [3 x i64], [6 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr @_size_Exception, ptr @_box_Default, ptr @_unbox_Default], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberPtri32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@IO_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 0, i32 19]
@IO = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [6 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr @_size_IO, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @IO_B__Self_print_xString__Self_print_xPtrf64__Self_print_xPtri32__Self_print_xPtri8__Self_print_xNil__Self_print_xRepresentable__Self_print_xPtri64__Self_print_xPtri1__Self_print_xCharacter, ptr @IO__Self_print_xString, ptr @IO__Self_print_xPtrf64, ptr @IO__Self_print_xPtri32, ptr @IO__Self_print_xPtri8, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xPtri64, ptr @IO__Self_print_xPtri1, ptr @IO__Self_print_xCharacter] }
@string_string.93 = internal constant [4 x i8] c"%s\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = linkonce_odr thread_local global [3 x ptr] zeroinitializer
@current_coroutine = linkonce_odr thread_local global ptr null
@always_one = linkonce thread_local global i1 true
@current_ptr = internal thread_local global ptr null

define { i64, i64 } @_size_PRNG(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @PRNG_B_init_initial_seedPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [5 x ptr], ptr %15, i32 0, i32 3
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @PRNG_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [5 x ptr], ptr %4, i32 0, i32 4
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @PRNG_init_initial_seedPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @PRNG)
  %20 = icmp sle i32 %3, 0
  br i1 %20, label %21, label %32

21:                                               ; preds = %4
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %7, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 40, ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %27 = load i32, ptr %26, align 4
  %28 = getelementptr ptr, ptr %24, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr %23, i32 1) #15
  br label %44

32:                                               ; preds = %4
  %33 = and i32 %3, 2147483647
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %7, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 40, ptr %36)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = getelementptr ptr, ptr %36, i32 %39
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  call void %43(ptr %35, i32 %33) #15
  br label %44

44:                                               ; preds = %32, %21
  ret void
}

define i32 @PRNG_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @PRNG)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 40, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20) #16
  %30 = mul i32 %29, 1103515245
  %31 = add i32 %30, 12345
  %32 = and i32 %31, 2147483647
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %6, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 40, ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr ptr, ptr %35, i32 %38
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %34, i32 %32) #15
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %6, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 40, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %44) #16
  ret i32 %53
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #0

define i32 @PRNG_getter_seed(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @PRNG_setter_seed(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i32 %1, ptr %3, align 4
  ret void
}

define i1 @kpujgzwqau(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  %10 = call i1 %0(i32 %7, i32 %9)
  ret i1 %10
}

define i32 @oacmopbqnc(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 %0(i32 %5)
  ret i32 %6
}

define i1 @otdbtjwmve(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  %10 = call i1 %0(i32 %7, i32 %9)
  ret i1 %10
}

define i32 @eobvibirqh(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 %0(i32 %5)
  ret i32 %6
}

define i1 @khsrvzhgra(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  %10 = call i1 %0(i32 %7, i32 %9)
  ret i1 %10
}

define i32 @mtlnsndrvh(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 %0(i32 %5)
  ret i32 %6
}

define i1 @nxqgurwdeu(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  %10 = call i1 %0(i32 %7, i32 %9)
  ret i1 %10
}

define i32 @idlomdyeko(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 %0(i32 %5)
  ret i32 %6
}

define i1 @asxdkvmrur(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  %10 = call i1 %0(i32 %7, i32 %9)
  ret i1 %10
}

define i32 @nrbpklbtvm(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 %0(i32 %5)
  ret i32 %6
}

define i1 @yxjixzycfs(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  %10 = call i1 %0(i32 %7, i32 %9)
  ret i1 %10
}

define i32 @esngqbntvl(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 %0(i32 %5)
  ret i32 %6
}

define i1 @atedmwyvrr(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  %10 = call i1 %0(i32 %7, i32 %9)
  ret i1 %10
}

define i32 @sllfrczpsj(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 %0(i32 %5)
  ret i32 %6
}

define i1 @sjlikdsypy(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  %10 = call i1 %0(i32 %7, i32 %9)
  ret i1 %10
}

define i32 @hduqypajio(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 %0(i32 %5)
  ret i32 %6
}

define i1 @ozmniergrw(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  %10 = call i1 %0(i32 %7, i32 %9)
  ret i1 %10
}

define i32 @mvylqfbtlr(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 %0(i32 %5)
  ret i32 %6
}

define i1 @ovdstynmpp(ptr nest %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %2, ptr %5, align 8
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  %10 = call i1 %0(i32 %7, i32 %9)
  ret i1 %10
}

define i32 @rccfrntuuz(ptr nest %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 %0(i32 %5)
  ret i32 %6
}

define void @print_benchmark_result({ ptr, ptr, ptr, i32 } %0, i32 %1, i64 %2) {
  %4 = alloca ptr, align 8
  %5 = alloca { ptr }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca ptr, align 8
  %17 = alloca { ptr }, align 8
  %18 = alloca [1 x ptr], align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = alloca [3 x ptr], align 8
  %21 = alloca { ptr, ptr, ptr }, align 8
  %22 = alloca [1 x ptr], align 8
  %23 = alloca { ptr }, align 8
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem1 = alloca i64, align 8
  %.reg2mem3 = alloca i64, align 8
  %.reg2mem6 = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %24)
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %38 = load i32, ptr %36, align 4
  store i32 %38, ptr %37, align 4
  call void @set_offset(ptr %26, ptr @String)
  %39 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, i160 } undef, ptr %40, 0
  %42 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 1
  %43 = load i160, ptr %42, align 4
  %44 = insertvalue { ptr, i160 } %41, i160 %43, 1
  %45 = alloca [1 x ptr], align 8
  %46 = getelementptr [1 x ptr], ptr %45, i32 0, i32 0
  store ptr @_parameterization_String, ptr %46, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 1, ptr %45)
  %48 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %49 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %50 = alloca { ptr }, align 8
  %51 = getelementptr { ptr }, ptr %50, i32 0, i32 0
  store ptr %40, ptr %51, align 8
  %52 = call ptr @class_behavior_wrapper(ptr %49, ptr %50)
  call void %52(ptr %45, { ptr, i160 } %44)
  %53 = alloca ptr, align 8
  %54 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 15))
  store ptr %54, ptr %53, align 8
  %55 = alloca { ptr }, align 8
  %56 = getelementptr { ptr }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 16, ptr %55)
  %60 = load ptr, ptr %55, align 8
  %61 = load [14 x i8], ptr @yknfe___Operations_, align 1
  store [14 x i8] %61, ptr %60, align 1
  %62 = alloca [1 x ptr], align 8
  store ptr @String, ptr %62, align 8
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr ptr, ptr %63, i32 6
  %65 = load ptr, ptr %64, align 8
  %66 = call { i64, i64 } @size_wrapper(ptr %65, ptr %62)
  %67 = extractvalue { i64, i64 } %66, 0
  %68 = call ptr @bump_malloc(i64 %67)
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 3
  store ptr @String, ptr %69, align 8
  store ptr %68, ptr %70, align 8
  store i32 9, ptr %71, align 4
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %69)
  %73 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr } undef, ptr %74, 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 2
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %83, 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %86, 3
  %88 = alloca [3 x ptr], align 8
  %89 = getelementptr [3 x ptr], ptr %88, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %89, align 8
  %90 = getelementptr [3 x ptr], ptr %88, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %90, align 8
  %91 = getelementptr [3 x ptr], ptr %88, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %91, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 9, ptr %88)
  %93 = call ptr @llvm.invariant.start.p0(i64 280, ptr %77)
  %94 = getelementptr ptr, ptr %77, i32 %86
  %95 = getelementptr ptr, ptr %94, i32 4
  %96 = load ptr, ptr %95, align 8
  %97 = alloca { ptr, ptr, ptr }, align 8
  %98 = getelementptr { ptr, ptr, ptr }, ptr %97, i32 0, i32 0
  store ptr @buffer_typ, ptr %98, align 8
  %99 = getelementptr { ptr, ptr, ptr }, ptr %97, i32 0, i32 1
  store ptr @i32_typ, ptr %99, align 8
  %100 = getelementptr { ptr, ptr, ptr }, ptr %97, i32 0, i32 2
  store ptr @i32_typ, ptr %100, align 8
  %101 = call ptr @behavior_wrapper(ptr %96, { ptr, ptr, ptr, i32 } %87, ptr %97)
  call void %101({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } %87, ptr %88, { ptr } %75, i32 14, i32 15)
  %102 = getelementptr { ptr, i160 }, ptr %69, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, i160 } undef, ptr %103, 0
  %105 = getelementptr { ptr, i160 }, ptr %69, i32 0, i32 1
  %106 = load i160, ptr %105, align 4
  %107 = insertvalue { ptr, i160 } %104, i160 %106, 1
  %108 = alloca [1 x ptr], align 8
  %109 = getelementptr [1 x ptr], ptr %108, i32 0, i32 0
  store ptr @_parameterization_String, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 1, ptr %108)
  %111 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %112 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %113 = alloca { ptr }, align 8
  %114 = getelementptr { ptr }, ptr %113, i32 0, i32 0
  store ptr %103, ptr %114, align 8
  %115 = call ptr @class_behavior_wrapper(ptr %112, ptr %113)
  call void %115(ptr %108, { ptr, i160 } %107)
  %116 = alloca i160, align 8
  %117 = alloca ptr, align 8
  store i32 %1, ptr %116, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %117, align 4
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, i160 } undef, ptr %118, 0
  %120 = load i160, ptr %116, align 4
  %121 = insertvalue { ptr, i160 } %119, i160 %120, 1
  %122 = alloca [1 x ptr], align 8
  %123 = getelementptr [1 x ptr], ptr %122, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 1, ptr %122)
  %125 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %126 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %127 = alloca { ptr }, align 8
  %128 = getelementptr { ptr }, ptr %127, i32 0, i32 0
  store ptr %118, ptr %128, align 8
  %129 = call ptr @class_behavior_wrapper(ptr %126, ptr %127)
  call void %129(ptr %122, { ptr, i160 } %121)
  %130 = alloca ptr, align 8
  %131 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 15))
  store ptr %131, ptr %130, align 8
  %132 = alloca { ptr }, align 8
  %133 = getelementptr { ptr }, ptr %130, i32 0, i32 0
  %134 = getelementptr { ptr }, ptr %132, i32 0, i32 0
  %135 = load ptr, ptr %133, align 8
  store ptr %135, ptr %134, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 16, ptr %132)
  %137 = load ptr, ptr %132, align 8
  %138 = load [14 x i8], ptr @mvqdz___Total_Time_, align 1
  store [14 x i8] %138, ptr %137, align 1
  %139 = alloca [1 x ptr], align 8
  store ptr @String, ptr %139, align 8
  %140 = load ptr, ptr %139, align 8
  %141 = getelementptr ptr, ptr %140, i32 6
  %142 = load ptr, ptr %141, align 8
  %143 = call { i64, i64 } @size_wrapper(ptr %142, ptr %139)
  %144 = extractvalue { i64, i64 } %143, 0
  %145 = call ptr @bump_malloc(i64 %144)
  %146 = alloca { ptr, ptr, ptr, i32 }, align 8
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  store ptr @String, ptr %146, align 8
  store ptr %145, ptr %147, align 8
  store i32 9, ptr %148, align 4
  %149 = call ptr @llvm.invariant.start.p0(i64 16, ptr %146)
  %150 = getelementptr { ptr }, ptr %132, i32 0, i32 0
  %151 = load ptr, ptr %150, align 8
  %152 = insertvalue { ptr } undef, ptr %151, 0
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 0
  %154 = load ptr, ptr %153, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %154, 0
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %157, 1
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 2
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %160, 2
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  %163 = load i32, ptr %162, align 4
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, i32 %163, 3
  %165 = alloca [3 x ptr], align 8
  %166 = getelementptr [3 x ptr], ptr %165, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %166, align 8
  %167 = getelementptr [3 x ptr], ptr %165, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %167, align 8
  %168 = getelementptr [3 x ptr], ptr %165, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %168, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 9, ptr %165)
  %170 = call ptr @llvm.invariant.start.p0(i64 280, ptr %154)
  %171 = getelementptr ptr, ptr %154, i32 %163
  %172 = getelementptr ptr, ptr %171, i32 4
  %173 = load ptr, ptr %172, align 8
  %174 = alloca { ptr, ptr, ptr }, align 8
  %175 = getelementptr { ptr, ptr, ptr }, ptr %174, i32 0, i32 0
  store ptr @buffer_typ, ptr %175, align 8
  %176 = getelementptr { ptr, ptr, ptr }, ptr %174, i32 0, i32 1
  store ptr @i32_typ, ptr %176, align 8
  %177 = getelementptr { ptr, ptr, ptr }, ptr %174, i32 0, i32 2
  store ptr @i32_typ, ptr %177, align 8
  %178 = call ptr @behavior_wrapper(ptr %173, { ptr, ptr, ptr, i32 } %164, ptr %174)
  call void %178({ ptr, ptr, ptr, i32 } %164, { ptr, ptr, ptr, i32 } %164, ptr %165, { ptr } %152, i32 14, i32 15)
  %179 = getelementptr { ptr, i160 }, ptr %146, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, i160 } undef, ptr %180, 0
  %182 = getelementptr { ptr, i160 }, ptr %146, i32 0, i32 1
  %183 = load i160, ptr %182, align 4
  %184 = insertvalue { ptr, i160 } %181, i160 %183, 1
  %185 = alloca [1 x ptr], align 8
  %186 = getelementptr [1 x ptr], ptr %185, i32 0, i32 0
  store ptr @_parameterization_String, ptr %186, align 8
  %187 = call ptr @llvm.invariant.start.p0(i64 1, ptr %185)
  %188 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %189 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %190 = alloca { ptr }, align 8
  %191 = getelementptr { ptr }, ptr %190, i32 0, i32 0
  store ptr %180, ptr %191, align 8
  %192 = call ptr @class_behavior_wrapper(ptr %189, ptr %190)
  call void %192(ptr %185, { ptr, i160 } %184)
  %193 = alloca i160, align 8
  %194 = alloca ptr, align 8
  store i64 %2, ptr %193, align 4
  store i64 ptrtoint (ptr @i64_typ to i64), ptr %194, align 4
  %195 = load ptr, ptr %194, align 8
  %196 = insertvalue { ptr, i160 } undef, ptr %195, 0
  %197 = load i160, ptr %193, align 4
  %198 = insertvalue { ptr, i160 } %196, i160 %197, 1
  %199 = alloca [1 x ptr], align 8
  %200 = getelementptr [1 x ptr], ptr %199, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %200, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 1, ptr %199)
  %202 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %203 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %204 = alloca { ptr }, align 8
  %205 = getelementptr { ptr }, ptr %204, i32 0, i32 0
  store ptr %195, ptr %205, align 8
  %206 = call ptr @class_behavior_wrapper(ptr %203, ptr %204)
  call void %206(ptr %199, { ptr, i160 } %198)
  %207 = alloca ptr, align 8
  %208 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 4))
  store ptr %208, ptr %207, align 8
  %209 = alloca { ptr }, align 8
  %210 = getelementptr { ptr }, ptr %207, i32 0, i32 0
  %211 = getelementptr { ptr }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = call ptr @llvm.invariant.start.p0(i64 16, ptr %209)
  %214 = load ptr, ptr %209, align 8
  %215 = load [3 x i8], ptr @ecdbv__ms, align 1
  store [3 x i8] %215, ptr %214, align 1
  %216 = alloca [1 x ptr], align 8
  store ptr @String, ptr %216, align 8
  %217 = load ptr, ptr %216, align 8
  %218 = getelementptr ptr, ptr %217, i32 6
  %219 = load ptr, ptr %218, align 8
  %220 = call { i64, i64 } @size_wrapper(ptr %219, ptr %216)
  %221 = extractvalue { i64, i64 } %220, 0
  %222 = call ptr @bump_malloc(i64 %221)
  %223 = alloca { ptr, ptr, ptr, i32 }, align 8
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 1
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 3
  store ptr @String, ptr %223, align 8
  store ptr %222, ptr %224, align 8
  store i32 9, ptr %225, align 4
  %226 = call ptr @llvm.invariant.start.p0(i64 16, ptr %223)
  %227 = getelementptr { ptr }, ptr %209, i32 0, i32 0
  %228 = load ptr, ptr %227, align 8
  %229 = insertvalue { ptr } undef, ptr %228, 0
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 0
  %231 = load ptr, ptr %230, align 8
  %232 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %231, 0
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 1
  %234 = load ptr, ptr %233, align 8
  %235 = insertvalue { ptr, ptr, ptr, i32 } %232, ptr %234, 1
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 2
  %237 = load ptr, ptr %236, align 8
  %238 = insertvalue { ptr, ptr, ptr, i32 } %235, ptr %237, 2
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 3
  %240 = load i32, ptr %239, align 4
  %241 = insertvalue { ptr, ptr, ptr, i32 } %238, i32 %240, 3
  %242 = alloca [3 x ptr], align 8
  %243 = getelementptr [3 x ptr], ptr %242, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %243, align 8
  %244 = getelementptr [3 x ptr], ptr %242, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %244, align 8
  %245 = getelementptr [3 x ptr], ptr %242, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %245, align 8
  %246 = call ptr @llvm.invariant.start.p0(i64 9, ptr %242)
  %247 = call ptr @llvm.invariant.start.p0(i64 280, ptr %231)
  %248 = getelementptr ptr, ptr %231, i32 %240
  %249 = getelementptr ptr, ptr %248, i32 4
  %250 = load ptr, ptr %249, align 8
  %251 = alloca { ptr, ptr, ptr }, align 8
  %252 = getelementptr { ptr, ptr, ptr }, ptr %251, i32 0, i32 0
  store ptr @buffer_typ, ptr %252, align 8
  %253 = getelementptr { ptr, ptr, ptr }, ptr %251, i32 0, i32 1
  store ptr @i32_typ, ptr %253, align 8
  %254 = getelementptr { ptr, ptr, ptr }, ptr %251, i32 0, i32 2
  store ptr @i32_typ, ptr %254, align 8
  %255 = call ptr @behavior_wrapper(ptr %250, { ptr, ptr, ptr, i32 } %241, ptr %251)
  call void %255({ ptr, ptr, ptr, i32 } %241, { ptr, ptr, ptr, i32 } %241, ptr %242, { ptr } %229, i32 3, i32 4)
  %256 = getelementptr { ptr, i160 }, ptr %223, i32 0, i32 0
  %257 = load ptr, ptr %256, align 8
  %258 = insertvalue { ptr, i160 } undef, ptr %257, 0
  %259 = getelementptr { ptr, i160 }, ptr %223, i32 0, i32 1
  %260 = load i160, ptr %259, align 4
  %261 = insertvalue { ptr, i160 } %258, i160 %260, 1
  %262 = alloca [1 x ptr], align 8
  %263 = getelementptr [1 x ptr], ptr %262, i32 0, i32 0
  store ptr @_parameterization_String, ptr %263, align 8
  %264 = call ptr @llvm.invariant.start.p0(i64 1, ptr %262)
  %265 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %266 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %267 = alloca { ptr }, align 8
  %268 = getelementptr { ptr }, ptr %267, i32 0, i32 0
  store ptr %257, ptr %268, align 8
  %269 = call ptr @class_behavior_wrapper(ptr %266, ptr %267)
  call void %269(ptr %262, { ptr, i160 } %261)
  %270 = icmp sgt i32 %1, 0
  br i1 %270, label %271, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %402

271:                                              ; preds = %3
  %272 = sext i32 %1 to i64
  store i64 %272, ptr %.reg2mem3, align 4
  %273 = icmp sgt i64 %2, 0
  %.reload5 = load i64, ptr %.reg2mem3, align 4
  %274 = icmp sgt i64 %.reload5, 0
  %275 = and i1 %273, %274
  br i1 %275, label %276, label %279

276:                                              ; preds = %271
  %277 = mul i64 %2, 1000000
  %.reload4 = load i64, ptr %.reg2mem3, align 4
  %278 = sdiv i64 %277, %.reload4
  store i64 %278, ptr %.reg2mem1, align 4
  %.reload2 = load i64, ptr %.reg2mem1, align 4
  store i64 %.reload2, ptr %.reg2mem6, align 4
  br label %280

279:                                              ; preds = %271
  store i64 0, ptr %.reg2mem6, align 4
  br label %280

280:                                              ; preds = %279, %276
  %.reload7 = load i64, ptr %.reg2mem6, align 4
  store i64 %.reload7, ptr %.reg2mem, align 4
  br label %281

281:                                              ; preds = %280
  %282 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 16))
  store ptr %282, ptr %4, align 8
  %283 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %284 = getelementptr { ptr }, ptr %5, i32 0, i32 0
  %285 = load ptr, ptr %283, align 8
  store ptr %285, ptr %284, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %287 = load ptr, ptr %5, align 8
  %288 = load [15 x i8], ptr @vnnkx___TimeOp____, align 1
  store [15 x i8] %288, ptr %287, align 1
  store ptr @String, ptr %6, align 8
  %289 = load ptr, ptr %6, align 8
  %290 = getelementptr ptr, ptr %289, i32 6
  %291 = load ptr, ptr %290, align 8
  %292 = call { i64, i64 } @size_wrapper(ptr %291, ptr %6)
  %293 = extractvalue { i64, i64 } %292, 0
  %294 = call ptr @bump_malloc(i64 %293)
  %295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr @String, ptr %7, align 8
  store ptr %294, ptr %295, align 8
  store i32 9, ptr %296, align 4
  %297 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %298 = getelementptr { ptr }, ptr %5, i32 0, i32 0
  %299 = load ptr, ptr %298, align 8
  %300 = insertvalue { ptr } undef, ptr %299, 0
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %302 = load ptr, ptr %301, align 8
  %303 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %302, 0
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %305 = load ptr, ptr %304, align 8
  %306 = insertvalue { ptr, ptr, ptr, i32 } %303, ptr %305, 1
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %308 = load ptr, ptr %307, align 8
  %309 = insertvalue { ptr, ptr, ptr, i32 } %306, ptr %308, 2
  %310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %311 = load i32, ptr %310, align 4
  %312 = insertvalue { ptr, ptr, ptr, i32 } %309, i32 %311, 3
  %313 = getelementptr [3 x ptr], ptr %8, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %313, align 8
  %314 = getelementptr [3 x ptr], ptr %8, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %314, align 8
  %315 = getelementptr [3 x ptr], ptr %8, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %315, align 8
  %316 = call ptr @llvm.invariant.start.p0(i64 9, ptr %8)
  %317 = call ptr @llvm.invariant.start.p0(i64 280, ptr %302)
  %318 = getelementptr ptr, ptr %302, i32 %311
  %319 = getelementptr ptr, ptr %318, i32 4
  %320 = load ptr, ptr %319, align 8
  %321 = getelementptr { ptr, ptr, ptr }, ptr %9, i32 0, i32 0
  store ptr @buffer_typ, ptr %321, align 8
  %322 = getelementptr { ptr, ptr, ptr }, ptr %9, i32 0, i32 1
  store ptr @i32_typ, ptr %322, align 8
  %323 = getelementptr { ptr, ptr, ptr }, ptr %9, i32 0, i32 2
  store ptr @i32_typ, ptr %323, align 8
  %324 = call ptr @behavior_wrapper(ptr %320, { ptr, ptr, ptr, i32 } %312, ptr %9)
  call void %324({ ptr, ptr, ptr, i32 } %312, { ptr, ptr, ptr, i32 } %312, ptr %8, { ptr } %300, i32 15, i32 16)
  %325 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %326 = load ptr, ptr %325, align 8
  %327 = insertvalue { ptr, i160 } undef, ptr %326, 0
  %328 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %329 = load i160, ptr %328, align 4
  %330 = insertvalue { ptr, i160 } %327, i160 %329, 1
  %331 = getelementptr [1 x ptr], ptr %10, i32 0, i32 0
  store ptr @_parameterization_String, ptr %331, align 8
  %332 = call ptr @llvm.invariant.start.p0(i64 1, ptr %10)
  %333 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %334 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %335 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  store ptr %326, ptr %335, align 8
  %336 = call ptr @class_behavior_wrapper(ptr %334, ptr %11)
  call void %336(ptr %10, { ptr, i160 } %330)
  %.reload = load i64, ptr %.reg2mem, align 4
  store i64 %.reload, ptr %12, align 4
  store i64 ptrtoint (ptr @i64_typ to i64), ptr %13, align 4
  %337 = load ptr, ptr %13, align 8
  %338 = insertvalue { ptr, i160 } undef, ptr %337, 0
  %339 = load i160, ptr %12, align 4
  %340 = insertvalue { ptr, i160 } %338, i160 %339, 1
  %341 = getelementptr [1 x ptr], ptr %14, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %341, align 8
  %342 = call ptr @llvm.invariant.start.p0(i64 1, ptr %14)
  %343 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %344 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %345 = getelementptr { ptr }, ptr %15, i32 0, i32 0
  store ptr %337, ptr %345, align 8
  %346 = call ptr @class_behavior_wrapper(ptr %344, ptr %15)
  call void %346(ptr %14, { ptr, i160 } %340)
  %347 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 4))
  store ptr %347, ptr %16, align 8
  %348 = getelementptr { ptr }, ptr %16, i32 0, i32 0
  %349 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  %350 = load ptr, ptr %348, align 8
  store ptr %350, ptr %349, align 8
  %351 = call ptr @llvm.invariant.start.p0(i64 16, ptr %17)
  %352 = load ptr, ptr %17, align 8
  %353 = load [3 x i8], ptr @oatkc__ns, align 1
  store [3 x i8] %353, ptr %352, align 1
  store ptr @String, ptr %18, align 8
  %354 = load ptr, ptr %18, align 8
  %355 = getelementptr ptr, ptr %354, i32 6
  %356 = load ptr, ptr %355, align 8
  %357 = call { i64, i64 } @size_wrapper(ptr %356, ptr %18)
  %358 = extractvalue { i64, i64 } %357, 0
  %359 = call ptr @bump_malloc(i64 %358)
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr @String, ptr %19, align 8
  store ptr %359, ptr %360, align 8
  store i32 9, ptr %361, align 4
  %362 = call ptr @llvm.invariant.start.p0(i64 16, ptr %19)
  %363 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  %364 = load ptr, ptr %363, align 8
  %365 = insertvalue { ptr } undef, ptr %364, 0
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %367 = load ptr, ptr %366, align 8
  %368 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %367, 0
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %370 = load ptr, ptr %369, align 8
  %371 = insertvalue { ptr, ptr, ptr, i32 } %368, ptr %370, 1
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %373 = load ptr, ptr %372, align 8
  %374 = insertvalue { ptr, ptr, ptr, i32 } %371, ptr %373, 2
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %376 = load i32, ptr %375, align 4
  %377 = insertvalue { ptr, ptr, ptr, i32 } %374, i32 %376, 3
  %378 = getelementptr [3 x ptr], ptr %20, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %378, align 8
  %379 = getelementptr [3 x ptr], ptr %20, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %379, align 8
  %380 = getelementptr [3 x ptr], ptr %20, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %380, align 8
  %381 = call ptr @llvm.invariant.start.p0(i64 9, ptr %20)
  %382 = call ptr @llvm.invariant.start.p0(i64 280, ptr %367)
  %383 = getelementptr ptr, ptr %367, i32 %376
  %384 = getelementptr ptr, ptr %383, i32 4
  %385 = load ptr, ptr %384, align 8
  %386 = getelementptr { ptr, ptr, ptr }, ptr %21, i32 0, i32 0
  store ptr @buffer_typ, ptr %386, align 8
  %387 = getelementptr { ptr, ptr, ptr }, ptr %21, i32 0, i32 1
  store ptr @i32_typ, ptr %387, align 8
  %388 = getelementptr { ptr, ptr, ptr }, ptr %21, i32 0, i32 2
  store ptr @i32_typ, ptr %388, align 8
  %389 = call ptr @behavior_wrapper(ptr %385, { ptr, ptr, ptr, i32 } %377, ptr %21)
  call void %389({ ptr, ptr, ptr, i32 } %377, { ptr, ptr, ptr, i32 } %377, ptr %20, { ptr } %365, i32 3, i32 4)
  %390 = getelementptr { ptr, i160 }, ptr %19, i32 0, i32 0
  %391 = load ptr, ptr %390, align 8
  %392 = insertvalue { ptr, i160 } undef, ptr %391, 0
  %393 = getelementptr { ptr, i160 }, ptr %19, i32 0, i32 1
  %394 = load i160, ptr %393, align 4
  %395 = insertvalue { ptr, i160 } %392, i160 %394, 1
  %396 = getelementptr [1 x ptr], ptr %22, i32 0, i32 0
  store ptr @_parameterization_String, ptr %396, align 8
  %397 = call ptr @llvm.invariant.start.p0(i64 1, ptr %22)
  %398 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %399 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %400 = getelementptr { ptr }, ptr %23, i32 0, i32 0
  store ptr %391, ptr %400, align 8
  %401 = call ptr @class_behavior_wrapper(ptr %399, ptr %23)
  call void %401(ptr %22, { ptr, i160 } %395)
  br label %402

402:                                              ; preds = %._crit_edge, %281
  ret void
}

define void @benchmark_insert_sequential(i32 %0) {
  %2 = alloca i160, align 8
  %3 = alloca ptr, align 8
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca [2 x ptr], align 8
  %7 = alloca { ptr, ptr }, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca { ptr, i160 }, align 8
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca i32, align 4
  %16 = alloca ptr, align 8
  %17 = alloca i32, align 4
  %18 = alloca ptr, align 8
  %19 = alloca [0 x ptr], align 8
  %20 = alloca {}, align 8
  %21 = alloca i1, align 1
  %22 = alloca [0 x ptr], align 8
  %23 = alloca {}, align 8
  %24 = alloca i1, align 1
  %25 = alloca ptr, align 8
  %26 = alloca { ptr }, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = alloca [3 x ptr], align 8
  %30 = alloca { ptr, ptr, ptr }, align 8
  %31 = alloca ptr, align 8
  %32 = alloca { ptr }, align 8
  %33 = alloca [1 x ptr], align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = alloca [3 x ptr], align 8
  %36 = alloca { ptr, ptr, ptr }, align 8
  %37 = alloca [1 x ptr], align 8
  %38 = alloca { ptr }, align 8
  %39 = alloca ptr, align 8
  %40 = alloca { ptr }, align 8
  %41 = alloca [1 x ptr], align 8
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = alloca [3 x ptr], align 8
  %44 = alloca { ptr, ptr, ptr }, align 8
  %45 = alloca [1 x ptr], align 8
  %46 = alloca { ptr }, align 8
  %47 = alloca ptr, align 8
  %48 = alloca { ptr }, align 8
  %49 = alloca [1 x ptr], align 8
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = alloca [3 x ptr], align 8
  %52 = alloca { ptr, ptr, ptr }, align 8
  %53 = alloca [1 x ptr], align 8
  %54 = alloca { ptr }, align 8
  %55 = alloca [4 x ptr], align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem4 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i1, align 1
  %.reg2mem12 = alloca i1, align 1
  %.reg2mem14 = alloca i1, align 1
  %.reg2mem16 = alloca i1, align 1
  %.reg2mem19 = alloca i1, align 1
  %.reg2mem22 = alloca i64, align 8
  %.reg2mem24 = alloca i32, align 4
  %.reg2mem26 = alloca i32, align 4
  %.reg2mem28 = alloca i1, align 1
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem36 = alloca i64, align 8
  %.reg2mem38 = alloca i1, align 1
  %.reg2mem40 = alloca i32, align 4
  %.reg2mem42 = alloca i1, align 1
  %.reg2mem44 = alloca i1, align 1
  %.reg2mem46 = alloca i32, align 4
  %.reg2mem48 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store ptr @HashMap, ptr %55, align 8
  %56 = getelementptr ptr, ptr %55, i32 1
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %57 = getelementptr ptr, ptr %55, i32 2
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = getelementptr ptr, ptr %55, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %58, align 8
  %59 = load ptr, ptr %55, align 8
  %60 = getelementptr ptr, ptr %59, i32 6
  %61 = load ptr, ptr %60, align 8
  %62 = call { i64, i64 } @size_wrapper(ptr %61, ptr %55)
  %63 = extractvalue { i64, i64 } %62, 0
  %64 = call ptr @bump_malloc(i64 %63)
  store ptr @_parameterization_Ptri32, ptr %64, align 8
  %65 = getelementptr ptr, ptr %64, i32 1
  store ptr @_parameterization_Ptri32, ptr %65, align 8
  %66 = getelementptr ptr, ptr %64, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 24, ptr %64)
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  store ptr @HashMap, ptr %68, align 8
  store ptr %64, ptr %69, align 8
  store i32 9, ptr %70, align 4
  %71 = call ptr @llvm.invariant.start.p0(i64 16, ptr %68)
  %72 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %72)
  call void @llvm.init.trampoline(ptr %72, ptr @rccfrntuuz, ptr @i32_hasher)
  %73 = alloca ptr, align 8
  %74 = call ptr @adjust_trampoline(ptr %72)
  store ptr %74, ptr %73, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 24, ptr %72)
  %76 = call ptr @llvm.invariant.start.p0(i64 8, ptr %73)
  %77 = getelementptr { ptr }, ptr %73, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr } undef, ptr %78, 0
  %80 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %80)
  call void @llvm.init.trampoline(ptr %80, ptr @ovdstynmpp, ptr @i32_eq)
  %81 = alloca ptr, align 8
  %82 = call ptr @adjust_trampoline(ptr %80)
  store ptr %82, ptr %81, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 24, ptr %80)
  %84 = call ptr @llvm.invariant.start.p0(i64 8, ptr %81)
  %85 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr } undef, ptr %86, 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %89, 0
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %92, 1
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %95, 2
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %98 = load i32, ptr %97, align 4
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %98, 3
  %100 = alloca [2 x ptr], align 8
  %101 = getelementptr [2 x ptr], ptr %100, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %101, align 8
  %102 = getelementptr [2 x ptr], ptr %100, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %102, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 4, ptr %100)
  %104 = call ptr @llvm.invariant.start.p0(i64 688, ptr %89)
  %105 = getelementptr ptr, ptr %89, i32 %98
  %106 = getelementptr ptr, ptr %105, i32 9
  %107 = load ptr, ptr %106, align 8
  %108 = alloca { ptr, ptr }, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  store ptr @function_typ, ptr %109, align 8
  %110 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  store ptr @function_typ, ptr %110, align 8
  %111 = call ptr @behavior_wrapper(ptr %107, { ptr, ptr, ptr, i32 } %99, ptr %108)
  call void %111({ ptr, ptr, ptr, i32 } %99, { ptr, ptr, ptr, i32 } %99, ptr %100, { ptr } %79, { ptr } %87)
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %115 = load ptr, ptr %113, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %118 = load ptr, ptr %116, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %124 = load i32, ptr %122, align 4
  store i32 %124, ptr %123, align 4
  call void @set_offset(ptr %112, ptr @HashMap)
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %128 = load ptr, ptr %126, align 8
  store ptr %128, ptr %127, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %131 = load ptr, ptr %129, align 8
  store ptr %131, ptr %130, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %134 = load ptr, ptr %132, align 8
  store ptr %134, ptr %133, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %137 = load i32, ptr %135, align 4
  store i32 %137, ptr %136, align 4
  %138 = call ptr @llvm.invariant.start.p0(i64 16, ptr %125)
  %139 = call i64 @clock()
  store i64 %139, ptr %.reg2mem36, align 4
  store i32 0, ptr %.reg2mem48, align 4
  br label %140

140:                                              ; preds = %._crit_edge, %1
  %.reload49 = load i32, ptr %.reg2mem48, align 4
  store i32 %.reload49, ptr %.reg2mem31, align 4
  %.reload35 = load i32, ptr %.reg2mem31, align 4
  %141 = icmp slt i32 %.reload35, %0
  store i1 %141, ptr %.reg2mem28, align 1
  %.reload30 = load i1, ptr %.reg2mem28, align 1
  br i1 %.reload30, label %142, label %175

142:                                              ; preds = %140
  %.reload34 = load i32, ptr %.reg2mem31, align 4
  %143 = add i32 %.reload34, 1
  store ptr @i32_typ, ptr %3, align 8
  %.reload33 = load i32, ptr %.reg2mem31, align 4
  store i32 %.reload33, ptr %2, align 4
  %144 = load ptr, ptr %3, align 8
  %145 = insertvalue { ptr, i160 } undef, ptr %144, 0
  %146 = load i160, ptr %2, align 4
  %147 = insertvalue { ptr, i160 } %145, i160 %146, 1
  store ptr @i32_typ, ptr %5, align 8
  store i32 %143, ptr %4, align 4
  %148 = load ptr, ptr %5, align 8
  %149 = insertvalue { ptr, i160 } undef, ptr %148, 0
  %150 = load i160, ptr %4, align 4
  %151 = insertvalue { ptr, i160 } %149, i160 %150, 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %153 = load ptr, ptr %152, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %153, 0
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %154, ptr %156, 1
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %159 = load ptr, ptr %158, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %159, 2
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %162, 3
  %164 = getelementptr [2 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %164, align 8
  %165 = getelementptr [2 x ptr], ptr %6, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 4, ptr %6)
  %167 = call ptr @llvm.invariant.start.p0(i64 688, ptr %153)
  %168 = getelementptr ptr, ptr %153, i32 %162
  %169 = getelementptr ptr, ptr %168, i32 18
  %170 = load ptr, ptr %169, align 8
  %171 = getelementptr { ptr, ptr }, ptr %7, i32 0, i32 0
  store ptr %144, ptr %171, align 8
  %172 = getelementptr { ptr, ptr }, ptr %7, i32 0, i32 1
  store ptr %148, ptr %172, align 8
  %173 = call ptr @behavior_wrapper(ptr %170, { ptr, ptr, ptr, i32 } %163, ptr %7)
  call void %173({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr %6, { ptr, i160 } %147, { ptr, i160 } %151)
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  %174 = add i32 %.reload32, 1
  store i32 %174, ptr %.reg2mem26, align 4
  %.reload27 = load i32, ptr %.reg2mem26, align 4
  store i32 %.reload27, ptr %.reg2mem46, align 4
  br label %176

175:                                              ; preds = %140
  store i32 poison, ptr %.reg2mem46, align 4
  br label %176

176:                                              ; preds = %175, %142
  %.reload47 = load i32, ptr %.reg2mem46, align 4
  store i32 %.reload47, ptr %.reg2mem24, align 4
  br label %177

177:                                              ; preds = %176
  %.reload29 = load i1, ptr %.reg2mem28, align 1
  br i1 %.reload29, label %._crit_edge, label %178

._crit_edge:                                      ; preds = %177
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  store i32 %.reload25, ptr %.reg2mem48, align 4
  br label %140

178:                                              ; preds = %177
  %179 = call i64 @clock()
  store i64 %179, ptr %.reg2mem22, align 4
  %180 = icmp sgt i32 %0, 0
  store i1 %180, ptr %.reg2mem19, align 1
  %.reload21 = load i1, ptr %.reg2mem19, align 1
  br i1 %.reload21, label %181, label %268

181:                                              ; preds = %178
  %182 = sub i32 %0, 1
  store ptr @i32_typ, ptr %9, align 8
  store i32 %182, ptr %8, align 4
  %183 = load ptr, ptr %9, align 8
  %184 = insertvalue { ptr, i160 } undef, ptr %183, 0
  %185 = load i160, ptr %8, align 4
  %186 = insertvalue { ptr, i160 } %184, i160 %185, 1
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %194, 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %197, 3
  %199 = getelementptr [1 x ptr], ptr %10, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %199, align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 1, ptr %10)
  %201 = call ptr @llvm.invariant.start.p0(i64 688, ptr %188)
  %202 = getelementptr ptr, ptr %188, i32 %197
  %203 = getelementptr ptr, ptr %202, i32 20
  %204 = load ptr, ptr %203, align 8
  %205 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  store ptr %183, ptr %205, align 8
  %206 = call ptr @behavior_wrapper(ptr %204, { ptr, ptr, ptr, i32 } %198, ptr %11)
  %207 = call { ptr, i160 } %206({ ptr, ptr, ptr, i32 } %198, { ptr, ptr, ptr, i32 } %198, ptr %10, { ptr, i160 } %186)
  store { ptr, i160 } %207, ptr %12, align 8
  %208 = getelementptr { ptr, i32 }, ptr %12, i32 0, i32 0
  %209 = load ptr, ptr %208, align 8
  store ptr %209, ptr %14, align 8
  %210 = getelementptr { ptr, i32 }, ptr %12, i32 0, i32 1
  %211 = load i32, ptr %210, align 4
  store i32 %211, ptr %13, align 4
  %212 = load ptr, ptr %14, align 8
  %213 = ptrtoint ptr %212 to i64
  %214 = icmp eq i64 %213, ptrtoint (ptr @nil_typ to i64)
  %215 = icmp eq i64 %213, 0
  %216 = or i1 %214, %215
  %217 = xor i1 %216, true
  store i1 %217, ptr %.reg2mem16, align 1
  br i1 %216, label %218, label %._crit_edge1

._crit_edge1:                                     ; preds = %181
  br label %222

218:                                              ; preds = %181
  %219 = load [0 x i8], ptr %13, align 1
  store [0 x i8] %219, ptr %15, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %16, align 4
  %220 = load ptr, ptr %16, align 8
  store ptr %220, ptr %14, align 8
  %221 = load i32, ptr %15, align 4
  store i32 %221, ptr %13, align 4
  br label %222

222:                                              ; preds = %._crit_edge1, %218
  %223 = load ptr, ptr %14, align 8
  %224 = ptrtoint ptr %223 to i64
  %225 = icmp eq i64 %224, ptrtoint (ptr @nil_typ to i64)
  %226 = icmp eq i64 %224, 0
  %227 = or i1 %225, %226
  %228 = icmp eq i1 %227, false
  br i1 %228, label %229, label %235

229:                                              ; preds = %222
  %230 = load i32, ptr %13, align 4
  %231 = icmp ne i32 %230, %0
  %.reload18 = load i1, ptr %.reg2mem16, align 1
  %232 = select i1 %231, i1 false, i1 %.reload18
  store i1 %232, ptr %.reg2mem14, align 1
  store i32 %230, ptr %17, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %18, align 4
  %233 = load ptr, ptr %18, align 8
  store ptr %233, ptr %14, align 8
  %234 = load i32, ptr %17, align 4
  store i32 %234, ptr %13, align 4
  %.reload15 = load i1, ptr %.reg2mem14, align 1
  store i1 %.reload15, ptr %.reg2mem44, align 1
  br label %245

235:                                              ; preds = %222
  %236 = load ptr, ptr %14, align 8
  %237 = ptrtoint ptr %236 to i64
  %238 = icmp eq i64 %237, ptrtoint (ptr @nil_typ to i64)
  %239 = icmp eq i64 %237, 0
  %240 = or i1 %238, %239
  %241 = icmp eq i1 %240, false
  %.reload17 = load i1, ptr %.reg2mem16, align 1
  %242 = select i1 %241, i1 false, i1 %.reload17
  store i1 %242, ptr %.reg2mem12, align 1
  %243 = load ptr, ptr %14, align 8
  store ptr %243, ptr %14, align 8
  %244 = load i32, ptr %13, align 4
  store i32 %244, ptr %13, align 4
  %.reload13 = load i1, ptr %.reg2mem12, align 1
  store i1 %.reload13, ptr %.reg2mem44, align 1
  br label %245

245:                                              ; preds = %235, %229
  %.reload45 = load i1, ptr %.reg2mem44, align 1
  store i1 %.reload45, ptr %.reg2mem10, align 1
  br label %246

246:                                              ; preds = %245
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %251 = load ptr, ptr %250, align 8
  %252 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %251, 1
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %254 = load ptr, ptr %253, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } %252, ptr %254, 2
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %257 = load i32, ptr %256, align 4
  %258 = insertvalue { ptr, ptr, ptr, i32 } %255, i32 %257, 3
  %259 = call ptr @llvm.invariant.start.p0(i64 0, ptr %19)
  %260 = call ptr @llvm.invariant.start.p0(i64 688, ptr %248)
  %261 = getelementptr ptr, ptr %248, i32 %257
  %262 = getelementptr ptr, ptr %261, i32 24
  %263 = load ptr, ptr %262, align 8
  %264 = call ptr @behavior_wrapper(ptr %263, { ptr, ptr, ptr, i32 } %258, ptr %20)
  %265 = call i32 %264({ ptr, ptr, ptr, i32 } %258, { ptr, ptr, ptr, i32 } %258, ptr %19)
  %266 = icmp eq i32 %265, %0
  %267 = zext i1 %266 to i32
  store i32 %267, ptr %.reg2mem8, align 4
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i1, ptr %.reg2mem10, align 1
  store i32 %.reload9, ptr %.reg2mem40, align 4
  store i1 %.reload11, ptr %.reg2mem42, align 1
  br label %290

268:                                              ; preds = %178
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %270 = load ptr, ptr %269, align 8
  %271 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %270, 0
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %273 = load ptr, ptr %272, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } %271, ptr %273, 1
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %276 = load ptr, ptr %275, align 8
  %277 = insertvalue { ptr, ptr, ptr, i32 } %274, ptr %276, 2
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %279 = load i32, ptr %278, align 4
  %280 = insertvalue { ptr, ptr, ptr, i32 } %277, i32 %279, 3
  %281 = call ptr @llvm.invariant.start.p0(i64 0, ptr %22)
  %282 = call ptr @llvm.invariant.start.p0(i64 688, ptr %270)
  %283 = getelementptr ptr, ptr %270, i32 %279
  %284 = getelementptr ptr, ptr %283, i32 24
  %285 = load ptr, ptr %284, align 8
  %286 = call ptr @behavior_wrapper(ptr %285, { ptr, ptr, ptr, i32 } %280, ptr %23)
  %287 = call i32 %286({ ptr, ptr, ptr, i32 } %280, { ptr, ptr, ptr, i32 } %280, ptr %22)
  %288 = icmp eq i32 %287, 0
  %289 = zext i1 %288 to i32
  store i32 %289, ptr %.reg2mem6, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload7, ptr %.reg2mem40, align 4
  store i1 true, ptr %.reg2mem42, align 1
  br label %290

290:                                              ; preds = %268, %246
  %.reload43 = load i1, ptr %.reg2mem42, align 1
  %.reload41 = load i32, ptr %.reg2mem40, align 4
  store i1 %.reload43, ptr %.reg2mem4, align 1
  store i32 %.reload41, ptr %.reg2mem2, align 4
  br label %291

291:                                              ; preds = %290
  %.reload3 = load i32, ptr %.reg2mem2, align 4
  %292 = zext i32 %.reload3 to i64
  %293 = trunc i64 %292 to i32
  switch i32 %293, label %297 [
    i32 0, label %294
  ]

294:                                              ; preds = %291
  %.reload20 = load i1, ptr %.reg2mem19, align 1
  %295 = select i1 %.reload20, ptr %21, ptr %24
  store i1 false, ptr %295, align 1
  %296 = load i1, ptr %295, align 1
  store i1 %296, ptr %.reg2mem, align 1
  %.reload = load i1, ptr %.reg2mem, align 1
  store i1 %.reload, ptr %.reg2mem38, align 1
  br label %298

297:                                              ; preds = %291
  %.reload5 = load i1, ptr %.reg2mem4, align 1
  store i1 %.reload5, ptr %.reg2mem38, align 1
  br label %298

298:                                              ; preds = %297, %294
  %.reload39 = load i1, ptr %.reg2mem38, align 1
  %299 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 18))
  store ptr %299, ptr %25, align 8
  %300 = getelementptr { ptr }, ptr %25, i32 0, i32 0
  %301 = getelementptr { ptr }, ptr %26, i32 0, i32 0
  %302 = load ptr, ptr %300, align 8
  store ptr %302, ptr %301, align 8
  %303 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  %304 = load ptr, ptr %26, align 8
  %305 = load [17 x i8], ptr @xnwho_Insert_Sequential, align 1
  store [17 x i8] %305, ptr %304, align 1
  store ptr @String, ptr %27, align 8
  %306 = load ptr, ptr %27, align 8
  %307 = getelementptr ptr, ptr %306, i32 6
  %308 = load ptr, ptr %307, align 8
  %309 = call { i64, i64 } @size_wrapper(ptr %308, ptr %27)
  %310 = extractvalue { i64, i64 } %309, 0
  %311 = call ptr @bump_malloc(i64 %310)
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr @String, ptr %28, align 8
  store ptr %311, ptr %312, align 8
  store i32 9, ptr %313, align 4
  %314 = call ptr @llvm.invariant.start.p0(i64 16, ptr %28)
  %315 = getelementptr { ptr }, ptr %26, i32 0, i32 0
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr } undef, ptr %316, 0
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %319 = load ptr, ptr %318, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %319, 0
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %322 = load ptr, ptr %321, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } %320, ptr %322, 1
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %325 = load ptr, ptr %324, align 8
  %326 = insertvalue { ptr, ptr, ptr, i32 } %323, ptr %325, 2
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %328 = load i32, ptr %327, align 4
  %329 = insertvalue { ptr, ptr, ptr, i32 } %326, i32 %328, 3
  %330 = getelementptr [3 x ptr], ptr %29, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %330, align 8
  %331 = getelementptr [3 x ptr], ptr %29, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %331, align 8
  %332 = getelementptr [3 x ptr], ptr %29, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %332, align 8
  %333 = call ptr @llvm.invariant.start.p0(i64 9, ptr %29)
  %334 = call ptr @llvm.invariant.start.p0(i64 280, ptr %319)
  %335 = getelementptr ptr, ptr %319, i32 %328
  %336 = getelementptr ptr, ptr %335, i32 4
  %337 = load ptr, ptr %336, align 8
  %338 = getelementptr { ptr, ptr, ptr }, ptr %30, i32 0, i32 0
  store ptr @buffer_typ, ptr %338, align 8
  %339 = getelementptr { ptr, ptr, ptr }, ptr %30, i32 0, i32 1
  store ptr @i32_typ, ptr %339, align 8
  %340 = getelementptr { ptr, ptr, ptr }, ptr %30, i32 0, i32 2
  store ptr @i32_typ, ptr %340, align 8
  %341 = call ptr @behavior_wrapper(ptr %337, { ptr, ptr, ptr, i32 } %329, ptr %30)
  call void %341({ ptr, ptr, ptr, i32 } %329, { ptr, ptr, ptr, i32 } %329, ptr %29, { ptr } %317, i32 17, i32 18)
  %.reload23 = load i64, ptr %.reg2mem22, align 4
  %.reload37 = load i64, ptr %.reg2mem36, align 4
  %342 = sub i64 %.reload23, %.reload37
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %344 = load ptr, ptr %343, align 8
  %345 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %344, 0
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %347 = load ptr, ptr %346, align 8
  %348 = insertvalue { ptr, ptr, ptr, i32 } %345, ptr %347, 1
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %350 = load ptr, ptr %349, align 8
  %351 = insertvalue { ptr, ptr, ptr, i32 } %348, ptr %350, 2
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %353 = load i32, ptr %352, align 4
  %354 = insertvalue { ptr, ptr, ptr, i32 } %351, i32 %353, 3
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %354, i32 %0, i64 %342)
  %355 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 19))
  store ptr %355, ptr %31, align 8
  %356 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %357 = getelementptr { ptr }, ptr %32, i32 0, i32 0
  %358 = load ptr, ptr %356, align 8
  store ptr %358, ptr %357, align 8
  %359 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %360 = load ptr, ptr %32, align 8
  %361 = load [18 x i8], ptr @zjzap_____Verification_, align 1
  store [18 x i8] %361, ptr %360, align 1
  store ptr @String, ptr %33, align 8
  %362 = load ptr, ptr %33, align 8
  %363 = getelementptr ptr, ptr %362, i32 6
  %364 = load ptr, ptr %363, align 8
  %365 = call { i64, i64 } @size_wrapper(ptr %364, ptr %33)
  %366 = extractvalue { i64, i64 } %365, 0
  %367 = call ptr @bump_malloc(i64 %366)
  %368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  store ptr @String, ptr %34, align 8
  store ptr %367, ptr %368, align 8
  store i32 9, ptr %369, align 4
  %370 = call ptr @llvm.invariant.start.p0(i64 16, ptr %34)
  %371 = getelementptr { ptr }, ptr %32, i32 0, i32 0
  %372 = load ptr, ptr %371, align 8
  %373 = insertvalue { ptr } undef, ptr %372, 0
  %374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %375 = load ptr, ptr %374, align 8
  %376 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %375, 0
  %377 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %378 = load ptr, ptr %377, align 8
  %379 = insertvalue { ptr, ptr, ptr, i32 } %376, ptr %378, 1
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %381 = load ptr, ptr %380, align 8
  %382 = insertvalue { ptr, ptr, ptr, i32 } %379, ptr %381, 2
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %384 = load i32, ptr %383, align 4
  %385 = insertvalue { ptr, ptr, ptr, i32 } %382, i32 %384, 3
  %386 = getelementptr [3 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %386, align 8
  %387 = getelementptr [3 x ptr], ptr %35, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %387, align 8
  %388 = getelementptr [3 x ptr], ptr %35, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %388, align 8
  %389 = call ptr @llvm.invariant.start.p0(i64 9, ptr %35)
  %390 = call ptr @llvm.invariant.start.p0(i64 280, ptr %375)
  %391 = getelementptr ptr, ptr %375, i32 %384
  %392 = getelementptr ptr, ptr %391, i32 4
  %393 = load ptr, ptr %392, align 8
  %394 = getelementptr { ptr, ptr, ptr }, ptr %36, i32 0, i32 0
  store ptr @buffer_typ, ptr %394, align 8
  %395 = getelementptr { ptr, ptr, ptr }, ptr %36, i32 0, i32 1
  store ptr @i32_typ, ptr %395, align 8
  %396 = getelementptr { ptr, ptr, ptr }, ptr %36, i32 0, i32 2
  store ptr @i32_typ, ptr %396, align 8
  %397 = call ptr @behavior_wrapper(ptr %393, { ptr, ptr, ptr, i32 } %385, ptr %36)
  call void %397({ ptr, ptr, ptr, i32 } %385, { ptr, ptr, ptr, i32 } %385, ptr %35, { ptr } %373, i32 18, i32 19)
  %398 = getelementptr { ptr, i160 }, ptr %34, i32 0, i32 0
  %399 = load ptr, ptr %398, align 8
  %400 = insertvalue { ptr, i160 } undef, ptr %399, 0
  %401 = getelementptr { ptr, i160 }, ptr %34, i32 0, i32 1
  %402 = load i160, ptr %401, align 4
  %403 = insertvalue { ptr, i160 } %400, i160 %402, 1
  %404 = getelementptr [1 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_String, ptr %404, align 8
  %405 = call ptr @llvm.invariant.start.p0(i64 1, ptr %37)
  %406 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %407 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %408 = getelementptr { ptr }, ptr %38, i32 0, i32 0
  store ptr %399, ptr %408, align 8
  %409 = call ptr @class_behavior_wrapper(ptr %407, ptr %38)
  call void %409(ptr %37, { ptr, i160 } %403)
  br i1 %.reload39, label %410, label %466

410:                                              ; preds = %298
  %411 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %411, ptr %39, align 8
  %412 = getelementptr { ptr }, ptr %39, i32 0, i32 0
  %413 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  %414 = load ptr, ptr %412, align 8
  store ptr %414, ptr %413, align 8
  %415 = call ptr @llvm.invariant.start.p0(i64 16, ptr %40)
  %416 = load ptr, ptr %40, align 8
  %417 = load [4 x i8], ptr @onknt_PASS, align 1
  store [4 x i8] %417, ptr %416, align 1
  store ptr @String, ptr %41, align 8
  %418 = load ptr, ptr %41, align 8
  %419 = getelementptr ptr, ptr %418, i32 6
  %420 = load ptr, ptr %419, align 8
  %421 = call { i64, i64 } @size_wrapper(ptr %420, ptr %41)
  %422 = extractvalue { i64, i64 } %421, 0
  %423 = call ptr @bump_malloc(i64 %422)
  %424 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %425 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  store ptr @String, ptr %42, align 8
  store ptr %423, ptr %424, align 8
  store i32 9, ptr %425, align 4
  %426 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  %427 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  %428 = load ptr, ptr %427, align 8
  %429 = insertvalue { ptr } undef, ptr %428, 0
  %430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %431 = load ptr, ptr %430, align 8
  %432 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %431, 0
  %433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %434 = load ptr, ptr %433, align 8
  %435 = insertvalue { ptr, ptr, ptr, i32 } %432, ptr %434, 1
  %436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %437 = load ptr, ptr %436, align 8
  %438 = insertvalue { ptr, ptr, ptr, i32 } %435, ptr %437, 2
  %439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %440 = load i32, ptr %439, align 4
  %441 = insertvalue { ptr, ptr, ptr, i32 } %438, i32 %440, 3
  %442 = getelementptr [3 x ptr], ptr %43, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %442, align 8
  %443 = getelementptr [3 x ptr], ptr %43, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %443, align 8
  %444 = getelementptr [3 x ptr], ptr %43, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %444, align 8
  %445 = call ptr @llvm.invariant.start.p0(i64 9, ptr %43)
  %446 = call ptr @llvm.invariant.start.p0(i64 280, ptr %431)
  %447 = getelementptr ptr, ptr %431, i32 %440
  %448 = getelementptr ptr, ptr %447, i32 4
  %449 = load ptr, ptr %448, align 8
  %450 = getelementptr { ptr, ptr, ptr }, ptr %44, i32 0, i32 0
  store ptr @buffer_typ, ptr %450, align 8
  %451 = getelementptr { ptr, ptr, ptr }, ptr %44, i32 0, i32 1
  store ptr @i32_typ, ptr %451, align 8
  %452 = getelementptr { ptr, ptr, ptr }, ptr %44, i32 0, i32 2
  store ptr @i32_typ, ptr %452, align 8
  %453 = call ptr @behavior_wrapper(ptr %449, { ptr, ptr, ptr, i32 } %441, ptr %44)
  call void %453({ ptr, ptr, ptr, i32 } %441, { ptr, ptr, ptr, i32 } %441, ptr %43, { ptr } %429, i32 4, i32 5)
  %454 = getelementptr { ptr, i160 }, ptr %42, i32 0, i32 0
  %455 = load ptr, ptr %454, align 8
  %456 = insertvalue { ptr, i160 } undef, ptr %455, 0
  %457 = getelementptr { ptr, i160 }, ptr %42, i32 0, i32 1
  %458 = load i160, ptr %457, align 4
  %459 = insertvalue { ptr, i160 } %456, i160 %458, 1
  %460 = getelementptr [1 x ptr], ptr %45, i32 0, i32 0
  store ptr @_parameterization_String, ptr %460, align 8
  %461 = call ptr @llvm.invariant.start.p0(i64 1, ptr %45)
  %462 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %463 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %464 = getelementptr { ptr }, ptr %46, i32 0, i32 0
  store ptr %455, ptr %464, align 8
  %465 = call ptr @class_behavior_wrapper(ptr %463, ptr %46)
  call void %465(ptr %45, { ptr, i160 } %459)
  br label %522

466:                                              ; preds = %298
  %467 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %467, ptr %47, align 8
  %468 = getelementptr { ptr }, ptr %47, i32 0, i32 0
  %469 = getelementptr { ptr }, ptr %48, i32 0, i32 0
  %470 = load ptr, ptr %468, align 8
  store ptr %470, ptr %469, align 8
  %471 = call ptr @llvm.invariant.start.p0(i64 16, ptr %48)
  %472 = load ptr, ptr %48, align 8
  %473 = load [4 x i8], ptr @nkqcd_FAIL, align 1
  store [4 x i8] %473, ptr %472, align 1
  store ptr @String, ptr %49, align 8
  %474 = load ptr, ptr %49, align 8
  %475 = getelementptr ptr, ptr %474, i32 6
  %476 = load ptr, ptr %475, align 8
  %477 = call { i64, i64 } @size_wrapper(ptr %476, ptr %49)
  %478 = extractvalue { i64, i64 } %477, 0
  %479 = call ptr @bump_malloc(i64 %478)
  %480 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %481 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  store ptr @String, ptr %50, align 8
  store ptr %479, ptr %480, align 8
  store i32 9, ptr %481, align 4
  %482 = call ptr @llvm.invariant.start.p0(i64 16, ptr %50)
  %483 = getelementptr { ptr }, ptr %48, i32 0, i32 0
  %484 = load ptr, ptr %483, align 8
  %485 = insertvalue { ptr } undef, ptr %484, 0
  %486 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %487 = load ptr, ptr %486, align 8
  %488 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %487, 0
  %489 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %490 = load ptr, ptr %489, align 8
  %491 = insertvalue { ptr, ptr, ptr, i32 } %488, ptr %490, 1
  %492 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %493 = load ptr, ptr %492, align 8
  %494 = insertvalue { ptr, ptr, ptr, i32 } %491, ptr %493, 2
  %495 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %496 = load i32, ptr %495, align 4
  %497 = insertvalue { ptr, ptr, ptr, i32 } %494, i32 %496, 3
  %498 = getelementptr [3 x ptr], ptr %51, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %498, align 8
  %499 = getelementptr [3 x ptr], ptr %51, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %499, align 8
  %500 = getelementptr [3 x ptr], ptr %51, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %500, align 8
  %501 = call ptr @llvm.invariant.start.p0(i64 9, ptr %51)
  %502 = call ptr @llvm.invariant.start.p0(i64 280, ptr %487)
  %503 = getelementptr ptr, ptr %487, i32 %496
  %504 = getelementptr ptr, ptr %503, i32 4
  %505 = load ptr, ptr %504, align 8
  %506 = getelementptr { ptr, ptr, ptr }, ptr %52, i32 0, i32 0
  store ptr @buffer_typ, ptr %506, align 8
  %507 = getelementptr { ptr, ptr, ptr }, ptr %52, i32 0, i32 1
  store ptr @i32_typ, ptr %507, align 8
  %508 = getelementptr { ptr, ptr, ptr }, ptr %52, i32 0, i32 2
  store ptr @i32_typ, ptr %508, align 8
  %509 = call ptr @behavior_wrapper(ptr %505, { ptr, ptr, ptr, i32 } %497, ptr %52)
  call void %509({ ptr, ptr, ptr, i32 } %497, { ptr, ptr, ptr, i32 } %497, ptr %51, { ptr } %485, i32 4, i32 5)
  %510 = getelementptr { ptr, i160 }, ptr %50, i32 0, i32 0
  %511 = load ptr, ptr %510, align 8
  %512 = insertvalue { ptr, i160 } undef, ptr %511, 0
  %513 = getelementptr { ptr, i160 }, ptr %50, i32 0, i32 1
  %514 = load i160, ptr %513, align 4
  %515 = insertvalue { ptr, i160 } %512, i160 %514, 1
  %516 = getelementptr [1 x ptr], ptr %53, i32 0, i32 0
  store ptr @_parameterization_String, ptr %516, align 8
  %517 = call ptr @llvm.invariant.start.p0(i64 1, ptr %53)
  %518 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %519 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %520 = getelementptr { ptr }, ptr %54, i32 0, i32 0
  store ptr %511, ptr %520, align 8
  %521 = call ptr @class_behavior_wrapper(ptr %519, ptr %54)
  call void %521(ptr %53, { ptr, i160 } %515)
  br label %522

522:                                              ; preds = %466, %410
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.init.trampoline(ptr nocapture writeonly, ptr readnone, ptr readnone) #0

declare i64 @clock()

define void @benchmark_insert_random(i32 %0) {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca {}, align 8
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca [2 x ptr], align 8
  %7 = alloca { ptr, ptr }, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca [2 x ptr], align 8
  %13 = alloca { ptr, ptr }, align 8
  %14 = alloca [0 x ptr], align 8
  %15 = alloca {}, align 8
  %16 = alloca [1 x ptr], align 8
  %17 = alloca { ptr }, align 8
  %18 = alloca { ptr, i160 }, align 8
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca [2 x ptr], align 8
  %24 = alloca { ptr, ptr }, align 8
  %25 = alloca i160, align 8
  %26 = alloca ptr, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca { ptr }, align 8
  %29 = alloca { ptr, i160 }, align 8
  %30 = alloca i32, align 4
  %31 = alloca ptr, align 8
  %32 = alloca i32, align 4
  %33 = alloca ptr, align 8
  %34 = alloca i32, align 4
  %35 = alloca ptr, align 8
  %36 = alloca [0 x ptr], align 8
  %37 = alloca {}, align 8
  %38 = alloca i1, align 1
  %39 = alloca [0 x ptr], align 8
  %40 = alloca {}, align 8
  %41 = alloca i1, align 1
  %42 = alloca ptr, align 8
  %43 = alloca { ptr }, align 8
  %44 = alloca [1 x ptr], align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = alloca [3 x ptr], align 8
  %47 = alloca { ptr, ptr, ptr }, align 8
  %48 = alloca ptr, align 8
  %49 = alloca { ptr }, align 8
  %50 = alloca [1 x ptr], align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = alloca [3 x ptr], align 8
  %53 = alloca { ptr, ptr, ptr }, align 8
  %54 = alloca [1 x ptr], align 8
  %55 = alloca { ptr }, align 8
  %56 = alloca ptr, align 8
  %57 = alloca { ptr }, align 8
  %58 = alloca [1 x ptr], align 8
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = alloca [3 x ptr], align 8
  %61 = alloca { ptr, ptr, ptr }, align 8
  %62 = alloca [1 x ptr], align 8
  %63 = alloca { ptr }, align 8
  %64 = alloca ptr, align 8
  %65 = alloca { ptr }, align 8
  %66 = alloca [1 x ptr], align 8
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = alloca [3 x ptr], align 8
  %69 = alloca { ptr, ptr, ptr }, align 8
  %70 = alloca [1 x ptr], align 8
  %71 = alloca { ptr }, align 8
  %72 = alloca ptr, align 8
  %73 = alloca { ptr }, align 8
  %74 = alloca [1 x ptr], align 8
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = alloca [3 x ptr], align 8
  %77 = alloca { ptr, ptr, ptr }, align 8
  %78 = alloca [1 x ptr], align 8
  %79 = alloca { ptr }, align 8
  %80 = alloca i160, align 8
  %81 = alloca ptr, align 8
  %82 = alloca [1 x ptr], align 8
  %83 = alloca { ptr }, align 8
  %84 = alloca ptr, align 8
  %85 = alloca { ptr }, align 8
  %86 = alloca [1 x ptr], align 8
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = alloca [3 x ptr], align 8
  %89 = alloca { ptr, ptr, ptr }, align 8
  %90 = alloca [1 x ptr], align 8
  %91 = alloca { ptr }, align 8
  %92 = alloca [4 x ptr], align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem4 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i1, align 1
  %.reg2mem12 = alloca i1, align 1
  %.reg2mem14 = alloca i1, align 1
  %.reg2mem16 = alloca i1, align 1
  %.reg2mem19 = alloca i1, align 1
  %.reg2mem22 = alloca i64, align 8
  %.reg2mem24 = alloca i32, align 4
  %.reg2mem26 = alloca i32, align 4
  %.reg2mem28 = alloca i1, align 1
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem35 = alloca i64, align 8
  %.reg2mem37 = alloca i32, align 4
  %.reg2mem40 = alloca i32, align 4
  %.reg2mem42 = alloca i32, align 4
  %.reg2mem44 = alloca i32, align 4
  %.reg2mem46 = alloca i32, align 4
  %.reg2mem48 = alloca i32, align 4
  %.reg2mem50 = alloca i32, align 4
  %.reg2mem52 = alloca i1, align 1
  %.reg2mem55 = alloca i32, align 4
  %.reg2mem60 = alloca i32, align 4
  %.reg2mem65 = alloca i1, align 1
  %.reg2mem67 = alloca i32, align 4
  %.reg2mem69 = alloca i1, align 1
  %.reg2mem71 = alloca i1, align 1
  %.reg2mem73 = alloca i32, align 4
  %.reg2mem75 = alloca i32, align 4
  %.reg2mem77 = alloca i32, align 4
  %.reg2mem79 = alloca i32, align 4
  %.reg2mem81 = alloca i32, align 4
  %.reg2mem83 = alloca i32, align 4
  %.reg2mem85 = alloca i32, align 4
  %.reg2mem87 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store ptr @HashMap, ptr %92, align 8
  %93 = getelementptr ptr, ptr %92, i32 1
  store ptr @_parameterization_Ptri32, ptr %93, align 8
  %94 = getelementptr ptr, ptr %92, i32 2
  store ptr @_parameterization_Ptri32, ptr %94, align 8
  %95 = getelementptr ptr, ptr %92, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %95, align 8
  %96 = load ptr, ptr %92, align 8
  %97 = getelementptr ptr, ptr %96, i32 6
  %98 = load ptr, ptr %97, align 8
  %99 = call { i64, i64 } @size_wrapper(ptr %98, ptr %92)
  %100 = extractvalue { i64, i64 } %99, 0
  %101 = call ptr @bump_malloc(i64 %100)
  store ptr @_parameterization_Ptri32, ptr %101, align 8
  %102 = getelementptr ptr, ptr %101, i32 1
  store ptr @_parameterization_Ptri32, ptr %102, align 8
  %103 = getelementptr ptr, ptr %101, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %103, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 24, ptr %101)
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  store ptr @HashMap, ptr %105, align 8
  store ptr %101, ptr %106, align 8
  store i32 9, ptr %107, align 4
  %108 = call ptr @llvm.invariant.start.p0(i64 16, ptr %105)
  %109 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %109)
  call void @llvm.init.trampoline(ptr %109, ptr @mvylqfbtlr, ptr @i32_hasher)
  %110 = alloca ptr, align 8
  %111 = call ptr @adjust_trampoline(ptr %109)
  store ptr %111, ptr %110, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 24, ptr %109)
  %113 = call ptr @llvm.invariant.start.p0(i64 8, ptr %110)
  %114 = getelementptr { ptr }, ptr %110, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr } undef, ptr %115, 0
  %117 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %117)
  call void @llvm.init.trampoline(ptr %117, ptr @ozmniergrw, ptr @i32_eq)
  %118 = alloca ptr, align 8
  %119 = call ptr @adjust_trampoline(ptr %117)
  store ptr %119, ptr %118, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 24, ptr %117)
  %121 = call ptr @llvm.invariant.start.p0(i64 8, ptr %118)
  %122 = getelementptr { ptr }, ptr %118, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr } undef, ptr %123, 0
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %126, 0
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 2
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %135 = load i32, ptr %134, align 4
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %135, 3
  %137 = alloca [2 x ptr], align 8
  %138 = getelementptr [2 x ptr], ptr %137, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %138, align 8
  %139 = getelementptr [2 x ptr], ptr %137, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %139, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 4, ptr %137)
  %141 = call ptr @llvm.invariant.start.p0(i64 688, ptr %126)
  %142 = getelementptr ptr, ptr %126, i32 %135
  %143 = getelementptr ptr, ptr %142, i32 9
  %144 = load ptr, ptr %143, align 8
  %145 = alloca { ptr, ptr }, align 8
  %146 = getelementptr { ptr, ptr }, ptr %145, i32 0, i32 0
  store ptr @function_typ, ptr %146, align 8
  %147 = getelementptr { ptr, ptr }, ptr %145, i32 0, i32 1
  store ptr @function_typ, ptr %147, align 8
  %148 = call ptr @behavior_wrapper(ptr %144, { ptr, ptr, ptr, i32 } %136, ptr %145)
  call void %148({ ptr, ptr, ptr, i32 } %136, { ptr, ptr, ptr, i32 } %136, ptr %137, { ptr } %116, { ptr } %124)
  %149 = alloca { ptr, ptr, ptr, i32 }, align 8
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 0
  %152 = load ptr, ptr %150, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 1
  %155 = load ptr, ptr %153, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 2
  %158 = load ptr, ptr %156, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 3
  %161 = load i32, ptr %159, align 4
  store i32 %161, ptr %160, align 4
  call void @set_offset(ptr %149, ptr @HashMap)
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 0
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %165 = load ptr, ptr %163, align 8
  store ptr %165, ptr %164, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 1
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 2
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %171 = load ptr, ptr %169, align 8
  store ptr %171, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 3
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %174 = load i32, ptr %172, align 4
  store i32 %174, ptr %173, align 4
  %175 = call ptr @llvm.invariant.start.p0(i64 16, ptr %162)
  %176 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %176, align 8
  %177 = load ptr, ptr %176, align 8
  %178 = getelementptr ptr, ptr %177, i32 6
  %179 = load ptr, ptr %178, align 8
  %180 = call { i64, i64 } @size_wrapper(ptr %179, ptr %176)
  %181 = extractvalue { i64, i64 } %180, 0
  %182 = call ptr @bump_malloc(i64 %181)
  %183 = alloca { ptr, ptr, ptr, i32 }, align 8
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 1
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 3
  store ptr @PRNG, ptr %183, align 8
  store ptr %182, ptr %184, align 8
  store i32 9, ptr %185, align 4
  %186 = call ptr @llvm.invariant.start.p0(i64 16, ptr %183)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 2
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %194, 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %197, 3
  %199 = alloca [1 x ptr], align 8
  %200 = getelementptr [1 x ptr], ptr %199, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %200, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 1, ptr %199)
  %202 = call ptr @llvm.invariant.start.p0(i64 40, ptr %188)
  %203 = getelementptr ptr, ptr %188, i32 %197
  %204 = getelementptr ptr, ptr %203, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = alloca { ptr }, align 8
  %207 = getelementptr { ptr }, ptr %206, i32 0, i32 0
  store ptr @i32_typ, ptr %207, align 8
  %208 = call ptr @behavior_wrapper(ptr %205, { ptr, ptr, ptr, i32 } %198, ptr %206)
  call void %208({ ptr, ptr, ptr, i32 } %198, { ptr, ptr, ptr, i32 } %198, ptr %199, i32 123)
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 3
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %221 = load i32, ptr %219, align 4
  store i32 %221, ptr %220, align 4
  call void @set_offset(ptr %209, ptr @PRNG)
  %222 = alloca { ptr, ptr, ptr, i32 }, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %225 = load ptr, ptr %223, align 8
  store ptr %225, ptr %224, align 8
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %228 = load ptr, ptr %226, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %231 = load ptr, ptr %229, align 8
  store ptr %231, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %234 = load i32, ptr %232, align 4
  store i32 %234, ptr %233, align 4
  %235 = call ptr @llvm.invariant.start.p0(i64 16, ptr %222)
  %236 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %236, align 8
  %237 = getelementptr ptr, ptr %236, i32 1
  store ptr @_parameterization_Ptri32, ptr %237, align 8
  %238 = load ptr, ptr %236, align 8
  %239 = getelementptr ptr, ptr %238, i32 6
  %240 = load ptr, ptr %239, align 8
  %241 = call { i64, i64 } @size_wrapper(ptr %240, ptr %236)
  %242 = extractvalue { i64, i64 } %241, 0
  %243 = call ptr @bump_malloc(i64 %242)
  store ptr @_parameterization_Ptri32, ptr %243, align 8
  %244 = call ptr @llvm.invariant.start.p0(i64 8, ptr %243)
  %245 = alloca { ptr, ptr, ptr, i32 }, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 1
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 3
  store ptr @Array, ptr %245, align 8
  store ptr %243, ptr %246, align 8
  store i32 9, ptr %247, align 4
  %248 = call ptr @llvm.invariant.start.p0(i64 16, ptr %245)
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 0
  %250 = load ptr, ptr %249, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %250, 0
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 1
  %253 = load ptr, ptr %252, align 8
  %254 = insertvalue { ptr, ptr, ptr, i32 } %251, ptr %253, 1
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 2
  %256 = load ptr, ptr %255, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } %254, ptr %256, 2
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 3
  %259 = load i32, ptr %258, align 4
  %260 = insertvalue { ptr, ptr, ptr, i32 } %257, i32 %259, 3
  %261 = alloca [1 x ptr], align 8
  %262 = getelementptr [1 x ptr], ptr %261, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %262, align 8
  %263 = call ptr @llvm.invariant.start.p0(i64 1, ptr %261)
  %264 = call ptr @llvm.invariant.start.p0(i64 600, ptr %250)
  %265 = getelementptr ptr, ptr %250, i32 %259
  %266 = getelementptr ptr, ptr %265, i32 6
  %267 = load ptr, ptr %266, align 8
  %268 = alloca { ptr }, align 8
  %269 = getelementptr { ptr }, ptr %268, i32 0, i32 0
  store ptr @i32_typ, ptr %269, align 8
  %270 = call ptr @behavior_wrapper(ptr %267, { ptr, ptr, ptr, i32 } %260, ptr %268)
  call void %270({ ptr, ptr, ptr, i32 } %260, { ptr, ptr, ptr, i32 } %260, ptr %261, i32 %0)
  %271 = alloca { ptr, ptr, ptr, i32 }, align 8
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 0
  %273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 0
  %274 = load ptr, ptr %272, align 8
  store ptr %274, ptr %273, align 8
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 1
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 1
  %277 = load ptr, ptr %275, align 8
  store ptr %277, ptr %276, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 2
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 2
  %280 = load ptr, ptr %278, align 8
  store ptr %280, ptr %279, align 8
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 3
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 3
  %283 = load i32, ptr %281, align 4
  store i32 %283, ptr %282, align 4
  call void @set_offset(ptr %271, ptr @Array)
  %284 = alloca { ptr, ptr, ptr, i32 }, align 8
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 0
  %286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 0
  %287 = load ptr, ptr %285, align 8
  store ptr %287, ptr %286, align 8
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 1
  %289 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 1
  %290 = load ptr, ptr %288, align 8
  store ptr %290, ptr %289, align 8
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 2
  %292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 2
  %293 = load ptr, ptr %291, align 8
  store ptr %293, ptr %292, align 8
  %294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %271, i32 0, i32 3
  %295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 3
  %296 = load i32, ptr %294, align 4
  store i32 %296, ptr %295, align 4
  %297 = call ptr @llvm.invariant.start.p0(i64 16, ptr %284)
  %298 = alloca [4 x ptr], align 8
  store ptr @HashMap, ptr %298, align 8
  %299 = getelementptr ptr, ptr %298, i32 1
  store ptr @_parameterization_Ptri32, ptr %299, align 8
  %300 = getelementptr ptr, ptr %298, i32 2
  store ptr @_parameterization_Ptri1, ptr %300, align 8
  %301 = getelementptr ptr, ptr %298, i32 3
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %301, align 8
  %302 = load ptr, ptr %298, align 8
  %303 = getelementptr ptr, ptr %302, i32 6
  %304 = load ptr, ptr %303, align 8
  %305 = call { i64, i64 } @size_wrapper(ptr %304, ptr %298)
  %306 = extractvalue { i64, i64 } %305, 0
  %307 = call ptr @bump_malloc(i64 %306)
  store ptr @_parameterization_Ptri32, ptr %307, align 8
  %308 = getelementptr ptr, ptr %307, i32 1
  store ptr @_parameterization_Ptri1, ptr %308, align 8
  %309 = getelementptr ptr, ptr %307, i32 2
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %309, align 8
  %310 = call ptr @llvm.invariant.start.p0(i64 24, ptr %307)
  %311 = alloca { ptr, ptr, ptr, i32 }, align 8
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 1
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 3
  store ptr @HashMap, ptr %311, align 8
  store ptr %307, ptr %312, align 8
  store i32 9, ptr %313, align 4
  %314 = call ptr @llvm.invariant.start.p0(i64 16, ptr %311)
  %315 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %315)
  call void @llvm.init.trampoline(ptr %315, ptr @hduqypajio, ptr @i32_hasher)
  %316 = alloca ptr, align 8
  %317 = call ptr @adjust_trampoline(ptr %315)
  store ptr %317, ptr %316, align 8
  %318 = call ptr @llvm.invariant.start.p0(i64 24, ptr %315)
  %319 = call ptr @llvm.invariant.start.p0(i64 8, ptr %316)
  %320 = getelementptr { ptr }, ptr %316, i32 0, i32 0
  %321 = load ptr, ptr %320, align 8
  %322 = insertvalue { ptr } undef, ptr %321, 0
  %323 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %323)
  call void @llvm.init.trampoline(ptr %323, ptr @sjlikdsypy, ptr @i32_eq)
  %324 = alloca ptr, align 8
  %325 = call ptr @adjust_trampoline(ptr %323)
  store ptr %325, ptr %324, align 8
  %326 = call ptr @llvm.invariant.start.p0(i64 24, ptr %323)
  %327 = call ptr @llvm.invariant.start.p0(i64 8, ptr %324)
  %328 = getelementptr { ptr }, ptr %324, i32 0, i32 0
  %329 = load ptr, ptr %328, align 8
  %330 = insertvalue { ptr } undef, ptr %329, 0
  %331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 0
  %332 = load ptr, ptr %331, align 8
  %333 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %332, 0
  %334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 1
  %335 = load ptr, ptr %334, align 8
  %336 = insertvalue { ptr, ptr, ptr, i32 } %333, ptr %335, 1
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 2
  %338 = load ptr, ptr %337, align 8
  %339 = insertvalue { ptr, ptr, ptr, i32 } %336, ptr %338, 2
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 3
  %341 = load i32, ptr %340, align 4
  %342 = insertvalue { ptr, ptr, ptr, i32 } %339, i32 %341, 3
  %343 = alloca [2 x ptr], align 8
  %344 = getelementptr [2 x ptr], ptr %343, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %344, align 8
  %345 = getelementptr [2 x ptr], ptr %343, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %345, align 8
  %346 = call ptr @llvm.invariant.start.p0(i64 4, ptr %343)
  %347 = call ptr @llvm.invariant.start.p0(i64 688, ptr %332)
  %348 = getelementptr ptr, ptr %332, i32 %341
  %349 = getelementptr ptr, ptr %348, i32 9
  %350 = load ptr, ptr %349, align 8
  %351 = alloca { ptr, ptr }, align 8
  %352 = getelementptr { ptr, ptr }, ptr %351, i32 0, i32 0
  store ptr @function_typ, ptr %352, align 8
  %353 = getelementptr { ptr, ptr }, ptr %351, i32 0, i32 1
  store ptr @function_typ, ptr %353, align 8
  %354 = call ptr @behavior_wrapper(ptr %350, { ptr, ptr, ptr, i32 } %342, ptr %351)
  call void %354({ ptr, ptr, ptr, i32 } %342, { ptr, ptr, ptr, i32 } %342, ptr %343, { ptr } %322, { ptr } %330)
  %355 = alloca { ptr, ptr, ptr, i32 }, align 8
  %356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 0
  %357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 0
  %358 = load ptr, ptr %356, align 8
  store ptr %358, ptr %357, align 8
  %359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 1
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 1
  %361 = load ptr, ptr %359, align 8
  store ptr %361, ptr %360, align 8
  %362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 2
  %363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 2
  %364 = load ptr, ptr %362, align 8
  store ptr %364, ptr %363, align 8
  %365 = getelementptr { ptr, ptr, ptr, i32 }, ptr %311, i32 0, i32 3
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 3
  %367 = load i32, ptr %365, align 4
  store i32 %367, ptr %366, align 4
  call void @set_offset(ptr %355, ptr @HashMap)
  %368 = alloca { ptr, ptr, ptr, i32 }, align 8
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 0
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %371 = load ptr, ptr %369, align 8
  store ptr %371, ptr %370, align 8
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 1
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %374 = load ptr, ptr %372, align 8
  store ptr %374, ptr %373, align 8
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 2
  %376 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %377 = load ptr, ptr %375, align 8
  store ptr %377, ptr %376, align 8
  %378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 3
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %380 = load i32, ptr %378, align 4
  store i32 %380, ptr %379, align 4
  %381 = call ptr @llvm.invariant.start.p0(i64 16, ptr %368)
  store i32 -1, ptr %.reg2mem85, align 4
  store i32 0, ptr %.reg2mem87, align 4
  br label %382

382:                                              ; preds = %467, %1
  %.reload88 = load i32, ptr %.reg2mem87, align 4
  %.reload86 = load i32, ptr %.reg2mem85, align 4
  store i32 %.reload88, ptr %.reg2mem60, align 4
  store i32 %.reload86, ptr %.reg2mem55, align 4
  %.reload64 = load i32, ptr %.reg2mem60, align 4
  %383 = icmp slt i32 %.reload64, %0
  store i1 %383, ptr %.reg2mem52, align 1
  %.reload54 = load i1, ptr %.reg2mem52, align 1
  br i1 %.reload54, label %384, label %464

384:                                              ; preds = %382
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %386 = load ptr, ptr %385, align 8
  %387 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %386, 0
  %388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %389 = load ptr, ptr %388, align 8
  %390 = insertvalue { ptr, ptr, ptr, i32 } %387, ptr %389, 1
  %391 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %392 = load ptr, ptr %391, align 8
  %393 = insertvalue { ptr, ptr, ptr, i32 } %390, ptr %392, 2
  %394 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %395 = load i32, ptr %394, align 4
  %396 = insertvalue { ptr, ptr, ptr, i32 } %393, i32 %395, 3
  %397 = call ptr @llvm.invariant.start.p0(i64 0, ptr %2)
  %398 = call ptr @llvm.invariant.start.p0(i64 40, ptr %386)
  %399 = getelementptr ptr, ptr %386, i32 %395
  %400 = getelementptr ptr, ptr %399, i32 2
  %401 = load ptr, ptr %400, align 8
  %402 = call ptr @behavior_wrapper(ptr %401, { ptr, ptr, ptr, i32 } %396, ptr %3)
  %403 = call i32 %402({ ptr, ptr, ptr, i32 } %396, { ptr, ptr, ptr, i32 } %396, ptr %2)
  store ptr @i32_typ, ptr %5, align 8
  store i32 %403, ptr %4, align 4
  %404 = load ptr, ptr %5, align 8
  %405 = insertvalue { ptr, i160 } undef, ptr %404, 0
  %406 = load i160, ptr %4, align 4
  %407 = insertvalue { ptr, i160 } %405, i160 %406, 1
  %408 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 0
  %409 = load ptr, ptr %408, align 8
  %410 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %409, 0
  %411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 1
  %412 = load ptr, ptr %411, align 8
  %413 = insertvalue { ptr, ptr, ptr, i32 } %410, ptr %412, 1
  %414 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 2
  %415 = load ptr, ptr %414, align 8
  %416 = insertvalue { ptr, ptr, ptr, i32 } %413, ptr %415, 2
  %417 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 3
  %418 = load i32, ptr %417, align 4
  %419 = insertvalue { ptr, ptr, ptr, i32 } %416, i32 %418, 3
  %420 = getelementptr [2 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %420, align 8
  %421 = getelementptr [2 x ptr], ptr %6, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %421, align 8
  %422 = call ptr @llvm.invariant.start.p0(i64 4, ptr %6)
  %423 = call ptr @llvm.invariant.start.p0(i64 600, ptr %409)
  %424 = getelementptr ptr, ptr %409, i32 %418
  %425 = getelementptr ptr, ptr %424, i32 16
  %426 = load ptr, ptr %425, align 8
  %427 = getelementptr { ptr, ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %427, align 8
  %428 = getelementptr { ptr, ptr }, ptr %7, i32 0, i32 1
  store ptr %404, ptr %428, align 8
  %429 = call ptr @behavior_wrapper(ptr %426, { ptr, ptr, ptr, i32 } %419, ptr %7)
  %.reload63 = load i32, ptr %.reg2mem60, align 4
  call void %429({ ptr, ptr, ptr, i32 } %419, { ptr, ptr, ptr, i32 } %419, ptr %6, i32 %.reload63, { ptr, i160 } %407)
  %430 = sub i32 %0, 1
  %.reload62 = load i32, ptr %.reg2mem60, align 4
  %431 = icmp eq i32 %.reload62, %430
  %.reload59 = load i32, ptr %.reg2mem55, align 4
  %432 = select i1 %431, i32 %403, i32 %.reload59
  store i32 %432, ptr %.reg2mem50, align 4
  store ptr @i32_typ, ptr %9, align 8
  store i32 %403, ptr %8, align 4
  %433 = load ptr, ptr %9, align 8
  %434 = insertvalue { ptr, i160 } undef, ptr %433, 0
  %435 = load i160, ptr %8, align 4
  %436 = insertvalue { ptr, i160 } %434, i160 %435, 1
  store ptr @bool_typ, ptr %11, align 8
  store i1 true, ptr %10, align 1
  %437 = load ptr, ptr %11, align 8
  %438 = insertvalue { ptr, i160 } undef, ptr %437, 0
  %439 = load i160, ptr %10, align 4
  %440 = insertvalue { ptr, i160 } %438, i160 %439, 1
  %441 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %442 = load ptr, ptr %441, align 8
  %443 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %442, 0
  %444 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %445 = load ptr, ptr %444, align 8
  %446 = insertvalue { ptr, ptr, ptr, i32 } %443, ptr %445, 1
  %447 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %448 = load ptr, ptr %447, align 8
  %449 = insertvalue { ptr, ptr, ptr, i32 } %446, ptr %448, 2
  %450 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %451 = load i32, ptr %450, align 4
  %452 = insertvalue { ptr, ptr, ptr, i32 } %449, i32 %451, 3
  %453 = getelementptr [2 x ptr], ptr %12, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %453, align 8
  %454 = getelementptr [2 x ptr], ptr %12, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %454, align 8
  %455 = call ptr @llvm.invariant.start.p0(i64 4, ptr %12)
  %456 = call ptr @llvm.invariant.start.p0(i64 688, ptr %442)
  %457 = getelementptr ptr, ptr %442, i32 %451
  %458 = getelementptr ptr, ptr %457, i32 18
  %459 = load ptr, ptr %458, align 8
  %460 = getelementptr { ptr, ptr }, ptr %13, i32 0, i32 0
  store ptr %433, ptr %460, align 8
  %461 = getelementptr { ptr, ptr }, ptr %13, i32 0, i32 1
  store ptr %437, ptr %461, align 8
  %462 = call ptr @behavior_wrapper(ptr %459, { ptr, ptr, ptr, i32 } %452, ptr %13)
  call void %462({ ptr, ptr, ptr, i32 } %452, { ptr, ptr, ptr, i32 } %452, ptr %12, { ptr, i160 } %436, { ptr, i160 } %440)
  %.reload61 = load i32, ptr %.reg2mem60, align 4
  %463 = add i32 %.reload61, 1
  store i32 %463, ptr %.reg2mem48, align 4
  %.reload49 = load i32, ptr %.reg2mem48, align 4
  %.reload51 = load i32, ptr %.reg2mem50, align 4
  store i32 %.reload51, ptr %.reg2mem81, align 4
  store i32 %.reload49, ptr %.reg2mem83, align 4
  br label %465

464:                                              ; preds = %382
  store i32 poison, ptr %.reg2mem81, align 4
  store i32 poison, ptr %.reg2mem83, align 4
  br label %465

465:                                              ; preds = %464, %384
  %.reload84 = load i32, ptr %.reg2mem83, align 4
  %.reload82 = load i32, ptr %.reg2mem81, align 4
  store i32 %.reload84, ptr %.reg2mem46, align 4
  store i32 %.reload82, ptr %.reg2mem44, align 4
  br label %466

466:                                              ; preds = %465
  %.reload45 = load i32, ptr %.reg2mem44, align 4
  %.reload47 = load i32, ptr %.reg2mem46, align 4
  %.reload53 = load i1, ptr %.reg2mem52, align 1
  %.reload58 = load i32, ptr %.reg2mem55, align 4
  store i32 %.reload45, ptr %.reg2mem77, align 4
  store i32 %.reload47, ptr %.reg2mem79, align 4
  br i1 %.reload53, label %467, label %468

467:                                              ; preds = %466
  %.reload80 = load i32, ptr %.reg2mem79, align 4
  %.reload78 = load i32, ptr %.reg2mem77, align 4
  store i32 %.reload80, ptr %.reg2mem42, align 4
  store i32 %.reload78, ptr %.reg2mem40, align 4
  %.reload41 = load i32, ptr %.reg2mem40, align 4
  %.reload43 = load i32, ptr %.reg2mem42, align 4
  store i32 %.reload41, ptr %.reg2mem85, align 4
  store i32 %.reload43, ptr %.reg2mem87, align 4
  br label %382

468:                                              ; preds = %466
  %469 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %470 = load ptr, ptr %469, align 8
  %471 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %470, 0
  %472 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %473 = load ptr, ptr %472, align 8
  %474 = insertvalue { ptr, ptr, ptr, i32 } %471, ptr %473, 1
  %475 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %476 = load ptr, ptr %475, align 8
  %477 = insertvalue { ptr, ptr, ptr, i32 } %474, ptr %476, 2
  %478 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %479 = load i32, ptr %478, align 4
  %480 = insertvalue { ptr, ptr, ptr, i32 } %477, i32 %479, 3
  %481 = call ptr @llvm.invariant.start.p0(i64 0, ptr %14)
  %482 = call ptr @llvm.invariant.start.p0(i64 688, ptr %470)
  %483 = getelementptr ptr, ptr %470, i32 %479
  %484 = getelementptr ptr, ptr %483, i32 24
  %485 = load ptr, ptr %484, align 8
  %486 = call ptr @behavior_wrapper(ptr %485, { ptr, ptr, ptr, i32 } %480, ptr %15)
  %487 = call i32 %486({ ptr, ptr, ptr, i32 } %480, { ptr, ptr, ptr, i32 } %480, ptr %14)
  store i32 %487, ptr %.reg2mem37, align 4
  %488 = call i64 @clock()
  store i64 %488, ptr %.reg2mem35, align 4
  store i32 0, ptr %.reg2mem75, align 4
  br label %489

489:                                              ; preds = %._crit_edge, %468
  %.reload76 = load i32, ptr %.reg2mem75, align 4
  store i32 %.reload76, ptr %.reg2mem31, align 4
  %.reload34 = load i32, ptr %.reg2mem31, align 4
  %490 = icmp slt i32 %.reload34, %0
  store i1 %490, ptr %.reg2mem28, align 1
  %.reload30 = load i1, ptr %.reg2mem28, align 1
  br i1 %.reload30, label %491, label %547

491:                                              ; preds = %489
  %492 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 0
  %493 = load ptr, ptr %492, align 8
  %494 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %493, 0
  %495 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 1
  %496 = load ptr, ptr %495, align 8
  %497 = insertvalue { ptr, ptr, ptr, i32 } %494, ptr %496, 1
  %498 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 2
  %499 = load ptr, ptr %498, align 8
  %500 = insertvalue { ptr, ptr, ptr, i32 } %497, ptr %499, 2
  %501 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 3
  %502 = load i32, ptr %501, align 4
  %503 = insertvalue { ptr, ptr, ptr, i32 } %500, i32 %502, 3
  %504 = getelementptr [1 x ptr], ptr %16, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %504, align 8
  %505 = call ptr @llvm.invariant.start.p0(i64 1, ptr %16)
  %506 = call ptr @llvm.invariant.start.p0(i64 600, ptr %493)
  %507 = getelementptr ptr, ptr %493, i32 %502
  %508 = getelementptr ptr, ptr %507, i32 15
  %509 = load ptr, ptr %508, align 8
  %510 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  store ptr @i32_typ, ptr %510, align 8
  %511 = call ptr @behavior_wrapper(ptr %509, { ptr, ptr, ptr, i32 } %503, ptr %17)
  %.reload33 = load i32, ptr %.reg2mem31, align 4
  %512 = call { ptr, i160 } %511({ ptr, ptr, ptr, i32 } %503, { ptr, ptr, ptr, i32 } %503, ptr %16, i32 %.reload33)
  store { ptr, i160 } %512, ptr %18, align 8
  %513 = getelementptr { ptr, i160 }, ptr %18, i32 0, i32 1
  %514 = load i32, ptr %513, align 4
  %515 = add i32 %514, 1
  store ptr @i32_typ, ptr %20, align 8
  store i32 %514, ptr %19, align 4
  %516 = load ptr, ptr %20, align 8
  %517 = insertvalue { ptr, i160 } undef, ptr %516, 0
  %518 = load i160, ptr %19, align 4
  %519 = insertvalue { ptr, i160 } %517, i160 %518, 1
  store ptr @i32_typ, ptr %22, align 8
  store i32 %515, ptr %21, align 4
  %520 = load ptr, ptr %22, align 8
  %521 = insertvalue { ptr, i160 } undef, ptr %520, 0
  %522 = load i160, ptr %21, align 4
  %523 = insertvalue { ptr, i160 } %521, i160 %522, 1
  %524 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %525 = load ptr, ptr %524, align 8
  %526 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %525, 0
  %527 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %528 = load ptr, ptr %527, align 8
  %529 = insertvalue { ptr, ptr, ptr, i32 } %526, ptr %528, 1
  %530 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %531 = load ptr, ptr %530, align 8
  %532 = insertvalue { ptr, ptr, ptr, i32 } %529, ptr %531, 2
  %533 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %534 = load i32, ptr %533, align 4
  %535 = insertvalue { ptr, ptr, ptr, i32 } %532, i32 %534, 3
  %536 = getelementptr [2 x ptr], ptr %23, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %536, align 8
  %537 = getelementptr [2 x ptr], ptr %23, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %537, align 8
  %538 = call ptr @llvm.invariant.start.p0(i64 4, ptr %23)
  %539 = call ptr @llvm.invariant.start.p0(i64 688, ptr %525)
  %540 = getelementptr ptr, ptr %525, i32 %534
  %541 = getelementptr ptr, ptr %540, i32 18
  %542 = load ptr, ptr %541, align 8
  %543 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 0
  store ptr %516, ptr %543, align 8
  %544 = getelementptr { ptr, ptr }, ptr %24, i32 0, i32 1
  store ptr %520, ptr %544, align 8
  %545 = call ptr @behavior_wrapper(ptr %542, { ptr, ptr, ptr, i32 } %535, ptr %24)
  call void %545({ ptr, ptr, ptr, i32 } %535, { ptr, ptr, ptr, i32 } %535, ptr %23, { ptr, i160 } %519, { ptr, i160 } %523)
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  %546 = add i32 %.reload32, 1
  store i32 %546, ptr %.reg2mem26, align 4
  %.reload27 = load i32, ptr %.reg2mem26, align 4
  store i32 %.reload27, ptr %.reg2mem73, align 4
  br label %548

547:                                              ; preds = %489
  store i32 poison, ptr %.reg2mem73, align 4
  br label %548

548:                                              ; preds = %547, %491
  %.reload74 = load i32, ptr %.reg2mem73, align 4
  store i32 %.reload74, ptr %.reg2mem24, align 4
  br label %549

549:                                              ; preds = %548
  %.reload29 = load i1, ptr %.reg2mem28, align 1
  br i1 %.reload29, label %._crit_edge, label %550

._crit_edge:                                      ; preds = %549
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  store i32 %.reload25, ptr %.reg2mem75, align 4
  br label %489

550:                                              ; preds = %549
  %551 = call i64 @clock()
  store i64 %551, ptr %.reg2mem22, align 4
  %552 = icmp sgt i32 %0, 0
  store i1 %552, ptr %.reg2mem19, align 1
  %.reload21 = load i1, ptr %.reg2mem19, align 1
  br i1 %.reload21, label %553, label %640

553:                                              ; preds = %550
  store ptr @i32_typ, ptr %26, align 8
  %.reload57 = load i32, ptr %.reg2mem55, align 4
  store i32 %.reload57, ptr %25, align 4
  %554 = load ptr, ptr %26, align 8
  %555 = insertvalue { ptr, i160 } undef, ptr %554, 0
  %556 = load i160, ptr %25, align 4
  %557 = insertvalue { ptr, i160 } %555, i160 %556, 1
  %558 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %559 = load ptr, ptr %558, align 8
  %560 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %559, 0
  %561 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %562 = load ptr, ptr %561, align 8
  %563 = insertvalue { ptr, ptr, ptr, i32 } %560, ptr %562, 1
  %564 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %565 = load ptr, ptr %564, align 8
  %566 = insertvalue { ptr, ptr, ptr, i32 } %563, ptr %565, 2
  %567 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %568 = load i32, ptr %567, align 4
  %569 = insertvalue { ptr, ptr, ptr, i32 } %566, i32 %568, 3
  %570 = getelementptr [1 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %570, align 8
  %571 = call ptr @llvm.invariant.start.p0(i64 1, ptr %27)
  %572 = call ptr @llvm.invariant.start.p0(i64 688, ptr %559)
  %573 = getelementptr ptr, ptr %559, i32 %568
  %574 = getelementptr ptr, ptr %573, i32 20
  %575 = load ptr, ptr %574, align 8
  %576 = getelementptr { ptr }, ptr %28, i32 0, i32 0
  store ptr %554, ptr %576, align 8
  %577 = call ptr @behavior_wrapper(ptr %575, { ptr, ptr, ptr, i32 } %569, ptr %28)
  %578 = call { ptr, i160 } %577({ ptr, ptr, ptr, i32 } %569, { ptr, ptr, ptr, i32 } %569, ptr %27, { ptr, i160 } %557)
  store { ptr, i160 } %578, ptr %29, align 8
  %579 = getelementptr { ptr, i32 }, ptr %29, i32 0, i32 0
  %580 = load ptr, ptr %579, align 8
  store ptr %580, ptr %31, align 8
  %581 = getelementptr { ptr, i32 }, ptr %29, i32 0, i32 1
  %582 = load i32, ptr %581, align 4
  store i32 %582, ptr %30, align 4
  %583 = load ptr, ptr %31, align 8
  %584 = ptrtoint ptr %583 to i64
  %585 = icmp eq i64 %584, ptrtoint (ptr @nil_typ to i64)
  %586 = icmp eq i64 %584, 0
  %587 = or i1 %585, %586
  %588 = xor i1 %587, true
  store i1 %588, ptr %.reg2mem16, align 1
  br i1 %587, label %589, label %._crit_edge1

._crit_edge1:                                     ; preds = %553
  br label %593

589:                                              ; preds = %553
  %590 = load [0 x i8], ptr %30, align 1
  store [0 x i8] %590, ptr %32, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %33, align 4
  %591 = load ptr, ptr %33, align 8
  store ptr %591, ptr %31, align 8
  %592 = load i32, ptr %32, align 4
  store i32 %592, ptr %30, align 4
  br label %593

593:                                              ; preds = %._crit_edge1, %589
  %594 = load ptr, ptr %31, align 8
  %595 = ptrtoint ptr %594 to i64
  %596 = icmp eq i64 %595, ptrtoint (ptr @nil_typ to i64)
  %597 = icmp eq i64 %595, 0
  %598 = or i1 %596, %597
  %599 = icmp eq i1 %598, false
  br i1 %599, label %600, label %607

600:                                              ; preds = %593
  %601 = load i32, ptr %30, align 4
  %.reload56 = load i32, ptr %.reg2mem55, align 4
  %602 = add i32 %.reload56, 1
  %603 = icmp ne i32 %601, %602
  %.reload18 = load i1, ptr %.reg2mem16, align 1
  %604 = select i1 %603, i1 false, i1 %.reload18
  store i1 %604, ptr %.reg2mem14, align 1
  store i32 %601, ptr %34, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %35, align 4
  %605 = load ptr, ptr %35, align 8
  store ptr %605, ptr %31, align 8
  %606 = load i32, ptr %34, align 4
  store i32 %606, ptr %30, align 4
  %.reload15 = load i1, ptr %.reg2mem14, align 1
  store i1 %.reload15, ptr %.reg2mem71, align 1
  br label %617

607:                                              ; preds = %593
  %608 = load ptr, ptr %31, align 8
  %609 = ptrtoint ptr %608 to i64
  %610 = icmp eq i64 %609, ptrtoint (ptr @nil_typ to i64)
  %611 = icmp eq i64 %609, 0
  %612 = or i1 %610, %611
  %613 = icmp eq i1 %612, false
  %.reload17 = load i1, ptr %.reg2mem16, align 1
  %614 = select i1 %613, i1 false, i1 %.reload17
  store i1 %614, ptr %.reg2mem12, align 1
  %615 = load ptr, ptr %31, align 8
  store ptr %615, ptr %31, align 8
  %616 = load i32, ptr %30, align 4
  store i32 %616, ptr %30, align 4
  %.reload13 = load i1, ptr %.reg2mem12, align 1
  store i1 %.reload13, ptr %.reg2mem71, align 1
  br label %617

617:                                              ; preds = %607, %600
  %.reload72 = load i1, ptr %.reg2mem71, align 1
  store i1 %.reload72, ptr %.reg2mem10, align 1
  br label %618

618:                                              ; preds = %617
  %619 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %620 = load ptr, ptr %619, align 8
  %621 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %620, 0
  %622 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %623 = load ptr, ptr %622, align 8
  %624 = insertvalue { ptr, ptr, ptr, i32 } %621, ptr %623, 1
  %625 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %626 = load ptr, ptr %625, align 8
  %627 = insertvalue { ptr, ptr, ptr, i32 } %624, ptr %626, 2
  %628 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %629 = load i32, ptr %628, align 4
  %630 = insertvalue { ptr, ptr, ptr, i32 } %627, i32 %629, 3
  %631 = call ptr @llvm.invariant.start.p0(i64 0, ptr %36)
  %632 = call ptr @llvm.invariant.start.p0(i64 688, ptr %620)
  %633 = getelementptr ptr, ptr %620, i32 %629
  %634 = getelementptr ptr, ptr %633, i32 24
  %635 = load ptr, ptr %634, align 8
  %636 = call ptr @behavior_wrapper(ptr %635, { ptr, ptr, ptr, i32 } %630, ptr %37)
  %637 = call i32 %636({ ptr, ptr, ptr, i32 } %630, { ptr, ptr, ptr, i32 } %630, ptr %36)
  %.reload39 = load i32, ptr %.reg2mem37, align 4
  %638 = icmp eq i32 %637, %.reload39
  %639 = zext i1 %638 to i32
  store i32 %639, ptr %.reg2mem8, align 4
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i1, ptr %.reg2mem10, align 1
  store i32 %.reload9, ptr %.reg2mem67, align 4
  store i1 %.reload11, ptr %.reg2mem69, align 1
  br label %662

640:                                              ; preds = %550
  %641 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %642 = load ptr, ptr %641, align 8
  %643 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %642, 0
  %644 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %645 = load ptr, ptr %644, align 8
  %646 = insertvalue { ptr, ptr, ptr, i32 } %643, ptr %645, 1
  %647 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %648 = load ptr, ptr %647, align 8
  %649 = insertvalue { ptr, ptr, ptr, i32 } %646, ptr %648, 2
  %650 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %651 = load i32, ptr %650, align 4
  %652 = insertvalue { ptr, ptr, ptr, i32 } %649, i32 %651, 3
  %653 = call ptr @llvm.invariant.start.p0(i64 0, ptr %39)
  %654 = call ptr @llvm.invariant.start.p0(i64 688, ptr %642)
  %655 = getelementptr ptr, ptr %642, i32 %651
  %656 = getelementptr ptr, ptr %655, i32 24
  %657 = load ptr, ptr %656, align 8
  %658 = call ptr @behavior_wrapper(ptr %657, { ptr, ptr, ptr, i32 } %652, ptr %40)
  %659 = call i32 %658({ ptr, ptr, ptr, i32 } %652, { ptr, ptr, ptr, i32 } %652, ptr %39)
  %660 = icmp eq i32 %659, 0
  %661 = zext i1 %660 to i32
  store i32 %661, ptr %.reg2mem6, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload7, ptr %.reg2mem67, align 4
  store i1 true, ptr %.reg2mem69, align 1
  br label %662

662:                                              ; preds = %640, %618
  %.reload70 = load i1, ptr %.reg2mem69, align 1
  %.reload68 = load i32, ptr %.reg2mem67, align 4
  store i1 %.reload70, ptr %.reg2mem4, align 1
  store i32 %.reload68, ptr %.reg2mem2, align 4
  br label %663

663:                                              ; preds = %662
  %.reload3 = load i32, ptr %.reg2mem2, align 4
  %664 = zext i32 %.reload3 to i64
  %665 = trunc i64 %664 to i32
  switch i32 %665, label %669 [
    i32 0, label %666
  ]

666:                                              ; preds = %663
  %.reload20 = load i1, ptr %.reg2mem19, align 1
  %667 = select i1 %.reload20, ptr %38, ptr %41
  store i1 false, ptr %667, align 1
  %668 = load i1, ptr %667, align 1
  store i1 %668, ptr %.reg2mem, align 1
  %.reload = load i1, ptr %.reg2mem, align 1
  store i1 %.reload, ptr %.reg2mem65, align 1
  br label %670

669:                                              ; preds = %663
  %.reload5 = load i1, ptr %.reg2mem4, align 1
  store i1 %.reload5, ptr %.reg2mem65, align 1
  br label %670

670:                                              ; preds = %669, %666
  %.reload66 = load i1, ptr %.reg2mem65, align 1
  %671 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 14))
  store ptr %671, ptr %42, align 8
  %672 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  %673 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %674 = load ptr, ptr %672, align 8
  store ptr %674, ptr %673, align 8
  %675 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %676 = load ptr, ptr %43, align 8
  %677 = load [13 x i8], ptr @jebza_Insert_Random, align 1
  store [13 x i8] %677, ptr %676, align 1
  store ptr @String, ptr %44, align 8
  %678 = load ptr, ptr %44, align 8
  %679 = getelementptr ptr, ptr %678, i32 6
  %680 = load ptr, ptr %679, align 8
  %681 = call { i64, i64 } @size_wrapper(ptr %680, ptr %44)
  %682 = extractvalue { i64, i64 } %681, 0
  %683 = call ptr @bump_malloc(i64 %682)
  %684 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %685 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  store ptr @String, ptr %45, align 8
  store ptr %683, ptr %684, align 8
  store i32 9, ptr %685, align 4
  %686 = call ptr @llvm.invariant.start.p0(i64 16, ptr %45)
  %687 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %688 = load ptr, ptr %687, align 8
  %689 = insertvalue { ptr } undef, ptr %688, 0
  %690 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %691 = load ptr, ptr %690, align 8
  %692 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %691, 0
  %693 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %694 = load ptr, ptr %693, align 8
  %695 = insertvalue { ptr, ptr, ptr, i32 } %692, ptr %694, 1
  %696 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %697 = load ptr, ptr %696, align 8
  %698 = insertvalue { ptr, ptr, ptr, i32 } %695, ptr %697, 2
  %699 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %700 = load i32, ptr %699, align 4
  %701 = insertvalue { ptr, ptr, ptr, i32 } %698, i32 %700, 3
  %702 = getelementptr [3 x ptr], ptr %46, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %702, align 8
  %703 = getelementptr [3 x ptr], ptr %46, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %703, align 8
  %704 = getelementptr [3 x ptr], ptr %46, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %704, align 8
  %705 = call ptr @llvm.invariant.start.p0(i64 9, ptr %46)
  %706 = call ptr @llvm.invariant.start.p0(i64 280, ptr %691)
  %707 = getelementptr ptr, ptr %691, i32 %700
  %708 = getelementptr ptr, ptr %707, i32 4
  %709 = load ptr, ptr %708, align 8
  %710 = getelementptr { ptr, ptr, ptr }, ptr %47, i32 0, i32 0
  store ptr @buffer_typ, ptr %710, align 8
  %711 = getelementptr { ptr, ptr, ptr }, ptr %47, i32 0, i32 1
  store ptr @i32_typ, ptr %711, align 8
  %712 = getelementptr { ptr, ptr, ptr }, ptr %47, i32 0, i32 2
  store ptr @i32_typ, ptr %712, align 8
  %713 = call ptr @behavior_wrapper(ptr %709, { ptr, ptr, ptr, i32 } %701, ptr %47)
  call void %713({ ptr, ptr, ptr, i32 } %701, { ptr, ptr, ptr, i32 } %701, ptr %46, { ptr } %689, i32 13, i32 14)
  %.reload23 = load i64, ptr %.reg2mem22, align 4
  %.reload36 = load i64, ptr %.reg2mem35, align 4
  %714 = sub i64 %.reload23, %.reload36
  %715 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %716 = load ptr, ptr %715, align 8
  %717 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %716, 0
  %718 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %719 = load ptr, ptr %718, align 8
  %720 = insertvalue { ptr, ptr, ptr, i32 } %717, ptr %719, 1
  %721 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %722 = load ptr, ptr %721, align 8
  %723 = insertvalue { ptr, ptr, ptr, i32 } %720, ptr %722, 2
  %724 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %725 = load i32, ptr %724, align 4
  %726 = insertvalue { ptr, ptr, ptr, i32 } %723, i32 %725, 3
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %726, i32 %0, i64 %714)
  %727 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 19))
  store ptr %727, ptr %48, align 8
  %728 = getelementptr { ptr }, ptr %48, i32 0, i32 0
  %729 = getelementptr { ptr }, ptr %49, i32 0, i32 0
  %730 = load ptr, ptr %728, align 8
  store ptr %730, ptr %729, align 8
  %731 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %732 = load ptr, ptr %49, align 8
  %733 = load [18 x i8], ptr @nborv_____Verification_, align 1
  store [18 x i8] %733, ptr %732, align 1
  store ptr @String, ptr %50, align 8
  %734 = load ptr, ptr %50, align 8
  %735 = getelementptr ptr, ptr %734, i32 6
  %736 = load ptr, ptr %735, align 8
  %737 = call { i64, i64 } @size_wrapper(ptr %736, ptr %50)
  %738 = extractvalue { i64, i64 } %737, 0
  %739 = call ptr @bump_malloc(i64 %738)
  %740 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %741 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  store ptr @String, ptr %51, align 8
  store ptr %739, ptr %740, align 8
  store i32 9, ptr %741, align 4
  %742 = call ptr @llvm.invariant.start.p0(i64 16, ptr %51)
  %743 = getelementptr { ptr }, ptr %49, i32 0, i32 0
  %744 = load ptr, ptr %743, align 8
  %745 = insertvalue { ptr } undef, ptr %744, 0
  %746 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %747 = load ptr, ptr %746, align 8
  %748 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %747, 0
  %749 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %750 = load ptr, ptr %749, align 8
  %751 = insertvalue { ptr, ptr, ptr, i32 } %748, ptr %750, 1
  %752 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %753 = load ptr, ptr %752, align 8
  %754 = insertvalue { ptr, ptr, ptr, i32 } %751, ptr %753, 2
  %755 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %756 = load i32, ptr %755, align 4
  %757 = insertvalue { ptr, ptr, ptr, i32 } %754, i32 %756, 3
  %758 = getelementptr [3 x ptr], ptr %52, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %758, align 8
  %759 = getelementptr [3 x ptr], ptr %52, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %759, align 8
  %760 = getelementptr [3 x ptr], ptr %52, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %760, align 8
  %761 = call ptr @llvm.invariant.start.p0(i64 9, ptr %52)
  %762 = call ptr @llvm.invariant.start.p0(i64 280, ptr %747)
  %763 = getelementptr ptr, ptr %747, i32 %756
  %764 = getelementptr ptr, ptr %763, i32 4
  %765 = load ptr, ptr %764, align 8
  %766 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 0
  store ptr @buffer_typ, ptr %766, align 8
  %767 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 1
  store ptr @i32_typ, ptr %767, align 8
  %768 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 2
  store ptr @i32_typ, ptr %768, align 8
  %769 = call ptr @behavior_wrapper(ptr %765, { ptr, ptr, ptr, i32 } %757, ptr %53)
  call void %769({ ptr, ptr, ptr, i32 } %757, { ptr, ptr, ptr, i32 } %757, ptr %52, { ptr } %745, i32 18, i32 19)
  %770 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 0
  %771 = load ptr, ptr %770, align 8
  %772 = insertvalue { ptr, i160 } undef, ptr %771, 0
  %773 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 1
  %774 = load i160, ptr %773, align 4
  %775 = insertvalue { ptr, i160 } %772, i160 %774, 1
  %776 = getelementptr [1 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_String, ptr %776, align 8
  %777 = call ptr @llvm.invariant.start.p0(i64 1, ptr %54)
  %778 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %779 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %780 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  store ptr %771, ptr %780, align 8
  %781 = call ptr @class_behavior_wrapper(ptr %779, ptr %55)
  call void %781(ptr %54, { ptr, i160 } %775)
  br i1 %.reload66, label %782, label %838

782:                                              ; preds = %670
  %783 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %783, ptr %56, align 8
  %784 = getelementptr { ptr }, ptr %56, i32 0, i32 0
  %785 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  %786 = load ptr, ptr %784, align 8
  store ptr %786, ptr %785, align 8
  %787 = call ptr @llvm.invariant.start.p0(i64 16, ptr %57)
  %788 = load ptr, ptr %57, align 8
  %789 = load [4 x i8], ptr @vzyan_PASS, align 1
  store [4 x i8] %789, ptr %788, align 1
  store ptr @String, ptr %58, align 8
  %790 = load ptr, ptr %58, align 8
  %791 = getelementptr ptr, ptr %790, i32 6
  %792 = load ptr, ptr %791, align 8
  %793 = call { i64, i64 } @size_wrapper(ptr %792, ptr %58)
  %794 = extractvalue { i64, i64 } %793, 0
  %795 = call ptr @bump_malloc(i64 %794)
  %796 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %797 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  store ptr @String, ptr %59, align 8
  store ptr %795, ptr %796, align 8
  store i32 9, ptr %797, align 4
  %798 = call ptr @llvm.invariant.start.p0(i64 16, ptr %59)
  %799 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  %800 = load ptr, ptr %799, align 8
  %801 = insertvalue { ptr } undef, ptr %800, 0
  %802 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %803 = load ptr, ptr %802, align 8
  %804 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %803, 0
  %805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %806 = load ptr, ptr %805, align 8
  %807 = insertvalue { ptr, ptr, ptr, i32 } %804, ptr %806, 1
  %808 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %809 = load ptr, ptr %808, align 8
  %810 = insertvalue { ptr, ptr, ptr, i32 } %807, ptr %809, 2
  %811 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %812 = load i32, ptr %811, align 4
  %813 = insertvalue { ptr, ptr, ptr, i32 } %810, i32 %812, 3
  %814 = getelementptr [3 x ptr], ptr %60, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %814, align 8
  %815 = getelementptr [3 x ptr], ptr %60, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %815, align 8
  %816 = getelementptr [3 x ptr], ptr %60, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %816, align 8
  %817 = call ptr @llvm.invariant.start.p0(i64 9, ptr %60)
  %818 = call ptr @llvm.invariant.start.p0(i64 280, ptr %803)
  %819 = getelementptr ptr, ptr %803, i32 %812
  %820 = getelementptr ptr, ptr %819, i32 4
  %821 = load ptr, ptr %820, align 8
  %822 = getelementptr { ptr, ptr, ptr }, ptr %61, i32 0, i32 0
  store ptr @buffer_typ, ptr %822, align 8
  %823 = getelementptr { ptr, ptr, ptr }, ptr %61, i32 0, i32 1
  store ptr @i32_typ, ptr %823, align 8
  %824 = getelementptr { ptr, ptr, ptr }, ptr %61, i32 0, i32 2
  store ptr @i32_typ, ptr %824, align 8
  %825 = call ptr @behavior_wrapper(ptr %821, { ptr, ptr, ptr, i32 } %813, ptr %61)
  call void %825({ ptr, ptr, ptr, i32 } %813, { ptr, ptr, ptr, i32 } %813, ptr %60, { ptr } %801, i32 4, i32 5)
  %826 = getelementptr { ptr, i160 }, ptr %59, i32 0, i32 0
  %827 = load ptr, ptr %826, align 8
  %828 = insertvalue { ptr, i160 } undef, ptr %827, 0
  %829 = getelementptr { ptr, i160 }, ptr %59, i32 0, i32 1
  %830 = load i160, ptr %829, align 4
  %831 = insertvalue { ptr, i160 } %828, i160 %830, 1
  %832 = getelementptr [1 x ptr], ptr %62, i32 0, i32 0
  store ptr @_parameterization_String, ptr %832, align 8
  %833 = call ptr @llvm.invariant.start.p0(i64 1, ptr %62)
  %834 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %835 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %836 = getelementptr { ptr }, ptr %63, i32 0, i32 0
  store ptr %827, ptr %836, align 8
  %837 = call ptr @class_behavior_wrapper(ptr %835, ptr %63)
  call void %837(ptr %62, { ptr, i160 } %831)
  br label %894

838:                                              ; preds = %670
  %839 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %839, ptr %64, align 8
  %840 = getelementptr { ptr }, ptr %64, i32 0, i32 0
  %841 = getelementptr { ptr }, ptr %65, i32 0, i32 0
  %842 = load ptr, ptr %840, align 8
  store ptr %842, ptr %841, align 8
  %843 = call ptr @llvm.invariant.start.p0(i64 16, ptr %65)
  %844 = load ptr, ptr %65, align 8
  %845 = load [4 x i8], ptr @hqeqa_FAIL, align 1
  store [4 x i8] %845, ptr %844, align 1
  store ptr @String, ptr %66, align 8
  %846 = load ptr, ptr %66, align 8
  %847 = getelementptr ptr, ptr %846, i32 6
  %848 = load ptr, ptr %847, align 8
  %849 = call { i64, i64 } @size_wrapper(ptr %848, ptr %66)
  %850 = extractvalue { i64, i64 } %849, 0
  %851 = call ptr @bump_malloc(i64 %850)
  %852 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %853 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  store ptr @String, ptr %67, align 8
  store ptr %851, ptr %852, align 8
  store i32 9, ptr %853, align 4
  %854 = call ptr @llvm.invariant.start.p0(i64 16, ptr %67)
  %855 = getelementptr { ptr }, ptr %65, i32 0, i32 0
  %856 = load ptr, ptr %855, align 8
  %857 = insertvalue { ptr } undef, ptr %856, 0
  %858 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %859 = load ptr, ptr %858, align 8
  %860 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %859, 0
  %861 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %862 = load ptr, ptr %861, align 8
  %863 = insertvalue { ptr, ptr, ptr, i32 } %860, ptr %862, 1
  %864 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %865 = load ptr, ptr %864, align 8
  %866 = insertvalue { ptr, ptr, ptr, i32 } %863, ptr %865, 2
  %867 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %868 = load i32, ptr %867, align 4
  %869 = insertvalue { ptr, ptr, ptr, i32 } %866, i32 %868, 3
  %870 = getelementptr [3 x ptr], ptr %68, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %870, align 8
  %871 = getelementptr [3 x ptr], ptr %68, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %871, align 8
  %872 = getelementptr [3 x ptr], ptr %68, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %872, align 8
  %873 = call ptr @llvm.invariant.start.p0(i64 9, ptr %68)
  %874 = call ptr @llvm.invariant.start.p0(i64 280, ptr %859)
  %875 = getelementptr ptr, ptr %859, i32 %868
  %876 = getelementptr ptr, ptr %875, i32 4
  %877 = load ptr, ptr %876, align 8
  %878 = getelementptr { ptr, ptr, ptr }, ptr %69, i32 0, i32 0
  store ptr @buffer_typ, ptr %878, align 8
  %879 = getelementptr { ptr, ptr, ptr }, ptr %69, i32 0, i32 1
  store ptr @i32_typ, ptr %879, align 8
  %880 = getelementptr { ptr, ptr, ptr }, ptr %69, i32 0, i32 2
  store ptr @i32_typ, ptr %880, align 8
  %881 = call ptr @behavior_wrapper(ptr %877, { ptr, ptr, ptr, i32 } %869, ptr %69)
  call void %881({ ptr, ptr, ptr, i32 } %869, { ptr, ptr, ptr, i32 } %869, ptr %68, { ptr } %857, i32 4, i32 5)
  %882 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 0
  %883 = load ptr, ptr %882, align 8
  %884 = insertvalue { ptr, i160 } undef, ptr %883, 0
  %885 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 1
  %886 = load i160, ptr %885, align 4
  %887 = insertvalue { ptr, i160 } %884, i160 %886, 1
  %888 = getelementptr [1 x ptr], ptr %70, i32 0, i32 0
  store ptr @_parameterization_String, ptr %888, align 8
  %889 = call ptr @llvm.invariant.start.p0(i64 1, ptr %70)
  %890 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %891 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %892 = getelementptr { ptr }, ptr %71, i32 0, i32 0
  store ptr %883, ptr %892, align 8
  %893 = call ptr @class_behavior_wrapper(ptr %891, ptr %71)
  call void %893(ptr %70, { ptr, i160 } %887)
  br label %894

894:                                              ; preds = %838, %782
  %895 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 28))
  store ptr %895, ptr %72, align 8
  %896 = getelementptr { ptr }, ptr %72, i32 0, i32 0
  %897 = getelementptr { ptr }, ptr %73, i32 0, i32 0
  %898 = load ptr, ptr %896, align 8
  store ptr %898, ptr %897, align 8
  %899 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %900 = load ptr, ptr %73, align 8
  %901 = load [27 x i8], ptr @omboo_____Expected_unique_size_, align 1
  store [27 x i8] %901, ptr %900, align 1
  store ptr @String, ptr %74, align 8
  %902 = load ptr, ptr %74, align 8
  %903 = getelementptr ptr, ptr %902, i32 6
  %904 = load ptr, ptr %903, align 8
  %905 = call { i64, i64 } @size_wrapper(ptr %904, ptr %74)
  %906 = extractvalue { i64, i64 } %905, 0
  %907 = call ptr @bump_malloc(i64 %906)
  %908 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %909 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  store ptr @String, ptr %75, align 8
  store ptr %907, ptr %908, align 8
  store i32 9, ptr %909, align 4
  %910 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %911 = getelementptr { ptr }, ptr %73, i32 0, i32 0
  %912 = load ptr, ptr %911, align 8
  %913 = insertvalue { ptr } undef, ptr %912, 0
  %914 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %915 = load ptr, ptr %914, align 8
  %916 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %915, 0
  %917 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %918 = load ptr, ptr %917, align 8
  %919 = insertvalue { ptr, ptr, ptr, i32 } %916, ptr %918, 1
  %920 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %921 = load ptr, ptr %920, align 8
  %922 = insertvalue { ptr, ptr, ptr, i32 } %919, ptr %921, 2
  %923 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %924 = load i32, ptr %923, align 4
  %925 = insertvalue { ptr, ptr, ptr, i32 } %922, i32 %924, 3
  %926 = getelementptr [3 x ptr], ptr %76, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %926, align 8
  %927 = getelementptr [3 x ptr], ptr %76, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %927, align 8
  %928 = getelementptr [3 x ptr], ptr %76, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %928, align 8
  %929 = call ptr @llvm.invariant.start.p0(i64 9, ptr %76)
  %930 = call ptr @llvm.invariant.start.p0(i64 280, ptr %915)
  %931 = getelementptr ptr, ptr %915, i32 %924
  %932 = getelementptr ptr, ptr %931, i32 4
  %933 = load ptr, ptr %932, align 8
  %934 = getelementptr { ptr, ptr, ptr }, ptr %77, i32 0, i32 0
  store ptr @buffer_typ, ptr %934, align 8
  %935 = getelementptr { ptr, ptr, ptr }, ptr %77, i32 0, i32 1
  store ptr @i32_typ, ptr %935, align 8
  %936 = getelementptr { ptr, ptr, ptr }, ptr %77, i32 0, i32 2
  store ptr @i32_typ, ptr %936, align 8
  %937 = call ptr @behavior_wrapper(ptr %933, { ptr, ptr, ptr, i32 } %925, ptr %77)
  call void %937({ ptr, ptr, ptr, i32 } %925, { ptr, ptr, ptr, i32 } %925, ptr %76, { ptr } %913, i32 27, i32 28)
  %938 = getelementptr { ptr, i160 }, ptr %75, i32 0, i32 0
  %939 = load ptr, ptr %938, align 8
  %940 = insertvalue { ptr, i160 } undef, ptr %939, 0
  %941 = getelementptr { ptr, i160 }, ptr %75, i32 0, i32 1
  %942 = load i160, ptr %941, align 4
  %943 = insertvalue { ptr, i160 } %940, i160 %942, 1
  %944 = getelementptr [1 x ptr], ptr %78, i32 0, i32 0
  store ptr @_parameterization_String, ptr %944, align 8
  %945 = call ptr @llvm.invariant.start.p0(i64 1, ptr %78)
  %946 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %947 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %948 = getelementptr { ptr }, ptr %79, i32 0, i32 0
  store ptr %939, ptr %948, align 8
  %949 = call ptr @class_behavior_wrapper(ptr %947, ptr %79)
  call void %949(ptr %78, { ptr, i160 } %943)
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  store i32 %.reload38, ptr %80, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %81, align 4
  %950 = load ptr, ptr %81, align 8
  %951 = insertvalue { ptr, i160 } undef, ptr %950, 0
  %952 = load i160, ptr %80, align 4
  %953 = insertvalue { ptr, i160 } %951, i160 %952, 1
  %954 = getelementptr [1 x ptr], ptr %82, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %954, align 8
  %955 = call ptr @llvm.invariant.start.p0(i64 1, ptr %82)
  %956 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %957 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %958 = getelementptr { ptr }, ptr %83, i32 0, i32 0
  store ptr %950, ptr %958, align 8
  %959 = call ptr @class_behavior_wrapper(ptr %957, ptr %83)
  call void %959(ptr %82, { ptr, i160 } %953)
  %960 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 2))
  store ptr %960, ptr %84, align 8
  %961 = getelementptr { ptr }, ptr %84, i32 0, i32 0
  %962 = getelementptr { ptr }, ptr %85, i32 0, i32 0
  %963 = load ptr, ptr %961, align 8
  store ptr %963, ptr %962, align 8
  %964 = call ptr @llvm.invariant.start.p0(i64 16, ptr %85)
  %965 = load ptr, ptr %85, align 8
  %966 = load [1 x i8], ptr @lvwyt_, align 1
  store [1 x i8] %966, ptr %965, align 1
  store ptr @String, ptr %86, align 8
  %967 = load ptr, ptr %86, align 8
  %968 = getelementptr ptr, ptr %967, i32 6
  %969 = load ptr, ptr %968, align 8
  %970 = call { i64, i64 } @size_wrapper(ptr %969, ptr %86)
  %971 = extractvalue { i64, i64 } %970, 0
  %972 = call ptr @bump_malloc(i64 %971)
  %973 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %974 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  store ptr @String, ptr %87, align 8
  store ptr %972, ptr %973, align 8
  store i32 9, ptr %974, align 4
  %975 = call ptr @llvm.invariant.start.p0(i64 16, ptr %87)
  %976 = getelementptr { ptr }, ptr %85, i32 0, i32 0
  %977 = load ptr, ptr %976, align 8
  %978 = insertvalue { ptr } undef, ptr %977, 0
  %979 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %980 = load ptr, ptr %979, align 8
  %981 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %980, 0
  %982 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %983 = load ptr, ptr %982, align 8
  %984 = insertvalue { ptr, ptr, ptr, i32 } %981, ptr %983, 1
  %985 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %986 = load ptr, ptr %985, align 8
  %987 = insertvalue { ptr, ptr, ptr, i32 } %984, ptr %986, 2
  %988 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %989 = load i32, ptr %988, align 4
  %990 = insertvalue { ptr, ptr, ptr, i32 } %987, i32 %989, 3
  %991 = getelementptr [3 x ptr], ptr %88, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %991, align 8
  %992 = getelementptr [3 x ptr], ptr %88, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %992, align 8
  %993 = getelementptr [3 x ptr], ptr %88, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %993, align 8
  %994 = call ptr @llvm.invariant.start.p0(i64 9, ptr %88)
  %995 = call ptr @llvm.invariant.start.p0(i64 280, ptr %980)
  %996 = getelementptr ptr, ptr %980, i32 %989
  %997 = getelementptr ptr, ptr %996, i32 4
  %998 = load ptr, ptr %997, align 8
  %999 = getelementptr { ptr, ptr, ptr }, ptr %89, i32 0, i32 0
  store ptr @buffer_typ, ptr %999, align 8
  %1000 = getelementptr { ptr, ptr, ptr }, ptr %89, i32 0, i32 1
  store ptr @i32_typ, ptr %1000, align 8
  %1001 = getelementptr { ptr, ptr, ptr }, ptr %89, i32 0, i32 2
  store ptr @i32_typ, ptr %1001, align 8
  %1002 = call ptr @behavior_wrapper(ptr %998, { ptr, ptr, ptr, i32 } %990, ptr %89)
  call void %1002({ ptr, ptr, ptr, i32 } %990, { ptr, ptr, ptr, i32 } %990, ptr %88, { ptr } %978, i32 1, i32 2)
  %1003 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 0
  %1004 = load ptr, ptr %1003, align 8
  %1005 = insertvalue { ptr, i160 } undef, ptr %1004, 0
  %1006 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 1
  %1007 = load i160, ptr %1006, align 4
  %1008 = insertvalue { ptr, i160 } %1005, i160 %1007, 1
  %1009 = getelementptr [1 x ptr], ptr %90, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1009, align 8
  %1010 = call ptr @llvm.invariant.start.p0(i64 1, ptr %90)
  %1011 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1012 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1013 = getelementptr { ptr }, ptr %91, i32 0, i32 0
  store ptr %1004, ptr %1013, align 8
  %1014 = call ptr @class_behavior_wrapper(ptr %1012, ptr %91)
  call void %1014(ptr %90, { ptr, i160 } %1008)
  ret void
}

define void @benchmark_get_sequential_hit(i32 %0) {
  %2 = alloca i160, align 8
  %3 = alloca ptr, align 8
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca [2 x ptr], align 8
  %7 = alloca { ptr, ptr }, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca { ptr, i160 }, align 8
  %13 = alloca i32, align 4
  %14 = alloca ptr, align 8
  %15 = alloca i32, align 4
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  %18 = alloca { ptr }, align 8
  %19 = alloca [1 x ptr], align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = alloca [3 x ptr], align 8
  %22 = alloca { ptr, ptr, ptr }, align 8
  %23 = alloca [1 x ptr], align 8
  %24 = alloca { ptr }, align 8
  %25 = alloca i160, align 8
  %26 = alloca ptr, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca { ptr }, align 8
  %29 = alloca ptr, align 8
  %30 = alloca { ptr }, align 8
  %31 = alloca [1 x ptr], align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = alloca [3 x ptr], align 8
  %34 = alloca { ptr, ptr, ptr }, align 8
  %35 = alloca ptr, align 8
  %36 = alloca { ptr }, align 8
  %37 = alloca [1 x ptr], align 8
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = alloca [3 x ptr], align 8
  %40 = alloca { ptr, ptr, ptr }, align 8
  %41 = alloca [1 x ptr], align 8
  %42 = alloca { ptr }, align 8
  %43 = alloca ptr, align 8
  %44 = alloca { ptr }, align 8
  %45 = alloca [1 x ptr], align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = alloca [3 x ptr], align 8
  %48 = alloca { ptr, ptr, ptr }, align 8
  %49 = alloca [1 x ptr], align 8
  %50 = alloca { ptr }, align 8
  %51 = alloca ptr, align 8
  %52 = alloca { ptr }, align 8
  %53 = alloca [1 x ptr], align 8
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = alloca [3 x ptr], align 8
  %56 = alloca { ptr, ptr, ptr }, align 8
  %57 = alloca [1 x ptr], align 8
  %58 = alloca { ptr }, align 8
  %59 = alloca [4 x ptr], align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i1, align 1
  %.reg2mem3 = alloca i64, align 8
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem9 = alloca i64, align 8
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i64, align 8
  %.reg2mem15 = alloca i64, align 8
  %.reg2mem17 = alloca i1, align 1
  %.reg2mem19 = alloca i1, align 1
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem27 = alloca i1, align 1
  %.reg2mem31 = alloca i64, align 8
  %.reg2mem36 = alloca i64, align 8
  %.reg2mem38 = alloca i32, align 4
  %.reg2mem40 = alloca i64, align 8
  %.reg2mem42 = alloca i32, align 4
  %.reg2mem44 = alloca i64, align 8
  %.reg2mem46 = alloca i32, align 4
  %.reg2mem48 = alloca i64, align 8
  %.reg2mem50 = alloca i1, align 1
  %.reg2mem53 = alloca i32, align 4
  %.reg2mem58 = alloca i64, align 8
  %.reg2mem62 = alloca i32, align 4
  %.reg2mem64 = alloca i1, align 1
  %.reg2mem66 = alloca i64, align 8
  %.reg2mem68 = alloca i32, align 4
  %.reg2mem70 = alloca i1, align 1
  %.reg2mem72 = alloca i64, align 8
  %.reg2mem74 = alloca i64, align 8
  %.reg2mem76 = alloca i32, align 4
  %.reg2mem78 = alloca i1, align 1
  %.reg2mem80 = alloca i64, align 8
  %.reg2mem82 = alloca i32, align 4
  %.reg2mem84 = alloca i64, align 8
  %.reg2mem86 = alloca i32, align 4
  %.reg2mem88 = alloca i64, align 8
  %.reg2mem90 = alloca i32, align 4
  %.reg2mem92 = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store ptr @HashMap, ptr %59, align 8
  %60 = getelementptr ptr, ptr %59, i32 1
  store ptr @_parameterization_Ptri32, ptr %60, align 8
  %61 = getelementptr ptr, ptr %59, i32 2
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = getelementptr ptr, ptr %59, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %62, align 8
  %63 = load ptr, ptr %59, align 8
  %64 = getelementptr ptr, ptr %63, i32 6
  %65 = load ptr, ptr %64, align 8
  %66 = call { i64, i64 } @size_wrapper(ptr %65, ptr %59)
  %67 = extractvalue { i64, i64 } %66, 0
  %68 = call ptr @bump_malloc(i64 %67)
  store ptr @_parameterization_Ptri32, ptr %68, align 8
  %69 = getelementptr ptr, ptr %68, i32 1
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = getelementptr ptr, ptr %68, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 24, ptr %68)
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  store ptr @HashMap, ptr %72, align 8
  store ptr %68, ptr %73, align 8
  store i32 9, ptr %74, align 4
  %75 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %76 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %76)
  call void @llvm.init.trampoline(ptr %76, ptr @sllfrczpsj, ptr @i32_hasher)
  %77 = alloca ptr, align 8
  %78 = call ptr @adjust_trampoline(ptr %76)
  store ptr %78, ptr %77, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 24, ptr %76)
  %80 = call ptr @llvm.invariant.start.p0(i64 8, ptr %77)
  %81 = getelementptr { ptr }, ptr %77, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr } undef, ptr %82, 0
  %84 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %84)
  call void @llvm.init.trampoline(ptr %84, ptr @atedmwyvrr, ptr @i32_eq)
  %85 = alloca ptr, align 8
  %86 = call ptr @adjust_trampoline(ptr %84)
  store ptr %86, ptr %85, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %84)
  %88 = call ptr @llvm.invariant.start.p0(i64 8, ptr %85)
  %89 = getelementptr { ptr }, ptr %85, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr } undef, ptr %90, 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 1
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 2
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %102 = load i32, ptr %101, align 4
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %102, 3
  %104 = alloca [2 x ptr], align 8
  %105 = getelementptr [2 x ptr], ptr %104, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %105, align 8
  %106 = getelementptr [2 x ptr], ptr %104, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %106, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 4, ptr %104)
  %108 = call ptr @llvm.invariant.start.p0(i64 688, ptr %93)
  %109 = getelementptr ptr, ptr %93, i32 %102
  %110 = getelementptr ptr, ptr %109, i32 9
  %111 = load ptr, ptr %110, align 8
  %112 = alloca { ptr, ptr }, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 0
  store ptr @function_typ, ptr %113, align 8
  %114 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 1
  store ptr @function_typ, ptr %114, align 8
  %115 = call ptr @behavior_wrapper(ptr %111, { ptr, ptr, ptr, i32 } %103, ptr %112)
  call void %115({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr %104, { ptr } %83, { ptr } %91)
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %122 = load ptr, ptr %120, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %125 = load ptr, ptr %123, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %128 = load i32, ptr %126, align 4
  store i32 %128, ptr %127, align 4
  call void @set_offset(ptr %116, ptr @HashMap)
  %129 = alloca { ptr, ptr, ptr, i32 }, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %132 = load ptr, ptr %130, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %135 = load ptr, ptr %133, align 8
  store ptr %135, ptr %134, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %138 = load ptr, ptr %136, align 8
  store ptr %138, ptr %137, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %141 = load i32, ptr %139, align 4
  store i32 %141, ptr %140, align 4
  %142 = call ptr @llvm.invariant.start.p0(i64 16, ptr %129)
  store i32 0, ptr %.reg2mem90, align 4
  store i64 0, ptr %.reg2mem92, align 4
  br label %143

143:                                              ; preds = %183, %1
  %.reload93 = load i64, ptr %.reg2mem92, align 4
  %.reload91 = load i32, ptr %.reg2mem90, align 4
  store i64 %.reload93, ptr %.reg2mem58, align 4
  store i32 %.reload91, ptr %.reg2mem53, align 4
  %.reload57 = load i32, ptr %.reg2mem53, align 4
  %144 = icmp slt i32 %.reload57, %0
  store i1 %144, ptr %.reg2mem50, align 1
  %.reload52 = load i1, ptr %.reg2mem50, align 1
  br i1 %.reload52, label %145, label %180

145:                                              ; preds = %143
  %.reload56 = load i32, ptr %.reg2mem53, align 4
  %146 = add i32 %.reload56, 1
  %147 = sext i32 %146 to i64
  store ptr @i32_typ, ptr %3, align 8
  %.reload55 = load i32, ptr %.reg2mem53, align 4
  store i32 %.reload55, ptr %2, align 4
  %148 = load ptr, ptr %3, align 8
  %149 = insertvalue { ptr, i160 } undef, ptr %148, 0
  %150 = load i160, ptr %2, align 4
  %151 = insertvalue { ptr, i160 } %149, i160 %150, 1
  store ptr @i32_typ, ptr %5, align 8
  store i32 %146, ptr %4, align 4
  %152 = load ptr, ptr %5, align 8
  %153 = insertvalue { ptr, i160 } undef, ptr %152, 0
  %154 = load i160, ptr %4, align 4
  %155 = insertvalue { ptr, i160 } %153, i160 %154, 1
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %157, 0
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %160, 1
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %163, 2
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %166 = load i32, ptr %165, align 4
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, i32 %166, 3
  %168 = getelementptr [2 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %168, align 8
  %169 = getelementptr [2 x ptr], ptr %6, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %169, align 8
  %170 = call ptr @llvm.invariant.start.p0(i64 4, ptr %6)
  %171 = call ptr @llvm.invariant.start.p0(i64 688, ptr %157)
  %172 = getelementptr ptr, ptr %157, i32 %166
  %173 = getelementptr ptr, ptr %172, i32 18
  %174 = load ptr, ptr %173, align 8
  %175 = getelementptr { ptr, ptr }, ptr %7, i32 0, i32 0
  store ptr %148, ptr %175, align 8
  %176 = getelementptr { ptr, ptr }, ptr %7, i32 0, i32 1
  store ptr %152, ptr %176, align 8
  %177 = call ptr @behavior_wrapper(ptr %174, { ptr, ptr, ptr, i32 } %167, ptr %7)
  call void %177({ ptr, ptr, ptr, i32 } %167, { ptr, ptr, ptr, i32 } %167, ptr %6, { ptr, i160 } %151, { ptr, i160 } %155)
  %.reload61 = load i64, ptr %.reg2mem58, align 4
  %178 = add i64 %.reload61, %147
  store i64 %178, ptr %.reg2mem48, align 4
  %.reload54 = load i32, ptr %.reg2mem53, align 4
  %179 = add i32 %.reload54, 1
  store i32 %179, ptr %.reg2mem46, align 4
  %.reload47 = load i32, ptr %.reg2mem46, align 4
  %.reload49 = load i64, ptr %.reg2mem48, align 4
  store i32 %.reload47, ptr %.reg2mem86, align 4
  store i64 %.reload49, ptr %.reg2mem88, align 4
  br label %181

180:                                              ; preds = %143
  store i32 poison, ptr %.reg2mem86, align 4
  store i64 poison, ptr %.reg2mem88, align 4
  br label %181

181:                                              ; preds = %180, %145
  %.reload89 = load i64, ptr %.reg2mem88, align 4
  %.reload87 = load i32, ptr %.reg2mem86, align 4
  store i64 %.reload89, ptr %.reg2mem44, align 4
  store i32 %.reload87, ptr %.reg2mem42, align 4
  br label %182

182:                                              ; preds = %181
  %.reload43 = load i32, ptr %.reg2mem42, align 4
  %.reload45 = load i64, ptr %.reg2mem44, align 4
  %.reload51 = load i1, ptr %.reg2mem50, align 1
  %.reload60 = load i64, ptr %.reg2mem58, align 4
  store i32 %.reload43, ptr %.reg2mem82, align 4
  store i64 %.reload45, ptr %.reg2mem84, align 4
  br i1 %.reload51, label %183, label %184

183:                                              ; preds = %182
  %.reload85 = load i64, ptr %.reg2mem84, align 4
  %.reload83 = load i32, ptr %.reg2mem82, align 4
  store i64 %.reload85, ptr %.reg2mem40, align 4
  store i32 %.reload83, ptr %.reg2mem38, align 4
  %.reload39 = load i32, ptr %.reg2mem38, align 4
  %.reload41 = load i64, ptr %.reg2mem40, align 4
  store i32 %.reload39, ptr %.reg2mem90, align 4
  store i64 %.reload41, ptr %.reg2mem92, align 4
  br label %143

184:                                              ; preds = %182
  %185 = call i64 @clock()
  store i64 %185, ptr %.reg2mem36, align 4
  store i32 0, ptr %.reg2mem76, align 4
  store i1 true, ptr %.reg2mem78, align 1
  store i64 0, ptr %.reg2mem80, align 4
  br label %186

186:                                              ; preds = %305, %184
  %.reload81 = load i64, ptr %.reg2mem80, align 4
  %.reload79 = load i1, ptr %.reg2mem78, align 1
  %.reload77 = load i32, ptr %.reg2mem76, align 4
  store i64 %.reload81, ptr %.reg2mem31, align 4
  store i1 %.reload79, ptr %.reg2mem27, align 1
  store i32 %.reload77, ptr %.reg2mem22, align 4
  %.reload26 = load i32, ptr %.reg2mem22, align 4
  %187 = icmp slt i32 %.reload26, %0
  store i1 %187, ptr %.reg2mem19, align 1
  %.reload21 = load i1, ptr %.reg2mem19, align 1
  br i1 %.reload21, label %188, label %302

188:                                              ; preds = %186
  store ptr @i32_typ, ptr %9, align 8
  %.reload25 = load i32, ptr %.reg2mem22, align 4
  store i32 %.reload25, ptr %8, align 4
  %189 = load ptr, ptr %9, align 8
  %190 = insertvalue { ptr, i160 } undef, ptr %189, 0
  %191 = load i160, ptr %8, align 4
  %192 = insertvalue { ptr, i160 } %190, i160 %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %194, 0
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %197 = load ptr, ptr %196, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %197, 1
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %200 = load ptr, ptr %199, align 8
  %201 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %200, 2
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %203 = load i32, ptr %202, align 4
  %204 = insertvalue { ptr, ptr, ptr, i32 } %201, i32 %203, 3
  %205 = getelementptr [1 x ptr], ptr %10, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %205, align 8
  %206 = call ptr @llvm.invariant.start.p0(i64 1, ptr %10)
  %207 = call ptr @llvm.invariant.start.p0(i64 688, ptr %194)
  %208 = getelementptr ptr, ptr %194, i32 %203
  %209 = getelementptr ptr, ptr %208, i32 20
  %210 = load ptr, ptr %209, align 8
  %211 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  store ptr %189, ptr %211, align 8
  %212 = call ptr @behavior_wrapper(ptr %210, { ptr, ptr, ptr, i32 } %204, ptr %11)
  %213 = call { ptr, i160 } %212({ ptr, ptr, ptr, i32 } %204, { ptr, ptr, ptr, i32 } %204, ptr %10, { ptr, i160 } %192)
  store { ptr, i160 } %213, ptr %12, align 8
  %214 = getelementptr { ptr, i32 }, ptr %12, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  store ptr %215, ptr %14, align 8
  %216 = getelementptr { ptr, i32 }, ptr %12, i32 0, i32 1
  %217 = load i32, ptr %216, align 4
  store i32 %217, ptr %13, align 4
  %218 = load ptr, ptr %14, align 8
  %219 = ptrtoint ptr %218 to i64
  %220 = icmp eq i64 %219, ptrtoint (ptr @nil_typ to i64)
  %221 = icmp eq i64 %219, 0
  %222 = or i1 %220, %221
  %223 = icmp eq i1 %222, false
  %.reload30 = load i1, ptr %.reg2mem27, align 1
  %224 = select i1 %223, i1 %.reload30, i1 false
  store i1 %224, ptr %.reg2mem17, align 1
  br i1 %223, label %225, label %231

225:                                              ; preds = %188
  %226 = load i32, ptr %13, align 4
  %227 = sext i32 %226 to i64
  %.reload35 = load i64, ptr %.reg2mem31, align 4
  %228 = add i64 %.reload35, %227
  store i64 %228, ptr %.reg2mem15, align 4
  store i32 %226, ptr %15, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %16, align 4
  %229 = load ptr, ptr %16, align 8
  store ptr %229, ptr %14, align 8
  %230 = load i32, ptr %15, align 4
  store i32 %230, ptr %13, align 4
  %.reload16 = load i64, ptr %.reg2mem15, align 4
  store i64 %.reload16, ptr %.reg2mem74, align 4
  br label %299

231:                                              ; preds = %188
  %232 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 56))
  store ptr %232, ptr %17, align 8
  %233 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  %234 = getelementptr { ptr }, ptr %18, i32 0, i32 0
  %235 = load ptr, ptr %233, align 8
  store ptr %235, ptr %234, align 8
  %236 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %237 = load ptr, ptr %18, align 8
  %238 = load [55 x i8], ptr @kkaaq_Error_Nil_returned_during_sequential_hit_test_for_key_, align 1
  store [55 x i8] %238, ptr %237, align 1
  store ptr @String, ptr %19, align 8
  %239 = load ptr, ptr %19, align 8
  %240 = getelementptr ptr, ptr %239, i32 6
  %241 = load ptr, ptr %240, align 8
  %242 = call { i64, i64 } @size_wrapper(ptr %241, ptr %19)
  %243 = extractvalue { i64, i64 } %242, 0
  %244 = call ptr @bump_malloc(i64 %243)
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr @String, ptr %20, align 8
  store ptr %244, ptr %245, align 8
  store i32 9, ptr %246, align 4
  %247 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %248 = getelementptr { ptr }, ptr %18, i32 0, i32 0
  %249 = load ptr, ptr %248, align 8
  %250 = insertvalue { ptr } undef, ptr %249, 0
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %252 = load ptr, ptr %251, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %252, 0
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %255 = load ptr, ptr %254, align 8
  %256 = insertvalue { ptr, ptr, ptr, i32 } %253, ptr %255, 1
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %258 = load ptr, ptr %257, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %256, ptr %258, 2
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %261 = load i32, ptr %260, align 4
  %262 = insertvalue { ptr, ptr, ptr, i32 } %259, i32 %261, 3
  %263 = getelementptr [3 x ptr], ptr %21, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %263, align 8
  %264 = getelementptr [3 x ptr], ptr %21, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %264, align 8
  %265 = getelementptr [3 x ptr], ptr %21, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %265, align 8
  %266 = call ptr @llvm.invariant.start.p0(i64 9, ptr %21)
  %267 = call ptr @llvm.invariant.start.p0(i64 280, ptr %252)
  %268 = getelementptr ptr, ptr %252, i32 %261
  %269 = getelementptr ptr, ptr %268, i32 4
  %270 = load ptr, ptr %269, align 8
  %271 = getelementptr { ptr, ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr @buffer_typ, ptr %271, align 8
  %272 = getelementptr { ptr, ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr @i32_typ, ptr %272, align 8
  %273 = getelementptr { ptr, ptr, ptr }, ptr %22, i32 0, i32 2
  store ptr @i32_typ, ptr %273, align 8
  %274 = call ptr @behavior_wrapper(ptr %270, { ptr, ptr, ptr, i32 } %262, ptr %22)
  call void %274({ ptr, ptr, ptr, i32 } %262, { ptr, ptr, ptr, i32 } %262, ptr %21, { ptr } %250, i32 55, i32 56)
  %275 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %276 = load ptr, ptr %275, align 8
  %277 = insertvalue { ptr, i160 } undef, ptr %276, 0
  %278 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %279 = load i160, ptr %278, align 4
  %280 = insertvalue { ptr, i160 } %277, i160 %279, 1
  %281 = getelementptr [1 x ptr], ptr %23, i32 0, i32 0
  store ptr @_parameterization_String, ptr %281, align 8
  %282 = call ptr @llvm.invariant.start.p0(i64 1, ptr %23)
  %283 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %284 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %285 = getelementptr { ptr }, ptr %24, i32 0, i32 0
  store ptr %276, ptr %285, align 8
  %286 = call ptr @class_behavior_wrapper(ptr %284, ptr %24)
  call void %286(ptr %23, { ptr, i160 } %280)
  %.reload24 = load i32, ptr %.reg2mem22, align 4
  store i32 %.reload24, ptr %25, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %26, align 4
  %287 = load ptr, ptr %26, align 8
  %288 = insertvalue { ptr, i160 } undef, ptr %287, 0
  %289 = load i160, ptr %25, align 4
  %290 = insertvalue { ptr, i160 } %288, i160 %289, 1
  %291 = getelementptr [1 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %291, align 8
  %292 = call ptr @llvm.invariant.start.p0(i64 1, ptr %27)
  %293 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %294 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %295 = getelementptr { ptr }, ptr %28, i32 0, i32 0
  store ptr %287, ptr %295, align 8
  %296 = call ptr @class_behavior_wrapper(ptr %294, ptr %28)
  call void %296(ptr %27, { ptr, i160 } %290)
  %297 = load ptr, ptr %14, align 8
  store ptr %297, ptr %14, align 8
  %298 = load i32, ptr %13, align 4
  store i32 %298, ptr %13, align 4
  %.reload34 = load i64, ptr %.reg2mem31, align 4
  store i64 %.reload34, ptr %.reg2mem74, align 4
  br label %299

299:                                              ; preds = %231, %225
  %.reload75 = load i64, ptr %.reg2mem74, align 4
  store i64 %.reload75, ptr %.reg2mem13, align 4
  br label %300

300:                                              ; preds = %299
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  %301 = add i32 %.reload23, 1
  store i32 %301, ptr %.reg2mem11, align 4
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %.reload14 = load i64, ptr %.reg2mem13, align 4
  %.reload18 = load i1, ptr %.reg2mem17, align 1
  store i32 %.reload12, ptr %.reg2mem68, align 4
  store i1 %.reload18, ptr %.reg2mem70, align 1
  store i64 %.reload14, ptr %.reg2mem72, align 4
  br label %303

302:                                              ; preds = %186
  store i32 poison, ptr %.reg2mem68, align 4
  store i1 poison, ptr %.reg2mem70, align 1
  store i64 poison, ptr %.reg2mem72, align 4
  br label %303

303:                                              ; preds = %302, %300
  %.reload73 = load i64, ptr %.reg2mem72, align 4
  %.reload71 = load i1, ptr %.reg2mem70, align 1
  %.reload69 = load i32, ptr %.reg2mem68, align 4
  store i64 %.reload73, ptr %.reg2mem9, align 4
  store i1 %.reload71, ptr %.reg2mem7, align 1
  store i32 %.reload69, ptr %.reg2mem5, align 4
  br label %304

304:                                              ; preds = %303
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  %.reload10 = load i64, ptr %.reg2mem9, align 4
  %.reload20 = load i1, ptr %.reg2mem19, align 1
  %.reload29 = load i1, ptr %.reg2mem27, align 1
  %.reload33 = load i64, ptr %.reg2mem31, align 4
  store i32 %.reload6, ptr %.reg2mem62, align 4
  store i1 %.reload8, ptr %.reg2mem64, align 1
  store i64 %.reload10, ptr %.reg2mem66, align 4
  br i1 %.reload20, label %305, label %306

305:                                              ; preds = %304
  %.reload67 = load i64, ptr %.reg2mem66, align 4
  %.reload65 = load i1, ptr %.reg2mem64, align 1
  %.reload63 = load i32, ptr %.reg2mem62, align 4
  store i64 %.reload67, ptr %.reg2mem3, align 4
  store i1 %.reload65, ptr %.reg2mem1, align 1
  store i32 %.reload63, ptr %.reg2mem, align 4
  %.reload = load i32, ptr %.reg2mem, align 4
  %.reload2 = load i1, ptr %.reg2mem1, align 1
  %.reload4 = load i64, ptr %.reg2mem3, align 4
  store i32 %.reload, ptr %.reg2mem76, align 4
  store i1 %.reload2, ptr %.reg2mem78, align 1
  store i64 %.reload4, ptr %.reg2mem80, align 4
  br label %186

306:                                              ; preds = %304
  %307 = call i64 @clock()
  %.reload32 = load i64, ptr %.reg2mem31, align 4
  %.reload59 = load i64, ptr %.reg2mem58, align 4
  %308 = icmp ne i64 %.reload32, %.reload59
  %.reload28 = load i1, ptr %.reg2mem27, align 1
  %309 = select i1 %308, i1 false, i1 %.reload28
  %310 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 19))
  store ptr %310, ptr %29, align 8
  %311 = getelementptr { ptr }, ptr %29, i32 0, i32 0
  %312 = getelementptr { ptr }, ptr %30, i32 0, i32 0
  %313 = load ptr, ptr %311, align 8
  store ptr %313, ptr %312, align 8
  %314 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %315 = load ptr, ptr %30, align 8
  %316 = load [18 x i8], ptr @wzqal_Get_Sequential_Hit, align 1
  store [18 x i8] %316, ptr %315, align 1
  store ptr @String, ptr %31, align 8
  %317 = load ptr, ptr %31, align 8
  %318 = getelementptr ptr, ptr %317, i32 6
  %319 = load ptr, ptr %318, align 8
  %320 = call { i64, i64 } @size_wrapper(ptr %319, ptr %31)
  %321 = extractvalue { i64, i64 } %320, 0
  %322 = call ptr @bump_malloc(i64 %321)
  %323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr @String, ptr %32, align 8
  store ptr %322, ptr %323, align 8
  store i32 9, ptr %324, align 4
  %325 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %326 = getelementptr { ptr }, ptr %30, i32 0, i32 0
  %327 = load ptr, ptr %326, align 8
  %328 = insertvalue { ptr } undef, ptr %327, 0
  %329 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %330 = load ptr, ptr %329, align 8
  %331 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %330, 0
  %332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %333 = load ptr, ptr %332, align 8
  %334 = insertvalue { ptr, ptr, ptr, i32 } %331, ptr %333, 1
  %335 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %336 = load ptr, ptr %335, align 8
  %337 = insertvalue { ptr, ptr, ptr, i32 } %334, ptr %336, 2
  %338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %339 = load i32, ptr %338, align 4
  %340 = insertvalue { ptr, ptr, ptr, i32 } %337, i32 %339, 3
  %341 = getelementptr [3 x ptr], ptr %33, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %341, align 8
  %342 = getelementptr [3 x ptr], ptr %33, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %342, align 8
  %343 = getelementptr [3 x ptr], ptr %33, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %343, align 8
  %344 = call ptr @llvm.invariant.start.p0(i64 9, ptr %33)
  %345 = call ptr @llvm.invariant.start.p0(i64 280, ptr %330)
  %346 = getelementptr ptr, ptr %330, i32 %339
  %347 = getelementptr ptr, ptr %346, i32 4
  %348 = load ptr, ptr %347, align 8
  %349 = getelementptr { ptr, ptr, ptr }, ptr %34, i32 0, i32 0
  store ptr @buffer_typ, ptr %349, align 8
  %350 = getelementptr { ptr, ptr, ptr }, ptr %34, i32 0, i32 1
  store ptr @i32_typ, ptr %350, align 8
  %351 = getelementptr { ptr, ptr, ptr }, ptr %34, i32 0, i32 2
  store ptr @i32_typ, ptr %351, align 8
  %352 = call ptr @behavior_wrapper(ptr %348, { ptr, ptr, ptr, i32 } %340, ptr %34)
  call void %352({ ptr, ptr, ptr, i32 } %340, { ptr, ptr, ptr, i32 } %340, ptr %33, { ptr } %328, i32 18, i32 19)
  %.reload37 = load i64, ptr %.reg2mem36, align 4
  %353 = sub i64 %307, %.reload37
  %354 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %355 = load ptr, ptr %354, align 8
  %356 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %355, 0
  %357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %358 = load ptr, ptr %357, align 8
  %359 = insertvalue { ptr, ptr, ptr, i32 } %356, ptr %358, 1
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %361 = load ptr, ptr %360, align 8
  %362 = insertvalue { ptr, ptr, ptr, i32 } %359, ptr %361, 2
  %363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %364 = load i32, ptr %363, align 4
  %365 = insertvalue { ptr, ptr, ptr, i32 } %362, i32 %364, 3
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %365, i32 %0, i64 %353)
  %366 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 19))
  store ptr %366, ptr %35, align 8
  %367 = getelementptr { ptr }, ptr %35, i32 0, i32 0
  %368 = getelementptr { ptr }, ptr %36, i32 0, i32 0
  %369 = load ptr, ptr %367, align 8
  store ptr %369, ptr %368, align 8
  %370 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %371 = load ptr, ptr %36, align 8
  %372 = load [18 x i8], ptr @wisxg_____Verification_, align 1
  store [18 x i8] %372, ptr %371, align 1
  store ptr @String, ptr %37, align 8
  %373 = load ptr, ptr %37, align 8
  %374 = getelementptr ptr, ptr %373, i32 6
  %375 = load ptr, ptr %374, align 8
  %376 = call { i64, i64 } @size_wrapper(ptr %375, ptr %37)
  %377 = extractvalue { i64, i64 } %376, 0
  %378 = call ptr @bump_malloc(i64 %377)
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @String, ptr %38, align 8
  store ptr %378, ptr %379, align 8
  store i32 9, ptr %380, align 4
  %381 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %382 = getelementptr { ptr }, ptr %36, i32 0, i32 0
  %383 = load ptr, ptr %382, align 8
  %384 = insertvalue { ptr } undef, ptr %383, 0
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %386 = load ptr, ptr %385, align 8
  %387 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %386, 0
  %388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %389 = load ptr, ptr %388, align 8
  %390 = insertvalue { ptr, ptr, ptr, i32 } %387, ptr %389, 1
  %391 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %392 = load ptr, ptr %391, align 8
  %393 = insertvalue { ptr, ptr, ptr, i32 } %390, ptr %392, 2
  %394 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %395 = load i32, ptr %394, align 4
  %396 = insertvalue { ptr, ptr, ptr, i32 } %393, i32 %395, 3
  %397 = getelementptr [3 x ptr], ptr %39, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %397, align 8
  %398 = getelementptr [3 x ptr], ptr %39, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %398, align 8
  %399 = getelementptr [3 x ptr], ptr %39, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %399, align 8
  %400 = call ptr @llvm.invariant.start.p0(i64 9, ptr %39)
  %401 = call ptr @llvm.invariant.start.p0(i64 280, ptr %386)
  %402 = getelementptr ptr, ptr %386, i32 %395
  %403 = getelementptr ptr, ptr %402, i32 4
  %404 = load ptr, ptr %403, align 8
  %405 = getelementptr { ptr, ptr, ptr }, ptr %40, i32 0, i32 0
  store ptr @buffer_typ, ptr %405, align 8
  %406 = getelementptr { ptr, ptr, ptr }, ptr %40, i32 0, i32 1
  store ptr @i32_typ, ptr %406, align 8
  %407 = getelementptr { ptr, ptr, ptr }, ptr %40, i32 0, i32 2
  store ptr @i32_typ, ptr %407, align 8
  %408 = call ptr @behavior_wrapper(ptr %404, { ptr, ptr, ptr, i32 } %396, ptr %40)
  call void %408({ ptr, ptr, ptr, i32 } %396, { ptr, ptr, ptr, i32 } %396, ptr %39, { ptr } %384, i32 18, i32 19)
  %409 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 0
  %410 = load ptr, ptr %409, align 8
  %411 = insertvalue { ptr, i160 } undef, ptr %410, 0
  %412 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 1
  %413 = load i160, ptr %412, align 4
  %414 = insertvalue { ptr, i160 } %411, i160 %413, 1
  %415 = getelementptr [1 x ptr], ptr %41, i32 0, i32 0
  store ptr @_parameterization_String, ptr %415, align 8
  %416 = call ptr @llvm.invariant.start.p0(i64 1, ptr %41)
  %417 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %418 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %419 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  store ptr %410, ptr %419, align 8
  %420 = call ptr @class_behavior_wrapper(ptr %418, ptr %42)
  call void %420(ptr %41, { ptr, i160 } %414)
  br i1 %309, label %421, label %477

421:                                              ; preds = %306
  %422 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %422, ptr %43, align 8
  %423 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %424 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  %425 = load ptr, ptr %423, align 8
  store ptr %425, ptr %424, align 8
  %426 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %427 = load ptr, ptr %44, align 8
  %428 = load [4 x i8], ptr @vaoqd_PASS, align 1
  store [4 x i8] %428, ptr %427, align 1
  store ptr @String, ptr %45, align 8
  %429 = load ptr, ptr %45, align 8
  %430 = getelementptr ptr, ptr %429, i32 6
  %431 = load ptr, ptr %430, align 8
  %432 = call { i64, i64 } @size_wrapper(ptr %431, ptr %45)
  %433 = extractvalue { i64, i64 } %432, 0
  %434 = call ptr @bump_malloc(i64 %433)
  %435 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  store ptr @String, ptr %46, align 8
  store ptr %434, ptr %435, align 8
  store i32 9, ptr %436, align 4
  %437 = call ptr @llvm.invariant.start.p0(i64 16, ptr %46)
  %438 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  %439 = load ptr, ptr %438, align 8
  %440 = insertvalue { ptr } undef, ptr %439, 0
  %441 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %442 = load ptr, ptr %441, align 8
  %443 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %442, 0
  %444 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %445 = load ptr, ptr %444, align 8
  %446 = insertvalue { ptr, ptr, ptr, i32 } %443, ptr %445, 1
  %447 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %448 = load ptr, ptr %447, align 8
  %449 = insertvalue { ptr, ptr, ptr, i32 } %446, ptr %448, 2
  %450 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %451 = load i32, ptr %450, align 4
  %452 = insertvalue { ptr, ptr, ptr, i32 } %449, i32 %451, 3
  %453 = getelementptr [3 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %453, align 8
  %454 = getelementptr [3 x ptr], ptr %47, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %454, align 8
  %455 = getelementptr [3 x ptr], ptr %47, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %455, align 8
  %456 = call ptr @llvm.invariant.start.p0(i64 9, ptr %47)
  %457 = call ptr @llvm.invariant.start.p0(i64 280, ptr %442)
  %458 = getelementptr ptr, ptr %442, i32 %451
  %459 = getelementptr ptr, ptr %458, i32 4
  %460 = load ptr, ptr %459, align 8
  %461 = getelementptr { ptr, ptr, ptr }, ptr %48, i32 0, i32 0
  store ptr @buffer_typ, ptr %461, align 8
  %462 = getelementptr { ptr, ptr, ptr }, ptr %48, i32 0, i32 1
  store ptr @i32_typ, ptr %462, align 8
  %463 = getelementptr { ptr, ptr, ptr }, ptr %48, i32 0, i32 2
  store ptr @i32_typ, ptr %463, align 8
  %464 = call ptr @behavior_wrapper(ptr %460, { ptr, ptr, ptr, i32 } %452, ptr %48)
  call void %464({ ptr, ptr, ptr, i32 } %452, { ptr, ptr, ptr, i32 } %452, ptr %47, { ptr } %440, i32 4, i32 5)
  %465 = getelementptr { ptr, i160 }, ptr %46, i32 0, i32 0
  %466 = load ptr, ptr %465, align 8
  %467 = insertvalue { ptr, i160 } undef, ptr %466, 0
  %468 = getelementptr { ptr, i160 }, ptr %46, i32 0, i32 1
  %469 = load i160, ptr %468, align 4
  %470 = insertvalue { ptr, i160 } %467, i160 %469, 1
  %471 = getelementptr [1 x ptr], ptr %49, i32 0, i32 0
  store ptr @_parameterization_String, ptr %471, align 8
  %472 = call ptr @llvm.invariant.start.p0(i64 1, ptr %49)
  %473 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %474 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %475 = getelementptr { ptr }, ptr %50, i32 0, i32 0
  store ptr %466, ptr %475, align 8
  %476 = call ptr @class_behavior_wrapper(ptr %474, ptr %50)
  call void %476(ptr %49, { ptr, i160 } %470)
  br label %533

477:                                              ; preds = %306
  %478 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %478, ptr %51, align 8
  %479 = getelementptr { ptr }, ptr %51, i32 0, i32 0
  %480 = getelementptr { ptr }, ptr %52, i32 0, i32 0
  %481 = load ptr, ptr %479, align 8
  store ptr %481, ptr %480, align 8
  %482 = call ptr @llvm.invariant.start.p0(i64 16, ptr %52)
  %483 = load ptr, ptr %52, align 8
  %484 = load [4 x i8], ptr @qrjmn_FAIL, align 1
  store [4 x i8] %484, ptr %483, align 1
  store ptr @String, ptr %53, align 8
  %485 = load ptr, ptr %53, align 8
  %486 = getelementptr ptr, ptr %485, i32 6
  %487 = load ptr, ptr %486, align 8
  %488 = call { i64, i64 } @size_wrapper(ptr %487, ptr %53)
  %489 = extractvalue { i64, i64 } %488, 0
  %490 = call ptr @bump_malloc(i64 %489)
  %491 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %492 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  store ptr @String, ptr %54, align 8
  store ptr %490, ptr %491, align 8
  store i32 9, ptr %492, align 4
  %493 = call ptr @llvm.invariant.start.p0(i64 16, ptr %54)
  %494 = getelementptr { ptr }, ptr %52, i32 0, i32 0
  %495 = load ptr, ptr %494, align 8
  %496 = insertvalue { ptr } undef, ptr %495, 0
  %497 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %498 = load ptr, ptr %497, align 8
  %499 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %498, 0
  %500 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %501 = load ptr, ptr %500, align 8
  %502 = insertvalue { ptr, ptr, ptr, i32 } %499, ptr %501, 1
  %503 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %504 = load ptr, ptr %503, align 8
  %505 = insertvalue { ptr, ptr, ptr, i32 } %502, ptr %504, 2
  %506 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %507 = load i32, ptr %506, align 4
  %508 = insertvalue { ptr, ptr, ptr, i32 } %505, i32 %507, 3
  %509 = getelementptr [3 x ptr], ptr %55, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %509, align 8
  %510 = getelementptr [3 x ptr], ptr %55, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %510, align 8
  %511 = getelementptr [3 x ptr], ptr %55, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %511, align 8
  %512 = call ptr @llvm.invariant.start.p0(i64 9, ptr %55)
  %513 = call ptr @llvm.invariant.start.p0(i64 280, ptr %498)
  %514 = getelementptr ptr, ptr %498, i32 %507
  %515 = getelementptr ptr, ptr %514, i32 4
  %516 = load ptr, ptr %515, align 8
  %517 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 0
  store ptr @buffer_typ, ptr %517, align 8
  %518 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 1
  store ptr @i32_typ, ptr %518, align 8
  %519 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 2
  store ptr @i32_typ, ptr %519, align 8
  %520 = call ptr @behavior_wrapper(ptr %516, { ptr, ptr, ptr, i32 } %508, ptr %56)
  call void %520({ ptr, ptr, ptr, i32 } %508, { ptr, ptr, ptr, i32 } %508, ptr %55, { ptr } %496, i32 4, i32 5)
  %521 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 0
  %522 = load ptr, ptr %521, align 8
  %523 = insertvalue { ptr, i160 } undef, ptr %522, 0
  %524 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 1
  %525 = load i160, ptr %524, align 4
  %526 = insertvalue { ptr, i160 } %523, i160 %525, 1
  %527 = getelementptr [1 x ptr], ptr %57, i32 0, i32 0
  store ptr @_parameterization_String, ptr %527, align 8
  %528 = call ptr @llvm.invariant.start.p0(i64 1, ptr %57)
  %529 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %530 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %531 = getelementptr { ptr }, ptr %58, i32 0, i32 0
  store ptr %522, ptr %531, align 8
  %532 = call ptr @class_behavior_wrapper(ptr %530, ptr %58)
  call void %532(ptr %57, { ptr, i160 } %526)
  br label %533

533:                                              ; preds = %477, %421
  ret void
}

define void @benchmark_get_random_hit(i32 %0) {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca {}, align 8
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca [2 x ptr], align 8
  %16 = alloca { ptr, ptr }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca [2 x ptr], align 8
  %20 = alloca { ptr, ptr }, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca i160, align 8
  %24 = alloca ptr, align 8
  %25 = alloca [2 x ptr], align 8
  %26 = alloca { ptr, ptr }, align 8
  %27 = alloca i1, align 1
  %28 = alloca ptr, align 8
  %29 = alloca ptr, align 8
  %30 = alloca { ptr }, align 8
  %31 = alloca [1 x ptr], align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = alloca [3 x ptr], align 8
  %34 = alloca { ptr, ptr, ptr }, align 8
  %35 = alloca [1 x ptr], align 8
  %36 = alloca { ptr }, align 8
  %37 = alloca i160, align 8
  %38 = alloca ptr, align 8
  %39 = alloca [1 x ptr], align 8
  %40 = alloca { ptr }, align 8
  %41 = alloca ptr, align 8
  %42 = alloca { ptr }, align 8
  %43 = alloca [1 x ptr], align 8
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca [3 x ptr], align 8
  %46 = alloca { ptr, ptr, ptr }, align 8
  %47 = alloca [1 x ptr], align 8
  %48 = alloca { ptr }, align 8
  %49 = alloca [1 x ptr], align 8
  %50 = alloca { ptr }, align 8
  %51 = alloca { ptr, i160 }, align 8
  %52 = alloca i160, align 8
  %53 = alloca ptr, align 8
  %54 = alloca [1 x ptr], align 8
  %55 = alloca { ptr }, align 8
  %56 = alloca { ptr, i160 }, align 8
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca i32, align 4
  %60 = alloca ptr, align 8
  %61 = alloca ptr, align 8
  %62 = alloca { ptr }, align 8
  %63 = alloca [1 x ptr], align 8
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = alloca [3 x ptr], align 8
  %66 = alloca { ptr, ptr, ptr }, align 8
  %67 = alloca [1 x ptr], align 8
  %68 = alloca { ptr }, align 8
  %69 = alloca i160, align 8
  %70 = alloca ptr, align 8
  %71 = alloca [1 x ptr], align 8
  %72 = alloca { ptr }, align 8
  %73 = alloca ptr, align 8
  %74 = alloca { ptr }, align 8
  %75 = alloca [1 x ptr], align 8
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = alloca [3 x ptr], align 8
  %78 = alloca { ptr, ptr, ptr }, align 8
  %79 = alloca ptr, align 8
  %80 = alloca { ptr }, align 8
  %81 = alloca [1 x ptr], align 8
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = alloca [3 x ptr], align 8
  %84 = alloca { ptr, ptr, ptr }, align 8
  %85 = alloca [1 x ptr], align 8
  %86 = alloca { ptr }, align 8
  %87 = alloca ptr, align 8
  %88 = alloca { ptr }, align 8
  %89 = alloca [1 x ptr], align 8
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = alloca [3 x ptr], align 8
  %92 = alloca { ptr, ptr, ptr }, align 8
  %93 = alloca [1 x ptr], align 8
  %94 = alloca { ptr }, align 8
  %95 = alloca ptr, align 8
  %96 = alloca { ptr }, align 8
  %97 = alloca [1 x ptr], align 8
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  %99 = alloca [3 x ptr], align 8
  %100 = alloca { ptr, ptr, ptr }, align 8
  %101 = alloca [1 x ptr], align 8
  %102 = alloca { ptr }, align 8
  %103 = alloca [4 x ptr], align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i1, align 1
  %.reg2mem3 = alloca i64, align 8
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem9 = alloca i64, align 8
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i64, align 8
  %.reg2mem15 = alloca i64, align 8
  %.reg2mem17 = alloca i1, align 1
  %.reg2mem19 = alloca i32, align 4
  %.reg2mem22 = alloca i1, align 1
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem29 = alloca i1, align 1
  %.reg2mem33 = alloca i64, align 8
  %.reg2mem38 = alloca i64, align 8
  %.reg2mem40 = alloca i32, align 4
  %.reg2mem43 = alloca i32, align 4
  %.reg2mem45 = alloca i32, align 4
  %.reg2mem47 = alloca i64, align 8
  %.reg2mem49 = alloca i32, align 4
  %.reg2mem51 = alloca i32, align 4
  %.reg2mem53 = alloca i64, align 8
  %.reg2mem55 = alloca i32, align 4
  %.reg2mem57 = alloca i32, align 4
  %.reg2mem59 = alloca i64, align 8
  %.reg2mem61 = alloca i32, align 4
  %.reg2mem63 = alloca i64, align 8
  %.reg2mem65 = alloca i32, align 4
  %.reg2mem71 = alloca i1, align 1
  %.reg2mem74 = alloca i32, align 4
  %.reg2mem77 = alloca i32, align 4
  %.reg2mem86 = alloca i64, align 8
  %.reg2mem91 = alloca i32, align 4
  %.reg2mem93 = alloca i32, align 4
  %.reg2mem95 = alloca i1, align 1
  %.reg2mem97 = alloca i64, align 8
  %.reg2mem99 = alloca i32, align 4
  %.reg2mem101 = alloca i1, align 1
  %.reg2mem103 = alloca i64, align 8
  %.reg2mem105 = alloca i64, align 8
  %.reg2mem107 = alloca i32, align 4
  %.reg2mem109 = alloca i1, align 1
  %.reg2mem111 = alloca i64, align 8
  %.reg2mem113 = alloca i32, align 4
  %.reg2mem115 = alloca i32, align 4
  %.reg2mem117 = alloca i64, align 8
  %.reg2mem119 = alloca i32, align 4
  %.reg2mem121 = alloca i32, align 4
  %.reg2mem123 = alloca i64, align 8
  %.reg2mem125 = alloca i32, align 4
  %.reg2mem127 = alloca i64, align 8
  %.reg2mem129 = alloca i32, align 4
  %.reg2mem131 = alloca i32, align 4
  %.reg2mem133 = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store ptr @HashMap, ptr %103, align 8
  %104 = getelementptr ptr, ptr %103, i32 1
  store ptr @_parameterization_Ptri32, ptr %104, align 8
  %105 = getelementptr ptr, ptr %103, i32 2
  store ptr @_parameterization_Ptri32, ptr %105, align 8
  %106 = getelementptr ptr, ptr %103, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %106, align 8
  %107 = load ptr, ptr %103, align 8
  %108 = getelementptr ptr, ptr %107, i32 6
  %109 = load ptr, ptr %108, align 8
  %110 = call { i64, i64 } @size_wrapper(ptr %109, ptr %103)
  %111 = extractvalue { i64, i64 } %110, 0
  %112 = call ptr @bump_malloc(i64 %111)
  store ptr @_parameterization_Ptri32, ptr %112, align 8
  %113 = getelementptr ptr, ptr %112, i32 1
  store ptr @_parameterization_Ptri32, ptr %113, align 8
  %114 = getelementptr ptr, ptr %112, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %114, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 24, ptr %112)
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  store ptr @HashMap, ptr %116, align 8
  store ptr %112, ptr %117, align 8
  store i32 9, ptr %118, align 4
  %119 = call ptr @llvm.invariant.start.p0(i64 16, ptr %116)
  %120 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %120)
  call void @llvm.init.trampoline(ptr %120, ptr @esngqbntvl, ptr @i32_hasher)
  %121 = alloca ptr, align 8
  %122 = call ptr @adjust_trampoline(ptr %120)
  store ptr %122, ptr %121, align 8
  %123 = call ptr @llvm.invariant.start.p0(i64 24, ptr %120)
  %124 = call ptr @llvm.invariant.start.p0(i64 8, ptr %121)
  %125 = getelementptr { ptr }, ptr %121, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr } undef, ptr %126, 0
  %128 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %128)
  call void @llvm.init.trampoline(ptr %128, ptr @yxjixzycfs, ptr @i32_eq)
  %129 = alloca ptr, align 8
  %130 = call ptr @adjust_trampoline(ptr %128)
  store ptr %130, ptr %129, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 24, ptr %128)
  %132 = call ptr @llvm.invariant.start.p0(i64 8, ptr %129)
  %133 = getelementptr { ptr }, ptr %129, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %137, 0
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 1
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %143, 2
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %146 = load i32, ptr %145, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 %146, 3
  %148 = alloca [2 x ptr], align 8
  %149 = getelementptr [2 x ptr], ptr %148, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %149, align 8
  %150 = getelementptr [2 x ptr], ptr %148, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 4, ptr %148)
  %152 = call ptr @llvm.invariant.start.p0(i64 688, ptr %137)
  %153 = getelementptr ptr, ptr %137, i32 %146
  %154 = getelementptr ptr, ptr %153, i32 9
  %155 = load ptr, ptr %154, align 8
  %156 = alloca { ptr, ptr }, align 8
  %157 = getelementptr { ptr, ptr }, ptr %156, i32 0, i32 0
  store ptr @function_typ, ptr %157, align 8
  %158 = getelementptr { ptr, ptr }, ptr %156, i32 0, i32 1
  store ptr @function_typ, ptr %158, align 8
  %159 = call ptr @behavior_wrapper(ptr %155, { ptr, ptr, ptr, i32 } %147, ptr %156)
  call void %159({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %148, { ptr } %127, { ptr } %135)
  %160 = alloca { ptr, ptr, ptr, i32 }, align 8
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 0
  %163 = load ptr, ptr %161, align 8
  store ptr %163, ptr %162, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 1
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 2
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 3
  %172 = load i32, ptr %170, align 4
  store i32 %172, ptr %171, align 4
  call void @set_offset(ptr %160, ptr @HashMap)
  %173 = alloca { ptr, ptr, ptr, i32 }, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 0
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 0
  %176 = load ptr, ptr %174, align 8
  store ptr %176, ptr %175, align 8
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 1
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 1
  %179 = load ptr, ptr %177, align 8
  store ptr %179, ptr %178, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 2
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 2
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 3
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 3
  %185 = load i32, ptr %183, align 4
  store i32 %185, ptr %184, align 4
  %186 = call ptr @llvm.invariant.start.p0(i64 16, ptr %173)
  %187 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %187, align 8
  %188 = load ptr, ptr %187, align 8
  %189 = getelementptr ptr, ptr %188, i32 6
  %190 = load ptr, ptr %189, align 8
  %191 = call { i64, i64 } @size_wrapper(ptr %190, ptr %187)
  %192 = extractvalue { i64, i64 } %191, 0
  %193 = call ptr @bump_malloc(i64 %192)
  %194 = alloca { ptr, ptr, ptr, i32 }, align 8
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 1
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 3
  store ptr @PRNG, ptr %194, align 8
  store ptr %193, ptr %195, align 8
  store i32 9, ptr %196, align 4
  %197 = call ptr @llvm.invariant.start.p0(i64 16, ptr %194)
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 0
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %199, 0
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 1
  %202 = load ptr, ptr %201, align 8
  %203 = insertvalue { ptr, ptr, ptr, i32 } %200, ptr %202, 1
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 2
  %205 = load ptr, ptr %204, align 8
  %206 = insertvalue { ptr, ptr, ptr, i32 } %203, ptr %205, 2
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 3
  %208 = load i32, ptr %207, align 4
  %209 = insertvalue { ptr, ptr, ptr, i32 } %206, i32 %208, 3
  %210 = alloca [1 x ptr], align 8
  %211 = getelementptr [1 x ptr], ptr %210, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %211, align 8
  %212 = call ptr @llvm.invariant.start.p0(i64 1, ptr %210)
  %213 = call ptr @llvm.invariant.start.p0(i64 40, ptr %199)
  %214 = getelementptr ptr, ptr %199, i32 %208
  %215 = getelementptr ptr, ptr %214, i32 1
  %216 = load ptr, ptr %215, align 8
  %217 = alloca { ptr }, align 8
  %218 = getelementptr { ptr }, ptr %217, i32 0, i32 0
  store ptr @i32_typ, ptr %218, align 8
  %219 = call ptr @behavior_wrapper(ptr %216, { ptr, ptr, ptr, i32 } %209, ptr %217)
  call void %219({ ptr, ptr, ptr, i32 } %209, { ptr, ptr, ptr, i32 } %209, ptr %210, i32 456)
  %220 = alloca { ptr, ptr, ptr, i32 }, align 8
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 0
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 0
  %223 = load ptr, ptr %221, align 8
  store ptr %223, ptr %222, align 8
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 1
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 1
  %226 = load ptr, ptr %224, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 2
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 2
  %229 = load ptr, ptr %227, align 8
  store ptr %229, ptr %228, align 8
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 3
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 3
  %232 = load i32, ptr %230, align 4
  store i32 %232, ptr %231, align 4
  call void @set_offset(ptr %220, ptr @PRNG)
  %233 = alloca { ptr, ptr, ptr, i32 }, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 0
  %236 = load ptr, ptr %234, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 1
  %239 = load ptr, ptr %237, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 2
  %242 = load ptr, ptr %240, align 8
  store ptr %242, ptr %241, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 3
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 3
  %245 = load i32, ptr %243, align 4
  store i32 %245, ptr %244, align 4
  %246 = call ptr @llvm.invariant.start.p0(i64 16, ptr %233)
  %247 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %247, align 8
  %248 = getelementptr ptr, ptr %247, i32 1
  store ptr @_parameterization_Ptri32, ptr %248, align 8
  %249 = load ptr, ptr %247, align 8
  %250 = getelementptr ptr, ptr %249, i32 6
  %251 = load ptr, ptr %250, align 8
  %252 = call { i64, i64 } @size_wrapper(ptr %251, ptr %247)
  %253 = extractvalue { i64, i64 } %252, 0
  %254 = call ptr @bump_malloc(i64 %253)
  store ptr @_parameterization_Ptri32, ptr %254, align 8
  %255 = call ptr @llvm.invariant.start.p0(i64 8, ptr %254)
  %256 = alloca { ptr, ptr, ptr, i32 }, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 1
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 3
  store ptr @Array, ptr %256, align 8
  store ptr %254, ptr %257, align 8
  store i32 9, ptr %258, align 4
  %259 = call ptr @llvm.invariant.start.p0(i64 16, ptr %256)
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 0
  %261 = load ptr, ptr %260, align 8
  %262 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %261, 0
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 1
  %264 = load ptr, ptr %263, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } %262, ptr %264, 1
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 2
  %267 = load ptr, ptr %266, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } %265, ptr %267, 2
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 3
  %270 = load i32, ptr %269, align 4
  %271 = insertvalue { ptr, ptr, ptr, i32 } %268, i32 %270, 3
  %272 = alloca [1 x ptr], align 8
  %273 = getelementptr [1 x ptr], ptr %272, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %273, align 8
  %274 = call ptr @llvm.invariant.start.p0(i64 1, ptr %272)
  %275 = call ptr @llvm.invariant.start.p0(i64 600, ptr %261)
  %276 = getelementptr ptr, ptr %261, i32 %270
  %277 = getelementptr ptr, ptr %276, i32 6
  %278 = load ptr, ptr %277, align 8
  %279 = alloca { ptr }, align 8
  %280 = getelementptr { ptr }, ptr %279, i32 0, i32 0
  store ptr @i32_typ, ptr %280, align 8
  %281 = call ptr @behavior_wrapper(ptr %278, { ptr, ptr, ptr, i32 } %271, ptr %279)
  call void %281({ ptr, ptr, ptr, i32 } %271, { ptr, ptr, ptr, i32 } %271, ptr %272, i32 %0)
  %282 = alloca { ptr, ptr, ptr, i32 }, align 8
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 0
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 0
  %285 = load ptr, ptr %283, align 8
  store ptr %285, ptr %284, align 8
  %286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 1
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 1
  %288 = load ptr, ptr %286, align 8
  store ptr %288, ptr %287, align 8
  %289 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 2
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 2
  %291 = load ptr, ptr %289, align 8
  store ptr %291, ptr %290, align 8
  %292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 3
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 3
  %294 = load i32, ptr %292, align 4
  store i32 %294, ptr %293, align 4
  call void @set_offset(ptr %282, ptr @Array)
  %295 = alloca { ptr, ptr, ptr, i32 }, align 8
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 0
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %298 = load ptr, ptr %296, align 8
  store ptr %298, ptr %297, align 8
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 1
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %301 = load ptr, ptr %299, align 8
  store ptr %301, ptr %300, align 8
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 2
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %304 = load ptr, ptr %302, align 8
  store ptr %304, ptr %303, align 8
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 3
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %307 = load i32, ptr %305, align 4
  store i32 %307, ptr %306, align 4
  %308 = call ptr @llvm.invariant.start.p0(i64 16, ptr %295)
  %309 = alloca [4 x ptr], align 8
  store ptr @HashMap, ptr %309, align 8
  %310 = getelementptr ptr, ptr %309, i32 1
  store ptr @_parameterization_Ptri32, ptr %310, align 8
  %311 = getelementptr ptr, ptr %309, i32 2
  store ptr @_parameterization_Ptri1, ptr %311, align 8
  %312 = getelementptr ptr, ptr %309, i32 3
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %312, align 8
  %313 = load ptr, ptr %309, align 8
  %314 = getelementptr ptr, ptr %313, i32 6
  %315 = load ptr, ptr %314, align 8
  %316 = call { i64, i64 } @size_wrapper(ptr %315, ptr %309)
  %317 = extractvalue { i64, i64 } %316, 0
  %318 = call ptr @bump_malloc(i64 %317)
  store ptr @_parameterization_Ptri32, ptr %318, align 8
  %319 = getelementptr ptr, ptr %318, i32 1
  store ptr @_parameterization_Ptri1, ptr %319, align 8
  %320 = getelementptr ptr, ptr %318, i32 2
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %320, align 8
  %321 = call ptr @llvm.invariant.start.p0(i64 24, ptr %318)
  %322 = alloca { ptr, ptr, ptr, i32 }, align 8
  %323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 1
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 3
  store ptr @HashMap, ptr %322, align 8
  store ptr %318, ptr %323, align 8
  store i32 9, ptr %324, align 4
  %325 = call ptr @llvm.invariant.start.p0(i64 16, ptr %322)
  %326 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %326)
  call void @llvm.init.trampoline(ptr %326, ptr @nrbpklbtvm, ptr @i32_hasher)
  %327 = alloca ptr, align 8
  %328 = call ptr @adjust_trampoline(ptr %326)
  store ptr %328, ptr %327, align 8
  %329 = call ptr @llvm.invariant.start.p0(i64 24, ptr %326)
  %330 = call ptr @llvm.invariant.start.p0(i64 8, ptr %327)
  %331 = getelementptr { ptr }, ptr %327, i32 0, i32 0
  %332 = load ptr, ptr %331, align 8
  %333 = insertvalue { ptr } undef, ptr %332, 0
  %334 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %334)
  call void @llvm.init.trampoline(ptr %334, ptr @asxdkvmrur, ptr @i32_eq)
  %335 = alloca ptr, align 8
  %336 = call ptr @adjust_trampoline(ptr %334)
  store ptr %336, ptr %335, align 8
  %337 = call ptr @llvm.invariant.start.p0(i64 24, ptr %334)
  %338 = call ptr @llvm.invariant.start.p0(i64 8, ptr %335)
  %339 = getelementptr { ptr }, ptr %335, i32 0, i32 0
  %340 = load ptr, ptr %339, align 8
  %341 = insertvalue { ptr } undef, ptr %340, 0
  %342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 0
  %343 = load ptr, ptr %342, align 8
  %344 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %343, 0
  %345 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 1
  %346 = load ptr, ptr %345, align 8
  %347 = insertvalue { ptr, ptr, ptr, i32 } %344, ptr %346, 1
  %348 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 2
  %349 = load ptr, ptr %348, align 8
  %350 = insertvalue { ptr, ptr, ptr, i32 } %347, ptr %349, 2
  %351 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 3
  %352 = load i32, ptr %351, align 4
  %353 = insertvalue { ptr, ptr, ptr, i32 } %350, i32 %352, 3
  %354 = alloca [2 x ptr], align 8
  %355 = getelementptr [2 x ptr], ptr %354, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %355, align 8
  %356 = getelementptr [2 x ptr], ptr %354, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %356, align 8
  %357 = call ptr @llvm.invariant.start.p0(i64 4, ptr %354)
  %358 = call ptr @llvm.invariant.start.p0(i64 688, ptr %343)
  %359 = getelementptr ptr, ptr %343, i32 %352
  %360 = getelementptr ptr, ptr %359, i32 9
  %361 = load ptr, ptr %360, align 8
  %362 = alloca { ptr, ptr }, align 8
  %363 = getelementptr { ptr, ptr }, ptr %362, i32 0, i32 0
  store ptr @function_typ, ptr %363, align 8
  %364 = getelementptr { ptr, ptr }, ptr %362, i32 0, i32 1
  store ptr @function_typ, ptr %364, align 8
  %365 = call ptr @behavior_wrapper(ptr %361, { ptr, ptr, ptr, i32 } %353, ptr %362)
  call void %365({ ptr, ptr, ptr, i32 } %353, { ptr, ptr, ptr, i32 } %353, ptr %354, { ptr } %333, { ptr } %341)
  %366 = alloca { ptr, ptr, ptr, i32 }, align 8
  %367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 0
  %368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 0
  %369 = load ptr, ptr %367, align 8
  store ptr %369, ptr %368, align 8
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 1
  %371 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 1
  %372 = load ptr, ptr %370, align 8
  store ptr %372, ptr %371, align 8
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 2
  %374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 2
  %375 = load ptr, ptr %373, align 8
  store ptr %375, ptr %374, align 8
  %376 = getelementptr { ptr, ptr, ptr, i32 }, ptr %322, i32 0, i32 3
  %377 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 3
  %378 = load i32, ptr %376, align 4
  store i32 %378, ptr %377, align 4
  call void @set_offset(ptr %366, ptr @HashMap)
  %379 = alloca { ptr, ptr, ptr, i32 }, align 8
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 0
  %381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 0
  %382 = load ptr, ptr %380, align 8
  store ptr %382, ptr %381, align 8
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 1
  %384 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 1
  %385 = load ptr, ptr %383, align 8
  store ptr %385, ptr %384, align 8
  %386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 2
  %387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 2
  %388 = load ptr, ptr %386, align 8
  store ptr %388, ptr %387, align 8
  %389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 3
  %390 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 3
  %391 = load i32, ptr %389, align 4
  store i32 %391, ptr %390, align 4
  %392 = call ptr @llvm.invariant.start.p0(i64 16, ptr %379)
  %393 = mul i32 %0, 10
  store i32 %393, ptr %.reg2mem91, align 4
  store i32 0, ptr %.reg2mem129, align 4
  store i32 0, ptr %.reg2mem131, align 4
  store i64 0, ptr %.reg2mem133, align 4
  br label %394

394:                                              ; preds = %553, %1
  %.reload134 = load i64, ptr %.reg2mem133, align 4
  %.reload132 = load i32, ptr %.reg2mem131, align 4
  %.reload130 = load i32, ptr %.reg2mem129, align 4
  store i64 %.reload134, ptr %.reg2mem86, align 4
  store i32 %.reload132, ptr %.reg2mem77, align 4
  store i32 %.reload130, ptr %.reg2mem74, align 4
  %.reload85 = load i32, ptr %.reg2mem77, align 4
  %395 = icmp slt i32 %.reload85, %0
  %.reload76 = load i32, ptr %.reg2mem74, align 4
  %.reload92 = load i32, ptr %.reg2mem91, align 4
  %396 = icmp slt i32 %.reload76, %.reload92
  %397 = and i1 %395, %396
  store i1 %397, ptr %.reg2mem71, align 1
  %.reload73 = load i1, ptr %.reg2mem71, align 1
  br i1 %.reload73, label %398, label %550

398:                                              ; preds = %394
  %399 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 0
  %400 = load ptr, ptr %399, align 8
  %401 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %400, 0
  %402 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 1
  %403 = load ptr, ptr %402, align 8
  %404 = insertvalue { ptr, ptr, ptr, i32 } %401, ptr %403, 1
  %405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 2
  %406 = load ptr, ptr %405, align 8
  %407 = insertvalue { ptr, ptr, ptr, i32 } %404, ptr %406, 2
  %408 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 3
  %409 = load i32, ptr %408, align 4
  %410 = insertvalue { ptr, ptr, ptr, i32 } %407, i32 %409, 3
  %411 = call ptr @llvm.invariant.start.p0(i64 0, ptr %2)
  %412 = call ptr @llvm.invariant.start.p0(i64 40, ptr %400)
  %413 = getelementptr ptr, ptr %400, i32 %409
  %414 = getelementptr ptr, ptr %413, i32 2
  %415 = load ptr, ptr %414, align 8
  %416 = call ptr @behavior_wrapper(ptr %415, { ptr, ptr, ptr, i32 } %410, ptr %3)
  %417 = call i32 %416({ ptr, ptr, ptr, i32 } %410, { ptr, ptr, ptr, i32 } %410, ptr %2)
  store i32 %417, ptr %.reg2mem65, align 4
  store ptr @i32_typ, ptr %5, align 8
  %.reload70 = load i32, ptr %.reg2mem65, align 4
  store i32 %.reload70, ptr %4, align 4
  %418 = load ptr, ptr %5, align 8
  %419 = insertvalue { ptr, i160 } undef, ptr %418, 0
  %420 = load i160, ptr %4, align 4
  %421 = insertvalue { ptr, i160 } %419, i160 %420, 1
  %422 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 0
  %423 = load ptr, ptr %422, align 8
  %424 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %423, 0
  %425 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 1
  %426 = load ptr, ptr %425, align 8
  %427 = insertvalue { ptr, ptr, ptr, i32 } %424, ptr %426, 1
  %428 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 2
  %429 = load ptr, ptr %428, align 8
  %430 = insertvalue { ptr, ptr, ptr, i32 } %427, ptr %429, 2
  %431 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 3
  %432 = load i32, ptr %431, align 4
  %433 = insertvalue { ptr, ptr, ptr, i32 } %430, i32 %432, 3
  %434 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %434, align 8
  %435 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %436 = call ptr @llvm.invariant.start.p0(i64 688, ptr %423)
  %437 = getelementptr ptr, ptr %423, i32 %432
  %438 = getelementptr ptr, ptr %437, i32 20
  %439 = load ptr, ptr %438, align 8
  %440 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr %418, ptr %440, align 8
  %441 = call ptr @behavior_wrapper(ptr %439, { ptr, ptr, ptr, i32 } %433, ptr %7)
  %442 = call { ptr, i160 } %441({ ptr, ptr, ptr, i32 } %433, { ptr, ptr, ptr, i32 } %433, ptr %6, { ptr, i160 } %421)
  store { ptr, i160 } %442, ptr %8, align 8
  %443 = getelementptr { ptr, i1 }, ptr %8, i32 0, i32 0
  %444 = load ptr, ptr %443, align 8
  store ptr %444, ptr %10, align 8
  %445 = getelementptr { ptr, i1 }, ptr %8, i32 0, i32 1
  %446 = load i1, ptr %445, align 1
  store i1 %446, ptr %9, align 1
  %447 = load ptr, ptr %10, align 8
  %448 = ptrtoint ptr %447 to i64
  %449 = icmp eq i64 %448, ptrtoint (ptr @nil_typ to i64)
  %450 = icmp eq i64 %448, 0
  %451 = or i1 %449, %450
  br i1 %451, label %452, label %546

452:                                              ; preds = %398
  %453 = load [0 x i8], ptr %9, align 1
  %.reload69 = load i32, ptr %.reg2mem65, align 4
  %454 = add i32 %.reload69, 1
  store ptr @i32_typ, ptr %12, align 8
  %.reload68 = load i32, ptr %.reg2mem65, align 4
  store i32 %.reload68, ptr %11, align 4
  %455 = load ptr, ptr %12, align 8
  %456 = insertvalue { ptr, i160 } undef, ptr %455, 0
  %457 = load i160, ptr %11, align 4
  %458 = insertvalue { ptr, i160 } %456, i160 %457, 1
  store ptr @i32_typ, ptr %14, align 8
  store i32 %454, ptr %13, align 4
  %459 = load ptr, ptr %14, align 8
  %460 = insertvalue { ptr, i160 } undef, ptr %459, 0
  %461 = load i160, ptr %13, align 4
  %462 = insertvalue { ptr, i160 } %460, i160 %461, 1
  %463 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 0
  %464 = load ptr, ptr %463, align 8
  %465 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %464, 0
  %466 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 1
  %467 = load ptr, ptr %466, align 8
  %468 = insertvalue { ptr, ptr, ptr, i32 } %465, ptr %467, 1
  %469 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 2
  %470 = load ptr, ptr %469, align 8
  %471 = insertvalue { ptr, ptr, ptr, i32 } %468, ptr %470, 2
  %472 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 3
  %473 = load i32, ptr %472, align 4
  %474 = insertvalue { ptr, ptr, ptr, i32 } %471, i32 %473, 3
  %475 = getelementptr [2 x ptr], ptr %15, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %475, align 8
  %476 = getelementptr [2 x ptr], ptr %15, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %476, align 8
  %477 = call ptr @llvm.invariant.start.p0(i64 4, ptr %15)
  %478 = call ptr @llvm.invariant.start.p0(i64 688, ptr %464)
  %479 = getelementptr ptr, ptr %464, i32 %473
  %480 = getelementptr ptr, ptr %479, i32 18
  %481 = load ptr, ptr %480, align 8
  %482 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 0
  store ptr %455, ptr %482, align 8
  %483 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 1
  store ptr %459, ptr %483, align 8
  %484 = call ptr @behavior_wrapper(ptr %481, { ptr, ptr, ptr, i32 } %474, ptr %16)
  call void %484({ ptr, ptr, ptr, i32 } %474, { ptr, ptr, ptr, i32 } %474, ptr %15, { ptr, i160 } %458, { ptr, i160 } %462)
  store ptr @i32_typ, ptr %18, align 8
  %.reload67 = load i32, ptr %.reg2mem65, align 4
  store i32 %.reload67, ptr %17, align 4
  %485 = load ptr, ptr %18, align 8
  %486 = insertvalue { ptr, i160 } undef, ptr %485, 0
  %487 = load i160, ptr %17, align 4
  %488 = insertvalue { ptr, i160 } %486, i160 %487, 1
  %489 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %490 = load ptr, ptr %489, align 8
  %491 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %490, 0
  %492 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %493 = load ptr, ptr %492, align 8
  %494 = insertvalue { ptr, ptr, ptr, i32 } %491, ptr %493, 1
  %495 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %496 = load ptr, ptr %495, align 8
  %497 = insertvalue { ptr, ptr, ptr, i32 } %494, ptr %496, 2
  %498 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %499 = load i32, ptr %498, align 4
  %500 = insertvalue { ptr, ptr, ptr, i32 } %497, i32 %499, 3
  %501 = getelementptr [2 x ptr], ptr %19, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %501, align 8
  %502 = getelementptr [2 x ptr], ptr %19, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %502, align 8
  %503 = call ptr @llvm.invariant.start.p0(i64 4, ptr %19)
  %504 = call ptr @llvm.invariant.start.p0(i64 600, ptr %490)
  %505 = getelementptr ptr, ptr %490, i32 %499
  %506 = getelementptr ptr, ptr %505, i32 16
  %507 = load ptr, ptr %506, align 8
  %508 = getelementptr { ptr, ptr }, ptr %20, i32 0, i32 0
  store ptr @i32_typ, ptr %508, align 8
  %509 = getelementptr { ptr, ptr }, ptr %20, i32 0, i32 1
  store ptr %485, ptr %509, align 8
  %510 = call ptr @behavior_wrapper(ptr %507, { ptr, ptr, ptr, i32 } %500, ptr %20)
  %.reload84 = load i32, ptr %.reg2mem77, align 4
  call void %510({ ptr, ptr, ptr, i32 } %500, { ptr, ptr, ptr, i32 } %500, ptr %19, i32 %.reload84, { ptr, i160 } %488)
  store ptr @i32_typ, ptr %22, align 8
  %.reload66 = load i32, ptr %.reg2mem65, align 4
  store i32 %.reload66, ptr %21, align 4
  %511 = load ptr, ptr %22, align 8
  %512 = insertvalue { ptr, i160 } undef, ptr %511, 0
  %513 = load i160, ptr %21, align 4
  %514 = insertvalue { ptr, i160 } %512, i160 %513, 1
  store ptr @bool_typ, ptr %24, align 8
  store i1 true, ptr %23, align 1
  %515 = load ptr, ptr %24, align 8
  %516 = insertvalue { ptr, i160 } undef, ptr %515, 0
  %517 = load i160, ptr %23, align 4
  %518 = insertvalue { ptr, i160 } %516, i160 %517, 1
  %519 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 0
  %520 = load ptr, ptr %519, align 8
  %521 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %520, 0
  %522 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 1
  %523 = load ptr, ptr %522, align 8
  %524 = insertvalue { ptr, ptr, ptr, i32 } %521, ptr %523, 1
  %525 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 2
  %526 = load ptr, ptr %525, align 8
  %527 = insertvalue { ptr, ptr, ptr, i32 } %524, ptr %526, 2
  %528 = getelementptr { ptr, ptr, ptr, i32 }, ptr %379, i32 0, i32 3
  %529 = load i32, ptr %528, align 4
  %530 = insertvalue { ptr, ptr, ptr, i32 } %527, i32 %529, 3
  %531 = getelementptr [2 x ptr], ptr %25, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %531, align 8
  %532 = getelementptr [2 x ptr], ptr %25, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %532, align 8
  %533 = call ptr @llvm.invariant.start.p0(i64 4, ptr %25)
  %534 = call ptr @llvm.invariant.start.p0(i64 688, ptr %520)
  %535 = getelementptr ptr, ptr %520, i32 %529
  %536 = getelementptr ptr, ptr %535, i32 18
  %537 = load ptr, ptr %536, align 8
  %538 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %511, ptr %538, align 8
  %539 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %515, ptr %539, align 8
  %540 = call ptr @behavior_wrapper(ptr %537, { ptr, ptr, ptr, i32 } %530, ptr %26)
  call void %540({ ptr, ptr, ptr, i32 } %530, { ptr, ptr, ptr, i32 } %530, ptr %25, { ptr, i160 } %514, { ptr, i160 } %518)
  %541 = sext i32 %454 to i64
  %.reload90 = load i64, ptr %.reg2mem86, align 4
  %542 = add i64 %.reload90, %541
  store i64 %542, ptr %.reg2mem63, align 4
  %.reload83 = load i32, ptr %.reg2mem77, align 4
  %543 = add i32 %.reload83, 1
  store i32 %543, ptr %.reg2mem61, align 4
  store [0 x i8] %453, ptr %27, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %28, align 4
  %544 = load ptr, ptr %28, align 8
  store ptr %544, ptr %10, align 8
  %545 = load i1, ptr %27, align 1
  store i1 %545, ptr %9, align 1
  %.reload62 = load i32, ptr %.reg2mem61, align 4
  %.reload64 = load i64, ptr %.reg2mem63, align 4
  store i32 %.reload62, ptr %.reg2mem125, align 4
  store i64 %.reload64, ptr %.reg2mem127, align 4
  br label %547

546:                                              ; preds = %398
  %.reload82 = load i32, ptr %.reg2mem77, align 4
  %.reload89 = load i64, ptr %.reg2mem86, align 4
  store i32 %.reload82, ptr %.reg2mem125, align 4
  store i64 %.reload89, ptr %.reg2mem127, align 4
  br label %547

547:                                              ; preds = %546, %452
  %.reload128 = load i64, ptr %.reg2mem127, align 4
  %.reload126 = load i32, ptr %.reg2mem125, align 4
  store i64 %.reload128, ptr %.reg2mem59, align 4
  store i32 %.reload126, ptr %.reg2mem57, align 4
  br label %548

548:                                              ; preds = %547
  %.reload75 = load i32, ptr %.reg2mem74, align 4
  %549 = add i32 %.reload75, 1
  store i32 %549, ptr %.reg2mem55, align 4
  %.reload56 = load i32, ptr %.reg2mem55, align 4
  %.reload58 = load i32, ptr %.reg2mem57, align 4
  %.reload60 = load i64, ptr %.reg2mem59, align 4
  store i32 %.reload56, ptr %.reg2mem119, align 4
  store i32 %.reload58, ptr %.reg2mem121, align 4
  store i64 %.reload60, ptr %.reg2mem123, align 4
  br label %551

550:                                              ; preds = %394
  store i32 poison, ptr %.reg2mem119, align 4
  store i32 poison, ptr %.reg2mem121, align 4
  store i64 poison, ptr %.reg2mem123, align 4
  br label %551

551:                                              ; preds = %550, %548
  %.reload124 = load i64, ptr %.reg2mem123, align 4
  %.reload122 = load i32, ptr %.reg2mem121, align 4
  %.reload120 = load i32, ptr %.reg2mem119, align 4
  store i64 %.reload124, ptr %.reg2mem53, align 4
  store i32 %.reload122, ptr %.reg2mem51, align 4
  store i32 %.reload120, ptr %.reg2mem49, align 4
  br label %552

552:                                              ; preds = %551
  %.reload50 = load i32, ptr %.reg2mem49, align 4
  %.reload52 = load i32, ptr %.reg2mem51, align 4
  %.reload54 = load i64, ptr %.reg2mem53, align 4
  %.reload72 = load i1, ptr %.reg2mem71, align 1
  %.reload81 = load i32, ptr %.reg2mem77, align 4
  %.reload88 = load i64, ptr %.reg2mem86, align 4
  store i32 %.reload50, ptr %.reg2mem113, align 4
  store i32 %.reload52, ptr %.reg2mem115, align 4
  store i64 %.reload54, ptr %.reg2mem117, align 4
  br i1 %.reload72, label %553, label %554

553:                                              ; preds = %552
  %.reload118 = load i64, ptr %.reg2mem117, align 4
  %.reload116 = load i32, ptr %.reg2mem115, align 4
  %.reload114 = load i32, ptr %.reg2mem113, align 4
  store i64 %.reload118, ptr %.reg2mem47, align 4
  store i32 %.reload116, ptr %.reg2mem45, align 4
  store i32 %.reload114, ptr %.reg2mem43, align 4
  %.reload44 = load i32, ptr %.reg2mem43, align 4
  %.reload46 = load i32, ptr %.reg2mem45, align 4
  %.reload48 = load i64, ptr %.reg2mem47, align 4
  store i32 %.reload44, ptr %.reg2mem129, align 4
  store i32 %.reload46, ptr %.reg2mem131, align 4
  store i64 %.reload48, ptr %.reg2mem133, align 4
  br label %394

554:                                              ; preds = %552
  %.reload80 = load i32, ptr %.reg2mem77, align 4
  %555 = icmp slt i32 %.reload80, %0
  %.reload79 = load i32, ptr %.reg2mem77, align 4
  %556 = select i1 %555, i32 %.reload79, i32 %0
  store i32 %556, ptr %.reg2mem40, align 4
  br i1 %555, label %557, label %._crit_edge

._crit_edge:                                      ; preds = %554
  br label %678

557:                                              ; preds = %554
  %558 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 30))
  store ptr %558, ptr %29, align 8
  %559 = getelementptr { ptr }, ptr %29, i32 0, i32 0
  %560 = getelementptr { ptr }, ptr %30, i32 0, i32 0
  %561 = load ptr, ptr %559, align 8
  store ptr %561, ptr %560, align 8
  %562 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %563 = load ptr, ptr %30, align 8
  %564 = load [29 x i8], ptr @wjbxp_Warning_Could_only_generate_, align 1
  store [29 x i8] %564, ptr %563, align 1
  store ptr @String, ptr %31, align 8
  %565 = load ptr, ptr %31, align 8
  %566 = getelementptr ptr, ptr %565, i32 6
  %567 = load ptr, ptr %566, align 8
  %568 = call { i64, i64 } @size_wrapper(ptr %567, ptr %31)
  %569 = extractvalue { i64, i64 } %568, 0
  %570 = call ptr @bump_malloc(i64 %569)
  %571 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %572 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr @String, ptr %32, align 8
  store ptr %570, ptr %571, align 8
  store i32 9, ptr %572, align 4
  %573 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %574 = getelementptr { ptr }, ptr %30, i32 0, i32 0
  %575 = load ptr, ptr %574, align 8
  %576 = insertvalue { ptr } undef, ptr %575, 0
  %577 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %578 = load ptr, ptr %577, align 8
  %579 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %578, 0
  %580 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %581 = load ptr, ptr %580, align 8
  %582 = insertvalue { ptr, ptr, ptr, i32 } %579, ptr %581, 1
  %583 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %584 = load ptr, ptr %583, align 8
  %585 = insertvalue { ptr, ptr, ptr, i32 } %582, ptr %584, 2
  %586 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %587 = load i32, ptr %586, align 4
  %588 = insertvalue { ptr, ptr, ptr, i32 } %585, i32 %587, 3
  %589 = getelementptr [3 x ptr], ptr %33, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %589, align 8
  %590 = getelementptr [3 x ptr], ptr %33, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %590, align 8
  %591 = getelementptr [3 x ptr], ptr %33, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %591, align 8
  %592 = call ptr @llvm.invariant.start.p0(i64 9, ptr %33)
  %593 = call ptr @llvm.invariant.start.p0(i64 280, ptr %578)
  %594 = getelementptr ptr, ptr %578, i32 %587
  %595 = getelementptr ptr, ptr %594, i32 4
  %596 = load ptr, ptr %595, align 8
  %597 = getelementptr { ptr, ptr, ptr }, ptr %34, i32 0, i32 0
  store ptr @buffer_typ, ptr %597, align 8
  %598 = getelementptr { ptr, ptr, ptr }, ptr %34, i32 0, i32 1
  store ptr @i32_typ, ptr %598, align 8
  %599 = getelementptr { ptr, ptr, ptr }, ptr %34, i32 0, i32 2
  store ptr @i32_typ, ptr %599, align 8
  %600 = call ptr @behavior_wrapper(ptr %596, { ptr, ptr, ptr, i32 } %588, ptr %34)
  call void %600({ ptr, ptr, ptr, i32 } %588, { ptr, ptr, ptr, i32 } %588, ptr %33, { ptr } %576, i32 29, i32 30)
  %601 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %602 = load ptr, ptr %601, align 8
  %603 = insertvalue { ptr, i160 } undef, ptr %602, 0
  %604 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %605 = load i160, ptr %604, align 4
  %606 = insertvalue { ptr, i160 } %603, i160 %605, 1
  %607 = getelementptr [1 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_String, ptr %607, align 8
  %608 = call ptr @llvm.invariant.start.p0(i64 1, ptr %35)
  %609 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %610 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %611 = getelementptr { ptr }, ptr %36, i32 0, i32 0
  store ptr %602, ptr %611, align 8
  %612 = call ptr @class_behavior_wrapper(ptr %610, ptr %36)
  call void %612(ptr %35, { ptr, i160 } %606)
  %.reload78 = load i32, ptr %.reg2mem77, align 4
  store i32 %.reload78, ptr %37, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %38, align 4
  %613 = load ptr, ptr %38, align 8
  %614 = insertvalue { ptr, i160 } undef, ptr %613, 0
  %615 = load i160, ptr %37, align 4
  %616 = insertvalue { ptr, i160 } %614, i160 %615, 1
  %617 = getelementptr [1 x ptr], ptr %39, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %617, align 8
  %618 = call ptr @llvm.invariant.start.p0(i64 1, ptr %39)
  %619 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %620 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %621 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  store ptr %613, ptr %621, align 8
  %622 = call ptr @class_behavior_wrapper(ptr %620, ptr %40)
  call void %622(ptr %39, { ptr, i160 } %616)
  %623 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 34))
  store ptr %623, ptr %41, align 8
  %624 = getelementptr { ptr }, ptr %41, i32 0, i32 0
  %625 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  %626 = load ptr, ptr %624, align 8
  store ptr %626, ptr %625, align 8
  %627 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  %628 = load ptr, ptr %42, align 8
  %629 = load [33 x i8], ptr @feykl__unique_keys_for_random_hit_test, align 1
  store [33 x i8] %629, ptr %628, align 1
  store ptr @String, ptr %43, align 8
  %630 = load ptr, ptr %43, align 8
  %631 = getelementptr ptr, ptr %630, i32 6
  %632 = load ptr, ptr %631, align 8
  %633 = call { i64, i64 } @size_wrapper(ptr %632, ptr %43)
  %634 = extractvalue { i64, i64 } %633, 0
  %635 = call ptr @bump_malloc(i64 %634)
  %636 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %637 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  store ptr @String, ptr %44, align 8
  store ptr %635, ptr %636, align 8
  store i32 9, ptr %637, align 4
  %638 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %639 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  %640 = load ptr, ptr %639, align 8
  %641 = insertvalue { ptr } undef, ptr %640, 0
  %642 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %643 = load ptr, ptr %642, align 8
  %644 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %643, 0
  %645 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %646 = load ptr, ptr %645, align 8
  %647 = insertvalue { ptr, ptr, ptr, i32 } %644, ptr %646, 1
  %648 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %649 = load ptr, ptr %648, align 8
  %650 = insertvalue { ptr, ptr, ptr, i32 } %647, ptr %649, 2
  %651 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %652 = load i32, ptr %651, align 4
  %653 = insertvalue { ptr, ptr, ptr, i32 } %650, i32 %652, 3
  %654 = getelementptr [3 x ptr], ptr %45, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %654, align 8
  %655 = getelementptr [3 x ptr], ptr %45, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %655, align 8
  %656 = getelementptr [3 x ptr], ptr %45, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %656, align 8
  %657 = call ptr @llvm.invariant.start.p0(i64 9, ptr %45)
  %658 = call ptr @llvm.invariant.start.p0(i64 280, ptr %643)
  %659 = getelementptr ptr, ptr %643, i32 %652
  %660 = getelementptr ptr, ptr %659, i32 4
  %661 = load ptr, ptr %660, align 8
  %662 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 0
  store ptr @buffer_typ, ptr %662, align 8
  %663 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 1
  store ptr @i32_typ, ptr %663, align 8
  %664 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 2
  store ptr @i32_typ, ptr %664, align 8
  %665 = call ptr @behavior_wrapper(ptr %661, { ptr, ptr, ptr, i32 } %653, ptr %46)
  call void %665({ ptr, ptr, ptr, i32 } %653, { ptr, ptr, ptr, i32 } %653, ptr %45, { ptr } %641, i32 33, i32 34)
  %666 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 0
  %667 = load ptr, ptr %666, align 8
  %668 = insertvalue { ptr, i160 } undef, ptr %667, 0
  %669 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 1
  %670 = load i160, ptr %669, align 4
  %671 = insertvalue { ptr, i160 } %668, i160 %670, 1
  %672 = getelementptr [1 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_String, ptr %672, align 8
  %673 = call ptr @llvm.invariant.start.p0(i64 1, ptr %47)
  %674 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %675 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %676 = getelementptr { ptr }, ptr %48, i32 0, i32 0
  store ptr %667, ptr %676, align 8
  %677 = call ptr @class_behavior_wrapper(ptr %675, ptr %48)
  call void %677(ptr %47, { ptr, i160 } %671)
  br label %678

678:                                              ; preds = %._crit_edge, %557
  %679 = call i64 @clock()
  store i64 %679, ptr %.reg2mem38, align 4
  store i32 0, ptr %.reg2mem107, align 4
  store i1 true, ptr %.reg2mem109, align 1
  store i64 0, ptr %.reg2mem111, align 4
  br label %680

680:                                              ; preds = %822, %678
  %.reload112 = load i64, ptr %.reg2mem111, align 4
  %.reload110 = load i1, ptr %.reg2mem109, align 1
  %.reload108 = load i32, ptr %.reg2mem107, align 4
  store i64 %.reload112, ptr %.reg2mem33, align 4
  store i1 %.reload110, ptr %.reg2mem29, align 1
  store i32 %.reload108, ptr %.reg2mem25, align 4
  %.reload28 = load i32, ptr %.reg2mem25, align 4
  %.reload42 = load i32, ptr %.reg2mem40, align 4
  %681 = icmp slt i32 %.reload28, %.reload42
  store i1 %681, ptr %.reg2mem22, align 1
  %.reload24 = load i1, ptr %.reg2mem22, align 1
  br i1 %.reload24, label %682, label %819

682:                                              ; preds = %680
  %683 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %684 = load ptr, ptr %683, align 8
  %685 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %684, 0
  %686 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %687 = load ptr, ptr %686, align 8
  %688 = insertvalue { ptr, ptr, ptr, i32 } %685, ptr %687, 1
  %689 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %690 = load ptr, ptr %689, align 8
  %691 = insertvalue { ptr, ptr, ptr, i32 } %688, ptr %690, 2
  %692 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %693 = load i32, ptr %692, align 4
  %694 = insertvalue { ptr, ptr, ptr, i32 } %691, i32 %693, 3
  %695 = getelementptr [1 x ptr], ptr %49, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %695, align 8
  %696 = call ptr @llvm.invariant.start.p0(i64 1, ptr %49)
  %697 = call ptr @llvm.invariant.start.p0(i64 600, ptr %684)
  %698 = getelementptr ptr, ptr %684, i32 %693
  %699 = getelementptr ptr, ptr %698, i32 15
  %700 = load ptr, ptr %699, align 8
  %701 = getelementptr { ptr }, ptr %50, i32 0, i32 0
  store ptr @i32_typ, ptr %701, align 8
  %702 = call ptr @behavior_wrapper(ptr %700, { ptr, ptr, ptr, i32 } %694, ptr %50)
  %.reload27 = load i32, ptr %.reg2mem25, align 4
  %703 = call { ptr, i160 } %702({ ptr, ptr, ptr, i32 } %694, { ptr, ptr, ptr, i32 } %694, ptr %49, i32 %.reload27)
  store { ptr, i160 } %703, ptr %51, align 8
  %704 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 1
  %705 = load i32, ptr %704, align 4
  store i32 %705, ptr %.reg2mem19, align 4
  store ptr @i32_typ, ptr %53, align 8
  %.reload21 = load i32, ptr %.reg2mem19, align 4
  store i32 %.reload21, ptr %52, align 4
  %706 = load ptr, ptr %53, align 8
  %707 = insertvalue { ptr, i160 } undef, ptr %706, 0
  %708 = load i160, ptr %52, align 4
  %709 = insertvalue { ptr, i160 } %707, i160 %708, 1
  %710 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 0
  %711 = load ptr, ptr %710, align 8
  %712 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %711, 0
  %713 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 1
  %714 = load ptr, ptr %713, align 8
  %715 = insertvalue { ptr, ptr, ptr, i32 } %712, ptr %714, 1
  %716 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 2
  %717 = load ptr, ptr %716, align 8
  %718 = insertvalue { ptr, ptr, ptr, i32 } %715, ptr %717, 2
  %719 = getelementptr { ptr, ptr, ptr, i32 }, ptr %173, i32 0, i32 3
  %720 = load i32, ptr %719, align 4
  %721 = insertvalue { ptr, ptr, ptr, i32 } %718, i32 %720, 3
  %722 = getelementptr [1 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %722, align 8
  %723 = call ptr @llvm.invariant.start.p0(i64 1, ptr %54)
  %724 = call ptr @llvm.invariant.start.p0(i64 688, ptr %711)
  %725 = getelementptr ptr, ptr %711, i32 %720
  %726 = getelementptr ptr, ptr %725, i32 20
  %727 = load ptr, ptr %726, align 8
  %728 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  store ptr %706, ptr %728, align 8
  %729 = call ptr @behavior_wrapper(ptr %727, { ptr, ptr, ptr, i32 } %721, ptr %55)
  %730 = call { ptr, i160 } %729({ ptr, ptr, ptr, i32 } %721, { ptr, ptr, ptr, i32 } %721, ptr %54, { ptr, i160 } %709)
  store { ptr, i160 } %730, ptr %56, align 8
  %731 = getelementptr { ptr, i32 }, ptr %56, i32 0, i32 0
  %732 = load ptr, ptr %731, align 8
  store ptr %732, ptr %58, align 8
  %733 = getelementptr { ptr, i32 }, ptr %56, i32 0, i32 1
  %734 = load i32, ptr %733, align 4
  store i32 %734, ptr %57, align 4
  %735 = load ptr, ptr %58, align 8
  %736 = ptrtoint ptr %735 to i64
  %737 = icmp eq i64 %736, ptrtoint (ptr @nil_typ to i64)
  %738 = icmp eq i64 %736, 0
  %739 = or i1 %737, %738
  %740 = icmp eq i1 %739, false
  %.reload32 = load i1, ptr %.reg2mem29, align 1
  %741 = select i1 %740, i1 %.reload32, i1 false
  store i1 %741, ptr %.reg2mem17, align 1
  br i1 %740, label %742, label %748

742:                                              ; preds = %682
  %743 = load i32, ptr %57, align 4
  %744 = sext i32 %743 to i64
  %.reload37 = load i64, ptr %.reg2mem33, align 4
  %745 = add i64 %.reload37, %744
  store i64 %745, ptr %.reg2mem15, align 4
  store i32 %743, ptr %59, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %60, align 4
  %746 = load ptr, ptr %60, align 8
  store ptr %746, ptr %58, align 8
  %747 = load i32, ptr %59, align 4
  store i32 %747, ptr %57, align 4
  %.reload16 = load i64, ptr %.reg2mem15, align 4
  store i64 %.reload16, ptr %.reg2mem105, align 4
  br label %816

748:                                              ; preds = %682
  %749 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 52))
  store ptr %749, ptr %61, align 8
  %750 = getelementptr { ptr }, ptr %61, i32 0, i32 0
  %751 = getelementptr { ptr }, ptr %62, i32 0, i32 0
  %752 = load ptr, ptr %750, align 8
  store ptr %752, ptr %751, align 8
  %753 = call ptr @llvm.invariant.start.p0(i64 16, ptr %62)
  %754 = load ptr, ptr %62, align 8
  %755 = load [51 x i8], ptr @ercqh_Error_Nil_returned_during_random_hit_test_for_key_, align 1
  store [51 x i8] %755, ptr %754, align 1
  store ptr @String, ptr %63, align 8
  %756 = load ptr, ptr %63, align 8
  %757 = getelementptr ptr, ptr %756, i32 6
  %758 = load ptr, ptr %757, align 8
  %759 = call { i64, i64 } @size_wrapper(ptr %758, ptr %63)
  %760 = extractvalue { i64, i64 } %759, 0
  %761 = call ptr @bump_malloc(i64 %760)
  %762 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %763 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  store ptr @String, ptr %64, align 8
  store ptr %761, ptr %762, align 8
  store i32 9, ptr %763, align 4
  %764 = call ptr @llvm.invariant.start.p0(i64 16, ptr %64)
  %765 = getelementptr { ptr }, ptr %62, i32 0, i32 0
  %766 = load ptr, ptr %765, align 8
  %767 = insertvalue { ptr } undef, ptr %766, 0
  %768 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %769 = load ptr, ptr %768, align 8
  %770 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %769, 0
  %771 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %772 = load ptr, ptr %771, align 8
  %773 = insertvalue { ptr, ptr, ptr, i32 } %770, ptr %772, 1
  %774 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %775 = load ptr, ptr %774, align 8
  %776 = insertvalue { ptr, ptr, ptr, i32 } %773, ptr %775, 2
  %777 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %778 = load i32, ptr %777, align 4
  %779 = insertvalue { ptr, ptr, ptr, i32 } %776, i32 %778, 3
  %780 = getelementptr [3 x ptr], ptr %65, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %780, align 8
  %781 = getelementptr [3 x ptr], ptr %65, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %781, align 8
  %782 = getelementptr [3 x ptr], ptr %65, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %782, align 8
  %783 = call ptr @llvm.invariant.start.p0(i64 9, ptr %65)
  %784 = call ptr @llvm.invariant.start.p0(i64 280, ptr %769)
  %785 = getelementptr ptr, ptr %769, i32 %778
  %786 = getelementptr ptr, ptr %785, i32 4
  %787 = load ptr, ptr %786, align 8
  %788 = getelementptr { ptr, ptr, ptr }, ptr %66, i32 0, i32 0
  store ptr @buffer_typ, ptr %788, align 8
  %789 = getelementptr { ptr, ptr, ptr }, ptr %66, i32 0, i32 1
  store ptr @i32_typ, ptr %789, align 8
  %790 = getelementptr { ptr, ptr, ptr }, ptr %66, i32 0, i32 2
  store ptr @i32_typ, ptr %790, align 8
  %791 = call ptr @behavior_wrapper(ptr %787, { ptr, ptr, ptr, i32 } %779, ptr %66)
  call void %791({ ptr, ptr, ptr, i32 } %779, { ptr, ptr, ptr, i32 } %779, ptr %65, { ptr } %767, i32 51, i32 52)
  %792 = getelementptr { ptr, i160 }, ptr %64, i32 0, i32 0
  %793 = load ptr, ptr %792, align 8
  %794 = insertvalue { ptr, i160 } undef, ptr %793, 0
  %795 = getelementptr { ptr, i160 }, ptr %64, i32 0, i32 1
  %796 = load i160, ptr %795, align 4
  %797 = insertvalue { ptr, i160 } %794, i160 %796, 1
  %798 = getelementptr [1 x ptr], ptr %67, i32 0, i32 0
  store ptr @_parameterization_String, ptr %798, align 8
  %799 = call ptr @llvm.invariant.start.p0(i64 1, ptr %67)
  %800 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %801 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %802 = getelementptr { ptr }, ptr %68, i32 0, i32 0
  store ptr %793, ptr %802, align 8
  %803 = call ptr @class_behavior_wrapper(ptr %801, ptr %68)
  call void %803(ptr %67, { ptr, i160 } %797)
  %.reload20 = load i32, ptr %.reg2mem19, align 4
  store i32 %.reload20, ptr %69, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %70, align 4
  %804 = load ptr, ptr %70, align 8
  %805 = insertvalue { ptr, i160 } undef, ptr %804, 0
  %806 = load i160, ptr %69, align 4
  %807 = insertvalue { ptr, i160 } %805, i160 %806, 1
  %808 = getelementptr [1 x ptr], ptr %71, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %808, align 8
  %809 = call ptr @llvm.invariant.start.p0(i64 1, ptr %71)
  %810 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %811 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %812 = getelementptr { ptr }, ptr %72, i32 0, i32 0
  store ptr %804, ptr %812, align 8
  %813 = call ptr @class_behavior_wrapper(ptr %811, ptr %72)
  call void %813(ptr %71, { ptr, i160 } %807)
  %814 = load ptr, ptr %58, align 8
  store ptr %814, ptr %58, align 8
  %815 = load i32, ptr %57, align 4
  store i32 %815, ptr %57, align 4
  %.reload36 = load i64, ptr %.reg2mem33, align 4
  store i64 %.reload36, ptr %.reg2mem105, align 4
  br label %816

816:                                              ; preds = %748, %742
  %.reload106 = load i64, ptr %.reg2mem105, align 4
  store i64 %.reload106, ptr %.reg2mem13, align 4
  br label %817

817:                                              ; preds = %816
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  %818 = add i32 %.reload26, 1
  store i32 %818, ptr %.reg2mem11, align 4
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %.reload14 = load i64, ptr %.reg2mem13, align 4
  %.reload18 = load i1, ptr %.reg2mem17, align 1
  store i32 %.reload12, ptr %.reg2mem99, align 4
  store i1 %.reload18, ptr %.reg2mem101, align 1
  store i64 %.reload14, ptr %.reg2mem103, align 4
  br label %820

819:                                              ; preds = %680
  store i32 poison, ptr %.reg2mem99, align 4
  store i1 poison, ptr %.reg2mem101, align 1
  store i64 poison, ptr %.reg2mem103, align 4
  br label %820

820:                                              ; preds = %819, %817
  %.reload104 = load i64, ptr %.reg2mem103, align 4
  %.reload102 = load i1, ptr %.reg2mem101, align 1
  %.reload100 = load i32, ptr %.reg2mem99, align 4
  store i64 %.reload104, ptr %.reg2mem9, align 4
  store i1 %.reload102, ptr %.reg2mem7, align 1
  store i32 %.reload100, ptr %.reg2mem5, align 4
  br label %821

821:                                              ; preds = %820
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  %.reload10 = load i64, ptr %.reg2mem9, align 4
  %.reload23 = load i1, ptr %.reg2mem22, align 1
  %.reload31 = load i1, ptr %.reg2mem29, align 1
  %.reload35 = load i64, ptr %.reg2mem33, align 4
  store i32 %.reload6, ptr %.reg2mem93, align 4
  store i1 %.reload8, ptr %.reg2mem95, align 1
  store i64 %.reload10, ptr %.reg2mem97, align 4
  br i1 %.reload23, label %822, label %823

822:                                              ; preds = %821
  %.reload98 = load i64, ptr %.reg2mem97, align 4
  %.reload96 = load i1, ptr %.reg2mem95, align 1
  %.reload94 = load i32, ptr %.reg2mem93, align 4
  store i64 %.reload98, ptr %.reg2mem3, align 4
  store i1 %.reload96, ptr %.reg2mem1, align 1
  store i32 %.reload94, ptr %.reg2mem, align 4
  %.reload = load i32, ptr %.reg2mem, align 4
  %.reload2 = load i1, ptr %.reg2mem1, align 1
  %.reload4 = load i64, ptr %.reg2mem3, align 4
  store i32 %.reload, ptr %.reg2mem107, align 4
  store i1 %.reload2, ptr %.reg2mem109, align 1
  store i64 %.reload4, ptr %.reg2mem111, align 4
  br label %680

823:                                              ; preds = %821
  %824 = call i64 @clock()
  %.reload34 = load i64, ptr %.reg2mem33, align 4
  %.reload87 = load i64, ptr %.reg2mem86, align 4
  %825 = icmp ne i64 %.reload34, %.reload87
  %.reload30 = load i1, ptr %.reg2mem29, align 1
  %826 = select i1 %825, i1 false, i1 %.reload30
  %827 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 15))
  store ptr %827, ptr %73, align 8
  %828 = getelementptr { ptr }, ptr %73, i32 0, i32 0
  %829 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  %830 = load ptr, ptr %828, align 8
  store ptr %830, ptr %829, align 8
  %831 = call ptr @llvm.invariant.start.p0(i64 16, ptr %74)
  %832 = load ptr, ptr %74, align 8
  %833 = load [14 x i8], ptr @uepwp_Get_Random_Hit, align 1
  store [14 x i8] %833, ptr %832, align 1
  store ptr @String, ptr %75, align 8
  %834 = load ptr, ptr %75, align 8
  %835 = getelementptr ptr, ptr %834, i32 6
  %836 = load ptr, ptr %835, align 8
  %837 = call { i64, i64 } @size_wrapper(ptr %836, ptr %75)
  %838 = extractvalue { i64, i64 } %837, 0
  %839 = call ptr @bump_malloc(i64 %838)
  %840 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %841 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  store ptr @String, ptr %76, align 8
  store ptr %839, ptr %840, align 8
  store i32 9, ptr %841, align 4
  %842 = call ptr @llvm.invariant.start.p0(i64 16, ptr %76)
  %843 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  %844 = load ptr, ptr %843, align 8
  %845 = insertvalue { ptr } undef, ptr %844, 0
  %846 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %847 = load ptr, ptr %846, align 8
  %848 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %847, 0
  %849 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %850 = load ptr, ptr %849, align 8
  %851 = insertvalue { ptr, ptr, ptr, i32 } %848, ptr %850, 1
  %852 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %853 = load ptr, ptr %852, align 8
  %854 = insertvalue { ptr, ptr, ptr, i32 } %851, ptr %853, 2
  %855 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %856 = load i32, ptr %855, align 4
  %857 = insertvalue { ptr, ptr, ptr, i32 } %854, i32 %856, 3
  %858 = getelementptr [3 x ptr], ptr %77, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %858, align 8
  %859 = getelementptr [3 x ptr], ptr %77, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %859, align 8
  %860 = getelementptr [3 x ptr], ptr %77, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %860, align 8
  %861 = call ptr @llvm.invariant.start.p0(i64 9, ptr %77)
  %862 = call ptr @llvm.invariant.start.p0(i64 280, ptr %847)
  %863 = getelementptr ptr, ptr %847, i32 %856
  %864 = getelementptr ptr, ptr %863, i32 4
  %865 = load ptr, ptr %864, align 8
  %866 = getelementptr { ptr, ptr, ptr }, ptr %78, i32 0, i32 0
  store ptr @buffer_typ, ptr %866, align 8
  %867 = getelementptr { ptr, ptr, ptr }, ptr %78, i32 0, i32 1
  store ptr @i32_typ, ptr %867, align 8
  %868 = getelementptr { ptr, ptr, ptr }, ptr %78, i32 0, i32 2
  store ptr @i32_typ, ptr %868, align 8
  %869 = call ptr @behavior_wrapper(ptr %865, { ptr, ptr, ptr, i32 } %857, ptr %78)
  call void %869({ ptr, ptr, ptr, i32 } %857, { ptr, ptr, ptr, i32 } %857, ptr %77, { ptr } %845, i32 14, i32 15)
  %.reload39 = load i64, ptr %.reg2mem38, align 4
  %870 = sub i64 %824, %.reload39
  %871 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %872 = load ptr, ptr %871, align 8
  %873 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %872, 0
  %874 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %875 = load ptr, ptr %874, align 8
  %876 = insertvalue { ptr, ptr, ptr, i32 } %873, ptr %875, 1
  %877 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %878 = load ptr, ptr %877, align 8
  %879 = insertvalue { ptr, ptr, ptr, i32 } %876, ptr %878, 2
  %880 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %881 = load i32, ptr %880, align 4
  %882 = insertvalue { ptr, ptr, ptr, i32 } %879, i32 %881, 3
  %.reload41 = load i32, ptr %.reg2mem40, align 4
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %882, i32 %.reload41, i64 %870)
  %883 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 19))
  store ptr %883, ptr %79, align 8
  %884 = getelementptr { ptr }, ptr %79, i32 0, i32 0
  %885 = getelementptr { ptr }, ptr %80, i32 0, i32 0
  %886 = load ptr, ptr %884, align 8
  store ptr %886, ptr %885, align 8
  %887 = call ptr @llvm.invariant.start.p0(i64 16, ptr %80)
  %888 = load ptr, ptr %80, align 8
  %889 = load [18 x i8], ptr @jxhac_____Verification_, align 1
  store [18 x i8] %889, ptr %888, align 1
  store ptr @String, ptr %81, align 8
  %890 = load ptr, ptr %81, align 8
  %891 = getelementptr ptr, ptr %890, i32 6
  %892 = load ptr, ptr %891, align 8
  %893 = call { i64, i64 } @size_wrapper(ptr %892, ptr %81)
  %894 = extractvalue { i64, i64 } %893, 0
  %895 = call ptr @bump_malloc(i64 %894)
  %896 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %897 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  store ptr @String, ptr %82, align 8
  store ptr %895, ptr %896, align 8
  store i32 9, ptr %897, align 4
  %898 = call ptr @llvm.invariant.start.p0(i64 16, ptr %82)
  %899 = getelementptr { ptr }, ptr %80, i32 0, i32 0
  %900 = load ptr, ptr %899, align 8
  %901 = insertvalue { ptr } undef, ptr %900, 0
  %902 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %903 = load ptr, ptr %902, align 8
  %904 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %903, 0
  %905 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %906 = load ptr, ptr %905, align 8
  %907 = insertvalue { ptr, ptr, ptr, i32 } %904, ptr %906, 1
  %908 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %909 = load ptr, ptr %908, align 8
  %910 = insertvalue { ptr, ptr, ptr, i32 } %907, ptr %909, 2
  %911 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %912 = load i32, ptr %911, align 4
  %913 = insertvalue { ptr, ptr, ptr, i32 } %910, i32 %912, 3
  %914 = getelementptr [3 x ptr], ptr %83, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %914, align 8
  %915 = getelementptr [3 x ptr], ptr %83, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %915, align 8
  %916 = getelementptr [3 x ptr], ptr %83, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %916, align 8
  %917 = call ptr @llvm.invariant.start.p0(i64 9, ptr %83)
  %918 = call ptr @llvm.invariant.start.p0(i64 280, ptr %903)
  %919 = getelementptr ptr, ptr %903, i32 %912
  %920 = getelementptr ptr, ptr %919, i32 4
  %921 = load ptr, ptr %920, align 8
  %922 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 0
  store ptr @buffer_typ, ptr %922, align 8
  %923 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 1
  store ptr @i32_typ, ptr %923, align 8
  %924 = getelementptr { ptr, ptr, ptr }, ptr %84, i32 0, i32 2
  store ptr @i32_typ, ptr %924, align 8
  %925 = call ptr @behavior_wrapper(ptr %921, { ptr, ptr, ptr, i32 } %913, ptr %84)
  call void %925({ ptr, ptr, ptr, i32 } %913, { ptr, ptr, ptr, i32 } %913, ptr %83, { ptr } %901, i32 18, i32 19)
  %926 = getelementptr { ptr, i160 }, ptr %82, i32 0, i32 0
  %927 = load ptr, ptr %926, align 8
  %928 = insertvalue { ptr, i160 } undef, ptr %927, 0
  %929 = getelementptr { ptr, i160 }, ptr %82, i32 0, i32 1
  %930 = load i160, ptr %929, align 4
  %931 = insertvalue { ptr, i160 } %928, i160 %930, 1
  %932 = getelementptr [1 x ptr], ptr %85, i32 0, i32 0
  store ptr @_parameterization_String, ptr %932, align 8
  %933 = call ptr @llvm.invariant.start.p0(i64 1, ptr %85)
  %934 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %935 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %936 = getelementptr { ptr }, ptr %86, i32 0, i32 0
  store ptr %927, ptr %936, align 8
  %937 = call ptr @class_behavior_wrapper(ptr %935, ptr %86)
  call void %937(ptr %85, { ptr, i160 } %931)
  br i1 %826, label %938, label %994

938:                                              ; preds = %823
  %939 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %939, ptr %87, align 8
  %940 = getelementptr { ptr }, ptr %87, i32 0, i32 0
  %941 = getelementptr { ptr }, ptr %88, i32 0, i32 0
  %942 = load ptr, ptr %940, align 8
  store ptr %942, ptr %941, align 8
  %943 = call ptr @llvm.invariant.start.p0(i64 16, ptr %88)
  %944 = load ptr, ptr %88, align 8
  %945 = load [4 x i8], ptr @mqkrg_PASS, align 1
  store [4 x i8] %945, ptr %944, align 1
  store ptr @String, ptr %89, align 8
  %946 = load ptr, ptr %89, align 8
  %947 = getelementptr ptr, ptr %946, i32 6
  %948 = load ptr, ptr %947, align 8
  %949 = call { i64, i64 } @size_wrapper(ptr %948, ptr %89)
  %950 = extractvalue { i64, i64 } %949, 0
  %951 = call ptr @bump_malloc(i64 %950)
  %952 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %953 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  store ptr @String, ptr %90, align 8
  store ptr %951, ptr %952, align 8
  store i32 9, ptr %953, align 4
  %954 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  %955 = getelementptr { ptr }, ptr %88, i32 0, i32 0
  %956 = load ptr, ptr %955, align 8
  %957 = insertvalue { ptr } undef, ptr %956, 0
  %958 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %959 = load ptr, ptr %958, align 8
  %960 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %959, 0
  %961 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %962 = load ptr, ptr %961, align 8
  %963 = insertvalue { ptr, ptr, ptr, i32 } %960, ptr %962, 1
  %964 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %965 = load ptr, ptr %964, align 8
  %966 = insertvalue { ptr, ptr, ptr, i32 } %963, ptr %965, 2
  %967 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %968 = load i32, ptr %967, align 4
  %969 = insertvalue { ptr, ptr, ptr, i32 } %966, i32 %968, 3
  %970 = getelementptr [3 x ptr], ptr %91, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %970, align 8
  %971 = getelementptr [3 x ptr], ptr %91, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %971, align 8
  %972 = getelementptr [3 x ptr], ptr %91, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %972, align 8
  %973 = call ptr @llvm.invariant.start.p0(i64 9, ptr %91)
  %974 = call ptr @llvm.invariant.start.p0(i64 280, ptr %959)
  %975 = getelementptr ptr, ptr %959, i32 %968
  %976 = getelementptr ptr, ptr %975, i32 4
  %977 = load ptr, ptr %976, align 8
  %978 = getelementptr { ptr, ptr, ptr }, ptr %92, i32 0, i32 0
  store ptr @buffer_typ, ptr %978, align 8
  %979 = getelementptr { ptr, ptr, ptr }, ptr %92, i32 0, i32 1
  store ptr @i32_typ, ptr %979, align 8
  %980 = getelementptr { ptr, ptr, ptr }, ptr %92, i32 0, i32 2
  store ptr @i32_typ, ptr %980, align 8
  %981 = call ptr @behavior_wrapper(ptr %977, { ptr, ptr, ptr, i32 } %969, ptr %92)
  call void %981({ ptr, ptr, ptr, i32 } %969, { ptr, ptr, ptr, i32 } %969, ptr %91, { ptr } %957, i32 4, i32 5)
  %982 = getelementptr { ptr, i160 }, ptr %90, i32 0, i32 0
  %983 = load ptr, ptr %982, align 8
  %984 = insertvalue { ptr, i160 } undef, ptr %983, 0
  %985 = getelementptr { ptr, i160 }, ptr %90, i32 0, i32 1
  %986 = load i160, ptr %985, align 4
  %987 = insertvalue { ptr, i160 } %984, i160 %986, 1
  %988 = getelementptr [1 x ptr], ptr %93, i32 0, i32 0
  store ptr @_parameterization_String, ptr %988, align 8
  %989 = call ptr @llvm.invariant.start.p0(i64 1, ptr %93)
  %990 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %991 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %992 = getelementptr { ptr }, ptr %94, i32 0, i32 0
  store ptr %983, ptr %992, align 8
  %993 = call ptr @class_behavior_wrapper(ptr %991, ptr %94)
  call void %993(ptr %93, { ptr, i160 } %987)
  br label %1050

994:                                              ; preds = %823
  %995 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %995, ptr %95, align 8
  %996 = getelementptr { ptr }, ptr %95, i32 0, i32 0
  %997 = getelementptr { ptr }, ptr %96, i32 0, i32 0
  %998 = load ptr, ptr %996, align 8
  store ptr %998, ptr %997, align 8
  %999 = call ptr @llvm.invariant.start.p0(i64 16, ptr %96)
  %1000 = load ptr, ptr %96, align 8
  %1001 = load [4 x i8], ptr @bapjf_FAIL, align 1
  store [4 x i8] %1001, ptr %1000, align 1
  store ptr @String, ptr %97, align 8
  %1002 = load ptr, ptr %97, align 8
  %1003 = getelementptr ptr, ptr %1002, i32 6
  %1004 = load ptr, ptr %1003, align 8
  %1005 = call { i64, i64 } @size_wrapper(ptr %1004, ptr %97)
  %1006 = extractvalue { i64, i64 } %1005, 0
  %1007 = call ptr @bump_malloc(i64 %1006)
  %1008 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %1009 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  store ptr @String, ptr %98, align 8
  store ptr %1007, ptr %1008, align 8
  store i32 9, ptr %1009, align 4
  %1010 = call ptr @llvm.invariant.start.p0(i64 16, ptr %98)
  %1011 = getelementptr { ptr }, ptr %96, i32 0, i32 0
  %1012 = load ptr, ptr %1011, align 8
  %1013 = insertvalue { ptr } undef, ptr %1012, 0
  %1014 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %1015 = load ptr, ptr %1014, align 8
  %1016 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1015, 0
  %1017 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %1018 = load ptr, ptr %1017, align 8
  %1019 = insertvalue { ptr, ptr, ptr, i32 } %1016, ptr %1018, 1
  %1020 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %1021 = load ptr, ptr %1020, align 8
  %1022 = insertvalue { ptr, ptr, ptr, i32 } %1019, ptr %1021, 2
  %1023 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %1024 = load i32, ptr %1023, align 4
  %1025 = insertvalue { ptr, ptr, ptr, i32 } %1022, i32 %1024, 3
  %1026 = getelementptr [3 x ptr], ptr %99, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1026, align 8
  %1027 = getelementptr [3 x ptr], ptr %99, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1027, align 8
  %1028 = getelementptr [3 x ptr], ptr %99, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1028, align 8
  %1029 = call ptr @llvm.invariant.start.p0(i64 9, ptr %99)
  %1030 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1015)
  %1031 = getelementptr ptr, ptr %1015, i32 %1024
  %1032 = getelementptr ptr, ptr %1031, i32 4
  %1033 = load ptr, ptr %1032, align 8
  %1034 = getelementptr { ptr, ptr, ptr }, ptr %100, i32 0, i32 0
  store ptr @buffer_typ, ptr %1034, align 8
  %1035 = getelementptr { ptr, ptr, ptr }, ptr %100, i32 0, i32 1
  store ptr @i32_typ, ptr %1035, align 8
  %1036 = getelementptr { ptr, ptr, ptr }, ptr %100, i32 0, i32 2
  store ptr @i32_typ, ptr %1036, align 8
  %1037 = call ptr @behavior_wrapper(ptr %1033, { ptr, ptr, ptr, i32 } %1025, ptr %100)
  call void %1037({ ptr, ptr, ptr, i32 } %1025, { ptr, ptr, ptr, i32 } %1025, ptr %99, { ptr } %1013, i32 4, i32 5)
  %1038 = getelementptr { ptr, i160 }, ptr %98, i32 0, i32 0
  %1039 = load ptr, ptr %1038, align 8
  %1040 = insertvalue { ptr, i160 } undef, ptr %1039, 0
  %1041 = getelementptr { ptr, i160 }, ptr %98, i32 0, i32 1
  %1042 = load i160, ptr %1041, align 4
  %1043 = insertvalue { ptr, i160 } %1040, i160 %1042, 1
  %1044 = getelementptr [1 x ptr], ptr %101, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1044, align 8
  %1045 = call ptr @llvm.invariant.start.p0(i64 1, ptr %101)
  %1046 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1047 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1048 = getelementptr { ptr }, ptr %102, i32 0, i32 0
  store ptr %1039, ptr %1048, align 8
  %1049 = call ptr @class_behavior_wrapper(ptr %1047, ptr %102)
  call void %1049(ptr %101, { ptr, i160 } %1043)
  br label %1050

1050:                                             ; preds = %994, %938
  ret void
}

define void @benchmark_get_random_miss(i32 %0) {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca {}, align 8
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca [2 x ptr], align 8
  %16 = alloca { ptr, ptr }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca [2 x ptr], align 8
  %22 = alloca { ptr, ptr }, align 8
  %23 = alloca i1, align 1
  %24 = alloca ptr, align 8
  %25 = alloca [2 x ptr], align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca { ptr }, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = alloca [0 x ptr], align 8
  %32 = alloca {}, align 8
  %33 = alloca i160, align 8
  %34 = alloca ptr, align 8
  %35 = alloca [1 x ptr], align 8
  %36 = alloca { ptr }, align 8
  %37 = alloca { ptr, i160 }, align 8
  %38 = alloca i1, align 1
  %39 = alloca ptr, align 8
  %40 = alloca i160, align 8
  %41 = alloca ptr, align 8
  %42 = alloca [2 x ptr], align 8
  %43 = alloca { ptr, ptr }, align 8
  %44 = alloca i1, align 1
  %45 = alloca ptr, align 8
  %46 = alloca ptr, align 8
  %47 = alloca { ptr }, align 8
  %48 = alloca [1 x ptr], align 8
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = alloca [3 x ptr], align 8
  %51 = alloca { ptr, ptr, ptr }, align 8
  %52 = alloca [1 x ptr], align 8
  %53 = alloca { ptr }, align 8
  %54 = alloca i160, align 8
  %55 = alloca ptr, align 8
  %56 = alloca [1 x ptr], align 8
  %57 = alloca { ptr }, align 8
  %58 = alloca ptr, align 8
  %59 = alloca { ptr }, align 8
  %60 = alloca [1 x ptr], align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = alloca [3 x ptr], align 8
  %63 = alloca { ptr, ptr, ptr }, align 8
  %64 = alloca [1 x ptr], align 8
  %65 = alloca { ptr }, align 8
  %66 = alloca [1 x ptr], align 8
  %67 = alloca { ptr }, align 8
  %68 = alloca { ptr, i160 }, align 8
  %69 = alloca i160, align 8
  %70 = alloca ptr, align 8
  %71 = alloca [1 x ptr], align 8
  %72 = alloca { ptr }, align 8
  %73 = alloca { ptr, i160 }, align 8
  %74 = alloca i32, align 4
  %75 = alloca ptr, align 8
  %76 = alloca i32, align 4
  %77 = alloca ptr, align 8
  %78 = alloca i1, align 1
  %79 = alloca i1, align 1
  %80 = alloca ptr, align 8
  %81 = alloca { ptr }, align 8
  %82 = alloca [1 x ptr], align 8
  %83 = alloca { ptr, ptr, ptr, i32 }, align 8
  %84 = alloca [3 x ptr], align 8
  %85 = alloca { ptr, ptr, ptr }, align 8
  %86 = alloca ptr, align 8
  %87 = alloca { ptr }, align 8
  %88 = alloca [1 x ptr], align 8
  %89 = alloca { ptr, ptr, ptr, i32 }, align 8
  %90 = alloca [3 x ptr], align 8
  %91 = alloca { ptr, ptr, ptr }, align 8
  %92 = alloca [1 x ptr], align 8
  %93 = alloca { ptr }, align 8
  %94 = alloca ptr, align 8
  %95 = alloca { ptr }, align 8
  %96 = alloca [1 x ptr], align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = alloca [3 x ptr], align 8
  %99 = alloca { ptr, ptr, ptr }, align 8
  %100 = alloca [1 x ptr], align 8
  %101 = alloca { ptr }, align 8
  %102 = alloca ptr, align 8
  %103 = alloca { ptr }, align 8
  %104 = alloca [1 x ptr], align 8
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %106 = alloca [3 x ptr], align 8
  %107 = alloca { ptr, ptr, ptr }, align 8
  %108 = alloca [1 x ptr], align 8
  %109 = alloca { ptr }, align 8
  %110 = alloca ptr, align 8
  %111 = alloca { ptr }, align 8
  %112 = alloca [1 x ptr], align 8
  %113 = alloca { ptr, ptr, ptr, i32 }, align 8
  %114 = alloca [3 x ptr], align 8
  %115 = alloca { ptr, ptr, ptr }, align 8
  %116 = alloca [1 x ptr], align 8
  %117 = alloca { ptr }, align 8
  %118 = alloca i160, align 8
  %119 = alloca ptr, align 8
  %120 = alloca [1 x ptr], align 8
  %121 = alloca { ptr }, align 8
  %122 = alloca ptr, align 8
  %123 = alloca { ptr }, align 8
  %124 = alloca [1 x ptr], align 8
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  %126 = alloca [3 x ptr], align 8
  %127 = alloca { ptr, ptr, ptr }, align 8
  %128 = alloca [1 x ptr], align 8
  %129 = alloca { ptr }, align 8
  %130 = alloca i160, align 8
  %131 = alloca ptr, align 8
  %132 = alloca [1 x ptr], align 8
  %133 = alloca { ptr }, align 8
  %134 = alloca ptr, align 8
  %135 = alloca { ptr }, align 8
  %136 = alloca [1 x ptr], align 8
  %137 = alloca { ptr, ptr, ptr, i32 }, align 8
  %138 = alloca [3 x ptr], align 8
  %139 = alloca { ptr, ptr, ptr }, align 8
  %140 = alloca [1 x ptr], align 8
  %141 = alloca { ptr }, align 8
  %142 = alloca [4 x ptr], align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i1, align 1
  %.reg2mem11 = alloca i64, align 8
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca i32, align 4
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i32, align 4
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i1, align 1
  %.reg2mem38 = alloca i32, align 4
  %.reg2mem42 = alloca i32, align 4
  %.reg2mem49 = alloca i32, align 4
  %.reg2mem54 = alloca i64, align 8
  %.reg2mem56 = alloca i32, align 4
  %.reg2mem61 = alloca i32, align 4
  %.reg2mem63 = alloca i32, align 4
  %.reg2mem65 = alloca i32, align 4
  %.reg2mem67 = alloca i32, align 4
  %.reg2mem69 = alloca i32, align 4
  %.reg2mem71 = alloca i32, align 4
  %.reg2mem73 = alloca i32, align 4
  %.reg2mem75 = alloca i32, align 4
  %.reg2mem78 = alloca i1, align 1
  %.reg2mem81 = alloca i32, align 4
  %.reg2mem84 = alloca i32, align 4
  %.reg2mem93 = alloca i32, align 4
  %.reg2mem95 = alloca i32, align 4
  %.reg2mem97 = alloca i32, align 4
  %.reg2mem99 = alloca i32, align 4
  %.reg2mem101 = alloca i32, align 4
  %.reg2mem103 = alloca i32, align 4
  %.reg2mem105 = alloca i32, align 4
  %.reg2mem110 = alloca i1, align 1
  %.reg2mem113 = alloca i32, align 4
  %.reg2mem116 = alloca i32, align 4
  %.reg2mem120 = alloca i32, align 4
  %.reg2mem122 = alloca i1, align 1
  %.reg2mem124 = alloca i32, align 4
  %.reg2mem126 = alloca i32, align 4
  %.reg2mem128 = alloca i32, align 4
  %.reg2mem130 = alloca i32, align 4
  %.reg2mem132 = alloca i32, align 4
  %.reg2mem134 = alloca i32, align 4
  %.reg2mem136 = alloca i32, align 4
  %.reg2mem138 = alloca i32, align 4
  %.reg2mem140 = alloca i32, align 4
  %.reg2mem142 = alloca i32, align 4
  %.reg2mem144 = alloca i32, align 4
  %.reg2mem146 = alloca i32, align 4
  %.reg2mem148 = alloca i32, align 4
  %.reg2mem150 = alloca i32, align 4
  %.reg2mem152 = alloca i32, align 4
  %.reg2mem154 = alloca i32, align 4
  %.reg2mem156 = alloca i32, align 4
  %.reg2mem158 = alloca i32, align 4
  %.reg2mem160 = alloca i32, align 4
  %.reg2mem162 = alloca i32, align 4
  %.reg2mem164 = alloca i32, align 4
  %.reg2mem166 = alloca i32, align 4
  %.reg2mem168 = alloca i32, align 4
  %.reg2mem170 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store ptr @HashMap, ptr %142, align 8
  %143 = getelementptr ptr, ptr %142, i32 1
  store ptr @_parameterization_Ptri32, ptr %143, align 8
  %144 = getelementptr ptr, ptr %142, i32 2
  store ptr @_parameterization_Ptri32, ptr %144, align 8
  %145 = getelementptr ptr, ptr %142, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %145, align 8
  %146 = load ptr, ptr %142, align 8
  %147 = getelementptr ptr, ptr %146, i32 6
  %148 = load ptr, ptr %147, align 8
  %149 = call { i64, i64 } @size_wrapper(ptr %148, ptr %142)
  %150 = extractvalue { i64, i64 } %149, 0
  %151 = call ptr @bump_malloc(i64 %150)
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %152 = getelementptr ptr, ptr %151, i32 1
  store ptr @_parameterization_Ptri32, ptr %152, align 8
  %153 = getelementptr ptr, ptr %151, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %153, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 24, ptr %151)
  %155 = alloca { ptr, ptr, ptr, i32 }, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  store ptr @HashMap, ptr %155, align 8
  store ptr %151, ptr %156, align 8
  store i32 9, ptr %157, align 4
  %158 = call ptr @llvm.invariant.start.p0(i64 16, ptr %155)
  %159 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %159)
  call void @llvm.init.trampoline(ptr %159, ptr @idlomdyeko, ptr @i32_hasher)
  %160 = alloca ptr, align 8
  %161 = call ptr @adjust_trampoline(ptr %159)
  store ptr %161, ptr %160, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 24, ptr %159)
  %163 = call ptr @llvm.invariant.start.p0(i64 8, ptr %160)
  %164 = getelementptr { ptr }, ptr %160, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr } undef, ptr %165, 0
  %167 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %167)
  call void @llvm.init.trampoline(ptr %167, ptr @nxqgurwdeu, ptr @i32_eq)
  %168 = alloca ptr, align 8
  %169 = call ptr @adjust_trampoline(ptr %167)
  store ptr %169, ptr %168, align 8
  %170 = call ptr @llvm.invariant.start.p0(i64 24, ptr %167)
  %171 = call ptr @llvm.invariant.start.p0(i64 8, ptr %168)
  %172 = getelementptr { ptr }, ptr %168, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr } undef, ptr %173, 0
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %176, 0
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %177, ptr %179, 1
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %182 = load ptr, ptr %181, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %180, ptr %182, 2
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %185 = load i32, ptr %184, align 4
  %186 = insertvalue { ptr, ptr, ptr, i32 } %183, i32 %185, 3
  %187 = alloca [2 x ptr], align 8
  %188 = getelementptr [2 x ptr], ptr %187, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %188, align 8
  %189 = getelementptr [2 x ptr], ptr %187, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %189, align 8
  %190 = call ptr @llvm.invariant.start.p0(i64 4, ptr %187)
  %191 = call ptr @llvm.invariant.start.p0(i64 688, ptr %176)
  %192 = getelementptr ptr, ptr %176, i32 %185
  %193 = getelementptr ptr, ptr %192, i32 9
  %194 = load ptr, ptr %193, align 8
  %195 = alloca { ptr, ptr }, align 8
  %196 = getelementptr { ptr, ptr }, ptr %195, i32 0, i32 0
  store ptr @function_typ, ptr %196, align 8
  %197 = getelementptr { ptr, ptr }, ptr %195, i32 0, i32 1
  store ptr @function_typ, ptr %197, align 8
  %198 = call ptr @behavior_wrapper(ptr %194, { ptr, ptr, ptr, i32 } %186, ptr %195)
  call void %198({ ptr, ptr, ptr, i32 } %186, { ptr, ptr, ptr, i32 } %186, ptr %187, { ptr } %166, { ptr } %174)
  %199 = alloca { ptr, ptr, ptr, i32 }, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 0
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 1
  %205 = load ptr, ptr %203, align 8
  store ptr %205, ptr %204, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 2
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 3
  %211 = load i32, ptr %209, align 4
  store i32 %211, ptr %210, align 4
  call void @set_offset(ptr %199, ptr @HashMap)
  %212 = alloca { ptr, ptr, ptr, i32 }, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 0
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 0
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 1
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 1
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 2
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 2
  %221 = load ptr, ptr %219, align 8
  store ptr %221, ptr %220, align 8
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 3
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 3
  %224 = load i32, ptr %222, align 4
  store i32 %224, ptr %223, align 4
  %225 = call ptr @llvm.invariant.start.p0(i64 16, ptr %212)
  %226 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %226, align 8
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr ptr, ptr %227, i32 6
  %229 = load ptr, ptr %228, align 8
  %230 = call { i64, i64 } @size_wrapper(ptr %229, ptr %226)
  %231 = extractvalue { i64, i64 } %230, 0
  %232 = call ptr @bump_malloc(i64 %231)
  %233 = alloca { ptr, ptr, ptr, i32 }, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 1
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 3
  store ptr @PRNG, ptr %233, align 8
  store ptr %232, ptr %234, align 8
  store i32 9, ptr %235, align 4
  %236 = call ptr @llvm.invariant.start.p0(i64 16, ptr %233)
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 0
  %238 = load ptr, ptr %237, align 8
  %239 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %238, 0
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 1
  %241 = load ptr, ptr %240, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } %239, ptr %241, 1
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 2
  %244 = load ptr, ptr %243, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %244, 2
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 3
  %247 = load i32, ptr %246, align 4
  %248 = insertvalue { ptr, ptr, ptr, i32 } %245, i32 %247, 3
  %249 = alloca [1 x ptr], align 8
  %250 = getelementptr [1 x ptr], ptr %249, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %250, align 8
  %251 = call ptr @llvm.invariant.start.p0(i64 1, ptr %249)
  %252 = call ptr @llvm.invariant.start.p0(i64 40, ptr %238)
  %253 = getelementptr ptr, ptr %238, i32 %247
  %254 = getelementptr ptr, ptr %253, i32 1
  %255 = load ptr, ptr %254, align 8
  %256 = alloca { ptr }, align 8
  %257 = getelementptr { ptr }, ptr %256, i32 0, i32 0
  store ptr @i32_typ, ptr %257, align 8
  %258 = call ptr @behavior_wrapper(ptr %255, { ptr, ptr, ptr, i32 } %248, ptr %256)
  call void %258({ ptr, ptr, ptr, i32 } %248, { ptr, ptr, ptr, i32 } %248, ptr %249, i32 789)
  %259 = alloca { ptr, ptr, ptr, i32 }, align 8
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 0
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %259, i32 0, i32 0
  %262 = load ptr, ptr %260, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 1
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %259, i32 0, i32 1
  %265 = load ptr, ptr %263, align 8
  store ptr %265, ptr %264, align 8
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 2
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %259, i32 0, i32 2
  %268 = load ptr, ptr %266, align 8
  store ptr %268, ptr %267, align 8
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 3
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %259, i32 0, i32 3
  %271 = load i32, ptr %269, align 4
  store i32 %271, ptr %270, align 4
  call void @set_offset(ptr %259, ptr @PRNG)
  %272 = alloca { ptr, ptr, ptr, i32 }, align 8
  %273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %259, i32 0, i32 0
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %272, i32 0, i32 0
  %275 = load ptr, ptr %273, align 8
  store ptr %275, ptr %274, align 8
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %259, i32 0, i32 1
  %277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %272, i32 0, i32 1
  %278 = load ptr, ptr %276, align 8
  store ptr %278, ptr %277, align 8
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %259, i32 0, i32 2
  %280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %272, i32 0, i32 2
  %281 = load ptr, ptr %279, align 8
  store ptr %281, ptr %280, align 8
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %259, i32 0, i32 3
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %272, i32 0, i32 3
  %284 = load i32, ptr %282, align 4
  store i32 %284, ptr %283, align 4
  %285 = call ptr @llvm.invariant.start.p0(i64 16, ptr %272)
  %286 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %286, align 8
  %287 = load ptr, ptr %286, align 8
  %288 = getelementptr ptr, ptr %287, i32 6
  %289 = load ptr, ptr %288, align 8
  %290 = call { i64, i64 } @size_wrapper(ptr %289, ptr %286)
  %291 = extractvalue { i64, i64 } %290, 0
  %292 = call ptr @bump_malloc(i64 %291)
  %293 = alloca { ptr, ptr, ptr, i32 }, align 8
  %294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %293, i32 0, i32 1
  %295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %293, i32 0, i32 3
  store ptr @PRNG, ptr %293, align 8
  store ptr %292, ptr %294, align 8
  store i32 9, ptr %295, align 4
  %296 = call ptr @llvm.invariant.start.p0(i64 16, ptr %293)
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %293, i32 0, i32 0
  %298 = load ptr, ptr %297, align 8
  %299 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %298, 0
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %293, i32 0, i32 1
  %301 = load ptr, ptr %300, align 8
  %302 = insertvalue { ptr, ptr, ptr, i32 } %299, ptr %301, 1
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %293, i32 0, i32 2
  %304 = load ptr, ptr %303, align 8
  %305 = insertvalue { ptr, ptr, ptr, i32 } %302, ptr %304, 2
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %293, i32 0, i32 3
  %307 = load i32, ptr %306, align 4
  %308 = insertvalue { ptr, ptr, ptr, i32 } %305, i32 %307, 3
  %309 = alloca [1 x ptr], align 8
  %310 = getelementptr [1 x ptr], ptr %309, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %310, align 8
  %311 = call ptr @llvm.invariant.start.p0(i64 1, ptr %309)
  %312 = call ptr @llvm.invariant.start.p0(i64 40, ptr %298)
  %313 = getelementptr ptr, ptr %298, i32 %307
  %314 = getelementptr ptr, ptr %313, i32 1
  %315 = load ptr, ptr %314, align 8
  %316 = alloca { ptr }, align 8
  %317 = getelementptr { ptr }, ptr %316, i32 0, i32 0
  store ptr @i32_typ, ptr %317, align 8
  %318 = call ptr @behavior_wrapper(ptr %315, { ptr, ptr, ptr, i32 } %308, ptr %316)
  call void %318({ ptr, ptr, ptr, i32 } %308, { ptr, ptr, ptr, i32 } %308, ptr %309, i32 987)
  %319 = alloca { ptr, ptr, ptr, i32 }, align 8
  %320 = getelementptr { ptr, ptr, ptr, i32 }, ptr %293, i32 0, i32 0
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %319, i32 0, i32 0
  %322 = load ptr, ptr %320, align 8
  store ptr %322, ptr %321, align 8
  %323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %293, i32 0, i32 1
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %319, i32 0, i32 1
  %325 = load ptr, ptr %323, align 8
  store ptr %325, ptr %324, align 8
  %326 = getelementptr { ptr, ptr, ptr, i32 }, ptr %293, i32 0, i32 2
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %319, i32 0, i32 2
  %328 = load ptr, ptr %326, align 8
  store ptr %328, ptr %327, align 8
  %329 = getelementptr { ptr, ptr, ptr, i32 }, ptr %293, i32 0, i32 3
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %319, i32 0, i32 3
  %331 = load i32, ptr %329, align 4
  store i32 %331, ptr %330, align 4
  call void @set_offset(ptr %319, ptr @PRNG)
  %332 = alloca { ptr, ptr, ptr, i32 }, align 8
  %333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %319, i32 0, i32 0
  %334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 0
  %335 = load ptr, ptr %333, align 8
  store ptr %335, ptr %334, align 8
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %319, i32 0, i32 1
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 1
  %338 = load ptr, ptr %336, align 8
  store ptr %338, ptr %337, align 8
  %339 = getelementptr { ptr, ptr, ptr, i32 }, ptr %319, i32 0, i32 2
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 2
  %341 = load ptr, ptr %339, align 8
  store ptr %341, ptr %340, align 8
  %342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %319, i32 0, i32 3
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 3
  %344 = load i32, ptr %342, align 4
  store i32 %344, ptr %343, align 4
  %345 = call ptr @llvm.invariant.start.p0(i64 16, ptr %332)
  %346 = alloca [4 x ptr], align 8
  store ptr @HashMap, ptr %346, align 8
  %347 = getelementptr ptr, ptr %346, i32 1
  store ptr @_parameterization_Ptri32, ptr %347, align 8
  %348 = getelementptr ptr, ptr %346, i32 2
  store ptr @_parameterization_Ptri1, ptr %348, align 8
  %349 = getelementptr ptr, ptr %346, i32 3
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %349, align 8
  %350 = load ptr, ptr %346, align 8
  %351 = getelementptr ptr, ptr %350, i32 6
  %352 = load ptr, ptr %351, align 8
  %353 = call { i64, i64 } @size_wrapper(ptr %352, ptr %346)
  %354 = extractvalue { i64, i64 } %353, 0
  %355 = call ptr @bump_malloc(i64 %354)
  store ptr @_parameterization_Ptri32, ptr %355, align 8
  %356 = getelementptr ptr, ptr %355, i32 1
  store ptr @_parameterization_Ptri1, ptr %356, align 8
  %357 = getelementptr ptr, ptr %355, i32 2
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %357, align 8
  %358 = call ptr @llvm.invariant.start.p0(i64 24, ptr %355)
  %359 = alloca { ptr, ptr, ptr, i32 }, align 8
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 1
  %361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 3
  store ptr @HashMap, ptr %359, align 8
  store ptr %355, ptr %360, align 8
  store i32 9, ptr %361, align 4
  %362 = call ptr @llvm.invariant.start.p0(i64 16, ptr %359)
  %363 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %363)
  call void @llvm.init.trampoline(ptr %363, ptr @mtlnsndrvh, ptr @i32_hasher)
  %364 = alloca ptr, align 8
  %365 = call ptr @adjust_trampoline(ptr %363)
  store ptr %365, ptr %364, align 8
  %366 = call ptr @llvm.invariant.start.p0(i64 24, ptr %363)
  %367 = call ptr @llvm.invariant.start.p0(i64 8, ptr %364)
  %368 = getelementptr { ptr }, ptr %364, i32 0, i32 0
  %369 = load ptr, ptr %368, align 8
  %370 = insertvalue { ptr } undef, ptr %369, 0
  %371 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %371)
  call void @llvm.init.trampoline(ptr %371, ptr @khsrvzhgra, ptr @i32_eq)
  %372 = alloca ptr, align 8
  %373 = call ptr @adjust_trampoline(ptr %371)
  store ptr %373, ptr %372, align 8
  %374 = call ptr @llvm.invariant.start.p0(i64 24, ptr %371)
  %375 = call ptr @llvm.invariant.start.p0(i64 8, ptr %372)
  %376 = getelementptr { ptr }, ptr %372, i32 0, i32 0
  %377 = load ptr, ptr %376, align 8
  %378 = insertvalue { ptr } undef, ptr %377, 0
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 0
  %380 = load ptr, ptr %379, align 8
  %381 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %380, 0
  %382 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 1
  %383 = load ptr, ptr %382, align 8
  %384 = insertvalue { ptr, ptr, ptr, i32 } %381, ptr %383, 1
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 2
  %386 = load ptr, ptr %385, align 8
  %387 = insertvalue { ptr, ptr, ptr, i32 } %384, ptr %386, 2
  %388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 3
  %389 = load i32, ptr %388, align 4
  %390 = insertvalue { ptr, ptr, ptr, i32 } %387, i32 %389, 3
  %391 = alloca [2 x ptr], align 8
  %392 = getelementptr [2 x ptr], ptr %391, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %392, align 8
  %393 = getelementptr [2 x ptr], ptr %391, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %393, align 8
  %394 = call ptr @llvm.invariant.start.p0(i64 4, ptr %391)
  %395 = call ptr @llvm.invariant.start.p0(i64 688, ptr %380)
  %396 = getelementptr ptr, ptr %380, i32 %389
  %397 = getelementptr ptr, ptr %396, i32 9
  %398 = load ptr, ptr %397, align 8
  %399 = alloca { ptr, ptr }, align 8
  %400 = getelementptr { ptr, ptr }, ptr %399, i32 0, i32 0
  store ptr @function_typ, ptr %400, align 8
  %401 = getelementptr { ptr, ptr }, ptr %399, i32 0, i32 1
  store ptr @function_typ, ptr %401, align 8
  %402 = call ptr @behavior_wrapper(ptr %398, { ptr, ptr, ptr, i32 } %390, ptr %399)
  call void %402({ ptr, ptr, ptr, i32 } %390, { ptr, ptr, ptr, i32 } %390, ptr %391, { ptr } %370, { ptr } %378)
  %403 = alloca { ptr, ptr, ptr, i32 }, align 8
  %404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 0
  %405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %403, i32 0, i32 0
  %406 = load ptr, ptr %404, align 8
  store ptr %406, ptr %405, align 8
  %407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 1
  %408 = getelementptr { ptr, ptr, ptr, i32 }, ptr %403, i32 0, i32 1
  %409 = load ptr, ptr %407, align 8
  store ptr %409, ptr %408, align 8
  %410 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 2
  %411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %403, i32 0, i32 2
  %412 = load ptr, ptr %410, align 8
  store ptr %412, ptr %411, align 8
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %359, i32 0, i32 3
  %414 = getelementptr { ptr, ptr, ptr, i32 }, ptr %403, i32 0, i32 3
  %415 = load i32, ptr %413, align 4
  store i32 %415, ptr %414, align 4
  call void @set_offset(ptr %403, ptr @HashMap)
  %416 = alloca { ptr, ptr, ptr, i32 }, align 8
  %417 = getelementptr { ptr, ptr, ptr, i32 }, ptr %403, i32 0, i32 0
  %418 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 0
  %419 = load ptr, ptr %417, align 8
  store ptr %419, ptr %418, align 8
  %420 = getelementptr { ptr, ptr, ptr, i32 }, ptr %403, i32 0, i32 1
  %421 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 1
  %422 = load ptr, ptr %420, align 8
  store ptr %422, ptr %421, align 8
  %423 = getelementptr { ptr, ptr, ptr, i32 }, ptr %403, i32 0, i32 2
  %424 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 2
  %425 = load ptr, ptr %423, align 8
  store ptr %425, ptr %424, align 8
  %426 = getelementptr { ptr, ptr, ptr, i32 }, ptr %403, i32 0, i32 3
  %427 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 3
  %428 = load i32, ptr %426, align 4
  store i32 %428, ptr %427, align 4
  %429 = call ptr @llvm.invariant.start.p0(i64 16, ptr %416)
  %430 = mul i32 %0, 10
  store i32 %430, ptr %.reg2mem120, align 4
  store i32 0, ptr %.reg2mem168, align 4
  store i32 0, ptr %.reg2mem170, align 4
  br label %431

431:                                              ; preds = %._crit_edge, %1
  %.reload171 = load i32, ptr %.reg2mem170, align 4
  %.reload169 = load i32, ptr %.reg2mem168, align 4
  store i32 %.reload171, ptr %.reg2mem116, align 4
  store i32 %.reload169, ptr %.reg2mem113, align 4
  %.reload119 = load i32, ptr %.reg2mem116, align 4
  %432 = icmp slt i32 %.reload119, %0
  %.reload115 = load i32, ptr %.reg2mem113, align 4
  %.reload121 = load i32, ptr %.reg2mem120, align 4
  %433 = icmp slt i32 %.reload115, %.reload121
  %434 = and i1 %432, %433
  store i1 %434, ptr %.reg2mem110, align 1
  %.reload112 = load i1, ptr %.reg2mem110, align 1
  br i1 %.reload112, label %435, label %559

435:                                              ; preds = %431
  %436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %272, i32 0, i32 0
  %437 = load ptr, ptr %436, align 8
  %438 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %437, 0
  %439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %272, i32 0, i32 1
  %440 = load ptr, ptr %439, align 8
  %441 = insertvalue { ptr, ptr, ptr, i32 } %438, ptr %440, 1
  %442 = getelementptr { ptr, ptr, ptr, i32 }, ptr %272, i32 0, i32 2
  %443 = load ptr, ptr %442, align 8
  %444 = insertvalue { ptr, ptr, ptr, i32 } %441, ptr %443, 2
  %445 = getelementptr { ptr, ptr, ptr, i32 }, ptr %272, i32 0, i32 3
  %446 = load i32, ptr %445, align 4
  %447 = insertvalue { ptr, ptr, ptr, i32 } %444, i32 %446, 3
  %448 = call ptr @llvm.invariant.start.p0(i64 0, ptr %2)
  %449 = call ptr @llvm.invariant.start.p0(i64 40, ptr %437)
  %450 = getelementptr ptr, ptr %437, i32 %446
  %451 = getelementptr ptr, ptr %450, i32 2
  %452 = load ptr, ptr %451, align 8
  %453 = call ptr @behavior_wrapper(ptr %452, { ptr, ptr, ptr, i32 } %447, ptr %3)
  %454 = call i32 %453({ ptr, ptr, ptr, i32 } %447, { ptr, ptr, ptr, i32 } %447, ptr %2)
  store i32 %454, ptr %.reg2mem105, align 4
  store ptr @i32_typ, ptr %5, align 8
  %.reload109 = load i32, ptr %.reg2mem105, align 4
  store i32 %.reload109, ptr %4, align 4
  %455 = load ptr, ptr %5, align 8
  %456 = insertvalue { ptr, i160 } undef, ptr %455, 0
  %457 = load i160, ptr %4, align 4
  %458 = insertvalue { ptr, i160 } %456, i160 %457, 1
  %459 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 0
  %460 = load ptr, ptr %459, align 8
  %461 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %460, 0
  %462 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 1
  %463 = load ptr, ptr %462, align 8
  %464 = insertvalue { ptr, ptr, ptr, i32 } %461, ptr %463, 1
  %465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 2
  %466 = load ptr, ptr %465, align 8
  %467 = insertvalue { ptr, ptr, ptr, i32 } %464, ptr %466, 2
  %468 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 3
  %469 = load i32, ptr %468, align 4
  %470 = insertvalue { ptr, ptr, ptr, i32 } %467, i32 %469, 3
  %471 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %471, align 8
  %472 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %473 = call ptr @llvm.invariant.start.p0(i64 688, ptr %460)
  %474 = getelementptr ptr, ptr %460, i32 %469
  %475 = getelementptr ptr, ptr %474, i32 20
  %476 = load ptr, ptr %475, align 8
  %477 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr %455, ptr %477, align 8
  %478 = call ptr @behavior_wrapper(ptr %476, { ptr, ptr, ptr, i32 } %470, ptr %7)
  %479 = call { ptr, i160 } %478({ ptr, ptr, ptr, i32 } %470, { ptr, ptr, ptr, i32 } %470, ptr %6, { ptr, i160 } %458)
  store { ptr, i160 } %479, ptr %8, align 8
  %480 = getelementptr { ptr, i1 }, ptr %8, i32 0, i32 0
  %481 = load ptr, ptr %480, align 8
  store ptr %481, ptr %10, align 8
  %482 = getelementptr { ptr, i1 }, ptr %8, i32 0, i32 1
  %483 = load i1, ptr %482, align 1
  store i1 %483, ptr %9, align 1
  %484 = load ptr, ptr %10, align 8
  %485 = ptrtoint ptr %484 to i64
  %486 = icmp eq i64 %485, ptrtoint (ptr @nil_typ to i64)
  %487 = icmp eq i64 %485, 0
  %488 = or i1 %486, %487
  br i1 %488, label %489, label %555

489:                                              ; preds = %435
  %490 = load [0 x i8], ptr %9, align 1
  %.reload108 = load i32, ptr %.reg2mem105, align 4
  %491 = add i32 %.reload108, 1
  store ptr @i32_typ, ptr %12, align 8
  %.reload107 = load i32, ptr %.reg2mem105, align 4
  store i32 %.reload107, ptr %11, align 4
  %492 = load ptr, ptr %12, align 8
  %493 = insertvalue { ptr, i160 } undef, ptr %492, 0
  %494 = load i160, ptr %11, align 4
  %495 = insertvalue { ptr, i160 } %493, i160 %494, 1
  store ptr @i32_typ, ptr %14, align 8
  store i32 %491, ptr %13, align 4
  %496 = load ptr, ptr %14, align 8
  %497 = insertvalue { ptr, i160 } undef, ptr %496, 0
  %498 = load i160, ptr %13, align 4
  %499 = insertvalue { ptr, i160 } %497, i160 %498, 1
  %500 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 0
  %501 = load ptr, ptr %500, align 8
  %502 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %501, 0
  %503 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 1
  %504 = load ptr, ptr %503, align 8
  %505 = insertvalue { ptr, ptr, ptr, i32 } %502, ptr %504, 1
  %506 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 2
  %507 = load ptr, ptr %506, align 8
  %508 = insertvalue { ptr, ptr, ptr, i32 } %505, ptr %507, 2
  %509 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 3
  %510 = load i32, ptr %509, align 4
  %511 = insertvalue { ptr, ptr, ptr, i32 } %508, i32 %510, 3
  %512 = getelementptr [2 x ptr], ptr %15, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %512, align 8
  %513 = getelementptr [2 x ptr], ptr %15, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %513, align 8
  %514 = call ptr @llvm.invariant.start.p0(i64 4, ptr %15)
  %515 = call ptr @llvm.invariant.start.p0(i64 688, ptr %501)
  %516 = getelementptr ptr, ptr %501, i32 %510
  %517 = getelementptr ptr, ptr %516, i32 18
  %518 = load ptr, ptr %517, align 8
  %519 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 0
  store ptr %492, ptr %519, align 8
  %520 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 1
  store ptr %496, ptr %520, align 8
  %521 = call ptr @behavior_wrapper(ptr %518, { ptr, ptr, ptr, i32 } %511, ptr %16)
  call void %521({ ptr, ptr, ptr, i32 } %511, { ptr, ptr, ptr, i32 } %511, ptr %15, { ptr, i160 } %495, { ptr, i160 } %499)
  store ptr @i32_typ, ptr %18, align 8
  %.reload106 = load i32, ptr %.reg2mem105, align 4
  store i32 %.reload106, ptr %17, align 4
  %522 = load ptr, ptr %18, align 8
  %523 = insertvalue { ptr, i160 } undef, ptr %522, 0
  %524 = load i160, ptr %17, align 4
  %525 = insertvalue { ptr, i160 } %523, i160 %524, 1
  store ptr @bool_typ, ptr %20, align 8
  store i1 true, ptr %19, align 1
  %526 = load ptr, ptr %20, align 8
  %527 = insertvalue { ptr, i160 } undef, ptr %526, 0
  %528 = load i160, ptr %19, align 4
  %529 = insertvalue { ptr, i160 } %527, i160 %528, 1
  %530 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 0
  %531 = load ptr, ptr %530, align 8
  %532 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %531, 0
  %533 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 1
  %534 = load ptr, ptr %533, align 8
  %535 = insertvalue { ptr, ptr, ptr, i32 } %532, ptr %534, 1
  %536 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 2
  %537 = load ptr, ptr %536, align 8
  %538 = insertvalue { ptr, ptr, ptr, i32 } %535, ptr %537, 2
  %539 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 3
  %540 = load i32, ptr %539, align 4
  %541 = insertvalue { ptr, ptr, ptr, i32 } %538, i32 %540, 3
  %542 = getelementptr [2 x ptr], ptr %21, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %542, align 8
  %543 = getelementptr [2 x ptr], ptr %21, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %543, align 8
  %544 = call ptr @llvm.invariant.start.p0(i64 4, ptr %21)
  %545 = call ptr @llvm.invariant.start.p0(i64 688, ptr %531)
  %546 = getelementptr ptr, ptr %531, i32 %540
  %547 = getelementptr ptr, ptr %546, i32 18
  %548 = load ptr, ptr %547, align 8
  %549 = getelementptr { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr %522, ptr %549, align 8
  %550 = getelementptr { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr %526, ptr %550, align 8
  %551 = call ptr @behavior_wrapper(ptr %548, { ptr, ptr, ptr, i32 } %541, ptr %22)
  call void %551({ ptr, ptr, ptr, i32 } %541, { ptr, ptr, ptr, i32 } %541, ptr %21, { ptr, i160 } %525, { ptr, i160 } %529)
  %.reload118 = load i32, ptr %.reg2mem116, align 4
  %552 = add i32 %.reload118, 1
  store i32 %552, ptr %.reg2mem103, align 4
  store [0 x i8] %490, ptr %23, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %24, align 4
  %553 = load ptr, ptr %24, align 8
  store ptr %553, ptr %10, align 8
  %554 = load i1, ptr %23, align 1
  store i1 %554, ptr %9, align 1
  %.reload104 = load i32, ptr %.reg2mem103, align 4
  store i32 %.reload104, ptr %.reg2mem166, align 4
  br label %556

555:                                              ; preds = %435
  %.reload117 = load i32, ptr %.reg2mem116, align 4
  store i32 %.reload117, ptr %.reg2mem166, align 4
  br label %556

556:                                              ; preds = %555, %489
  %.reload167 = load i32, ptr %.reg2mem166, align 4
  store i32 %.reload167, ptr %.reg2mem101, align 4
  br label %557

557:                                              ; preds = %556
  %.reload114 = load i32, ptr %.reg2mem113, align 4
  %558 = add i32 %.reload114, 1
  store i32 %558, ptr %.reg2mem99, align 4
  %.reload100 = load i32, ptr %.reg2mem99, align 4
  %.reload102 = load i32, ptr %.reg2mem101, align 4
  store i32 %.reload100, ptr %.reg2mem162, align 4
  store i32 %.reload102, ptr %.reg2mem164, align 4
  br label %560

559:                                              ; preds = %431
  store i32 poison, ptr %.reg2mem162, align 4
  store i32 poison, ptr %.reg2mem164, align 4
  br label %560

560:                                              ; preds = %559, %557
  %.reload165 = load i32, ptr %.reg2mem164, align 4
  %.reload163 = load i32, ptr %.reg2mem162, align 4
  store i32 %.reload165, ptr %.reg2mem97, align 4
  store i32 %.reload163, ptr %.reg2mem95, align 4
  br label %561

561:                                              ; preds = %560
  %.reload111 = load i1, ptr %.reg2mem110, align 1
  br i1 %.reload111, label %._crit_edge, label %562

._crit_edge:                                      ; preds = %561
  %.reload96 = load i32, ptr %.reg2mem95, align 4
  %.reload98 = load i32, ptr %.reg2mem97, align 4
  store i32 %.reload96, ptr %.reg2mem168, align 4
  store i32 %.reload98, ptr %.reg2mem170, align 4
  br label %431

562:                                              ; preds = %561
  store ptr @Array, ptr %25, align 8
  %563 = getelementptr ptr, ptr %25, i32 1
  store ptr @_parameterization_Ptri32, ptr %563, align 8
  %564 = load ptr, ptr %25, align 8
  %565 = getelementptr ptr, ptr %564, i32 6
  %566 = load ptr, ptr %565, align 8
  %567 = call { i64, i64 } @size_wrapper(ptr %566, ptr %25)
  %568 = extractvalue { i64, i64 } %567, 0
  %569 = call ptr @bump_malloc(i64 %568)
  store ptr @_parameterization_Ptri32, ptr %569, align 8
  %570 = call ptr @llvm.invariant.start.p0(i64 8, ptr %569)
  %571 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %572 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @Array, ptr %26, align 8
  store ptr %569, ptr %571, align 8
  store i32 9, ptr %572, align 4
  %573 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  %574 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %575 = load ptr, ptr %574, align 8
  %576 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %575, 0
  %577 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %578 = load ptr, ptr %577, align 8
  %579 = insertvalue { ptr, ptr, ptr, i32 } %576, ptr %578, 1
  %580 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %581 = load ptr, ptr %580, align 8
  %582 = insertvalue { ptr, ptr, ptr, i32 } %579, ptr %581, 2
  %583 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %584 = load i32, ptr %583, align 4
  %585 = insertvalue { ptr, ptr, ptr, i32 } %582, i32 %584, 3
  %586 = getelementptr [1 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %586, align 8
  %587 = call ptr @llvm.invariant.start.p0(i64 1, ptr %27)
  %588 = call ptr @llvm.invariant.start.p0(i64 600, ptr %575)
  %589 = getelementptr ptr, ptr %575, i32 %584
  %590 = getelementptr ptr, ptr %589, i32 6
  %591 = load ptr, ptr %590, align 8
  %592 = getelementptr { ptr }, ptr %28, i32 0, i32 0
  store ptr @i32_typ, ptr %592, align 8
  %593 = call ptr @behavior_wrapper(ptr %591, { ptr, ptr, ptr, i32 } %585, ptr %28)
  call void %593({ ptr, ptr, ptr, i32 } %585, { ptr, ptr, ptr, i32 } %585, ptr %27, i32 %0)
  %594 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %595 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %596 = load ptr, ptr %594, align 8
  store ptr %596, ptr %595, align 8
  %597 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %598 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %599 = load ptr, ptr %597, align 8
  store ptr %599, ptr %598, align 8
  %600 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %601 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %602 = load ptr, ptr %600, align 8
  store ptr %602, ptr %601, align 8
  %603 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %604 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %605 = load i32, ptr %603, align 4
  store i32 %605, ptr %604, align 4
  call void @set_offset(ptr %29, ptr @Array)
  %606 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %607 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %608 = load ptr, ptr %606, align 8
  store ptr %608, ptr %607, align 8
  %609 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %610 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %611 = load ptr, ptr %609, align 8
  store ptr %611, ptr %610, align 8
  %612 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %613 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %614 = load ptr, ptr %612, align 8
  store ptr %614, ptr %613, align 8
  %615 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %616 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %617 = load i32, ptr %615, align 4
  store i32 %617, ptr %616, align 4
  %618 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %619 = mul i32 %0, 20
  store i32 %619, ptr %.reg2mem93, align 4
  store i32 0, ptr %.reg2mem158, align 4
  store i32 0, ptr %.reg2mem160, align 4
  br label %620

620:                                              ; preds = %716, %562
  %.reload161 = load i32, ptr %.reg2mem160, align 4
  %.reload159 = load i32, ptr %.reg2mem158, align 4
  store i32 %.reload161, ptr %.reg2mem84, align 4
  store i32 %.reload159, ptr %.reg2mem81, align 4
  %.reload92 = load i32, ptr %.reg2mem84, align 4
  %621 = icmp slt i32 %.reload92, %0
  %.reload83 = load i32, ptr %.reg2mem81, align 4
  %.reload94 = load i32, ptr %.reg2mem93, align 4
  %622 = icmp slt i32 %.reload83, %.reload94
  %623 = and i1 %621, %622
  store i1 %623, ptr %.reg2mem78, align 1
  %.reload80 = load i1, ptr %.reg2mem78, align 1
  br i1 %.reload80, label %624, label %713

624:                                              ; preds = %620
  %625 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 0
  %626 = load ptr, ptr %625, align 8
  %627 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %626, 0
  %628 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 1
  %629 = load ptr, ptr %628, align 8
  %630 = insertvalue { ptr, ptr, ptr, i32 } %627, ptr %629, 1
  %631 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 2
  %632 = load ptr, ptr %631, align 8
  %633 = insertvalue { ptr, ptr, ptr, i32 } %630, ptr %632, 2
  %634 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 3
  %635 = load i32, ptr %634, align 4
  %636 = insertvalue { ptr, ptr, ptr, i32 } %633, i32 %635, 3
  %637 = call ptr @llvm.invariant.start.p0(i64 0, ptr %31)
  %638 = call ptr @llvm.invariant.start.p0(i64 40, ptr %626)
  %639 = getelementptr ptr, ptr %626, i32 %635
  %640 = getelementptr ptr, ptr %639, i32 2
  %641 = load ptr, ptr %640, align 8
  %642 = call ptr @behavior_wrapper(ptr %641, { ptr, ptr, ptr, i32 } %636, ptr %32)
  %643 = call i32 %642({ ptr, ptr, ptr, i32 } %636, { ptr, ptr, ptr, i32 } %636, ptr %31)
  store i32 %643, ptr %.reg2mem75, align 4
  store ptr @i32_typ, ptr %34, align 8
  %.reload77 = load i32, ptr %.reg2mem75, align 4
  store i32 %.reload77, ptr %33, align 4
  %644 = load ptr, ptr %34, align 8
  %645 = insertvalue { ptr, i160 } undef, ptr %644, 0
  %646 = load i160, ptr %33, align 4
  %647 = insertvalue { ptr, i160 } %645, i160 %646, 1
  %648 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 0
  %649 = load ptr, ptr %648, align 8
  %650 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %649, 0
  %651 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 1
  %652 = load ptr, ptr %651, align 8
  %653 = insertvalue { ptr, ptr, ptr, i32 } %650, ptr %652, 1
  %654 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 2
  %655 = load ptr, ptr %654, align 8
  %656 = insertvalue { ptr, ptr, ptr, i32 } %653, ptr %655, 2
  %657 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 3
  %658 = load i32, ptr %657, align 4
  %659 = insertvalue { ptr, ptr, ptr, i32 } %656, i32 %658, 3
  %660 = getelementptr [1 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %660, align 8
  %661 = call ptr @llvm.invariant.start.p0(i64 1, ptr %35)
  %662 = call ptr @llvm.invariant.start.p0(i64 688, ptr %649)
  %663 = getelementptr ptr, ptr %649, i32 %658
  %664 = getelementptr ptr, ptr %663, i32 20
  %665 = load ptr, ptr %664, align 8
  %666 = getelementptr { ptr }, ptr %36, i32 0, i32 0
  store ptr %644, ptr %666, align 8
  %667 = call ptr @behavior_wrapper(ptr %665, { ptr, ptr, ptr, i32 } %659, ptr %36)
  %668 = call { ptr, i160 } %667({ ptr, ptr, ptr, i32 } %659, { ptr, ptr, ptr, i32 } %659, ptr %35, { ptr, i160 } %647)
  store { ptr, i160 } %668, ptr %37, align 8
  %669 = getelementptr { ptr, i1 }, ptr %37, i32 0, i32 0
  %670 = load ptr, ptr %669, align 8
  store ptr %670, ptr %39, align 8
  %671 = getelementptr { ptr, i1 }, ptr %37, i32 0, i32 1
  %672 = load i1, ptr %671, align 1
  store i1 %672, ptr %38, align 1
  %673 = load ptr, ptr %39, align 8
  %674 = ptrtoint ptr %673 to i64
  %675 = icmp eq i64 %674, ptrtoint (ptr @nil_typ to i64)
  %676 = icmp eq i64 %674, 0
  %677 = or i1 %675, %676
  br i1 %677, label %678, label %709

678:                                              ; preds = %624
  %679 = load [0 x i8], ptr %38, align 1
  store ptr @i32_typ, ptr %41, align 8
  %.reload76 = load i32, ptr %.reg2mem75, align 4
  store i32 %.reload76, ptr %40, align 4
  %680 = load ptr, ptr %41, align 8
  %681 = insertvalue { ptr, i160 } undef, ptr %680, 0
  %682 = load i160, ptr %40, align 4
  %683 = insertvalue { ptr, i160 } %681, i160 %682, 1
  %684 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %685 = load ptr, ptr %684, align 8
  %686 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %685, 0
  %687 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %688 = load ptr, ptr %687, align 8
  %689 = insertvalue { ptr, ptr, ptr, i32 } %686, ptr %688, 1
  %690 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %691 = load ptr, ptr %690, align 8
  %692 = insertvalue { ptr, ptr, ptr, i32 } %689, ptr %691, 2
  %693 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %694 = load i32, ptr %693, align 4
  %695 = insertvalue { ptr, ptr, ptr, i32 } %692, i32 %694, 3
  %696 = getelementptr [2 x ptr], ptr %42, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %696, align 8
  %697 = getelementptr [2 x ptr], ptr %42, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %697, align 8
  %698 = call ptr @llvm.invariant.start.p0(i64 4, ptr %42)
  %699 = call ptr @llvm.invariant.start.p0(i64 600, ptr %685)
  %700 = getelementptr ptr, ptr %685, i32 %694
  %701 = getelementptr ptr, ptr %700, i32 16
  %702 = load ptr, ptr %701, align 8
  %703 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 0
  store ptr @i32_typ, ptr %703, align 8
  %704 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 1
  store ptr %680, ptr %704, align 8
  %705 = call ptr @behavior_wrapper(ptr %702, { ptr, ptr, ptr, i32 } %695, ptr %43)
  %.reload91 = load i32, ptr %.reg2mem84, align 4
  call void %705({ ptr, ptr, ptr, i32 } %695, { ptr, ptr, ptr, i32 } %695, ptr %42, i32 %.reload91, { ptr, i160 } %683)
  %.reload90 = load i32, ptr %.reg2mem84, align 4
  %706 = add i32 %.reload90, 1
  store i32 %706, ptr %.reg2mem73, align 4
  store [0 x i8] %679, ptr %44, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %45, align 4
  %707 = load ptr, ptr %45, align 8
  store ptr %707, ptr %39, align 8
  %708 = load i1, ptr %44, align 1
  store i1 %708, ptr %38, align 1
  %.reload74 = load i32, ptr %.reg2mem73, align 4
  store i32 %.reload74, ptr %.reg2mem156, align 4
  br label %710

709:                                              ; preds = %624
  %.reload89 = load i32, ptr %.reg2mem84, align 4
  store i32 %.reload89, ptr %.reg2mem156, align 4
  br label %710

710:                                              ; preds = %709, %678
  %.reload157 = load i32, ptr %.reg2mem156, align 4
  store i32 %.reload157, ptr %.reg2mem71, align 4
  br label %711

711:                                              ; preds = %710
  %.reload82 = load i32, ptr %.reg2mem81, align 4
  %712 = add i32 %.reload82, 1
  store i32 %712, ptr %.reg2mem69, align 4
  %.reload70 = load i32, ptr %.reg2mem69, align 4
  %.reload72 = load i32, ptr %.reg2mem71, align 4
  store i32 %.reload70, ptr %.reg2mem152, align 4
  store i32 %.reload72, ptr %.reg2mem154, align 4
  br label %714

713:                                              ; preds = %620
  store i32 poison, ptr %.reg2mem152, align 4
  store i32 poison, ptr %.reg2mem154, align 4
  br label %714

714:                                              ; preds = %713, %711
  %.reload155 = load i32, ptr %.reg2mem154, align 4
  %.reload153 = load i32, ptr %.reg2mem152, align 4
  store i32 %.reload155, ptr %.reg2mem67, align 4
  store i32 %.reload153, ptr %.reg2mem65, align 4
  br label %715

715:                                              ; preds = %714
  %.reload66 = load i32, ptr %.reg2mem65, align 4
  %.reload68 = load i32, ptr %.reg2mem67, align 4
  %.reload79 = load i1, ptr %.reg2mem78, align 1
  %.reload88 = load i32, ptr %.reg2mem84, align 4
  store i32 %.reload66, ptr %.reg2mem148, align 4
  store i32 %.reload68, ptr %.reg2mem150, align 4
  br i1 %.reload79, label %716, label %717

716:                                              ; preds = %715
  %.reload151 = load i32, ptr %.reg2mem150, align 4
  %.reload149 = load i32, ptr %.reg2mem148, align 4
  store i32 %.reload151, ptr %.reg2mem63, align 4
  store i32 %.reload149, ptr %.reg2mem61, align 4
  %.reload62 = load i32, ptr %.reg2mem61, align 4
  %.reload64 = load i32, ptr %.reg2mem63, align 4
  store i32 %.reload62, ptr %.reg2mem158, align 4
  store i32 %.reload64, ptr %.reg2mem160, align 4
  br label %620

717:                                              ; preds = %715
  %.reload87 = load i32, ptr %.reg2mem84, align 4
  %718 = icmp slt i32 %.reload87, %0
  %.reload86 = load i32, ptr %.reg2mem84, align 4
  %719 = select i1 %718, i32 %.reload86, i32 %0
  store i32 %719, ptr %.reg2mem56, align 4
  br i1 %718, label %720, label %._crit_edge1

._crit_edge1:                                     ; preds = %717
  br label %841

720:                                              ; preds = %717
  %721 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 30))
  store ptr %721, ptr %46, align 8
  %722 = getelementptr { ptr }, ptr %46, i32 0, i32 0
  %723 = getelementptr { ptr }, ptr %47, i32 0, i32 0
  %724 = load ptr, ptr %722, align 8
  store ptr %724, ptr %723, align 8
  %725 = call ptr @llvm.invariant.start.p0(i64 16, ptr %47)
  %726 = load ptr, ptr %47, align 8
  %727 = load [29 x i8], ptr @monlt_Warning_Could_only_generate_, align 1
  store [29 x i8] %727, ptr %726, align 1
  store ptr @String, ptr %48, align 8
  %728 = load ptr, ptr %48, align 8
  %729 = getelementptr ptr, ptr %728, i32 6
  %730 = load ptr, ptr %729, align 8
  %731 = call { i64, i64 } @size_wrapper(ptr %730, ptr %48)
  %732 = extractvalue { i64, i64 } %731, 0
  %733 = call ptr @bump_malloc(i64 %732)
  %734 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %735 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  store ptr @String, ptr %49, align 8
  store ptr %733, ptr %734, align 8
  store i32 9, ptr %735, align 4
  %736 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %737 = getelementptr { ptr }, ptr %47, i32 0, i32 0
  %738 = load ptr, ptr %737, align 8
  %739 = insertvalue { ptr } undef, ptr %738, 0
  %740 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %741 = load ptr, ptr %740, align 8
  %742 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %741, 0
  %743 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %744 = load ptr, ptr %743, align 8
  %745 = insertvalue { ptr, ptr, ptr, i32 } %742, ptr %744, 1
  %746 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %747 = load ptr, ptr %746, align 8
  %748 = insertvalue { ptr, ptr, ptr, i32 } %745, ptr %747, 2
  %749 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %750 = load i32, ptr %749, align 4
  %751 = insertvalue { ptr, ptr, ptr, i32 } %748, i32 %750, 3
  %752 = getelementptr [3 x ptr], ptr %50, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %752, align 8
  %753 = getelementptr [3 x ptr], ptr %50, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %753, align 8
  %754 = getelementptr [3 x ptr], ptr %50, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %754, align 8
  %755 = call ptr @llvm.invariant.start.p0(i64 9, ptr %50)
  %756 = call ptr @llvm.invariant.start.p0(i64 280, ptr %741)
  %757 = getelementptr ptr, ptr %741, i32 %750
  %758 = getelementptr ptr, ptr %757, i32 4
  %759 = load ptr, ptr %758, align 8
  %760 = getelementptr { ptr, ptr, ptr }, ptr %51, i32 0, i32 0
  store ptr @buffer_typ, ptr %760, align 8
  %761 = getelementptr { ptr, ptr, ptr }, ptr %51, i32 0, i32 1
  store ptr @i32_typ, ptr %761, align 8
  %762 = getelementptr { ptr, ptr, ptr }, ptr %51, i32 0, i32 2
  store ptr @i32_typ, ptr %762, align 8
  %763 = call ptr @behavior_wrapper(ptr %759, { ptr, ptr, ptr, i32 } %751, ptr %51)
  call void %763({ ptr, ptr, ptr, i32 } %751, { ptr, ptr, ptr, i32 } %751, ptr %50, { ptr } %739, i32 29, i32 30)
  %764 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 0
  %765 = load ptr, ptr %764, align 8
  %766 = insertvalue { ptr, i160 } undef, ptr %765, 0
  %767 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 1
  %768 = load i160, ptr %767, align 4
  %769 = insertvalue { ptr, i160 } %766, i160 %768, 1
  %770 = getelementptr [1 x ptr], ptr %52, i32 0, i32 0
  store ptr @_parameterization_String, ptr %770, align 8
  %771 = call ptr @llvm.invariant.start.p0(i64 1, ptr %52)
  %772 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %773 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %774 = getelementptr { ptr }, ptr %53, i32 0, i32 0
  store ptr %765, ptr %774, align 8
  %775 = call ptr @class_behavior_wrapper(ptr %773, ptr %53)
  call void %775(ptr %52, { ptr, i160 } %769)
  %.reload85 = load i32, ptr %.reg2mem84, align 4
  store i32 %.reload85, ptr %54, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %55, align 4
  %776 = load ptr, ptr %55, align 8
  %777 = insertvalue { ptr, i160 } undef, ptr %776, 0
  %778 = load i160, ptr %54, align 4
  %779 = insertvalue { ptr, i160 } %777, i160 %778, 1
  %780 = getelementptr [1 x ptr], ptr %56, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %780, align 8
  %781 = call ptr @llvm.invariant.start.p0(i64 1, ptr %56)
  %782 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %783 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %784 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  store ptr %776, ptr %784, align 8
  %785 = call ptr @class_behavior_wrapper(ptr %783, ptr %57)
  call void %785(ptr %56, { ptr, i160 } %779)
  %786 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 23))
  store ptr %786, ptr %58, align 8
  %787 = getelementptr { ptr }, ptr %58, i32 0, i32 0
  %788 = getelementptr { ptr }, ptr %59, i32 0, i32 0
  %789 = load ptr, ptr %787, align 8
  store ptr %789, ptr %788, align 8
  %790 = call ptr @llvm.invariant.start.p0(i64 16, ptr %59)
  %791 = load ptr, ptr %59, align 8
  %792 = load [22 x i8], ptr @vltpv__guaranteed_miss_keys, align 1
  store [22 x i8] %792, ptr %791, align 1
  store ptr @String, ptr %60, align 8
  %793 = load ptr, ptr %60, align 8
  %794 = getelementptr ptr, ptr %793, i32 6
  %795 = load ptr, ptr %794, align 8
  %796 = call { i64, i64 } @size_wrapper(ptr %795, ptr %60)
  %797 = extractvalue { i64, i64 } %796, 0
  %798 = call ptr @bump_malloc(i64 %797)
  %799 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %800 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  store ptr @String, ptr %61, align 8
  store ptr %798, ptr %799, align 8
  store i32 9, ptr %800, align 4
  %801 = call ptr @llvm.invariant.start.p0(i64 16, ptr %61)
  %802 = getelementptr { ptr }, ptr %59, i32 0, i32 0
  %803 = load ptr, ptr %802, align 8
  %804 = insertvalue { ptr } undef, ptr %803, 0
  %805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %806 = load ptr, ptr %805, align 8
  %807 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %806, 0
  %808 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %809 = load ptr, ptr %808, align 8
  %810 = insertvalue { ptr, ptr, ptr, i32 } %807, ptr %809, 1
  %811 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %812 = load ptr, ptr %811, align 8
  %813 = insertvalue { ptr, ptr, ptr, i32 } %810, ptr %812, 2
  %814 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %815 = load i32, ptr %814, align 4
  %816 = insertvalue { ptr, ptr, ptr, i32 } %813, i32 %815, 3
  %817 = getelementptr [3 x ptr], ptr %62, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %817, align 8
  %818 = getelementptr [3 x ptr], ptr %62, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %818, align 8
  %819 = getelementptr [3 x ptr], ptr %62, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %819, align 8
  %820 = call ptr @llvm.invariant.start.p0(i64 9, ptr %62)
  %821 = call ptr @llvm.invariant.start.p0(i64 280, ptr %806)
  %822 = getelementptr ptr, ptr %806, i32 %815
  %823 = getelementptr ptr, ptr %822, i32 4
  %824 = load ptr, ptr %823, align 8
  %825 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 0
  store ptr @buffer_typ, ptr %825, align 8
  %826 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 1
  store ptr @i32_typ, ptr %826, align 8
  %827 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 2
  store ptr @i32_typ, ptr %827, align 8
  %828 = call ptr @behavior_wrapper(ptr %824, { ptr, ptr, ptr, i32 } %816, ptr %63)
  call void %828({ ptr, ptr, ptr, i32 } %816, { ptr, ptr, ptr, i32 } %816, ptr %62, { ptr } %804, i32 22, i32 23)
  %829 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 0
  %830 = load ptr, ptr %829, align 8
  %831 = insertvalue { ptr, i160 } undef, ptr %830, 0
  %832 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 1
  %833 = load i160, ptr %832, align 4
  %834 = insertvalue { ptr, i160 } %831, i160 %833, 1
  %835 = getelementptr [1 x ptr], ptr %64, i32 0, i32 0
  store ptr @_parameterization_String, ptr %835, align 8
  %836 = call ptr @llvm.invariant.start.p0(i64 1, ptr %64)
  %837 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %838 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %839 = getelementptr { ptr }, ptr %65, i32 0, i32 0
  store ptr %830, ptr %839, align 8
  %840 = call ptr @class_behavior_wrapper(ptr %838, ptr %65)
  call void %840(ptr %64, { ptr, i160 } %834)
  br label %841

841:                                              ; preds = %._crit_edge1, %720
  %842 = call i64 @clock()
  store i64 %842, ptr %.reg2mem54, align 4
  store i32 0, ptr %.reg2mem142, align 4
  store i32 0, ptr %.reg2mem144, align 4
  store i32 0, ptr %.reg2mem146, align 4
  br label %843

843:                                              ; preds = %918, %841
  %.reload147 = load i32, ptr %.reg2mem146, align 4
  %.reload145 = load i32, ptr %.reg2mem144, align 4
  %.reload143 = load i32, ptr %.reg2mem142, align 4
  store i32 %.reload147, ptr %.reg2mem49, align 4
  store i32 %.reload145, ptr %.reg2mem42, align 4
  store i32 %.reload143, ptr %.reg2mem38, align 4
  %.reload41 = load i32, ptr %.reg2mem38, align 4
  %.reload60 = load i32, ptr %.reg2mem56, align 4
  %844 = icmp slt i32 %.reload41, %.reload60
  store i1 %844, ptr %.reg2mem35, align 1
  %.reload37 = load i1, ptr %.reg2mem35, align 1
  br i1 %.reload37, label %845, label %915

845:                                              ; preds = %843
  %846 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %847 = load ptr, ptr %846, align 8
  %848 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %847, 0
  %849 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %850 = load ptr, ptr %849, align 8
  %851 = insertvalue { ptr, ptr, ptr, i32 } %848, ptr %850, 1
  %852 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %853 = load ptr, ptr %852, align 8
  %854 = insertvalue { ptr, ptr, ptr, i32 } %851, ptr %853, 2
  %855 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %856 = load i32, ptr %855, align 4
  %857 = insertvalue { ptr, ptr, ptr, i32 } %854, i32 %856, 3
  %858 = getelementptr [1 x ptr], ptr %66, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %858, align 8
  %859 = call ptr @llvm.invariant.start.p0(i64 1, ptr %66)
  %860 = call ptr @llvm.invariant.start.p0(i64 600, ptr %847)
  %861 = getelementptr ptr, ptr %847, i32 %856
  %862 = getelementptr ptr, ptr %861, i32 15
  %863 = load ptr, ptr %862, align 8
  %864 = getelementptr { ptr }, ptr %67, i32 0, i32 0
  store ptr @i32_typ, ptr %864, align 8
  %865 = call ptr @behavior_wrapper(ptr %863, { ptr, ptr, ptr, i32 } %857, ptr %67)
  %.reload40 = load i32, ptr %.reg2mem38, align 4
  %866 = call { ptr, i160 } %865({ ptr, ptr, ptr, i32 } %857, { ptr, ptr, ptr, i32 } %857, ptr %66, i32 %.reload40)
  store { ptr, i160 } %866, ptr %68, align 8
  %867 = getelementptr { ptr, i160 }, ptr %68, i32 0, i32 1
  %868 = load i32, ptr %867, align 4
  store ptr @i32_typ, ptr %70, align 8
  store i32 %868, ptr %69, align 4
  %869 = load ptr, ptr %70, align 8
  %870 = insertvalue { ptr, i160 } undef, ptr %869, 0
  %871 = load i160, ptr %69, align 4
  %872 = insertvalue { ptr, i160 } %870, i160 %871, 1
  %873 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 0
  %874 = load ptr, ptr %873, align 8
  %875 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %874, 0
  %876 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 1
  %877 = load ptr, ptr %876, align 8
  %878 = insertvalue { ptr, ptr, ptr, i32 } %875, ptr %877, 1
  %879 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 2
  %880 = load ptr, ptr %879, align 8
  %881 = insertvalue { ptr, ptr, ptr, i32 } %878, ptr %880, 2
  %882 = getelementptr { ptr, ptr, ptr, i32 }, ptr %212, i32 0, i32 3
  %883 = load i32, ptr %882, align 4
  %884 = insertvalue { ptr, ptr, ptr, i32 } %881, i32 %883, 3
  %885 = getelementptr [1 x ptr], ptr %71, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %885, align 8
  %886 = call ptr @llvm.invariant.start.p0(i64 1, ptr %71)
  %887 = call ptr @llvm.invariant.start.p0(i64 688, ptr %874)
  %888 = getelementptr ptr, ptr %874, i32 %883
  %889 = getelementptr ptr, ptr %888, i32 20
  %890 = load ptr, ptr %889, align 8
  %891 = getelementptr { ptr }, ptr %72, i32 0, i32 0
  store ptr %869, ptr %891, align 8
  %892 = call ptr @behavior_wrapper(ptr %890, { ptr, ptr, ptr, i32 } %884, ptr %72)
  %893 = call { ptr, i160 } %892({ ptr, ptr, ptr, i32 } %884, { ptr, ptr, ptr, i32 } %884, ptr %71, { ptr, i160 } %872)
  store { ptr, i160 } %893, ptr %73, align 8
  %894 = getelementptr { ptr, i32 }, ptr %73, i32 0, i32 0
  %895 = load ptr, ptr %894, align 8
  store ptr %895, ptr %75, align 8
  %896 = getelementptr { ptr, i32 }, ptr %73, i32 0, i32 1
  %897 = load i32, ptr %896, align 4
  store i32 %897, ptr %74, align 4
  %898 = load ptr, ptr %75, align 8
  %899 = ptrtoint ptr %898 to i64
  %900 = icmp eq i64 %899, ptrtoint (ptr @nil_typ to i64)
  %901 = icmp eq i64 %899, 0
  %902 = or i1 %900, %901
  br i1 %902, label %903, label %908

903:                                              ; preds = %845
  %904 = load [0 x i8], ptr %74, align 1
  %.reload53 = load i32, ptr %.reg2mem49, align 4
  %905 = add i32 %.reload53, 1
  store i32 %905, ptr %.reg2mem33, align 4
  store [0 x i8] %904, ptr %76, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %77, align 4
  %906 = load ptr, ptr %77, align 8
  store ptr %906, ptr %75, align 8
  %907 = load i32, ptr %76, align 4
  store i32 %907, ptr %74, align 4
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  %.reload47 = load i32, ptr %.reg2mem42, align 4
  store i32 %.reload47, ptr %.reg2mem138, align 4
  store i32 %.reload34, ptr %.reg2mem140, align 4
  br label %912

908:                                              ; preds = %845
  %.reload48 = load i32, ptr %.reg2mem42, align 4
  %909 = add i32 %.reload48, 1
  store i32 %909, ptr %.reg2mem31, align 4
  %910 = load ptr, ptr %75, align 8
  store ptr %910, ptr %75, align 8
  %911 = load i32, ptr %74, align 4
  store i32 %911, ptr %74, align 4
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  %.reload52 = load i32, ptr %.reg2mem49, align 4
  store i32 %.reload32, ptr %.reg2mem138, align 4
  store i32 %.reload52, ptr %.reg2mem140, align 4
  br label %912

912:                                              ; preds = %908, %903
  %.reload141 = load i32, ptr %.reg2mem140, align 4
  %.reload139 = load i32, ptr %.reg2mem138, align 4
  store i32 %.reload141, ptr %.reg2mem29, align 4
  store i32 %.reload139, ptr %.reg2mem27, align 4
  br label %913

913:                                              ; preds = %912
  %.reload39 = load i32, ptr %.reg2mem38, align 4
  %914 = add i32 %.reload39, 1
  store i32 %914, ptr %.reg2mem25, align 4
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  store i32 %.reload26, ptr %.reg2mem132, align 4
  store i32 %.reload28, ptr %.reg2mem134, align 4
  store i32 %.reload30, ptr %.reg2mem136, align 4
  br label %916

915:                                              ; preds = %843
  store i32 poison, ptr %.reg2mem132, align 4
  store i32 poison, ptr %.reg2mem134, align 4
  store i32 poison, ptr %.reg2mem136, align 4
  br label %916

916:                                              ; preds = %915, %913
  %.reload137 = load i32, ptr %.reg2mem136, align 4
  %.reload135 = load i32, ptr %.reg2mem134, align 4
  %.reload133 = load i32, ptr %.reg2mem132, align 4
  store i32 %.reload137, ptr %.reg2mem23, align 4
  store i32 %.reload135, ptr %.reg2mem21, align 4
  store i32 %.reload133, ptr %.reg2mem19, align 4
  br label %917

917:                                              ; preds = %916
  %.reload20 = load i32, ptr %.reg2mem19, align 4
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  %.reload36 = load i1, ptr %.reg2mem35, align 1
  %.reload46 = load i32, ptr %.reg2mem42, align 4
  %.reload51 = load i32, ptr %.reg2mem49, align 4
  store i32 %.reload20, ptr %.reg2mem126, align 4
  store i32 %.reload22, ptr %.reg2mem128, align 4
  store i32 %.reload24, ptr %.reg2mem130, align 4
  br i1 %.reload36, label %918, label %919

918:                                              ; preds = %917
  %.reload131 = load i32, ptr %.reg2mem130, align 4
  %.reload129 = load i32, ptr %.reg2mem128, align 4
  %.reload127 = load i32, ptr %.reg2mem126, align 4
  store i32 %.reload131, ptr %.reg2mem17, align 4
  store i32 %.reload129, ptr %.reg2mem15, align 4
  store i32 %.reload127, ptr %.reg2mem13, align 4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload14, ptr %.reg2mem142, align 4
  store i32 %.reload16, ptr %.reg2mem144, align 4
  store i32 %.reload18, ptr %.reg2mem146, align 4
  br label %843

919:                                              ; preds = %917
  %920 = call i64 @clock()
  store i64 %920, ptr %.reg2mem11, align 4
  %.reload59 = load i32, ptr %.reg2mem56, align 4
  %921 = icmp sgt i32 %.reload59, 0
  store i1 %921, ptr %.reg2mem8, align 1
  %.reload10 = load i1, ptr %.reg2mem8, align 1
  br i1 %.reload10, label %922, label %927

922:                                              ; preds = %919
  %.reload45 = load i32, ptr %.reg2mem42, align 4
  %923 = mul i32 %.reload45, 100
  %.reload58 = load i32, ptr %.reg2mem56, align 4
  %924 = sdiv i32 %923, %.reload58
  %925 = icmp slt i32 %924, 5
  %926 = zext i1 %925 to i32
  store i32 %926, ptr %.reg2mem6, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload7, ptr %.reg2mem124, align 4
  br label %930

927:                                              ; preds = %919
  %.reload44 = load i32, ptr %.reg2mem42, align 4
  %928 = icmp eq i32 %.reload44, 0
  %929 = zext i1 %928 to i32
  store i32 %929, ptr %.reg2mem4, align 4
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  store i32 %.reload5, ptr %.reg2mem124, align 4
  br label %930

930:                                              ; preds = %927, %922
  %.reload125 = load i32, ptr %.reg2mem124, align 4
  store i32 %.reload125, ptr %.reg2mem2, align 4
  br label %931

931:                                              ; preds = %930
  %.reload3 = load i32, ptr %.reg2mem2, align 4
  %932 = zext i32 %.reload3 to i64
  %933 = trunc i64 %932 to i32
  switch i32 %933, label %937 [
    i32 0, label %934
  ]

934:                                              ; preds = %931
  %.reload9 = load i1, ptr %.reg2mem8, align 1
  %935 = select i1 %.reload9, ptr %78, ptr %79
  store i1 false, ptr %935, align 1
  %936 = load i1, ptr %935, align 1
  store i1 %936, ptr %.reg2mem, align 1
  %.reload = load i1, ptr %.reg2mem, align 1
  store i1 %.reload, ptr %.reg2mem122, align 1
  br label %938

937:                                              ; preds = %931
  store i1 true, ptr %.reg2mem122, align 1
  br label %938

938:                                              ; preds = %937, %934
  %.reload123 = load i1, ptr %.reg2mem122, align 1
  %939 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 16))
  store ptr %939, ptr %80, align 8
  %940 = getelementptr { ptr }, ptr %80, i32 0, i32 0
  %941 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %942 = load ptr, ptr %940, align 8
  store ptr %942, ptr %941, align 8
  %943 = call ptr @llvm.invariant.start.p0(i64 16, ptr %81)
  %944 = load ptr, ptr %81, align 8
  %945 = load [15 x i8], ptr @boodd_Get_Random_Miss, align 1
  store [15 x i8] %945, ptr %944, align 1
  store ptr @String, ptr %82, align 8
  %946 = load ptr, ptr %82, align 8
  %947 = getelementptr ptr, ptr %946, i32 6
  %948 = load ptr, ptr %947, align 8
  %949 = call { i64, i64 } @size_wrapper(ptr %948, ptr %82)
  %950 = extractvalue { i64, i64 } %949, 0
  %951 = call ptr @bump_malloc(i64 %950)
  %952 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %953 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  store ptr @String, ptr %83, align 8
  store ptr %951, ptr %952, align 8
  store i32 9, ptr %953, align 4
  %954 = call ptr @llvm.invariant.start.p0(i64 16, ptr %83)
  %955 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %956 = load ptr, ptr %955, align 8
  %957 = insertvalue { ptr } undef, ptr %956, 0
  %958 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %959 = load ptr, ptr %958, align 8
  %960 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %959, 0
  %961 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %962 = load ptr, ptr %961, align 8
  %963 = insertvalue { ptr, ptr, ptr, i32 } %960, ptr %962, 1
  %964 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %965 = load ptr, ptr %964, align 8
  %966 = insertvalue { ptr, ptr, ptr, i32 } %963, ptr %965, 2
  %967 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  %968 = load i32, ptr %967, align 4
  %969 = insertvalue { ptr, ptr, ptr, i32 } %966, i32 %968, 3
  %970 = getelementptr [3 x ptr], ptr %84, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %970, align 8
  %971 = getelementptr [3 x ptr], ptr %84, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %971, align 8
  %972 = getelementptr [3 x ptr], ptr %84, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %972, align 8
  %973 = call ptr @llvm.invariant.start.p0(i64 9, ptr %84)
  %974 = call ptr @llvm.invariant.start.p0(i64 280, ptr %959)
  %975 = getelementptr ptr, ptr %959, i32 %968
  %976 = getelementptr ptr, ptr %975, i32 4
  %977 = load ptr, ptr %976, align 8
  %978 = getelementptr { ptr, ptr, ptr }, ptr %85, i32 0, i32 0
  store ptr @buffer_typ, ptr %978, align 8
  %979 = getelementptr { ptr, ptr, ptr }, ptr %85, i32 0, i32 1
  store ptr @i32_typ, ptr %979, align 8
  %980 = getelementptr { ptr, ptr, ptr }, ptr %85, i32 0, i32 2
  store ptr @i32_typ, ptr %980, align 8
  %981 = call ptr @behavior_wrapper(ptr %977, { ptr, ptr, ptr, i32 } %969, ptr %85)
  call void %981({ ptr, ptr, ptr, i32 } %969, { ptr, ptr, ptr, i32 } %969, ptr %84, { ptr } %957, i32 15, i32 16)
  %.reload12 = load i64, ptr %.reg2mem11, align 4
  %.reload55 = load i64, ptr %.reg2mem54, align 4
  %982 = sub i64 %.reload12, %.reload55
  %983 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %984 = load ptr, ptr %983, align 8
  %985 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %984, 0
  %986 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %987 = load ptr, ptr %986, align 8
  %988 = insertvalue { ptr, ptr, ptr, i32 } %985, ptr %987, 1
  %989 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %990 = load ptr, ptr %989, align 8
  %991 = insertvalue { ptr, ptr, ptr, i32 } %988, ptr %990, 2
  %992 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  %993 = load i32, ptr %992, align 4
  %994 = insertvalue { ptr, ptr, ptr, i32 } %991, i32 %993, 3
  %.reload57 = load i32, ptr %.reg2mem56, align 4
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %994, i32 %.reload57, i64 %982)
  %995 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 19))
  store ptr %995, ptr %86, align 8
  %996 = getelementptr { ptr }, ptr %86, i32 0, i32 0
  %997 = getelementptr { ptr }, ptr %87, i32 0, i32 0
  %998 = load ptr, ptr %996, align 8
  store ptr %998, ptr %997, align 8
  %999 = call ptr @llvm.invariant.start.p0(i64 16, ptr %87)
  %1000 = load ptr, ptr %87, align 8
  %1001 = load [18 x i8], ptr @yregk_____Verification_, align 1
  store [18 x i8] %1001, ptr %1000, align 1
  store ptr @String, ptr %88, align 8
  %1002 = load ptr, ptr %88, align 8
  %1003 = getelementptr ptr, ptr %1002, i32 6
  %1004 = load ptr, ptr %1003, align 8
  %1005 = call { i64, i64 } @size_wrapper(ptr %1004, ptr %88)
  %1006 = extractvalue { i64, i64 } %1005, 0
  %1007 = call ptr @bump_malloc(i64 %1006)
  %1008 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %1009 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  store ptr @String, ptr %89, align 8
  store ptr %1007, ptr %1008, align 8
  store i32 9, ptr %1009, align 4
  %1010 = call ptr @llvm.invariant.start.p0(i64 16, ptr %89)
  %1011 = getelementptr { ptr }, ptr %87, i32 0, i32 0
  %1012 = load ptr, ptr %1011, align 8
  %1013 = insertvalue { ptr } undef, ptr %1012, 0
  %1014 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 0
  %1015 = load ptr, ptr %1014, align 8
  %1016 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1015, 0
  %1017 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %1018 = load ptr, ptr %1017, align 8
  %1019 = insertvalue { ptr, ptr, ptr, i32 } %1016, ptr %1018, 1
  %1020 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 2
  %1021 = load ptr, ptr %1020, align 8
  %1022 = insertvalue { ptr, ptr, ptr, i32 } %1019, ptr %1021, 2
  %1023 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  %1024 = load i32, ptr %1023, align 4
  %1025 = insertvalue { ptr, ptr, ptr, i32 } %1022, i32 %1024, 3
  %1026 = getelementptr [3 x ptr], ptr %90, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1026, align 8
  %1027 = getelementptr [3 x ptr], ptr %90, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1027, align 8
  %1028 = getelementptr [3 x ptr], ptr %90, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1028, align 8
  %1029 = call ptr @llvm.invariant.start.p0(i64 9, ptr %90)
  %1030 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1015)
  %1031 = getelementptr ptr, ptr %1015, i32 %1024
  %1032 = getelementptr ptr, ptr %1031, i32 4
  %1033 = load ptr, ptr %1032, align 8
  %1034 = getelementptr { ptr, ptr, ptr }, ptr %91, i32 0, i32 0
  store ptr @buffer_typ, ptr %1034, align 8
  %1035 = getelementptr { ptr, ptr, ptr }, ptr %91, i32 0, i32 1
  store ptr @i32_typ, ptr %1035, align 8
  %1036 = getelementptr { ptr, ptr, ptr }, ptr %91, i32 0, i32 2
  store ptr @i32_typ, ptr %1036, align 8
  %1037 = call ptr @behavior_wrapper(ptr %1033, { ptr, ptr, ptr, i32 } %1025, ptr %91)
  call void %1037({ ptr, ptr, ptr, i32 } %1025, { ptr, ptr, ptr, i32 } %1025, ptr %90, { ptr } %1013, i32 18, i32 19)
  %1038 = getelementptr { ptr, i160 }, ptr %89, i32 0, i32 0
  %1039 = load ptr, ptr %1038, align 8
  %1040 = insertvalue { ptr, i160 } undef, ptr %1039, 0
  %1041 = getelementptr { ptr, i160 }, ptr %89, i32 0, i32 1
  %1042 = load i160, ptr %1041, align 4
  %1043 = insertvalue { ptr, i160 } %1040, i160 %1042, 1
  %1044 = getelementptr [1 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1044, align 8
  %1045 = call ptr @llvm.invariant.start.p0(i64 1, ptr %92)
  %1046 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1047 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1048 = getelementptr { ptr }, ptr %93, i32 0, i32 0
  store ptr %1039, ptr %1048, align 8
  %1049 = call ptr @class_behavior_wrapper(ptr %1047, ptr %93)
  call void %1049(ptr %92, { ptr, i160 } %1043)
  br i1 %.reload123, label %1050, label %1106

1050:                                             ; preds = %938
  %1051 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %1051, ptr %94, align 8
  %1052 = getelementptr { ptr }, ptr %94, i32 0, i32 0
  %1053 = getelementptr { ptr }, ptr %95, i32 0, i32 0
  %1054 = load ptr, ptr %1052, align 8
  store ptr %1054, ptr %1053, align 8
  %1055 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  %1056 = load ptr, ptr %95, align 8
  %1057 = load [4 x i8], ptr @qgcyq_PASS, align 1
  store [4 x i8] %1057, ptr %1056, align 1
  store ptr @String, ptr %96, align 8
  %1058 = load ptr, ptr %96, align 8
  %1059 = getelementptr ptr, ptr %1058, i32 6
  %1060 = load ptr, ptr %1059, align 8
  %1061 = call { i64, i64 } @size_wrapper(ptr %1060, ptr %96)
  %1062 = extractvalue { i64, i64 } %1061, 0
  %1063 = call ptr @bump_malloc(i64 %1062)
  %1064 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %1065 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  store ptr @String, ptr %97, align 8
  store ptr %1063, ptr %1064, align 8
  store i32 9, ptr %1065, align 4
  %1066 = call ptr @llvm.invariant.start.p0(i64 16, ptr %97)
  %1067 = getelementptr { ptr }, ptr %95, i32 0, i32 0
  %1068 = load ptr, ptr %1067, align 8
  %1069 = insertvalue { ptr } undef, ptr %1068, 0
  %1070 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %1071 = load ptr, ptr %1070, align 8
  %1072 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1071, 0
  %1073 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %1074 = load ptr, ptr %1073, align 8
  %1075 = insertvalue { ptr, ptr, ptr, i32 } %1072, ptr %1074, 1
  %1076 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %1077 = load ptr, ptr %1076, align 8
  %1078 = insertvalue { ptr, ptr, ptr, i32 } %1075, ptr %1077, 2
  %1079 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %1080 = load i32, ptr %1079, align 4
  %1081 = insertvalue { ptr, ptr, ptr, i32 } %1078, i32 %1080, 3
  %1082 = getelementptr [3 x ptr], ptr %98, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1082, align 8
  %1083 = getelementptr [3 x ptr], ptr %98, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1083, align 8
  %1084 = getelementptr [3 x ptr], ptr %98, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1084, align 8
  %1085 = call ptr @llvm.invariant.start.p0(i64 9, ptr %98)
  %1086 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1071)
  %1087 = getelementptr ptr, ptr %1071, i32 %1080
  %1088 = getelementptr ptr, ptr %1087, i32 4
  %1089 = load ptr, ptr %1088, align 8
  %1090 = getelementptr { ptr, ptr, ptr }, ptr %99, i32 0, i32 0
  store ptr @buffer_typ, ptr %1090, align 8
  %1091 = getelementptr { ptr, ptr, ptr }, ptr %99, i32 0, i32 1
  store ptr @i32_typ, ptr %1091, align 8
  %1092 = getelementptr { ptr, ptr, ptr }, ptr %99, i32 0, i32 2
  store ptr @i32_typ, ptr %1092, align 8
  %1093 = call ptr @behavior_wrapper(ptr %1089, { ptr, ptr, ptr, i32 } %1081, ptr %99)
  call void %1093({ ptr, ptr, ptr, i32 } %1081, { ptr, ptr, ptr, i32 } %1081, ptr %98, { ptr } %1069, i32 4, i32 5)
  %1094 = getelementptr { ptr, i160 }, ptr %97, i32 0, i32 0
  %1095 = load ptr, ptr %1094, align 8
  %1096 = insertvalue { ptr, i160 } undef, ptr %1095, 0
  %1097 = getelementptr { ptr, i160 }, ptr %97, i32 0, i32 1
  %1098 = load i160, ptr %1097, align 4
  %1099 = insertvalue { ptr, i160 } %1096, i160 %1098, 1
  %1100 = getelementptr [1 x ptr], ptr %100, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1100, align 8
  %1101 = call ptr @llvm.invariant.start.p0(i64 1, ptr %100)
  %1102 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1103 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1104 = getelementptr { ptr }, ptr %101, i32 0, i32 0
  store ptr %1095, ptr %1104, align 8
  %1105 = call ptr @class_behavior_wrapper(ptr %1103, ptr %101)
  call void %1105(ptr %100, { ptr, i160 } %1099)
  br label %1162

1106:                                             ; preds = %938
  %1107 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %1107, ptr %102, align 8
  %1108 = getelementptr { ptr }, ptr %102, i32 0, i32 0
  %1109 = getelementptr { ptr }, ptr %103, i32 0, i32 0
  %1110 = load ptr, ptr %1108, align 8
  store ptr %1110, ptr %1109, align 8
  %1111 = call ptr @llvm.invariant.start.p0(i64 16, ptr %103)
  %1112 = load ptr, ptr %103, align 8
  %1113 = load [4 x i8], ptr @pzbcl_FAIL, align 1
  store [4 x i8] %1113, ptr %1112, align 1
  store ptr @String, ptr %104, align 8
  %1114 = load ptr, ptr %104, align 8
  %1115 = getelementptr ptr, ptr %1114, i32 6
  %1116 = load ptr, ptr %1115, align 8
  %1117 = call { i64, i64 } @size_wrapper(ptr %1116, ptr %104)
  %1118 = extractvalue { i64, i64 } %1117, 0
  %1119 = call ptr @bump_malloc(i64 %1118)
  %1120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %1121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  store ptr @String, ptr %105, align 8
  store ptr %1119, ptr %1120, align 8
  store i32 9, ptr %1121, align 4
  %1122 = call ptr @llvm.invariant.start.p0(i64 16, ptr %105)
  %1123 = getelementptr { ptr }, ptr %103, i32 0, i32 0
  %1124 = load ptr, ptr %1123, align 8
  %1125 = insertvalue { ptr } undef, ptr %1124, 0
  %1126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %1127 = load ptr, ptr %1126, align 8
  %1128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1127, 0
  %1129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %1130 = load ptr, ptr %1129, align 8
  %1131 = insertvalue { ptr, ptr, ptr, i32 } %1128, ptr %1130, 1
  %1132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %1133 = load ptr, ptr %1132, align 8
  %1134 = insertvalue { ptr, ptr, ptr, i32 } %1131, ptr %1133, 2
  %1135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %1136 = load i32, ptr %1135, align 4
  %1137 = insertvalue { ptr, ptr, ptr, i32 } %1134, i32 %1136, 3
  %1138 = getelementptr [3 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1138, align 8
  %1139 = getelementptr [3 x ptr], ptr %106, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1139, align 8
  %1140 = getelementptr [3 x ptr], ptr %106, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1140, align 8
  %1141 = call ptr @llvm.invariant.start.p0(i64 9, ptr %106)
  %1142 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1127)
  %1143 = getelementptr ptr, ptr %1127, i32 %1136
  %1144 = getelementptr ptr, ptr %1143, i32 4
  %1145 = load ptr, ptr %1144, align 8
  %1146 = getelementptr { ptr, ptr, ptr }, ptr %107, i32 0, i32 0
  store ptr @buffer_typ, ptr %1146, align 8
  %1147 = getelementptr { ptr, ptr, ptr }, ptr %107, i32 0, i32 1
  store ptr @i32_typ, ptr %1147, align 8
  %1148 = getelementptr { ptr, ptr, ptr }, ptr %107, i32 0, i32 2
  store ptr @i32_typ, ptr %1148, align 8
  %1149 = call ptr @behavior_wrapper(ptr %1145, { ptr, ptr, ptr, i32 } %1137, ptr %107)
  call void %1149({ ptr, ptr, ptr, i32 } %1137, { ptr, ptr, ptr, i32 } %1137, ptr %106, { ptr } %1125, i32 4, i32 5)
  %1150 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 0
  %1151 = load ptr, ptr %1150, align 8
  %1152 = insertvalue { ptr, i160 } undef, ptr %1151, 0
  %1153 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 1
  %1154 = load i160, ptr %1153, align 4
  %1155 = insertvalue { ptr, i160 } %1152, i160 %1154, 1
  %1156 = getelementptr [1 x ptr], ptr %108, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1156, align 8
  %1157 = call ptr @llvm.invariant.start.p0(i64 1, ptr %108)
  %1158 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1159 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1160 = getelementptr { ptr }, ptr %109, i32 0, i32 0
  store ptr %1151, ptr %1160, align 8
  %1161 = call ptr @class_behavior_wrapper(ptr %1159, ptr %109)
  call void %1161(ptr %108, { ptr, i160 } %1155)
  br label %1162

1162:                                             ; preds = %1106, %1050
  %1163 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 14))
  store ptr %1163, ptr %110, align 8
  %1164 = getelementptr { ptr }, ptr %110, i32 0, i32 0
  %1165 = getelementptr { ptr }, ptr %111, i32 0, i32 0
  %1166 = load ptr, ptr %1164, align 8
  store ptr %1166, ptr %1165, align 8
  %1167 = call ptr @llvm.invariant.start.p0(i64 16, ptr %111)
  %1168 = load ptr, ptr %111, align 8
  %1169 = load [13 x i8], ptr @wwuso_____Misses_, align 1
  store [13 x i8] %1169, ptr %1168, align 1
  store ptr @String, ptr %112, align 8
  %1170 = load ptr, ptr %112, align 8
  %1171 = getelementptr ptr, ptr %1170, i32 6
  %1172 = load ptr, ptr %1171, align 8
  %1173 = call { i64, i64 } @size_wrapper(ptr %1172, ptr %112)
  %1174 = extractvalue { i64, i64 } %1173, 0
  %1175 = call ptr @bump_malloc(i64 %1174)
  %1176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 1
  %1177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 3
  store ptr @String, ptr %113, align 8
  store ptr %1175, ptr %1176, align 8
  store i32 9, ptr %1177, align 4
  %1178 = call ptr @llvm.invariant.start.p0(i64 16, ptr %113)
  %1179 = getelementptr { ptr }, ptr %111, i32 0, i32 0
  %1180 = load ptr, ptr %1179, align 8
  %1181 = insertvalue { ptr } undef, ptr %1180, 0
  %1182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 0
  %1183 = load ptr, ptr %1182, align 8
  %1184 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1183, 0
  %1185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 1
  %1186 = load ptr, ptr %1185, align 8
  %1187 = insertvalue { ptr, ptr, ptr, i32 } %1184, ptr %1186, 1
  %1188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 2
  %1189 = load ptr, ptr %1188, align 8
  %1190 = insertvalue { ptr, ptr, ptr, i32 } %1187, ptr %1189, 2
  %1191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 3
  %1192 = load i32, ptr %1191, align 4
  %1193 = insertvalue { ptr, ptr, ptr, i32 } %1190, i32 %1192, 3
  %1194 = getelementptr [3 x ptr], ptr %114, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1194, align 8
  %1195 = getelementptr [3 x ptr], ptr %114, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1195, align 8
  %1196 = getelementptr [3 x ptr], ptr %114, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1196, align 8
  %1197 = call ptr @llvm.invariant.start.p0(i64 9, ptr %114)
  %1198 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1183)
  %1199 = getelementptr ptr, ptr %1183, i32 %1192
  %1200 = getelementptr ptr, ptr %1199, i32 4
  %1201 = load ptr, ptr %1200, align 8
  %1202 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 0
  store ptr @buffer_typ, ptr %1202, align 8
  %1203 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 1
  store ptr @i32_typ, ptr %1203, align 8
  %1204 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 2
  store ptr @i32_typ, ptr %1204, align 8
  %1205 = call ptr @behavior_wrapper(ptr %1201, { ptr, ptr, ptr, i32 } %1193, ptr %115)
  call void %1205({ ptr, ptr, ptr, i32 } %1193, { ptr, ptr, ptr, i32 } %1193, ptr %114, { ptr } %1181, i32 13, i32 14)
  %1206 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 0
  %1207 = load ptr, ptr %1206, align 8
  %1208 = insertvalue { ptr, i160 } undef, ptr %1207, 0
  %1209 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 1
  %1210 = load i160, ptr %1209, align 4
  %1211 = insertvalue { ptr, i160 } %1208, i160 %1210, 1
  %1212 = getelementptr [1 x ptr], ptr %116, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1212, align 8
  %1213 = call ptr @llvm.invariant.start.p0(i64 1, ptr %116)
  %1214 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1215 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1216 = getelementptr { ptr }, ptr %117, i32 0, i32 0
  store ptr %1207, ptr %1216, align 8
  %1217 = call ptr @class_behavior_wrapper(ptr %1215, ptr %117)
  call void %1217(ptr %116, { ptr, i160 } %1211)
  %.reload50 = load i32, ptr %.reg2mem49, align 4
  store i32 %.reload50, ptr %118, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %119, align 4
  %1218 = load ptr, ptr %119, align 8
  %1219 = insertvalue { ptr, i160 } undef, ptr %1218, 0
  %1220 = load i160, ptr %118, align 4
  %1221 = insertvalue { ptr, i160 } %1219, i160 %1220, 1
  %1222 = getelementptr [1 x ptr], ptr %120, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1222, align 8
  %1223 = call ptr @llvm.invariant.start.p0(i64 1, ptr %120)
  %1224 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1225 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1226 = getelementptr { ptr }, ptr %121, i32 0, i32 0
  store ptr %1218, ptr %1226, align 8
  %1227 = call ptr @class_behavior_wrapper(ptr %1225, ptr %121)
  call void %1227(ptr %120, { ptr, i160 } %1221)
  %1228 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 9))
  store ptr %1228, ptr %122, align 8
  %1229 = getelementptr { ptr }, ptr %122, i32 0, i32 0
  %1230 = getelementptr { ptr }, ptr %123, i32 0, i32 0
  %1231 = load ptr, ptr %1229, align 8
  store ptr %1231, ptr %1230, align 8
  %1232 = call ptr @llvm.invariant.start.p0(i64 16, ptr %123)
  %1233 = load ptr, ptr %123, align 8
  %1234 = load [8 x i8], ptr @qennl__Hits_, align 1
  store [8 x i8] %1234, ptr %1233, align 1
  store ptr @String, ptr %124, align 8
  %1235 = load ptr, ptr %124, align 8
  %1236 = getelementptr ptr, ptr %1235, i32 6
  %1237 = load ptr, ptr %1236, align 8
  %1238 = call { i64, i64 } @size_wrapper(ptr %1237, ptr %124)
  %1239 = extractvalue { i64, i64 } %1238, 0
  %1240 = call ptr @bump_malloc(i64 %1239)
  %1241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %1242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  store ptr @String, ptr %125, align 8
  store ptr %1240, ptr %1241, align 8
  store i32 9, ptr %1242, align 4
  %1243 = call ptr @llvm.invariant.start.p0(i64 16, ptr %125)
  %1244 = getelementptr { ptr }, ptr %123, i32 0, i32 0
  %1245 = load ptr, ptr %1244, align 8
  %1246 = insertvalue { ptr } undef, ptr %1245, 0
  %1247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %1248 = load ptr, ptr %1247, align 8
  %1249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1248, 0
  %1250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %1251 = load ptr, ptr %1250, align 8
  %1252 = insertvalue { ptr, ptr, ptr, i32 } %1249, ptr %1251, 1
  %1253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %1254 = load ptr, ptr %1253, align 8
  %1255 = insertvalue { ptr, ptr, ptr, i32 } %1252, ptr %1254, 2
  %1256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %1257 = load i32, ptr %1256, align 4
  %1258 = insertvalue { ptr, ptr, ptr, i32 } %1255, i32 %1257, 3
  %1259 = getelementptr [3 x ptr], ptr %126, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1259, align 8
  %1260 = getelementptr [3 x ptr], ptr %126, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1260, align 8
  %1261 = getelementptr [3 x ptr], ptr %126, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1261, align 8
  %1262 = call ptr @llvm.invariant.start.p0(i64 9, ptr %126)
  %1263 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1248)
  %1264 = getelementptr ptr, ptr %1248, i32 %1257
  %1265 = getelementptr ptr, ptr %1264, i32 4
  %1266 = load ptr, ptr %1265, align 8
  %1267 = getelementptr { ptr, ptr, ptr }, ptr %127, i32 0, i32 0
  store ptr @buffer_typ, ptr %1267, align 8
  %1268 = getelementptr { ptr, ptr, ptr }, ptr %127, i32 0, i32 1
  store ptr @i32_typ, ptr %1268, align 8
  %1269 = getelementptr { ptr, ptr, ptr }, ptr %127, i32 0, i32 2
  store ptr @i32_typ, ptr %1269, align 8
  %1270 = call ptr @behavior_wrapper(ptr %1266, { ptr, ptr, ptr, i32 } %1258, ptr %127)
  call void %1270({ ptr, ptr, ptr, i32 } %1258, { ptr, ptr, ptr, i32 } %1258, ptr %126, { ptr } %1246, i32 8, i32 9)
  %1271 = getelementptr { ptr, i160 }, ptr %125, i32 0, i32 0
  %1272 = load ptr, ptr %1271, align 8
  %1273 = insertvalue { ptr, i160 } undef, ptr %1272, 0
  %1274 = getelementptr { ptr, i160 }, ptr %125, i32 0, i32 1
  %1275 = load i160, ptr %1274, align 4
  %1276 = insertvalue { ptr, i160 } %1273, i160 %1275, 1
  %1277 = getelementptr [1 x ptr], ptr %128, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1277, align 8
  %1278 = call ptr @llvm.invariant.start.p0(i64 1, ptr %128)
  %1279 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1280 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1281 = getelementptr { ptr }, ptr %129, i32 0, i32 0
  store ptr %1272, ptr %1281, align 8
  %1282 = call ptr @class_behavior_wrapper(ptr %1280, ptr %129)
  call void %1282(ptr %128, { ptr, i160 } %1276)
  %.reload43 = load i32, ptr %.reg2mem42, align 4
  store i32 %.reload43, ptr %130, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %131, align 4
  %1283 = load ptr, ptr %131, align 8
  %1284 = insertvalue { ptr, i160 } undef, ptr %1283, 0
  %1285 = load i160, ptr %130, align 4
  %1286 = insertvalue { ptr, i160 } %1284, i160 %1285, 1
  %1287 = getelementptr [1 x ptr], ptr %132, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1287, align 8
  %1288 = call ptr @llvm.invariant.start.p0(i64 1, ptr %132)
  %1289 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1290 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1291 = getelementptr { ptr }, ptr %133, i32 0, i32 0
  store ptr %1283, ptr %1291, align 8
  %1292 = call ptr @class_behavior_wrapper(ptr %1290, ptr %133)
  call void %1292(ptr %132, { ptr, i160 } %1286)
  %1293 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 2))
  store ptr %1293, ptr %134, align 8
  %1294 = getelementptr { ptr }, ptr %134, i32 0, i32 0
  %1295 = getelementptr { ptr }, ptr %135, i32 0, i32 0
  %1296 = load ptr, ptr %1294, align 8
  store ptr %1296, ptr %1295, align 8
  %1297 = call ptr @llvm.invariant.start.p0(i64 16, ptr %135)
  %1298 = load ptr, ptr %135, align 8
  %1299 = load [1 x i8], ptr @fhwka_, align 1
  store [1 x i8] %1299, ptr %1298, align 1
  store ptr @String, ptr %136, align 8
  %1300 = load ptr, ptr %136, align 8
  %1301 = getelementptr ptr, ptr %1300, i32 6
  %1302 = load ptr, ptr %1301, align 8
  %1303 = call { i64, i64 } @size_wrapper(ptr %1302, ptr %136)
  %1304 = extractvalue { i64, i64 } %1303, 0
  %1305 = call ptr @bump_malloc(i64 %1304)
  %1306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %1307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  store ptr @String, ptr %137, align 8
  store ptr %1305, ptr %1306, align 8
  store i32 9, ptr %1307, align 4
  %1308 = call ptr @llvm.invariant.start.p0(i64 16, ptr %137)
  %1309 = getelementptr { ptr }, ptr %135, i32 0, i32 0
  %1310 = load ptr, ptr %1309, align 8
  %1311 = insertvalue { ptr } undef, ptr %1310, 0
  %1312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 0
  %1313 = load ptr, ptr %1312, align 8
  %1314 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1313, 0
  %1315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %1316 = load ptr, ptr %1315, align 8
  %1317 = insertvalue { ptr, ptr, ptr, i32 } %1314, ptr %1316, 1
  %1318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 2
  %1319 = load ptr, ptr %1318, align 8
  %1320 = insertvalue { ptr, ptr, ptr, i32 } %1317, ptr %1319, 2
  %1321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  %1322 = load i32, ptr %1321, align 4
  %1323 = insertvalue { ptr, ptr, ptr, i32 } %1320, i32 %1322, 3
  %1324 = getelementptr [3 x ptr], ptr %138, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1324, align 8
  %1325 = getelementptr [3 x ptr], ptr %138, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1325, align 8
  %1326 = getelementptr [3 x ptr], ptr %138, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1326, align 8
  %1327 = call ptr @llvm.invariant.start.p0(i64 9, ptr %138)
  %1328 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1313)
  %1329 = getelementptr ptr, ptr %1313, i32 %1322
  %1330 = getelementptr ptr, ptr %1329, i32 4
  %1331 = load ptr, ptr %1330, align 8
  %1332 = getelementptr { ptr, ptr, ptr }, ptr %139, i32 0, i32 0
  store ptr @buffer_typ, ptr %1332, align 8
  %1333 = getelementptr { ptr, ptr, ptr }, ptr %139, i32 0, i32 1
  store ptr @i32_typ, ptr %1333, align 8
  %1334 = getelementptr { ptr, ptr, ptr }, ptr %139, i32 0, i32 2
  store ptr @i32_typ, ptr %1334, align 8
  %1335 = call ptr @behavior_wrapper(ptr %1331, { ptr, ptr, ptr, i32 } %1323, ptr %139)
  call void %1335({ ptr, ptr, ptr, i32 } %1323, { ptr, ptr, ptr, i32 } %1323, ptr %138, { ptr } %1311, i32 1, i32 2)
  %1336 = getelementptr { ptr, i160 }, ptr %137, i32 0, i32 0
  %1337 = load ptr, ptr %1336, align 8
  %1338 = insertvalue { ptr, i160 } undef, ptr %1337, 0
  %1339 = getelementptr { ptr, i160 }, ptr %137, i32 0, i32 1
  %1340 = load i160, ptr %1339, align 4
  %1341 = insertvalue { ptr, i160 } %1338, i160 %1340, 1
  %1342 = getelementptr [1 x ptr], ptr %140, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1342, align 8
  %1343 = call ptr @llvm.invariant.start.p0(i64 1, ptr %140)
  %1344 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1345 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1346 = getelementptr { ptr }, ptr %141, i32 0, i32 0
  store ptr %1337, ptr %1346, align 8
  %1347 = call ptr @class_behavior_wrapper(ptr %1345, ptr %141)
  call void %1347(ptr %140, { ptr, i160 } %1341)
  ret void
}

define void @benchmark_remove_random(i32 %0) {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca {}, align 8
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i1, align 1
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca [2 x ptr], align 8
  %16 = alloca { ptr, ptr }, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca [2 x ptr], align 8
  %20 = alloca { ptr, ptr }, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = alloca i160, align 8
  %24 = alloca ptr, align 8
  %25 = alloca [2 x ptr], align 8
  %26 = alloca { ptr, ptr }, align 8
  %27 = alloca i1, align 1
  %28 = alloca ptr, align 8
  %29 = alloca ptr, align 8
  %30 = alloca { ptr }, align 8
  %31 = alloca [1 x ptr], align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = alloca [3 x ptr], align 8
  %34 = alloca { ptr, ptr, ptr }, align 8
  %35 = alloca [1 x ptr], align 8
  %36 = alloca { ptr }, align 8
  %37 = alloca i160, align 8
  %38 = alloca ptr, align 8
  %39 = alloca [1 x ptr], align 8
  %40 = alloca { ptr }, align 8
  %41 = alloca ptr, align 8
  %42 = alloca { ptr }, align 8
  %43 = alloca [1 x ptr], align 8
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca [3 x ptr], align 8
  %46 = alloca { ptr, ptr, ptr }, align 8
  %47 = alloca [1 x ptr], align 8
  %48 = alloca { ptr }, align 8
  %49 = alloca [1 x ptr], align 8
  %50 = alloca { ptr }, align 8
  %51 = alloca { ptr, i160 }, align 8
  %52 = alloca i160, align 8
  %53 = alloca ptr, align 8
  %54 = alloca [1 x ptr], align 8
  %55 = alloca { ptr }, align 8
  %56 = alloca { ptr, i160 }, align 8
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca ptr, align 8
  %60 = alloca { ptr }, align 8
  %61 = alloca [1 x ptr], align 8
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = alloca [3 x ptr], align 8
  %64 = alloca { ptr, ptr, ptr }, align 8
  %65 = alloca [1 x ptr], align 8
  %66 = alloca { ptr }, align 8
  %67 = alloca i160, align 8
  %68 = alloca ptr, align 8
  %69 = alloca [1 x ptr], align 8
  %70 = alloca { ptr }, align 8
  %71 = alloca i32, align 4
  %72 = alloca ptr, align 8
  %73 = alloca ptr, align 8
  %74 = alloca { ptr }, align 8
  %75 = alloca [1 x ptr], align 8
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = alloca [3 x ptr], align 8
  %78 = alloca { ptr, ptr, ptr }, align 8
  %79 = alloca [1 x ptr], align 8
  %80 = alloca { ptr }, align 8
  %81 = alloca i160, align 8
  %82 = alloca ptr, align 8
  %83 = alloca [1 x ptr], align 8
  %84 = alloca { ptr }, align 8
  %85 = alloca [0 x ptr], align 8
  %86 = alloca {}, align 8
  %87 = alloca [1 x ptr], align 8
  %88 = alloca { ptr }, align 8
  %89 = alloca { ptr, i160 }, align 8
  %90 = alloca i160, align 8
  %91 = alloca ptr, align 8
  %92 = alloca [1 x ptr], align 8
  %93 = alloca { ptr }, align 8
  %94 = alloca { ptr, i160 }, align 8
  %95 = alloca i32, align 4
  %96 = alloca ptr, align 8
  %97 = alloca i32, align 4
  %98 = alloca ptr, align 8
  %99 = alloca ptr, align 8
  %100 = alloca { ptr }, align 8
  %101 = alloca [1 x ptr], align 8
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = alloca [3 x ptr], align 8
  %104 = alloca { ptr, ptr, ptr }, align 8
  %105 = alloca ptr, align 8
  %106 = alloca { ptr }, align 8
  %107 = alloca [1 x ptr], align 8
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  %109 = alloca [3 x ptr], align 8
  %110 = alloca { ptr, ptr, ptr }, align 8
  %111 = alloca [1 x ptr], align 8
  %112 = alloca { ptr }, align 8
  %113 = alloca ptr, align 8
  %114 = alloca { ptr }, align 8
  %115 = alloca [1 x ptr], align 8
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  %117 = alloca [3 x ptr], align 8
  %118 = alloca { ptr, ptr, ptr }, align 8
  %119 = alloca [1 x ptr], align 8
  %120 = alloca { ptr }, align 8
  %121 = alloca ptr, align 8
  %122 = alloca { ptr }, align 8
  %123 = alloca [1 x ptr], align 8
  %124 = alloca { ptr, ptr, ptr, i32 }, align 8
  %125 = alloca [3 x ptr], align 8
  %126 = alloca { ptr, ptr, ptr }, align 8
  %127 = alloca [1 x ptr], align 8
  %128 = alloca { ptr }, align 8
  %129 = alloca ptr, align 8
  %130 = alloca { ptr }, align 8
  %131 = alloca [1 x ptr], align 8
  %132 = alloca { ptr, ptr, ptr, i32 }, align 8
  %133 = alloca [3 x ptr], align 8
  %134 = alloca { ptr, ptr, ptr }, align 8
  %135 = alloca [1 x ptr], align 8
  %136 = alloca { ptr }, align 8
  %137 = alloca i160, align 8
  %138 = alloca ptr, align 8
  %139 = alloca [1 x ptr], align 8
  %140 = alloca { ptr }, align 8
  %141 = alloca ptr, align 8
  %142 = alloca { ptr }, align 8
  %143 = alloca [1 x ptr], align 8
  %144 = alloca { ptr, ptr, ptr, i32 }, align 8
  %145 = alloca [3 x ptr], align 8
  %146 = alloca { ptr, ptr, ptr }, align 8
  %147 = alloca [1 x ptr], align 8
  %148 = alloca { ptr }, align 8
  %149 = alloca [4 x ptr], align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca i1, align 1
  %.reg2mem14 = alloca i32, align 4
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca i1, align 1
  %.reg2mem20 = alloca i32, align 4
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem24 = alloca i1, align 1
  %.reg2mem26 = alloca i32, align 4
  %.reg2mem28 = alloca i32, align 4
  %.reg2mem30 = alloca i1, align 1
  %.reg2mem32 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem40 = alloca i1, align 1
  %.reg2mem43 = alloca i32, align 4
  %.reg2mem47 = alloca i1, align 1
  %.reg2mem51 = alloca i32, align 4
  %.reg2mem57 = alloca i64, align 8
  %.reg2mem59 = alloca i32, align 4
  %.reg2mem64 = alloca i32, align 4
  %.reg2mem66 = alloca i32, align 4
  %.reg2mem68 = alloca i32, align 4
  %.reg2mem70 = alloca i32, align 4
  %.reg2mem72 = alloca i32, align 4
  %.reg2mem74 = alloca i32, align 4
  %.reg2mem76 = alloca i32, align 4
  %.reg2mem78 = alloca i32, align 4
  %.reg2mem84 = alloca i1, align 1
  %.reg2mem87 = alloca i32, align 4
  %.reg2mem90 = alloca i32, align 4
  %.reg2mem99 = alloca i32, align 4
  %.reg2mem101 = alloca i1, align 1
  %.reg2mem103 = alloca i32, align 4
  %.reg2mem105 = alloca i1, align 1
  %.reg2mem107 = alloca i32, align 4
  %.reg2mem109 = alloca i32, align 4
  %.reg2mem111 = alloca i1, align 1
  %.reg2mem113 = alloca i32, align 4
  %.reg2mem115 = alloca i1, align 1
  %.reg2mem117 = alloca i32, align 4
  %.reg2mem119 = alloca i32, align 4
  %.reg2mem121 = alloca i1, align 1
  %.reg2mem123 = alloca i32, align 4
  %.reg2mem125 = alloca i32, align 4
  %.reg2mem127 = alloca i32, align 4
  %.reg2mem129 = alloca i32, align 4
  %.reg2mem131 = alloca i32, align 4
  %.reg2mem133 = alloca i32, align 4
  %.reg2mem135 = alloca i32, align 4
  %.reg2mem137 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store ptr @HashMap, ptr %149, align 8
  %150 = getelementptr ptr, ptr %149, i32 1
  store ptr @_parameterization_Ptri32, ptr %150, align 8
  %151 = getelementptr ptr, ptr %149, i32 2
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %152 = getelementptr ptr, ptr %149, i32 3
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %152, align 8
  %153 = load ptr, ptr %149, align 8
  %154 = getelementptr ptr, ptr %153, i32 6
  %155 = load ptr, ptr %154, align 8
  %156 = call { i64, i64 } @size_wrapper(ptr %155, ptr %149)
  %157 = extractvalue { i64, i64 } %156, 0
  %158 = call ptr @bump_malloc(i64 %157)
  store ptr @_parameterization_Ptri32, ptr %158, align 8
  %159 = getelementptr ptr, ptr %158, i32 1
  store ptr @_parameterization_Ptri32, ptr %159, align 8
  %160 = getelementptr ptr, ptr %158, i32 2
  store ptr @_parameterization_PairPtri32._Ptri32, ptr %160, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 24, ptr %158)
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  store ptr @HashMap, ptr %162, align 8
  store ptr %158, ptr %163, align 8
  store i32 9, ptr %164, align 4
  %165 = call ptr @llvm.invariant.start.p0(i64 16, ptr %162)
  %166 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %166)
  call void @llvm.init.trampoline(ptr %166, ptr @eobvibirqh, ptr @i32_hasher)
  %167 = alloca ptr, align 8
  %168 = call ptr @adjust_trampoline(ptr %166)
  store ptr %168, ptr %167, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 24, ptr %166)
  %170 = call ptr @llvm.invariant.start.p0(i64 8, ptr %167)
  %171 = getelementptr { ptr }, ptr %167, i32 0, i32 0
  %172 = load ptr, ptr %171, align 8
  %173 = insertvalue { ptr } undef, ptr %172, 0
  %174 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %174)
  call void @llvm.init.trampoline(ptr %174, ptr @otdbtjwmve, ptr @i32_eq)
  %175 = alloca ptr, align 8
  %176 = call ptr @adjust_trampoline(ptr %174)
  store ptr %176, ptr %175, align 8
  %177 = call ptr @llvm.invariant.start.p0(i64 24, ptr %174)
  %178 = call ptr @llvm.invariant.start.p0(i64 8, ptr %175)
  %179 = getelementptr { ptr }, ptr %175, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr } undef, ptr %180, 0
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %183 = load ptr, ptr %182, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %183, 0
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %186, 1
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %189 = load ptr, ptr %188, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } %187, ptr %189, 2
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %192 = load i32, ptr %191, align 4
  %193 = insertvalue { ptr, ptr, ptr, i32 } %190, i32 %192, 3
  %194 = alloca [2 x ptr], align 8
  %195 = getelementptr [2 x ptr], ptr %194, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %195, align 8
  %196 = getelementptr [2 x ptr], ptr %194, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %196, align 8
  %197 = call ptr @llvm.invariant.start.p0(i64 4, ptr %194)
  %198 = call ptr @llvm.invariant.start.p0(i64 688, ptr %183)
  %199 = getelementptr ptr, ptr %183, i32 %192
  %200 = getelementptr ptr, ptr %199, i32 9
  %201 = load ptr, ptr %200, align 8
  %202 = alloca { ptr, ptr }, align 8
  %203 = getelementptr { ptr, ptr }, ptr %202, i32 0, i32 0
  store ptr @function_typ, ptr %203, align 8
  %204 = getelementptr { ptr, ptr }, ptr %202, i32 0, i32 1
  store ptr @function_typ, ptr %204, align 8
  %205 = call ptr @behavior_wrapper(ptr %201, { ptr, ptr, ptr, i32 } %193, ptr %202)
  call void %205({ ptr, ptr, ptr, i32 } %193, { ptr, ptr, ptr, i32 } %193, ptr %194, { ptr } %173, { ptr } %181)
  %206 = alloca { ptr, ptr, ptr, i32 }, align 8
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 0
  %209 = load ptr, ptr %207, align 8
  store ptr %209, ptr %208, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 1
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 2
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 3
  %218 = load i32, ptr %216, align 4
  store i32 %218, ptr %217, align 4
  call void @set_offset(ptr %206, ptr @HashMap)
  %219 = alloca { ptr, ptr, ptr, i32 }, align 8
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 0
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 0
  %222 = load ptr, ptr %220, align 8
  store ptr %222, ptr %221, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 1
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %225 = load ptr, ptr %223, align 8
  store ptr %225, ptr %224, align 8
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 2
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 2
  %228 = load ptr, ptr %226, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 3
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  %231 = load i32, ptr %229, align 4
  store i32 %231, ptr %230, align 4
  %232 = call ptr @llvm.invariant.start.p0(i64 16, ptr %219)
  %233 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %233, align 8
  %234 = load ptr, ptr %233, align 8
  %235 = getelementptr ptr, ptr %234, i32 6
  %236 = load ptr, ptr %235, align 8
  %237 = call { i64, i64 } @size_wrapper(ptr %236, ptr %233)
  %238 = extractvalue { i64, i64 } %237, 0
  %239 = call ptr @bump_malloc(i64 %238)
  %240 = alloca { ptr, ptr, ptr, i32 }, align 8
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 1
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 3
  store ptr @PRNG, ptr %240, align 8
  store ptr %239, ptr %241, align 8
  store i32 9, ptr %242, align 4
  %243 = call ptr @llvm.invariant.start.p0(i64 16, ptr %240)
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 0
  %245 = load ptr, ptr %244, align 8
  %246 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %245, 0
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 1
  %248 = load ptr, ptr %247, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %248, 1
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 2
  %251 = load ptr, ptr %250, align 8
  %252 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %251, 2
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 3
  %254 = load i32, ptr %253, align 4
  %255 = insertvalue { ptr, ptr, ptr, i32 } %252, i32 %254, 3
  %256 = alloca [1 x ptr], align 8
  %257 = getelementptr [1 x ptr], ptr %256, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %257, align 8
  %258 = call ptr @llvm.invariant.start.p0(i64 1, ptr %256)
  %259 = call ptr @llvm.invariant.start.p0(i64 40, ptr %245)
  %260 = getelementptr ptr, ptr %245, i32 %254
  %261 = getelementptr ptr, ptr %260, i32 1
  %262 = load ptr, ptr %261, align 8
  %263 = alloca { ptr }, align 8
  %264 = getelementptr { ptr }, ptr %263, i32 0, i32 0
  store ptr @i32_typ, ptr %264, align 8
  %265 = call ptr @behavior_wrapper(ptr %262, { ptr, ptr, ptr, i32 } %255, ptr %263)
  call void %265({ ptr, ptr, ptr, i32 } %255, { ptr, ptr, ptr, i32 } %255, ptr %256, i32 101112)
  %266 = alloca { ptr, ptr, ptr, i32 }, align 8
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 0
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %266, i32 0, i32 0
  %269 = load ptr, ptr %267, align 8
  store ptr %269, ptr %268, align 8
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 1
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %266, i32 0, i32 1
  %272 = load ptr, ptr %270, align 8
  store ptr %272, ptr %271, align 8
  %273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 2
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %266, i32 0, i32 2
  %275 = load ptr, ptr %273, align 8
  store ptr %275, ptr %274, align 8
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 3
  %277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %266, i32 0, i32 3
  %278 = load i32, ptr %276, align 4
  store i32 %278, ptr %277, align 4
  call void @set_offset(ptr %266, ptr @PRNG)
  %279 = alloca { ptr, ptr, ptr, i32 }, align 8
  %280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %266, i32 0, i32 0
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 0
  %282 = load ptr, ptr %280, align 8
  store ptr %282, ptr %281, align 8
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %266, i32 0, i32 1
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 1
  %285 = load ptr, ptr %283, align 8
  store ptr %285, ptr %284, align 8
  %286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %266, i32 0, i32 2
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 2
  %288 = load ptr, ptr %286, align 8
  store ptr %288, ptr %287, align 8
  %289 = getelementptr { ptr, ptr, ptr, i32 }, ptr %266, i32 0, i32 3
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 3
  %291 = load i32, ptr %289, align 4
  store i32 %291, ptr %290, align 4
  %292 = call ptr @llvm.invariant.start.p0(i64 16, ptr %279)
  %293 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %293, align 8
  %294 = getelementptr ptr, ptr %293, i32 1
  store ptr @_parameterization_Ptri32, ptr %294, align 8
  %295 = load ptr, ptr %293, align 8
  %296 = getelementptr ptr, ptr %295, i32 6
  %297 = load ptr, ptr %296, align 8
  %298 = call { i64, i64 } @size_wrapper(ptr %297, ptr %293)
  %299 = extractvalue { i64, i64 } %298, 0
  %300 = call ptr @bump_malloc(i64 %299)
  store ptr @_parameterization_Ptri32, ptr %300, align 8
  %301 = call ptr @llvm.invariant.start.p0(i64 8, ptr %300)
  %302 = alloca { ptr, ptr, ptr, i32 }, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  store ptr @Array, ptr %302, align 8
  store ptr %300, ptr %303, align 8
  store i32 9, ptr %304, align 4
  %305 = call ptr @llvm.invariant.start.p0(i64 16, ptr %302)
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %307 = load ptr, ptr %306, align 8
  %308 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %307, 0
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %310 = load ptr, ptr %309, align 8
  %311 = insertvalue { ptr, ptr, ptr, i32 } %308, ptr %310, 1
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %313 = load ptr, ptr %312, align 8
  %314 = insertvalue { ptr, ptr, ptr, i32 } %311, ptr %313, 2
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %316 = load i32, ptr %315, align 4
  %317 = insertvalue { ptr, ptr, ptr, i32 } %314, i32 %316, 3
  %318 = alloca [1 x ptr], align 8
  %319 = getelementptr [1 x ptr], ptr %318, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %319, align 8
  %320 = call ptr @llvm.invariant.start.p0(i64 1, ptr %318)
  %321 = call ptr @llvm.invariant.start.p0(i64 600, ptr %307)
  %322 = getelementptr ptr, ptr %307, i32 %316
  %323 = getelementptr ptr, ptr %322, i32 6
  %324 = load ptr, ptr %323, align 8
  %325 = alloca { ptr }, align 8
  %326 = getelementptr { ptr }, ptr %325, i32 0, i32 0
  store ptr @i32_typ, ptr %326, align 8
  %327 = call ptr @behavior_wrapper(ptr %324, { ptr, ptr, ptr, i32 } %317, ptr %325)
  call void %327({ ptr, ptr, ptr, i32 } %317, { ptr, ptr, ptr, i32 } %317, ptr %318, i32 %0)
  %328 = alloca { ptr, ptr, ptr, i32 }, align 8
  %329 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %328, i32 0, i32 0
  %331 = load ptr, ptr %329, align 8
  store ptr %331, ptr %330, align 8
  %332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %328, i32 0, i32 1
  %334 = load ptr, ptr %332, align 8
  store ptr %334, ptr %333, align 8
  %335 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %328, i32 0, i32 2
  %337 = load ptr, ptr %335, align 8
  store ptr %337, ptr %336, align 8
  %338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %339 = getelementptr { ptr, ptr, ptr, i32 }, ptr %328, i32 0, i32 3
  %340 = load i32, ptr %338, align 4
  store i32 %340, ptr %339, align 4
  call void @set_offset(ptr %328, ptr @Array)
  %341 = alloca { ptr, ptr, ptr, i32 }, align 8
  %342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %328, i32 0, i32 0
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 0
  %344 = load ptr, ptr %342, align 8
  store ptr %344, ptr %343, align 8
  %345 = getelementptr { ptr, ptr, ptr, i32 }, ptr %328, i32 0, i32 1
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 1
  %347 = load ptr, ptr %345, align 8
  store ptr %347, ptr %346, align 8
  %348 = getelementptr { ptr, ptr, ptr, i32 }, ptr %328, i32 0, i32 2
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 2
  %350 = load ptr, ptr %348, align 8
  store ptr %350, ptr %349, align 8
  %351 = getelementptr { ptr, ptr, ptr, i32 }, ptr %328, i32 0, i32 3
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 3
  %353 = load i32, ptr %351, align 4
  store i32 %353, ptr %352, align 4
  %354 = call ptr @llvm.invariant.start.p0(i64 16, ptr %341)
  %355 = alloca [4 x ptr], align 8
  store ptr @HashMap, ptr %355, align 8
  %356 = getelementptr ptr, ptr %355, i32 1
  store ptr @_parameterization_Ptri32, ptr %356, align 8
  %357 = getelementptr ptr, ptr %355, i32 2
  store ptr @_parameterization_Ptri1, ptr %357, align 8
  %358 = getelementptr ptr, ptr %355, i32 3
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %358, align 8
  %359 = load ptr, ptr %355, align 8
  %360 = getelementptr ptr, ptr %359, i32 6
  %361 = load ptr, ptr %360, align 8
  %362 = call { i64, i64 } @size_wrapper(ptr %361, ptr %355)
  %363 = extractvalue { i64, i64 } %362, 0
  %364 = call ptr @bump_malloc(i64 %363)
  store ptr @_parameterization_Ptri32, ptr %364, align 8
  %365 = getelementptr ptr, ptr %364, i32 1
  store ptr @_parameterization_Ptri1, ptr %365, align 8
  %366 = getelementptr ptr, ptr %364, i32 2
  store ptr @_parameterization_PairPtri32._Ptri1, ptr %366, align 8
  %367 = call ptr @llvm.invariant.start.p0(i64 24, ptr %364)
  %368 = alloca { ptr, ptr, ptr, i32 }, align 8
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  store ptr @HashMap, ptr %368, align 8
  store ptr %364, ptr %369, align 8
  store i32 9, ptr %370, align 4
  %371 = call ptr @llvm.invariant.start.p0(i64 16, ptr %368)
  %372 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %372)
  call void @llvm.init.trampoline(ptr %372, ptr @oacmopbqnc, ptr @i32_hasher)
  %373 = alloca ptr, align 8
  %374 = call ptr @adjust_trampoline(ptr %372)
  store ptr %374, ptr %373, align 8
  %375 = call ptr @llvm.invariant.start.p0(i64 24, ptr %372)
  %376 = call ptr @llvm.invariant.start.p0(i64 8, ptr %373)
  %377 = getelementptr { ptr }, ptr %373, i32 0, i32 0
  %378 = load ptr, ptr %377, align 8
  %379 = insertvalue { ptr } undef, ptr %378, 0
  %380 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([24 x i8], ptr null, i32 1) to i64))
  call void @anoint_trampoline(ptr %380)
  call void @llvm.init.trampoline(ptr %380, ptr @kpujgzwqau, ptr @i32_eq)
  %381 = alloca ptr, align 8
  %382 = call ptr @adjust_trampoline(ptr %380)
  store ptr %382, ptr %381, align 8
  %383 = call ptr @llvm.invariant.start.p0(i64 24, ptr %380)
  %384 = call ptr @llvm.invariant.start.p0(i64 8, ptr %381)
  %385 = getelementptr { ptr }, ptr %381, i32 0, i32 0
  %386 = load ptr, ptr %385, align 8
  %387 = insertvalue { ptr } undef, ptr %386, 0
  %388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %389 = load ptr, ptr %388, align 8
  %390 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %389, 0
  %391 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %392 = load ptr, ptr %391, align 8
  %393 = insertvalue { ptr, ptr, ptr, i32 } %390, ptr %392, 1
  %394 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %395 = load ptr, ptr %394, align 8
  %396 = insertvalue { ptr, ptr, ptr, i32 } %393, ptr %395, 2
  %397 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %398 = load i32, ptr %397, align 4
  %399 = insertvalue { ptr, ptr, ptr, i32 } %396, i32 %398, 3
  %400 = alloca [2 x ptr], align 8
  %401 = getelementptr [2 x ptr], ptr %400, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %401, align 8
  %402 = getelementptr [2 x ptr], ptr %400, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri1, ptr %402, align 8
  %403 = call ptr @llvm.invariant.start.p0(i64 4, ptr %400)
  %404 = call ptr @llvm.invariant.start.p0(i64 688, ptr %389)
  %405 = getelementptr ptr, ptr %389, i32 %398
  %406 = getelementptr ptr, ptr %405, i32 9
  %407 = load ptr, ptr %406, align 8
  %408 = alloca { ptr, ptr }, align 8
  %409 = getelementptr { ptr, ptr }, ptr %408, i32 0, i32 0
  store ptr @function_typ, ptr %409, align 8
  %410 = getelementptr { ptr, ptr }, ptr %408, i32 0, i32 1
  store ptr @function_typ, ptr %410, align 8
  %411 = call ptr @behavior_wrapper(ptr %407, { ptr, ptr, ptr, i32 } %399, ptr %408)
  call void %411({ ptr, ptr, ptr, i32 } %399, { ptr, ptr, ptr, i32 } %399, ptr %400, { ptr } %379, { ptr } %387)
  %412 = alloca { ptr, ptr, ptr, i32 }, align 8
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %414 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 0
  %415 = load ptr, ptr %413, align 8
  store ptr %415, ptr %414, align 8
  %416 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %417 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 1
  %418 = load ptr, ptr %416, align 8
  store ptr %418, ptr %417, align 8
  %419 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %420 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 2
  %421 = load ptr, ptr %419, align 8
  store ptr %421, ptr %420, align 8
  %422 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %423 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 3
  %424 = load i32, ptr %422, align 4
  store i32 %424, ptr %423, align 4
  call void @set_offset(ptr %412, ptr @HashMap)
  %425 = alloca { ptr, ptr, ptr, i32 }, align 8
  %426 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 0
  %427 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 0
  %428 = load ptr, ptr %426, align 8
  store ptr %428, ptr %427, align 8
  %429 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 1
  %430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 1
  %431 = load ptr, ptr %429, align 8
  store ptr %431, ptr %430, align 8
  %432 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 2
  %433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 2
  %434 = load ptr, ptr %432, align 8
  store ptr %434, ptr %433, align 8
  %435 = getelementptr { ptr, ptr, ptr, i32 }, ptr %412, i32 0, i32 3
  %436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 3
  %437 = load i32, ptr %435, align 4
  store i32 %437, ptr %436, align 4
  %438 = call ptr @llvm.invariant.start.p0(i64 16, ptr %425)
  %439 = mul i32 %0, 10
  store i32 %439, ptr %.reg2mem99, align 4
  store i32 0, ptr %.reg2mem135, align 4
  store i32 0, ptr %.reg2mem137, align 4
  br label %440

440:                                              ; preds = %597, %1
  %.reload138 = load i32, ptr %.reg2mem137, align 4
  %.reload136 = load i32, ptr %.reg2mem135, align 4
  store i32 %.reload138, ptr %.reg2mem90, align 4
  store i32 %.reload136, ptr %.reg2mem87, align 4
  %.reload98 = load i32, ptr %.reg2mem90, align 4
  %441 = icmp slt i32 %.reload98, %0
  %.reload89 = load i32, ptr %.reg2mem87, align 4
  %.reload100 = load i32, ptr %.reg2mem99, align 4
  %442 = icmp slt i32 %.reload89, %.reload100
  %443 = and i1 %441, %442
  store i1 %443, ptr %.reg2mem84, align 1
  %.reload86 = load i1, ptr %.reg2mem84, align 1
  br i1 %.reload86, label %444, label %594

444:                                              ; preds = %440
  %445 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 0
  %446 = load ptr, ptr %445, align 8
  %447 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %446, 0
  %448 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 1
  %449 = load ptr, ptr %448, align 8
  %450 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr %449, 1
  %451 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 2
  %452 = load ptr, ptr %451, align 8
  %453 = insertvalue { ptr, ptr, ptr, i32 } %450, ptr %452, 2
  %454 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 3
  %455 = load i32, ptr %454, align 4
  %456 = insertvalue { ptr, ptr, ptr, i32 } %453, i32 %455, 3
  %457 = call ptr @llvm.invariant.start.p0(i64 0, ptr %2)
  %458 = call ptr @llvm.invariant.start.p0(i64 40, ptr %446)
  %459 = getelementptr ptr, ptr %446, i32 %455
  %460 = getelementptr ptr, ptr %459, i32 2
  %461 = load ptr, ptr %460, align 8
  %462 = call ptr @behavior_wrapper(ptr %461, { ptr, ptr, ptr, i32 } %456, ptr %3)
  %463 = call i32 %462({ ptr, ptr, ptr, i32 } %456, { ptr, ptr, ptr, i32 } %456, ptr %2)
  store i32 %463, ptr %.reg2mem78, align 4
  store ptr @i32_typ, ptr %5, align 8
  %.reload83 = load i32, ptr %.reg2mem78, align 4
  store i32 %.reload83, ptr %4, align 4
  %464 = load ptr, ptr %5, align 8
  %465 = insertvalue { ptr, i160 } undef, ptr %464, 0
  %466 = load i160, ptr %4, align 4
  %467 = insertvalue { ptr, i160 } %465, i160 %466, 1
  %468 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 0
  %469 = load ptr, ptr %468, align 8
  %470 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %469, 0
  %471 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 1
  %472 = load ptr, ptr %471, align 8
  %473 = insertvalue { ptr, ptr, ptr, i32 } %470, ptr %472, 1
  %474 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 2
  %475 = load ptr, ptr %474, align 8
  %476 = insertvalue { ptr, ptr, ptr, i32 } %473, ptr %475, 2
  %477 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 3
  %478 = load i32, ptr %477, align 4
  %479 = insertvalue { ptr, ptr, ptr, i32 } %476, i32 %478, 3
  %480 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %480, align 8
  %481 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %482 = call ptr @llvm.invariant.start.p0(i64 688, ptr %469)
  %483 = getelementptr ptr, ptr %469, i32 %478
  %484 = getelementptr ptr, ptr %483, i32 20
  %485 = load ptr, ptr %484, align 8
  %486 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr %464, ptr %486, align 8
  %487 = call ptr @behavior_wrapper(ptr %485, { ptr, ptr, ptr, i32 } %479, ptr %7)
  %488 = call { ptr, i160 } %487({ ptr, ptr, ptr, i32 } %479, { ptr, ptr, ptr, i32 } %479, ptr %6, { ptr, i160 } %467)
  store { ptr, i160 } %488, ptr %8, align 8
  %489 = getelementptr { ptr, i1 }, ptr %8, i32 0, i32 0
  %490 = load ptr, ptr %489, align 8
  store ptr %490, ptr %10, align 8
  %491 = getelementptr { ptr, i1 }, ptr %8, i32 0, i32 1
  %492 = load i1, ptr %491, align 1
  store i1 %492, ptr %9, align 1
  %493 = load ptr, ptr %10, align 8
  %494 = ptrtoint ptr %493 to i64
  %495 = icmp eq i64 %494, ptrtoint (ptr @nil_typ to i64)
  %496 = icmp eq i64 %494, 0
  %497 = or i1 %495, %496
  br i1 %497, label %498, label %590

498:                                              ; preds = %444
  %499 = load [0 x i8], ptr %9, align 1
  %.reload82 = load i32, ptr %.reg2mem78, align 4
  %500 = add i32 %.reload82, 1
  store ptr @i32_typ, ptr %12, align 8
  %.reload81 = load i32, ptr %.reg2mem78, align 4
  store i32 %.reload81, ptr %11, align 4
  %501 = load ptr, ptr %12, align 8
  %502 = insertvalue { ptr, i160 } undef, ptr %501, 0
  %503 = load i160, ptr %11, align 4
  %504 = insertvalue { ptr, i160 } %502, i160 %503, 1
  store ptr @i32_typ, ptr %14, align 8
  store i32 %500, ptr %13, align 4
  %505 = load ptr, ptr %14, align 8
  %506 = insertvalue { ptr, i160 } undef, ptr %505, 0
  %507 = load i160, ptr %13, align 4
  %508 = insertvalue { ptr, i160 } %506, i160 %507, 1
  %509 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 0
  %510 = load ptr, ptr %509, align 8
  %511 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %510, 0
  %512 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %513 = load ptr, ptr %512, align 8
  %514 = insertvalue { ptr, ptr, ptr, i32 } %511, ptr %513, 1
  %515 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 2
  %516 = load ptr, ptr %515, align 8
  %517 = insertvalue { ptr, ptr, ptr, i32 } %514, ptr %516, 2
  %518 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  %519 = load i32, ptr %518, align 4
  %520 = insertvalue { ptr, ptr, ptr, i32 } %517, i32 %519, 3
  %521 = getelementptr [2 x ptr], ptr %15, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %521, align 8
  %522 = getelementptr [2 x ptr], ptr %15, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %522, align 8
  %523 = call ptr @llvm.invariant.start.p0(i64 4, ptr %15)
  %524 = call ptr @llvm.invariant.start.p0(i64 688, ptr %510)
  %525 = getelementptr ptr, ptr %510, i32 %519
  %526 = getelementptr ptr, ptr %525, i32 18
  %527 = load ptr, ptr %526, align 8
  %528 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 0
  store ptr %501, ptr %528, align 8
  %529 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 1
  store ptr %505, ptr %529, align 8
  %530 = call ptr @behavior_wrapper(ptr %527, { ptr, ptr, ptr, i32 } %520, ptr %16)
  call void %530({ ptr, ptr, ptr, i32 } %520, { ptr, ptr, ptr, i32 } %520, ptr %15, { ptr, i160 } %504, { ptr, i160 } %508)
  store ptr @i32_typ, ptr %18, align 8
  %.reload80 = load i32, ptr %.reg2mem78, align 4
  store i32 %.reload80, ptr %17, align 4
  %531 = load ptr, ptr %18, align 8
  %532 = insertvalue { ptr, i160 } undef, ptr %531, 0
  %533 = load i160, ptr %17, align 4
  %534 = insertvalue { ptr, i160 } %532, i160 %533, 1
  %535 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 0
  %536 = load ptr, ptr %535, align 8
  %537 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %536, 0
  %538 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 1
  %539 = load ptr, ptr %538, align 8
  %540 = insertvalue { ptr, ptr, ptr, i32 } %537, ptr %539, 1
  %541 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 2
  %542 = load ptr, ptr %541, align 8
  %543 = insertvalue { ptr, ptr, ptr, i32 } %540, ptr %542, 2
  %544 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 3
  %545 = load i32, ptr %544, align 4
  %546 = insertvalue { ptr, ptr, ptr, i32 } %543, i32 %545, 3
  %547 = getelementptr [2 x ptr], ptr %19, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %547, align 8
  %548 = getelementptr [2 x ptr], ptr %19, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %548, align 8
  %549 = call ptr @llvm.invariant.start.p0(i64 4, ptr %19)
  %550 = call ptr @llvm.invariant.start.p0(i64 600, ptr %536)
  %551 = getelementptr ptr, ptr %536, i32 %545
  %552 = getelementptr ptr, ptr %551, i32 16
  %553 = load ptr, ptr %552, align 8
  %554 = getelementptr { ptr, ptr }, ptr %20, i32 0, i32 0
  store ptr @i32_typ, ptr %554, align 8
  %555 = getelementptr { ptr, ptr }, ptr %20, i32 0, i32 1
  store ptr %531, ptr %555, align 8
  %556 = call ptr @behavior_wrapper(ptr %553, { ptr, ptr, ptr, i32 } %546, ptr %20)
  %.reload97 = load i32, ptr %.reg2mem90, align 4
  call void %556({ ptr, ptr, ptr, i32 } %546, { ptr, ptr, ptr, i32 } %546, ptr %19, i32 %.reload97, { ptr, i160 } %534)
  store ptr @i32_typ, ptr %22, align 8
  %.reload79 = load i32, ptr %.reg2mem78, align 4
  store i32 %.reload79, ptr %21, align 4
  %557 = load ptr, ptr %22, align 8
  %558 = insertvalue { ptr, i160 } undef, ptr %557, 0
  %559 = load i160, ptr %21, align 4
  %560 = insertvalue { ptr, i160 } %558, i160 %559, 1
  store ptr @bool_typ, ptr %24, align 8
  store i1 true, ptr %23, align 1
  %561 = load ptr, ptr %24, align 8
  %562 = insertvalue { ptr, i160 } undef, ptr %561, 0
  %563 = load i160, ptr %23, align 4
  %564 = insertvalue { ptr, i160 } %562, i160 %563, 1
  %565 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 0
  %566 = load ptr, ptr %565, align 8
  %567 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %566, 0
  %568 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 1
  %569 = load ptr, ptr %568, align 8
  %570 = insertvalue { ptr, ptr, ptr, i32 } %567, ptr %569, 1
  %571 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 2
  %572 = load ptr, ptr %571, align 8
  %573 = insertvalue { ptr, ptr, ptr, i32 } %570, ptr %572, 2
  %574 = getelementptr { ptr, ptr, ptr, i32 }, ptr %425, i32 0, i32 3
  %575 = load i32, ptr %574, align 4
  %576 = insertvalue { ptr, ptr, ptr, i32 } %573, i32 %575, 3
  %577 = getelementptr [2 x ptr], ptr %25, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %577, align 8
  %578 = getelementptr [2 x ptr], ptr %25, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %578, align 8
  %579 = call ptr @llvm.invariant.start.p0(i64 4, ptr %25)
  %580 = call ptr @llvm.invariant.start.p0(i64 688, ptr %566)
  %581 = getelementptr ptr, ptr %566, i32 %575
  %582 = getelementptr ptr, ptr %581, i32 18
  %583 = load ptr, ptr %582, align 8
  %584 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  store ptr %557, ptr %584, align 8
  %585 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  store ptr %561, ptr %585, align 8
  %586 = call ptr @behavior_wrapper(ptr %583, { ptr, ptr, ptr, i32 } %576, ptr %26)
  call void %586({ ptr, ptr, ptr, i32 } %576, { ptr, ptr, ptr, i32 } %576, ptr %25, { ptr, i160 } %560, { ptr, i160 } %564)
  %.reload96 = load i32, ptr %.reg2mem90, align 4
  %587 = add i32 %.reload96, 1
  store i32 %587, ptr %.reg2mem76, align 4
  store [0 x i8] %499, ptr %27, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %28, align 4
  %588 = load ptr, ptr %28, align 8
  store ptr %588, ptr %10, align 8
  %589 = load i1, ptr %27, align 1
  store i1 %589, ptr %9, align 1
  %.reload77 = load i32, ptr %.reg2mem76, align 4
  store i32 %.reload77, ptr %.reg2mem133, align 4
  br label %591

590:                                              ; preds = %444
  %.reload95 = load i32, ptr %.reg2mem90, align 4
  store i32 %.reload95, ptr %.reg2mem133, align 4
  br label %591

591:                                              ; preds = %590, %498
  %.reload134 = load i32, ptr %.reg2mem133, align 4
  store i32 %.reload134, ptr %.reg2mem74, align 4
  br label %592

592:                                              ; preds = %591
  %.reload88 = load i32, ptr %.reg2mem87, align 4
  %593 = add i32 %.reload88, 1
  store i32 %593, ptr %.reg2mem72, align 4
  %.reload73 = load i32, ptr %.reg2mem72, align 4
  %.reload75 = load i32, ptr %.reg2mem74, align 4
  store i32 %.reload73, ptr %.reg2mem129, align 4
  store i32 %.reload75, ptr %.reg2mem131, align 4
  br label %595

594:                                              ; preds = %440
  store i32 poison, ptr %.reg2mem129, align 4
  store i32 poison, ptr %.reg2mem131, align 4
  br label %595

595:                                              ; preds = %594, %592
  %.reload132 = load i32, ptr %.reg2mem131, align 4
  %.reload130 = load i32, ptr %.reg2mem129, align 4
  store i32 %.reload132, ptr %.reg2mem70, align 4
  store i32 %.reload130, ptr %.reg2mem68, align 4
  br label %596

596:                                              ; preds = %595
  %.reload69 = load i32, ptr %.reg2mem68, align 4
  %.reload71 = load i32, ptr %.reg2mem70, align 4
  %.reload85 = load i1, ptr %.reg2mem84, align 1
  %.reload94 = load i32, ptr %.reg2mem90, align 4
  store i32 %.reload69, ptr %.reg2mem125, align 4
  store i32 %.reload71, ptr %.reg2mem127, align 4
  br i1 %.reload85, label %597, label %598

597:                                              ; preds = %596
  %.reload128 = load i32, ptr %.reg2mem127, align 4
  %.reload126 = load i32, ptr %.reg2mem125, align 4
  store i32 %.reload128, ptr %.reg2mem66, align 4
  store i32 %.reload126, ptr %.reg2mem64, align 4
  %.reload65 = load i32, ptr %.reg2mem64, align 4
  %.reload67 = load i32, ptr %.reg2mem66, align 4
  store i32 %.reload65, ptr %.reg2mem135, align 4
  store i32 %.reload67, ptr %.reg2mem137, align 4
  br label %440

598:                                              ; preds = %596
  %.reload93 = load i32, ptr %.reg2mem90, align 4
  %599 = icmp slt i32 %.reload93, %0
  %.reload92 = load i32, ptr %.reg2mem90, align 4
  %600 = select i1 %599, i32 %.reload92, i32 %0
  store i32 %600, ptr %.reg2mem59, align 4
  br i1 %599, label %601, label %._crit_edge

._crit_edge:                                      ; preds = %598
  br label %722

601:                                              ; preds = %598
  %602 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 30))
  store ptr %602, ptr %29, align 8
  %603 = getelementptr { ptr }, ptr %29, i32 0, i32 0
  %604 = getelementptr { ptr }, ptr %30, i32 0, i32 0
  %605 = load ptr, ptr %603, align 8
  store ptr %605, ptr %604, align 8
  %606 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %607 = load ptr, ptr %30, align 8
  %608 = load [29 x i8], ptr @hoedz_Warning_Could_only_generate_, align 1
  store [29 x i8] %608, ptr %607, align 1
  store ptr @String, ptr %31, align 8
  %609 = load ptr, ptr %31, align 8
  %610 = getelementptr ptr, ptr %609, i32 6
  %611 = load ptr, ptr %610, align 8
  %612 = call { i64, i64 } @size_wrapper(ptr %611, ptr %31)
  %613 = extractvalue { i64, i64 } %612, 0
  %614 = call ptr @bump_malloc(i64 %613)
  %615 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %616 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr @String, ptr %32, align 8
  store ptr %614, ptr %615, align 8
  store i32 9, ptr %616, align 4
  %617 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %618 = getelementptr { ptr }, ptr %30, i32 0, i32 0
  %619 = load ptr, ptr %618, align 8
  %620 = insertvalue { ptr } undef, ptr %619, 0
  %621 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %622 = load ptr, ptr %621, align 8
  %623 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %622, 0
  %624 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %625 = load ptr, ptr %624, align 8
  %626 = insertvalue { ptr, ptr, ptr, i32 } %623, ptr %625, 1
  %627 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %628 = load ptr, ptr %627, align 8
  %629 = insertvalue { ptr, ptr, ptr, i32 } %626, ptr %628, 2
  %630 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %631 = load i32, ptr %630, align 4
  %632 = insertvalue { ptr, ptr, ptr, i32 } %629, i32 %631, 3
  %633 = getelementptr [3 x ptr], ptr %33, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %633, align 8
  %634 = getelementptr [3 x ptr], ptr %33, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %634, align 8
  %635 = getelementptr [3 x ptr], ptr %33, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %635, align 8
  %636 = call ptr @llvm.invariant.start.p0(i64 9, ptr %33)
  %637 = call ptr @llvm.invariant.start.p0(i64 280, ptr %622)
  %638 = getelementptr ptr, ptr %622, i32 %631
  %639 = getelementptr ptr, ptr %638, i32 4
  %640 = load ptr, ptr %639, align 8
  %641 = getelementptr { ptr, ptr, ptr }, ptr %34, i32 0, i32 0
  store ptr @buffer_typ, ptr %641, align 8
  %642 = getelementptr { ptr, ptr, ptr }, ptr %34, i32 0, i32 1
  store ptr @i32_typ, ptr %642, align 8
  %643 = getelementptr { ptr, ptr, ptr }, ptr %34, i32 0, i32 2
  store ptr @i32_typ, ptr %643, align 8
  %644 = call ptr @behavior_wrapper(ptr %640, { ptr, ptr, ptr, i32 } %632, ptr %34)
  call void %644({ ptr, ptr, ptr, i32 } %632, { ptr, ptr, ptr, i32 } %632, ptr %33, { ptr } %620, i32 29, i32 30)
  %645 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %646 = load ptr, ptr %645, align 8
  %647 = insertvalue { ptr, i160 } undef, ptr %646, 0
  %648 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %649 = load i160, ptr %648, align 4
  %650 = insertvalue { ptr, i160 } %647, i160 %649, 1
  %651 = getelementptr [1 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_String, ptr %651, align 8
  %652 = call ptr @llvm.invariant.start.p0(i64 1, ptr %35)
  %653 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %654 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %655 = getelementptr { ptr }, ptr %36, i32 0, i32 0
  store ptr %646, ptr %655, align 8
  %656 = call ptr @class_behavior_wrapper(ptr %654, ptr %36)
  call void %656(ptr %35, { ptr, i160 } %650)
  %.reload91 = load i32, ptr %.reg2mem90, align 4
  store i32 %.reload91, ptr %37, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %38, align 4
  %657 = load ptr, ptr %38, align 8
  %658 = insertvalue { ptr, i160 } undef, ptr %657, 0
  %659 = load i160, ptr %37, align 4
  %660 = insertvalue { ptr, i160 } %658, i160 %659, 1
  %661 = getelementptr [1 x ptr], ptr %39, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %661, align 8
  %662 = call ptr @llvm.invariant.start.p0(i64 1, ptr %39)
  %663 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %664 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %665 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  store ptr %657, ptr %665, align 8
  %666 = call ptr @class_behavior_wrapper(ptr %664, ptr %40)
  call void %666(ptr %39, { ptr, i160 } %660)
  %667 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 30))
  store ptr %667, ptr %41, align 8
  %668 = getelementptr { ptr }, ptr %41, i32 0, i32 0
  %669 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  %670 = load ptr, ptr %668, align 8
  store ptr %670, ptr %669, align 8
  %671 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  %672 = load ptr, ptr %42, align 8
  %673 = load [29 x i8], ptr @ouvoi__unique_keys_for_remove_test, align 1
  store [29 x i8] %673, ptr %672, align 1
  store ptr @String, ptr %43, align 8
  %674 = load ptr, ptr %43, align 8
  %675 = getelementptr ptr, ptr %674, i32 6
  %676 = load ptr, ptr %675, align 8
  %677 = call { i64, i64 } @size_wrapper(ptr %676, ptr %43)
  %678 = extractvalue { i64, i64 } %677, 0
  %679 = call ptr @bump_malloc(i64 %678)
  %680 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %681 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  store ptr @String, ptr %44, align 8
  store ptr %679, ptr %680, align 8
  store i32 9, ptr %681, align 4
  %682 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %683 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  %684 = load ptr, ptr %683, align 8
  %685 = insertvalue { ptr } undef, ptr %684, 0
  %686 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %687 = load ptr, ptr %686, align 8
  %688 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %687, 0
  %689 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %690 = load ptr, ptr %689, align 8
  %691 = insertvalue { ptr, ptr, ptr, i32 } %688, ptr %690, 1
  %692 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %693 = load ptr, ptr %692, align 8
  %694 = insertvalue { ptr, ptr, ptr, i32 } %691, ptr %693, 2
  %695 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %696 = load i32, ptr %695, align 4
  %697 = insertvalue { ptr, ptr, ptr, i32 } %694, i32 %696, 3
  %698 = getelementptr [3 x ptr], ptr %45, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %698, align 8
  %699 = getelementptr [3 x ptr], ptr %45, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %699, align 8
  %700 = getelementptr [3 x ptr], ptr %45, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %700, align 8
  %701 = call ptr @llvm.invariant.start.p0(i64 9, ptr %45)
  %702 = call ptr @llvm.invariant.start.p0(i64 280, ptr %687)
  %703 = getelementptr ptr, ptr %687, i32 %696
  %704 = getelementptr ptr, ptr %703, i32 4
  %705 = load ptr, ptr %704, align 8
  %706 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 0
  store ptr @buffer_typ, ptr %706, align 8
  %707 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 1
  store ptr @i32_typ, ptr %707, align 8
  %708 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 2
  store ptr @i32_typ, ptr %708, align 8
  %709 = call ptr @behavior_wrapper(ptr %705, { ptr, ptr, ptr, i32 } %697, ptr %46)
  call void %709({ ptr, ptr, ptr, i32 } %697, { ptr, ptr, ptr, i32 } %697, ptr %45, { ptr } %685, i32 29, i32 30)
  %710 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 0
  %711 = load ptr, ptr %710, align 8
  %712 = insertvalue { ptr, i160 } undef, ptr %711, 0
  %713 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 1
  %714 = load i160, ptr %713, align 4
  %715 = insertvalue { ptr, i160 } %712, i160 %714, 1
  %716 = getelementptr [1 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_String, ptr %716, align 8
  %717 = call ptr @llvm.invariant.start.p0(i64 1, ptr %47)
  %718 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %719 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %720 = getelementptr { ptr }, ptr %48, i32 0, i32 0
  store ptr %711, ptr %720, align 8
  %721 = call ptr @class_behavior_wrapper(ptr %719, ptr %48)
  call void %721(ptr %47, { ptr, i160 } %715)
  br label %722

722:                                              ; preds = %._crit_edge, %601
  %723 = call i64 @clock()
  store i64 %723, ptr %.reg2mem57, align 4
  store i32 0, ptr %.reg2mem119, align 4
  store i1 true, ptr %.reg2mem121, align 1
  store i32 0, ptr %.reg2mem123, align 4
  br label %724

724:                                              ; preds = %934, %722
  %.reload124 = load i32, ptr %.reg2mem123, align 4
  %.reload122 = load i1, ptr %.reg2mem121, align 1
  %.reload120 = load i32, ptr %.reg2mem119, align 4
  store i32 %.reload124, ptr %.reg2mem51, align 4
  store i1 %.reload122, ptr %.reg2mem47, align 1
  store i32 %.reload120, ptr %.reg2mem43, align 4
  %.reload46 = load i32, ptr %.reg2mem43, align 4
  %.reload63 = load i32, ptr %.reg2mem59, align 4
  %725 = icmp slt i32 %.reload46, %.reload63
  store i1 %725, ptr %.reg2mem40, align 1
  %.reload42 = load i1, ptr %.reg2mem40, align 1
  br i1 %.reload42, label %726, label %931

726:                                              ; preds = %724
  %727 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 0
  %728 = load ptr, ptr %727, align 8
  %729 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %728, 0
  %730 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 1
  %731 = load ptr, ptr %730, align 8
  %732 = insertvalue { ptr, ptr, ptr, i32 } %729, ptr %731, 1
  %733 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 2
  %734 = load ptr, ptr %733, align 8
  %735 = insertvalue { ptr, ptr, ptr, i32 } %732, ptr %734, 2
  %736 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 3
  %737 = load i32, ptr %736, align 4
  %738 = insertvalue { ptr, ptr, ptr, i32 } %735, i32 %737, 3
  %739 = getelementptr [1 x ptr], ptr %49, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %739, align 8
  %740 = call ptr @llvm.invariant.start.p0(i64 1, ptr %49)
  %741 = call ptr @llvm.invariant.start.p0(i64 600, ptr %728)
  %742 = getelementptr ptr, ptr %728, i32 %737
  %743 = getelementptr ptr, ptr %742, i32 15
  %744 = load ptr, ptr %743, align 8
  %745 = getelementptr { ptr }, ptr %50, i32 0, i32 0
  store ptr @i32_typ, ptr %745, align 8
  %746 = call ptr @behavior_wrapper(ptr %744, { ptr, ptr, ptr, i32 } %738, ptr %50)
  %.reload45 = load i32, ptr %.reg2mem43, align 4
  %747 = call { ptr, i160 } %746({ ptr, ptr, ptr, i32 } %738, { ptr, ptr, ptr, i32 } %738, ptr %49, i32 %.reload45)
  store { ptr, i160 } %747, ptr %51, align 8
  %748 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 1
  %749 = load i32, ptr %748, align 4
  store i32 %749, ptr %.reg2mem35, align 4
  store ptr @i32_typ, ptr %53, align 8
  %.reload39 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload39, ptr %52, align 4
  %750 = load ptr, ptr %53, align 8
  %751 = insertvalue { ptr, i160 } undef, ptr %750, 0
  %752 = load i160, ptr %52, align 4
  %753 = insertvalue { ptr, i160 } %751, i160 %752, 1
  %754 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 0
  %755 = load ptr, ptr %754, align 8
  %756 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %755, 0
  %757 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %758 = load ptr, ptr %757, align 8
  %759 = insertvalue { ptr, ptr, ptr, i32 } %756, ptr %758, 1
  %760 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 2
  %761 = load ptr, ptr %760, align 8
  %762 = insertvalue { ptr, ptr, ptr, i32 } %759, ptr %761, 2
  %763 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  %764 = load i32, ptr %763, align 4
  %765 = insertvalue { ptr, ptr, ptr, i32 } %762, i32 %764, 3
  %766 = getelementptr [1 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %766, align 8
  %767 = call ptr @llvm.invariant.start.p0(i64 1, ptr %54)
  %768 = call ptr @llvm.invariant.start.p0(i64 688, ptr %755)
  %769 = getelementptr ptr, ptr %755, i32 %764
  %770 = getelementptr ptr, ptr %769, i32 22
  %771 = load ptr, ptr %770, align 8
  %772 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  store ptr %750, ptr %772, align 8
  %773 = call ptr @behavior_wrapper(ptr %771, { ptr, ptr, ptr, i32 } %765, ptr %55)
  %774 = call { ptr, i160 } %773({ ptr, ptr, ptr, i32 } %765, { ptr, ptr, ptr, i32 } %765, ptr %54, { ptr, i160 } %753)
  store { ptr, i160 } %774, ptr %56, align 8
  %775 = getelementptr { ptr, i32 }, ptr %56, i32 0, i32 0
  %776 = load ptr, ptr %775, align 8
  store ptr %776, ptr %58, align 8
  %777 = getelementptr { ptr, i32 }, ptr %56, i32 0, i32 1
  %778 = load i32, ptr %777, align 4
  store i32 %778, ptr %57, align 4
  %779 = load ptr, ptr %58, align 8
  %780 = ptrtoint ptr %779 to i64
  %781 = icmp eq i64 %780, ptrtoint (ptr @nil_typ to i64)
  %782 = icmp eq i64 %780, 0
  %783 = or i1 %781, %782
  %784 = icmp eq i1 %783, false
  br i1 %784, label %785, label %860

785:                                              ; preds = %726
  %786 = load i32, ptr %57, align 4
  store i32 %786, ptr %.reg2mem32, align 4
  %.reload38 = load i32, ptr %.reg2mem35, align 4
  %787 = add i32 %.reload38, 1
  %.reload34 = load i32, ptr %.reg2mem32, align 4
  %788 = icmp ne i32 %.reload34, %787
  %.reload50 = load i1, ptr %.reg2mem47, align 1
  %789 = select i1 %788, i1 false, i1 %.reload50
  store i1 %789, ptr %.reg2mem30, align 1
  br i1 %788, label %790, label %._crit_edge1

._crit_edge1:                                     ; preds = %785
  br label %856

790:                                              ; preds = %785
  %791 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 46))
  store ptr %791, ptr %59, align 8
  %792 = getelementptr { ptr }, ptr %59, i32 0, i32 0
  %793 = getelementptr { ptr }, ptr %60, i32 0, i32 0
  %794 = load ptr, ptr %792, align 8
  store ptr %794, ptr %793, align 8
  %795 = call ptr @llvm.invariant.start.p0(i64 16, ptr %60)
  %796 = load ptr, ptr %60, align 8
  %797 = load [45 x i8], ptr @pwkue_Warning_Remove_returned_wrong_value_for_key_, align 1
  store [45 x i8] %797, ptr %796, align 1
  store ptr @String, ptr %61, align 8
  %798 = load ptr, ptr %61, align 8
  %799 = getelementptr ptr, ptr %798, i32 6
  %800 = load ptr, ptr %799, align 8
  %801 = call { i64, i64 } @size_wrapper(ptr %800, ptr %61)
  %802 = extractvalue { i64, i64 } %801, 0
  %803 = call ptr @bump_malloc(i64 %802)
  %804 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  store ptr @String, ptr %62, align 8
  store ptr %803, ptr %804, align 8
  store i32 9, ptr %805, align 4
  %806 = call ptr @llvm.invariant.start.p0(i64 16, ptr %62)
  %807 = getelementptr { ptr }, ptr %60, i32 0, i32 0
  %808 = load ptr, ptr %807, align 8
  %809 = insertvalue { ptr } undef, ptr %808, 0
  %810 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %811 = load ptr, ptr %810, align 8
  %812 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %811, 0
  %813 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %814 = load ptr, ptr %813, align 8
  %815 = insertvalue { ptr, ptr, ptr, i32 } %812, ptr %814, 1
  %816 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %817 = load ptr, ptr %816, align 8
  %818 = insertvalue { ptr, ptr, ptr, i32 } %815, ptr %817, 2
  %819 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %820 = load i32, ptr %819, align 4
  %821 = insertvalue { ptr, ptr, ptr, i32 } %818, i32 %820, 3
  %822 = getelementptr [3 x ptr], ptr %63, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %822, align 8
  %823 = getelementptr [3 x ptr], ptr %63, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %823, align 8
  %824 = getelementptr [3 x ptr], ptr %63, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %824, align 8
  %825 = call ptr @llvm.invariant.start.p0(i64 9, ptr %63)
  %826 = call ptr @llvm.invariant.start.p0(i64 280, ptr %811)
  %827 = getelementptr ptr, ptr %811, i32 %820
  %828 = getelementptr ptr, ptr %827, i32 4
  %829 = load ptr, ptr %828, align 8
  %830 = getelementptr { ptr, ptr, ptr }, ptr %64, i32 0, i32 0
  store ptr @buffer_typ, ptr %830, align 8
  %831 = getelementptr { ptr, ptr, ptr }, ptr %64, i32 0, i32 1
  store ptr @i32_typ, ptr %831, align 8
  %832 = getelementptr { ptr, ptr, ptr }, ptr %64, i32 0, i32 2
  store ptr @i32_typ, ptr %832, align 8
  %833 = call ptr @behavior_wrapper(ptr %829, { ptr, ptr, ptr, i32 } %821, ptr %64)
  call void %833({ ptr, ptr, ptr, i32 } %821, { ptr, ptr, ptr, i32 } %821, ptr %63, { ptr } %809, i32 45, i32 46)
  %834 = getelementptr { ptr, i160 }, ptr %62, i32 0, i32 0
  %835 = load ptr, ptr %834, align 8
  %836 = insertvalue { ptr, i160 } undef, ptr %835, 0
  %837 = getelementptr { ptr, i160 }, ptr %62, i32 0, i32 1
  %838 = load i160, ptr %837, align 4
  %839 = insertvalue { ptr, i160 } %836, i160 %838, 1
  %840 = getelementptr [1 x ptr], ptr %65, i32 0, i32 0
  store ptr @_parameterization_String, ptr %840, align 8
  %841 = call ptr @llvm.invariant.start.p0(i64 1, ptr %65)
  %842 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %843 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %844 = getelementptr { ptr }, ptr %66, i32 0, i32 0
  store ptr %835, ptr %844, align 8
  %845 = call ptr @class_behavior_wrapper(ptr %843, ptr %66)
  call void %845(ptr %65, { ptr, i160 } %839)
  %.reload37 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload37, ptr %67, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %68, align 4
  %846 = load ptr, ptr %68, align 8
  %847 = insertvalue { ptr, i160 } undef, ptr %846, 0
  %848 = load i160, ptr %67, align 4
  %849 = insertvalue { ptr, i160 } %847, i160 %848, 1
  %850 = getelementptr [1 x ptr], ptr %69, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %850, align 8
  %851 = call ptr @llvm.invariant.start.p0(i64 1, ptr %69)
  %852 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %853 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %854 = getelementptr { ptr }, ptr %70, i32 0, i32 0
  store ptr %846, ptr %854, align 8
  %855 = call ptr @class_behavior_wrapper(ptr %853, ptr %70)
  call void %855(ptr %69, { ptr, i160 } %849)
  br label %856

856:                                              ; preds = %._crit_edge1, %790
  %.reload56 = load i32, ptr %.reg2mem51, align 4
  %857 = add i32 %.reload56, 1
  store i32 %857, ptr %.reg2mem28, align 4
  %.reload33 = load i32, ptr %.reg2mem32, align 4
  store i32 %.reload33, ptr %71, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %72, align 4
  %858 = load ptr, ptr %72, align 8
  store ptr %858, ptr %58, align 8
  %859 = load i32, ptr %71, align 4
  store i32 %859, ptr %57, align 4
  %.reload29 = load i32, ptr %.reg2mem28, align 4
  %.reload31 = load i1, ptr %.reg2mem30, align 1
  store i1 %.reload31, ptr %.reg2mem115, align 1
  store i32 %.reload29, ptr %.reg2mem117, align 4
  br label %928

860:                                              ; preds = %726
  %861 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 38))
  store ptr %861, ptr %73, align 8
  %862 = getelementptr { ptr }, ptr %73, i32 0, i32 0
  %863 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  %864 = load ptr, ptr %862, align 8
  store ptr %864, ptr %863, align 8
  %865 = call ptr @llvm.invariant.start.p0(i64 16, ptr %74)
  %866 = load ptr, ptr %74, align 8
  %867 = load [37 x i8], ptr @vwqeg_Warning_Remove_returned_Nil_for_key_, align 1
  store [37 x i8] %867, ptr %866, align 1
  store ptr @String, ptr %75, align 8
  %868 = load ptr, ptr %75, align 8
  %869 = getelementptr ptr, ptr %868, i32 6
  %870 = load ptr, ptr %869, align 8
  %871 = call { i64, i64 } @size_wrapper(ptr %870, ptr %75)
  %872 = extractvalue { i64, i64 } %871, 0
  %873 = call ptr @bump_malloc(i64 %872)
  %874 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %875 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  store ptr @String, ptr %76, align 8
  store ptr %873, ptr %874, align 8
  store i32 9, ptr %875, align 4
  %876 = call ptr @llvm.invariant.start.p0(i64 16, ptr %76)
  %877 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  %878 = load ptr, ptr %877, align 8
  %879 = insertvalue { ptr } undef, ptr %878, 0
  %880 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %881 = load ptr, ptr %880, align 8
  %882 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %881, 0
  %883 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %884 = load ptr, ptr %883, align 8
  %885 = insertvalue { ptr, ptr, ptr, i32 } %882, ptr %884, 1
  %886 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %887 = load ptr, ptr %886, align 8
  %888 = insertvalue { ptr, ptr, ptr, i32 } %885, ptr %887, 2
  %889 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %890 = load i32, ptr %889, align 4
  %891 = insertvalue { ptr, ptr, ptr, i32 } %888, i32 %890, 3
  %892 = getelementptr [3 x ptr], ptr %77, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %892, align 8
  %893 = getelementptr [3 x ptr], ptr %77, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %893, align 8
  %894 = getelementptr [3 x ptr], ptr %77, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %894, align 8
  %895 = call ptr @llvm.invariant.start.p0(i64 9, ptr %77)
  %896 = call ptr @llvm.invariant.start.p0(i64 280, ptr %881)
  %897 = getelementptr ptr, ptr %881, i32 %890
  %898 = getelementptr ptr, ptr %897, i32 4
  %899 = load ptr, ptr %898, align 8
  %900 = getelementptr { ptr, ptr, ptr }, ptr %78, i32 0, i32 0
  store ptr @buffer_typ, ptr %900, align 8
  %901 = getelementptr { ptr, ptr, ptr }, ptr %78, i32 0, i32 1
  store ptr @i32_typ, ptr %901, align 8
  %902 = getelementptr { ptr, ptr, ptr }, ptr %78, i32 0, i32 2
  store ptr @i32_typ, ptr %902, align 8
  %903 = call ptr @behavior_wrapper(ptr %899, { ptr, ptr, ptr, i32 } %891, ptr %78)
  call void %903({ ptr, ptr, ptr, i32 } %891, { ptr, ptr, ptr, i32 } %891, ptr %77, { ptr } %879, i32 37, i32 38)
  %904 = getelementptr { ptr, i160 }, ptr %76, i32 0, i32 0
  %905 = load ptr, ptr %904, align 8
  %906 = insertvalue { ptr, i160 } undef, ptr %905, 0
  %907 = getelementptr { ptr, i160 }, ptr %76, i32 0, i32 1
  %908 = load i160, ptr %907, align 4
  %909 = insertvalue { ptr, i160 } %906, i160 %908, 1
  %910 = getelementptr [1 x ptr], ptr %79, i32 0, i32 0
  store ptr @_parameterization_String, ptr %910, align 8
  %911 = call ptr @llvm.invariant.start.p0(i64 1, ptr %79)
  %912 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %913 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %914 = getelementptr { ptr }, ptr %80, i32 0, i32 0
  store ptr %905, ptr %914, align 8
  %915 = call ptr @class_behavior_wrapper(ptr %913, ptr %80)
  call void %915(ptr %79, { ptr, i160 } %909)
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload36, ptr %81, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %82, align 4
  %916 = load ptr, ptr %82, align 8
  %917 = insertvalue { ptr, i160 } undef, ptr %916, 0
  %918 = load i160, ptr %81, align 4
  %919 = insertvalue { ptr, i160 } %917, i160 %918, 1
  %920 = getelementptr [1 x ptr], ptr %83, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %920, align 8
  %921 = call ptr @llvm.invariant.start.p0(i64 1, ptr %83)
  %922 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %923 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %924 = getelementptr { ptr }, ptr %84, i32 0, i32 0
  store ptr %916, ptr %924, align 8
  %925 = call ptr @class_behavior_wrapper(ptr %923, ptr %84)
  call void %925(ptr %83, { ptr, i160 } %919)
  %926 = load ptr, ptr %58, align 8
  store ptr %926, ptr %58, align 8
  %927 = load i32, ptr %57, align 4
  store i32 %927, ptr %57, align 4
  %.reload55 = load i32, ptr %.reg2mem51, align 4
  store i1 false, ptr %.reg2mem115, align 1
  store i32 %.reload55, ptr %.reg2mem117, align 4
  br label %928

928:                                              ; preds = %860, %856
  %.reload118 = load i32, ptr %.reg2mem117, align 4
  %.reload116 = load i1, ptr %.reg2mem115, align 1
  store i32 %.reload118, ptr %.reg2mem26, align 4
  store i1 %.reload116, ptr %.reg2mem24, align 1
  br label %929

929:                                              ; preds = %928
  %.reload44 = load i32, ptr %.reg2mem43, align 4
  %930 = add i32 %.reload44, 1
  store i32 %930, ptr %.reg2mem22, align 4
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  %.reload25 = load i1, ptr %.reg2mem24, align 1
  %.reload27 = load i32, ptr %.reg2mem26, align 4
  store i32 %.reload23, ptr %.reg2mem109, align 4
  store i1 %.reload25, ptr %.reg2mem111, align 1
  store i32 %.reload27, ptr %.reg2mem113, align 4
  br label %932

931:                                              ; preds = %724
  store i32 poison, ptr %.reg2mem109, align 4
  store i1 poison, ptr %.reg2mem111, align 1
  store i32 poison, ptr %.reg2mem113, align 4
  br label %932

932:                                              ; preds = %931, %929
  %.reload114 = load i32, ptr %.reg2mem113, align 4
  %.reload112 = load i1, ptr %.reg2mem111, align 1
  %.reload110 = load i32, ptr %.reg2mem109, align 4
  store i32 %.reload114, ptr %.reg2mem20, align 4
  store i1 %.reload112, ptr %.reg2mem18, align 1
  store i32 %.reload110, ptr %.reg2mem16, align 4
  br label %933

933:                                              ; preds = %932
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  %.reload19 = load i1, ptr %.reg2mem18, align 1
  %.reload21 = load i32, ptr %.reg2mem20, align 4
  %.reload41 = load i1, ptr %.reg2mem40, align 1
  %.reload49 = load i1, ptr %.reg2mem47, align 1
  %.reload54 = load i32, ptr %.reg2mem51, align 4
  store i32 %.reload17, ptr %.reg2mem103, align 4
  store i1 %.reload19, ptr %.reg2mem105, align 1
  store i32 %.reload21, ptr %.reg2mem107, align 4
  br i1 %.reload41, label %934, label %935

934:                                              ; preds = %933
  %.reload108 = load i32, ptr %.reg2mem107, align 4
  %.reload106 = load i1, ptr %.reg2mem105, align 1
  %.reload104 = load i32, ptr %.reg2mem103, align 4
  store i32 %.reload108, ptr %.reg2mem14, align 4
  store i1 %.reload106, ptr %.reg2mem12, align 1
  store i32 %.reload104, ptr %.reg2mem10, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  %.reload13 = load i1, ptr %.reg2mem12, align 1
  %.reload15 = load i32, ptr %.reg2mem14, align 4
  store i32 %.reload11, ptr %.reg2mem119, align 4
  store i1 %.reload13, ptr %.reg2mem121, align 1
  store i32 %.reload15, ptr %.reg2mem123, align 4
  br label %724

935:                                              ; preds = %933
  %936 = call i64 @clock()
  store i64 %936, ptr %.reg2mem8, align 4
  %.reload53 = load i32, ptr %.reg2mem51, align 4
  %.reload62 = load i32, ptr %.reg2mem59, align 4
  %937 = icmp ne i32 %.reload53, %.reload62
  %.reload48 = load i1, ptr %.reg2mem47, align 1
  %938 = select i1 %937, i1 false, i1 %.reload48
  %939 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 0
  %940 = load ptr, ptr %939, align 8
  %941 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %940, 0
  %942 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %943 = load ptr, ptr %942, align 8
  %944 = insertvalue { ptr, ptr, ptr, i32 } %941, ptr %943, 1
  %945 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 2
  %946 = load ptr, ptr %945, align 8
  %947 = insertvalue { ptr, ptr, ptr, i32 } %944, ptr %946, 2
  %948 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  %949 = load i32, ptr %948, align 4
  %950 = insertvalue { ptr, ptr, ptr, i32 } %947, i32 %949, 3
  %951 = call ptr @llvm.invariant.start.p0(i64 0, ptr %85)
  %952 = call ptr @llvm.invariant.start.p0(i64 688, ptr %940)
  %953 = getelementptr ptr, ptr %940, i32 %949
  %954 = getelementptr ptr, ptr %953, i32 24
  %955 = load ptr, ptr %954, align 8
  %956 = call ptr @behavior_wrapper(ptr %955, { ptr, ptr, ptr, i32 } %950, ptr %86)
  %957 = call i32 %956({ ptr, ptr, ptr, i32 } %950, { ptr, ptr, ptr, i32 } %950, ptr %85)
  %958 = icmp ne i32 %957, 0
  %959 = select i1 %958, i1 false, i1 %938
  store i1 %959, ptr %.reg2mem5, align 1
  %.reload61 = load i32, ptr %.reg2mem59, align 4
  %960 = icmp sgt i32 %.reload61, 0
  br i1 %960, label %961, label %1026

961:                                              ; preds = %935
  %962 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 0
  %963 = load ptr, ptr %962, align 8
  %964 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %963, 0
  %965 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 1
  %966 = load ptr, ptr %965, align 8
  %967 = insertvalue { ptr, ptr, ptr, i32 } %964, ptr %966, 1
  %968 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 2
  %969 = load ptr, ptr %968, align 8
  %970 = insertvalue { ptr, ptr, ptr, i32 } %967, ptr %969, 2
  %971 = getelementptr { ptr, ptr, ptr, i32 }, ptr %341, i32 0, i32 3
  %972 = load i32, ptr %971, align 4
  %973 = insertvalue { ptr, ptr, ptr, i32 } %970, i32 %972, 3
  %974 = getelementptr [1 x ptr], ptr %87, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %974, align 8
  %975 = call ptr @llvm.invariant.start.p0(i64 1, ptr %87)
  %976 = call ptr @llvm.invariant.start.p0(i64 600, ptr %963)
  %977 = getelementptr ptr, ptr %963, i32 %972
  %978 = getelementptr ptr, ptr %977, i32 15
  %979 = load ptr, ptr %978, align 8
  %980 = getelementptr { ptr }, ptr %88, i32 0, i32 0
  store ptr @i32_typ, ptr %980, align 8
  %981 = call ptr @behavior_wrapper(ptr %979, { ptr, ptr, ptr, i32 } %973, ptr %88)
  %982 = call { ptr, i160 } %981({ ptr, ptr, ptr, i32 } %973, { ptr, ptr, ptr, i32 } %973, ptr %87, i32 0)
  store { ptr, i160 } %982, ptr %89, align 8
  %983 = getelementptr { ptr, i160 }, ptr %89, i32 0, i32 1
  %984 = load i32, ptr %983, align 4
  store ptr @i32_typ, ptr %91, align 8
  store i32 %984, ptr %90, align 4
  %985 = load ptr, ptr %91, align 8
  %986 = insertvalue { ptr, i160 } undef, ptr %985, 0
  %987 = load i160, ptr %90, align 4
  %988 = insertvalue { ptr, i160 } %986, i160 %987, 1
  %989 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 0
  %990 = load ptr, ptr %989, align 8
  %991 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %990, 0
  %992 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %993 = load ptr, ptr %992, align 8
  %994 = insertvalue { ptr, ptr, ptr, i32 } %991, ptr %993, 1
  %995 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 2
  %996 = load ptr, ptr %995, align 8
  %997 = insertvalue { ptr, ptr, ptr, i32 } %994, ptr %996, 2
  %998 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  %999 = load i32, ptr %998, align 4
  %1000 = insertvalue { ptr, ptr, ptr, i32 } %997, i32 %999, 3
  %1001 = getelementptr [1 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1001, align 8
  %1002 = call ptr @llvm.invariant.start.p0(i64 1, ptr %92)
  %1003 = call ptr @llvm.invariant.start.p0(i64 688, ptr %990)
  %1004 = getelementptr ptr, ptr %990, i32 %999
  %1005 = getelementptr ptr, ptr %1004, i32 20
  %1006 = load ptr, ptr %1005, align 8
  %1007 = getelementptr { ptr }, ptr %93, i32 0, i32 0
  store ptr %985, ptr %1007, align 8
  %1008 = call ptr @behavior_wrapper(ptr %1006, { ptr, ptr, ptr, i32 } %1000, ptr %93)
  %1009 = call { ptr, i160 } %1008({ ptr, ptr, ptr, i32 } %1000, { ptr, ptr, ptr, i32 } %1000, ptr %92, { ptr, i160 } %988)
  store { ptr, i160 } %1009, ptr %94, align 8
  %1010 = getelementptr { ptr, i32 }, ptr %94, i32 0, i32 0
  %1011 = load ptr, ptr %1010, align 8
  store ptr %1011, ptr %96, align 8
  %1012 = getelementptr { ptr, i32 }, ptr %94, i32 0, i32 1
  %1013 = load i32, ptr %1012, align 4
  store i32 %1013, ptr %95, align 4
  %1014 = load ptr, ptr %96, align 8
  %1015 = ptrtoint ptr %1014 to i64
  %1016 = icmp eq i64 %1015, ptrtoint (ptr @nil_typ to i64)
  %1017 = icmp eq i64 %1015, 0
  %1018 = or i1 %1016, %1017
  %1019 = icmp eq i1 %1018, false
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  %1020 = select i1 %1019, i1 false, i1 %.reload7
  store i1 %1020, ptr %.reg2mem3, align 1
  br i1 %1019, label %1021, label %._crit_edge2

._crit_edge2:                                     ; preds = %961
  br label %1025

1021:                                             ; preds = %961
  %1022 = load i32, ptr %95, align 4
  store i32 %1022, ptr %97, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %98, align 4
  %1023 = load ptr, ptr %98, align 8
  store ptr %1023, ptr %96, align 8
  %1024 = load i32, ptr %97, align 4
  store i32 %1024, ptr %95, align 4
  br label %1025

1025:                                             ; preds = %._crit_edge2, %1021
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  store i1 %.reload4, ptr %.reg2mem101, align 1
  br label %1027

1026:                                             ; preds = %935
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  store i1 %.reload6, ptr %.reg2mem101, align 1
  br label %1027

1027:                                             ; preds = %1026, %1025
  %.reload102 = load i1, ptr %.reg2mem101, align 1
  store i1 %.reload102, ptr %.reg2mem, align 1
  br label %1028

1028:                                             ; preds = %1027
  %1029 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 14))
  store ptr %1029, ptr %99, align 8
  %1030 = getelementptr { ptr }, ptr %99, i32 0, i32 0
  %1031 = getelementptr { ptr }, ptr %100, i32 0, i32 0
  %1032 = load ptr, ptr %1030, align 8
  store ptr %1032, ptr %1031, align 8
  %1033 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  %1034 = load ptr, ptr %100, align 8
  %1035 = load [13 x i8], ptr @ctedc_Remove_Random, align 1
  store [13 x i8] %1035, ptr %1034, align 1
  store ptr @String, ptr %101, align 8
  %1036 = load ptr, ptr %101, align 8
  %1037 = getelementptr ptr, ptr %1036, i32 6
  %1038 = load ptr, ptr %1037, align 8
  %1039 = call { i64, i64 } @size_wrapper(ptr %1038, ptr %101)
  %1040 = extractvalue { i64, i64 } %1039, 0
  %1041 = call ptr @bump_malloc(i64 %1040)
  %1042 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %1043 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  store ptr @String, ptr %102, align 8
  store ptr %1041, ptr %1042, align 8
  store i32 9, ptr %1043, align 4
  %1044 = call ptr @llvm.invariant.start.p0(i64 16, ptr %102)
  %1045 = getelementptr { ptr }, ptr %100, i32 0, i32 0
  %1046 = load ptr, ptr %1045, align 8
  %1047 = insertvalue { ptr } undef, ptr %1046, 0
  %1048 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %1049 = load ptr, ptr %1048, align 8
  %1050 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1049, 0
  %1051 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %1052 = load ptr, ptr %1051, align 8
  %1053 = insertvalue { ptr, ptr, ptr, i32 } %1050, ptr %1052, 1
  %1054 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %1055 = load ptr, ptr %1054, align 8
  %1056 = insertvalue { ptr, ptr, ptr, i32 } %1053, ptr %1055, 2
  %1057 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %1058 = load i32, ptr %1057, align 4
  %1059 = insertvalue { ptr, ptr, ptr, i32 } %1056, i32 %1058, 3
  %1060 = getelementptr [3 x ptr], ptr %103, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1060, align 8
  %1061 = getelementptr [3 x ptr], ptr %103, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1061, align 8
  %1062 = getelementptr [3 x ptr], ptr %103, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1062, align 8
  %1063 = call ptr @llvm.invariant.start.p0(i64 9, ptr %103)
  %1064 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1049)
  %1065 = getelementptr ptr, ptr %1049, i32 %1058
  %1066 = getelementptr ptr, ptr %1065, i32 4
  %1067 = load ptr, ptr %1066, align 8
  %1068 = getelementptr { ptr, ptr, ptr }, ptr %104, i32 0, i32 0
  store ptr @buffer_typ, ptr %1068, align 8
  %1069 = getelementptr { ptr, ptr, ptr }, ptr %104, i32 0, i32 1
  store ptr @i32_typ, ptr %1069, align 8
  %1070 = getelementptr { ptr, ptr, ptr }, ptr %104, i32 0, i32 2
  store ptr @i32_typ, ptr %1070, align 8
  %1071 = call ptr @behavior_wrapper(ptr %1067, { ptr, ptr, ptr, i32 } %1059, ptr %104)
  call void %1071({ ptr, ptr, ptr, i32 } %1059, { ptr, ptr, ptr, i32 } %1059, ptr %103, { ptr } %1047, i32 13, i32 14)
  %.reload9 = load i64, ptr %.reg2mem8, align 4
  %.reload58 = load i64, ptr %.reg2mem57, align 4
  %1072 = sub i64 %.reload9, %.reload58
  %1073 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %1074 = load ptr, ptr %1073, align 8
  %1075 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1074, 0
  %1076 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %1077 = load ptr, ptr %1076, align 8
  %1078 = insertvalue { ptr, ptr, ptr, i32 } %1075, ptr %1077, 1
  %1079 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %1080 = load ptr, ptr %1079, align 8
  %1081 = insertvalue { ptr, ptr, ptr, i32 } %1078, ptr %1080, 2
  %1082 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %1083 = load i32, ptr %1082, align 4
  %1084 = insertvalue { ptr, ptr, ptr, i32 } %1081, i32 %1083, 3
  %.reload60 = load i32, ptr %.reg2mem59, align 4
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %1084, i32 %.reload60, i64 %1072)
  %1085 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 19))
  store ptr %1085, ptr %105, align 8
  %1086 = getelementptr { ptr }, ptr %105, i32 0, i32 0
  %1087 = getelementptr { ptr }, ptr %106, i32 0, i32 0
  %1088 = load ptr, ptr %1086, align 8
  store ptr %1088, ptr %1087, align 8
  %1089 = call ptr @llvm.invariant.start.p0(i64 16, ptr %106)
  %1090 = load ptr, ptr %106, align 8
  %1091 = load [18 x i8], ptr @xrkjj_____Verification_, align 1
  store [18 x i8] %1091, ptr %1090, align 1
  store ptr @String, ptr %107, align 8
  %1092 = load ptr, ptr %107, align 8
  %1093 = getelementptr ptr, ptr %1092, i32 6
  %1094 = load ptr, ptr %1093, align 8
  %1095 = call { i64, i64 } @size_wrapper(ptr %1094, ptr %107)
  %1096 = extractvalue { i64, i64 } %1095, 0
  %1097 = call ptr @bump_malloc(i64 %1096)
  %1098 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %1099 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  store ptr @String, ptr %108, align 8
  store ptr %1097, ptr %1098, align 8
  store i32 9, ptr %1099, align 4
  %1100 = call ptr @llvm.invariant.start.p0(i64 16, ptr %108)
  %1101 = getelementptr { ptr }, ptr %106, i32 0, i32 0
  %1102 = load ptr, ptr %1101, align 8
  %1103 = insertvalue { ptr } undef, ptr %1102, 0
  %1104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %1105 = load ptr, ptr %1104, align 8
  %1106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1105, 0
  %1107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %1108 = load ptr, ptr %1107, align 8
  %1109 = insertvalue { ptr, ptr, ptr, i32 } %1106, ptr %1108, 1
  %1110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %1111 = load ptr, ptr %1110, align 8
  %1112 = insertvalue { ptr, ptr, ptr, i32 } %1109, ptr %1111, 2
  %1113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %1114 = load i32, ptr %1113, align 4
  %1115 = insertvalue { ptr, ptr, ptr, i32 } %1112, i32 %1114, 3
  %1116 = getelementptr [3 x ptr], ptr %109, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1116, align 8
  %1117 = getelementptr [3 x ptr], ptr %109, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1117, align 8
  %1118 = getelementptr [3 x ptr], ptr %109, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1118, align 8
  %1119 = call ptr @llvm.invariant.start.p0(i64 9, ptr %109)
  %1120 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1105)
  %1121 = getelementptr ptr, ptr %1105, i32 %1114
  %1122 = getelementptr ptr, ptr %1121, i32 4
  %1123 = load ptr, ptr %1122, align 8
  %1124 = getelementptr { ptr, ptr, ptr }, ptr %110, i32 0, i32 0
  store ptr @buffer_typ, ptr %1124, align 8
  %1125 = getelementptr { ptr, ptr, ptr }, ptr %110, i32 0, i32 1
  store ptr @i32_typ, ptr %1125, align 8
  %1126 = getelementptr { ptr, ptr, ptr }, ptr %110, i32 0, i32 2
  store ptr @i32_typ, ptr %1126, align 8
  %1127 = call ptr @behavior_wrapper(ptr %1123, { ptr, ptr, ptr, i32 } %1115, ptr %110)
  call void %1127({ ptr, ptr, ptr, i32 } %1115, { ptr, ptr, ptr, i32 } %1115, ptr %109, { ptr } %1103, i32 18, i32 19)
  %1128 = getelementptr { ptr, i160 }, ptr %108, i32 0, i32 0
  %1129 = load ptr, ptr %1128, align 8
  %1130 = insertvalue { ptr, i160 } undef, ptr %1129, 0
  %1131 = getelementptr { ptr, i160 }, ptr %108, i32 0, i32 1
  %1132 = load i160, ptr %1131, align 4
  %1133 = insertvalue { ptr, i160 } %1130, i160 %1132, 1
  %1134 = getelementptr [1 x ptr], ptr %111, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1134, align 8
  %1135 = call ptr @llvm.invariant.start.p0(i64 1, ptr %111)
  %1136 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1137 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1138 = getelementptr { ptr }, ptr %112, i32 0, i32 0
  store ptr %1129, ptr %1138, align 8
  %1139 = call ptr @class_behavior_wrapper(ptr %1137, ptr %112)
  call void %1139(ptr %111, { ptr, i160 } %1133)
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %1140, label %1196

1140:                                             ; preds = %1028
  %1141 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %1141, ptr %113, align 8
  %1142 = getelementptr { ptr }, ptr %113, i32 0, i32 0
  %1143 = getelementptr { ptr }, ptr %114, i32 0, i32 0
  %1144 = load ptr, ptr %1142, align 8
  store ptr %1144, ptr %1143, align 8
  %1145 = call ptr @llvm.invariant.start.p0(i64 16, ptr %114)
  %1146 = load ptr, ptr %114, align 8
  %1147 = load [4 x i8], ptr @tiler_PASS, align 1
  store [4 x i8] %1147, ptr %1146, align 1
  store ptr @String, ptr %115, align 8
  %1148 = load ptr, ptr %115, align 8
  %1149 = getelementptr ptr, ptr %1148, i32 6
  %1150 = load ptr, ptr %1149, align 8
  %1151 = call { i64, i64 } @size_wrapper(ptr %1150, ptr %115)
  %1152 = extractvalue { i64, i64 } %1151, 0
  %1153 = call ptr @bump_malloc(i64 %1152)
  %1154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %1155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  store ptr @String, ptr %116, align 8
  store ptr %1153, ptr %1154, align 8
  store i32 9, ptr %1155, align 4
  %1156 = call ptr @llvm.invariant.start.p0(i64 16, ptr %116)
  %1157 = getelementptr { ptr }, ptr %114, i32 0, i32 0
  %1158 = load ptr, ptr %1157, align 8
  %1159 = insertvalue { ptr } undef, ptr %1158, 0
  %1160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %1161 = load ptr, ptr %1160, align 8
  %1162 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1161, 0
  %1163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %1164 = load ptr, ptr %1163, align 8
  %1165 = insertvalue { ptr, ptr, ptr, i32 } %1162, ptr %1164, 1
  %1166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %1167 = load ptr, ptr %1166, align 8
  %1168 = insertvalue { ptr, ptr, ptr, i32 } %1165, ptr %1167, 2
  %1169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %1170 = load i32, ptr %1169, align 4
  %1171 = insertvalue { ptr, ptr, ptr, i32 } %1168, i32 %1170, 3
  %1172 = getelementptr [3 x ptr], ptr %117, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1172, align 8
  %1173 = getelementptr [3 x ptr], ptr %117, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1173, align 8
  %1174 = getelementptr [3 x ptr], ptr %117, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1174, align 8
  %1175 = call ptr @llvm.invariant.start.p0(i64 9, ptr %117)
  %1176 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1161)
  %1177 = getelementptr ptr, ptr %1161, i32 %1170
  %1178 = getelementptr ptr, ptr %1177, i32 4
  %1179 = load ptr, ptr %1178, align 8
  %1180 = getelementptr { ptr, ptr, ptr }, ptr %118, i32 0, i32 0
  store ptr @buffer_typ, ptr %1180, align 8
  %1181 = getelementptr { ptr, ptr, ptr }, ptr %118, i32 0, i32 1
  store ptr @i32_typ, ptr %1181, align 8
  %1182 = getelementptr { ptr, ptr, ptr }, ptr %118, i32 0, i32 2
  store ptr @i32_typ, ptr %1182, align 8
  %1183 = call ptr @behavior_wrapper(ptr %1179, { ptr, ptr, ptr, i32 } %1171, ptr %118)
  call void %1183({ ptr, ptr, ptr, i32 } %1171, { ptr, ptr, ptr, i32 } %1171, ptr %117, { ptr } %1159, i32 4, i32 5)
  %1184 = getelementptr { ptr, i160 }, ptr %116, i32 0, i32 0
  %1185 = load ptr, ptr %1184, align 8
  %1186 = insertvalue { ptr, i160 } undef, ptr %1185, 0
  %1187 = getelementptr { ptr, i160 }, ptr %116, i32 0, i32 1
  %1188 = load i160, ptr %1187, align 4
  %1189 = insertvalue { ptr, i160 } %1186, i160 %1188, 1
  %1190 = getelementptr [1 x ptr], ptr %119, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1190, align 8
  %1191 = call ptr @llvm.invariant.start.p0(i64 1, ptr %119)
  %1192 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1193 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1194 = getelementptr { ptr }, ptr %120, i32 0, i32 0
  store ptr %1185, ptr %1194, align 8
  %1195 = call ptr @class_behavior_wrapper(ptr %1193, ptr %120)
  call void %1195(ptr %119, { ptr, i160 } %1189)
  br label %1252

1196:                                             ; preds = %1028
  %1197 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %1197, ptr %121, align 8
  %1198 = getelementptr { ptr }, ptr %121, i32 0, i32 0
  %1199 = getelementptr { ptr }, ptr %122, i32 0, i32 0
  %1200 = load ptr, ptr %1198, align 8
  store ptr %1200, ptr %1199, align 8
  %1201 = call ptr @llvm.invariant.start.p0(i64 16, ptr %122)
  %1202 = load ptr, ptr %122, align 8
  %1203 = load [4 x i8], ptr @qnuhs_FAIL, align 1
  store [4 x i8] %1203, ptr %1202, align 1
  store ptr @String, ptr %123, align 8
  %1204 = load ptr, ptr %123, align 8
  %1205 = getelementptr ptr, ptr %1204, i32 6
  %1206 = load ptr, ptr %1205, align 8
  %1207 = call { i64, i64 } @size_wrapper(ptr %1206, ptr %123)
  %1208 = extractvalue { i64, i64 } %1207, 0
  %1209 = call ptr @bump_malloc(i64 %1208)
  %1210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 1
  %1211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 3
  store ptr @String, ptr %124, align 8
  store ptr %1209, ptr %1210, align 8
  store i32 9, ptr %1211, align 4
  %1212 = call ptr @llvm.invariant.start.p0(i64 16, ptr %124)
  %1213 = getelementptr { ptr }, ptr %122, i32 0, i32 0
  %1214 = load ptr, ptr %1213, align 8
  %1215 = insertvalue { ptr } undef, ptr %1214, 0
  %1216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 0
  %1217 = load ptr, ptr %1216, align 8
  %1218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1217, 0
  %1219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 1
  %1220 = load ptr, ptr %1219, align 8
  %1221 = insertvalue { ptr, ptr, ptr, i32 } %1218, ptr %1220, 1
  %1222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 2
  %1223 = load ptr, ptr %1222, align 8
  %1224 = insertvalue { ptr, ptr, ptr, i32 } %1221, ptr %1223, 2
  %1225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 3
  %1226 = load i32, ptr %1225, align 4
  %1227 = insertvalue { ptr, ptr, ptr, i32 } %1224, i32 %1226, 3
  %1228 = getelementptr [3 x ptr], ptr %125, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1228, align 8
  %1229 = getelementptr [3 x ptr], ptr %125, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1229, align 8
  %1230 = getelementptr [3 x ptr], ptr %125, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1230, align 8
  %1231 = call ptr @llvm.invariant.start.p0(i64 9, ptr %125)
  %1232 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1217)
  %1233 = getelementptr ptr, ptr %1217, i32 %1226
  %1234 = getelementptr ptr, ptr %1233, i32 4
  %1235 = load ptr, ptr %1234, align 8
  %1236 = getelementptr { ptr, ptr, ptr }, ptr %126, i32 0, i32 0
  store ptr @buffer_typ, ptr %1236, align 8
  %1237 = getelementptr { ptr, ptr, ptr }, ptr %126, i32 0, i32 1
  store ptr @i32_typ, ptr %1237, align 8
  %1238 = getelementptr { ptr, ptr, ptr }, ptr %126, i32 0, i32 2
  store ptr @i32_typ, ptr %1238, align 8
  %1239 = call ptr @behavior_wrapper(ptr %1235, { ptr, ptr, ptr, i32 } %1227, ptr %126)
  call void %1239({ ptr, ptr, ptr, i32 } %1227, { ptr, ptr, ptr, i32 } %1227, ptr %125, { ptr } %1215, i32 4, i32 5)
  %1240 = getelementptr { ptr, i160 }, ptr %124, i32 0, i32 0
  %1241 = load ptr, ptr %1240, align 8
  %1242 = insertvalue { ptr, i160 } undef, ptr %1241, 0
  %1243 = getelementptr { ptr, i160 }, ptr %124, i32 0, i32 1
  %1244 = load i160, ptr %1243, align 4
  %1245 = insertvalue { ptr, i160 } %1242, i160 %1244, 1
  %1246 = getelementptr [1 x ptr], ptr %127, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1246, align 8
  %1247 = call ptr @llvm.invariant.start.p0(i64 1, ptr %127)
  %1248 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1249 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1250 = getelementptr { ptr }, ptr %128, i32 0, i32 0
  store ptr %1241, ptr %1250, align 8
  %1251 = call ptr @class_behavior_wrapper(ptr %1249, ptr %128)
  call void %1251(ptr %127, { ptr, i160 } %1245)
  br label %1252

1252:                                             ; preds = %1196, %1140
  %1253 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 21))
  store ptr %1253, ptr %129, align 8
  %1254 = getelementptr { ptr }, ptr %129, i32 0, i32 0
  %1255 = getelementptr { ptr }, ptr %130, i32 0, i32 0
  %1256 = load ptr, ptr %1254, align 8
  store ptr %1256, ptr %1255, align 8
  %1257 = call ptr @llvm.invariant.start.p0(i64 16, ptr %130)
  %1258 = load ptr, ptr %130, align 8
  %1259 = load [20 x i8], ptr @mqbyx_____Items_removed_, align 1
  store [20 x i8] %1259, ptr %1258, align 1
  store ptr @String, ptr %131, align 8
  %1260 = load ptr, ptr %131, align 8
  %1261 = getelementptr ptr, ptr %1260, i32 6
  %1262 = load ptr, ptr %1261, align 8
  %1263 = call { i64, i64 } @size_wrapper(ptr %1262, ptr %131)
  %1264 = extractvalue { i64, i64 } %1263, 0
  %1265 = call ptr @bump_malloc(i64 %1264)
  %1266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 1
  %1267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 3
  store ptr @String, ptr %132, align 8
  store ptr %1265, ptr %1266, align 8
  store i32 9, ptr %1267, align 4
  %1268 = call ptr @llvm.invariant.start.p0(i64 16, ptr %132)
  %1269 = getelementptr { ptr }, ptr %130, i32 0, i32 0
  %1270 = load ptr, ptr %1269, align 8
  %1271 = insertvalue { ptr } undef, ptr %1270, 0
  %1272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 0
  %1273 = load ptr, ptr %1272, align 8
  %1274 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1273, 0
  %1275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 1
  %1276 = load ptr, ptr %1275, align 8
  %1277 = insertvalue { ptr, ptr, ptr, i32 } %1274, ptr %1276, 1
  %1278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 2
  %1279 = load ptr, ptr %1278, align 8
  %1280 = insertvalue { ptr, ptr, ptr, i32 } %1277, ptr %1279, 2
  %1281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 3
  %1282 = load i32, ptr %1281, align 4
  %1283 = insertvalue { ptr, ptr, ptr, i32 } %1280, i32 %1282, 3
  %1284 = getelementptr [3 x ptr], ptr %133, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1284, align 8
  %1285 = getelementptr [3 x ptr], ptr %133, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1285, align 8
  %1286 = getelementptr [3 x ptr], ptr %133, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1286, align 8
  %1287 = call ptr @llvm.invariant.start.p0(i64 9, ptr %133)
  %1288 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1273)
  %1289 = getelementptr ptr, ptr %1273, i32 %1282
  %1290 = getelementptr ptr, ptr %1289, i32 4
  %1291 = load ptr, ptr %1290, align 8
  %1292 = getelementptr { ptr, ptr, ptr }, ptr %134, i32 0, i32 0
  store ptr @buffer_typ, ptr %1292, align 8
  %1293 = getelementptr { ptr, ptr, ptr }, ptr %134, i32 0, i32 1
  store ptr @i32_typ, ptr %1293, align 8
  %1294 = getelementptr { ptr, ptr, ptr }, ptr %134, i32 0, i32 2
  store ptr @i32_typ, ptr %1294, align 8
  %1295 = call ptr @behavior_wrapper(ptr %1291, { ptr, ptr, ptr, i32 } %1283, ptr %134)
  call void %1295({ ptr, ptr, ptr, i32 } %1283, { ptr, ptr, ptr, i32 } %1283, ptr %133, { ptr } %1271, i32 20, i32 21)
  %1296 = getelementptr { ptr, i160 }, ptr %132, i32 0, i32 0
  %1297 = load ptr, ptr %1296, align 8
  %1298 = insertvalue { ptr, i160 } undef, ptr %1297, 0
  %1299 = getelementptr { ptr, i160 }, ptr %132, i32 0, i32 1
  %1300 = load i160, ptr %1299, align 4
  %1301 = insertvalue { ptr, i160 } %1298, i160 %1300, 1
  %1302 = getelementptr [1 x ptr], ptr %135, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1302, align 8
  %1303 = call ptr @llvm.invariant.start.p0(i64 1, ptr %135)
  %1304 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1305 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1306 = getelementptr { ptr }, ptr %136, i32 0, i32 0
  store ptr %1297, ptr %1306, align 8
  %1307 = call ptr @class_behavior_wrapper(ptr %1305, ptr %136)
  call void %1307(ptr %135, { ptr, i160 } %1301)
  %.reload52 = load i32, ptr %.reg2mem51, align 4
  store i32 %.reload52, ptr %137, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %138, align 4
  %1308 = load ptr, ptr %138, align 8
  %1309 = insertvalue { ptr, i160 } undef, ptr %1308, 0
  %1310 = load i160, ptr %137, align 4
  %1311 = insertvalue { ptr, i160 } %1309, i160 %1310, 1
  %1312 = getelementptr [1 x ptr], ptr %139, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1312, align 8
  %1313 = call ptr @llvm.invariant.start.p0(i64 1, ptr %139)
  %1314 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1315 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1316 = getelementptr { ptr }, ptr %140, i32 0, i32 0
  store ptr %1308, ptr %1316, align 8
  %1317 = call ptr @class_behavior_wrapper(ptr %1315, ptr %140)
  call void %1317(ptr %139, { ptr, i160 } %1311)
  %1318 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 2))
  store ptr %1318, ptr %141, align 8
  %1319 = getelementptr { ptr }, ptr %141, i32 0, i32 0
  %1320 = getelementptr { ptr }, ptr %142, i32 0, i32 0
  %1321 = load ptr, ptr %1319, align 8
  store ptr %1321, ptr %1320, align 8
  %1322 = call ptr @llvm.invariant.start.p0(i64 16, ptr %142)
  %1323 = load ptr, ptr %142, align 8
  %1324 = load [1 x i8], ptr @kghaa_, align 1
  store [1 x i8] %1324, ptr %1323, align 1
  store ptr @String, ptr %143, align 8
  %1325 = load ptr, ptr %143, align 8
  %1326 = getelementptr ptr, ptr %1325, i32 6
  %1327 = load ptr, ptr %1326, align 8
  %1328 = call { i64, i64 } @size_wrapper(ptr %1327, ptr %143)
  %1329 = extractvalue { i64, i64 } %1328, 0
  %1330 = call ptr @bump_malloc(i64 %1329)
  %1331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %1332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  store ptr @String, ptr %144, align 8
  store ptr %1330, ptr %1331, align 8
  store i32 9, ptr %1332, align 4
  %1333 = call ptr @llvm.invariant.start.p0(i64 16, ptr %144)
  %1334 = getelementptr { ptr }, ptr %142, i32 0, i32 0
  %1335 = load ptr, ptr %1334, align 8
  %1336 = insertvalue { ptr } undef, ptr %1335, 0
  %1337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %1338 = load ptr, ptr %1337, align 8
  %1339 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1338, 0
  %1340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %1341 = load ptr, ptr %1340, align 8
  %1342 = insertvalue { ptr, ptr, ptr, i32 } %1339, ptr %1341, 1
  %1343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %1344 = load ptr, ptr %1343, align 8
  %1345 = insertvalue { ptr, ptr, ptr, i32 } %1342, ptr %1344, 2
  %1346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  %1347 = load i32, ptr %1346, align 4
  %1348 = insertvalue { ptr, ptr, ptr, i32 } %1345, i32 %1347, 3
  %1349 = getelementptr [3 x ptr], ptr %145, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1349, align 8
  %1350 = getelementptr [3 x ptr], ptr %145, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1350, align 8
  %1351 = getelementptr [3 x ptr], ptr %145, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1351, align 8
  %1352 = call ptr @llvm.invariant.start.p0(i64 9, ptr %145)
  %1353 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1338)
  %1354 = getelementptr ptr, ptr %1338, i32 %1347
  %1355 = getelementptr ptr, ptr %1354, i32 4
  %1356 = load ptr, ptr %1355, align 8
  %1357 = getelementptr { ptr, ptr, ptr }, ptr %146, i32 0, i32 0
  store ptr @buffer_typ, ptr %1357, align 8
  %1358 = getelementptr { ptr, ptr, ptr }, ptr %146, i32 0, i32 1
  store ptr @i32_typ, ptr %1358, align 8
  %1359 = getelementptr { ptr, ptr, ptr }, ptr %146, i32 0, i32 2
  store ptr @i32_typ, ptr %1359, align 8
  %1360 = call ptr @behavior_wrapper(ptr %1356, { ptr, ptr, ptr, i32 } %1348, ptr %146)
  call void %1360({ ptr, ptr, ptr, i32 } %1348, { ptr, ptr, ptr, i32 } %1348, ptr %145, { ptr } %1336, i32 1, i32 2)
  %1361 = getelementptr { ptr, i160 }, ptr %144, i32 0, i32 0
  %1362 = load ptr, ptr %1361, align 8
  %1363 = insertvalue { ptr, i160 } undef, ptr %1362, 0
  %1364 = getelementptr { ptr, i160 }, ptr %144, i32 0, i32 1
  %1365 = load i160, ptr %1364, align 4
  %1366 = insertvalue { ptr, i160 } %1363, i160 %1365, 1
  %1367 = getelementptr [1 x ptr], ptr %147, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1367, align 8
  %1368 = call ptr @llvm.invariant.start.p0(i64 1, ptr %147)
  %1369 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1370 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1371 = getelementptr { ptr }, ptr %148, i32 0, i32 0
  store ptr %1362, ptr %1371, align 8
  %1372 = call ptr @class_behavior_wrapper(ptr %1370, ptr %148)
  call void %1372(ptr %147, { ptr, i160 } %1366)
  ret void
}

define i32 @main() {
  %1 = alloca ptr, align 8
  %2 = alloca { ptr }, align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [3 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca ptr, align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca [3 x ptr], align 8
  %14 = alloca { ptr, ptr, ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void @setup_landing_pad()
  %17 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 27))
  store ptr %17, ptr %1, align 8
  %18 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %19 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %2)
  %22 = load ptr, ptr %2, align 8
  %23 = load [26 x i8], ptr @itqol__HashMap_Benchmarks_, align 1
  store [26 x i8] %23, ptr %22, align 1
  store ptr @String, ptr %3, align 8
  %24 = load ptr, ptr %3, align 8
  %25 = getelementptr ptr, ptr %24, i32 6
  %26 = load ptr, ptr %25, align 8
  %27 = call { i64, i64 } @size_wrapper(ptr %26, ptr %3)
  %28 = extractvalue { i64, i64 } %27, 0
  %29 = call ptr @bump_malloc(i64 %28)
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  store ptr @String, ptr %4, align 8
  store ptr %29, ptr %30, align 8
  store i32 9, ptr %31, align 4
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %33 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %37, 0
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %43, 2
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %46, 3
  %48 = getelementptr [3 x ptr], ptr %5, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %48, align 8
  %49 = getelementptr [3 x ptr], ptr %5, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %49, align 8
  %50 = getelementptr [3 x ptr], ptr %5, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 9, ptr %5)
  %52 = call ptr @llvm.invariant.start.p0(i64 280, ptr %37)
  %53 = getelementptr ptr, ptr %37, i32 %46
  %54 = getelementptr ptr, ptr %53, i32 4
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr }, ptr %6, i32 0, i32 0
  store ptr @buffer_typ, ptr %56, align 8
  %57 = getelementptr { ptr, ptr, ptr }, ptr %6, i32 0, i32 1
  store ptr @i32_typ, ptr %57, align 8
  %58 = getelementptr { ptr, ptr, ptr }, ptr %6, i32 0, i32 2
  store ptr @i32_typ, ptr %58, align 8
  %59 = call ptr @behavior_wrapper(ptr %55, { ptr, ptr, ptr, i32 } %47, ptr %6)
  call void %59({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } %47, ptr %5, { ptr } %35, i32 26, i32 27)
  %60 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, i160 } undef, ptr %61, 0
  %63 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %64 = load i160, ptr %63, align 4
  %65 = insertvalue { ptr, i160 } %62, i160 %64, 1
  %66 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_String, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %68 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %69 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %70 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr %61, ptr %70, align 8
  %71 = call ptr @class_behavior_wrapper(ptr %69, ptr %8)
  call void %71(ptr %7, { ptr, i160 } %65)
  call void @benchmark_insert_sequential(i32 1000000)
  call void @benchmark_insert_random(i32 1000000)
  call void @benchmark_get_sequential_hit(i32 1000000)
  call void @benchmark_get_random_hit(i32 1000000)
  call void @benchmark_get_random_miss(i32 1000000)
  call void @benchmark_remove_random(i32 1000000)
  %72 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 28))
  store ptr %72, ptr %9, align 8
  %73 = getelementptr { ptr }, ptr %9, i32 0, i32 0
  %74 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %75 = load ptr, ptr %73, align 8
  store ptr %75, ptr %74, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  %77 = load ptr, ptr %10, align 8
  %78 = load [27 x i8], ptr @wohtp__Benchmarks_Complete_, align 1
  store [27 x i8] %78, ptr %77, align 1
  store ptr @String, ptr %11, align 8
  %79 = load ptr, ptr %11, align 8
  %80 = getelementptr ptr, ptr %79, i32 6
  %81 = load ptr, ptr %80, align 8
  %82 = call { i64, i64 } @size_wrapper(ptr %81, ptr %11)
  %83 = extractvalue { i64, i64 } %82, 0
  %84 = call ptr @bump_malloc(i64 %83)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  store ptr @String, ptr %12, align 8
  store ptr %84, ptr %85, align 8
  store i32 9, ptr %86, align 4
  %87 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %88 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr } undef, ptr %89, 0
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %95, 1
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 2
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %101 = load i32, ptr %100, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %101, 3
  %103 = getelementptr [3 x ptr], ptr %13, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %103, align 8
  %104 = getelementptr [3 x ptr], ptr %13, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %104, align 8
  %105 = getelementptr [3 x ptr], ptr %13, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %105, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 9, ptr %13)
  %107 = call ptr @llvm.invariant.start.p0(i64 280, ptr %92)
  %108 = getelementptr ptr, ptr %92, i32 %101
  %109 = getelementptr ptr, ptr %108, i32 4
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr }, ptr %14, i32 0, i32 0
  store ptr @buffer_typ, ptr %111, align 8
  %112 = getelementptr { ptr, ptr, ptr }, ptr %14, i32 0, i32 1
  store ptr @i32_typ, ptr %112, align 8
  %113 = getelementptr { ptr, ptr, ptr }, ptr %14, i32 0, i32 2
  store ptr @i32_typ, ptr %113, align 8
  %114 = call ptr @behavior_wrapper(ptr %110, { ptr, ptr, ptr, i32 } %102, ptr %14)
  call void %114({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %13, { ptr } %90, i32 27, i32 28)
  %115 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, i160 } undef, ptr %116, 0
  %118 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 1
  %119 = load i160, ptr %118, align 4
  %120 = insertvalue { ptr, i160 } %117, i160 %119, 1
  %121 = getelementptr [1 x ptr], ptr %15, i32 0, i32 0
  store ptr @_parameterization_String, ptr %121, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 1, ptr %15)
  %123 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %124 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %125 = getelementptr { ptr }, ptr %16, i32 0, i32 0
  store ptr %116, ptr %125, align 8
  %126 = call ptr @class_behavior_wrapper(ptr %124, ptr %16)
  call void %126(ptr %15, { ptr, i160 } %120)
  ret i32 0
}

define { i64, i64 } @_size_bool_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_bool_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @bool_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_bool_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_bool_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_bool_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

define { i64, i64 } @_size_any_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_size_Object(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_size_i8_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i8_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i8_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_i8_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_i8_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_i8_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_i32_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i32_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i32_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_i32_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_i32_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_i32_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_i64_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i64 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i64 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i64_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i64_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_i64_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_i64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_i64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_i128_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i128 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i128 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i128, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i128, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i128_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i128_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_i128_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_i128_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_i128_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_f64_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_f64_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @f64_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_f64_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_f64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_f64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_nil_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_nil_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @nil_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_nil_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_nil_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_nil_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_nothing_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_nothing_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @nothing_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_nothing_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_nothing_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_nothing_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_coroutine_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_coroutine_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @coroutine_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_coroutine_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_coroutine_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_coroutine_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_function_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_function_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @function_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_function_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_function_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_function_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_buffer_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_buffer_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @buffer_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_buffer_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_buffer_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_buffer_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_tuple_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @tuple_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_tuple_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_tuple_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_tuple_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_union_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem6, align 8
  store ptr @union_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_union_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload5 = load i64, ptr %.reg2mem, align 4
  %7 = icmp eq i64 %.reload5, 32
  br i1 %7, label %._crit_edge, label %9

._crit_edge:                                      ; preds = %2
  store ptr %3, ptr %.reg2mem9, align 8
  br label %8

8:                                                ; preds = %._crit_edge1, %._crit_edge
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %.reload4 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload10, ptr %0, i64 %.reload4, i1 false)
  br label %13

9:                                                ; preds = %2
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %10 = icmp sle i64 %.reload3, 16
  br i1 %10, label %._crit_edge1, label %11

._crit_edge1:                                     ; preds = %9
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  store ptr %.reload8, ptr %.reg2mem9, align 8
  br label %8

11:                                               ; preds = %9
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %12 = call ptr @bump_malloc(i64 %.reload2)
  %.reload = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %12, ptr %0, i64 %.reload, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  store ptr %12, ptr %.reload7, align 8
  br label %13

13:                                               ; preds = %11, %8
  %14 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, i160 } undef, ptr %15, 0
  %17 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %18 = load i160, ptr %17, align 4
  %19 = insertvalue { ptr, i160 } %16, i160 %18, 1
  ret { ptr, i160 } %19
}

define { i64, i64 } @_size_Entry(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = getelementptr ptr, ptr %0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr [7 x ptr], ptr %22, i32 0, i32 6
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = extractvalue { i64, i64 } %25, 1
  %28 = icmp ugt i64 %27, %13
  %29 = select i1 %28, i64 %27, i64 %13
  %30 = urem i64 %19, %27
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 %27, %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 %26, %33
  %35 = add i64 %19, %34
  %36 = getelementptr ptr, ptr %0, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr [7 x ptr], ptr %38, i32 0, i32 6
  %40 = load ptr, ptr %39, align 8
  %41 = call { i64, i64 } @size_wrapper(ptr %40, ptr %37)
  %42 = extractvalue { i64, i64 } %41, 0
  %43 = extractvalue { i64, i64 } %41, 1
  %44 = icmp ugt i64 %43, %29
  %45 = select i1 %44, i64 %43, i64 %29
  %46 = urem i64 %35, %43
  %47 = icmp eq i64 %46, 0
  %48 = sub i64 %43, %46
  %49 = select i1 %47, i64 0, i64 %48
  %50 = add i64 %42, %49
  %51 = add i64 %35, %50
  %52 = urem i64 %51, %45
  %53 = icmp eq i64 %52, 0
  %54 = sub i64 %45, %52
  %55 = select i1 %53, i64 0, i64 %54
  %56 = add i64 %51, %55
  %57 = insertvalue { i64, i64 } undef, i64 %56, 0
  %58 = insertvalue { i64, i64 } %57, i64 %45, 1
  ret { i64, i64 } %58
}

define ptr @Entry_field_Entry_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Entry_field_Entry_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @Entry_B_init_keyK_valueV_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %38 = getelementptr [15 x ptr], ptr %37, i32 0, i32 10
  %39 = getelementptr ptr, ptr %38, i32 9
  %40 = load ptr, ptr %39, align 8
  ret ptr %40
}

define ptr @Entry_B_key_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [15 x ptr], ptr %4, i32 0, i32 11
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Entry_B_value_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [15 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Entry_B_primary_hash_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [15 x ptr], ptr %4, i32 0, i32 13
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Entry_B_to_pair_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [15 x ptr], ptr %4, i32 0, i32 14
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Entry_init_keyK_valueV_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @Entry)
  %22 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %22, align 8
  %23 = alloca i160, align 8
  %24 = alloca ptr, align 8
  %25 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  store ptr %26, ptr %24, align 8
  %27 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %28 = load i160, ptr %27, align 4
  store i160 %28, ptr %23, align 4
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = load ptr, ptr %24, align 8
  store ptr %31, ptr %30, align 8
  %32 = load i160, ptr %23, align 4
  store i160 %32, ptr %29, align 4
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %9, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 120, ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr ptr, ptr %35, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 3
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %30, align 8
  %45 = insertvalue { ptr, i160 } undef, ptr %44, 0
  %46 = load i160, ptr %29, align 4
  %47 = insertvalue { ptr, i160 } %45, i160 %46, 1
  call void %43(ptr %34, { ptr, i160 } %47) #15
  %48 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %48, align 8
  %49 = alloca i160, align 8
  %50 = alloca ptr, align 8
  %51 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  store ptr %52, ptr %50, align 8
  %53 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 1
  %54 = load i160, ptr %53, align 4
  store i160 %54, ptr %49, align 4
  %55 = alloca i160, align 8
  %56 = alloca ptr, align 8
  %57 = load ptr, ptr %50, align 8
  store ptr %57, ptr %56, align 8
  %58 = load i160, ptr %49, align 4
  store i160 %58, ptr %55, align 4
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %9, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 120, ptr %61)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = getelementptr ptr, ptr %61, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 4
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %56, align 8
  %71 = insertvalue { ptr, i160 } undef, ptr %70, 0
  %72 = load i160, ptr %55, align 4
  %73 = insertvalue { ptr, i160 } %71, i160 %72, 1
  call void %69(ptr %60, { ptr, i160 } %73) #15
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = load ptr, ptr %9, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 120, ptr %76)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %79 = load i32, ptr %78, align 4
  %80 = getelementptr ptr, ptr %76, i32 %79
  %81 = getelementptr ptr, ptr %80, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 1
  %84 = load ptr, ptr %83, align 8
  call void %84(ptr %75, i32 %5) #15
  ret void
}

define { ptr, i160 } @Entry_key_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Entry)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 120, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } %29(ptr %20) #16
  %31 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %30, ptr %31, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  store ptr %35, ptr %33, align 8
  %36 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %37 = load i160, ptr %36, align 4
  store i160 %37, ptr %32, align 4
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = load ptr, ptr %33, align 8
  store ptr %40, ptr %39, align 8
  %41 = load i160, ptr %32, align 4
  store i160 %41, ptr %38, align 4
  %42 = load ptr, ptr %39, align 8
  %43 = insertvalue { ptr, i160 } undef, ptr %42, 0
  %44 = load i160, ptr %38, align 4
  %45 = insertvalue { ptr, i160 } %43, i160 %44, 1
  ret { ptr, i160 } %45
}

define { ptr, i160 } @Entry_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Entry)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 120, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 4
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } %29(ptr %20) #16
  %31 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %30, ptr %31, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  store ptr %35, ptr %33, align 8
  %36 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %37 = load i160, ptr %36, align 4
  store i160 %37, ptr %32, align 4
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = load ptr, ptr %33, align 8
  store ptr %40, ptr %39, align 8
  %41 = load i160, ptr %32, align 4
  store i160 %41, ptr %38, align 4
  %42 = load ptr, ptr %39, align 8
  %43 = insertvalue { ptr, i160 } undef, ptr %42, 0
  %44 = load i160, ptr %38, align 4
  %45 = insertvalue { ptr, i160 } %43, i160 %44, 1
  ret { ptr, i160 } %45
}

define i32 @Entry_primary_hash_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Entry)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 120, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define { ptr, ptr, ptr, i32 } @Entry_to_pair_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Entry)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 120, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } %29(ptr %20) #16
  %31 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %30, ptr %31, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  store ptr %35, ptr %33, align 8
  %36 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %37 = load i160, ptr %36, align 4
  store i160 %37, ptr %32, align 4
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %6, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 120, ptr %40)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = getelementptr ptr, ptr %40, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 4
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr { ptr, ptr }, ptr %46, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, i160 } %48(ptr %39) #16
  %50 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %49, ptr %50, align 8
  %51 = alloca i160, align 8
  %52 = alloca ptr, align 8
  %53 = getelementptr { ptr, i160 }, ptr %50, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  store ptr %54, ptr %52, align 8
  %55 = getelementptr { ptr, i160 }, ptr %50, i32 0, i32 1
  %56 = load i160, ptr %55, align 4
  store i160 %56, ptr %51, align 4
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %6, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 120, ptr %59)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = getelementptr ptr, ptr %59, i32 %62
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @typegetter_wrapper(ptr %64, ptr %58)
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %6, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 120, ptr %68)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = getelementptr ptr, ptr %68, i32 %71
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = call ptr @typegetter_wrapper(ptr %74, ptr %67)
  %76 = alloca [3 x ptr], align 8
  store ptr @Pair, ptr %76, align 8
  %77 = getelementptr ptr, ptr %76, i32 1
  store ptr %65, ptr %77, align 8
  %78 = getelementptr ptr, ptr %76, i32 2
  store ptr %75, ptr %78, align 8
  %79 = load ptr, ptr %76, align 8
  %80 = getelementptr ptr, ptr %79, i32 6
  %81 = load ptr, ptr %80, align 8
  %82 = call { i64, i64 } @size_wrapper(ptr %81, ptr %76)
  %83 = extractvalue { i64, i64 } %82, 0
  %84 = call ptr @bump_malloc(i64 %83)
  store ptr %65, ptr %84, align 8
  %85 = getelementptr ptr, ptr %84, i32 1
  store ptr %75, ptr %85, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 16, ptr %84)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  store ptr @Pair, ptr %87, align 8
  store ptr %84, ptr %88, align 8
  store i32 9, ptr %89, align 4
  %90 = call ptr @llvm.invariant.start.p0(i64 16, ptr %87)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %6, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 120, ptr %93)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = getelementptr ptr, ptr %93, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 3
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = call { ptr, i160 } %101(ptr %92) #16
  %103 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %102, ptr %103, align 8
  %104 = alloca i160, align 8
  %105 = alloca ptr, align 8
  %106 = getelementptr { ptr, i160 }, ptr %103, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  store ptr %107, ptr %105, align 8
  %108 = getelementptr { ptr, i160 }, ptr %103, i32 0, i32 1
  %109 = load i160, ptr %108, align 4
  store i160 %109, ptr %104, align 4
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = load ptr, ptr %6, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 120, ptr %112)
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %115 = load i32, ptr %114, align 4
  %116 = getelementptr ptr, ptr %112, i32 %115
  %117 = getelementptr ptr, ptr %116, i32 4
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = call { ptr, i160 } %120(ptr %111) #16
  %122 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %121, ptr %122, align 8
  %123 = alloca i160, align 8
  %124 = alloca ptr, align 8
  %125 = getelementptr { ptr, i160 }, ptr %122, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  store ptr %126, ptr %124, align 8
  %127 = getelementptr { ptr, i160 }, ptr %122, i32 0, i32 1
  %128 = load i160, ptr %127, align 4
  store i160 %128, ptr %123, align 4
  %129 = alloca i160, align 8
  %130 = alloca ptr, align 8
  %131 = load ptr, ptr %105, align 8
  store ptr %131, ptr %130, align 8
  %132 = load i160, ptr %104, align 4
  store i160 %132, ptr %129, align 4
  %133 = load ptr, ptr %130, align 8
  %134 = insertvalue { ptr, i160 } undef, ptr %133, 0
  %135 = load i160, ptr %129, align 4
  %136 = insertvalue { ptr, i160 } %134, i160 %135, 1
  %137 = alloca i160, align 8
  %138 = alloca ptr, align 8
  %139 = load ptr, ptr %124, align 8
  store ptr %139, ptr %138, align 8
  %140 = load i160, ptr %123, align 4
  store i160 %140, ptr %137, align 4
  %141 = load ptr, ptr %138, align 8
  %142 = insertvalue { ptr, i160 } undef, ptr %141, 0
  %143 = load i160, ptr %137, align 4
  %144 = insertvalue { ptr, i160 } %142, i160 %143, 1
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %146, 0
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %149, 1
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %152, 2
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %155 = load i32, ptr %154, align 4
  %156 = insertvalue { ptr, ptr, ptr, i32 } %153, i32 %155, 3
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %6, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 120, ptr %159)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = getelementptr ptr, ptr %159, i32 %162
  %164 = load ptr, ptr %163, align 8
  %165 = call ptr @typegetter_wrapper(ptr %164, ptr %158)
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = load ptr, ptr %6, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 120, ptr %168)
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %171 = load i32, ptr %170, align 4
  %172 = getelementptr ptr, ptr %168, i32 %171
  %173 = getelementptr ptr, ptr %172, i32 1
  %174 = load ptr, ptr %173, align 8
  %175 = call ptr @typegetter_wrapper(ptr %174, ptr %167)
  %176 = alloca [2 x ptr], align 8
  %177 = getelementptr [2 x ptr], ptr %176, i32 0, i32 0
  store ptr %165, ptr %177, align 8
  %178 = getelementptr [2 x ptr], ptr %176, i32 0, i32 1
  store ptr %175, ptr %178, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 4, ptr %176)
  %180 = call ptr @llvm.invariant.start.p0(i64 80, ptr %146)
  %181 = getelementptr ptr, ptr %146, i32 %155
  %182 = getelementptr ptr, ptr %181, i32 4
  %183 = load ptr, ptr %182, align 8
  %184 = alloca { ptr, ptr }, align 8
  %185 = getelementptr { ptr, ptr }, ptr %184, i32 0, i32 0
  store ptr %133, ptr %185, align 8
  %186 = getelementptr { ptr, ptr }, ptr %184, i32 0, i32 1
  store ptr %141, ptr %186, align 8
  %187 = call ptr @behavior_wrapper(ptr %183, { ptr, ptr, ptr, i32 } %156, ptr %184)
  call void %187({ ptr, ptr, ptr, i32 } %156, { ptr, ptr, ptr, i32 } %156, ptr %176, { ptr, i160 } %136, { ptr, i160 } %144)
  %188 = alloca { ptr, ptr, ptr, i32 }, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 0
  %191 = load ptr, ptr %189, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 1
  %194 = load ptr, ptr %192, align 8
  store ptr %194, ptr %193, align 8
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 2
  %197 = load ptr, ptr %195, align 8
  store ptr %197, ptr %196, align 8
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 3
  %200 = load i32, ptr %198, align 4
  store i32 %200, ptr %199, align 4
  call void @set_offset(ptr %188, ptr @Pair)
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 0
  %202 = load ptr, ptr %201, align 8
  %203 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %202, 0
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = insertvalue { ptr, ptr, ptr, i32 } %203, ptr %205, 1
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 2
  %208 = load ptr, ptr %207, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } %206, ptr %208, 2
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 3
  %211 = load i32, ptr %210, align 4
  %212 = insertvalue { ptr, ptr, ptr, i32 } %209, i32 %211, 3
  ret { ptr, ptr, ptr, i32 } %212
}

define { ptr, i160 } @Entry_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr ptr, ptr %15, i32 6
  %17 = load ptr, ptr %16, align 8
  %18 = call { i64, i64 } @size_wrapper(ptr %17, ptr %14)
  %19 = extractvalue { i64, i64 } %18, 0
  %20 = extractvalue { i64, i64 } %18, 1
  %21 = urem i64 %13, %20
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 %20, %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %19, %24
  %26 = add i64 %13, %25
  %27 = getelementptr ptr, ptr %0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 6
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %28)
  %33 = extractvalue { i64, i64 } %32, 1
  %34 = urem i64 %26, %33
  %35 = icmp eq i64 %34, 0
  %36 = sub i64 %33, %34
  %37 = select i1 %35, i64 0, i64 %36
  %38 = add i64 %26, %37
  %39 = getelementptr i8, ptr %0, i64 %38
  %40 = getelementptr ptr, ptr %0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr ptr, ptr %42, i32 7
  %44 = load ptr, ptr %43, align 8
  %45 = call { ptr, i160 } @box_wrapper(ptr %44, ptr %39, ptr %41)
  ret { ptr, i160 } %45
}

define void @Entry_setter_value(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = load ptr, ptr %0, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 6
  %18 = load ptr, ptr %17, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr %18, ptr %15)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = extractvalue { i64, i64 } %19, 1
  %22 = urem i64 %14, %21
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %21, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 %20, %25
  %27 = add i64 %14, %26
  %28 = getelementptr ptr, ptr %0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 6
  %32 = load ptr, ptr %31, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr %32, ptr %29)
  %34 = extractvalue { i64, i64 } %33, 1
  %35 = urem i64 %27, %34
  %36 = icmp eq i64 %35, 0
  %37 = sub i64 %34, %35
  %38 = select i1 %36, i64 0, i64 %37
  %39 = add i64 %27, %38
  %40 = getelementptr i8, ptr %0, i64 %39
  %41 = getelementptr ptr, ptr %0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr ptr, ptr %43, i32 8
  %45 = load ptr, ptr %44, align 8
  call void @unbox_wrapper(ptr %45, { ptr, i160 } %1, ptr %42, ptr %40)
  ret void
}

define { ptr, i160 } @Entry_getter_key(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr ptr, ptr %15, i32 6
  %17 = load ptr, ptr %16, align 8
  %18 = call { i64, i64 } @size_wrapper(ptr %17, ptr %14)
  %19 = extractvalue { i64, i64 } %18, 1
  %20 = urem i64 %13, %19
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %19, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %13, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = load ptr, ptr %0, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } @box_wrapper(ptr %29, ptr %25, ptr %26)
  ret { ptr, i160 } %30
}

define void @Entry_setter_key(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = load ptr, ptr %0, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 6
  %18 = load ptr, ptr %17, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr %18, ptr %15)
  %20 = extractvalue { i64, i64 } %19, 1
  %21 = urem i64 %14, %20
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 %20, %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %14, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = load ptr, ptr %0, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr ptr, ptr %28, i32 8
  %30 = load ptr, ptr %29, align 8
  call void @unbox_wrapper(ptr %30, { ptr, i160 } %1, ptr %27, ptr %26)
  ret void
}

define i32 @Entry_getter_primary_hash(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Entry_setter_primary_hash(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i32 %1, ptr %14, align 4
  ret void
}

define { i64, i64 } @_size_HashMap(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %29
  %37 = select i1 %36, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %29
  %38 = urem i64 %35, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %41
  %43 = add i64 %35, %42
  %44 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %37
  %45 = select i1 %44, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %37
  %46 = urem i64 %43, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %47 = icmp eq i64 %46, 0
  %48 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %46
  %49 = select i1 %47, i64 0, i64 %48
  %50 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %49
  %51 = add i64 %43, %50
  %52 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %45
  %53 = select i1 %52, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %45
  %54 = urem i64 %51, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %55 = icmp eq i64 %54, 0
  %56 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %54
  %57 = select i1 %55, i64 0, i64 %56
  %58 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %57
  %59 = add i64 %51, %58
  %60 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %53
  %61 = select i1 %60, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %53
  %62 = urem i64 %59, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %63 = icmp eq i64 %62, 0
  %64 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %62
  %65 = select i1 %63, i64 0, i64 %64
  %66 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %65
  %67 = add i64 %59, %66
  %68 = urem i64 %67, %61
  %69 = icmp eq i64 %68, 0
  %70 = sub i64 %61, %68
  %71 = select i1 %69, i64 0, i64 %70
  %72 = add i64 %67, %71
  %73 = insertvalue { i64, i64 } undef, i64 %72, 0
  %74 = insertvalue { i64, i64 } %73, i64 %61, 1
  ret { i64, i64 } %74
}

define ptr @HashMap_field_HashMap_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @HashMap_field_HashMap_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @HashMap_field_HashMap_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @HashMap_B_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [86 x ptr], ptr %26, i32 0, i32 36
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @HashMap_B_hash1_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 37
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_hash2_from_primary_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 38
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_index1_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 39
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_index2_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 40
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4015701072841558310, i64 ptrtoint (ptr @Entry to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 41
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [86 x ptr], ptr %26, i32 0, i32 42
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @HashMap_B_resize_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [86 x ptr], ptr %4, i32 0, i32 43
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @HashMap_B_replace_in_table_keyK_valueV_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 40, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 3
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = getelementptr ptr, ptr %38, i32 2
  %41 = getelementptr ptr, ptr %38, i32 3
  %42 = getelementptr ptr, ptr %38, i32 4
  %43 = load i64, ptr %39, align 4
  %44 = load i64, ptr %40, align 4
  %45 = load ptr, ptr %41, align 8
  %46 = load ptr, ptr %42, align 8
  %47 = call i1 @subtype_test_wrapper(ptr %45, i64 %44, i64 %43, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %46)
  %48 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 4
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr ptr, ptr %49, i32 1
  %51 = getelementptr ptr, ptr %49, i32 2
  %52 = getelementptr ptr, ptr %49, i32 3
  %53 = getelementptr ptr, ptr %49, i32 4
  %54 = load i64, ptr %50, align 4
  %55 = load i64, ptr %51, align 4
  %56 = load ptr, ptr %52, align 8
  %57 = load ptr, ptr %53, align 8
  %58 = call i1 @subtype_test_wrapper(ptr %56, i64 %55, i64 %54, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %57)
  %59 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %60 = getelementptr [86 x ptr], ptr %59, i32 0, i32 44
  %61 = getelementptr ptr, ptr %60, i32 9
  %62 = load ptr, ptr %61, align 8
  ret ptr %62
}

define ptr @HashMap_B_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [86 x ptr], ptr %26, i32 0, i32 45
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @HashMap_B_get_from_table_keyK_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 32, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 3
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = getelementptr ptr, ptr %38, i32 2
  %41 = getelementptr ptr, ptr %38, i32 3
  %42 = getelementptr ptr, ptr %38, i32 4
  %43 = load i64, ptr %39, align 4
  %44 = load i64, ptr %40, align 4
  %45 = load ptr, ptr %41, align 8
  %46 = load ptr, ptr %42, align 8
  %47 = call i1 @subtype_test_wrapper(ptr %45, i64 %44, i64 %43, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %46)
  %48 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %49 = getelementptr [86 x ptr], ptr %48, i32 0, i32 46
  %50 = getelementptr ptr, ptr %49, i32 9
  %51 = load ptr, ptr %50, align 8
  ret ptr %51
}

define ptr @HashMap_B_get_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 47
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_remove_from_table_keyK_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 32, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, ptr }, ptr %1, i32 0, i32 3
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = getelementptr ptr, ptr %38, i32 2
  %41 = getelementptr ptr, ptr %38, i32 3
  %42 = getelementptr ptr, ptr %38, i32 4
  %43 = load i64, ptr %39, align 4
  %44 = load i64, ptr %40, align 4
  %45 = load ptr, ptr %41, align 8
  %46 = load ptr, ptr %42, align 8
  %47 = call i1 @subtype_test_wrapper(ptr %45, i64 %44, i64 %43, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %46)
  %48 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %49 = getelementptr [86 x ptr], ptr %48, i32 0, i32 48
  %50 = getelementptr ptr, ptr %49, i32 9
  %51 = load ptr, ptr %50, align 8
  ret ptr %51
}

define ptr @HashMap_B_remove_keyK({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 49
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_clear_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [86 x ptr], ptr %4, i32 0, i32 50
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @HashMap_B_size_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [86 x ptr], ptr %4, i32 0, i32 51
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @HashMap_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [86 x ptr], ptr %4, i32 0, i32 52
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @HashMap_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 53
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 9197944775169318296, i64 ptrtoint (ptr @Pair to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [86 x ptr], ptr %26, i32 0, i32 54
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @HashMap_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 55
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 56
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 57
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 58
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 59
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 60
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 61
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMap_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [86 x ptr], ptr %15, i32 0, i32 62
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @HashMap_init_hasherFunctionK_to_Ptri32_eqFunctionK._K_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @HashMap)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %8, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 688, ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %27 = load i32, ptr %26, align 4
  %28 = getelementptr ptr, ptr %24, i32 %27
  %29 = getelementptr ptr, ptr %28, i32 6
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr, ptr }, ptr %30, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %21, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %32(ptr %23, { ptr } %34) #15
  %35 = alloca ptr, align 8
  store { ptr } %4, ptr %35, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %8, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 688, ptr %38)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %41 = load i32, ptr %40, align 4
  %42 = getelementptr ptr, ptr %38, i32 %41
  %43 = getelementptr ptr, ptr %42, i32 7
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr { ptr, ptr }, ptr %44, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %35, align 8
  %48 = insertvalue { ptr } undef, ptr %47, 0
  call void %46(ptr %37, { ptr } %48) #15
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 688, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = call ptr @typegetter_wrapper(ptr %56, ptr %50)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %8, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 688, ptr %60)
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = getelementptr ptr, ptr %60, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = call ptr @typegetter_wrapper(ptr %66, ptr %59)
  %68 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %69 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %70 = getelementptr [4 x ptr], ptr %69, i32 0, i32 2
  store ptr %67, ptr %70, align 8
  %71 = getelementptr [4 x ptr], ptr %69, i32 0, i32 1
  store ptr %57, ptr %71, align 8
  %72 = getelementptr [4 x ptr], ptr %69, i32 0, i32 3
  store ptr null, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 24, ptr %69)
  store ptr @Entry, ptr %69, align 8
  %74 = getelementptr [4 x ptr], ptr %68, i32 0, i32 2
  store ptr %69, ptr %74, align 8
  %75 = getelementptr [4 x ptr], ptr %68, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %75, align 8
  %76 = getelementptr [4 x ptr], ptr %68, i32 0, i32 3
  store ptr null, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 24, ptr %68)
  store ptr @union_typ, ptr %68, align 8
  %78 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %78, align 8
  %79 = getelementptr ptr, ptr %78, i32 1
  store ptr %68, ptr %79, align 8
  %80 = load ptr, ptr %78, align 8
  %81 = getelementptr ptr, ptr %80, i32 6
  %82 = load ptr, ptr %81, align 8
  %83 = call { i64, i64 } @size_wrapper(ptr %82, ptr %78)
  %84 = extractvalue { i64, i64 } %83, 0
  %85 = call ptr @bump_malloc(i64 %84)
  store ptr %68, ptr %85, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 8, ptr %85)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  store ptr @Array, ptr %87, align 8
  store ptr %85, ptr %88, align 8
  store i32 9, ptr %89, align 4
  %90 = call ptr @llvm.invariant.start.p0(i64 16, ptr %87)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %95, 1
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 2
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %101 = load i32, ptr %100, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %101, 3
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = load ptr, ptr %8, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 688, ptr %105)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %108 = load i32, ptr %107, align 4
  %109 = getelementptr ptr, ptr %105, i32 %108
  %110 = load ptr, ptr %109, align 8
  %111 = call ptr @typegetter_wrapper(ptr %110, ptr %104)
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = load ptr, ptr %8, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 688, ptr %114)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = getelementptr ptr, ptr %114, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = call ptr @typegetter_wrapper(ptr %120, ptr %113)
  %122 = alloca [2 x ptr], align 8
  %123 = getelementptr [2 x ptr], ptr %122, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %124 = getelementptr [2 x ptr], ptr %122, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 4, ptr %122)
  %126 = call ptr @llvm.invariant.start.p0(i64 600, ptr %92)
  %127 = getelementptr ptr, ptr %92, i32 %101
  %128 = getelementptr ptr, ptr %127, i32 7
  %129 = load ptr, ptr %128, align 8
  %130 = alloca { ptr, ptr }, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 0
  store ptr @i32_typ, ptr %131, align 8
  %132 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 1
  store ptr @i32_typ, ptr %132, align 8
  %133 = call ptr @behavior_wrapper(ptr %129, { ptr, ptr, ptr, i32 } %102, ptr %130)
  call void %133({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %122, i32 8, i32 8)
  %134 = alloca { ptr, ptr, ptr, i32 }, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %137 = load ptr, ptr %135, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %140 = load ptr, ptr %138, align 8
  store ptr %140, ptr %139, align 8
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %143 = load ptr, ptr %141, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %146 = load i32, ptr %144, align 4
  store i32 %146, ptr %145, align 4
  call void @set_offset(ptr %134, ptr @Array)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %148 = load ptr, ptr %147, align 8
  %149 = load ptr, ptr %8, align 8
  %150 = call ptr @llvm.invariant.start.p0(i64 688, ptr %149)
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %152 = load i32, ptr %151, align 4
  %153 = getelementptr ptr, ptr %149, i32 %152
  %154 = getelementptr ptr, ptr %153, i32 3
  %155 = load ptr, ptr %154, align 8
  %156 = getelementptr { ptr, ptr }, ptr %155, i32 0, i32 1
  %157 = load ptr, ptr %156, align 8
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %159 = load ptr, ptr %158, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %159, 0
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %160, ptr %162, 1
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %165, 2
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %168 = load i32, ptr %167, align 4
  %169 = insertvalue { ptr, ptr, ptr, i32 } %166, i32 %168, 3
  call void %157(ptr %148, { ptr, ptr, ptr, i32 } %169) #15
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %171 = load ptr, ptr %170, align 8
  %172 = load ptr, ptr %8, align 8
  %173 = call ptr @llvm.invariant.start.p0(i64 688, ptr %172)
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %175 = load i32, ptr %174, align 4
  %176 = getelementptr ptr, ptr %172, i32 %175
  %177 = load ptr, ptr %176, align 8
  %178 = call ptr @typegetter_wrapper(ptr %177, ptr %171)
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %180 = load ptr, ptr %179, align 8
  %181 = load ptr, ptr %8, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 688, ptr %181)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %184 = load i32, ptr %183, align 4
  %185 = getelementptr ptr, ptr %181, i32 %184
  %186 = getelementptr ptr, ptr %185, i32 1
  %187 = load ptr, ptr %186, align 8
  %188 = call ptr @typegetter_wrapper(ptr %187, ptr %180)
  %189 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %190 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %191 = getelementptr [4 x ptr], ptr %190, i32 0, i32 2
  store ptr %188, ptr %191, align 8
  %192 = getelementptr [4 x ptr], ptr %190, i32 0, i32 1
  store ptr %178, ptr %192, align 8
  %193 = getelementptr [4 x ptr], ptr %190, i32 0, i32 3
  store ptr null, ptr %193, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 24, ptr %190)
  store ptr @Entry, ptr %190, align 8
  %195 = getelementptr [4 x ptr], ptr %189, i32 0, i32 2
  store ptr %190, ptr %195, align 8
  %196 = getelementptr [4 x ptr], ptr %189, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %196, align 8
  %197 = getelementptr [4 x ptr], ptr %189, i32 0, i32 3
  store ptr null, ptr %197, align 8
  %198 = call ptr @llvm.invariant.start.p0(i64 24, ptr %189)
  store ptr @union_typ, ptr %189, align 8
  %199 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %199, align 8
  %200 = getelementptr ptr, ptr %199, i32 1
  store ptr %189, ptr %200, align 8
  %201 = load ptr, ptr %199, align 8
  %202 = getelementptr ptr, ptr %201, i32 6
  %203 = load ptr, ptr %202, align 8
  %204 = call { i64, i64 } @size_wrapper(ptr %203, ptr %199)
  %205 = extractvalue { i64, i64 } %204, 0
  %206 = call ptr @bump_malloc(i64 %205)
  store ptr %189, ptr %206, align 8
  %207 = call ptr @llvm.invariant.start.p0(i64 8, ptr %206)
  %208 = alloca { ptr, ptr, ptr, i32 }, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  store ptr @Array, ptr %208, align 8
  store ptr %206, ptr %209, align 8
  store i32 9, ptr %210, align 4
  %211 = call ptr @llvm.invariant.start.p0(i64 16, ptr %208)
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %213, 0
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %216 = load ptr, ptr %215, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %216, 1
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %219 = load ptr, ptr %218, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %217, ptr %219, 2
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %222 = load i32, ptr %221, align 4
  %223 = insertvalue { ptr, ptr, ptr, i32 } %220, i32 %222, 3
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %225 = load ptr, ptr %224, align 8
  %226 = load ptr, ptr %8, align 8
  %227 = call ptr @llvm.invariant.start.p0(i64 688, ptr %226)
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %229 = load i32, ptr %228, align 4
  %230 = getelementptr ptr, ptr %226, i32 %229
  %231 = load ptr, ptr %230, align 8
  %232 = call ptr @typegetter_wrapper(ptr %231, ptr %225)
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %234 = load ptr, ptr %233, align 8
  %235 = load ptr, ptr %8, align 8
  %236 = call ptr @llvm.invariant.start.p0(i64 688, ptr %235)
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %238 = load i32, ptr %237, align 4
  %239 = getelementptr ptr, ptr %235, i32 %238
  %240 = getelementptr ptr, ptr %239, i32 1
  %241 = load ptr, ptr %240, align 8
  %242 = call ptr @typegetter_wrapper(ptr %241, ptr %234)
  %243 = alloca [2 x ptr], align 8
  %244 = getelementptr [2 x ptr], ptr %243, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %244, align 8
  %245 = getelementptr [2 x ptr], ptr %243, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %245, align 8
  %246 = call ptr @llvm.invariant.start.p0(i64 4, ptr %243)
  %247 = call ptr @llvm.invariant.start.p0(i64 600, ptr %213)
  %248 = getelementptr ptr, ptr %213, i32 %222
  %249 = getelementptr ptr, ptr %248, i32 7
  %250 = load ptr, ptr %249, align 8
  %251 = alloca { ptr, ptr }, align 8
  %252 = getelementptr { ptr, ptr }, ptr %251, i32 0, i32 0
  store ptr @i32_typ, ptr %252, align 8
  %253 = getelementptr { ptr, ptr }, ptr %251, i32 0, i32 1
  store ptr @i32_typ, ptr %253, align 8
  %254 = call ptr @behavior_wrapper(ptr %250, { ptr, ptr, ptr, i32 } %223, ptr %251)
  call void %254({ ptr, ptr, ptr, i32 } %223, { ptr, ptr, ptr, i32 } %223, ptr %243, i32 8, i32 8)
  %255 = alloca { ptr, ptr, ptr, i32 }, align 8
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 0
  %258 = load ptr, ptr %256, align 8
  store ptr %258, ptr %257, align 8
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 1
  %261 = load ptr, ptr %259, align 8
  store ptr %261, ptr %260, align 8
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 2
  %264 = load ptr, ptr %262, align 8
  store ptr %264, ptr %263, align 8
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 3
  %267 = load i32, ptr %265, align 4
  store i32 %267, ptr %266, align 4
  call void @set_offset(ptr %255, ptr @Array)
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %269 = load ptr, ptr %268, align 8
  %270 = load ptr, ptr %8, align 8
  %271 = call ptr @llvm.invariant.start.p0(i64 688, ptr %270)
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %273 = load i32, ptr %272, align 4
  %274 = getelementptr ptr, ptr %270, i32 %273
  %275 = getelementptr ptr, ptr %274, i32 4
  %276 = load ptr, ptr %275, align 8
  %277 = getelementptr { ptr, ptr }, ptr %276, i32 0, i32 1
  %278 = load ptr, ptr %277, align 8
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 0
  %280 = load ptr, ptr %279, align 8
  %281 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %280, 0
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 1
  %283 = load ptr, ptr %282, align 8
  %284 = insertvalue { ptr, ptr, ptr, i32 } %281, ptr %283, 1
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 2
  %286 = load ptr, ptr %285, align 8
  %287 = insertvalue { ptr, ptr, ptr, i32 } %284, ptr %286, 2
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 3
  %289 = load i32, ptr %288, align 4
  %290 = insertvalue { ptr, ptr, ptr, i32 } %287, i32 %289, 3
  call void %278(ptr %269, { ptr, ptr, ptr, i32 } %290) #15
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %292 = load ptr, ptr %291, align 8
  %293 = load ptr, ptr %8, align 8
  %294 = call ptr @llvm.invariant.start.p0(i64 688, ptr %293)
  %295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %296 = load i32, ptr %295, align 4
  %297 = getelementptr ptr, ptr %293, i32 %296
  %298 = getelementptr ptr, ptr %297, i32 5
  %299 = load ptr, ptr %298, align 8
  %300 = getelementptr { ptr, ptr }, ptr %299, i32 0, i32 1
  %301 = load ptr, ptr %300, align 8
  call void %301(ptr %292, i32 0) #15
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %303 = load ptr, ptr %302, align 8
  %304 = load ptr, ptr %8, align 8
  %305 = call ptr @llvm.invariant.start.p0(i64 688, ptr %304)
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %307 = load i32, ptr %306, align 4
  %308 = getelementptr ptr, ptr %304, i32 %307
  %309 = getelementptr ptr, ptr %308, i32 8
  %310 = load ptr, ptr %309, align 8
  %311 = getelementptr { ptr, ptr }, ptr %310, i32 0, i32 1
  %312 = load ptr, ptr %311, align 8
  call void %312(ptr %303, i32 100) #15
  ret void
}

define i32 @HashMap_hash1_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @HashMap)
  %20 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %20, align 8
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  %23 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  store ptr %24, ptr %22, align 8
  %25 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %26 = load i160, ptr %25, align 4
  store i160 %26, ptr %21, align 4
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  %29 = load ptr, ptr %22, align 8
  store ptr %29, ptr %28, align 8
  %30 = load i160, ptr %21, align 4
  store i160 %30, ptr %27, align 4
  %31 = load ptr, ptr %28, align 8
  %32 = insertvalue { ptr, i160 } undef, ptr %31, 0
  %33 = load i160, ptr %27, align 4
  %34 = insertvalue { ptr, i160 } %32, i160 %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 688, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 6
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = call { ptr } %45(ptr %36) #16
  %47 = alloca ptr, align 8
  store { ptr } %46, ptr %47, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call i32 %48({ ptr, i160 } %34)
  ret i32 %49
}

define i32 @HashMap_hash2_from_primary_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @HashMap)
  %20 = call i32 @i32_hasher(i32 %3)
  ret i32 %20
}

define i32 @HashMap_index1_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @HashMap)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 688, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 3
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr, ptr, ptr, i32 } %30(ptr %21) #16
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %31, ptr %32, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  call void @assume_offset(ptr %32, ptr @Array)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %38, 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %44 = load i32, ptr %43, align 4
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %44, 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %7, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 688, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = load ptr, ptr %52, align 8
  %54 = call ptr @typegetter_wrapper(ptr %53, ptr %47)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = load ptr, ptr %7, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 688, ptr %57)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %60 = load i32, ptr %59, align 4
  %61 = getelementptr ptr, ptr %57, i32 %60
  %62 = getelementptr ptr, ptr %61, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = call ptr @typegetter_wrapper(ptr %63, ptr %56)
  %65 = alloca [0 x ptr], align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr %65)
  %67 = call ptr @llvm.invariant.start.p0(i64 600, ptr %35)
  %68 = getelementptr ptr, ptr %35, i32 %44
  %69 = getelementptr ptr, ptr %68, i32 8
  %70 = load ptr, ptr %69, align 8
  %71 = alloca {}, align 8
  %72 = call ptr @behavior_wrapper(ptr %70, { ptr, ptr, ptr, i32 } %45, ptr %71)
  %73 = call i32 %72({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr %65)
  %74 = sub i32 %73, 1
  %75 = and i32 %3, %74
  ret i32 %75
}

define i32 @HashMap_index2_primary_hashPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @HashMap)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %7, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 688, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = call ptr @typegetter_wrapper(ptr %39, ptr %33)
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %7, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 688, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = call ptr @typegetter_wrapper(ptr %49, ptr %42)
  %51 = alloca [1 x ptr], align 8
  %52 = getelementptr [1 x ptr], ptr %51, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 1, ptr %51)
  %54 = call ptr @llvm.invariant.start.p0(i64 688, ptr %21)
  %55 = getelementptr ptr, ptr %21, i32 %30
  %56 = getelementptr ptr, ptr %55, i32 11
  %57 = load ptr, ptr %56, align 8
  %58 = alloca { ptr }, align 8
  %59 = getelementptr { ptr }, ptr %58, i32 0, i32 0
  store ptr @i32_typ, ptr %59, align 8
  %60 = call ptr @behavior_wrapper(ptr %57, { ptr, ptr, ptr, i32 } %31, ptr %58)
  %61 = call i32 %60({ ptr, ptr, ptr, i32 } %31, { ptr, ptr, ptr, i32 } %31, ptr %51, i32 %3)
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = load ptr, ptr %7, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 688, ptr %64)
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %67 = load i32, ptr %66, align 4
  %68 = getelementptr ptr, ptr %64, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 4
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %63) #16
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %73, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 16, ptr %74)
  call void @assume_offset(ptr %74, ptr @Array)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %83, 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %86, 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %7, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 688, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = load ptr, ptr %94, align 8
  %96 = call ptr @typegetter_wrapper(ptr %95, ptr %89)
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = load ptr, ptr %7, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 688, ptr %99)
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %102 = load i32, ptr %101, align 4
  %103 = getelementptr ptr, ptr %99, i32 %102
  %104 = getelementptr ptr, ptr %103, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = call ptr @typegetter_wrapper(ptr %105, ptr %98)
  %107 = alloca [0 x ptr], align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 0, ptr %107)
  %109 = call ptr @llvm.invariant.start.p0(i64 600, ptr %77)
  %110 = getelementptr ptr, ptr %77, i32 %86
  %111 = getelementptr ptr, ptr %110, i32 8
  %112 = load ptr, ptr %111, align 8
  %113 = alloca {}, align 8
  %114 = call ptr @behavior_wrapper(ptr %112, { ptr, ptr, ptr, i32 } %87, ptr %113)
  %115 = call i32 %114({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } %87, ptr %107)
  %116 = sub i32 %115, 1
  %117 = and i32 %61, %116
  ret i32 %117
}

define { ptr, i160 } @HashMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca { ptr, i160 }, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca [2 x ptr], align 8
  %17 = alloca { ptr, ptr }, align 8
  %18 = alloca [0 x i8], align 1
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca [0 x i8], align 1
  %23 = alloca { ptr, i160 }, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i1, align 1
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = alloca i1, align 1
  %30 = alloca [1 x ptr], align 8
  %31 = alloca { ptr }, align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = alloca [1 x ptr], align 8
  %34 = alloca { ptr }, align 8
  %35 = alloca { ptr, i160 }, align 8
  %36 = alloca i160, align 8
  %37 = alloca ptr, align 8
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = alloca [2 x ptr], align 8
  %40 = alloca { ptr, ptr }, align 8
  %41 = alloca [0 x i8], align 1
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca [0 x i8], align 1
  %46 = alloca { ptr, i160 }, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  %49 = alloca i1, align 1
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = alloca i1, align 1
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem29 = alloca ptr, align 8
  %.reg2mem33 = alloca ptr, align 8
  %.reg2mem37 = alloca ptr, align 8
  %.reg2mem40 = alloca ptr, align 8
  %.reg2mem43 = alloca i32, align 4
  %.reg2mem45 = alloca i1, align 1
  %.reg2mem47 = alloca i32, align 4
  %.reg2mem49 = alloca i32, align 4
  %.reg2mem51 = alloca ptr, align 8
  %.reg2mem53 = alloca ptr, align 8
  %.reg2mem55 = alloca ptr, align 8
  %.reg2mem57 = alloca ptr, align 8
  %.reg2mem59 = alloca ptr, align 8
  %.reg2mem61 = alloca ptr, align 8
  %.reg2mem63 = alloca ptr, align 8
  %.reg2mem65 = alloca ptr, align 8
  %.reg2mem67 = alloca i32, align 4
  %.reg2mem69 = alloca i1, align 1
  %.reg2mem71 = alloca i1, align 1
  %.reg2mem73 = alloca i1, align 1
  %.reg2mem75 = alloca i32, align 4
  %.reg2mem77 = alloca ptr, align 8
  %.reg2mem83 = alloca ptr, align 8
  %.reg2mem85 = alloca ptr, align 8
  %.reg2mem87 = alloca ptr, align 8
  %.reg2mem89 = alloca ptr, align 8
  %.reg2mem91 = alloca ptr, align 8
  %.reg2mem93 = alloca ptr, align 8
  %.reg2mem95 = alloca ptr, align 8
  %.reg2mem97 = alloca ptr, align 8
  %.reg2mem99 = alloca i32, align 4
  %.reg2mem101 = alloca i32, align 4
  %.reg2mem103 = alloca i32, align 4
  %.reg2mem105 = alloca i32, align 4
  %.reg2mem108 = alloca i32, align 4
  %.reg2mem111 = alloca i1, align 1
  %.reg2mem129 = alloca ptr, align 8
  %.reg2mem131 = alloca ptr, align 8
  %.reg2mem133 = alloca { ptr, i160 }, align 8
  %.reg2mem135 = alloca i32, align 4
  %.reg2mem137 = alloca i1, align 1
  %.reg2mem139 = alloca i32, align 4
  %.reg2mem141 = alloca i32, align 4
  %.reg2mem143 = alloca ptr, align 8
  %.reg2mem145 = alloca ptr, align 8
  %.reg2mem147 = alloca ptr, align 8
  %.reg2mem149 = alloca ptr, align 8
  %.reg2mem151 = alloca ptr, align 8
  %.reg2mem153 = alloca ptr, align 8
  %.reg2mem155 = alloca ptr, align 8
  %.reg2mem157 = alloca ptr, align 8
  %.reg2mem159 = alloca i32, align 4
  %.reg2mem161 = alloca i1, align 1
  %.reg2mem163 = alloca i32, align 4
  %.reg2mem165 = alloca i32, align 4
  %.reg2mem167 = alloca ptr, align 8
  %.reg2mem169 = alloca ptr, align 8
  %.reg2mem171 = alloca ptr, align 8
  %.reg2mem173 = alloca ptr, align 8
  %.reg2mem175 = alloca ptr, align 8
  %.reg2mem177 = alloca ptr, align 8
  %.reg2mem179 = alloca ptr, align 8
  %.reg2mem181 = alloca ptr, align 8
  %.reg2mem183 = alloca i32, align 4
  %.reg2mem185 = alloca i1, align 1
  %.reg2mem187 = alloca i1, align 1
  %.reg2mem189 = alloca i32, align 4
  %.reg2mem191 = alloca i32, align 4
  %.reg2mem193 = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @HashMap)
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 16, ptr %68)
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %82 = load i32, ptr %80, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %70, ptr @Entry)
  %83 = alloca { ptr, ptr, ptr, i32 }, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  %95 = load i32, ptr %93, align 4
  store i32 %95, ptr %94, align 4
  call void @set_offset(ptr %83, ptr @Entry)
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = load ptr, ptr %100, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = load i32, ptr %106, align 4
  store i32 %108, ptr %107, align 4
  %109 = call ptr @llvm.invariant.start.p0(i64 16, ptr %96)
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  store ptr %110, ptr %.reg2mem131, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  store ptr %111, ptr %.reg2mem129, align 8
  store i32 0, ptr %.reg2mem191, align 4
  store i1 true, ptr %.reg2mem193, align 1
  br label %112

112:                                              ; preds = %591, %4
  %.reload194 = load i1, ptr %.reg2mem193, align 1
  %.reload192 = load i32, ptr %.reg2mem191, align 4
  store i1 %.reload194, ptr %.reg2mem111, align 1
  store i32 %.reload192, ptr %.reg2mem108, align 4
  %.reload132 = load ptr, ptr %.reg2mem131, align 8
  %113 = load ptr, ptr %.reload132, align 8
  %114 = load ptr, ptr %55, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 688, ptr %114)
  %.reload130 = load ptr, ptr %.reg2mem129, align 8
  %116 = load i32, ptr %.reload130, align 4
  %117 = getelementptr ptr, ptr %114, i32 %116
  %118 = getelementptr ptr, ptr %117, i32 8
  %119 = load ptr, ptr %118, align 8
  %120 = getelementptr { ptr, ptr }, ptr %119, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = call i32 %121(ptr %113) #16
  %.reload110 = load i32, ptr %.reg2mem108, align 4
  %123 = icmp slt i32 %.reload110, %122
  br i1 %123, label %124, label %587

124:                                              ; preds = %112
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %126, 0
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 2
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %135 = load i32, ptr %134, align 4
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %135, 3
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %55, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 688, ptr %139)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = getelementptr ptr, ptr %139, i32 %142
  %144 = load ptr, ptr %143, align 8
  %145 = call ptr @typegetter_wrapper(ptr %144, ptr %138)
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %147 = load ptr, ptr %146, align 8
  %148 = load ptr, ptr %55, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 688, ptr %148)
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %151 = load i32, ptr %150, align 4
  %152 = getelementptr ptr, ptr %148, i32 %151
  %153 = getelementptr ptr, ptr %152, i32 1
  %154 = load ptr, ptr %153, align 8
  %155 = call ptr @typegetter_wrapper(ptr %154, ptr %147)
  %156 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %157 = call ptr @llvm.invariant.start.p0(i64 120, ptr %126)
  %158 = getelementptr ptr, ptr %126, i32 %135
  %159 = getelementptr ptr, ptr %158, i32 8
  %160 = load ptr, ptr %159, align 8
  %161 = call ptr @behavior_wrapper(ptr %160, { ptr, ptr, ptr, i32 } %136, ptr %6)
  %162 = call i32 %161({ ptr, ptr, ptr, i32 } %136, { ptr, ptr, ptr, i32 } %136, ptr %5)
  store i32 %162, ptr %.reg2mem105, align 4
  %.reload128 = load i1, ptr %.reg2mem111, align 1
  br i1 %.reload128, label %163, label %338

163:                                              ; preds = %124
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %165, 0
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %168 = load ptr, ptr %167, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %168, 1
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %171 = load ptr, ptr %170, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %171, 2
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %174 = load i32, ptr %173, align 4
  %175 = insertvalue { ptr, ptr, ptr, i32 } %172, i32 %174, 3
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = load ptr, ptr %55, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 688, ptr %178)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %181 = load i32, ptr %180, align 4
  %182 = getelementptr ptr, ptr %178, i32 %181
  %183 = load ptr, ptr %182, align 8
  %184 = call ptr @typegetter_wrapper(ptr %183, ptr %177)
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = load ptr, ptr %55, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 688, ptr %187)
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %190 = load i32, ptr %189, align 4
  %191 = getelementptr ptr, ptr %187, i32 %190
  %192 = getelementptr ptr, ptr %191, i32 1
  %193 = load ptr, ptr %192, align 8
  %194 = call ptr @typegetter_wrapper(ptr %193, ptr %186)
  %195 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %195, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %197 = call ptr @llvm.invariant.start.p0(i64 688, ptr %165)
  %198 = getelementptr ptr, ptr %165, i32 %174
  %199 = getelementptr ptr, ptr %198, i32 12
  %200 = load ptr, ptr %199, align 8
  %201 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr @i32_typ, ptr %201, align 8
  %202 = call ptr @behavior_wrapper(ptr %200, { ptr, ptr, ptr, i32 } %175, ptr %8)
  %.reload107 = load i32, ptr %.reg2mem105, align 4
  %203 = call i32 %202({ ptr, ptr, ptr, i32 } %175, { ptr, ptr, ptr, i32 } %175, ptr %7, i32 %.reload107)
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = load ptr, ptr %55, align 8
  %207 = call ptr @llvm.invariant.start.p0(i64 688, ptr %206)
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %209 = load i32, ptr %208, align 4
  %210 = getelementptr ptr, ptr %206, i32 %209
  %211 = getelementptr ptr, ptr %210, i32 3
  %212 = load ptr, ptr %211, align 8
  %213 = getelementptr { ptr, ptr }, ptr %212, i32 0, i32 0
  %214 = load ptr, ptr %213, align 8
  %215 = call { ptr, ptr, ptr, i32 } %214(ptr %205) #16
  store { ptr, ptr, ptr, i32 } %215, ptr %9, align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  call void @assume_offset(ptr %9, ptr @Array)
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %218, 0
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %221 = load ptr, ptr %220, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, ptr %221, 1
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %224 = load ptr, ptr %223, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %224, 2
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %227 = load i32, ptr %226, align 4
  %228 = insertvalue { ptr, ptr, ptr, i32 } %225, i32 %227, 3
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %230 = load ptr, ptr %229, align 8
  %231 = load ptr, ptr %55, align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 688, ptr %231)
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %234 = load i32, ptr %233, align 4
  %235 = getelementptr ptr, ptr %231, i32 %234
  %236 = load ptr, ptr %235, align 8
  %237 = call ptr @typegetter_wrapper(ptr %236, ptr %230)
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %239 = load ptr, ptr %238, align 8
  %240 = load ptr, ptr %55, align 8
  %241 = call ptr @llvm.invariant.start.p0(i64 688, ptr %240)
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %243 = load i32, ptr %242, align 4
  %244 = getelementptr ptr, ptr %240, i32 %243
  %245 = getelementptr ptr, ptr %244, i32 1
  %246 = load ptr, ptr %245, align 8
  %247 = call ptr @typegetter_wrapper(ptr %246, ptr %239)
  %248 = getelementptr [1 x ptr], ptr %10, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %248, align 8
  %249 = call ptr @llvm.invariant.start.p0(i64 1, ptr %10)
  %250 = call ptr @llvm.invariant.start.p0(i64 600, ptr %218)
  %251 = getelementptr ptr, ptr %218, i32 %227
  %252 = getelementptr ptr, ptr %251, i32 15
  %253 = load ptr, ptr %252, align 8
  %254 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  store ptr @i32_typ, ptr %254, align 8
  %255 = call ptr @behavior_wrapper(ptr %253, { ptr, ptr, ptr, i32 } %228, ptr %11)
  %256 = call { ptr, i160 } %255({ ptr, ptr, ptr, i32 } %228, { ptr, ptr, ptr, i32 } %228, ptr %10, i32 %203)
  store { ptr, i160 } %256, ptr %12, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %258 = load ptr, ptr %257, align 8
  store ptr %258, ptr %14, align 8
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %260 = load ptr, ptr %259, align 8
  store ptr %260, ptr %13, align 8
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %262 = getelementptr i8, ptr %13, i32 8
  %263 = load ptr, ptr %261, align 8
  store ptr %263, ptr %262, align 8
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %265 = getelementptr i8, ptr %13, i32 16
  %266 = load i32, ptr %264, align 4
  store i32 %266, ptr %265, align 4
  %267 = load ptr, ptr %14, align 8
  %268 = insertvalue { ptr, i160 } undef, ptr %267, 0
  %269 = load i160, ptr %13, align 4
  %270 = insertvalue { ptr, i160 } %268, i160 %269, 1
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %272 = load ptr, ptr %271, align 8
  %273 = load ptr, ptr %55, align 8
  %274 = call ptr @llvm.invariant.start.p0(i64 688, ptr %273)
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %276 = load i32, ptr %275, align 4
  %277 = getelementptr ptr, ptr %273, i32 %276
  %278 = getelementptr ptr, ptr %277, i32 3
  %279 = load ptr, ptr %278, align 8
  %280 = getelementptr { ptr, ptr }, ptr %279, i32 0, i32 0
  %281 = load ptr, ptr %280, align 8
  %282 = call { ptr, ptr, ptr, i32 } %281(ptr %272) #16
  store { ptr, ptr, ptr, i32 } %282, ptr %15, align 8
  %283 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  call void @assume_offset(ptr %15, ptr @Array)
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %285 = load ptr, ptr %284, align 8
  %286 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %285, 0
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %288 = load ptr, ptr %287, align 8
  %289 = insertvalue { ptr, ptr, ptr, i32 } %286, ptr %288, 1
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %291 = load ptr, ptr %290, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } %289, ptr %291, 2
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %294 = load i32, ptr %293, align 4
  %295 = insertvalue { ptr, ptr, ptr, i32 } %292, i32 %294, 3
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %297 = load ptr, ptr %296, align 8
  %298 = load ptr, ptr %55, align 8
  %299 = call ptr @llvm.invariant.start.p0(i64 688, ptr %298)
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %301 = load i32, ptr %300, align 4
  %302 = getelementptr ptr, ptr %298, i32 %301
  %303 = load ptr, ptr %302, align 8
  %304 = call ptr @typegetter_wrapper(ptr %303, ptr %297)
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %306 = load ptr, ptr %305, align 8
  %307 = load ptr, ptr %55, align 8
  %308 = call ptr @llvm.invariant.start.p0(i64 688, ptr %307)
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %310 = load i32, ptr %309, align 4
  %311 = getelementptr ptr, ptr %307, i32 %310
  %312 = getelementptr ptr, ptr %311, i32 1
  %313 = load ptr, ptr %312, align 8
  %314 = call ptr @typegetter_wrapper(ptr %313, ptr %306)
  %315 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %316 = getelementptr [4 x ptr], ptr %315, i32 0, i32 2
  store ptr %314, ptr %316, align 8
  %317 = getelementptr [4 x ptr], ptr %315, i32 0, i32 1
  store ptr %304, ptr %317, align 8
  %318 = getelementptr [4 x ptr], ptr %315, i32 0, i32 3
  store ptr null, ptr %318, align 8
  %319 = call ptr @llvm.invariant.start.p0(i64 24, ptr %315)
  store ptr @Entry, ptr %315, align 8
  %320 = getelementptr [2 x ptr], ptr %16, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %320, align 8
  %321 = getelementptr [2 x ptr], ptr %16, i32 0, i32 1
  store ptr %315, ptr %321, align 8
  %322 = call ptr @llvm.invariant.start.p0(i64 4, ptr %16)
  %323 = call ptr @llvm.invariant.start.p0(i64 600, ptr %285)
  %324 = getelementptr ptr, ptr %285, i32 %294
  %325 = getelementptr ptr, ptr %324, i32 16
  %326 = load ptr, ptr %325, align 8
  %327 = getelementptr { ptr, ptr }, ptr %17, i32 0, i32 0
  store ptr @i32_typ, ptr %327, align 8
  %328 = getelementptr { ptr, ptr }, ptr %17, i32 0, i32 1
  store ptr %267, ptr %328, align 8
  %329 = call ptr @behavior_wrapper(ptr %326, { ptr, ptr, ptr, i32 } %295, ptr %17)
  call void %329({ ptr, ptr, ptr, i32 } %295, { ptr, ptr, ptr, i32 } %295, ptr %16, i32 %203, { ptr, i160 } %270)
  %330 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 0
  %331 = load ptr, ptr %330, align 8
  %332 = ptrtoint ptr %331 to i64
  %333 = icmp eq i64 %332, ptrtoint (ptr @nil_typ to i64)
  %334 = icmp eq i64 %332, 0
  %335 = or i1 %333, %334
  %336 = xor i1 %335, true
  %337 = zext i1 %336 to i32
  store i32 %337, ptr %.reg2mem103, align 4
  %.reload104 = load i32, ptr %.reg2mem103, align 4
  store i32 %.reload104, ptr %.reg2mem189, align 4
  br label %513

338:                                              ; preds = %124
  %339 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %340 = load ptr, ptr %339, align 8
  %341 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %340, 0
  %342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %343 = load ptr, ptr %342, align 8
  %344 = insertvalue { ptr, ptr, ptr, i32 } %341, ptr %343, 1
  %345 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %346 = load ptr, ptr %345, align 8
  %347 = insertvalue { ptr, ptr, ptr, i32 } %344, ptr %346, 2
  %348 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %349 = load i32, ptr %348, align 4
  %350 = insertvalue { ptr, ptr, ptr, i32 } %347, i32 %349, 3
  %351 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %352 = load ptr, ptr %351, align 8
  %353 = load ptr, ptr %55, align 8
  %354 = call ptr @llvm.invariant.start.p0(i64 688, ptr %353)
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %356 = load i32, ptr %355, align 4
  %357 = getelementptr ptr, ptr %353, i32 %356
  %358 = load ptr, ptr %357, align 8
  %359 = call ptr @typegetter_wrapper(ptr %358, ptr %352)
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %361 = load ptr, ptr %360, align 8
  %362 = load ptr, ptr %55, align 8
  %363 = call ptr @llvm.invariant.start.p0(i64 688, ptr %362)
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %365 = load i32, ptr %364, align 4
  %366 = getelementptr ptr, ptr %362, i32 %365
  %367 = getelementptr ptr, ptr %366, i32 1
  %368 = load ptr, ptr %367, align 8
  %369 = call ptr @typegetter_wrapper(ptr %368, ptr %361)
  %370 = getelementptr [1 x ptr], ptr %30, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %370, align 8
  %371 = call ptr @llvm.invariant.start.p0(i64 1, ptr %30)
  %372 = call ptr @llvm.invariant.start.p0(i64 688, ptr %340)
  %373 = getelementptr ptr, ptr %340, i32 %349
  %374 = getelementptr ptr, ptr %373, i32 13
  %375 = load ptr, ptr %374, align 8
  %376 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  store ptr @i32_typ, ptr %376, align 8
  %377 = call ptr @behavior_wrapper(ptr %375, { ptr, ptr, ptr, i32 } %350, ptr %31)
  %.reload106 = load i32, ptr %.reg2mem105, align 4
  %378 = call i32 %377({ ptr, ptr, ptr, i32 } %350, { ptr, ptr, ptr, i32 } %350, ptr %30, i32 %.reload106)
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %380 = load ptr, ptr %379, align 8
  %381 = load ptr, ptr %55, align 8
  %382 = call ptr @llvm.invariant.start.p0(i64 688, ptr %381)
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %384 = load i32, ptr %383, align 4
  %385 = getelementptr ptr, ptr %381, i32 %384
  %386 = getelementptr ptr, ptr %385, i32 4
  %387 = load ptr, ptr %386, align 8
  %388 = getelementptr { ptr, ptr }, ptr %387, i32 0, i32 0
  %389 = load ptr, ptr %388, align 8
  %390 = call { ptr, ptr, ptr, i32 } %389(ptr %380) #16
  store { ptr, ptr, ptr, i32 } %390, ptr %32, align 8
  %391 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  call void @assume_offset(ptr %32, ptr @Array)
  %392 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %393 = load ptr, ptr %392, align 8
  %394 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %393, 0
  %395 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %396 = load ptr, ptr %395, align 8
  %397 = insertvalue { ptr, ptr, ptr, i32 } %394, ptr %396, 1
  %398 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %399 = load ptr, ptr %398, align 8
  %400 = insertvalue { ptr, ptr, ptr, i32 } %397, ptr %399, 2
  %401 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %402 = load i32, ptr %401, align 4
  %403 = insertvalue { ptr, ptr, ptr, i32 } %400, i32 %402, 3
  %404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %405 = load ptr, ptr %404, align 8
  %406 = load ptr, ptr %55, align 8
  %407 = call ptr @llvm.invariant.start.p0(i64 688, ptr %406)
  %408 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %409 = load i32, ptr %408, align 4
  %410 = getelementptr ptr, ptr %406, i32 %409
  %411 = load ptr, ptr %410, align 8
  %412 = call ptr @typegetter_wrapper(ptr %411, ptr %405)
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %414 = load ptr, ptr %413, align 8
  %415 = load ptr, ptr %55, align 8
  %416 = call ptr @llvm.invariant.start.p0(i64 688, ptr %415)
  %417 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %418 = load i32, ptr %417, align 4
  %419 = getelementptr ptr, ptr %415, i32 %418
  %420 = getelementptr ptr, ptr %419, i32 1
  %421 = load ptr, ptr %420, align 8
  %422 = call ptr @typegetter_wrapper(ptr %421, ptr %414)
  %423 = getelementptr [1 x ptr], ptr %33, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %423, align 8
  %424 = call ptr @llvm.invariant.start.p0(i64 1, ptr %33)
  %425 = call ptr @llvm.invariant.start.p0(i64 600, ptr %393)
  %426 = getelementptr ptr, ptr %393, i32 %402
  %427 = getelementptr ptr, ptr %426, i32 15
  %428 = load ptr, ptr %427, align 8
  %429 = getelementptr { ptr }, ptr %34, i32 0, i32 0
  store ptr @i32_typ, ptr %429, align 8
  %430 = call ptr @behavior_wrapper(ptr %428, { ptr, ptr, ptr, i32 } %403, ptr %34)
  %431 = call { ptr, i160 } %430({ ptr, ptr, ptr, i32 } %403, { ptr, ptr, ptr, i32 } %403, ptr %33, i32 %378)
  store { ptr, i160 } %431, ptr %35, align 8
  %432 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %433 = load ptr, ptr %432, align 8
  store ptr %433, ptr %37, align 8
  %434 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %435 = load ptr, ptr %434, align 8
  store ptr %435, ptr %36, align 8
  %436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %437 = getelementptr i8, ptr %36, i32 8
  %438 = load ptr, ptr %436, align 8
  store ptr %438, ptr %437, align 8
  %439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %440 = getelementptr i8, ptr %36, i32 16
  %441 = load i32, ptr %439, align 4
  store i32 %441, ptr %440, align 4
  %442 = load ptr, ptr %37, align 8
  %443 = insertvalue { ptr, i160 } undef, ptr %442, 0
  %444 = load i160, ptr %36, align 4
  %445 = insertvalue { ptr, i160 } %443, i160 %444, 1
  %446 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %447 = load ptr, ptr %446, align 8
  %448 = load ptr, ptr %55, align 8
  %449 = call ptr @llvm.invariant.start.p0(i64 688, ptr %448)
  %450 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %451 = load i32, ptr %450, align 4
  %452 = getelementptr ptr, ptr %448, i32 %451
  %453 = getelementptr ptr, ptr %452, i32 4
  %454 = load ptr, ptr %453, align 8
  %455 = getelementptr { ptr, ptr }, ptr %454, i32 0, i32 0
  %456 = load ptr, ptr %455, align 8
  %457 = call { ptr, ptr, ptr, i32 } %456(ptr %447) #16
  store { ptr, ptr, ptr, i32 } %457, ptr %38, align 8
  %458 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  call void @assume_offset(ptr %38, ptr @Array)
  %459 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %460 = load ptr, ptr %459, align 8
  %461 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %460, 0
  %462 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %463 = load ptr, ptr %462, align 8
  %464 = insertvalue { ptr, ptr, ptr, i32 } %461, ptr %463, 1
  %465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %466 = load ptr, ptr %465, align 8
  %467 = insertvalue { ptr, ptr, ptr, i32 } %464, ptr %466, 2
  %468 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %469 = load i32, ptr %468, align 4
  %470 = insertvalue { ptr, ptr, ptr, i32 } %467, i32 %469, 3
  %471 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %472 = load ptr, ptr %471, align 8
  %473 = load ptr, ptr %55, align 8
  %474 = call ptr @llvm.invariant.start.p0(i64 688, ptr %473)
  %475 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %476 = load i32, ptr %475, align 4
  %477 = getelementptr ptr, ptr %473, i32 %476
  %478 = load ptr, ptr %477, align 8
  %479 = call ptr @typegetter_wrapper(ptr %478, ptr %472)
  %480 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %481 = load ptr, ptr %480, align 8
  %482 = load ptr, ptr %55, align 8
  %483 = call ptr @llvm.invariant.start.p0(i64 688, ptr %482)
  %484 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %485 = load i32, ptr %484, align 4
  %486 = getelementptr ptr, ptr %482, i32 %485
  %487 = getelementptr ptr, ptr %486, i32 1
  %488 = load ptr, ptr %487, align 8
  %489 = call ptr @typegetter_wrapper(ptr %488, ptr %481)
  %490 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %491 = getelementptr [4 x ptr], ptr %490, i32 0, i32 2
  store ptr %489, ptr %491, align 8
  %492 = getelementptr [4 x ptr], ptr %490, i32 0, i32 1
  store ptr %479, ptr %492, align 8
  %493 = getelementptr [4 x ptr], ptr %490, i32 0, i32 3
  store ptr null, ptr %493, align 8
  %494 = call ptr @llvm.invariant.start.p0(i64 24, ptr %490)
  store ptr @Entry, ptr %490, align 8
  %495 = getelementptr [2 x ptr], ptr %39, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %495, align 8
  %496 = getelementptr [2 x ptr], ptr %39, i32 0, i32 1
  store ptr %490, ptr %496, align 8
  %497 = call ptr @llvm.invariant.start.p0(i64 4, ptr %39)
  %498 = call ptr @llvm.invariant.start.p0(i64 600, ptr %460)
  %499 = getelementptr ptr, ptr %460, i32 %469
  %500 = getelementptr ptr, ptr %499, i32 16
  %501 = load ptr, ptr %500, align 8
  %502 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 0
  store ptr @i32_typ, ptr %502, align 8
  %503 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  store ptr %442, ptr %503, align 8
  %504 = call ptr @behavior_wrapper(ptr %501, { ptr, ptr, ptr, i32 } %470, ptr %40)
  call void %504({ ptr, ptr, ptr, i32 } %470, { ptr, ptr, ptr, i32 } %470, ptr %39, i32 %378, { ptr, i160 } %445)
  %505 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 0
  %506 = load ptr, ptr %505, align 8
  %507 = ptrtoint ptr %506 to i64
  %508 = icmp eq i64 %507, ptrtoint (ptr @nil_typ to i64)
  %509 = icmp eq i64 %507, 0
  %510 = or i1 %508, %509
  %511 = xor i1 %510, true
  %512 = zext i1 %511 to i32
  store i32 %512, ptr %.reg2mem101, align 4
  %.reload102 = load i32, ptr %.reg2mem101, align 4
  store i32 %.reload102, ptr %.reg2mem189, align 4
  br label %513

513:                                              ; preds = %338, %163
  %.reload190 = load i32, ptr %.reg2mem189, align 4
  store i32 %.reload190, ptr %.reg2mem99, align 4
  br label %514

514:                                              ; preds = %513
  %.reload100 = load i32, ptr %.reg2mem99, align 4
  %515 = zext i32 %.reload100 to i64
  %516 = trunc i64 %515 to i32
  switch i32 %516, label %526 [
    i32 0, label %517
  ]

517:                                              ; preds = %514
  %.reload127 = load i1, ptr %.reg2mem111, align 1
  %518 = select i1 %.reload127, ptr %24, ptr %47
  store ptr %518, ptr %.reg2mem97, align 8
  %.reload126 = load i1, ptr %.reg2mem111, align 1
  %519 = select i1 %.reload126, ptr %22, ptr %45
  store ptr %519, ptr %.reg2mem95, align 8
  %.reload125 = load i1, ptr %.reg2mem111, align 1
  %520 = select i1 %.reload125, ptr %23, ptr %46
  store ptr %520, ptr %.reg2mem93, align 8
  %.reload124 = load i1, ptr %.reg2mem111, align 1
  %521 = select i1 %.reload124, ptr %21, ptr %44
  store ptr %521, ptr %.reg2mem91, align 8
  %.reload123 = load i1, ptr %.reg2mem111, align 1
  %522 = select i1 %.reload123, ptr %20, ptr %43
  store ptr %522, ptr %.reg2mem89, align 8
  %.reload122 = load i1, ptr %.reg2mem111, align 1
  %523 = select i1 %.reload122, ptr %19, ptr %42
  store ptr %523, ptr %.reg2mem87, align 8
  %.reload121 = load i1, ptr %.reg2mem111, align 1
  %524 = select i1 %.reload121, ptr %18, ptr %41
  store ptr %524, ptr %.reg2mem85, align 8
  %.reload120 = load i1, ptr %.reg2mem111, align 1
  %525 = select i1 %.reload120, ptr %12, ptr %35
  store ptr %525, ptr %.reg2mem83, align 8
  %.reload84 = load ptr, ptr %.reg2mem83, align 8
  %.reload86 = load ptr, ptr %.reg2mem85, align 8
  %.reload88 = load ptr, ptr %.reg2mem87, align 8
  %.reload90 = load ptr, ptr %.reg2mem89, align 8
  %.reload92 = load ptr, ptr %.reg2mem91, align 8
  %.reload94 = load ptr, ptr %.reg2mem93, align 8
  %.reload96 = load ptr, ptr %.reg2mem95, align 8
  %.reload98 = load ptr, ptr %.reg2mem97, align 8
  store i32 0, ptr %.reg2mem163, align 4
  store i32 1, ptr %.reg2mem165, align 4
  store ptr %.reload98, ptr %.reg2mem167, align 8
  store ptr %.reload96, ptr %.reg2mem169, align 8
  store ptr %.reload94, ptr %.reg2mem171, align 8
  store ptr %.reload92, ptr %.reg2mem173, align 8
  store ptr %.reload90, ptr %.reg2mem175, align 8
  store ptr %.reload88, ptr %.reg2mem177, align 8
  store ptr %.reload86, ptr %.reg2mem179, align 8
  store ptr %.reload84, ptr %.reg2mem181, align 8
  store i32 poison, ptr %.reg2mem183, align 4
  store i1 poison, ptr %.reg2mem185, align 1
  br label %586

526:                                              ; preds = %514
  %.reload119 = load i1, ptr %.reg2mem111, align 1
  %527 = select i1 %.reload119, ptr %12, ptr %35
  store ptr %527, ptr %.reg2mem77, align 8
  %.reload118 = load i1, ptr %.reg2mem111, align 1
  %528 = select i1 %.reload118, ptr %25, ptr %48
  %.reload117 = load i1, ptr %.reg2mem111, align 1
  %529 = select i1 %.reload117, ptr %26, ptr %49
  %.reload109 = load i32, ptr %.reg2mem108, align 4
  %530 = add i32 %.reload109, 1
  store i32 %530, ptr %.reg2mem75, align 4
  %.reload82 = load ptr, ptr %.reg2mem77, align 8
  %531 = getelementptr { ptr, i160 }, ptr %.reload82, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %528, align 4
  %532 = load ptr, ptr %531, align 8
  %533 = ptrtoint ptr %532 to i64
  %534 = load ptr, ptr %528, align 8
  %535 = ptrtoint ptr %534 to i64
  %536 = icmp eq i64 %533, %535
  %537 = icmp eq i64 %533, 0
  %538 = or i1 %536, %537
  %539 = icmp eq i1 %538, false
  store i1 %539, ptr %529, align 1
  %540 = load i1, ptr %529, align 1
  br i1 %540, label %541, label %583

541:                                              ; preds = %526
  %.reload116 = load i1, ptr %.reg2mem111, align 1
  %542 = select i1 %.reload116, ptr %28, ptr %51
  %.reload115 = load i1, ptr %.reg2mem111, align 1
  %543 = xor i1 %.reload115, true
  %.reload114 = load i1, ptr %.reg2mem111, align 1
  %544 = select i1 %.reload114, ptr %29, ptr %52
  %.reload113 = load i1, ptr %.reg2mem111, align 1
  %545 = select i1 %.reload113, ptr %27, ptr %50
  %.reload81 = load ptr, ptr %.reg2mem77, align 8
  %546 = getelementptr { ptr, i160 }, ptr %.reload81, i32 0, i32 0
  %547 = getelementptr { ptr, i160 }, ptr %545, i32 0, i32 0
  %548 = load ptr, ptr %546, align 8
  store ptr %548, ptr %547, align 8
  %.reload80 = load ptr, ptr %.reg2mem77, align 8
  %549 = getelementptr { ptr, i160 }, ptr %.reload80, i32 0, i32 1
  %550 = getelementptr { ptr, i160 }, ptr %545, i32 0, i32 1
  %551 = load i160, ptr %549, align 4
  store i160 %551, ptr %550, align 4
  call void @set_offset(ptr %545, ptr @Entry)
  %552 = getelementptr { ptr, ptr, ptr, i32 }, ptr %545, i32 0, i32 0
  %553 = getelementptr { ptr, ptr, ptr, i32 }, ptr %542, i32 0, i32 0
  %554 = load ptr, ptr %552, align 8
  store ptr %554, ptr %553, align 8
  %555 = getelementptr { ptr, ptr, ptr, i32 }, ptr %545, i32 0, i32 1
  %556 = getelementptr { ptr, ptr, ptr, i32 }, ptr %542, i32 0, i32 1
  %557 = load ptr, ptr %555, align 8
  store ptr %557, ptr %556, align 8
  %558 = getelementptr { ptr, ptr, ptr, i32 }, ptr %545, i32 0, i32 2
  %559 = getelementptr { ptr, ptr, ptr, i32 }, ptr %542, i32 0, i32 2
  %560 = load ptr, ptr %558, align 8
  store ptr %560, ptr %559, align 8
  %561 = getelementptr { ptr, ptr, ptr, i32 }, ptr %545, i32 0, i32 3
  %562 = getelementptr { ptr, ptr, ptr, i32 }, ptr %542, i32 0, i32 3
  %563 = load i32, ptr %561, align 4
  store i32 %563, ptr %562, align 4
  call void @set_offset(ptr %542, ptr @Entry)
  %564 = getelementptr { ptr, ptr, ptr, i32 }, ptr %542, i32 0, i32 0
  %565 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %566 = load ptr, ptr %564, align 8
  store ptr %566, ptr %565, align 8
  %567 = getelementptr { ptr, ptr, ptr, i32 }, ptr %542, i32 0, i32 1
  %568 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %569 = load ptr, ptr %567, align 8
  store ptr %569, ptr %568, align 8
  %570 = getelementptr { ptr, ptr, ptr, i32 }, ptr %542, i32 0, i32 2
  %571 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %572 = load ptr, ptr %570, align 8
  store ptr %572, ptr %571, align 8
  %573 = getelementptr { ptr, ptr, ptr, i32 }, ptr %542, i32 0, i32 3
  %574 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %575 = load i32, ptr %573, align 4
  store i32 %575, ptr %574, align 4
  store i1 %543, ptr %544, align 1
  %576 = load i1, ptr %544, align 1
  store i1 %576, ptr %.reg2mem73, align 1
  %577 = getelementptr { ptr, i160 }, ptr %545, i32 0, i32 0
  %.reload79 = load ptr, ptr %.reg2mem77, align 8
  %578 = getelementptr { ptr, i160 }, ptr %.reload79, i32 0, i32 0
  %579 = load ptr, ptr %577, align 8
  store ptr %579, ptr %578, align 8
  %580 = getelementptr { ptr, i160 }, ptr %545, i32 0, i32 1
  %.reload78 = load ptr, ptr %.reg2mem77, align 8
  %581 = getelementptr { ptr, i160 }, ptr %.reload78, i32 0, i32 1
  %582 = load i160, ptr %580, align 4
  store i160 %582, ptr %581, align 4
  %.reload74 = load i1, ptr %.reg2mem73, align 1
  store i1 %.reload74, ptr %.reg2mem187, align 1
  br label %584

583:                                              ; preds = %526
  %.reload112 = load i1, ptr %.reg2mem111, align 1
  store i1 %.reload112, ptr %.reg2mem187, align 1
  br label %584

584:                                              ; preds = %583, %541
  %.reload188 = load i1, ptr %.reg2mem187, align 1
  store i1 %.reload188, ptr %.reg2mem71, align 1
  br label %585

585:                                              ; preds = %584
  %.reload72 = load i1, ptr %.reg2mem71, align 1
  %.reload76 = load i32, ptr %.reg2mem75, align 4
  store i32 1, ptr %.reg2mem163, align 4
  store i32 0, ptr %.reg2mem165, align 4
  store ptr poison, ptr %.reg2mem167, align 8
  store ptr poison, ptr %.reg2mem169, align 8
  store ptr poison, ptr %.reg2mem171, align 8
  store ptr poison, ptr %.reg2mem173, align 8
  store ptr poison, ptr %.reg2mem175, align 8
  store ptr poison, ptr %.reg2mem177, align 8
  store ptr poison, ptr %.reg2mem179, align 8
  store ptr poison, ptr %.reg2mem181, align 8
  store i32 %.reload76, ptr %.reg2mem183, align 4
  store i1 %.reload72, ptr %.reg2mem185, align 1
  br label %586

586:                                              ; preds = %585, %517
  %.reload186 = load i1, ptr %.reg2mem185, align 1
  %.reload184 = load i32, ptr %.reg2mem183, align 4
  %.reload182 = load ptr, ptr %.reg2mem181, align 8
  %.reload180 = load ptr, ptr %.reg2mem179, align 8
  %.reload178 = load ptr, ptr %.reg2mem177, align 8
  %.reload176 = load ptr, ptr %.reg2mem175, align 8
  %.reload174 = load ptr, ptr %.reg2mem173, align 8
  %.reload172 = load ptr, ptr %.reg2mem171, align 8
  %.reload170 = load ptr, ptr %.reg2mem169, align 8
  %.reload168 = load ptr, ptr %.reg2mem167, align 8
  %.reload166 = load i32, ptr %.reg2mem165, align 4
  %.reload164 = load i32, ptr %.reg2mem163, align 4
  store i1 %.reload186, ptr %.reg2mem69, align 1
  store i32 %.reload184, ptr %.reg2mem67, align 4
  store ptr %.reload182, ptr %.reg2mem65, align 8
  store ptr %.reload180, ptr %.reg2mem63, align 8
  store ptr %.reload178, ptr %.reg2mem61, align 8
  store ptr %.reload176, ptr %.reg2mem59, align 8
  store ptr %.reload174, ptr %.reg2mem57, align 8
  store ptr %.reload172, ptr %.reg2mem55, align 8
  store ptr %.reload170, ptr %.reg2mem53, align 8
  store ptr %.reload168, ptr %.reg2mem51, align 8
  store i32 %.reload166, ptr %.reg2mem49, align 4
  store i32 %.reload164, ptr %.reg2mem47, align 4
  %.reload48 = load i32, ptr %.reg2mem47, align 4
  %.reload50 = load i32, ptr %.reg2mem49, align 4
  %.reload52 = load ptr, ptr %.reg2mem51, align 8
  %.reload54 = load ptr, ptr %.reg2mem53, align 8
  %.reload56 = load ptr, ptr %.reg2mem55, align 8
  %.reload58 = load ptr, ptr %.reg2mem57, align 8
  %.reload60 = load ptr, ptr %.reg2mem59, align 8
  %.reload62 = load ptr, ptr %.reg2mem61, align 8
  %.reload64 = load ptr, ptr %.reg2mem63, align 8
  %.reload66 = load ptr, ptr %.reg2mem65, align 8
  %.reload68 = load i32, ptr %.reg2mem67, align 4
  %.reload70 = load i1, ptr %.reg2mem69, align 1
  store i32 %.reload48, ptr %.reg2mem139, align 4
  store i32 %.reload50, ptr %.reg2mem141, align 4
  store ptr %.reload52, ptr %.reg2mem143, align 8
  store ptr %.reload54, ptr %.reg2mem145, align 8
  store ptr %.reload56, ptr %.reg2mem147, align 8
  store ptr %.reload58, ptr %.reg2mem149, align 8
  store ptr %.reload60, ptr %.reg2mem151, align 8
  store ptr %.reload62, ptr %.reg2mem153, align 8
  store ptr %.reload64, ptr %.reg2mem155, align 8
  store ptr %.reload66, ptr %.reg2mem157, align 8
  store i32 %.reload68, ptr %.reg2mem159, align 4
  store i1 %.reload70, ptr %.reg2mem161, align 1
  br label %588

587:                                              ; preds = %112
  store i32 0, ptr %.reg2mem139, align 4
  store i32 2, ptr %.reg2mem141, align 4
  store ptr poison, ptr %.reg2mem143, align 8
  store ptr poison, ptr %.reg2mem145, align 8
  store ptr poison, ptr %.reg2mem147, align 8
  store ptr poison, ptr %.reg2mem149, align 8
  store ptr poison, ptr %.reg2mem151, align 8
  store ptr poison, ptr %.reg2mem153, align 8
  store ptr poison, ptr %.reg2mem155, align 8
  store ptr poison, ptr %.reg2mem157, align 8
  store i32 poison, ptr %.reg2mem159, align 4
  store i1 poison, ptr %.reg2mem161, align 1
  br label %588

588:                                              ; preds = %587, %586
  %.reload162 = load i1, ptr %.reg2mem161, align 1
  %.reload160 = load i32, ptr %.reg2mem159, align 4
  %.reload158 = load ptr, ptr %.reg2mem157, align 8
  %.reload156 = load ptr, ptr %.reg2mem155, align 8
  %.reload154 = load ptr, ptr %.reg2mem153, align 8
  %.reload152 = load ptr, ptr %.reg2mem151, align 8
  %.reload150 = load ptr, ptr %.reg2mem149, align 8
  %.reload148 = load ptr, ptr %.reg2mem147, align 8
  %.reload146 = load ptr, ptr %.reg2mem145, align 8
  %.reload144 = load ptr, ptr %.reg2mem143, align 8
  %.reload142 = load i32, ptr %.reg2mem141, align 4
  %.reload140 = load i32, ptr %.reg2mem139, align 4
  store i1 %.reload162, ptr %.reg2mem45, align 1
  store i32 %.reload160, ptr %.reg2mem43, align 4
  store ptr %.reload158, ptr %.reg2mem40, align 8
  store ptr %.reload156, ptr %.reg2mem37, align 8
  store ptr %.reload154, ptr %.reg2mem33, align 8
  store ptr %.reload152, ptr %.reg2mem29, align 8
  store ptr %.reload150, ptr %.reg2mem25, align 8
  store ptr %.reload148, ptr %.reg2mem19, align 8
  store ptr %.reload146, ptr %.reg2mem16, align 8
  store ptr %.reload144, ptr %.reg2mem12, align 8
  store i32 %.reload142, ptr %.reg2mem9, align 4
  store i32 %.reload140, ptr %.reg2mem7, align 4
  br label %589

589:                                              ; preds = %588
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  %590 = trunc i32 %.reload8 to i1
  %.reload11 = load i32, ptr %.reg2mem9, align 4
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %.reload18 = load ptr, ptr %.reg2mem16, align 8
  %.reload24 = load ptr, ptr %.reg2mem19, align 8
  %.reload28 = load ptr, ptr %.reg2mem25, align 8
  %.reload32 = load ptr, ptr %.reg2mem29, align 8
  %.reload36 = load ptr, ptr %.reg2mem33, align 8
  %.reload39 = load ptr, ptr %.reg2mem37, align 8
  %.reload42 = load ptr, ptr %.reg2mem40, align 8
  %.reload44 = load i32, ptr %.reg2mem43, align 4
  %.reload46 = load i1, ptr %.reg2mem45, align 1
  store i32 %.reload44, ptr %.reg2mem135, align 4
  store i1 %.reload46, ptr %.reg2mem137, align 1
  br i1 %590, label %591, label %592

591:                                              ; preds = %589
  %.reload138 = load i1, ptr %.reg2mem137, align 1
  %.reload136 = load i32, ptr %.reg2mem135, align 4
  store i1 %.reload138, ptr %.reg2mem5, align 1
  store i32 %.reload136, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  store i32 %.reload4, ptr %.reg2mem191, align 4
  store i1 %.reload6, ptr %.reg2mem193, align 1
  br label %112

592:                                              ; preds = %589
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  %593 = zext i32 %.reload10 to i64
  %594 = trunc i64 %593 to i32
  switch i32 %594, label %635 [
    i32 1, label %595
  ]

595:                                              ; preds = %592
  %.reload41 = load ptr, ptr %.reg2mem40, align 8
  %596 = getelementptr { ptr, i160 }, ptr %.reload41, i32 0, i32 1
  %597 = load [0 x i8], ptr %596, align 1
  %.reload38 = load ptr, ptr %.reg2mem37, align 8
  store [0 x i8] %597, ptr %.reload38, align 1
  %598 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %599 = load ptr, ptr %598, align 8
  %600 = load ptr, ptr %55, align 8
  %601 = call ptr @llvm.invariant.start.p0(i64 688, ptr %600)
  %602 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %603 = load i32, ptr %602, align 4
  %604 = getelementptr ptr, ptr %600, i32 %603
  %605 = getelementptr ptr, ptr %604, i32 5
  %606 = load ptr, ptr %605, align 8
  %607 = getelementptr { ptr, ptr }, ptr %606, i32 0, i32 0
  %608 = load ptr, ptr %607, align 8
  %609 = call i32 %608(ptr %599) #16
  %.reload35 = load ptr, ptr %.reg2mem33, align 8
  store i32 %609, ptr %.reload35, align 4
  %.reload31 = load ptr, ptr %.reg2mem29, align 8
  store i32 1, ptr %.reload31, align 4
  %.reload34 = load ptr, ptr %.reg2mem33, align 8
  %610 = load i32, ptr %.reload34, align 4
  %.reload30 = load ptr, ptr %.reg2mem29, align 8
  %611 = load i32, ptr %.reload30, align 4
  %612 = add i32 %610, %611
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  store i32 %612, ptr %.reload27, align 4
  %613 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %614 = load ptr, ptr %613, align 8
  %615 = load ptr, ptr %55, align 8
  %616 = call ptr @llvm.invariant.start.p0(i64 688, ptr %615)
  %617 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %618 = load i32, ptr %617, align 4
  %619 = getelementptr ptr, ptr %615, i32 %618
  %620 = getelementptr ptr, ptr %619, i32 5
  %621 = load ptr, ptr %620, align 8
  %622 = getelementptr { ptr, ptr }, ptr %621, i32 0, i32 1
  %623 = load ptr, ptr %622, align 8
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %624 = load i32, ptr %.reload26, align 4
  call void %623(ptr %614, i32 %624) #15
  %.reload23 = load ptr, ptr %.reg2mem19, align 8
  %625 = getelementptr { ptr, i160 }, ptr %.reload23, i32 0, i32 1
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %626 = load [0 x i8], ptr %.reload17, align 1
  store [0 x i8] %626, ptr %625, align 1
  %.reload22 = load ptr, ptr %.reg2mem19, align 8
  %627 = getelementptr { ptr, i160 }, ptr %.reload22, i32 0, i32 0
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %.reload14, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %628 = load i64, ptr %.reload13, align 4
  store i64 %628, ptr %627, align 4
  %.reload21 = load ptr, ptr %.reg2mem19, align 8
  %629 = getelementptr { ptr, i160 }, ptr %.reload21, i32 0, i32 0
  %630 = load ptr, ptr %629, align 8
  %631 = insertvalue { ptr, i160 } undef, ptr %630, 0
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  %632 = getelementptr { ptr, i160 }, ptr %.reload20, i32 0, i32 1
  %633 = load i160, ptr %632, align 4
  %634 = insertvalue { ptr, i160 } %631, i160 %633, 1
  store { ptr, i160 } %634, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem133, align 8
  br label %642

635:                                              ; preds = %592
  %636 = getelementptr { ptr, i160 }, ptr %96, i32 0, i32 0
  %637 = load ptr, ptr %636, align 8
  %638 = insertvalue { ptr, i160 } undef, ptr %637, 0
  %639 = getelementptr { ptr, i160 }, ptr %96, i32 0, i32 1
  %640 = load i160, ptr %639, align 4
  %641 = insertvalue { ptr, i160 } %638, i160 %640, 1
  store { ptr, i160 } %641, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem133, align 8
  br label %642

642:                                              ; preds = %635, %595
  %.reload134 = load { ptr, i160 }, ptr %.reg2mem133, align 8
  ret { ptr, i160 } %.reload134
}

define void @HashMap_move_entries_old_tableArrayEntryK._V_or_Nil_old_capacity_per_tablePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, i32 %4) {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem4 = alloca i1, align 1
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %13, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  call void @set_offset(ptr %15, ptr @HashMap)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %28, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr %28)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %40, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %30, ptr @Array)
  store i32 0, ptr %.reg2mem13, align 4
  br label %43

43:                                               ; preds = %._crit_edge1, %5
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem7, align 4
  %.reload10 = load i32, ptr %.reg2mem7, align 4
  %44 = icmp slt i32 %.reload10, %4
  store i1 %44, ptr %.reg2mem4, align 1
  %.reload6 = load i1, ptr %.reg2mem4, align 1
  br i1 %.reload6, label %45, label %177

45:                                               ; preds = %43
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %53, 2
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %56, 3
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %15, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 688, ptr %60)
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = getelementptr ptr, ptr %60, i32 %63
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr @typegetter_wrapper(ptr %65, ptr %59)
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %15, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 688, ptr %69)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %72 = load i32, ptr %71, align 4
  %73 = getelementptr ptr, ptr %69, i32 %72
  %74 = getelementptr ptr, ptr %73, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = call ptr @typegetter_wrapper(ptr %75, ptr %68)
  %77 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %77, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %79 = call ptr @llvm.invariant.start.p0(i64 600, ptr %47)
  %80 = getelementptr ptr, ptr %47, i32 %56
  %81 = getelementptr ptr, ptr %80, i32 15
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %83, align 8
  %84 = call ptr @behavior_wrapper(ptr %82, { ptr, ptr, ptr, i32 } %57, ptr %7)
  %.reload9 = load i32, ptr %.reg2mem7, align 4
  %85 = call { ptr, i160 } %84({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr %6, i32 %.reload9)
  store { ptr, i160 } %85, ptr %8, align 8
  %86 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %87 = load ptr, ptr %86, align 8
  %88 = ptrtoint ptr %87 to i64
  %89 = icmp eq i64 %88, ptrtoint (ptr @nil_typ to i64)
  %90 = icmp eq i64 %88, 0
  %91 = or i1 %89, %90
  %92 = icmp eq i1 %91, false
  br i1 %92, label %93, label %._crit_edge

._crit_edge:                                      ; preds = %45
  br label %175

93:                                               ; preds = %45
  %94 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %95 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %98 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %99 = load i160, ptr %97, align 4
  store i160 %99, ptr %98, align 4
  call void @set_offset(ptr %9, ptr @Entry)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %102 = load ptr, ptr %100, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %111 = load i32, ptr %109, align 4
  store i32 %111, ptr %110, align 4
  call void @set_offset(ptr %10, ptr @Entry)
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %113, 0
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %116, 1
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %119, 2
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %122 = load i32, ptr %121, align 4
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, i32 %122, 3
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %125, 0
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %128, 1
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 2
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %134, 3
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = load ptr, ptr %15, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 688, ptr %138)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %141 = load i32, ptr %140, align 4
  %142 = getelementptr ptr, ptr %138, i32 %141
  %143 = load ptr, ptr %142, align 8
  %144 = call ptr @typegetter_wrapper(ptr %143, ptr %137)
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = load ptr, ptr %15, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 688, ptr %147)
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = getelementptr ptr, ptr %147, i32 %150
  %152 = getelementptr ptr, ptr %151, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = call ptr @typegetter_wrapper(ptr %153, ptr %146)
  %155 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %156 = getelementptr [4 x ptr], ptr %155, i32 0, i32 2
  store ptr %154, ptr %156, align 8
  %157 = getelementptr [4 x ptr], ptr %155, i32 0, i32 1
  store ptr %144, ptr %157, align 8
  %158 = getelementptr [4 x ptr], ptr %155, i32 0, i32 3
  store ptr null, ptr %158, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 24, ptr %155)
  store ptr @Entry, ptr %155, align 8
  %160 = getelementptr [1 x ptr], ptr %11, i32 0, i32 0
  store ptr %155, ptr %160, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 1, ptr %11)
  %162 = call ptr @llvm.invariant.start.p0(i64 688, ptr %125)
  %163 = getelementptr ptr, ptr %125, i32 %134
  %164 = getelementptr ptr, ptr %163, i32 14
  %165 = load ptr, ptr %164, align 8
  %166 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  store ptr %113, ptr %166, align 8
  %167 = call ptr @behavior_wrapper(ptr %165, { ptr, ptr, ptr, i32 } %135, ptr %12)
  %168 = call { ptr, i160 } %167({ ptr, ptr, ptr, i32 } %135, { ptr, ptr, ptr, i32 } %135, ptr %11, { ptr, ptr, ptr, i32 } %123)
  %169 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %170 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %171 = load ptr, ptr %169, align 8
  store ptr %171, ptr %170, align 8
  %172 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %173 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %174 = load i160, ptr %172, align 4
  store i160 %174, ptr %173, align 4
  br label %175

175:                                              ; preds = %._crit_edge, %93
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  %176 = add i32 %.reload8, 1
  store i32 %176, ptr %.reg2mem2, align 4
  %.reload3 = load i32, ptr %.reg2mem2, align 4
  store i32 %.reload3, ptr %.reg2mem11, align 4
  br label %178

177:                                              ; preds = %43
  store i32 poison, ptr %.reg2mem11, align 4
  br label %178

178:                                              ; preds = %177, %175
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem, align 4
  br label %179

179:                                              ; preds = %178
  %.reload5 = load i1, ptr %.reg2mem4, align 1
  br i1 %.reload5, label %._crit_edge1, label %180

._crit_edge1:                                     ; preds = %179
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem13, align 4
  br label %43

180:                                              ; preds = %179
  ret void
}

define void @HashMap_resize_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca [2 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [2 x ptr], align 8
  %7 = alloca { ptr, ptr }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [2 x ptr], align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [2 x ptr], align 8
  %12 = alloca { ptr, ptr }, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = alloca [2 x ptr], align 8
  %16 = alloca { ptr, ptr }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca [2 x ptr], align 8
  %19 = alloca { ptr, ptr }, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @HashMap)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %22, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 688, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 3
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = call { ptr, ptr, ptr, i32 } %45(ptr %36) #16
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %46, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 16, ptr %47)
  call void @assume_offset(ptr %47, ptr @Array)
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %61 = load i32, ptr %59, align 4
  store i32 %61, ptr %60, align 4
  call void @set_offset(ptr %49, ptr @Array)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %74 = load i32, ptr %72, align 4
  store i32 %74, ptr %73, align 4
  %75 = call ptr @llvm.invariant.start.p0(i64 16, ptr %62)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %22, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 688, ptr %78)
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %81 = load i32, ptr %80, align 4
  %82 = getelementptr ptr, ptr %78, i32 %81
  %83 = getelementptr ptr, ptr %82, i32 4
  %84 = load ptr, ptr %83, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %87 = call { ptr, ptr, ptr, i32 } %86(ptr %77) #16
  %88 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %87, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 16, ptr %88)
  call void @assume_offset(ptr %88, ptr @Array)
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %100, align 4
  store i32 %102, ptr %101, align 4
  call void @set_offset(ptr %90, ptr @Array)
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %109 = load ptr, ptr %107, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %112 = load ptr, ptr %110, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %115 = load i32, ptr %113, align 4
  store i32 %115, ptr %114, align 4
  %116 = call ptr @llvm.invariant.start.p0(i64 16, ptr %103)
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %118, 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %121, 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %127, 3
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = load ptr, ptr %22, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 688, ptr %131)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = getelementptr ptr, ptr %131, i32 %134
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @typegetter_wrapper(ptr %136, ptr %130)
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %139 = load ptr, ptr %138, align 8
  %140 = load ptr, ptr %22, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 688, ptr %140)
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = getelementptr ptr, ptr %140, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = call ptr @typegetter_wrapper(ptr %146, ptr %139)
  %148 = alloca [0 x ptr], align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 0, ptr %148)
  %150 = call ptr @llvm.invariant.start.p0(i64 600, ptr %118)
  %151 = getelementptr ptr, ptr %118, i32 %127
  %152 = getelementptr ptr, ptr %151, i32 8
  %153 = load ptr, ptr %152, align 8
  %154 = alloca {}, align 8
  %155 = call ptr @behavior_wrapper(ptr %153, { ptr, ptr, ptr, i32 } %128, ptr %154)
  %156 = call i32 %155({ ptr, ptr, ptr, i32 } %128, { ptr, ptr, ptr, i32 } %128, ptr %148)
  %157 = mul i32 %156, 2
  %158 = icmp slt i32 %157, 16
  %159 = select i1 %158, i32 16, i32 %157
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %161 = load ptr, ptr %160, align 8
  %162 = load ptr, ptr %22, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 688, ptr %162)
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %165 = load i32, ptr %164, align 4
  %166 = getelementptr ptr, ptr %162, i32 %165
  %167 = load ptr, ptr %166, align 8
  %168 = call ptr @typegetter_wrapper(ptr %167, ptr %161)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = load ptr, ptr %22, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 688, ptr %171)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %174 = load i32, ptr %173, align 4
  %175 = getelementptr ptr, ptr %171, i32 %174
  %176 = getelementptr ptr, ptr %175, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = call ptr @typegetter_wrapper(ptr %177, ptr %170)
  %179 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %180 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %181 = getelementptr [4 x ptr], ptr %180, i32 0, i32 2
  store ptr %178, ptr %181, align 8
  %182 = getelementptr [4 x ptr], ptr %180, i32 0, i32 1
  store ptr %168, ptr %182, align 8
  %183 = getelementptr [4 x ptr], ptr %180, i32 0, i32 3
  store ptr null, ptr %183, align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 24, ptr %180)
  store ptr @Entry, ptr %180, align 8
  %185 = getelementptr [4 x ptr], ptr %179, i32 0, i32 2
  store ptr %180, ptr %185, align 8
  %186 = getelementptr [4 x ptr], ptr %179, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %186, align 8
  %187 = getelementptr [4 x ptr], ptr %179, i32 0, i32 3
  store ptr null, ptr %187, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 24, ptr %179)
  store ptr @union_typ, ptr %179, align 8
  store ptr @Array, ptr %4, align 8
  %189 = getelementptr ptr, ptr %4, i32 1
  store ptr %179, ptr %189, align 8
  %190 = load ptr, ptr %4, align 8
  %191 = getelementptr ptr, ptr %190, i32 6
  %192 = load ptr, ptr %191, align 8
  %193 = call { i64, i64 } @size_wrapper(ptr %192, ptr %4)
  %194 = extractvalue { i64, i64 } %193, 0
  %195 = call ptr @bump_malloc(i64 %194)
  store ptr %179, ptr %195, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 8, ptr %195)
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  store ptr @Array, ptr %5, align 8
  store ptr %195, ptr %197, align 8
  store i32 9, ptr %198, align 4
  %199 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %201 = load ptr, ptr %200, align 8
  %202 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %201, 0
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } %202, ptr %204, 1
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %207 = load ptr, ptr %206, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } %205, ptr %207, 2
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %210 = load i32, ptr %209, align 4
  %211 = insertvalue { ptr, ptr, ptr, i32 } %208, i32 %210, 3
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = load ptr, ptr %22, align 8
  %215 = call ptr @llvm.invariant.start.p0(i64 688, ptr %214)
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %217 = load i32, ptr %216, align 4
  %218 = getelementptr ptr, ptr %214, i32 %217
  %219 = load ptr, ptr %218, align 8
  %220 = call ptr @typegetter_wrapper(ptr %219, ptr %213)
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %222 = load ptr, ptr %221, align 8
  %223 = load ptr, ptr %22, align 8
  %224 = call ptr @llvm.invariant.start.p0(i64 688, ptr %223)
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %226 = load i32, ptr %225, align 4
  %227 = getelementptr ptr, ptr %223, i32 %226
  %228 = getelementptr ptr, ptr %227, i32 1
  %229 = load ptr, ptr %228, align 8
  %230 = call ptr @typegetter_wrapper(ptr %229, ptr %222)
  %231 = getelementptr [2 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %231, align 8
  %232 = getelementptr [2 x ptr], ptr %6, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %232, align 8
  %233 = call ptr @llvm.invariant.start.p0(i64 4, ptr %6)
  %234 = call ptr @llvm.invariant.start.p0(i64 600, ptr %201)
  %235 = getelementptr ptr, ptr %201, i32 %210
  %236 = getelementptr ptr, ptr %235, i32 7
  %237 = load ptr, ptr %236, align 8
  %238 = getelementptr { ptr, ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %238, align 8
  %239 = getelementptr { ptr, ptr }, ptr %7, i32 0, i32 1
  store ptr @i32_typ, ptr %239, align 8
  %240 = call ptr @behavior_wrapper(ptr %237, { ptr, ptr, ptr, i32 } %211, ptr %7)
  call void %240({ ptr, ptr, ptr, i32 } %211, { ptr, ptr, ptr, i32 } %211, ptr %6, i32 %159, i32 %159)
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %243 = load ptr, ptr %241, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %246 = load ptr, ptr %244, align 8
  store ptr %246, ptr %245, align 8
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %249 = load ptr, ptr %247, align 8
  store ptr %249, ptr %248, align 8
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %252 = load i32, ptr %250, align 4
  store i32 %252, ptr %251, align 4
  call void @set_offset(ptr %8, ptr @Array)
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %254 = load ptr, ptr %253, align 8
  %255 = load ptr, ptr %22, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 688, ptr %255)
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %258 = load i32, ptr %257, align 4
  %259 = getelementptr ptr, ptr %255, i32 %258
  %260 = getelementptr ptr, ptr %259, i32 3
  %261 = load ptr, ptr %260, align 8
  %262 = getelementptr { ptr, ptr }, ptr %261, i32 0, i32 1
  %263 = load ptr, ptr %262, align 8
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %265 = load ptr, ptr %264, align 8
  %266 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %265, 0
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %268 = load ptr, ptr %267, align 8
  %269 = insertvalue { ptr, ptr, ptr, i32 } %266, ptr %268, 1
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %271 = load ptr, ptr %270, align 8
  %272 = insertvalue { ptr, ptr, ptr, i32 } %269, ptr %271, 2
  %273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %274 = load i32, ptr %273, align 4
  %275 = insertvalue { ptr, ptr, ptr, i32 } %272, i32 %274, 3
  call void %263(ptr %254, { ptr, ptr, ptr, i32 } %275) #15
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %277 = load ptr, ptr %276, align 8
  %278 = load ptr, ptr %22, align 8
  %279 = call ptr @llvm.invariant.start.p0(i64 688, ptr %278)
  %280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %281 = load i32, ptr %280, align 4
  %282 = getelementptr ptr, ptr %278, i32 %281
  %283 = load ptr, ptr %282, align 8
  %284 = call ptr @typegetter_wrapper(ptr %283, ptr %277)
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %286 = load ptr, ptr %285, align 8
  %287 = load ptr, ptr %22, align 8
  %288 = call ptr @llvm.invariant.start.p0(i64 688, ptr %287)
  %289 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %290 = load i32, ptr %289, align 4
  %291 = getelementptr ptr, ptr %287, i32 %290
  %292 = getelementptr ptr, ptr %291, i32 1
  %293 = load ptr, ptr %292, align 8
  %294 = call ptr @typegetter_wrapper(ptr %293, ptr %286)
  %295 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %296 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %297 = getelementptr [4 x ptr], ptr %296, i32 0, i32 2
  store ptr %294, ptr %297, align 8
  %298 = getelementptr [4 x ptr], ptr %296, i32 0, i32 1
  store ptr %284, ptr %298, align 8
  %299 = getelementptr [4 x ptr], ptr %296, i32 0, i32 3
  store ptr null, ptr %299, align 8
  %300 = call ptr @llvm.invariant.start.p0(i64 24, ptr %296)
  store ptr @Entry, ptr %296, align 8
  %301 = getelementptr [4 x ptr], ptr %295, i32 0, i32 2
  store ptr %296, ptr %301, align 8
  %302 = getelementptr [4 x ptr], ptr %295, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %302, align 8
  %303 = getelementptr [4 x ptr], ptr %295, i32 0, i32 3
  store ptr null, ptr %303, align 8
  %304 = call ptr @llvm.invariant.start.p0(i64 24, ptr %295)
  store ptr @union_typ, ptr %295, align 8
  store ptr @Array, ptr %9, align 8
  %305 = getelementptr ptr, ptr %9, i32 1
  store ptr %295, ptr %305, align 8
  %306 = load ptr, ptr %9, align 8
  %307 = getelementptr ptr, ptr %306, i32 6
  %308 = load ptr, ptr %307, align 8
  %309 = call { i64, i64 } @size_wrapper(ptr %308, ptr %9)
  %310 = extractvalue { i64, i64 } %309, 0
  %311 = call ptr @bump_malloc(i64 %310)
  store ptr %295, ptr %311, align 8
  %312 = call ptr @llvm.invariant.start.p0(i64 8, ptr %311)
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  store ptr @Array, ptr %10, align 8
  store ptr %311, ptr %313, align 8
  store i32 9, ptr %314, align 4
  %315 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  %316 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %317 = load ptr, ptr %316, align 8
  %318 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %317, 0
  %319 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %320 = load ptr, ptr %319, align 8
  %321 = insertvalue { ptr, ptr, ptr, i32 } %318, ptr %320, 1
  %322 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %323 = load ptr, ptr %322, align 8
  %324 = insertvalue { ptr, ptr, ptr, i32 } %321, ptr %323, 2
  %325 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %326 = load i32, ptr %325, align 4
  %327 = insertvalue { ptr, ptr, ptr, i32 } %324, i32 %326, 3
  %328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %329 = load ptr, ptr %328, align 8
  %330 = load ptr, ptr %22, align 8
  %331 = call ptr @llvm.invariant.start.p0(i64 688, ptr %330)
  %332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %333 = load i32, ptr %332, align 4
  %334 = getelementptr ptr, ptr %330, i32 %333
  %335 = load ptr, ptr %334, align 8
  %336 = call ptr @typegetter_wrapper(ptr %335, ptr %329)
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %338 = load ptr, ptr %337, align 8
  %339 = load ptr, ptr %22, align 8
  %340 = call ptr @llvm.invariant.start.p0(i64 688, ptr %339)
  %341 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %342 = load i32, ptr %341, align 4
  %343 = getelementptr ptr, ptr %339, i32 %342
  %344 = getelementptr ptr, ptr %343, i32 1
  %345 = load ptr, ptr %344, align 8
  %346 = call ptr @typegetter_wrapper(ptr %345, ptr %338)
  %347 = getelementptr [2 x ptr], ptr %11, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %347, align 8
  %348 = getelementptr [2 x ptr], ptr %11, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %348, align 8
  %349 = call ptr @llvm.invariant.start.p0(i64 4, ptr %11)
  %350 = call ptr @llvm.invariant.start.p0(i64 600, ptr %317)
  %351 = getelementptr ptr, ptr %317, i32 %326
  %352 = getelementptr ptr, ptr %351, i32 7
  %353 = load ptr, ptr %352, align 8
  %354 = getelementptr { ptr, ptr }, ptr %12, i32 0, i32 0
  store ptr @i32_typ, ptr %354, align 8
  %355 = getelementptr { ptr, ptr }, ptr %12, i32 0, i32 1
  store ptr @i32_typ, ptr %355, align 8
  %356 = call ptr @behavior_wrapper(ptr %353, { ptr, ptr, ptr, i32 } %327, ptr %12)
  call void %356({ ptr, ptr, ptr, i32 } %327, { ptr, ptr, ptr, i32 } %327, ptr %11, i32 %159, i32 %159)
  %357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %359 = load ptr, ptr %357, align 8
  store ptr %359, ptr %358, align 8
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %362 = load ptr, ptr %360, align 8
  store ptr %362, ptr %361, align 8
  %363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %365 = load ptr, ptr %363, align 8
  store ptr %365, ptr %364, align 8
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %368 = load i32, ptr %366, align 4
  store i32 %368, ptr %367, align 4
  call void @set_offset(ptr %13, ptr @Array)
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %370 = load ptr, ptr %369, align 8
  %371 = load ptr, ptr %22, align 8
  %372 = call ptr @llvm.invariant.start.p0(i64 688, ptr %371)
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %374 = load i32, ptr %373, align 4
  %375 = getelementptr ptr, ptr %371, i32 %374
  %376 = getelementptr ptr, ptr %375, i32 4
  %377 = load ptr, ptr %376, align 8
  %378 = getelementptr { ptr, ptr }, ptr %377, i32 0, i32 1
  %379 = load ptr, ptr %378, align 8
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %381 = load ptr, ptr %380, align 8
  %382 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %381, 0
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %384 = load ptr, ptr %383, align 8
  %385 = insertvalue { ptr, ptr, ptr, i32 } %382, ptr %384, 1
  %386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %387 = load ptr, ptr %386, align 8
  %388 = insertvalue { ptr, ptr, ptr, i32 } %385, ptr %387, 2
  %389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %390 = load i32, ptr %389, align 4
  %391 = insertvalue { ptr, ptr, ptr, i32 } %388, i32 %390, 3
  call void %379(ptr %370, { ptr, ptr, ptr, i32 } %391) #15
  %392 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %393 = load ptr, ptr %392, align 8
  %394 = load ptr, ptr %22, align 8
  %395 = call ptr @llvm.invariant.start.p0(i64 688, ptr %394)
  %396 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %397 = load i32, ptr %396, align 4
  %398 = getelementptr ptr, ptr %394, i32 %397
  %399 = getelementptr ptr, ptr %398, i32 5
  %400 = load ptr, ptr %399, align 8
  %401 = getelementptr { ptr, ptr }, ptr %400, i32 0, i32 1
  %402 = load ptr, ptr %401, align 8
  call void %402(ptr %393, i32 0) #15
  %403 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %405 = load ptr, ptr %403, align 8
  store ptr %405, ptr %404, align 8
  %406 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %408 = load ptr, ptr %406, align 8
  store ptr %408, ptr %407, align 8
  %409 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %410 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %411 = load ptr, ptr %409, align 8
  store ptr %411, ptr %410, align 8
  %412 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %414 = load i32, ptr %412, align 4
  store i32 %414, ptr %413, align 4
  call void @set_offset(ptr %14, ptr @Array)
  %415 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %416 = load ptr, ptr %415, align 8
  %417 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %416, 0
  %418 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %419 = load ptr, ptr %418, align 8
  %420 = insertvalue { ptr, ptr, ptr, i32 } %417, ptr %419, 1
  %421 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %422 = load ptr, ptr %421, align 8
  %423 = insertvalue { ptr, ptr, ptr, i32 } %420, ptr %422, 2
  %424 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %425 = load i32, ptr %424, align 4
  %426 = insertvalue { ptr, ptr, ptr, i32 } %423, i32 %425, 3
  %427 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %428 = load ptr, ptr %427, align 8
  %429 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %428, 0
  %430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %431 = load ptr, ptr %430, align 8
  %432 = insertvalue { ptr, ptr, ptr, i32 } %429, ptr %431, 1
  %433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %434 = load ptr, ptr %433, align 8
  %435 = insertvalue { ptr, ptr, ptr, i32 } %432, ptr %434, 2
  %436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %437 = load i32, ptr %436, align 4
  %438 = insertvalue { ptr, ptr, ptr, i32 } %435, i32 %437, 3
  %439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %440 = load ptr, ptr %439, align 8
  %441 = load ptr, ptr %22, align 8
  %442 = call ptr @llvm.invariant.start.p0(i64 688, ptr %441)
  %443 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %444 = load i32, ptr %443, align 4
  %445 = getelementptr ptr, ptr %441, i32 %444
  %446 = load ptr, ptr %445, align 8
  %447 = call ptr @typegetter_wrapper(ptr %446, ptr %440)
  %448 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %449 = load ptr, ptr %448, align 8
  %450 = load ptr, ptr %22, align 8
  %451 = call ptr @llvm.invariant.start.p0(i64 688, ptr %450)
  %452 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %453 = load i32, ptr %452, align 4
  %454 = getelementptr ptr, ptr %450, i32 %453
  %455 = getelementptr ptr, ptr %454, i32 1
  %456 = load ptr, ptr %455, align 8
  %457 = call ptr @typegetter_wrapper(ptr %456, ptr %449)
  %458 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %459 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %460 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %461 = getelementptr [4 x ptr], ptr %460, i32 0, i32 2
  store ptr %457, ptr %461, align 8
  %462 = getelementptr [4 x ptr], ptr %460, i32 0, i32 1
  store ptr %447, ptr %462, align 8
  %463 = getelementptr [4 x ptr], ptr %460, i32 0, i32 3
  store ptr null, ptr %463, align 8
  %464 = call ptr @llvm.invariant.start.p0(i64 24, ptr %460)
  store ptr @Entry, ptr %460, align 8
  %465 = getelementptr [4 x ptr], ptr %459, i32 0, i32 2
  store ptr %460, ptr %465, align 8
  %466 = getelementptr [4 x ptr], ptr %459, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %466, align 8
  %467 = getelementptr [4 x ptr], ptr %459, i32 0, i32 3
  store ptr null, ptr %467, align 8
  %468 = call ptr @llvm.invariant.start.p0(i64 24, ptr %459)
  store ptr @union_typ, ptr %459, align 8
  %469 = getelementptr [3 x ptr], ptr %458, i32 0, i32 1
  store ptr %459, ptr %469, align 8
  %470 = getelementptr [3 x ptr], ptr %458, i32 0, i32 2
  store ptr null, ptr %470, align 8
  %471 = call ptr @llvm.invariant.start.p0(i64 16, ptr %458)
  store ptr @Array, ptr %458, align 8
  %472 = getelementptr [2 x ptr], ptr %15, i32 0, i32 0
  store ptr %458, ptr %472, align 8
  %473 = getelementptr [2 x ptr], ptr %15, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %473, align 8
  %474 = call ptr @llvm.invariant.start.p0(i64 4, ptr %15)
  %475 = call ptr @llvm.invariant.start.p0(i64 688, ptr %428)
  %476 = getelementptr ptr, ptr %428, i32 %437
  %477 = getelementptr ptr, ptr %476, i32 15
  %478 = load ptr, ptr %477, align 8
  %479 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 0
  store ptr %416, ptr %479, align 8
  %480 = getelementptr { ptr, ptr }, ptr %16, i32 0, i32 1
  store ptr @i32_typ, ptr %480, align 8
  %481 = call ptr @behavior_wrapper(ptr %478, { ptr, ptr, ptr, i32 } %438, ptr %16)
  call void %481({ ptr, ptr, ptr, i32 } %438, { ptr, ptr, ptr, i32 } %438, ptr %15, { ptr, ptr, ptr, i32 } %426, i32 %156)
  %482 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %483 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %484 = load ptr, ptr %482, align 8
  store ptr %484, ptr %483, align 8
  %485 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %486 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %487 = load ptr, ptr %485, align 8
  store ptr %487, ptr %486, align 8
  %488 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %489 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %490 = load ptr, ptr %488, align 8
  store ptr %490, ptr %489, align 8
  %491 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %492 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %493 = load i32, ptr %491, align 4
  store i32 %493, ptr %492, align 4
  call void @set_offset(ptr %17, ptr @Array)
  %494 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %495 = load ptr, ptr %494, align 8
  %496 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %495, 0
  %497 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %498 = load ptr, ptr %497, align 8
  %499 = insertvalue { ptr, ptr, ptr, i32 } %496, ptr %498, 1
  %500 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %501 = load ptr, ptr %500, align 8
  %502 = insertvalue { ptr, ptr, ptr, i32 } %499, ptr %501, 2
  %503 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %504 = load i32, ptr %503, align 4
  %505 = insertvalue { ptr, ptr, ptr, i32 } %502, i32 %504, 3
  %506 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %507 = load ptr, ptr %506, align 8
  %508 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %507, 0
  %509 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %510 = load ptr, ptr %509, align 8
  %511 = insertvalue { ptr, ptr, ptr, i32 } %508, ptr %510, 1
  %512 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %513 = load ptr, ptr %512, align 8
  %514 = insertvalue { ptr, ptr, ptr, i32 } %511, ptr %513, 2
  %515 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %516 = load i32, ptr %515, align 4
  %517 = insertvalue { ptr, ptr, ptr, i32 } %514, i32 %516, 3
  %518 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %519 = load ptr, ptr %518, align 8
  %520 = load ptr, ptr %22, align 8
  %521 = call ptr @llvm.invariant.start.p0(i64 688, ptr %520)
  %522 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %523 = load i32, ptr %522, align 4
  %524 = getelementptr ptr, ptr %520, i32 %523
  %525 = load ptr, ptr %524, align 8
  %526 = call ptr @typegetter_wrapper(ptr %525, ptr %519)
  %527 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %528 = load ptr, ptr %527, align 8
  %529 = load ptr, ptr %22, align 8
  %530 = call ptr @llvm.invariant.start.p0(i64 688, ptr %529)
  %531 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %532 = load i32, ptr %531, align 4
  %533 = getelementptr ptr, ptr %529, i32 %532
  %534 = getelementptr ptr, ptr %533, i32 1
  %535 = load ptr, ptr %534, align 8
  %536 = call ptr @typegetter_wrapper(ptr %535, ptr %528)
  %537 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %538 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %539 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %540 = getelementptr [4 x ptr], ptr %539, i32 0, i32 2
  store ptr %536, ptr %540, align 8
  %541 = getelementptr [4 x ptr], ptr %539, i32 0, i32 1
  store ptr %526, ptr %541, align 8
  %542 = getelementptr [4 x ptr], ptr %539, i32 0, i32 3
  store ptr null, ptr %542, align 8
  %543 = call ptr @llvm.invariant.start.p0(i64 24, ptr %539)
  store ptr @Entry, ptr %539, align 8
  %544 = getelementptr [4 x ptr], ptr %538, i32 0, i32 2
  store ptr %539, ptr %544, align 8
  %545 = getelementptr [4 x ptr], ptr %538, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %545, align 8
  %546 = getelementptr [4 x ptr], ptr %538, i32 0, i32 3
  store ptr null, ptr %546, align 8
  %547 = call ptr @llvm.invariant.start.p0(i64 24, ptr %538)
  store ptr @union_typ, ptr %538, align 8
  %548 = getelementptr [3 x ptr], ptr %537, i32 0, i32 1
  store ptr %538, ptr %548, align 8
  %549 = getelementptr [3 x ptr], ptr %537, i32 0, i32 2
  store ptr null, ptr %549, align 8
  %550 = call ptr @llvm.invariant.start.p0(i64 16, ptr %537)
  store ptr @Array, ptr %537, align 8
  %551 = getelementptr [2 x ptr], ptr %18, i32 0, i32 0
  store ptr %537, ptr %551, align 8
  %552 = getelementptr [2 x ptr], ptr %18, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %552, align 8
  %553 = call ptr @llvm.invariant.start.p0(i64 4, ptr %18)
  %554 = call ptr @llvm.invariant.start.p0(i64 688, ptr %507)
  %555 = getelementptr ptr, ptr %507, i32 %516
  %556 = getelementptr ptr, ptr %555, i32 15
  %557 = load ptr, ptr %556, align 8
  %558 = getelementptr { ptr, ptr }, ptr %19, i32 0, i32 0
  store ptr %495, ptr %558, align 8
  %559 = getelementptr { ptr, ptr }, ptr %19, i32 0, i32 1
  store ptr @i32_typ, ptr %559, align 8
  %560 = call ptr @behavior_wrapper(ptr %557, { ptr, ptr, ptr, i32 } %517, ptr %19)
  call void %560({ ptr, ptr, ptr, i32 } %517, { ptr, ptr, ptr, i32 } %517, ptr %18, { ptr, ptr, ptr, i32 } %505, i32 %156)
  ret void
}

define i1 @HashMap_replace_in_table_keyK_valueV_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5, i32 %6, { ptr, ptr, ptr, i32 } %7) {
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [0 x ptr], align 8
  %11 = alloca {}, align 8
  %12 = alloca [0 x ptr], align 8
  %13 = alloca {}, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca i160, align 8
  %16 = alloca ptr, align 8
  %17 = alloca i160, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i160, align 8
  %20 = alloca ptr, align 8
  %21 = alloca ptr, align 8
  %22 = alloca [3 x ptr], align 8
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = alloca i160, align 8
  %25 = alloca ptr, align 8
  %26 = alloca i160, align 8
  %27 = alloca ptr, align 8
  %28 = alloca [3 x ptr], align 8
  %29 = alloca { ptr, ptr, ptr }, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = alloca [2 x ptr], align 8
  %35 = alloca { ptr, ptr }, align 8
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i1, align 1
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i1, align 1
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca i1, align 1
  %.reg2mem21 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %50 = load i32, ptr %48, align 4
  store i32 %50, ptr %49, align 4
  call void @set_offset(ptr %38, ptr @HashMap)
  %51 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %51, align 8
  %52 = alloca i160, align 8
  %53 = alloca ptr, align 8
  %54 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  store ptr %55, ptr %53, align 8
  %56 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 1
  %57 = load i160, ptr %56, align 4
  store i160 %57, ptr %52, align 4
  %58 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %58, align 8
  %59 = alloca i160, align 8
  %60 = alloca ptr, align 8
  %61 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  store ptr %62, ptr %60, align 8
  %63 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 1
  %64 = load i160, ptr %63, align 4
  store i160 %64, ptr %59, align 4
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %7, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 16, ptr %65)
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %79 = load i32, ptr %77, align 4
  store i32 %79, ptr %78, align 4
  call void @set_offset(ptr %67, ptr @Array)
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %90 = load i32, ptr %89, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, i32 %90, 3
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = load ptr, ptr %38, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 688, ptr %94)
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = getelementptr ptr, ptr %94, i32 %97
  %99 = load ptr, ptr %98, align 8
  %100 = call ptr @typegetter_wrapper(ptr %99, ptr %93)
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %38, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 688, ptr %103)
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = getelementptr ptr, ptr %103, i32 %106
  %108 = getelementptr ptr, ptr %107, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @typegetter_wrapper(ptr %109, ptr %102)
  %111 = alloca [1 x ptr], align 8
  %112 = getelementptr [1 x ptr], ptr %111, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %112, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 1, ptr %111)
  %114 = call ptr @llvm.invariant.start.p0(i64 600, ptr %81)
  %115 = getelementptr ptr, ptr %81, i32 %90
  %116 = getelementptr ptr, ptr %115, i32 15
  %117 = load ptr, ptr %116, align 8
  %118 = alloca { ptr }, align 8
  %119 = getelementptr { ptr }, ptr %118, i32 0, i32 0
  store ptr @i32_typ, ptr %119, align 8
  %120 = call ptr @behavior_wrapper(ptr %117, { ptr, ptr, ptr, i32 } %91, ptr %118)
  %121 = call { ptr, i160 } %120({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr %111, i32 %6)
  %122 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %121, ptr %122, align 8
  %123 = getelementptr { ptr, i160 }, ptr %122, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = ptrtoint ptr %124 to i64
  %126 = icmp eq i64 %125, ptrtoint (ptr @nil_typ to i64)
  %127 = icmp eq i64 %125, 0
  %128 = or i1 %126, %127
  %129 = icmp eq i1 %128, false
  br i1 %129, label %130, label %434

130:                                              ; preds = %8
  %131 = getelementptr { ptr, i160 }, ptr %122, i32 0, i32 0
  %132 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %133 = load ptr, ptr %131, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, i160 }, ptr %122, i32 0, i32 1
  %135 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %136 = load i160, ptr %134, align 4
  store i160 %136, ptr %135, align 4
  call void @set_offset(ptr %9, ptr @Entry)
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %141, 1
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 2
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %147 = load i32, ptr %146, align 4
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 %147, 3
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = load ptr, ptr %38, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 688, ptr %151)
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %154 = load i32, ptr %153, align 4
  %155 = getelementptr ptr, ptr %151, i32 %154
  %156 = load ptr, ptr %155, align 8
  %157 = call ptr @typegetter_wrapper(ptr %156, ptr %150)
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %159 = load ptr, ptr %158, align 8
  %160 = load ptr, ptr %38, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 688, ptr %160)
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %163 = load i32, ptr %162, align 4
  %164 = getelementptr ptr, ptr %160, i32 %163
  %165 = getelementptr ptr, ptr %164, i32 1
  %166 = load ptr, ptr %165, align 8
  %167 = call ptr @typegetter_wrapper(ptr %166, ptr %159)
  %168 = call ptr @llvm.invariant.start.p0(i64 0, ptr %10)
  %169 = call ptr @llvm.invariant.start.p0(i64 120, ptr %138)
  %170 = getelementptr ptr, ptr %138, i32 %147
  %171 = getelementptr ptr, ptr %170, i32 8
  %172 = load ptr, ptr %171, align 8
  %173 = call ptr @behavior_wrapper(ptr %172, { ptr, ptr, ptr, i32 } %148, ptr %11)
  %174 = call i32 %173({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr %10)
  %175 = icmp eq i32 %174, %5
  br i1 %175, label %176, label %420

176:                                              ; preds = %130
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %178 = load ptr, ptr %177, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %178, 0
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %181 = load ptr, ptr %180, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %181, 1
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %184, 2
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %187 = load i32, ptr %186, align 4
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, i32 %187, 3
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %190 = load ptr, ptr %189, align 8
  %191 = load ptr, ptr %38, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 688, ptr %191)
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %194 = load i32, ptr %193, align 4
  %195 = getelementptr ptr, ptr %191, i32 %194
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr @typegetter_wrapper(ptr %196, ptr %190)
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %199 = load ptr, ptr %198, align 8
  %200 = load ptr, ptr %38, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 688, ptr %200)
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %203 = load i32, ptr %202, align 4
  %204 = getelementptr ptr, ptr %200, i32 %203
  %205 = getelementptr ptr, ptr %204, i32 1
  %206 = load ptr, ptr %205, align 8
  %207 = call ptr @typegetter_wrapper(ptr %206, ptr %199)
  %208 = call ptr @llvm.invariant.start.p0(i64 0, ptr %12)
  %209 = call ptr @llvm.invariant.start.p0(i64 120, ptr %178)
  %210 = getelementptr ptr, ptr %178, i32 %187
  %211 = getelementptr ptr, ptr %210, i32 6
  %212 = load ptr, ptr %211, align 8
  %213 = call ptr @behavior_wrapper(ptr %212, { ptr, ptr, ptr, i32 } %188, ptr %13)
  %214 = call { ptr, i160 } %213({ ptr, ptr, ptr, i32 } %188, { ptr, ptr, ptr, i32 } %188, ptr %12)
  store { ptr, i160 } %214, ptr %14, align 8
  %215 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %216 = load ptr, ptr %215, align 8
  store ptr %216, ptr %16, align 8
  %217 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 1
  %218 = load i160, ptr %217, align 4
  store i160 %218, ptr %15, align 4
  %219 = load ptr, ptr %16, align 8
  store ptr %219, ptr %18, align 8
  %220 = load i160, ptr %15, align 4
  store i160 %220, ptr %17, align 4
  %221 = load ptr, ptr %18, align 8
  %222 = insertvalue { ptr, i160 } undef, ptr %221, 0
  %223 = load i160, ptr %17, align 4
  %224 = insertvalue { ptr, i160 } %222, i160 %223, 1
  %225 = load ptr, ptr %53, align 8
  store ptr %225, ptr %20, align 8
  %226 = load i160, ptr %52, align 4
  store i160 %226, ptr %19, align 4
  %227 = load ptr, ptr %20, align 8
  %228 = insertvalue { ptr, i160 } undef, ptr %227, 0
  %229 = load i160, ptr %19, align 4
  %230 = insertvalue { ptr, i160 } %228, i160 %229, 1
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %232 = load ptr, ptr %231, align 8
  %233 = load ptr, ptr %38, align 8
  %234 = call ptr @llvm.invariant.start.p0(i64 688, ptr %233)
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %236 = load i32, ptr %235, align 4
  %237 = getelementptr ptr, ptr %233, i32 %236
  %238 = getelementptr ptr, ptr %237, i32 7
  %239 = load ptr, ptr %238, align 8
  %240 = getelementptr { ptr, ptr }, ptr %239, i32 0, i32 0
  %241 = load ptr, ptr %240, align 8
  %242 = call { ptr } %241(ptr %232) #16
  store { ptr } %242, ptr %21, align 8
  %243 = load ptr, ptr %21, align 8
  %244 = call i1 %243({ ptr, i160 } %224, { ptr, i160 } %230)
  %245 = zext i1 %244 to i32
  store i32 %245, ptr %.reg2mem9, align 4
  br i1 %244, label %246, label %._crit_edge

._crit_edge:                                      ; preds = %176
  br label %419

246:                                              ; preds = %176
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %248 = load ptr, ptr %247, align 8
  %249 = load ptr, ptr %38, align 8
  %250 = call ptr @llvm.invariant.start.p0(i64 688, ptr %249)
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %252 = load i32, ptr %251, align 4
  %253 = getelementptr ptr, ptr %249, i32 %252
  %254 = load ptr, ptr %253, align 8
  %255 = call ptr @typegetter_wrapper(ptr %254, ptr %248)
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %257 = load ptr, ptr %256, align 8
  %258 = load ptr, ptr %38, align 8
  %259 = call ptr @llvm.invariant.start.p0(i64 688, ptr %258)
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %261 = load i32, ptr %260, align 4
  %262 = getelementptr ptr, ptr %258, i32 %261
  %263 = getelementptr ptr, ptr %262, i32 1
  %264 = load ptr, ptr %263, align 8
  %265 = call ptr @typegetter_wrapper(ptr %264, ptr %257)
  store ptr @Entry, ptr %22, align 8
  %266 = getelementptr ptr, ptr %22, i32 1
  store ptr %255, ptr %266, align 8
  %267 = getelementptr ptr, ptr %22, i32 2
  store ptr %265, ptr %267, align 8
  %268 = load ptr, ptr %22, align 8
  %269 = getelementptr ptr, ptr %268, i32 6
  %270 = load ptr, ptr %269, align 8
  %271 = call { i64, i64 } @size_wrapper(ptr %270, ptr %22)
  %272 = extractvalue { i64, i64 } %271, 0
  %273 = call ptr @bump_malloc(i64 %272)
  store ptr %255, ptr %273, align 8
  %274 = getelementptr ptr, ptr %273, i32 1
  store ptr %265, ptr %274, align 8
  %275 = call ptr @llvm.invariant.start.p0(i64 16, ptr %273)
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr @Entry, ptr %23, align 8
  store ptr %273, ptr %276, align 8
  store i32 9, ptr %277, align 4
  %278 = call ptr @llvm.invariant.start.p0(i64 16, ptr %23)
  %279 = load ptr, ptr %53, align 8
  store ptr %279, ptr %25, align 8
  %280 = load i160, ptr %52, align 4
  store i160 %280, ptr %24, align 4
  %281 = load ptr, ptr %25, align 8
  %282 = insertvalue { ptr, i160 } undef, ptr %281, 0
  %283 = load i160, ptr %24, align 4
  %284 = insertvalue { ptr, i160 } %282, i160 %283, 1
  %285 = load ptr, ptr %60, align 8
  store ptr %285, ptr %27, align 8
  %286 = load i160, ptr %59, align 4
  store i160 %286, ptr %26, align 4
  %287 = load ptr, ptr %27, align 8
  %288 = insertvalue { ptr, i160 } undef, ptr %287, 0
  %289 = load i160, ptr %26, align 4
  %290 = insertvalue { ptr, i160 } %288, i160 %289, 1
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %292 = load ptr, ptr %291, align 8
  %293 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %292, 0
  %294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %295 = load ptr, ptr %294, align 8
  %296 = insertvalue { ptr, ptr, ptr, i32 } %293, ptr %295, 1
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %298 = load ptr, ptr %297, align 8
  %299 = insertvalue { ptr, ptr, ptr, i32 } %296, ptr %298, 2
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %301 = load i32, ptr %300, align 4
  %302 = insertvalue { ptr, ptr, ptr, i32 } %299, i32 %301, 3
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %304 = load ptr, ptr %303, align 8
  %305 = load ptr, ptr %38, align 8
  %306 = call ptr @llvm.invariant.start.p0(i64 688, ptr %305)
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %308 = load i32, ptr %307, align 4
  %309 = getelementptr ptr, ptr %305, i32 %308
  %310 = load ptr, ptr %309, align 8
  %311 = call ptr @typegetter_wrapper(ptr %310, ptr %304)
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %313 = load ptr, ptr %312, align 8
  %314 = load ptr, ptr %38, align 8
  %315 = call ptr @llvm.invariant.start.p0(i64 688, ptr %314)
  %316 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %317 = load i32, ptr %316, align 4
  %318 = getelementptr ptr, ptr %314, i32 %317
  %319 = getelementptr ptr, ptr %318, i32 1
  %320 = load ptr, ptr %319, align 8
  %321 = call ptr @typegetter_wrapper(ptr %320, ptr %313)
  %322 = getelementptr [3 x ptr], ptr %28, i32 0, i32 0
  store ptr %311, ptr %322, align 8
  %323 = getelementptr [3 x ptr], ptr %28, i32 0, i32 1
  store ptr %321, ptr %323, align 8
  %324 = getelementptr [3 x ptr], ptr %28, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %324, align 8
  %325 = call ptr @llvm.invariant.start.p0(i64 9, ptr %28)
  %326 = call ptr @llvm.invariant.start.p0(i64 120, ptr %292)
  %327 = getelementptr ptr, ptr %292, i32 %301
  %328 = getelementptr ptr, ptr %327, i32 5
  %329 = load ptr, ptr %328, align 8
  %330 = getelementptr { ptr, ptr, ptr }, ptr %29, i32 0, i32 0
  store ptr %281, ptr %330, align 8
  %331 = getelementptr { ptr, ptr, ptr }, ptr %29, i32 0, i32 1
  store ptr %287, ptr %331, align 8
  %332 = getelementptr { ptr, ptr, ptr }, ptr %29, i32 0, i32 2
  store ptr @i32_typ, ptr %332, align 8
  %333 = call ptr @behavior_wrapper(ptr %329, { ptr, ptr, ptr, i32 } %302, ptr %29)
  call void %333({ ptr, ptr, ptr, i32 } %302, { ptr, ptr, ptr, i32 } %302, ptr %28, { ptr, i160 } %284, { ptr, i160 } %290, i32 %5)
  %334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %335 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %336 = load ptr, ptr %334, align 8
  store ptr %336, ptr %335, align 8
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %339 = load ptr, ptr %337, align 8
  store ptr %339, ptr %338, align 8
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %341 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %342 = load ptr, ptr %340, align 8
  store ptr %342, ptr %341, align 8
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %345 = load i32, ptr %343, align 4
  store i32 %345, ptr %344, align 4
  call void @set_offset(ptr %30, ptr @Entry)
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %347 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %348 = load ptr, ptr %346, align 8
  store ptr %348, ptr %347, align 8
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %351 = load ptr, ptr %349, align 8
  store ptr %351, ptr %350, align 8
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %354 = load ptr, ptr %352, align 8
  store ptr %354, ptr %353, align 8
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %357 = load i32, ptr %355, align 4
  store i32 %357, ptr %356, align 4
  %358 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  %359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %360 = load ptr, ptr %359, align 8
  store ptr %360, ptr %33, align 8
  %361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %362 = load ptr, ptr %361, align 8
  store ptr %362, ptr %32, align 8
  %363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %364 = getelementptr i8, ptr %32, i32 8
  %365 = load ptr, ptr %363, align 8
  store ptr %365, ptr %364, align 8
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %367 = getelementptr i8, ptr %32, i32 16
  %368 = load i32, ptr %366, align 4
  store i32 %368, ptr %367, align 4
  %369 = load ptr, ptr %33, align 8
  %370 = insertvalue { ptr, i160 } undef, ptr %369, 0
  %371 = load i160, ptr %32, align 4
  %372 = insertvalue { ptr, i160 } %370, i160 %371, 1
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %374 = load ptr, ptr %373, align 8
  %375 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %374, 0
  %376 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %377 = load ptr, ptr %376, align 8
  %378 = insertvalue { ptr, ptr, ptr, i32 } %375, ptr %377, 1
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %380 = load ptr, ptr %379, align 8
  %381 = insertvalue { ptr, ptr, ptr, i32 } %378, ptr %380, 2
  %382 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %383 = load i32, ptr %382, align 4
  %384 = insertvalue { ptr, ptr, ptr, i32 } %381, i32 %383, 3
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %386 = load ptr, ptr %385, align 8
  %387 = load ptr, ptr %38, align 8
  %388 = call ptr @llvm.invariant.start.p0(i64 688, ptr %387)
  %389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %390 = load i32, ptr %389, align 4
  %391 = getelementptr ptr, ptr %387, i32 %390
  %392 = load ptr, ptr %391, align 8
  %393 = call ptr @typegetter_wrapper(ptr %392, ptr %386)
  %394 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %395 = load ptr, ptr %394, align 8
  %396 = load ptr, ptr %38, align 8
  %397 = call ptr @llvm.invariant.start.p0(i64 688, ptr %396)
  %398 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %399 = load i32, ptr %398, align 4
  %400 = getelementptr ptr, ptr %396, i32 %399
  %401 = getelementptr ptr, ptr %400, i32 1
  %402 = load ptr, ptr %401, align 8
  %403 = call ptr @typegetter_wrapper(ptr %402, ptr %395)
  %404 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %405 = getelementptr [4 x ptr], ptr %404, i32 0, i32 2
  store ptr %403, ptr %405, align 8
  %406 = getelementptr [4 x ptr], ptr %404, i32 0, i32 1
  store ptr %393, ptr %406, align 8
  %407 = getelementptr [4 x ptr], ptr %404, i32 0, i32 3
  store ptr null, ptr %407, align 8
  %408 = call ptr @llvm.invariant.start.p0(i64 24, ptr %404)
  store ptr @Entry, ptr %404, align 8
  %409 = getelementptr [2 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %409, align 8
  %410 = getelementptr [2 x ptr], ptr %34, i32 0, i32 1
  store ptr %404, ptr %410, align 8
  %411 = call ptr @llvm.invariant.start.p0(i64 4, ptr %34)
  %412 = call ptr @llvm.invariant.start.p0(i64 600, ptr %374)
  %413 = getelementptr ptr, ptr %374, i32 %383
  %414 = getelementptr ptr, ptr %413, i32 16
  %415 = load ptr, ptr %414, align 8
  %416 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  store ptr @i32_typ, ptr %416, align 8
  %417 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 1
  store ptr %369, ptr %417, align 8
  %418 = call ptr @behavior_wrapper(ptr %415, { ptr, ptr, ptr, i32 } %384, ptr %35)
  call void %418({ ptr, ptr, ptr, i32 } %384, { ptr, ptr, ptr, i32 } %384, ptr %34, i32 %6, { ptr, i160 } %372)
  br label %419

419:                                              ; preds = %._crit_edge, %246
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem21, align 4
  br label %421

420:                                              ; preds = %130
  store i32 0, ptr %.reg2mem21, align 4
  br label %421

421:                                              ; preds = %420, %419
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  store i32 %.reload22, ptr %.reg2mem7, align 4
  br label %422

422:                                              ; preds = %421
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  %423 = zext i32 %.reload8 to i64
  %424 = trunc i64 %423 to i32
  switch i32 %424, label %432 [
    i32 0, label %425
  ]

425:                                              ; preds = %422
  %426 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %427 = getelementptr { ptr, i160 }, ptr %122, i32 0, i32 0
  %428 = load ptr, ptr %426, align 8
  store ptr %428, ptr %427, align 8
  %429 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %430 = getelementptr { ptr, i160 }, ptr %122, i32 0, i32 1
  %431 = load i160, ptr %429, align 4
  store i160 %431, ptr %430, align 4
  store i32 1, ptr %.reg2mem17, align 4
  store i1 poison, ptr %.reg2mem19, align 1
  br label %433

432:                                              ; preds = %422
  store i32 0, ptr %.reg2mem17, align 4
  store i1 true, ptr %.reg2mem19, align 1
  br label %433

433:                                              ; preds = %432, %425
  %.reload20 = load i1, ptr %.reg2mem19, align 1
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i1 %.reload20, ptr %.reg2mem5, align 1
  store i32 %.reload18, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  store i32 %.reload4, ptr %.reg2mem13, align 4
  store i1 %.reload6, ptr %.reg2mem15, align 1
  br label %435

434:                                              ; preds = %8
  store i32 1, ptr %.reg2mem13, align 4
  store i1 poison, ptr %.reg2mem15, align 1
  br label %435

435:                                              ; preds = %434, %433
  %.reload16 = load i1, ptr %.reg2mem15, align 1
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i1 %.reload16, ptr %.reg2mem1, align 1
  store i32 %.reload14, ptr %.reg2mem, align 4
  br label %436

436:                                              ; preds = %435
  %.reload = load i32, ptr %.reg2mem, align 4
  %437 = zext i32 %.reload to i64
  %438 = trunc i64 %437 to i32
  switch i32 %438, label %440 [
    i32 0, label %439
  ]

439:                                              ; preds = %436
  %.reload2 = load i1, ptr %.reg2mem1, align 1
  store i1 %.reload2, ptr %.reg2mem11, align 1
  br label %441

440:                                              ; preds = %436
  store i1 false, ptr %.reg2mem11, align 1
  br label %441

441:                                              ; preds = %440, %439
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  ret i1 %.reload12
}

define void @HashMap_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [1 x ptr], align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca { ptr, i160 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca [0 x ptr], align 8
  %14 = alloca {}, align 8
  %15 = alloca [0 x ptr], align 8
  %16 = alloca {}, align 8
  %17 = alloca { ptr, i160 }, align 8
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca i160, align 8
  %21 = alloca ptr, align 8
  %22 = alloca i160, align 8
  %23 = alloca ptr, align 8
  %24 = alloca ptr, align 8
  %25 = alloca [3 x ptr], align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = alloca [3 x ptr], align 8
  %32 = alloca { ptr, ptr, ptr }, align 8
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = alloca i160, align 8
  %36 = alloca ptr, align 8
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %38 = alloca [2 x ptr], align 8
  %39 = alloca { ptr, ptr }, align 8
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = alloca [0 x ptr], align 8
  %42 = alloca {}, align 8
  %43 = alloca [0 x ptr], align 8
  %44 = alloca {}, align 8
  %45 = alloca [3 x ptr], align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = alloca i160, align 8
  %48 = alloca ptr, align 8
  %49 = alloca i160, align 8
  %50 = alloca ptr, align 8
  %51 = alloca [3 x ptr], align 8
  %52 = alloca { ptr, ptr, ptr }, align 8
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = alloca i160, align 8
  %56 = alloca ptr, align 8
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = alloca [1 x ptr], align 8
  %59 = alloca { ptr }, align 8
  %60 = alloca { ptr, i160 }, align 8
  %61 = alloca [0 x ptr], align 8
  %62 = alloca {}, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem14 = alloca i32, align 4
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca i32, align 4
  %.reg2mem20 = alloca i32, align 4
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem32 = alloca i32, align 4
  %.reg2mem34 = alloca i32, align 4
  %.reg2mem36 = alloca i32, align 4
  %.reg2mem38 = alloca i32, align 4
  %.reg2mem40 = alloca i32, align 4
  %.reg2mem42 = alloca i32, align 4
  %.reg2mem44 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  call void @set_offset(ptr %65, ptr @HashMap)
  %78 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %78, align 8
  %79 = alloca i160, align 8
  %80 = alloca ptr, align 8
  %81 = getelementptr { ptr, i160 }, ptr %78, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  store ptr %82, ptr %80, align 8
  %83 = getelementptr { ptr, i160 }, ptr %78, i32 0, i32 1
  %84 = load i160, ptr %83, align 4
  store i160 %84, ptr %79, align 4
  %85 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %85, align 8
  %86 = alloca i160, align 8
  %87 = alloca ptr, align 8
  %88 = getelementptr { ptr, i160 }, ptr %85, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  store ptr %89, ptr %87, align 8
  %90 = getelementptr { ptr, i160 }, ptr %85, i32 0, i32 1
  %91 = load i160, ptr %90, align 4
  store i160 %91, ptr %86, align 4
  %92 = alloca i160, align 8
  %93 = alloca ptr, align 8
  %94 = load ptr, ptr %80, align 8
  store ptr %94, ptr %93, align 8
  %95 = load i160, ptr %79, align 4
  store i160 %95, ptr %92, align 4
  %96 = load ptr, ptr %93, align 8
  %97 = insertvalue { ptr, i160 } undef, ptr %96, 0
  %98 = load i160, ptr %92, align 4
  %99 = insertvalue { ptr, i160 } %97, i160 %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %101, 0
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %104, 1
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %105, ptr %107, 2
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %110 = load i32, ptr %109, align 4
  %111 = insertvalue { ptr, ptr, ptr, i32 } %108, i32 %110, 3
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = load ptr, ptr %65, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 688, ptr %114)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = getelementptr ptr, ptr %114, i32 %117
  %119 = load ptr, ptr %118, align 8
  %120 = call ptr @typegetter_wrapper(ptr %119, ptr %113)
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %122 = load ptr, ptr %121, align 8
  %123 = load ptr, ptr %65, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 688, ptr %123)
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = getelementptr ptr, ptr %123, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr @typegetter_wrapper(ptr %129, ptr %122)
  %131 = alloca [1 x ptr], align 8
  %132 = getelementptr [1 x ptr], ptr %131, i32 0, i32 0
  store ptr %120, ptr %132, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 1, ptr %131)
  %134 = call ptr @llvm.invariant.start.p0(i64 688, ptr %101)
  %135 = getelementptr ptr, ptr %101, i32 %110
  %136 = getelementptr ptr, ptr %135, i32 10
  %137 = load ptr, ptr %136, align 8
  %138 = alloca { ptr }, align 8
  %139 = getelementptr { ptr }, ptr %138, i32 0, i32 0
  store ptr %96, ptr %139, align 8
  %140 = call ptr @behavior_wrapper(ptr %137, { ptr, ptr, ptr, i32 } %111, ptr %138)
  %141 = call i32 %140({ ptr, ptr, ptr, i32 } %111, { ptr, ptr, ptr, i32 } %111, ptr %131, { ptr, i160 } %99)
  store i32 %141, ptr %.reg2mem25, align 4
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %143, 0
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %146, 1
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %149, 2
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %152 = load i32, ptr %151, align 4
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %152, 3
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %155 = load ptr, ptr %154, align 8
  %156 = load ptr, ptr %65, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 688, ptr %156)
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %159 = load i32, ptr %158, align 4
  %160 = getelementptr ptr, ptr %156, i32 %159
  %161 = load ptr, ptr %160, align 8
  %162 = call ptr @typegetter_wrapper(ptr %161, ptr %155)
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %164 = load ptr, ptr %163, align 8
  %165 = load ptr, ptr %65, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 688, ptr %165)
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %168 = load i32, ptr %167, align 4
  %169 = getelementptr ptr, ptr %165, i32 %168
  %170 = getelementptr ptr, ptr %169, i32 1
  %171 = load ptr, ptr %170, align 8
  %172 = call ptr @typegetter_wrapper(ptr %171, ptr %164)
  %173 = alloca [1 x ptr], align 8
  %174 = getelementptr [1 x ptr], ptr %173, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %174, align 8
  %175 = call ptr @llvm.invariant.start.p0(i64 1, ptr %173)
  %176 = call ptr @llvm.invariant.start.p0(i64 688, ptr %143)
  %177 = getelementptr ptr, ptr %143, i32 %152
  %178 = getelementptr ptr, ptr %177, i32 12
  %179 = load ptr, ptr %178, align 8
  %180 = alloca { ptr }, align 8
  %181 = getelementptr { ptr }, ptr %180, i32 0, i32 0
  store ptr @i32_typ, ptr %181, align 8
  %182 = call ptr @behavior_wrapper(ptr %179, { ptr, ptr, ptr, i32 } %153, ptr %180)
  %.reload31 = load i32, ptr %.reg2mem25, align 4
  %183 = call i32 %182({ ptr, ptr, ptr, i32 } %153, { ptr, ptr, ptr, i32 } %153, ptr %173, i32 %.reload31)
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %185 = load ptr, ptr %184, align 8
  %186 = load ptr, ptr %65, align 8
  %187 = call ptr @llvm.invariant.start.p0(i64 688, ptr %186)
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %189 = load i32, ptr %188, align 4
  %190 = getelementptr ptr, ptr %186, i32 %189
  %191 = getelementptr ptr, ptr %190, i32 3
  %192 = load ptr, ptr %191, align 8
  %193 = getelementptr { ptr, ptr }, ptr %192, i32 0, i32 0
  %194 = load ptr, ptr %193, align 8
  %195 = call { ptr, ptr, ptr, i32 } %194(ptr %185) #16
  %196 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %195, ptr %196, align 8
  %197 = call ptr @llvm.invariant.start.p0(i64 16, ptr %196)
  call void @assume_offset(ptr %196, ptr @Array)
  %198 = alloca i160, align 8
  %199 = alloca ptr, align 8
  %200 = load ptr, ptr %80, align 8
  store ptr %200, ptr %199, align 8
  %201 = load i160, ptr %79, align 4
  store i160 %201, ptr %198, align 4
  %202 = load ptr, ptr %199, align 8
  %203 = insertvalue { ptr, i160 } undef, ptr %202, 0
  %204 = load i160, ptr %198, align 4
  %205 = insertvalue { ptr, i160 } %203, i160 %204, 1
  %206 = alloca i160, align 8
  %207 = alloca ptr, align 8
  %208 = load ptr, ptr %87, align 8
  store ptr %208, ptr %207, align 8
  %209 = load i160, ptr %86, align 4
  store i160 %209, ptr %206, align 4
  %210 = load ptr, ptr %207, align 8
  %211 = insertvalue { ptr, i160 } undef, ptr %210, 0
  %212 = load i160, ptr %206, align 4
  %213 = insertvalue { ptr, i160 } %211, i160 %212, 1
  %214 = alloca { ptr, ptr, ptr, i32 }, align 8
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %196, i32 0, i32 0
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 0
  %217 = load ptr, ptr %215, align 8
  store ptr %217, ptr %216, align 8
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %196, i32 0, i32 1
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 1
  %220 = load ptr, ptr %218, align 8
  store ptr %220, ptr %219, align 8
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %196, i32 0, i32 2
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 2
  %223 = load ptr, ptr %221, align 8
  store ptr %223, ptr %222, align 8
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %196, i32 0, i32 3
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 3
  %226 = load i32, ptr %224, align 4
  store i32 %226, ptr %225, align 4
  call void @set_offset(ptr %214, ptr @Array)
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 0
  %228 = load ptr, ptr %227, align 8
  %229 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %228, 0
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 1
  %231 = load ptr, ptr %230, align 8
  %232 = insertvalue { ptr, ptr, ptr, i32 } %229, ptr %231, 1
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 2
  %234 = load ptr, ptr %233, align 8
  %235 = insertvalue { ptr, ptr, ptr, i32 } %232, ptr %234, 2
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 3
  %237 = load i32, ptr %236, align 4
  %238 = insertvalue { ptr, ptr, ptr, i32 } %235, i32 %237, 3
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %240 = load ptr, ptr %239, align 8
  %241 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %240, 0
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %243 = load ptr, ptr %242, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } %241, ptr %243, 1
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %246 = load ptr, ptr %245, align 8
  %247 = insertvalue { ptr, ptr, ptr, i32 } %244, ptr %246, 2
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %249 = load i32, ptr %248, align 4
  %250 = insertvalue { ptr, ptr, ptr, i32 } %247, i32 %249, 3
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %252 = load ptr, ptr %251, align 8
  %253 = load ptr, ptr %65, align 8
  %254 = call ptr @llvm.invariant.start.p0(i64 688, ptr %253)
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %256 = load i32, ptr %255, align 4
  %257 = getelementptr ptr, ptr %253, i32 %256
  %258 = load ptr, ptr %257, align 8
  %259 = call ptr @typegetter_wrapper(ptr %258, ptr %252)
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %261 = load ptr, ptr %260, align 8
  %262 = load ptr, ptr %65, align 8
  %263 = call ptr @llvm.invariant.start.p0(i64 688, ptr %262)
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %265 = load i32, ptr %264, align 4
  %266 = getelementptr ptr, ptr %262, i32 %265
  %267 = getelementptr ptr, ptr %266, i32 1
  %268 = load ptr, ptr %267, align 8
  %269 = call ptr @typegetter_wrapper(ptr %268, ptr %261)
  %270 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %271 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %272 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %273 = getelementptr [4 x ptr], ptr %272, i32 0, i32 2
  store ptr %269, ptr %273, align 8
  %274 = getelementptr [4 x ptr], ptr %272, i32 0, i32 1
  store ptr %259, ptr %274, align 8
  %275 = getelementptr [4 x ptr], ptr %272, i32 0, i32 3
  store ptr null, ptr %275, align 8
  %276 = call ptr @llvm.invariant.start.p0(i64 24, ptr %272)
  store ptr @Entry, ptr %272, align 8
  %277 = getelementptr [4 x ptr], ptr %271, i32 0, i32 2
  store ptr %272, ptr %277, align 8
  %278 = getelementptr [4 x ptr], ptr %271, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %278, align 8
  %279 = getelementptr [4 x ptr], ptr %271, i32 0, i32 3
  store ptr null, ptr %279, align 8
  %280 = call ptr @llvm.invariant.start.p0(i64 24, ptr %271)
  store ptr @union_typ, ptr %271, align 8
  %281 = getelementptr [3 x ptr], ptr %270, i32 0, i32 1
  store ptr %271, ptr %281, align 8
  %282 = getelementptr [3 x ptr], ptr %270, i32 0, i32 2
  store ptr null, ptr %282, align 8
  %283 = call ptr @llvm.invariant.start.p0(i64 16, ptr %270)
  store ptr @Array, ptr %270, align 8
  %284 = alloca [5 x ptr], align 8
  %285 = getelementptr [5 x ptr], ptr %284, i32 0, i32 0
  store ptr %259, ptr %285, align 8
  %286 = getelementptr [5 x ptr], ptr %284, i32 0, i32 1
  store ptr %269, ptr %286, align 8
  %287 = getelementptr [5 x ptr], ptr %284, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %287, align 8
  %288 = getelementptr [5 x ptr], ptr %284, i32 0, i32 3
  store ptr @_parameterization_Ptri32, ptr %288, align 8
  %289 = getelementptr [5 x ptr], ptr %284, i32 0, i32 4
  store ptr %270, ptr %289, align 8
  %290 = call ptr @llvm.invariant.start.p0(i64 25, ptr %284)
  %291 = call ptr @llvm.invariant.start.p0(i64 688, ptr %240)
  %292 = getelementptr ptr, ptr %240, i32 %249
  %293 = getelementptr ptr, ptr %292, i32 17
  %294 = load ptr, ptr %293, align 8
  %295 = alloca { ptr, ptr, ptr, ptr, ptr }, align 8
  %296 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %295, i32 0, i32 0
  store ptr %202, ptr %296, align 8
  %297 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %295, i32 0, i32 1
  store ptr %210, ptr %297, align 8
  %298 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %295, i32 0, i32 2
  store ptr @i32_typ, ptr %298, align 8
  %299 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %295, i32 0, i32 3
  store ptr @i32_typ, ptr %299, align 8
  %300 = getelementptr { ptr, ptr, ptr, ptr, ptr }, ptr %295, i32 0, i32 4
  store ptr %228, ptr %300, align 8
  %301 = call ptr @behavior_wrapper(ptr %294, { ptr, ptr, ptr, i32 } %250, ptr %295)
  %.reload30 = load i32, ptr %.reg2mem25, align 4
  %302 = call i1 %301({ ptr, ptr, ptr, i32 } %250, { ptr, ptr, ptr, i32 } %250, ptr %284, { ptr, i160 } %205, { ptr, i160 } %213, i32 %.reload30, i32 %183, { ptr, ptr, ptr, i32 } %238)
  br i1 %302, label %303, label %304

303:                                              ; preds = %5
  br label %1084

304:                                              ; preds = %5
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %306 = load ptr, ptr %305, align 8
  %307 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %306, 0
  %308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %309 = load ptr, ptr %308, align 8
  %310 = insertvalue { ptr, ptr, ptr, i32 } %307, ptr %309, 1
  %311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %312 = load ptr, ptr %311, align 8
  %313 = insertvalue { ptr, ptr, ptr, i32 } %310, ptr %312, 2
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %315 = load i32, ptr %314, align 4
  %316 = insertvalue { ptr, ptr, ptr, i32 } %313, i32 %315, 3
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %318 = load ptr, ptr %317, align 8
  %319 = load ptr, ptr %65, align 8
  %320 = call ptr @llvm.invariant.start.p0(i64 688, ptr %319)
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %322 = load i32, ptr %321, align 4
  %323 = getelementptr ptr, ptr %319, i32 %322
  %324 = load ptr, ptr %323, align 8
  %325 = call ptr @typegetter_wrapper(ptr %324, ptr %318)
  %326 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %327 = load ptr, ptr %326, align 8
  %328 = load ptr, ptr %65, align 8
  %329 = call ptr @llvm.invariant.start.p0(i64 688, ptr %328)
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %331 = load i32, ptr %330, align 4
  %332 = getelementptr ptr, ptr %328, i32 %331
  %333 = getelementptr ptr, ptr %332, i32 1
  %334 = load ptr, ptr %333, align 8
  %335 = call ptr @typegetter_wrapper(ptr %334, ptr %327)
  %336 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %336, align 8
  %337 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %338 = call ptr @llvm.invariant.start.p0(i64 688, ptr %306)
  %339 = getelementptr ptr, ptr %306, i32 %315
  %340 = getelementptr ptr, ptr %339, i32 13
  %341 = load ptr, ptr %340, align 8
  %342 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %342, align 8
  %343 = call ptr @behavior_wrapper(ptr %341, { ptr, ptr, ptr, i32 } %316, ptr %7)
  %.reload29 = load i32, ptr %.reg2mem25, align 4
  %344 = call i32 %343({ ptr, ptr, ptr, i32 } %316, { ptr, ptr, ptr, i32 } %316, ptr %6, i32 %.reload29)
  store i32 %344, ptr %.reg2mem22, align 4
  %345 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %346 = load ptr, ptr %345, align 8
  %347 = load ptr, ptr %65, align 8
  %348 = call ptr @llvm.invariant.start.p0(i64 688, ptr %347)
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %350 = load i32, ptr %349, align 4
  %351 = getelementptr ptr, ptr %347, i32 %350
  %352 = getelementptr ptr, ptr %351, i32 4
  %353 = load ptr, ptr %352, align 8
  %354 = getelementptr { ptr, ptr }, ptr %353, i32 0, i32 0
  %355 = load ptr, ptr %354, align 8
  %356 = call { ptr, ptr, ptr, i32 } %355(ptr %346) #16
  store { ptr, ptr, ptr, i32 } %356, ptr %8, align 8
  %357 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  call void @assume_offset(ptr %8, ptr @Array)
  %358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %359 = load ptr, ptr %358, align 8
  %360 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %359, 0
  %361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %362 = load ptr, ptr %361, align 8
  %363 = insertvalue { ptr, ptr, ptr, i32 } %360, ptr %362, 1
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %365 = load ptr, ptr %364, align 8
  %366 = insertvalue { ptr, ptr, ptr, i32 } %363, ptr %365, 2
  %367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %368 = load i32, ptr %367, align 4
  %369 = insertvalue { ptr, ptr, ptr, i32 } %366, i32 %368, 3
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %371 = load ptr, ptr %370, align 8
  %372 = load ptr, ptr %65, align 8
  %373 = call ptr @llvm.invariant.start.p0(i64 688, ptr %372)
  %374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %375 = load i32, ptr %374, align 4
  %376 = getelementptr ptr, ptr %372, i32 %375
  %377 = load ptr, ptr %376, align 8
  %378 = call ptr @typegetter_wrapper(ptr %377, ptr %371)
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %380 = load ptr, ptr %379, align 8
  %381 = load ptr, ptr %65, align 8
  %382 = call ptr @llvm.invariant.start.p0(i64 688, ptr %381)
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %384 = load i32, ptr %383, align 4
  %385 = getelementptr ptr, ptr %381, i32 %384
  %386 = getelementptr ptr, ptr %385, i32 1
  %387 = load ptr, ptr %386, align 8
  %388 = call ptr @typegetter_wrapper(ptr %387, ptr %380)
  %389 = getelementptr [1 x ptr], ptr %9, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %389, align 8
  %390 = call ptr @llvm.invariant.start.p0(i64 1, ptr %9)
  %391 = call ptr @llvm.invariant.start.p0(i64 600, ptr %359)
  %392 = getelementptr ptr, ptr %359, i32 %368
  %393 = getelementptr ptr, ptr %392, i32 15
  %394 = load ptr, ptr %393, align 8
  %395 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  store ptr @i32_typ, ptr %395, align 8
  %396 = call ptr @behavior_wrapper(ptr %394, { ptr, ptr, ptr, i32 } %369, ptr %10)
  %.reload24 = load i32, ptr %.reg2mem22, align 4
  %397 = call { ptr, i160 } %396({ ptr, ptr, ptr, i32 } %369, { ptr, ptr, ptr, i32 } %369, ptr %9, i32 %.reload24)
  store { ptr, i160 } %397, ptr %11, align 8
  %398 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 0
  %399 = load ptr, ptr %398, align 8
  %400 = ptrtoint ptr %399 to i64
  %401 = icmp eq i64 %400, ptrtoint (ptr @nil_typ to i64)
  %402 = icmp eq i64 %400, 0
  %403 = or i1 %401, %402
  %404 = icmp eq i1 %403, false
  br i1 %404, label %405, label %722

405:                                              ; preds = %304
  %406 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 0
  %407 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 0
  %408 = load ptr, ptr %406, align 8
  store ptr %408, ptr %407, align 8
  %409 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 1
  %410 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 1
  %411 = load i160, ptr %409, align 4
  store i160 %411, ptr %410, align 4
  call void @set_offset(ptr %12, ptr @Entry)
  %412 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %413 = load ptr, ptr %412, align 8
  %414 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %413, 0
  %415 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %416 = load ptr, ptr %415, align 8
  %417 = insertvalue { ptr, ptr, ptr, i32 } %414, ptr %416, 1
  %418 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %419 = load ptr, ptr %418, align 8
  %420 = insertvalue { ptr, ptr, ptr, i32 } %417, ptr %419, 2
  %421 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %422 = load i32, ptr %421, align 4
  %423 = insertvalue { ptr, ptr, ptr, i32 } %420, i32 %422, 3
  %424 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %425 = load ptr, ptr %424, align 8
  %426 = load ptr, ptr %65, align 8
  %427 = call ptr @llvm.invariant.start.p0(i64 688, ptr %426)
  %428 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %429 = load i32, ptr %428, align 4
  %430 = getelementptr ptr, ptr %426, i32 %429
  %431 = load ptr, ptr %430, align 8
  %432 = call ptr @typegetter_wrapper(ptr %431, ptr %425)
  %433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %434 = load ptr, ptr %433, align 8
  %435 = load ptr, ptr %65, align 8
  %436 = call ptr @llvm.invariant.start.p0(i64 688, ptr %435)
  %437 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %438 = load i32, ptr %437, align 4
  %439 = getelementptr ptr, ptr %435, i32 %438
  %440 = getelementptr ptr, ptr %439, i32 1
  %441 = load ptr, ptr %440, align 8
  %442 = call ptr @typegetter_wrapper(ptr %441, ptr %434)
  %443 = call ptr @llvm.invariant.start.p0(i64 0, ptr %13)
  %444 = call ptr @llvm.invariant.start.p0(i64 120, ptr %413)
  %445 = getelementptr ptr, ptr %413, i32 %422
  %446 = getelementptr ptr, ptr %445, i32 8
  %447 = load ptr, ptr %446, align 8
  %448 = call ptr @behavior_wrapper(ptr %447, { ptr, ptr, ptr, i32 } %423, ptr %14)
  %449 = call i32 %448({ ptr, ptr, ptr, i32 } %423, { ptr, ptr, ptr, i32 } %423, ptr %13)
  %.reload28 = load i32, ptr %.reg2mem25, align 4
  %450 = icmp eq i32 %449, %.reload28
  br i1 %450, label %451, label %708

451:                                              ; preds = %405
  %452 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %453 = load ptr, ptr %452, align 8
  %454 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %453, 0
  %455 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %456 = load ptr, ptr %455, align 8
  %457 = insertvalue { ptr, ptr, ptr, i32 } %454, ptr %456, 1
  %458 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %459 = load ptr, ptr %458, align 8
  %460 = insertvalue { ptr, ptr, ptr, i32 } %457, ptr %459, 2
  %461 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %462 = load i32, ptr %461, align 4
  %463 = insertvalue { ptr, ptr, ptr, i32 } %460, i32 %462, 3
  %464 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %465 = load ptr, ptr %464, align 8
  %466 = load ptr, ptr %65, align 8
  %467 = call ptr @llvm.invariant.start.p0(i64 688, ptr %466)
  %468 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %469 = load i32, ptr %468, align 4
  %470 = getelementptr ptr, ptr %466, i32 %469
  %471 = load ptr, ptr %470, align 8
  %472 = call ptr @typegetter_wrapper(ptr %471, ptr %465)
  %473 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %474 = load ptr, ptr %473, align 8
  %475 = load ptr, ptr %65, align 8
  %476 = call ptr @llvm.invariant.start.p0(i64 688, ptr %475)
  %477 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %478 = load i32, ptr %477, align 4
  %479 = getelementptr ptr, ptr %475, i32 %478
  %480 = getelementptr ptr, ptr %479, i32 1
  %481 = load ptr, ptr %480, align 8
  %482 = call ptr @typegetter_wrapper(ptr %481, ptr %474)
  %483 = call ptr @llvm.invariant.start.p0(i64 0, ptr %15)
  %484 = call ptr @llvm.invariant.start.p0(i64 120, ptr %453)
  %485 = getelementptr ptr, ptr %453, i32 %462
  %486 = getelementptr ptr, ptr %485, i32 6
  %487 = load ptr, ptr %486, align 8
  %488 = call ptr @behavior_wrapper(ptr %487, { ptr, ptr, ptr, i32 } %463, ptr %16)
  %489 = call { ptr, i160 } %488({ ptr, ptr, ptr, i32 } %463, { ptr, ptr, ptr, i32 } %463, ptr %15)
  store { ptr, i160 } %489, ptr %17, align 8
  %490 = getelementptr { ptr, i160 }, ptr %17, i32 0, i32 0
  %491 = load ptr, ptr %490, align 8
  store ptr %491, ptr %19, align 8
  %492 = getelementptr { ptr, i160 }, ptr %17, i32 0, i32 1
  %493 = load i160, ptr %492, align 4
  store i160 %493, ptr %18, align 4
  %494 = load ptr, ptr %19, align 8
  store ptr %494, ptr %21, align 8
  %495 = load i160, ptr %18, align 4
  store i160 %495, ptr %20, align 4
  %496 = load ptr, ptr %21, align 8
  %497 = insertvalue { ptr, i160 } undef, ptr %496, 0
  %498 = load i160, ptr %20, align 4
  %499 = insertvalue { ptr, i160 } %497, i160 %498, 1
  %500 = load ptr, ptr %80, align 8
  store ptr %500, ptr %23, align 8
  %501 = load i160, ptr %79, align 4
  store i160 %501, ptr %22, align 4
  %502 = load ptr, ptr %23, align 8
  %503 = insertvalue { ptr, i160 } undef, ptr %502, 0
  %504 = load i160, ptr %22, align 4
  %505 = insertvalue { ptr, i160 } %503, i160 %504, 1
  %506 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %507 = load ptr, ptr %506, align 8
  %508 = load ptr, ptr %65, align 8
  %509 = call ptr @llvm.invariant.start.p0(i64 688, ptr %508)
  %510 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %511 = load i32, ptr %510, align 4
  %512 = getelementptr ptr, ptr %508, i32 %511
  %513 = getelementptr ptr, ptr %512, i32 7
  %514 = load ptr, ptr %513, align 8
  %515 = getelementptr { ptr, ptr }, ptr %514, i32 0, i32 0
  %516 = load ptr, ptr %515, align 8
  %517 = call { ptr } %516(ptr %507) #16
  store { ptr } %517, ptr %24, align 8
  %518 = load ptr, ptr %24, align 8
  %519 = call i1 %518({ ptr, i160 } %499, { ptr, i160 } %505)
  %520 = zext i1 %519 to i32
  store i32 %520, ptr %.reg2mem20, align 4
  br i1 %519, label %521, label %._crit_edge

._crit_edge:                                      ; preds = %451
  br label %707

521:                                              ; preds = %451
  %522 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %523 = load ptr, ptr %522, align 8
  %524 = load ptr, ptr %65, align 8
  %525 = call ptr @llvm.invariant.start.p0(i64 688, ptr %524)
  %526 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %527 = load i32, ptr %526, align 4
  %528 = getelementptr ptr, ptr %524, i32 %527
  %529 = load ptr, ptr %528, align 8
  %530 = call ptr @typegetter_wrapper(ptr %529, ptr %523)
  %531 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %532 = load ptr, ptr %531, align 8
  %533 = load ptr, ptr %65, align 8
  %534 = call ptr @llvm.invariant.start.p0(i64 688, ptr %533)
  %535 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %536 = load i32, ptr %535, align 4
  %537 = getelementptr ptr, ptr %533, i32 %536
  %538 = getelementptr ptr, ptr %537, i32 1
  %539 = load ptr, ptr %538, align 8
  %540 = call ptr @typegetter_wrapper(ptr %539, ptr %532)
  store ptr @Entry, ptr %25, align 8
  %541 = getelementptr ptr, ptr %25, i32 1
  store ptr %530, ptr %541, align 8
  %542 = getelementptr ptr, ptr %25, i32 2
  store ptr %540, ptr %542, align 8
  %543 = load ptr, ptr %25, align 8
  %544 = getelementptr ptr, ptr %543, i32 6
  %545 = load ptr, ptr %544, align 8
  %546 = call { i64, i64 } @size_wrapper(ptr %545, ptr %25)
  %547 = extractvalue { i64, i64 } %546, 0
  %548 = call ptr @bump_malloc(i64 %547)
  store ptr %530, ptr %548, align 8
  %549 = getelementptr ptr, ptr %548, i32 1
  store ptr %540, ptr %549, align 8
  %550 = call ptr @llvm.invariant.start.p0(i64 16, ptr %548)
  %551 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %552 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @Entry, ptr %26, align 8
  store ptr %548, ptr %551, align 8
  store i32 9, ptr %552, align 4
  %553 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  %554 = load ptr, ptr %80, align 8
  store ptr %554, ptr %28, align 8
  %555 = load i160, ptr %79, align 4
  store i160 %555, ptr %27, align 4
  %556 = load ptr, ptr %28, align 8
  %557 = insertvalue { ptr, i160 } undef, ptr %556, 0
  %558 = load i160, ptr %27, align 4
  %559 = insertvalue { ptr, i160 } %557, i160 %558, 1
  %560 = load ptr, ptr %87, align 8
  store ptr %560, ptr %30, align 8
  %561 = load i160, ptr %86, align 4
  store i160 %561, ptr %29, align 4
  %562 = load ptr, ptr %30, align 8
  %563 = insertvalue { ptr, i160 } undef, ptr %562, 0
  %564 = load i160, ptr %29, align 4
  %565 = insertvalue { ptr, i160 } %563, i160 %564, 1
  %566 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %567 = load ptr, ptr %566, align 8
  %568 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %567, 0
  %569 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %570 = load ptr, ptr %569, align 8
  %571 = insertvalue { ptr, ptr, ptr, i32 } %568, ptr %570, 1
  %572 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %573 = load ptr, ptr %572, align 8
  %574 = insertvalue { ptr, ptr, ptr, i32 } %571, ptr %573, 2
  %575 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %576 = load i32, ptr %575, align 4
  %577 = insertvalue { ptr, ptr, ptr, i32 } %574, i32 %576, 3
  %578 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %579 = load ptr, ptr %578, align 8
  %580 = load ptr, ptr %65, align 8
  %581 = call ptr @llvm.invariant.start.p0(i64 688, ptr %580)
  %582 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %583 = load i32, ptr %582, align 4
  %584 = getelementptr ptr, ptr %580, i32 %583
  %585 = load ptr, ptr %584, align 8
  %586 = call ptr @typegetter_wrapper(ptr %585, ptr %579)
  %587 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %588 = load ptr, ptr %587, align 8
  %589 = load ptr, ptr %65, align 8
  %590 = call ptr @llvm.invariant.start.p0(i64 688, ptr %589)
  %591 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %592 = load i32, ptr %591, align 4
  %593 = getelementptr ptr, ptr %589, i32 %592
  %594 = getelementptr ptr, ptr %593, i32 1
  %595 = load ptr, ptr %594, align 8
  %596 = call ptr @typegetter_wrapper(ptr %595, ptr %588)
  %597 = getelementptr [3 x ptr], ptr %31, i32 0, i32 0
  store ptr %586, ptr %597, align 8
  %598 = getelementptr [3 x ptr], ptr %31, i32 0, i32 1
  store ptr %596, ptr %598, align 8
  %599 = getelementptr [3 x ptr], ptr %31, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %599, align 8
  %600 = call ptr @llvm.invariant.start.p0(i64 9, ptr %31)
  %601 = call ptr @llvm.invariant.start.p0(i64 120, ptr %567)
  %602 = getelementptr ptr, ptr %567, i32 %576
  %603 = getelementptr ptr, ptr %602, i32 5
  %604 = load ptr, ptr %603, align 8
  %605 = getelementptr { ptr, ptr, ptr }, ptr %32, i32 0, i32 0
  store ptr %556, ptr %605, align 8
  %606 = getelementptr { ptr, ptr, ptr }, ptr %32, i32 0, i32 1
  store ptr %562, ptr %606, align 8
  %607 = getelementptr { ptr, ptr, ptr }, ptr %32, i32 0, i32 2
  store ptr @i32_typ, ptr %607, align 8
  %608 = call ptr @behavior_wrapper(ptr %604, { ptr, ptr, ptr, i32 } %577, ptr %32)
  %.reload27 = load i32, ptr %.reg2mem25, align 4
  call void %608({ ptr, ptr, ptr, i32 } %577, { ptr, ptr, ptr, i32 } %577, ptr %31, { ptr, i160 } %559, { ptr, i160 } %565, i32 %.reload27)
  %609 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %610 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %611 = load ptr, ptr %609, align 8
  store ptr %611, ptr %610, align 8
  %612 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %613 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %614 = load ptr, ptr %612, align 8
  store ptr %614, ptr %613, align 8
  %615 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %616 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %617 = load ptr, ptr %615, align 8
  store ptr %617, ptr %616, align 8
  %618 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %619 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %620 = load i32, ptr %618, align 4
  store i32 %620, ptr %619, align 4
  call void @set_offset(ptr %33, ptr @Entry)
  %621 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %622 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %623 = load ptr, ptr %621, align 8
  store ptr %623, ptr %622, align 8
  %624 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %625 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %626 = load ptr, ptr %624, align 8
  store ptr %626, ptr %625, align 8
  %627 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %628 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %629 = load ptr, ptr %627, align 8
  store ptr %629, ptr %628, align 8
  %630 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %631 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %632 = load i32, ptr %630, align 4
  store i32 %632, ptr %631, align 4
  %633 = call ptr @llvm.invariant.start.p0(i64 16, ptr %34)
  %634 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %635 = load ptr, ptr %634, align 8
  store ptr %635, ptr %36, align 8
  %636 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %637 = load ptr, ptr %636, align 8
  store ptr %637, ptr %35, align 8
  %638 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %639 = getelementptr i8, ptr %35, i32 8
  %640 = load ptr, ptr %638, align 8
  store ptr %640, ptr %639, align 8
  %641 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %642 = getelementptr i8, ptr %35, i32 16
  %643 = load i32, ptr %641, align 4
  store i32 %643, ptr %642, align 4
  %644 = load ptr, ptr %36, align 8
  %645 = insertvalue { ptr, i160 } undef, ptr %644, 0
  %646 = load i160, ptr %35, align 4
  %647 = insertvalue { ptr, i160 } %645, i160 %646, 1
  %648 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %649 = load ptr, ptr %648, align 8
  %650 = load ptr, ptr %65, align 8
  %651 = call ptr @llvm.invariant.start.p0(i64 688, ptr %650)
  %652 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %653 = load i32, ptr %652, align 4
  %654 = getelementptr ptr, ptr %650, i32 %653
  %655 = getelementptr ptr, ptr %654, i32 4
  %656 = load ptr, ptr %655, align 8
  %657 = getelementptr { ptr, ptr }, ptr %656, i32 0, i32 0
  %658 = load ptr, ptr %657, align 8
  %659 = call { ptr, ptr, ptr, i32 } %658(ptr %649) #16
  store { ptr, ptr, ptr, i32 } %659, ptr %37, align 8
  %660 = call ptr @llvm.invariant.start.p0(i64 16, ptr %37)
  call void @assume_offset(ptr %37, ptr @Array)
  %661 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %662 = load ptr, ptr %661, align 8
  %663 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %662, 0
  %664 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %665 = load ptr, ptr %664, align 8
  %666 = insertvalue { ptr, ptr, ptr, i32 } %663, ptr %665, 1
  %667 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %668 = load ptr, ptr %667, align 8
  %669 = insertvalue { ptr, ptr, ptr, i32 } %666, ptr %668, 2
  %670 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %671 = load i32, ptr %670, align 4
  %672 = insertvalue { ptr, ptr, ptr, i32 } %669, i32 %671, 3
  %673 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %674 = load ptr, ptr %673, align 8
  %675 = load ptr, ptr %65, align 8
  %676 = call ptr @llvm.invariant.start.p0(i64 688, ptr %675)
  %677 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %678 = load i32, ptr %677, align 4
  %679 = getelementptr ptr, ptr %675, i32 %678
  %680 = load ptr, ptr %679, align 8
  %681 = call ptr @typegetter_wrapper(ptr %680, ptr %674)
  %682 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %683 = load ptr, ptr %682, align 8
  %684 = load ptr, ptr %65, align 8
  %685 = call ptr @llvm.invariant.start.p0(i64 688, ptr %684)
  %686 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %687 = load i32, ptr %686, align 4
  %688 = getelementptr ptr, ptr %684, i32 %687
  %689 = getelementptr ptr, ptr %688, i32 1
  %690 = load ptr, ptr %689, align 8
  %691 = call ptr @typegetter_wrapper(ptr %690, ptr %683)
  %692 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %693 = getelementptr [4 x ptr], ptr %692, i32 0, i32 2
  store ptr %691, ptr %693, align 8
  %694 = getelementptr [4 x ptr], ptr %692, i32 0, i32 1
  store ptr %681, ptr %694, align 8
  %695 = getelementptr [4 x ptr], ptr %692, i32 0, i32 3
  store ptr null, ptr %695, align 8
  %696 = call ptr @llvm.invariant.start.p0(i64 24, ptr %692)
  store ptr @Entry, ptr %692, align 8
  %697 = getelementptr [2 x ptr], ptr %38, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %697, align 8
  %698 = getelementptr [2 x ptr], ptr %38, i32 0, i32 1
  store ptr %692, ptr %698, align 8
  %699 = call ptr @llvm.invariant.start.p0(i64 4, ptr %38)
  %700 = call ptr @llvm.invariant.start.p0(i64 600, ptr %662)
  %701 = getelementptr ptr, ptr %662, i32 %671
  %702 = getelementptr ptr, ptr %701, i32 16
  %703 = load ptr, ptr %702, align 8
  %704 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 0
  store ptr @i32_typ, ptr %704, align 8
  %705 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  store ptr %644, ptr %705, align 8
  %706 = call ptr @behavior_wrapper(ptr %703, { ptr, ptr, ptr, i32 } %672, ptr %39)
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  call void %706({ ptr, ptr, ptr, i32 } %672, { ptr, ptr, ptr, i32 } %672, ptr %38, i32 %.reload23, { ptr, i160 } %647)
  br label %707

707:                                              ; preds = %._crit_edge, %521
  %.reload21 = load i32, ptr %.reg2mem20, align 4
  store i32 %.reload21, ptr %.reg2mem44, align 4
  br label %709

708:                                              ; preds = %405
  store i32 0, ptr %.reg2mem44, align 4
  br label %709

709:                                              ; preds = %708, %707
  %.reload45 = load i32, ptr %.reg2mem44, align 4
  store i32 %.reload45, ptr %.reg2mem18, align 4
  br label %710

710:                                              ; preds = %709
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  %711 = zext i32 %.reload19 to i64
  %712 = trunc i64 %711 to i32
  switch i32 %712, label %720 [
    i32 0, label %713
  ]

713:                                              ; preds = %710
  %714 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 0
  %715 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 0
  %716 = load ptr, ptr %714, align 8
  store ptr %716, ptr %715, align 8
  %717 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 1
  %718 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 1
  %719 = load i160, ptr %717, align 4
  store i160 %719, ptr %718, align 4
  store i32 1, ptr %.reg2mem42, align 4
  br label %721

720:                                              ; preds = %710
  store i32 0, ptr %.reg2mem42, align 4
  br label %721

721:                                              ; preds = %720, %713
  %.reload43 = load i32, ptr %.reg2mem42, align 4
  store i32 %.reload43, ptr %.reg2mem16, align 4
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  store i32 %.reload17, ptr %.reg2mem40, align 4
  br label %723

722:                                              ; preds = %304
  store i32 1, ptr %.reg2mem40, align 4
  br label %723

723:                                              ; preds = %722, %721
  %.reload41 = load i32, ptr %.reg2mem40, align 4
  store i32 %.reload41, ptr %.reg2mem14, align 4
  br label %724

724:                                              ; preds = %723
  %.reload15 = load i32, ptr %.reg2mem14, align 4
  %725 = zext i32 %.reload15 to i64
  %726 = trunc i64 %725 to i32
  switch i32 %726, label %728 [
    i32 0, label %727
  ]

727:                                              ; preds = %724
  br label %1083

728:                                              ; preds = %724
  %729 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %730 = load ptr, ptr %729, align 8
  %731 = load ptr, ptr %65, align 8
  %732 = call ptr @llvm.invariant.start.p0(i64 688, ptr %731)
  %733 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %734 = load i32, ptr %733, align 4
  %735 = getelementptr ptr, ptr %731, i32 %734
  %736 = getelementptr ptr, ptr %735, i32 3
  %737 = load ptr, ptr %736, align 8
  %738 = getelementptr { ptr, ptr }, ptr %737, i32 0, i32 0
  %739 = load ptr, ptr %738, align 8
  %740 = call { ptr, ptr, ptr, i32 } %739(ptr %730) #16
  store { ptr, ptr, ptr, i32 } %740, ptr %40, align 8
  %741 = call ptr @llvm.invariant.start.p0(i64 16, ptr %40)
  call void @assume_offset(ptr %40, ptr @Array)
  %742 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %743 = load ptr, ptr %742, align 8
  %744 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %743, 0
  %745 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %746 = load ptr, ptr %745, align 8
  %747 = insertvalue { ptr, ptr, ptr, i32 } %744, ptr %746, 1
  %748 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %749 = load ptr, ptr %748, align 8
  %750 = insertvalue { ptr, ptr, ptr, i32 } %747, ptr %749, 2
  %751 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %752 = load i32, ptr %751, align 4
  %753 = insertvalue { ptr, ptr, ptr, i32 } %750, i32 %752, 3
  %754 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %755 = load ptr, ptr %754, align 8
  %756 = load ptr, ptr %65, align 8
  %757 = call ptr @llvm.invariant.start.p0(i64 688, ptr %756)
  %758 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %759 = load i32, ptr %758, align 4
  %760 = getelementptr ptr, ptr %756, i32 %759
  %761 = load ptr, ptr %760, align 8
  %762 = call ptr @typegetter_wrapper(ptr %761, ptr %755)
  %763 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %764 = load ptr, ptr %763, align 8
  %765 = load ptr, ptr %65, align 8
  %766 = call ptr @llvm.invariant.start.p0(i64 688, ptr %765)
  %767 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %768 = load i32, ptr %767, align 4
  %769 = getelementptr ptr, ptr %765, i32 %768
  %770 = getelementptr ptr, ptr %769, i32 1
  %771 = load ptr, ptr %770, align 8
  %772 = call ptr @typegetter_wrapper(ptr %771, ptr %764)
  %773 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %774 = call ptr @llvm.invariant.start.p0(i64 600, ptr %743)
  %775 = getelementptr ptr, ptr %743, i32 %752
  %776 = getelementptr ptr, ptr %775, i32 8
  %777 = load ptr, ptr %776, align 8
  %778 = call ptr @behavior_wrapper(ptr %777, { ptr, ptr, ptr, i32 } %753, ptr %42)
  %779 = call i32 %778({ ptr, ptr, ptr, i32 } %753, { ptr, ptr, ptr, i32 } %753, ptr %41)
  %780 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %781 = load ptr, ptr %780, align 8
  %782 = load ptr, ptr %65, align 8
  %783 = call ptr @llvm.invariant.start.p0(i64 688, ptr %782)
  %784 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %785 = load i32, ptr %784, align 4
  %786 = getelementptr ptr, ptr %782, i32 %785
  %787 = getelementptr ptr, ptr %786, i32 5
  %788 = load ptr, ptr %787, align 8
  %789 = getelementptr { ptr, ptr }, ptr %788, i32 0, i32 0
  %790 = load ptr, ptr %789, align 8
  %791 = call i32 %790(ptr %781) #16
  %792 = icmp sge i32 %791, %779
  br i1 %792, label %793, label %._crit_edge1

._crit_edge1:                                     ; preds = %728
  br label %831

793:                                              ; preds = %728
  %794 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %795 = load ptr, ptr %794, align 8
  %796 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %795, 0
  %797 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %798 = load ptr, ptr %797, align 8
  %799 = insertvalue { ptr, ptr, ptr, i32 } %796, ptr %798, 1
  %800 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %801 = load ptr, ptr %800, align 8
  %802 = insertvalue { ptr, ptr, ptr, i32 } %799, ptr %801, 2
  %803 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %804 = load i32, ptr %803, align 4
  %805 = insertvalue { ptr, ptr, ptr, i32 } %802, i32 %804, 3
  %806 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %807 = load ptr, ptr %806, align 8
  %808 = load ptr, ptr %65, align 8
  %809 = call ptr @llvm.invariant.start.p0(i64 688, ptr %808)
  %810 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %811 = load i32, ptr %810, align 4
  %812 = getelementptr ptr, ptr %808, i32 %811
  %813 = load ptr, ptr %812, align 8
  %814 = call ptr @typegetter_wrapper(ptr %813, ptr %807)
  %815 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %816 = load ptr, ptr %815, align 8
  %817 = load ptr, ptr %65, align 8
  %818 = call ptr @llvm.invariant.start.p0(i64 688, ptr %817)
  %819 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %820 = load i32, ptr %819, align 4
  %821 = getelementptr ptr, ptr %817, i32 %820
  %822 = getelementptr ptr, ptr %821, i32 1
  %823 = load ptr, ptr %822, align 8
  %824 = call ptr @typegetter_wrapper(ptr %823, ptr %816)
  %825 = call ptr @llvm.invariant.start.p0(i64 0, ptr %43)
  %826 = call ptr @llvm.invariant.start.p0(i64 688, ptr %795)
  %827 = getelementptr ptr, ptr %795, i32 %804
  %828 = getelementptr ptr, ptr %827, i32 16
  %829 = load ptr, ptr %828, align 8
  %830 = call ptr @behavior_wrapper(ptr %829, { ptr, ptr, ptr, i32 } %805, ptr %44)
  call void %830({ ptr, ptr, ptr, i32 } %805, { ptr, ptr, ptr, i32 } %805, ptr %43)
  br label %831

831:                                              ; preds = %._crit_edge1, %793
  %832 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %833 = load ptr, ptr %832, align 8
  %834 = load ptr, ptr %65, align 8
  %835 = call ptr @llvm.invariant.start.p0(i64 688, ptr %834)
  %836 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %837 = load i32, ptr %836, align 4
  %838 = getelementptr ptr, ptr %834, i32 %837
  %839 = load ptr, ptr %838, align 8
  %840 = call ptr @typegetter_wrapper(ptr %839, ptr %833)
  %841 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %842 = load ptr, ptr %841, align 8
  %843 = load ptr, ptr %65, align 8
  %844 = call ptr @llvm.invariant.start.p0(i64 688, ptr %843)
  %845 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %846 = load i32, ptr %845, align 4
  %847 = getelementptr ptr, ptr %843, i32 %846
  %848 = getelementptr ptr, ptr %847, i32 1
  %849 = load ptr, ptr %848, align 8
  %850 = call ptr @typegetter_wrapper(ptr %849, ptr %842)
  store ptr @Entry, ptr %45, align 8
  %851 = getelementptr ptr, ptr %45, i32 1
  store ptr %840, ptr %851, align 8
  %852 = getelementptr ptr, ptr %45, i32 2
  store ptr %850, ptr %852, align 8
  %853 = load ptr, ptr %45, align 8
  %854 = getelementptr ptr, ptr %853, i32 6
  %855 = load ptr, ptr %854, align 8
  %856 = call { i64, i64 } @size_wrapper(ptr %855, ptr %45)
  %857 = extractvalue { i64, i64 } %856, 0
  %858 = call ptr @bump_malloc(i64 %857)
  store ptr %840, ptr %858, align 8
  %859 = getelementptr ptr, ptr %858, i32 1
  store ptr %850, ptr %859, align 8
  %860 = call ptr @llvm.invariant.start.p0(i64 16, ptr %858)
  %861 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %862 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  store ptr @Entry, ptr %46, align 8
  store ptr %858, ptr %861, align 8
  store i32 9, ptr %862, align 4
  %863 = call ptr @llvm.invariant.start.p0(i64 16, ptr %46)
  %864 = load ptr, ptr %80, align 8
  store ptr %864, ptr %48, align 8
  %865 = load i160, ptr %79, align 4
  store i160 %865, ptr %47, align 4
  %866 = load ptr, ptr %48, align 8
  %867 = insertvalue { ptr, i160 } undef, ptr %866, 0
  %868 = load i160, ptr %47, align 4
  %869 = insertvalue { ptr, i160 } %867, i160 %868, 1
  %870 = load ptr, ptr %87, align 8
  store ptr %870, ptr %50, align 8
  %871 = load i160, ptr %86, align 4
  store i160 %871, ptr %49, align 4
  %872 = load ptr, ptr %50, align 8
  %873 = insertvalue { ptr, i160 } undef, ptr %872, 0
  %874 = load i160, ptr %49, align 4
  %875 = insertvalue { ptr, i160 } %873, i160 %874, 1
  %876 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %877 = load ptr, ptr %876, align 8
  %878 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %877, 0
  %879 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %880 = load ptr, ptr %879, align 8
  %881 = insertvalue { ptr, ptr, ptr, i32 } %878, ptr %880, 1
  %882 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %883 = load ptr, ptr %882, align 8
  %884 = insertvalue { ptr, ptr, ptr, i32 } %881, ptr %883, 2
  %885 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %886 = load i32, ptr %885, align 4
  %887 = insertvalue { ptr, ptr, ptr, i32 } %884, i32 %886, 3
  %888 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %889 = load ptr, ptr %888, align 8
  %890 = load ptr, ptr %65, align 8
  %891 = call ptr @llvm.invariant.start.p0(i64 688, ptr %890)
  %892 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %893 = load i32, ptr %892, align 4
  %894 = getelementptr ptr, ptr %890, i32 %893
  %895 = load ptr, ptr %894, align 8
  %896 = call ptr @typegetter_wrapper(ptr %895, ptr %889)
  %897 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %898 = load ptr, ptr %897, align 8
  %899 = load ptr, ptr %65, align 8
  %900 = call ptr @llvm.invariant.start.p0(i64 688, ptr %899)
  %901 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %902 = load i32, ptr %901, align 4
  %903 = getelementptr ptr, ptr %899, i32 %902
  %904 = getelementptr ptr, ptr %903, i32 1
  %905 = load ptr, ptr %904, align 8
  %906 = call ptr @typegetter_wrapper(ptr %905, ptr %898)
  %907 = getelementptr [3 x ptr], ptr %51, i32 0, i32 0
  store ptr %896, ptr %907, align 8
  %908 = getelementptr [3 x ptr], ptr %51, i32 0, i32 1
  store ptr %906, ptr %908, align 8
  %909 = getelementptr [3 x ptr], ptr %51, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %909, align 8
  %910 = call ptr @llvm.invariant.start.p0(i64 9, ptr %51)
  %911 = call ptr @llvm.invariant.start.p0(i64 120, ptr %877)
  %912 = getelementptr ptr, ptr %877, i32 %886
  %913 = getelementptr ptr, ptr %912, i32 5
  %914 = load ptr, ptr %913, align 8
  %915 = getelementptr { ptr, ptr, ptr }, ptr %52, i32 0, i32 0
  store ptr %866, ptr %915, align 8
  %916 = getelementptr { ptr, ptr, ptr }, ptr %52, i32 0, i32 1
  store ptr %872, ptr %916, align 8
  %917 = getelementptr { ptr, ptr, ptr }, ptr %52, i32 0, i32 2
  store ptr @i32_typ, ptr %917, align 8
  %918 = call ptr @behavior_wrapper(ptr %914, { ptr, ptr, ptr, i32 } %887, ptr %52)
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  call void %918({ ptr, ptr, ptr, i32 } %887, { ptr, ptr, ptr, i32 } %887, ptr %51, { ptr, i160 } %869, { ptr, i160 } %875, i32 %.reload26)
  %919 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %920 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %921 = load ptr, ptr %919, align 8
  store ptr %921, ptr %920, align 8
  %922 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %923 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %924 = load ptr, ptr %922, align 8
  store ptr %924, ptr %923, align 8
  %925 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %926 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %927 = load ptr, ptr %925, align 8
  store ptr %927, ptr %926, align 8
  %928 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %929 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %930 = load i32, ptr %928, align 4
  store i32 %930, ptr %929, align 4
  call void @set_offset(ptr %53, ptr @Entry)
  %931 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %932 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %933 = load ptr, ptr %931, align 8
  store ptr %933, ptr %932, align 8
  %934 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %935 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %936 = load ptr, ptr %934, align 8
  store ptr %936, ptr %935, align 8
  %937 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %938 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %939 = load ptr, ptr %937, align 8
  store ptr %939, ptr %938, align 8
  %940 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %941 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %942 = load i32, ptr %940, align 4
  store i32 %942, ptr %941, align 4
  %943 = call ptr @llvm.invariant.start.p0(i64 16, ptr %54)
  store [0 x i8] undef, ptr %55, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %56, align 4
  store i32 0, ptr %.reg2mem38, align 4
  br label %944

944:                                              ; preds = %._crit_edge2, %831
  %.reload39 = load i32, ptr %.reg2mem38, align 4
  store i32 %.reload39, ptr %.reg2mem11, align 4
  %.reload13 = load i32, ptr %.reg2mem11, align 4
  %945 = icmp slt i32 %.reload13, 2
  br i1 %945, label %946, label %1078

946:                                              ; preds = %944
  %947 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 0
  %948 = getelementptr { ptr, i160 }, ptr %57, i32 0, i32 0
  %949 = load ptr, ptr %947, align 8
  store ptr %949, ptr %948, align 8
  %950 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 1
  %951 = getelementptr { ptr, i160 }, ptr %57, i32 0, i32 1
  %952 = load i160, ptr %950, align 4
  store i160 %952, ptr %951, align 4
  call void @set_offset(ptr %57, ptr @Entry)
  %953 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %954 = load ptr, ptr %953, align 8
  %955 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %954, 0
  %956 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %957 = load ptr, ptr %956, align 8
  %958 = insertvalue { ptr, ptr, ptr, i32 } %955, ptr %957, 1
  %959 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %960 = load ptr, ptr %959, align 8
  %961 = insertvalue { ptr, ptr, ptr, i32 } %958, ptr %960, 2
  %962 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %963 = load i32, ptr %962, align 4
  %964 = insertvalue { ptr, ptr, ptr, i32 } %961, i32 %963, 3
  %965 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %966 = load ptr, ptr %965, align 8
  %967 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %966, 0
  %968 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %969 = load ptr, ptr %968, align 8
  %970 = insertvalue { ptr, ptr, ptr, i32 } %967, ptr %969, 1
  %971 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %972 = load ptr, ptr %971, align 8
  %973 = insertvalue { ptr, ptr, ptr, i32 } %970, ptr %972, 2
  %974 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %975 = load i32, ptr %974, align 4
  %976 = insertvalue { ptr, ptr, ptr, i32 } %973, i32 %975, 3
  %977 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %978 = load ptr, ptr %977, align 8
  %979 = load ptr, ptr %65, align 8
  %980 = call ptr @llvm.invariant.start.p0(i64 688, ptr %979)
  %981 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %982 = load i32, ptr %981, align 4
  %983 = getelementptr ptr, ptr %979, i32 %982
  %984 = load ptr, ptr %983, align 8
  %985 = call ptr @typegetter_wrapper(ptr %984, ptr %978)
  %986 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %987 = load ptr, ptr %986, align 8
  %988 = load ptr, ptr %65, align 8
  %989 = call ptr @llvm.invariant.start.p0(i64 688, ptr %988)
  %990 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %991 = load i32, ptr %990, align 4
  %992 = getelementptr ptr, ptr %988, i32 %991
  %993 = getelementptr ptr, ptr %992, i32 1
  %994 = load ptr, ptr %993, align 8
  %995 = call ptr @typegetter_wrapper(ptr %994, ptr %987)
  %996 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %997 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %998 = getelementptr [4 x ptr], ptr %997, i32 0, i32 2
  store ptr %995, ptr %998, align 8
  %999 = getelementptr [4 x ptr], ptr %997, i32 0, i32 1
  store ptr %985, ptr %999, align 8
  %1000 = getelementptr [4 x ptr], ptr %997, i32 0, i32 3
  store ptr null, ptr %1000, align 8
  %1001 = call ptr @llvm.invariant.start.p0(i64 24, ptr %997)
  store ptr @Entry, ptr %997, align 8
  %1002 = getelementptr [4 x ptr], ptr %996, i32 0, i32 2
  store ptr %997, ptr %1002, align 8
  %1003 = getelementptr [4 x ptr], ptr %996, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %1003, align 8
  %1004 = getelementptr [4 x ptr], ptr %996, i32 0, i32 3
  store ptr null, ptr %1004, align 8
  %1005 = call ptr @llvm.invariant.start.p0(i64 24, ptr %996)
  store ptr @union_typ, ptr %996, align 8
  %1006 = getelementptr [1 x ptr], ptr %58, i32 0, i32 0
  store ptr %996, ptr %1006, align 8
  %1007 = call ptr @llvm.invariant.start.p0(i64 1, ptr %58)
  %1008 = call ptr @llvm.invariant.start.p0(i64 688, ptr %966)
  %1009 = getelementptr ptr, ptr %966, i32 %975
  %1010 = getelementptr ptr, ptr %1009, i32 14
  %1011 = load ptr, ptr %1010, align 8
  %1012 = getelementptr { ptr }, ptr %59, i32 0, i32 0
  store ptr @union_typ, ptr %1012, align 8
  %1013 = call ptr @behavior_wrapper(ptr %1011, { ptr, ptr, ptr, i32 } %976, ptr %59)
  %1014 = call { ptr, i160 } %1013({ ptr, ptr, ptr, i32 } %976, { ptr, ptr, ptr, i32 } %976, ptr %58, { ptr, ptr, ptr, i32 } %964)
  store { ptr, i160 } %1014, ptr %60, align 8
  %1015 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 0
  %1016 = load ptr, ptr %1015, align 8
  store ptr %1016, ptr %56, align 8
  %1017 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 1
  %1018 = load i160, ptr %1017, align 4
  store i160 %1018, ptr %55, align 4
  %1019 = load ptr, ptr %56, align 8
  %1020 = ptrtoint ptr %1019 to i64
  %1021 = icmp eq i64 %1020, ptrtoint (ptr @nil_typ to i64)
  %1022 = icmp eq i64 %1020, 0
  %1023 = or i1 %1021, %1022
  %1024 = xor i1 %1023, true
  %1025 = zext i1 %1024 to i32
  store i32 %1025, ptr %.reg2mem9, align 4
  br i1 %1023, label %1026, label %1027

1026:                                             ; preds = %946
  store i32 poison, ptr %.reg2mem36, align 4
  br label %1076

1027:                                             ; preds = %946
  %1028 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %1029 = load ptr, ptr %1028, align 8
  %1030 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1029, 0
  %1031 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %1032 = load ptr, ptr %1031, align 8
  %1033 = insertvalue { ptr, ptr, ptr, i32 } %1030, ptr %1032, 1
  %1034 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %1035 = load ptr, ptr %1034, align 8
  %1036 = insertvalue { ptr, ptr, ptr, i32 } %1033, ptr %1035, 2
  %1037 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %1038 = load i32, ptr %1037, align 4
  %1039 = insertvalue { ptr, ptr, ptr, i32 } %1036, i32 %1038, 3
  %1040 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %1041 = load ptr, ptr %1040, align 8
  %1042 = load ptr, ptr %65, align 8
  %1043 = call ptr @llvm.invariant.start.p0(i64 688, ptr %1042)
  %1044 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %1045 = load i32, ptr %1044, align 4
  %1046 = getelementptr ptr, ptr %1042, i32 %1045
  %1047 = load ptr, ptr %1046, align 8
  %1048 = call ptr @typegetter_wrapper(ptr %1047, ptr %1041)
  %1049 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %1050 = load ptr, ptr %1049, align 8
  %1051 = load ptr, ptr %65, align 8
  %1052 = call ptr @llvm.invariant.start.p0(i64 688, ptr %1051)
  %1053 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %1054 = load i32, ptr %1053, align 4
  %1055 = getelementptr ptr, ptr %1051, i32 %1054
  %1056 = getelementptr ptr, ptr %1055, i32 1
  %1057 = load ptr, ptr %1056, align 8
  %1058 = call ptr @typegetter_wrapper(ptr %1057, ptr %1050)
  %1059 = call ptr @llvm.invariant.start.p0(i64 0, ptr %61)
  %1060 = call ptr @llvm.invariant.start.p0(i64 688, ptr %1029)
  %1061 = getelementptr ptr, ptr %1029, i32 %1038
  %1062 = getelementptr ptr, ptr %1061, i32 16
  %1063 = load ptr, ptr %1062, align 8
  %1064 = call ptr @behavior_wrapper(ptr %1063, { ptr, ptr, ptr, i32 } %1039, ptr %62)
  call void %1064({ ptr, ptr, ptr, i32 } %1039, { ptr, ptr, ptr, i32 } %1039, ptr %61)
  %1065 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 0
  %1066 = load ptr, ptr %56, align 8
  store ptr %1066, ptr %1065, align 8
  %1067 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 1
  %1068 = load i160, ptr %55, align 4
  store i160 %1068, ptr %1067, align 4
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %1069 = add i32 %.reload12, 1
  store i32 %1069, ptr %.reg2mem7, align 4
  %1070 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 0
  %1071 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 0
  %1072 = load ptr, ptr %1070, align 8
  store ptr %1072, ptr %1071, align 8
  %1073 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 1
  %1074 = getelementptr { ptr, i160 }, ptr %54, i32 0, i32 1
  %1075 = load i160, ptr %1073, align 4
  store i160 %1075, ptr %1074, align 4
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem36, align 4
  br label %1076

1076:                                             ; preds = %1027, %1026
  %.reload37 = load i32, ptr %.reg2mem36, align 4
  store i32 %.reload37, ptr %.reg2mem5, align 4
  br label %1077

1077:                                             ; preds = %1076
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem32, align 4
  store i32 %.reload6, ptr %.reg2mem34, align 4
  br label %1079

1078:                                             ; preds = %944
  store i32 0, ptr %.reg2mem32, align 4
  store i32 poison, ptr %.reg2mem34, align 4
  br label %1079

1079:                                             ; preds = %1078, %1077
  %.reload35 = load i32, ptr %.reg2mem34, align 4
  %.reload33 = load i32, ptr %.reg2mem32, align 4
  store i32 %.reload35, ptr %.reg2mem3, align 4
  store i32 %.reload33, ptr %.reg2mem, align 4
  br label %1080

1080:                                             ; preds = %1079
  %.reload = load i32, ptr %.reg2mem, align 4
  %1081 = trunc i32 %.reload to i1
  br i1 %1081, label %._crit_edge2, label %1082

._crit_edge2:                                     ; preds = %1080
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem38, align 4
  br label %944

1082:                                             ; preds = %1080
  br label %1083

1083:                                             ; preds = %1082, %727
  br label %1084

1084:                                             ; preds = %1083, %303
  ret void
}

define { ptr, i160 } @HashMap_get_from_table_keyK_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, i32 %4, i32 %5, { ptr, ptr, ptr, i32 } %6) {
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca ptr, align 8
  %21 = alloca [0 x ptr], align 8
  %22 = alloca {}, align 8
  %23 = alloca { ptr, i160 }, align 8
  %24 = alloca i160, align 8
  %25 = alloca ptr, align 8
  %26 = alloca i160, align 8
  %27 = alloca ptr, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca { ptr, i160 }, align 8
  %.reg2mem13 = alloca { ptr, i160 }, align 8
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca { ptr, i160 }, align 8
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca { ptr, i160 }, align 8
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca { ptr, i160 }, align 8
  %.reg2mem29 = alloca i32, align 4
  %.reg2mem31 = alloca { ptr, i160 }, align 8
  %.reg2mem33 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %28, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr %28)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %40, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %30, ptr @HashMap)
  %43 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %43, align 8
  %44 = alloca i160, align 8
  %45 = alloca ptr, align 8
  %46 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  store ptr %47, ptr %45, align 8
  %48 = getelementptr { ptr, i160 }, ptr %43, i32 0, i32 1
  %49 = load i160, ptr %48, align 4
  store i160 %49, ptr %44, align 4
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %6, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 16, ptr %50)
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %64 = load i32, ptr %62, align 4
  store i32 %64, ptr %63, align 4
  call void @set_offset(ptr %52, ptr @Array)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %69, 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 2
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %75, 3
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = load ptr, ptr %30, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 688, ptr %79)
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %82 = load i32, ptr %81, align 4
  %83 = getelementptr ptr, ptr %79, i32 %82
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr @typegetter_wrapper(ptr %84, ptr %78)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = load ptr, ptr %30, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 688, ptr %88)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %91 = load i32, ptr %90, align 4
  %92 = getelementptr ptr, ptr %88, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @typegetter_wrapper(ptr %94, ptr %87)
  %96 = alloca [1 x ptr], align 8
  %97 = getelementptr [1 x ptr], ptr %96, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 1, ptr %96)
  %99 = call ptr @llvm.invariant.start.p0(i64 600, ptr %66)
  %100 = getelementptr ptr, ptr %66, i32 %75
  %101 = getelementptr ptr, ptr %100, i32 15
  %102 = load ptr, ptr %101, align 8
  %103 = alloca { ptr }, align 8
  %104 = getelementptr { ptr }, ptr %103, i32 0, i32 0
  store ptr @i32_typ, ptr %104, align 8
  %105 = call ptr @behavior_wrapper(ptr %102, { ptr, ptr, ptr, i32 } %76, ptr %103)
  %106 = call { ptr, i160 } %105({ ptr, ptr, ptr, i32 } %76, { ptr, ptr, ptr, i32 } %76, ptr %96, i32 %5)
  %107 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %106, ptr %107, align 8
  %108 = getelementptr { ptr, i160 }, ptr %107, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = ptrtoint ptr %109 to i64
  %111 = icmp eq i64 %110, ptrtoint (ptr @nil_typ to i64)
  %112 = icmp eq i64 %110, 0
  %113 = or i1 %111, %112
  %114 = icmp eq i1 %113, false
  br i1 %114, label %115, label %295

115:                                              ; preds = %7
  %116 = getelementptr { ptr, i160 }, ptr %107, i32 0, i32 0
  %117 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %118 = load ptr, ptr %116, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, i160 }, ptr %107, i32 0, i32 1
  %120 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %121 = load i160, ptr %119, align 4
  store i160 %121, ptr %120, align 4
  call void @set_offset(ptr %8, ptr @Entry)
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %126, 1
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 2
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %132 = load i32, ptr %131, align 4
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, i32 %132, 3
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = load ptr, ptr %30, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 688, ptr %136)
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %139 = load i32, ptr %138, align 4
  %140 = getelementptr ptr, ptr %136, i32 %139
  %141 = load ptr, ptr %140, align 8
  %142 = call ptr @typegetter_wrapper(ptr %141, ptr %135)
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = load ptr, ptr %30, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 688, ptr %145)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %148 = load i32, ptr %147, align 4
  %149 = getelementptr ptr, ptr %145, i32 %148
  %150 = getelementptr ptr, ptr %149, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = call ptr @typegetter_wrapper(ptr %151, ptr %144)
  %153 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %154 = call ptr @llvm.invariant.start.p0(i64 120, ptr %123)
  %155 = getelementptr ptr, ptr %123, i32 %132
  %156 = getelementptr ptr, ptr %155, i32 8
  %157 = load ptr, ptr %156, align 8
  %158 = call ptr @behavior_wrapper(ptr %157, { ptr, ptr, ptr, i32 } %133, ptr %10)
  %159 = call i32 %158({ ptr, ptr, ptr, i32 } %133, { ptr, ptr, ptr, i32 } %133, ptr %9)
  %160 = icmp eq i32 %159, %4
  br i1 %160, label %161, label %281

161:                                              ; preds = %115
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %163, 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %166 = load ptr, ptr %165, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %166, 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %169 = load ptr, ptr %168, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %169, 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %172 = load i32, ptr %171, align 4
  %173 = insertvalue { ptr, ptr, ptr, i32 } %170, i32 %172, 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %175 = load ptr, ptr %174, align 8
  %176 = load ptr, ptr %30, align 8
  %177 = call ptr @llvm.invariant.start.p0(i64 688, ptr %176)
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %179 = load i32, ptr %178, align 4
  %180 = getelementptr ptr, ptr %176, i32 %179
  %181 = load ptr, ptr %180, align 8
  %182 = call ptr @typegetter_wrapper(ptr %181, ptr %175)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = load ptr, ptr %30, align 8
  %186 = call ptr @llvm.invariant.start.p0(i64 688, ptr %185)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %188 = load i32, ptr %187, align 4
  %189 = getelementptr ptr, ptr %185, i32 %188
  %190 = getelementptr ptr, ptr %189, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = call ptr @typegetter_wrapper(ptr %191, ptr %184)
  %193 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %194 = call ptr @llvm.invariant.start.p0(i64 120, ptr %163)
  %195 = getelementptr ptr, ptr %163, i32 %172
  %196 = getelementptr ptr, ptr %195, i32 6
  %197 = load ptr, ptr %196, align 8
  %198 = call ptr @behavior_wrapper(ptr %197, { ptr, ptr, ptr, i32 } %173, ptr %12)
  %199 = call { ptr, i160 } %198({ ptr, ptr, ptr, i32 } %173, { ptr, ptr, ptr, i32 } %173, ptr %11)
  store { ptr, i160 } %199, ptr %13, align 8
  %200 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 0
  %201 = load ptr, ptr %200, align 8
  store ptr %201, ptr %15, align 8
  %202 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 1
  %203 = load i160, ptr %202, align 4
  store i160 %203, ptr %14, align 4
  %204 = load ptr, ptr %15, align 8
  store ptr %204, ptr %17, align 8
  %205 = load i160, ptr %14, align 4
  store i160 %205, ptr %16, align 4
  %206 = load ptr, ptr %17, align 8
  %207 = insertvalue { ptr, i160 } undef, ptr %206, 0
  %208 = load i160, ptr %16, align 4
  %209 = insertvalue { ptr, i160 } %207, i160 %208, 1
  %210 = load ptr, ptr %45, align 8
  store ptr %210, ptr %19, align 8
  %211 = load i160, ptr %44, align 4
  store i160 %211, ptr %18, align 4
  %212 = load ptr, ptr %19, align 8
  %213 = insertvalue { ptr, i160 } undef, ptr %212, 0
  %214 = load i160, ptr %18, align 4
  %215 = insertvalue { ptr, i160 } %213, i160 %214, 1
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %217 = load ptr, ptr %216, align 8
  %218 = load ptr, ptr %30, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 688, ptr %218)
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %221 = load i32, ptr %220, align 4
  %222 = getelementptr ptr, ptr %218, i32 %221
  %223 = getelementptr ptr, ptr %222, i32 7
  %224 = load ptr, ptr %223, align 8
  %225 = getelementptr { ptr, ptr }, ptr %224, i32 0, i32 0
  %226 = load ptr, ptr %225, align 8
  %227 = call { ptr } %226(ptr %217) #16
  store { ptr } %227, ptr %20, align 8
  %228 = load ptr, ptr %20, align 8
  %229 = call i1 %228({ ptr, i160 } %209, { ptr, i160 } %215)
  %230 = zext i1 %229 to i32
  store i32 %230, ptr %.reg2mem17, align 4
  br i1 %229, label %231, label %278

231:                                              ; preds = %161
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %233, 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %236, 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %239 = load ptr, ptr %238, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, ptr %239, 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %242 = load i32, ptr %241, align 4
  %243 = insertvalue { ptr, ptr, ptr, i32 } %240, i32 %242, 3
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %245 = load ptr, ptr %244, align 8
  %246 = load ptr, ptr %30, align 8
  %247 = call ptr @llvm.invariant.start.p0(i64 688, ptr %246)
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %249 = load i32, ptr %248, align 4
  %250 = getelementptr ptr, ptr %246, i32 %249
  %251 = load ptr, ptr %250, align 8
  %252 = call ptr @typegetter_wrapper(ptr %251, ptr %245)
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %254 = load ptr, ptr %253, align 8
  %255 = load ptr, ptr %30, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 688, ptr %255)
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %258 = load i32, ptr %257, align 4
  %259 = getelementptr ptr, ptr %255, i32 %258
  %260 = getelementptr ptr, ptr %259, i32 1
  %261 = load ptr, ptr %260, align 8
  %262 = call ptr @typegetter_wrapper(ptr %261, ptr %254)
  %263 = call ptr @llvm.invariant.start.p0(i64 0, ptr %21)
  %264 = call ptr @llvm.invariant.start.p0(i64 120, ptr %233)
  %265 = getelementptr ptr, ptr %233, i32 %242
  %266 = getelementptr ptr, ptr %265, i32 7
  %267 = load ptr, ptr %266, align 8
  %268 = call ptr @behavior_wrapper(ptr %267, { ptr, ptr, ptr, i32 } %243, ptr %22)
  %269 = call { ptr, i160 } %268({ ptr, ptr, ptr, i32 } %243, { ptr, ptr, ptr, i32 } %243, ptr %21)
  store { ptr, i160 } %269, ptr %23, align 8
  %270 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %271 = load ptr, ptr %270, align 8
  store ptr %271, ptr %25, align 8
  %272 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %273 = load i160, ptr %272, align 4
  store i160 %273, ptr %24, align 4
  %274 = load ptr, ptr %25, align 8
  %275 = insertvalue { ptr, i160 } undef, ptr %274, 0
  %276 = load i160, ptr %24, align 4
  %277 = insertvalue { ptr, i160 } %275, i160 %276, 1
  store { ptr, i160 } %277, ptr %.reg2mem15, align 8
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  store { ptr, i160 } %.reload16, ptr %.reg2mem33, align 8
  br label %279

278:                                              ; preds = %161
  store { ptr, i160 } poison, ptr %.reg2mem33, align 8
  br label %279

279:                                              ; preds = %278, %231
  %.reload34 = load { ptr, i160 }, ptr %.reg2mem33, align 8
  store { ptr, i160 } %.reload34, ptr %.reg2mem13, align 8
  br label %280

280:                                              ; preds = %279
  %.reload14 = load { ptr, i160 }, ptr %.reg2mem13, align 8
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem29, align 4
  store { ptr, i160 } %.reload14, ptr %.reg2mem31, align 8
  br label %282

281:                                              ; preds = %115
  store i32 0, ptr %.reg2mem29, align 4
  store { ptr, i160 } poison, ptr %.reg2mem31, align 8
  br label %282

282:                                              ; preds = %281, %280
  %.reload32 = load { ptr, i160 }, ptr %.reg2mem31, align 8
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  store { ptr, i160 } %.reload32, ptr %.reg2mem11, align 8
  store i32 %.reload30, ptr %.reg2mem9, align 4
  br label %283

283:                                              ; preds = %282
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  %284 = zext i32 %.reload10 to i64
  %285 = trunc i64 %284 to i32
  switch i32 %285, label %293 [
    i32 0, label %286
  ]

286:                                              ; preds = %283
  %287 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %288 = getelementptr { ptr, i160 }, ptr %107, i32 0, i32 0
  %289 = load ptr, ptr %287, align 8
  store ptr %289, ptr %288, align 8
  %290 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %291 = getelementptr { ptr, i160 }, ptr %107, i32 0, i32 1
  %292 = load i160, ptr %290, align 4
  store i160 %292, ptr %291, align 4
  store i32 1, ptr %.reg2mem25, align 4
  store { ptr, i160 } poison, ptr %.reg2mem27, align 8
  br label %294

293:                                              ; preds = %283
  %.reload12 = load { ptr, i160 }, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem25, align 4
  store { ptr, i160 } %.reload12, ptr %.reg2mem27, align 8
  br label %294

294:                                              ; preds = %293, %286
  %.reload28 = load { ptr, i160 }, ptr %.reg2mem27, align 8
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  store { ptr, i160 } %.reload28, ptr %.reg2mem7, align 8
  store i32 %.reload26, ptr %.reg2mem5, align 4
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store i32 %.reload6, ptr %.reg2mem21, align 4
  store { ptr, i160 } %.reload8, ptr %.reg2mem23, align 8
  br label %296

295:                                              ; preds = %7
  store i32 1, ptr %.reg2mem21, align 4
  store { ptr, i160 } poison, ptr %.reg2mem23, align 8
  br label %296

296:                                              ; preds = %295, %294
  %.reload24 = load { ptr, i160 }, ptr %.reg2mem23, align 8
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  store { ptr, i160 } %.reload24, ptr %.reg2mem3, align 8
  store i32 %.reload22, ptr %.reg2mem1, align 4
  br label %297

297:                                              ; preds = %296
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %298 = zext i32 %.reload2 to i64
  %299 = trunc i64 %298 to i32
  switch i32 %299, label %301 [
    i32 0, label %300
  ]

300:                                              ; preds = %297
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem19, align 8
  br label %306

301:                                              ; preds = %297
  store [0 x i8] undef, ptr %26, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %27, align 4
  %302 = load ptr, ptr %27, align 8
  %303 = insertvalue { ptr, i160 } undef, ptr %302, 0
  %304 = load i160, ptr %26, align 4
  %305 = insertvalue { ptr, i160 } %303, i160 %304, 1
  store { ptr, i160 } %305, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem19, align 8
  br label %306

306:                                              ; preds = %301, %300
  %.reload20 = load { ptr, i160 }, ptr %.reg2mem19, align 8
  ret { ptr, i160 } %.reload20
}

define { ptr, i160 } @HashMap_get_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca { ptr, i160 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca [4 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr, ptr }, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca { ptr, i160 }, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem20 = alloca { ptr, i160 }, align 8
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem24 = alloca { ptr, i160 }, align 8
  %.reg2mem26 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @HashMap)
  %33 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %33, align 8
  %34 = alloca i160, align 8
  %35 = alloca ptr, align 8
  %36 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  store ptr %37, ptr %35, align 8
  %38 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 1
  %39 = load i160, ptr %38, align 4
  store i160 %39, ptr %34, align 4
  %40 = alloca i160, align 8
  %41 = alloca ptr, align 8
  %42 = load ptr, ptr %35, align 8
  store ptr %42, ptr %41, align 8
  %43 = load i160, ptr %34, align 4
  store i160 %43, ptr %40, align 4
  %44 = load ptr, ptr %41, align 8
  %45 = insertvalue { ptr, i160 } undef, ptr %44, 0
  %46 = load i160, ptr %40, align 4
  %47 = insertvalue { ptr, i160 } %45, i160 %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %55, 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %58, 3
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %20, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 688, ptr %62)
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = getelementptr ptr, ptr %62, i32 %65
  %67 = load ptr, ptr %66, align 8
  %68 = call ptr @typegetter_wrapper(ptr %67, ptr %61)
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = load ptr, ptr %20, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 688, ptr %71)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %74 = load i32, ptr %73, align 4
  %75 = getelementptr ptr, ptr %71, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %70)
  %79 = alloca [1 x ptr], align 8
  %80 = getelementptr [1 x ptr], ptr %79, i32 0, i32 0
  store ptr %68, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 1, ptr %79)
  %82 = call ptr @llvm.invariant.start.p0(i64 688, ptr %49)
  %83 = getelementptr ptr, ptr %49, i32 %58
  %84 = getelementptr ptr, ptr %83, i32 10
  %85 = load ptr, ptr %84, align 8
  %86 = alloca { ptr }, align 8
  %87 = getelementptr { ptr }, ptr %86, i32 0, i32 0
  store ptr %44, ptr %87, align 8
  %88 = call ptr @behavior_wrapper(ptr %85, { ptr, ptr, ptr, i32 } %59, ptr %86)
  %89 = call i32 %88({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr %79, { ptr, i160 } %47)
  store i32 %89, ptr %.reg2mem15, align 4
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = load ptr, ptr %20, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 688, ptr %104)
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = getelementptr ptr, ptr %104, i32 %107
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @typegetter_wrapper(ptr %109, ptr %103)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = load ptr, ptr %20, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 688, ptr %113)
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = getelementptr ptr, ptr %113, i32 %116
  %118 = getelementptr ptr, ptr %117, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = call ptr @typegetter_wrapper(ptr %119, ptr %112)
  %121 = alloca [1 x ptr], align 8
  %122 = getelementptr [1 x ptr], ptr %121, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %122, align 8
  %123 = call ptr @llvm.invariant.start.p0(i64 1, ptr %121)
  %124 = call ptr @llvm.invariant.start.p0(i64 688, ptr %91)
  %125 = getelementptr ptr, ptr %91, i32 %100
  %126 = getelementptr ptr, ptr %125, i32 12
  %127 = load ptr, ptr %126, align 8
  %128 = alloca { ptr }, align 8
  %129 = getelementptr { ptr }, ptr %128, i32 0, i32 0
  store ptr @i32_typ, ptr %129, align 8
  %130 = call ptr @behavior_wrapper(ptr %127, { ptr, ptr, ptr, i32 } %101, ptr %128)
  %.reload19 = load i32, ptr %.reg2mem15, align 4
  %131 = call i32 %130({ ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %101, ptr %121, i32 %.reload19)
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %133 = load ptr, ptr %132, align 8
  %134 = load ptr, ptr %20, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 688, ptr %134)
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = getelementptr ptr, ptr %134, i32 %137
  %139 = getelementptr ptr, ptr %138, i32 3
  %140 = load ptr, ptr %139, align 8
  %141 = getelementptr { ptr, ptr }, ptr %140, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = call { ptr, ptr, ptr, i32 } %142(ptr %133) #16
  %144 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %143, ptr %144, align 8
  %145 = call ptr @llvm.invariant.start.p0(i64 16, ptr %144)
  call void @assume_offset(ptr %144, ptr @Array)
  %146 = alloca i160, align 8
  %147 = alloca ptr, align 8
  %148 = load ptr, ptr %35, align 8
  store ptr %148, ptr %147, align 8
  %149 = load i160, ptr %34, align 4
  store i160 %149, ptr %146, align 4
  %150 = load ptr, ptr %147, align 8
  %151 = insertvalue { ptr, i160 } undef, ptr %150, 0
  %152 = load i160, ptr %146, align 4
  %153 = insertvalue { ptr, i160 } %151, i160 %152, 1
  %154 = alloca { ptr, ptr, ptr, i32 }, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  %157 = load ptr, ptr %155, align 8
  store ptr %157, ptr %156, align 8
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  %160 = load ptr, ptr %158, align 8
  store ptr %160, ptr %159, align 8
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  %163 = load ptr, ptr %161, align 8
  store ptr %163, ptr %162, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  %166 = load i32, ptr %164, align 4
  store i32 %166, ptr %165, align 4
  call void @set_offset(ptr %154, ptr @Array)
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %168, 0
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  %171 = load ptr, ptr %170, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %171, 1
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %174, 2
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  %177 = load i32, ptr %176, align 4
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, i32 %177, 3
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %180, 0
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %183 = load ptr, ptr %182, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %183, 1
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %186 = load ptr, ptr %185, align 8
  %187 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %186, 2
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %189 = load i32, ptr %188, align 4
  %190 = insertvalue { ptr, ptr, ptr, i32 } %187, i32 %189, 3
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %192 = load ptr, ptr %191, align 8
  %193 = load ptr, ptr %20, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 688, ptr %193)
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %196 = load i32, ptr %195, align 4
  %197 = getelementptr ptr, ptr %193, i32 %196
  %198 = load ptr, ptr %197, align 8
  %199 = call ptr @typegetter_wrapper(ptr %198, ptr %192)
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %201 = load ptr, ptr %200, align 8
  %202 = load ptr, ptr %20, align 8
  %203 = call ptr @llvm.invariant.start.p0(i64 688, ptr %202)
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %205 = load i32, ptr %204, align 4
  %206 = getelementptr ptr, ptr %202, i32 %205
  %207 = getelementptr ptr, ptr %206, i32 1
  %208 = load ptr, ptr %207, align 8
  %209 = call ptr @typegetter_wrapper(ptr %208, ptr %201)
  %210 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %211 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %212 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %213 = getelementptr [4 x ptr], ptr %212, i32 0, i32 2
  store ptr %209, ptr %213, align 8
  %214 = getelementptr [4 x ptr], ptr %212, i32 0, i32 1
  store ptr %199, ptr %214, align 8
  %215 = getelementptr [4 x ptr], ptr %212, i32 0, i32 3
  store ptr null, ptr %215, align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 24, ptr %212)
  store ptr @Entry, ptr %212, align 8
  %217 = getelementptr [4 x ptr], ptr %211, i32 0, i32 2
  store ptr %212, ptr %217, align 8
  %218 = getelementptr [4 x ptr], ptr %211, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %218, align 8
  %219 = getelementptr [4 x ptr], ptr %211, i32 0, i32 3
  store ptr null, ptr %219, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 24, ptr %211)
  store ptr @union_typ, ptr %211, align 8
  %221 = getelementptr [3 x ptr], ptr %210, i32 0, i32 1
  store ptr %211, ptr %221, align 8
  %222 = getelementptr [3 x ptr], ptr %210, i32 0, i32 2
  store ptr null, ptr %222, align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 16, ptr %210)
  store ptr @Array, ptr %210, align 8
  %224 = alloca [4 x ptr], align 8
  %225 = getelementptr [4 x ptr], ptr %224, i32 0, i32 0
  store ptr %199, ptr %225, align 8
  %226 = getelementptr [4 x ptr], ptr %224, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %226, align 8
  %227 = getelementptr [4 x ptr], ptr %224, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %227, align 8
  %228 = getelementptr [4 x ptr], ptr %224, i32 0, i32 3
  store ptr %210, ptr %228, align 8
  %229 = call ptr @llvm.invariant.start.p0(i64 16, ptr %224)
  %230 = call ptr @llvm.invariant.start.p0(i64 688, ptr %180)
  %231 = getelementptr ptr, ptr %180, i32 %189
  %232 = getelementptr ptr, ptr %231, i32 19
  %233 = load ptr, ptr %232, align 8
  %234 = alloca { ptr, ptr, ptr, ptr }, align 8
  %235 = getelementptr { ptr, ptr, ptr, ptr }, ptr %234, i32 0, i32 0
  store ptr %150, ptr %235, align 8
  %236 = getelementptr { ptr, ptr, ptr, ptr }, ptr %234, i32 0, i32 1
  store ptr @i32_typ, ptr %236, align 8
  %237 = getelementptr { ptr, ptr, ptr, ptr }, ptr %234, i32 0, i32 2
  store ptr @i32_typ, ptr %237, align 8
  %238 = getelementptr { ptr, ptr, ptr, ptr }, ptr %234, i32 0, i32 3
  store ptr %168, ptr %238, align 8
  %239 = call ptr @behavior_wrapper(ptr %233, { ptr, ptr, ptr, i32 } %190, ptr %234)
  %.reload18 = load i32, ptr %.reg2mem15, align 4
  %240 = call { ptr, i160 } %239({ ptr, ptr, ptr, i32 } %190, { ptr, ptr, ptr, i32 } %190, ptr %224, { ptr, i160 } %153, i32 %.reload18, i32 %131, { ptr, ptr, ptr, i32 } %178)
  %241 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %240, ptr %241, align 8
  %242 = getelementptr { ptr, i160 }, ptr %241, i32 0, i32 0
  %243 = load ptr, ptr %242, align 8
  %244 = ptrtoint ptr %243 to i64
  %245 = icmp eq i64 %244, ptrtoint (ptr @nil_typ to i64)
  %246 = icmp eq i64 %244, 0
  %247 = or i1 %245, %246
  %248 = icmp eq i1 %247, false
  store i1 %248, ptr %.reg2mem11, align 1
  %.reload14 = load i1, ptr %.reg2mem11, align 1
  br i1 %.reload14, label %249, label %250

249:                                              ; preds = %4
  store i32 0, ptr %.reg2mem22, align 4
  store { ptr, i160 } poison, ptr %.reg2mem24, align 8
  br label %411

250:                                              ; preds = %4
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %252 = load ptr, ptr %251, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %252, 0
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %255 = load ptr, ptr %254, align 8
  %256 = insertvalue { ptr, ptr, ptr, i32 } %253, ptr %255, 1
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %258 = load ptr, ptr %257, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %256, ptr %258, 2
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %261 = load i32, ptr %260, align 4
  %262 = insertvalue { ptr, ptr, ptr, i32 } %259, i32 %261, 3
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %264 = load ptr, ptr %263, align 8
  %265 = load ptr, ptr %20, align 8
  %266 = call ptr @llvm.invariant.start.p0(i64 688, ptr %265)
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %268 = load i32, ptr %267, align 4
  %269 = getelementptr ptr, ptr %265, i32 %268
  %270 = load ptr, ptr %269, align 8
  %271 = call ptr @typegetter_wrapper(ptr %270, ptr %264)
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %273 = load ptr, ptr %272, align 8
  %274 = load ptr, ptr %20, align 8
  %275 = call ptr @llvm.invariant.start.p0(i64 688, ptr %274)
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %277 = load i32, ptr %276, align 4
  %278 = getelementptr ptr, ptr %274, i32 %277
  %279 = getelementptr ptr, ptr %278, i32 1
  %280 = load ptr, ptr %279, align 8
  %281 = call ptr @typegetter_wrapper(ptr %280, ptr %273)
  %282 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %282, align 8
  %283 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %284 = call ptr @llvm.invariant.start.p0(i64 688, ptr %252)
  %285 = getelementptr ptr, ptr %252, i32 %261
  %286 = getelementptr ptr, ptr %285, i32 13
  %287 = load ptr, ptr %286, align 8
  %288 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %288, align 8
  %289 = call ptr @behavior_wrapper(ptr %287, { ptr, ptr, ptr, i32 } %262, ptr %7)
  %.reload17 = load i32, ptr %.reg2mem15, align 4
  %290 = call i32 %289({ ptr, ptr, ptr, i32 } %262, { ptr, ptr, ptr, i32 } %262, ptr %6, i32 %.reload17)
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %292 = load ptr, ptr %291, align 8
  %293 = load ptr, ptr %20, align 8
  %294 = call ptr @llvm.invariant.start.p0(i64 688, ptr %293)
  %295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %296 = load i32, ptr %295, align 4
  %297 = getelementptr ptr, ptr %293, i32 %296
  %298 = getelementptr ptr, ptr %297, i32 4
  %299 = load ptr, ptr %298, align 8
  %300 = getelementptr { ptr, ptr }, ptr %299, i32 0, i32 0
  %301 = load ptr, ptr %300, align 8
  %302 = call { ptr, ptr, ptr, i32 } %301(ptr %292) #16
  store { ptr, ptr, ptr, i32 } %302, ptr %8, align 8
  %303 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  call void @assume_offset(ptr %8, ptr @Array)
  %304 = load ptr, ptr %35, align 8
  store ptr %304, ptr %10, align 8
  %305 = load i160, ptr %34, align 4
  store i160 %305, ptr %9, align 4
  %306 = load ptr, ptr %10, align 8
  %307 = insertvalue { ptr, i160 } undef, ptr %306, 0
  %308 = load i160, ptr %9, align 4
  %309 = insertvalue { ptr, i160 } %307, i160 %308, 1
  %310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %312 = load ptr, ptr %310, align 8
  store ptr %312, ptr %311, align 8
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %315 = load ptr, ptr %313, align 8
  store ptr %315, ptr %314, align 8
  %316 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %318 = load ptr, ptr %316, align 8
  store ptr %318, ptr %317, align 8
  %319 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %320 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %321 = load i32, ptr %319, align 4
  store i32 %321, ptr %320, align 4
  call void @set_offset(ptr %11, ptr @Array)
  %322 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %323 = load ptr, ptr %322, align 8
  %324 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %323, 0
  %325 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %326 = load ptr, ptr %325, align 8
  %327 = insertvalue { ptr, ptr, ptr, i32 } %324, ptr %326, 1
  %328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %329 = load ptr, ptr %328, align 8
  %330 = insertvalue { ptr, ptr, ptr, i32 } %327, ptr %329, 2
  %331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %332 = load i32, ptr %331, align 4
  %333 = insertvalue { ptr, ptr, ptr, i32 } %330, i32 %332, 3
  %334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %335 = load ptr, ptr %334, align 8
  %336 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %335, 0
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %338 = load ptr, ptr %337, align 8
  %339 = insertvalue { ptr, ptr, ptr, i32 } %336, ptr %338, 1
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %341 = load ptr, ptr %340, align 8
  %342 = insertvalue { ptr, ptr, ptr, i32 } %339, ptr %341, 2
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %344 = load i32, ptr %343, align 4
  %345 = insertvalue { ptr, ptr, ptr, i32 } %342, i32 %344, 3
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %347 = load ptr, ptr %346, align 8
  %348 = load ptr, ptr %20, align 8
  %349 = call ptr @llvm.invariant.start.p0(i64 688, ptr %348)
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %351 = load i32, ptr %350, align 4
  %352 = getelementptr ptr, ptr %348, i32 %351
  %353 = load ptr, ptr %352, align 8
  %354 = call ptr @typegetter_wrapper(ptr %353, ptr %347)
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %356 = load ptr, ptr %355, align 8
  %357 = load ptr, ptr %20, align 8
  %358 = call ptr @llvm.invariant.start.p0(i64 688, ptr %357)
  %359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %360 = load i32, ptr %359, align 4
  %361 = getelementptr ptr, ptr %357, i32 %360
  %362 = getelementptr ptr, ptr %361, i32 1
  %363 = load ptr, ptr %362, align 8
  %364 = call ptr @typegetter_wrapper(ptr %363, ptr %356)
  %365 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %366 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %367 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %368 = getelementptr [4 x ptr], ptr %367, i32 0, i32 2
  store ptr %364, ptr %368, align 8
  %369 = getelementptr [4 x ptr], ptr %367, i32 0, i32 1
  store ptr %354, ptr %369, align 8
  %370 = getelementptr [4 x ptr], ptr %367, i32 0, i32 3
  store ptr null, ptr %370, align 8
  %371 = call ptr @llvm.invariant.start.p0(i64 24, ptr %367)
  store ptr @Entry, ptr %367, align 8
  %372 = getelementptr [4 x ptr], ptr %366, i32 0, i32 2
  store ptr %367, ptr %372, align 8
  %373 = getelementptr [4 x ptr], ptr %366, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %373, align 8
  %374 = getelementptr [4 x ptr], ptr %366, i32 0, i32 3
  store ptr null, ptr %374, align 8
  %375 = call ptr @llvm.invariant.start.p0(i64 24, ptr %366)
  store ptr @union_typ, ptr %366, align 8
  %376 = getelementptr [3 x ptr], ptr %365, i32 0, i32 1
  store ptr %366, ptr %376, align 8
  %377 = getelementptr [3 x ptr], ptr %365, i32 0, i32 2
  store ptr null, ptr %377, align 8
  %378 = call ptr @llvm.invariant.start.p0(i64 16, ptr %365)
  store ptr @Array, ptr %365, align 8
  %379 = getelementptr [4 x ptr], ptr %12, i32 0, i32 0
  store ptr %354, ptr %379, align 8
  %380 = getelementptr [4 x ptr], ptr %12, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %380, align 8
  %381 = getelementptr [4 x ptr], ptr %12, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %381, align 8
  %382 = getelementptr [4 x ptr], ptr %12, i32 0, i32 3
  store ptr %365, ptr %382, align 8
  %383 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %384 = call ptr @llvm.invariant.start.p0(i64 688, ptr %335)
  %385 = getelementptr ptr, ptr %335, i32 %344
  %386 = getelementptr ptr, ptr %385, i32 19
  %387 = load ptr, ptr %386, align 8
  %388 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 0
  store ptr %306, ptr %388, align 8
  %389 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 1
  store ptr @i32_typ, ptr %389, align 8
  %390 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 2
  store ptr @i32_typ, ptr %390, align 8
  %391 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 3
  store ptr %323, ptr %391, align 8
  %392 = call ptr @behavior_wrapper(ptr %387, { ptr, ptr, ptr, i32 } %345, ptr %13)
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  %393 = call { ptr, i160 } %392({ ptr, ptr, ptr, i32 } %345, { ptr, ptr, ptr, i32 } %345, ptr %12, { ptr, i160 } %309, i32 %.reload16, i32 %290, { ptr, ptr, ptr, i32 } %333)
  store { ptr, i160 } %393, ptr %14, align 8
  %394 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %395 = load ptr, ptr %394, align 8
  %396 = ptrtoint ptr %395 to i64
  %397 = icmp eq i64 %396, ptrtoint (ptr @nil_typ to i64)
  %398 = icmp eq i64 %396, 0
  %399 = or i1 %397, %398
  %400 = icmp eq i1 %399, false
  %401 = icmp ne i1 %399, false
  %402 = zext i1 %401 to i32
  store i32 %402, ptr %.reg2mem9, align 4
  br i1 %400, label %403, label %404

403:                                              ; preds = %250
  store { ptr, i160 } poison, ptr %.reg2mem26, align 8
  br label %409

404:                                              ; preds = %250
  store [0 x i8] undef, ptr %16, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %17, align 4
  %405 = load ptr, ptr %17, align 8
  %406 = insertvalue { ptr, i160 } undef, ptr %405, 0
  %407 = load i160, ptr %16, align 4
  %408 = insertvalue { ptr, i160 } %406, i160 %407, 1
  store { ptr, i160 } %408, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem26, align 8
  br label %409

409:                                              ; preds = %404, %403
  %.reload27 = load { ptr, i160 }, ptr %.reg2mem26, align 8
  store { ptr, i160 } %.reload27, ptr %.reg2mem5, align 8
  br label %410

410:                                              ; preds = %409
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem22, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem24, align 8
  br label %411

411:                                              ; preds = %410, %249
  %.reload25 = load { ptr, i160 }, ptr %.reg2mem24, align 8
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  store { ptr, i160 } %.reload25, ptr %.reg2mem3, align 8
  store i32 %.reload23, ptr %.reg2mem1, align 4
  br label %412

412:                                              ; preds = %411
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %413 = zext i32 %.reload2 to i64
  %414 = trunc i64 %413 to i32
  switch i32 %414, label %430 [
    i32 0, label %415
  ]

415:                                              ; preds = %412
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  %416 = select i1 %.reload13, ptr %241, ptr %14
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  %417 = select i1 %.reload12, ptr %5, ptr %15
  %418 = getelementptr { ptr, i160 }, ptr %416, i32 0, i32 0
  %419 = getelementptr { ptr, i160 }, ptr %417, i32 0, i32 0
  %420 = load ptr, ptr %418, align 8
  store ptr %420, ptr %419, align 8
  %421 = getelementptr { ptr, i160 }, ptr %416, i32 0, i32 1
  %422 = getelementptr { ptr, i160 }, ptr %417, i32 0, i32 1
  %423 = load i160, ptr %421, align 4
  store i160 %423, ptr %422, align 4
  %424 = getelementptr { ptr, i160 }, ptr %417, i32 0, i32 0
  %425 = load ptr, ptr %424, align 8
  %426 = insertvalue { ptr, i160 } undef, ptr %425, 0
  %427 = getelementptr { ptr, i160 }, ptr %417, i32 0, i32 1
  %428 = load i160, ptr %427, align 4
  %429 = insertvalue { ptr, i160 } %426, i160 %428, 1
  store { ptr, i160 } %429, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem20, align 8
  br label %431

430:                                              ; preds = %412
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem20, align 8
  br label %431

431:                                              ; preds = %430, %415
  %.reload21 = load { ptr, i160 }, ptr %.reg2mem20, align 8
  ret { ptr, i160 } %.reload21
}

define { ptr, i160 } @HashMap_remove_from_table_keyK_h1Ptri32_idxPtri32_tableArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, i32 %4, i32 %5, { ptr, ptr, ptr, i32 } %6) {
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca ptr, align 8
  %21 = alloca [0 x ptr], align 8
  %22 = alloca {}, align 8
  %23 = alloca { ptr, i160 }, align 8
  %24 = alloca i160, align 8
  %25 = alloca ptr, align 8
  %26 = alloca i160, align 8
  %27 = alloca ptr, align 8
  %28 = alloca [2 x ptr], align 8
  %29 = alloca { ptr, ptr }, align 8
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca { ptr, i160 }, align 8
  %.reg2mem13 = alloca { ptr, i160 }, align 8
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca { ptr, i160 }, align 8
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca { ptr, i160 }, align 8
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca { ptr, i160 }, align 8
  %.reg2mem29 = alloca i32, align 4
  %.reg2mem31 = alloca { ptr, i160 }, align 8
  %.reg2mem33 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %32, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = load i32, ptr %44, align 4
  store i32 %46, ptr %45, align 4
  call void @set_offset(ptr %34, ptr @HashMap)
  %47 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %47, align 8
  %48 = alloca i160, align 8
  %49 = alloca ptr, align 8
  %50 = getelementptr { ptr, i160 }, ptr %47, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  store ptr %51, ptr %49, align 8
  %52 = getelementptr { ptr, i160 }, ptr %47, i32 0, i32 1
  %53 = load i160, ptr %52, align 4
  store i160 %53, ptr %48, align 4
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %6, ptr %54, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 16, ptr %54)
  %56 = alloca { ptr, ptr, ptr, i32 }, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %68 = load i32, ptr %66, align 4
  store i32 %68, ptr %67, align 4
  call void @set_offset(ptr %56, ptr @Array)
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %73, 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %76, 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %79 = load i32, ptr %78, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, i32 %79, 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %34, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 688, ptr %83)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = getelementptr ptr, ptr %83, i32 %86
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr @typegetter_wrapper(ptr %88, ptr %82)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %34, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 688, ptr %92)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %95 = load i32, ptr %94, align 4
  %96 = getelementptr ptr, ptr %92, i32 %95
  %97 = getelementptr ptr, ptr %96, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = call ptr @typegetter_wrapper(ptr %98, ptr %91)
  %100 = alloca [1 x ptr], align 8
  %101 = getelementptr [1 x ptr], ptr %100, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 1, ptr %100)
  %103 = call ptr @llvm.invariant.start.p0(i64 600, ptr %70)
  %104 = getelementptr ptr, ptr %70, i32 %79
  %105 = getelementptr ptr, ptr %104, i32 15
  %106 = load ptr, ptr %105, align 8
  %107 = alloca { ptr }, align 8
  %108 = getelementptr { ptr }, ptr %107, i32 0, i32 0
  store ptr @i32_typ, ptr %108, align 8
  %109 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %80, ptr %107)
  %110 = call { ptr, i160 } %109({ ptr, ptr, ptr, i32 } %80, { ptr, ptr, ptr, i32 } %80, ptr %100, i32 %5)
  %111 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %110, ptr %111, align 8
  %112 = getelementptr { ptr, i160 }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = ptrtoint ptr %113 to i64
  %115 = icmp eq i64 %114, ptrtoint (ptr @nil_typ to i64)
  %116 = icmp eq i64 %114, 0
  %117 = or i1 %115, %116
  %118 = icmp eq i1 %117, false
  br i1 %118, label %119, label %368

119:                                              ; preds = %7
  %120 = getelementptr { ptr, i160 }, ptr %111, i32 0, i32 0
  %121 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %122 = load ptr, ptr %120, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, i160 }, ptr %111, i32 0, i32 1
  %124 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %125 = load i160, ptr %123, align 4
  store i160 %125, ptr %124, align 4
  call void @set_offset(ptr %8, ptr @Entry)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %130, 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %133, 2
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %136 = load i32, ptr %135, align 4
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, i32 %136, 3
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %139 = load ptr, ptr %138, align 8
  %140 = load ptr, ptr %34, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 688, ptr %140)
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = getelementptr ptr, ptr %140, i32 %143
  %145 = load ptr, ptr %144, align 8
  %146 = call ptr @typegetter_wrapper(ptr %145, ptr %139)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %148 = load ptr, ptr %147, align 8
  %149 = load ptr, ptr %34, align 8
  %150 = call ptr @llvm.invariant.start.p0(i64 688, ptr %149)
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %152 = load i32, ptr %151, align 4
  %153 = getelementptr ptr, ptr %149, i32 %152
  %154 = getelementptr ptr, ptr %153, i32 1
  %155 = load ptr, ptr %154, align 8
  %156 = call ptr @typegetter_wrapper(ptr %155, ptr %148)
  %157 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %158 = call ptr @llvm.invariant.start.p0(i64 120, ptr %127)
  %159 = getelementptr ptr, ptr %127, i32 %136
  %160 = getelementptr ptr, ptr %159, i32 8
  %161 = load ptr, ptr %160, align 8
  %162 = call ptr @behavior_wrapper(ptr %161, { ptr, ptr, ptr, i32 } %137, ptr %10)
  %163 = call i32 %162({ ptr, ptr, ptr, i32 } %137, { ptr, ptr, ptr, i32 } %137, ptr %9)
  %164 = icmp eq i32 %163, %4
  br i1 %164, label %165, label %354

165:                                              ; preds = %119
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %170, 1
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 2
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %176, 3
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %34, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 688, ptr %180)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = getelementptr ptr, ptr %180, i32 %183
  %185 = load ptr, ptr %184, align 8
  %186 = call ptr @typegetter_wrapper(ptr %185, ptr %179)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %188 = load ptr, ptr %187, align 8
  %189 = load ptr, ptr %34, align 8
  %190 = call ptr @llvm.invariant.start.p0(i64 688, ptr %189)
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %192 = load i32, ptr %191, align 4
  %193 = getelementptr ptr, ptr %189, i32 %192
  %194 = getelementptr ptr, ptr %193, i32 1
  %195 = load ptr, ptr %194, align 8
  %196 = call ptr @typegetter_wrapper(ptr %195, ptr %188)
  %197 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %198 = call ptr @llvm.invariant.start.p0(i64 120, ptr %167)
  %199 = getelementptr ptr, ptr %167, i32 %176
  %200 = getelementptr ptr, ptr %199, i32 6
  %201 = load ptr, ptr %200, align 8
  %202 = call ptr @behavior_wrapper(ptr %201, { ptr, ptr, ptr, i32 } %177, ptr %12)
  %203 = call { ptr, i160 } %202({ ptr, ptr, ptr, i32 } %177, { ptr, ptr, ptr, i32 } %177, ptr %11)
  store { ptr, i160 } %203, ptr %13, align 8
  %204 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 0
  %205 = load ptr, ptr %204, align 8
  store ptr %205, ptr %15, align 8
  %206 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 1
  %207 = load i160, ptr %206, align 4
  store i160 %207, ptr %14, align 4
  %208 = load ptr, ptr %15, align 8
  store ptr %208, ptr %17, align 8
  %209 = load i160, ptr %14, align 4
  store i160 %209, ptr %16, align 4
  %210 = load ptr, ptr %17, align 8
  %211 = insertvalue { ptr, i160 } undef, ptr %210, 0
  %212 = load i160, ptr %16, align 4
  %213 = insertvalue { ptr, i160 } %211, i160 %212, 1
  %214 = load ptr, ptr %49, align 8
  store ptr %214, ptr %19, align 8
  %215 = load i160, ptr %48, align 4
  store i160 %215, ptr %18, align 4
  %216 = load ptr, ptr %19, align 8
  %217 = insertvalue { ptr, i160 } undef, ptr %216, 0
  %218 = load i160, ptr %18, align 4
  %219 = insertvalue { ptr, i160 } %217, i160 %218, 1
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %221 = load ptr, ptr %220, align 8
  %222 = load ptr, ptr %34, align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 688, ptr %222)
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %225 = load i32, ptr %224, align 4
  %226 = getelementptr ptr, ptr %222, i32 %225
  %227 = getelementptr ptr, ptr %226, i32 7
  %228 = load ptr, ptr %227, align 8
  %229 = getelementptr { ptr, ptr }, ptr %228, i32 0, i32 0
  %230 = load ptr, ptr %229, align 8
  %231 = call { ptr } %230(ptr %221) #16
  store { ptr } %231, ptr %20, align 8
  %232 = load ptr, ptr %20, align 8
  %233 = call i1 %232({ ptr, i160 } %213, { ptr, i160 } %219)
  %234 = zext i1 %233 to i32
  store i32 %234, ptr %.reg2mem17, align 4
  br i1 %233, label %235, label %351

235:                                              ; preds = %165
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %237 = load ptr, ptr %236, align 8
  %238 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %237, 0
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %240 = load ptr, ptr %239, align 8
  %241 = insertvalue { ptr, ptr, ptr, i32 } %238, ptr %240, 1
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %243 = load ptr, ptr %242, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } %241, ptr %243, 2
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %246 = load i32, ptr %245, align 4
  %247 = insertvalue { ptr, ptr, ptr, i32 } %244, i32 %246, 3
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %249 = load ptr, ptr %248, align 8
  %250 = load ptr, ptr %34, align 8
  %251 = call ptr @llvm.invariant.start.p0(i64 688, ptr %250)
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %253 = load i32, ptr %252, align 4
  %254 = getelementptr ptr, ptr %250, i32 %253
  %255 = load ptr, ptr %254, align 8
  %256 = call ptr @typegetter_wrapper(ptr %255, ptr %249)
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %258 = load ptr, ptr %257, align 8
  %259 = load ptr, ptr %34, align 8
  %260 = call ptr @llvm.invariant.start.p0(i64 688, ptr %259)
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %262 = load i32, ptr %261, align 4
  %263 = getelementptr ptr, ptr %259, i32 %262
  %264 = getelementptr ptr, ptr %263, i32 1
  %265 = load ptr, ptr %264, align 8
  %266 = call ptr @typegetter_wrapper(ptr %265, ptr %258)
  %267 = call ptr @llvm.invariant.start.p0(i64 0, ptr %21)
  %268 = call ptr @llvm.invariant.start.p0(i64 120, ptr %237)
  %269 = getelementptr ptr, ptr %237, i32 %246
  %270 = getelementptr ptr, ptr %269, i32 7
  %271 = load ptr, ptr %270, align 8
  %272 = call ptr @behavior_wrapper(ptr %271, { ptr, ptr, ptr, i32 } %247, ptr %22)
  %273 = call { ptr, i160 } %272({ ptr, ptr, ptr, i32 } %247, { ptr, ptr, ptr, i32 } %247, ptr %21)
  store { ptr, i160 } %273, ptr %23, align 8
  %274 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %275 = load ptr, ptr %274, align 8
  store ptr %275, ptr %25, align 8
  %276 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %277 = load i160, ptr %276, align 4
  store i160 %277, ptr %24, align 4
  store ptr @nil_typ, ptr %27, align 8
  store [0 x i8] undef, ptr %26, align 1
  %278 = load ptr, ptr %27, align 8
  %279 = insertvalue { ptr, i160 } undef, ptr %278, 0
  %280 = load i160, ptr %26, align 4
  %281 = insertvalue { ptr, i160 } %279, i160 %280, 1
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %283 = load ptr, ptr %282, align 8
  %284 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %283, 0
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %286 = load ptr, ptr %285, align 8
  %287 = insertvalue { ptr, ptr, ptr, i32 } %284, ptr %286, 1
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %289 = load ptr, ptr %288, align 8
  %290 = insertvalue { ptr, ptr, ptr, i32 } %287, ptr %289, 2
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %292 = load i32, ptr %291, align 4
  %293 = insertvalue { ptr, ptr, ptr, i32 } %290, i32 %292, 3
  %294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %295 = load ptr, ptr %294, align 8
  %296 = load ptr, ptr %34, align 8
  %297 = call ptr @llvm.invariant.start.p0(i64 688, ptr %296)
  %298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %299 = load i32, ptr %298, align 4
  %300 = getelementptr ptr, ptr %296, i32 %299
  %301 = load ptr, ptr %300, align 8
  %302 = call ptr @typegetter_wrapper(ptr %301, ptr %295)
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %304 = load ptr, ptr %303, align 8
  %305 = load ptr, ptr %34, align 8
  %306 = call ptr @llvm.invariant.start.p0(i64 688, ptr %305)
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %308 = load i32, ptr %307, align 4
  %309 = getelementptr ptr, ptr %305, i32 %308
  %310 = getelementptr ptr, ptr %309, i32 1
  %311 = load ptr, ptr %310, align 8
  %312 = call ptr @typegetter_wrapper(ptr %311, ptr %304)
  %313 = getelementptr [2 x ptr], ptr %28, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %313, align 8
  %314 = getelementptr [2 x ptr], ptr %28, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %314, align 8
  %315 = call ptr @llvm.invariant.start.p0(i64 4, ptr %28)
  %316 = call ptr @llvm.invariant.start.p0(i64 600, ptr %283)
  %317 = getelementptr ptr, ptr %283, i32 %292
  %318 = getelementptr ptr, ptr %317, i32 16
  %319 = load ptr, ptr %318, align 8
  %320 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 0
  store ptr @i32_typ, ptr %320, align 8
  %321 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  store ptr %278, ptr %321, align 8
  %322 = call ptr @behavior_wrapper(ptr %319, { ptr, ptr, ptr, i32 } %293, ptr %29)
  call void %322({ ptr, ptr, ptr, i32 } %293, { ptr, ptr, ptr, i32 } %293, ptr %28, i32 %5, { ptr, i160 } %281)
  %323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %324 = load ptr, ptr %323, align 8
  %325 = load ptr, ptr %34, align 8
  %326 = call ptr @llvm.invariant.start.p0(i64 688, ptr %325)
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %328 = load i32, ptr %327, align 4
  %329 = getelementptr ptr, ptr %325, i32 %328
  %330 = getelementptr ptr, ptr %329, i32 5
  %331 = load ptr, ptr %330, align 8
  %332 = getelementptr { ptr, ptr }, ptr %331, i32 0, i32 0
  %333 = load ptr, ptr %332, align 8
  %334 = call i32 %333(ptr %324) #16
  %335 = sub i32 %334, 1
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %337 = load ptr, ptr %336, align 8
  %338 = load ptr, ptr %34, align 8
  %339 = call ptr @llvm.invariant.start.p0(i64 688, ptr %338)
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %341 = load i32, ptr %340, align 4
  %342 = getelementptr ptr, ptr %338, i32 %341
  %343 = getelementptr ptr, ptr %342, i32 5
  %344 = load ptr, ptr %343, align 8
  %345 = getelementptr { ptr, ptr }, ptr %344, i32 0, i32 1
  %346 = load ptr, ptr %345, align 8
  call void %346(ptr %337, i32 %335) #15
  %347 = load ptr, ptr %25, align 8
  %348 = insertvalue { ptr, i160 } undef, ptr %347, 0
  %349 = load i160, ptr %24, align 4
  %350 = insertvalue { ptr, i160 } %348, i160 %349, 1
  store { ptr, i160 } %350, ptr %.reg2mem15, align 8
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  store { ptr, i160 } %.reload16, ptr %.reg2mem33, align 8
  br label %352

351:                                              ; preds = %165
  store { ptr, i160 } poison, ptr %.reg2mem33, align 8
  br label %352

352:                                              ; preds = %351, %235
  %.reload34 = load { ptr, i160 }, ptr %.reg2mem33, align 8
  store { ptr, i160 } %.reload34, ptr %.reg2mem13, align 8
  br label %353

353:                                              ; preds = %352
  %.reload14 = load { ptr, i160 }, ptr %.reg2mem13, align 8
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem29, align 4
  store { ptr, i160 } %.reload14, ptr %.reg2mem31, align 8
  br label %355

354:                                              ; preds = %119
  store i32 0, ptr %.reg2mem29, align 4
  store { ptr, i160 } poison, ptr %.reg2mem31, align 8
  br label %355

355:                                              ; preds = %354, %353
  %.reload32 = load { ptr, i160 }, ptr %.reg2mem31, align 8
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  store { ptr, i160 } %.reload32, ptr %.reg2mem11, align 8
  store i32 %.reload30, ptr %.reg2mem9, align 4
  br label %356

356:                                              ; preds = %355
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  %357 = zext i32 %.reload10 to i64
  %358 = trunc i64 %357 to i32
  switch i32 %358, label %366 [
    i32 0, label %359
  ]

359:                                              ; preds = %356
  %360 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %361 = getelementptr { ptr, i160 }, ptr %111, i32 0, i32 0
  %362 = load ptr, ptr %360, align 8
  store ptr %362, ptr %361, align 8
  %363 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %364 = getelementptr { ptr, i160 }, ptr %111, i32 0, i32 1
  %365 = load i160, ptr %363, align 4
  store i160 %365, ptr %364, align 4
  store i32 1, ptr %.reg2mem25, align 4
  store { ptr, i160 } poison, ptr %.reg2mem27, align 8
  br label %367

366:                                              ; preds = %356
  %.reload12 = load { ptr, i160 }, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem25, align 4
  store { ptr, i160 } %.reload12, ptr %.reg2mem27, align 8
  br label %367

367:                                              ; preds = %366, %359
  %.reload28 = load { ptr, i160 }, ptr %.reg2mem27, align 8
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  store { ptr, i160 } %.reload28, ptr %.reg2mem7, align 8
  store i32 %.reload26, ptr %.reg2mem5, align 4
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store i32 %.reload6, ptr %.reg2mem21, align 4
  store { ptr, i160 } %.reload8, ptr %.reg2mem23, align 8
  br label %369

368:                                              ; preds = %7
  store i32 1, ptr %.reg2mem21, align 4
  store { ptr, i160 } poison, ptr %.reg2mem23, align 8
  br label %369

369:                                              ; preds = %368, %367
  %.reload24 = load { ptr, i160 }, ptr %.reg2mem23, align 8
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  store { ptr, i160 } %.reload24, ptr %.reg2mem3, align 8
  store i32 %.reload22, ptr %.reg2mem1, align 4
  br label %370

370:                                              ; preds = %369
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %371 = zext i32 %.reload2 to i64
  %372 = trunc i64 %371 to i32
  switch i32 %372, label %374 [
    i32 0, label %373
  ]

373:                                              ; preds = %370
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem19, align 8
  br label %379

374:                                              ; preds = %370
  store [0 x i8] undef, ptr %30, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %31, align 4
  %375 = load ptr, ptr %31, align 8
  %376 = insertvalue { ptr, i160 } undef, ptr %375, 0
  %377 = load i160, ptr %30, align 4
  %378 = insertvalue { ptr, i160 } %376, i160 %377, 1
  store { ptr, i160 } %378, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem19, align 8
  br label %379

379:                                              ; preds = %374, %373
  %.reload20 = load { ptr, i160 }, ptr %.reg2mem19, align 8
  ret { ptr, i160 } %.reload20
}

define { ptr, i160 } @HashMap_remove_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca { ptr, i160 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca [4 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr, ptr }, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca { ptr, i160 }, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem20 = alloca { ptr, i160 }, align 8
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem24 = alloca { ptr, i160 }, align 8
  %.reg2mem26 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @HashMap)
  %33 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %33, align 8
  %34 = alloca i160, align 8
  %35 = alloca ptr, align 8
  %36 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  store ptr %37, ptr %35, align 8
  %38 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 1
  %39 = load i160, ptr %38, align 4
  store i160 %39, ptr %34, align 4
  %40 = alloca i160, align 8
  %41 = alloca ptr, align 8
  %42 = load ptr, ptr %35, align 8
  store ptr %42, ptr %41, align 8
  %43 = load i160, ptr %34, align 4
  store i160 %43, ptr %40, align 4
  %44 = load ptr, ptr %41, align 8
  %45 = insertvalue { ptr, i160 } undef, ptr %44, 0
  %46 = load i160, ptr %40, align 4
  %47 = insertvalue { ptr, i160 } %45, i160 %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %55, 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %58, 3
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %20, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 688, ptr %62)
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = getelementptr ptr, ptr %62, i32 %65
  %67 = load ptr, ptr %66, align 8
  %68 = call ptr @typegetter_wrapper(ptr %67, ptr %61)
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = load ptr, ptr %20, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 688, ptr %71)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %74 = load i32, ptr %73, align 4
  %75 = getelementptr ptr, ptr %71, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %70)
  %79 = alloca [1 x ptr], align 8
  %80 = getelementptr [1 x ptr], ptr %79, i32 0, i32 0
  store ptr %68, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 1, ptr %79)
  %82 = call ptr @llvm.invariant.start.p0(i64 688, ptr %49)
  %83 = getelementptr ptr, ptr %49, i32 %58
  %84 = getelementptr ptr, ptr %83, i32 10
  %85 = load ptr, ptr %84, align 8
  %86 = alloca { ptr }, align 8
  %87 = getelementptr { ptr }, ptr %86, i32 0, i32 0
  store ptr %44, ptr %87, align 8
  %88 = call ptr @behavior_wrapper(ptr %85, { ptr, ptr, ptr, i32 } %59, ptr %86)
  %89 = call i32 %88({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr %79, { ptr, i160 } %47)
  store i32 %89, ptr %.reg2mem15, align 4
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = load ptr, ptr %20, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 688, ptr %104)
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = getelementptr ptr, ptr %104, i32 %107
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @typegetter_wrapper(ptr %109, ptr %103)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = load ptr, ptr %20, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 688, ptr %113)
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = getelementptr ptr, ptr %113, i32 %116
  %118 = getelementptr ptr, ptr %117, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = call ptr @typegetter_wrapper(ptr %119, ptr %112)
  %121 = alloca [1 x ptr], align 8
  %122 = getelementptr [1 x ptr], ptr %121, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %122, align 8
  %123 = call ptr @llvm.invariant.start.p0(i64 1, ptr %121)
  %124 = call ptr @llvm.invariant.start.p0(i64 688, ptr %91)
  %125 = getelementptr ptr, ptr %91, i32 %100
  %126 = getelementptr ptr, ptr %125, i32 12
  %127 = load ptr, ptr %126, align 8
  %128 = alloca { ptr }, align 8
  %129 = getelementptr { ptr }, ptr %128, i32 0, i32 0
  store ptr @i32_typ, ptr %129, align 8
  %130 = call ptr @behavior_wrapper(ptr %127, { ptr, ptr, ptr, i32 } %101, ptr %128)
  %.reload19 = load i32, ptr %.reg2mem15, align 4
  %131 = call i32 %130({ ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %101, ptr %121, i32 %.reload19)
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %133 = load ptr, ptr %132, align 8
  %134 = load ptr, ptr %20, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 688, ptr %134)
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = getelementptr ptr, ptr %134, i32 %137
  %139 = getelementptr ptr, ptr %138, i32 3
  %140 = load ptr, ptr %139, align 8
  %141 = getelementptr { ptr, ptr }, ptr %140, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = call { ptr, ptr, ptr, i32 } %142(ptr %133) #16
  %144 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %143, ptr %144, align 8
  %145 = call ptr @llvm.invariant.start.p0(i64 16, ptr %144)
  call void @assume_offset(ptr %144, ptr @Array)
  %146 = alloca i160, align 8
  %147 = alloca ptr, align 8
  %148 = load ptr, ptr %35, align 8
  store ptr %148, ptr %147, align 8
  %149 = load i160, ptr %34, align 4
  store i160 %149, ptr %146, align 4
  %150 = load ptr, ptr %147, align 8
  %151 = insertvalue { ptr, i160 } undef, ptr %150, 0
  %152 = load i160, ptr %146, align 4
  %153 = insertvalue { ptr, i160 } %151, i160 %152, 1
  %154 = alloca { ptr, ptr, ptr, i32 }, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  %157 = load ptr, ptr %155, align 8
  store ptr %157, ptr %156, align 8
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  %160 = load ptr, ptr %158, align 8
  store ptr %160, ptr %159, align 8
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  %163 = load ptr, ptr %161, align 8
  store ptr %163, ptr %162, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  %166 = load i32, ptr %164, align 4
  store i32 %166, ptr %165, align 4
  call void @set_offset(ptr %154, ptr @Array)
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %168, 0
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  %171 = load ptr, ptr %170, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %171, 1
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %174, 2
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  %177 = load i32, ptr %176, align 4
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, i32 %177, 3
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %180, 0
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %183 = load ptr, ptr %182, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %183, 1
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %186 = load ptr, ptr %185, align 8
  %187 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %186, 2
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %189 = load i32, ptr %188, align 4
  %190 = insertvalue { ptr, ptr, ptr, i32 } %187, i32 %189, 3
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %192 = load ptr, ptr %191, align 8
  %193 = load ptr, ptr %20, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 688, ptr %193)
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %196 = load i32, ptr %195, align 4
  %197 = getelementptr ptr, ptr %193, i32 %196
  %198 = load ptr, ptr %197, align 8
  %199 = call ptr @typegetter_wrapper(ptr %198, ptr %192)
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %201 = load ptr, ptr %200, align 8
  %202 = load ptr, ptr %20, align 8
  %203 = call ptr @llvm.invariant.start.p0(i64 688, ptr %202)
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %205 = load i32, ptr %204, align 4
  %206 = getelementptr ptr, ptr %202, i32 %205
  %207 = getelementptr ptr, ptr %206, i32 1
  %208 = load ptr, ptr %207, align 8
  %209 = call ptr @typegetter_wrapper(ptr %208, ptr %201)
  %210 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %211 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %212 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %213 = getelementptr [4 x ptr], ptr %212, i32 0, i32 2
  store ptr %209, ptr %213, align 8
  %214 = getelementptr [4 x ptr], ptr %212, i32 0, i32 1
  store ptr %199, ptr %214, align 8
  %215 = getelementptr [4 x ptr], ptr %212, i32 0, i32 3
  store ptr null, ptr %215, align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 24, ptr %212)
  store ptr @Entry, ptr %212, align 8
  %217 = getelementptr [4 x ptr], ptr %211, i32 0, i32 2
  store ptr %212, ptr %217, align 8
  %218 = getelementptr [4 x ptr], ptr %211, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %218, align 8
  %219 = getelementptr [4 x ptr], ptr %211, i32 0, i32 3
  store ptr null, ptr %219, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 24, ptr %211)
  store ptr @union_typ, ptr %211, align 8
  %221 = getelementptr [3 x ptr], ptr %210, i32 0, i32 1
  store ptr %211, ptr %221, align 8
  %222 = getelementptr [3 x ptr], ptr %210, i32 0, i32 2
  store ptr null, ptr %222, align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 16, ptr %210)
  store ptr @Array, ptr %210, align 8
  %224 = alloca [4 x ptr], align 8
  %225 = getelementptr [4 x ptr], ptr %224, i32 0, i32 0
  store ptr %199, ptr %225, align 8
  %226 = getelementptr [4 x ptr], ptr %224, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %226, align 8
  %227 = getelementptr [4 x ptr], ptr %224, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %227, align 8
  %228 = getelementptr [4 x ptr], ptr %224, i32 0, i32 3
  store ptr %210, ptr %228, align 8
  %229 = call ptr @llvm.invariant.start.p0(i64 16, ptr %224)
  %230 = call ptr @llvm.invariant.start.p0(i64 688, ptr %180)
  %231 = getelementptr ptr, ptr %180, i32 %189
  %232 = getelementptr ptr, ptr %231, i32 21
  %233 = load ptr, ptr %232, align 8
  %234 = alloca { ptr, ptr, ptr, ptr }, align 8
  %235 = getelementptr { ptr, ptr, ptr, ptr }, ptr %234, i32 0, i32 0
  store ptr %150, ptr %235, align 8
  %236 = getelementptr { ptr, ptr, ptr, ptr }, ptr %234, i32 0, i32 1
  store ptr @i32_typ, ptr %236, align 8
  %237 = getelementptr { ptr, ptr, ptr, ptr }, ptr %234, i32 0, i32 2
  store ptr @i32_typ, ptr %237, align 8
  %238 = getelementptr { ptr, ptr, ptr, ptr }, ptr %234, i32 0, i32 3
  store ptr %168, ptr %238, align 8
  %239 = call ptr @behavior_wrapper(ptr %233, { ptr, ptr, ptr, i32 } %190, ptr %234)
  %.reload18 = load i32, ptr %.reg2mem15, align 4
  %240 = call { ptr, i160 } %239({ ptr, ptr, ptr, i32 } %190, { ptr, ptr, ptr, i32 } %190, ptr %224, { ptr, i160 } %153, i32 %.reload18, i32 %131, { ptr, ptr, ptr, i32 } %178)
  %241 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %240, ptr %241, align 8
  %242 = getelementptr { ptr, i160 }, ptr %241, i32 0, i32 0
  %243 = load ptr, ptr %242, align 8
  %244 = ptrtoint ptr %243 to i64
  %245 = icmp eq i64 %244, ptrtoint (ptr @nil_typ to i64)
  %246 = icmp eq i64 %244, 0
  %247 = or i1 %245, %246
  %248 = icmp eq i1 %247, false
  store i1 %248, ptr %.reg2mem11, align 1
  %.reload14 = load i1, ptr %.reg2mem11, align 1
  br i1 %.reload14, label %249, label %250

249:                                              ; preds = %4
  store i32 0, ptr %.reg2mem22, align 4
  store { ptr, i160 } poison, ptr %.reg2mem24, align 8
  br label %411

250:                                              ; preds = %4
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %252 = load ptr, ptr %251, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %252, 0
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %255 = load ptr, ptr %254, align 8
  %256 = insertvalue { ptr, ptr, ptr, i32 } %253, ptr %255, 1
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %258 = load ptr, ptr %257, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %256, ptr %258, 2
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %261 = load i32, ptr %260, align 4
  %262 = insertvalue { ptr, ptr, ptr, i32 } %259, i32 %261, 3
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %264 = load ptr, ptr %263, align 8
  %265 = load ptr, ptr %20, align 8
  %266 = call ptr @llvm.invariant.start.p0(i64 688, ptr %265)
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %268 = load i32, ptr %267, align 4
  %269 = getelementptr ptr, ptr %265, i32 %268
  %270 = load ptr, ptr %269, align 8
  %271 = call ptr @typegetter_wrapper(ptr %270, ptr %264)
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %273 = load ptr, ptr %272, align 8
  %274 = load ptr, ptr %20, align 8
  %275 = call ptr @llvm.invariant.start.p0(i64 688, ptr %274)
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %277 = load i32, ptr %276, align 4
  %278 = getelementptr ptr, ptr %274, i32 %277
  %279 = getelementptr ptr, ptr %278, i32 1
  %280 = load ptr, ptr %279, align 8
  %281 = call ptr @typegetter_wrapper(ptr %280, ptr %273)
  %282 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %282, align 8
  %283 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %284 = call ptr @llvm.invariant.start.p0(i64 688, ptr %252)
  %285 = getelementptr ptr, ptr %252, i32 %261
  %286 = getelementptr ptr, ptr %285, i32 13
  %287 = load ptr, ptr %286, align 8
  %288 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %288, align 8
  %289 = call ptr @behavior_wrapper(ptr %287, { ptr, ptr, ptr, i32 } %262, ptr %7)
  %.reload17 = load i32, ptr %.reg2mem15, align 4
  %290 = call i32 %289({ ptr, ptr, ptr, i32 } %262, { ptr, ptr, ptr, i32 } %262, ptr %6, i32 %.reload17)
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %292 = load ptr, ptr %291, align 8
  %293 = load ptr, ptr %20, align 8
  %294 = call ptr @llvm.invariant.start.p0(i64 688, ptr %293)
  %295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %296 = load i32, ptr %295, align 4
  %297 = getelementptr ptr, ptr %293, i32 %296
  %298 = getelementptr ptr, ptr %297, i32 4
  %299 = load ptr, ptr %298, align 8
  %300 = getelementptr { ptr, ptr }, ptr %299, i32 0, i32 0
  %301 = load ptr, ptr %300, align 8
  %302 = call { ptr, ptr, ptr, i32 } %301(ptr %292) #16
  store { ptr, ptr, ptr, i32 } %302, ptr %8, align 8
  %303 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  call void @assume_offset(ptr %8, ptr @Array)
  %304 = load ptr, ptr %35, align 8
  store ptr %304, ptr %10, align 8
  %305 = load i160, ptr %34, align 4
  store i160 %305, ptr %9, align 4
  %306 = load ptr, ptr %10, align 8
  %307 = insertvalue { ptr, i160 } undef, ptr %306, 0
  %308 = load i160, ptr %9, align 4
  %309 = insertvalue { ptr, i160 } %307, i160 %308, 1
  %310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %312 = load ptr, ptr %310, align 8
  store ptr %312, ptr %311, align 8
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %315 = load ptr, ptr %313, align 8
  store ptr %315, ptr %314, align 8
  %316 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %318 = load ptr, ptr %316, align 8
  store ptr %318, ptr %317, align 8
  %319 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %320 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %321 = load i32, ptr %319, align 4
  store i32 %321, ptr %320, align 4
  call void @set_offset(ptr %11, ptr @Array)
  %322 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %323 = load ptr, ptr %322, align 8
  %324 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %323, 0
  %325 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %326 = load ptr, ptr %325, align 8
  %327 = insertvalue { ptr, ptr, ptr, i32 } %324, ptr %326, 1
  %328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %329 = load ptr, ptr %328, align 8
  %330 = insertvalue { ptr, ptr, ptr, i32 } %327, ptr %329, 2
  %331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %332 = load i32, ptr %331, align 4
  %333 = insertvalue { ptr, ptr, ptr, i32 } %330, i32 %332, 3
  %334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %335 = load ptr, ptr %334, align 8
  %336 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %335, 0
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %338 = load ptr, ptr %337, align 8
  %339 = insertvalue { ptr, ptr, ptr, i32 } %336, ptr %338, 1
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %341 = load ptr, ptr %340, align 8
  %342 = insertvalue { ptr, ptr, ptr, i32 } %339, ptr %341, 2
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %344 = load i32, ptr %343, align 4
  %345 = insertvalue { ptr, ptr, ptr, i32 } %342, i32 %344, 3
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %347 = load ptr, ptr %346, align 8
  %348 = load ptr, ptr %20, align 8
  %349 = call ptr @llvm.invariant.start.p0(i64 688, ptr %348)
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %351 = load i32, ptr %350, align 4
  %352 = getelementptr ptr, ptr %348, i32 %351
  %353 = load ptr, ptr %352, align 8
  %354 = call ptr @typegetter_wrapper(ptr %353, ptr %347)
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %356 = load ptr, ptr %355, align 8
  %357 = load ptr, ptr %20, align 8
  %358 = call ptr @llvm.invariant.start.p0(i64 688, ptr %357)
  %359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %360 = load i32, ptr %359, align 4
  %361 = getelementptr ptr, ptr %357, i32 %360
  %362 = getelementptr ptr, ptr %361, i32 1
  %363 = load ptr, ptr %362, align 8
  %364 = call ptr @typegetter_wrapper(ptr %363, ptr %356)
  %365 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %366 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %367 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %368 = getelementptr [4 x ptr], ptr %367, i32 0, i32 2
  store ptr %364, ptr %368, align 8
  %369 = getelementptr [4 x ptr], ptr %367, i32 0, i32 1
  store ptr %354, ptr %369, align 8
  %370 = getelementptr [4 x ptr], ptr %367, i32 0, i32 3
  store ptr null, ptr %370, align 8
  %371 = call ptr @llvm.invariant.start.p0(i64 24, ptr %367)
  store ptr @Entry, ptr %367, align 8
  %372 = getelementptr [4 x ptr], ptr %366, i32 0, i32 2
  store ptr %367, ptr %372, align 8
  %373 = getelementptr [4 x ptr], ptr %366, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %373, align 8
  %374 = getelementptr [4 x ptr], ptr %366, i32 0, i32 3
  store ptr null, ptr %374, align 8
  %375 = call ptr @llvm.invariant.start.p0(i64 24, ptr %366)
  store ptr @union_typ, ptr %366, align 8
  %376 = getelementptr [3 x ptr], ptr %365, i32 0, i32 1
  store ptr %366, ptr %376, align 8
  %377 = getelementptr [3 x ptr], ptr %365, i32 0, i32 2
  store ptr null, ptr %377, align 8
  %378 = call ptr @llvm.invariant.start.p0(i64 16, ptr %365)
  store ptr @Array, ptr %365, align 8
  %379 = getelementptr [4 x ptr], ptr %12, i32 0, i32 0
  store ptr %354, ptr %379, align 8
  %380 = getelementptr [4 x ptr], ptr %12, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %380, align 8
  %381 = getelementptr [4 x ptr], ptr %12, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %381, align 8
  %382 = getelementptr [4 x ptr], ptr %12, i32 0, i32 3
  store ptr %365, ptr %382, align 8
  %383 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %384 = call ptr @llvm.invariant.start.p0(i64 688, ptr %335)
  %385 = getelementptr ptr, ptr %335, i32 %344
  %386 = getelementptr ptr, ptr %385, i32 21
  %387 = load ptr, ptr %386, align 8
  %388 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 0
  store ptr %306, ptr %388, align 8
  %389 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 1
  store ptr @i32_typ, ptr %389, align 8
  %390 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 2
  store ptr @i32_typ, ptr %390, align 8
  %391 = getelementptr { ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 3
  store ptr %323, ptr %391, align 8
  %392 = call ptr @behavior_wrapper(ptr %387, { ptr, ptr, ptr, i32 } %345, ptr %13)
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  %393 = call { ptr, i160 } %392({ ptr, ptr, ptr, i32 } %345, { ptr, ptr, ptr, i32 } %345, ptr %12, { ptr, i160 } %309, i32 %.reload16, i32 %290, { ptr, ptr, ptr, i32 } %333)
  store { ptr, i160 } %393, ptr %14, align 8
  %394 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %395 = load ptr, ptr %394, align 8
  %396 = ptrtoint ptr %395 to i64
  %397 = icmp eq i64 %396, ptrtoint (ptr @nil_typ to i64)
  %398 = icmp eq i64 %396, 0
  %399 = or i1 %397, %398
  %400 = icmp eq i1 %399, false
  %401 = icmp ne i1 %399, false
  %402 = zext i1 %401 to i32
  store i32 %402, ptr %.reg2mem9, align 4
  br i1 %400, label %403, label %404

403:                                              ; preds = %250
  store { ptr, i160 } poison, ptr %.reg2mem26, align 8
  br label %409

404:                                              ; preds = %250
  store [0 x i8] undef, ptr %16, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %17, align 4
  %405 = load ptr, ptr %17, align 8
  %406 = insertvalue { ptr, i160 } undef, ptr %405, 0
  %407 = load i160, ptr %16, align 4
  %408 = insertvalue { ptr, i160 } %406, i160 %407, 1
  store { ptr, i160 } %408, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem26, align 8
  br label %409

409:                                              ; preds = %404, %403
  %.reload27 = load { ptr, i160 }, ptr %.reg2mem26, align 8
  store { ptr, i160 } %.reload27, ptr %.reg2mem5, align 8
  br label %410

410:                                              ; preds = %409
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem22, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem24, align 8
  br label %411

411:                                              ; preds = %410, %249
  %.reload25 = load { ptr, i160 }, ptr %.reg2mem24, align 8
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  store { ptr, i160 } %.reload25, ptr %.reg2mem3, align 8
  store i32 %.reload23, ptr %.reg2mem1, align 4
  br label %412

412:                                              ; preds = %411
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %413 = zext i32 %.reload2 to i64
  %414 = trunc i64 %413 to i32
  switch i32 %414, label %430 [
    i32 0, label %415
  ]

415:                                              ; preds = %412
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  %416 = select i1 %.reload13, ptr %241, ptr %14
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  %417 = select i1 %.reload12, ptr %5, ptr %15
  %418 = getelementptr { ptr, i160 }, ptr %416, i32 0, i32 0
  %419 = getelementptr { ptr, i160 }, ptr %417, i32 0, i32 0
  %420 = load ptr, ptr %418, align 8
  store ptr %420, ptr %419, align 8
  %421 = getelementptr { ptr, i160 }, ptr %416, i32 0, i32 1
  %422 = getelementptr { ptr, i160 }, ptr %417, i32 0, i32 1
  %423 = load i160, ptr %421, align 4
  store i160 %423, ptr %422, align 4
  %424 = getelementptr { ptr, i160 }, ptr %417, i32 0, i32 0
  %425 = load ptr, ptr %424, align 8
  %426 = insertvalue { ptr, i160 } undef, ptr %425, 0
  %427 = getelementptr { ptr, i160 }, ptr %417, i32 0, i32 1
  %428 = load i160, ptr %427, align 4
  %429 = insertvalue { ptr, i160 } %426, i160 %428, 1
  store { ptr, i160 } %429, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem20, align 8
  br label %431

430:                                              ; preds = %412
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem20, align 8
  br label %431

431:                                              ; preds = %430, %415
  %.reload21 = load { ptr, i160 }, ptr %.reg2mem20, align 8
  ret { ptr, i160 } %.reload21
}

define void @HashMap_clear_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @HashMap)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 688, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = call ptr @typegetter_wrapper(ptr %26, ptr %20)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %6, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 688, ptr %30)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %33 = load i32, ptr %32, align 4
  %34 = getelementptr ptr, ptr %30, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = call ptr @typegetter_wrapper(ptr %36, ptr %29)
  %38 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %39 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %40 = getelementptr [4 x ptr], ptr %39, i32 0, i32 2
  store ptr %37, ptr %40, align 8
  %41 = getelementptr [4 x ptr], ptr %39, i32 0, i32 1
  store ptr %27, ptr %41, align 8
  %42 = getelementptr [4 x ptr], ptr %39, i32 0, i32 3
  store ptr null, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 24, ptr %39)
  store ptr @Entry, ptr %39, align 8
  %44 = getelementptr [4 x ptr], ptr %38, i32 0, i32 2
  store ptr %39, ptr %44, align 8
  %45 = getelementptr [4 x ptr], ptr %38, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %45, align 8
  %46 = getelementptr [4 x ptr], ptr %38, i32 0, i32 3
  store ptr null, ptr %46, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 24, ptr %38)
  store ptr @union_typ, ptr %38, align 8
  %48 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %48, align 8
  %49 = getelementptr ptr, ptr %48, i32 1
  store ptr %38, ptr %49, align 8
  %50 = load ptr, ptr %48, align 8
  %51 = getelementptr ptr, ptr %50, i32 6
  %52 = load ptr, ptr %51, align 8
  %53 = call { i64, i64 } @size_wrapper(ptr %52, ptr %48)
  %54 = extractvalue { i64, i64 } %53, 0
  %55 = call ptr @bump_malloc(i64 %54)
  store ptr %38, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 8, ptr %55)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  store ptr @Array, ptr %57, align 8
  store ptr %55, ptr %58, align 8
  store i32 9, ptr %59, align 4
  %60 = call ptr @llvm.invariant.start.p0(i64 16, ptr %57)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %71, 3
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %6, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 688, ptr %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = getelementptr ptr, ptr %75, i32 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %74)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %6, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 688, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = call ptr @typegetter_wrapper(ptr %90, ptr %83)
  %92 = alloca [2 x ptr], align 8
  %93 = getelementptr [2 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %93, align 8
  %94 = getelementptr [2 x ptr], ptr %92, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %94, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 4, ptr %92)
  %96 = call ptr @llvm.invariant.start.p0(i64 600, ptr %62)
  %97 = getelementptr ptr, ptr %62, i32 %71
  %98 = getelementptr ptr, ptr %97, i32 7
  %99 = load ptr, ptr %98, align 8
  %100 = alloca { ptr, ptr }, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 0
  store ptr @i32_typ, ptr %101, align 8
  %102 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 1
  store ptr @i32_typ, ptr %102, align 8
  %103 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %72, ptr %100)
  call void %103({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr %92, i32 8, i32 8)
  %104 = alloca { ptr, ptr, ptr, i32 }, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 0
  %107 = load ptr, ptr %105, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 1
  %110 = load ptr, ptr %108, align 8
  store ptr %110, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 2
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 3
  %116 = load i32, ptr %114, align 4
  store i32 %116, ptr %115, align 4
  call void @set_offset(ptr %104, ptr @Array)
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %118 = load ptr, ptr %117, align 8
  %119 = load ptr, ptr %6, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 688, ptr %119)
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %122 = load i32, ptr %121, align 4
  %123 = getelementptr ptr, ptr %119, i32 %122
  %124 = getelementptr ptr, ptr %123, i32 3
  %125 = load ptr, ptr %124, align 8
  %126 = getelementptr { ptr, ptr }, ptr %125, i32 0, i32 1
  %127 = load ptr, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 0
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %129, 0
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 1
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 2
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %135, 2
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 3
  %138 = load i32, ptr %137, align 4
  %139 = insertvalue { ptr, ptr, ptr, i32 } %136, i32 %138, 3
  call void %127(ptr %118, { ptr, ptr, ptr, i32 } %139) #15
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = load ptr, ptr %6, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 688, ptr %142)
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %145 = load i32, ptr %144, align 4
  %146 = getelementptr ptr, ptr %142, i32 %145
  %147 = load ptr, ptr %146, align 8
  %148 = call ptr @typegetter_wrapper(ptr %147, ptr %141)
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = load ptr, ptr %6, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 688, ptr %151)
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %154 = load i32, ptr %153, align 4
  %155 = getelementptr ptr, ptr %151, i32 %154
  %156 = getelementptr ptr, ptr %155, i32 1
  %157 = load ptr, ptr %156, align 8
  %158 = call ptr @typegetter_wrapper(ptr %157, ptr %150)
  %159 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %160 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %161 = getelementptr [4 x ptr], ptr %160, i32 0, i32 2
  store ptr %158, ptr %161, align 8
  %162 = getelementptr [4 x ptr], ptr %160, i32 0, i32 1
  store ptr %148, ptr %162, align 8
  %163 = getelementptr [4 x ptr], ptr %160, i32 0, i32 3
  store ptr null, ptr %163, align 8
  %164 = call ptr @llvm.invariant.start.p0(i64 24, ptr %160)
  store ptr @Entry, ptr %160, align 8
  %165 = getelementptr [4 x ptr], ptr %159, i32 0, i32 2
  store ptr %160, ptr %165, align 8
  %166 = getelementptr [4 x ptr], ptr %159, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %166, align 8
  %167 = getelementptr [4 x ptr], ptr %159, i32 0, i32 3
  store ptr null, ptr %167, align 8
  %168 = call ptr @llvm.invariant.start.p0(i64 24, ptr %159)
  store ptr @union_typ, ptr %159, align 8
  %169 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %169, align 8
  %170 = getelementptr ptr, ptr %169, i32 1
  store ptr %159, ptr %170, align 8
  %171 = load ptr, ptr %169, align 8
  %172 = getelementptr ptr, ptr %171, i32 6
  %173 = load ptr, ptr %172, align 8
  %174 = call { i64, i64 } @size_wrapper(ptr %173, ptr %169)
  %175 = extractvalue { i64, i64 } %174, 0
  %176 = call ptr @bump_malloc(i64 %175)
  store ptr %159, ptr %176, align 8
  %177 = call ptr @llvm.invariant.start.p0(i64 8, ptr %176)
  %178 = alloca { ptr, ptr, ptr, i32 }, align 8
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 1
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 3
  store ptr @Array, ptr %178, align 8
  store ptr %176, ptr %179, align 8
  store i32 9, ptr %180, align 4
  %181 = call ptr @llvm.invariant.start.p0(i64 16, ptr %178)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 0
  %183 = load ptr, ptr %182, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %183, 0
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %186, 1
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 2
  %189 = load ptr, ptr %188, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } %187, ptr %189, 2
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 3
  %192 = load i32, ptr %191, align 4
  %193 = insertvalue { ptr, ptr, ptr, i32 } %190, i32 %192, 3
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %195 = load ptr, ptr %194, align 8
  %196 = load ptr, ptr %6, align 8
  %197 = call ptr @llvm.invariant.start.p0(i64 688, ptr %196)
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %199 = load i32, ptr %198, align 4
  %200 = getelementptr ptr, ptr %196, i32 %199
  %201 = load ptr, ptr %200, align 8
  %202 = call ptr @typegetter_wrapper(ptr %201, ptr %195)
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = load ptr, ptr %6, align 8
  %206 = call ptr @llvm.invariant.start.p0(i64 688, ptr %205)
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %208 = load i32, ptr %207, align 4
  %209 = getelementptr ptr, ptr %205, i32 %208
  %210 = getelementptr ptr, ptr %209, i32 1
  %211 = load ptr, ptr %210, align 8
  %212 = call ptr @typegetter_wrapper(ptr %211, ptr %204)
  %213 = alloca [2 x ptr], align 8
  %214 = getelementptr [2 x ptr], ptr %213, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %214, align 8
  %215 = getelementptr [2 x ptr], ptr %213, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %215, align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 4, ptr %213)
  %217 = call ptr @llvm.invariant.start.p0(i64 600, ptr %183)
  %218 = getelementptr ptr, ptr %183, i32 %192
  %219 = getelementptr ptr, ptr %218, i32 7
  %220 = load ptr, ptr %219, align 8
  %221 = alloca { ptr, ptr }, align 8
  %222 = getelementptr { ptr, ptr }, ptr %221, i32 0, i32 0
  store ptr @i32_typ, ptr %222, align 8
  %223 = getelementptr { ptr, ptr }, ptr %221, i32 0, i32 1
  store ptr @i32_typ, ptr %223, align 8
  %224 = call ptr @behavior_wrapper(ptr %220, { ptr, ptr, ptr, i32 } %193, ptr %221)
  call void %224({ ptr, ptr, ptr, i32 } %193, { ptr, ptr, ptr, i32 } %193, ptr %213, i32 8, i32 8)
  %225 = alloca { ptr, ptr, ptr, i32 }, align 8
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 0
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 0
  %228 = load ptr, ptr %226, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 1
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 1
  %231 = load ptr, ptr %229, align 8
  store ptr %231, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 2
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 2
  %234 = load ptr, ptr %232, align 8
  store ptr %234, ptr %233, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 3
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 3
  %237 = load i32, ptr %235, align 4
  store i32 %237, ptr %236, align 4
  call void @set_offset(ptr %225, ptr @Array)
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %239 = load ptr, ptr %238, align 8
  %240 = load ptr, ptr %6, align 8
  %241 = call ptr @llvm.invariant.start.p0(i64 688, ptr %240)
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %243 = load i32, ptr %242, align 4
  %244 = getelementptr ptr, ptr %240, i32 %243
  %245 = getelementptr ptr, ptr %244, i32 4
  %246 = load ptr, ptr %245, align 8
  %247 = getelementptr { ptr, ptr }, ptr %246, i32 0, i32 1
  %248 = load ptr, ptr %247, align 8
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 0
  %250 = load ptr, ptr %249, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %250, 0
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 1
  %253 = load ptr, ptr %252, align 8
  %254 = insertvalue { ptr, ptr, ptr, i32 } %251, ptr %253, 1
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 2
  %256 = load ptr, ptr %255, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } %254, ptr %256, 2
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 3
  %259 = load i32, ptr %258, align 4
  %260 = insertvalue { ptr, ptr, ptr, i32 } %257, i32 %259, 3
  call void %248(ptr %239, { ptr, ptr, ptr, i32 } %260) #15
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %262 = load ptr, ptr %261, align 8
  %263 = load ptr, ptr %6, align 8
  %264 = call ptr @llvm.invariant.start.p0(i64 688, ptr %263)
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %266 = load i32, ptr %265, align 4
  %267 = getelementptr ptr, ptr %263, i32 %266
  %268 = getelementptr ptr, ptr %267, i32 5
  %269 = load ptr, ptr %268, align 8
  %270 = getelementptr { ptr, ptr }, ptr %269, i32 0, i32 1
  %271 = load ptr, ptr %270, align 8
  call void %271(ptr %262, i32 0) #15
  ret void
}

define i32 @HashMap_size_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @HashMap)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 688, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 5
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define { ptr, ptr, ptr, i32 } @HashMap_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @HashMap)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 688, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Array)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %6, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 688, ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr ptr, ptr %35, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 4
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call { ptr, ptr, ptr, i32 } %43(ptr %34) #16
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %44, ptr %45, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 16, ptr %45)
  call void @assume_offset(ptr %45, ptr @Array)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %6, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 688, ptr %49)
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = getelementptr ptr, ptr %49, i32 %52
  %54 = load ptr, ptr %53, align 8
  %55 = call ptr @typegetter_wrapper(ptr %54, ptr %48)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = load ptr, ptr %6, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 688, ptr %58)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %61 = load i32, ptr %60, align 4
  %62 = getelementptr ptr, ptr %58, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @typegetter_wrapper(ptr %64, ptr %57)
  %66 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %67 = getelementptr [4 x ptr], ptr %66, i32 0, i32 2
  store ptr %65, ptr %67, align 8
  %68 = getelementptr [4 x ptr], ptr %66, i32 0, i32 1
  store ptr %55, ptr %68, align 8
  %69 = getelementptr [4 x ptr], ptr %66, i32 0, i32 3
  store ptr null, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 24, ptr %66)
  store ptr @Pair, ptr %66, align 8
  %71 = alloca [4 x ptr], align 8
  store ptr @HashMapIterator, ptr %71, align 8
  %72 = getelementptr ptr, ptr %71, i32 1
  store ptr %55, ptr %72, align 8
  %73 = getelementptr ptr, ptr %71, i32 2
  store ptr %65, ptr %73, align 8
  %74 = getelementptr ptr, ptr %71, i32 3
  store ptr %66, ptr %74, align 8
  %75 = load ptr, ptr %71, align 8
  %76 = getelementptr ptr, ptr %75, i32 6
  %77 = load ptr, ptr %76, align 8
  %78 = call { i64, i64 } @size_wrapper(ptr %77, ptr %71)
  %79 = extractvalue { i64, i64 } %78, 0
  %80 = call ptr @bump_malloc(i64 %79)
  store ptr %55, ptr %80, align 8
  %81 = getelementptr ptr, ptr %80, i32 1
  store ptr %65, ptr %81, align 8
  %82 = getelementptr ptr, ptr %80, i32 2
  store ptr %66, ptr %82, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 24, ptr %80)
  %84 = alloca { ptr, ptr, ptr, i32 }, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  store ptr @HashMapIterator, ptr %84, align 8
  store ptr %80, ptr %85, align 8
  store i32 9, ptr %86, align 4
  %87 = call ptr @llvm.invariant.start.p0(i64 16, ptr %84)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %6, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 688, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 3
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr, ptr, ptr, i32 } %98(ptr %89) #16
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %99, ptr %100, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  call void @assume_offset(ptr %100, ptr @Array)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = load ptr, ptr %6, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 688, ptr %104)
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = getelementptr ptr, ptr %104, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 4
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = call { ptr, ptr, ptr, i32 } %112(ptr %103) #16
  %114 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %113, ptr %114, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %114)
  call void @assume_offset(ptr %114, ptr @Array)
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 0
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %122 = load ptr, ptr %120, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 2
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %125 = load ptr, ptr %123, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 3
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %128 = load i32, ptr %126, align 4
  store i32 %128, ptr %127, align 4
  call void @set_offset(ptr %116, ptr @Array)
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %133, 1
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %136, 2
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %139 = load i32, ptr %138, align 4
  %140 = insertvalue { ptr, ptr, ptr, i32 } %137, i32 %139, 3
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %144 = load ptr, ptr %142, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %153 = load i32, ptr %151, align 4
  store i32 %153, ptr %152, align 4
  call void @set_offset(ptr %141, ptr @Array)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %158, 1
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %161, 2
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, i32 %164, 3
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %170, 1
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 2
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %176, 3
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %6, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 688, ptr %180)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = getelementptr ptr, ptr %180, i32 %183
  %185 = load ptr, ptr %184, align 8
  %186 = call ptr @typegetter_wrapper(ptr %185, ptr %179)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %188 = load ptr, ptr %187, align 8
  %189 = load ptr, ptr %6, align 8
  %190 = call ptr @llvm.invariant.start.p0(i64 688, ptr %189)
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %192 = load i32, ptr %191, align 4
  %193 = getelementptr ptr, ptr %189, i32 %192
  %194 = getelementptr ptr, ptr %193, i32 1
  %195 = load ptr, ptr %194, align 8
  %196 = call ptr @typegetter_wrapper(ptr %195, ptr %188)
  %197 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %198 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %199 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %200 = getelementptr [4 x ptr], ptr %199, i32 0, i32 2
  store ptr %196, ptr %200, align 8
  %201 = getelementptr [4 x ptr], ptr %199, i32 0, i32 1
  store ptr %186, ptr %201, align 8
  %202 = getelementptr [4 x ptr], ptr %199, i32 0, i32 3
  store ptr null, ptr %202, align 8
  %203 = call ptr @llvm.invariant.start.p0(i64 24, ptr %199)
  store ptr @Entry, ptr %199, align 8
  %204 = getelementptr [4 x ptr], ptr %198, i32 0, i32 2
  store ptr %199, ptr %204, align 8
  %205 = getelementptr [4 x ptr], ptr %198, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %205, align 8
  %206 = getelementptr [4 x ptr], ptr %198, i32 0, i32 3
  store ptr null, ptr %206, align 8
  %207 = call ptr @llvm.invariant.start.p0(i64 24, ptr %198)
  store ptr @union_typ, ptr %198, align 8
  %208 = getelementptr [3 x ptr], ptr %197, i32 0, i32 1
  store ptr %198, ptr %208, align 8
  %209 = getelementptr [3 x ptr], ptr %197, i32 0, i32 2
  store ptr null, ptr %209, align 8
  %210 = call ptr @llvm.invariant.start.p0(i64 16, ptr %197)
  store ptr @Array, ptr %197, align 8
  %211 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %212 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %213 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %214 = getelementptr [4 x ptr], ptr %213, i32 0, i32 2
  store ptr %196, ptr %214, align 8
  %215 = getelementptr [4 x ptr], ptr %213, i32 0, i32 1
  store ptr %186, ptr %215, align 8
  %216 = getelementptr [4 x ptr], ptr %213, i32 0, i32 3
  store ptr null, ptr %216, align 8
  %217 = call ptr @llvm.invariant.start.p0(i64 24, ptr %213)
  store ptr @Entry, ptr %213, align 8
  %218 = getelementptr [4 x ptr], ptr %212, i32 0, i32 2
  store ptr %213, ptr %218, align 8
  %219 = getelementptr [4 x ptr], ptr %212, i32 0, i32 1
  store ptr @_parameterization_Nil, ptr %219, align 8
  %220 = getelementptr [4 x ptr], ptr %212, i32 0, i32 3
  store ptr null, ptr %220, align 8
  %221 = call ptr @llvm.invariant.start.p0(i64 24, ptr %212)
  store ptr @union_typ, ptr %212, align 8
  %222 = getelementptr [3 x ptr], ptr %211, i32 0, i32 1
  store ptr %212, ptr %222, align 8
  %223 = getelementptr [3 x ptr], ptr %211, i32 0, i32 2
  store ptr null, ptr %223, align 8
  %224 = call ptr @llvm.invariant.start.p0(i64 16, ptr %211)
  store ptr @Array, ptr %211, align 8
  %225 = alloca [2 x ptr], align 8
  %226 = getelementptr [2 x ptr], ptr %225, i32 0, i32 0
  store ptr %197, ptr %226, align 8
  %227 = getelementptr [2 x ptr], ptr %225, i32 0, i32 1
  store ptr %211, ptr %227, align 8
  %228 = call ptr @llvm.invariant.start.p0(i64 4, ptr %225)
  %229 = call ptr @llvm.invariant.start.p0(i64 128, ptr %167)
  %230 = getelementptr ptr, ptr %167, i32 %176
  %231 = getelementptr ptr, ptr %230, i32 7
  %232 = load ptr, ptr %231, align 8
  %233 = alloca { ptr, ptr }, align 8
  %234 = getelementptr { ptr, ptr }, ptr %233, i32 0, i32 0
  store ptr %130, ptr %234, align 8
  %235 = getelementptr { ptr, ptr }, ptr %233, i32 0, i32 1
  store ptr %155, ptr %235, align 8
  %236 = call ptr @behavior_wrapper(ptr %232, { ptr, ptr, ptr, i32 } %177, ptr %233)
  call void %236({ ptr, ptr, ptr, i32 } %177, { ptr, ptr, ptr, i32 } %177, ptr %225, { ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %165)
  %237 = alloca { ptr, ptr, ptr, i32 }, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 0
  %240 = load ptr, ptr %238, align 8
  store ptr %240, ptr %239, align 8
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 1
  %243 = load ptr, ptr %241, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 2
  %246 = load ptr, ptr %244, align 8
  store ptr %246, ptr %245, align 8
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 3
  %249 = load i32, ptr %247, align 4
  store i32 %249, ptr %248, align 4
  call void @set_offset(ptr %237, ptr @Iterator2)
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 0
  %251 = load ptr, ptr %250, align 8
  %252 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %251, 0
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 1
  %254 = load ptr, ptr %253, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } %252, ptr %254, 1
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 2
  %257 = load ptr, ptr %256, align 8
  %258 = insertvalue { ptr, ptr, ptr, i32 } %255, ptr %257, 2
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %237, i32 0, i32 3
  %260 = load i32, ptr %259, align 4
  %261 = insertvalue { ptr, ptr, ptr, i32 } %258, i32 %260, 3
  ret { ptr, ptr, ptr, i32 } %261
}

define { i64, i64 } @_size_HashMapIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %29
  %37 = select i1 %36, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %29
  %38 = urem i64 %35, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %41
  %43 = add i64 %35, %42
  %44 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %37
  %45 = select i1 %44, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %37
  %46 = urem i64 %43, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %47 = icmp eq i64 %46, 0
  %48 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %46
  %49 = select i1 %47, i64 0, i64 %48
  %50 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %49
  %51 = add i64 %43, %50
  %52 = urem i64 %51, %45
  %53 = icmp eq i64 %52, 0
  %54 = sub i64 %45, %52
  %55 = select i1 %53, i64 0, i64 %54
  %56 = add i64 %51, %55
  %57 = insertvalue { i64, i64 } undef, i64 %56, 0
  %58 = insertvalue { i64, i64 } %57, i64 %45, 1
  ret { i64, i64 } %58
}

define ptr @HashMapIterator_field_HashMapIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @HashMapIterator_field_HashMapIterator_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @HashMapIterator_field_HashMapIterator_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @HashMapIterator_B_init_map_table1ArrayEntryK._V_or_Nil_map_table2ArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [16 x ptr], ptr %26, i32 0, i32 10
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @HashMapIterator_B_next_from_table_tableArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [16 x ptr], ptr %15, i32 0, i32 11
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @HashMapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [16 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @HashMapIterator_init_map_table1ArrayEntryK._V_or_Nil_map_table2ArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @HashMapIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Array)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Array)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 128, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 3
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Array)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Array)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 128, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 4
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %8, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 128, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 5
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr, ptr }, ptr %131, i32 0, i32 1
  %133 = load ptr, ptr %132, align 8
  call void %133(ptr %124, i32 0) #15
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = load ptr, ptr %8, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 128, ptr %136)
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %139 = load i32, ptr %138, align 4
  %140 = getelementptr ptr, ptr %136, i32 %139
  %141 = getelementptr ptr, ptr %140, i32 6
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, ptr }, ptr %142, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  call void %144(ptr %135, i1 false) #15
  ret void
}

define { ptr, i160 } @HashMapIterator_next_from_table_tableArrayEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = alloca i160, align 8
  %16 = alloca ptr, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem26 = alloca ptr, align 8
  %.reg2mem28 = alloca ptr, align 8
  %.reg2mem30 = alloca ptr, align 8
  %.reg2mem32 = alloca { ptr, i160 }, align 8
  %.reg2mem34 = alloca i32, align 4
  %.reg2mem36 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 16, ptr %17)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @HashMapIterator)
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %32, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = load i32, ptr %44, align 4
  store i32 %46, ptr %45, align 4
  call void @set_offset(ptr %34, ptr @Array)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %47, ptr %.reg2mem30, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %48, ptr %.reg2mem28, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  store ptr %49, ptr %.reg2mem26, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  store ptr %50, ptr %.reg2mem24, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  store ptr %51, ptr %.reg2mem22, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  store ptr %52, ptr %.reg2mem20, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %53, ptr %.reg2mem18, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %54, ptr %.reg2mem16, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %55, ptr %.reg2mem14, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %56, ptr %.reg2mem12, align 8
  br label %57

57:                                               ; preds = %190, %4
  %.reload31 = load ptr, ptr %.reg2mem30, align 8
  %58 = load ptr, ptr %.reload31, align 8
  %59 = load ptr, ptr %19, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 128, ptr %59)
  %.reload29 = load ptr, ptr %.reg2mem28, align 8
  %61 = load i32, ptr %.reload29, align 4
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 5
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = call i32 %66(ptr %58) #16
  %.reload27 = load ptr, ptr %.reg2mem26, align 8
  %68 = load ptr, ptr %.reload27, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %68, 0
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %70 = load ptr, ptr %.reload25, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 1
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %72 = load ptr, ptr %.reload23, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 2
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %74 = load i32, ptr %.reload21, align 4
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %74, 3
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %76 = load ptr, ptr %.reload19, align 8
  %77 = load ptr, ptr %19, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 128, ptr %77)
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %79 = load i32, ptr %.reload17, align 4
  %80 = getelementptr ptr, ptr %77, i32 %79
  %81 = load ptr, ptr %80, align 8
  %82 = call ptr @typegetter_wrapper(ptr %81, ptr %76)
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %83 = load ptr, ptr %.reload15, align 8
  %84 = load ptr, ptr %19, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 128, ptr %84)
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %86 = load i32, ptr %.reload13, align 4
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = call ptr @typegetter_wrapper(ptr %89, ptr %83)
  %91 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %92 = call ptr @llvm.invariant.start.p0(i64 600, ptr %68)
  %93 = getelementptr ptr, ptr %68, i32 %74
  %94 = getelementptr ptr, ptr %93, i32 8
  %95 = load ptr, ptr %94, align 8
  %96 = call ptr @behavior_wrapper(ptr %95, { ptr, ptr, ptr, i32 } %75, ptr %6)
  %97 = call i32 %96({ ptr, ptr, ptr, i32 } %75, { ptr, ptr, ptr, i32 } %75, ptr %5)
  %98 = icmp slt i32 %67, %97
  br i1 %98, label %99, label %186

99:                                               ; preds = %57
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %19, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 128, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 5
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = call i32 %110(ptr %101) #16
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %113, 0
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %116, 1
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %119, 2
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %122 = load i32, ptr %121, align 4
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, i32 %122, 3
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %125 = load ptr, ptr %124, align 8
  %126 = load ptr, ptr %19, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 128, ptr %126)
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %129 = load i32, ptr %128, align 4
  %130 = getelementptr ptr, ptr %126, i32 %129
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @typegetter_wrapper(ptr %131, ptr %125)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = load ptr, ptr %19, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 128, ptr %135)
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %138 = load i32, ptr %137, align 4
  %139 = getelementptr ptr, ptr %135, i32 %138
  %140 = getelementptr ptr, ptr %139, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = call ptr @typegetter_wrapper(ptr %141, ptr %134)
  %143 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %143, align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %145 = call ptr @llvm.invariant.start.p0(i64 600, ptr %113)
  %146 = getelementptr ptr, ptr %113, i32 %122
  %147 = getelementptr ptr, ptr %146, i32 15
  %148 = load ptr, ptr %147, align 8
  %149 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr @i32_typ, ptr %149, align 8
  %150 = call ptr @behavior_wrapper(ptr %148, { ptr, ptr, ptr, i32 } %123, ptr %8)
  %151 = call { ptr, i160 } %150({ ptr, ptr, ptr, i32 } %123, { ptr, ptr, ptr, i32 } %123, ptr %7, i32 %111)
  store { ptr, i160 } %151, ptr %9, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = load ptr, ptr %19, align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 128, ptr %154)
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %157 = load i32, ptr %156, align 4
  %158 = getelementptr ptr, ptr %154, i32 %157
  %159 = getelementptr ptr, ptr %158, i32 5
  %160 = load ptr, ptr %159, align 8
  %161 = getelementptr { ptr, ptr }, ptr %160, i32 0, i32 0
  %162 = load ptr, ptr %161, align 8
  %163 = call i32 %162(ptr %153) #16
  %164 = add i32 %163, 1
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %166 = load ptr, ptr %165, align 8
  %167 = load ptr, ptr %19, align 8
  %168 = call ptr @llvm.invariant.start.p0(i64 128, ptr %167)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %170 = load i32, ptr %169, align 4
  %171 = getelementptr ptr, ptr %167, i32 %170
  %172 = getelementptr ptr, ptr %171, i32 5
  %173 = load ptr, ptr %172, align 8
  %174 = getelementptr { ptr, ptr }, ptr %173, i32 0, i32 1
  %175 = load ptr, ptr %174, align 8
  call void %175(ptr %166, i32 %164) #15
  %176 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %177 = load ptr, ptr %176, align 8
  %178 = ptrtoint ptr %177 to i64
  %179 = icmp eq i64 %178, ptrtoint (ptr @nil_typ to i64)
  %180 = icmp eq i64 %178, 0
  %181 = or i1 %179, %180
  %182 = icmp eq i1 %181, false
  %183 = zext i1 %182 to i32
  store i32 %183, ptr %.reg2mem10, align 4
  %184 = icmp ne i1 %181, false
  %185 = zext i1 %184 to i32
  store i32 %185, ptr %.reg2mem8, align 4
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem34, align 4
  store i32 %.reload11, ptr %.reg2mem36, align 4
  br label %187

186:                                              ; preds = %57
  store i32 0, ptr %.reg2mem34, align 4
  store i32 2, ptr %.reg2mem36, align 4
  br label %187

187:                                              ; preds = %186, %99
  %.reload37 = load i32, ptr %.reg2mem36, align 4
  %.reload35 = load i32, ptr %.reg2mem34, align 4
  store i32 %.reload37, ptr %.reg2mem5, align 4
  store i32 %.reload35, ptr %.reg2mem3, align 4
  br label %188

188:                                              ; preds = %187
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %189 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %189, label %190, label %191

190:                                              ; preds = %188
  br label %57

191:                                              ; preds = %188
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %192 = zext i32 %.reload6 to i64
  %193 = trunc i64 %192 to i32
  switch i32 %193, label %258 [
    i32 1, label %194
  ]

194:                                              ; preds = %191
  %195 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %196 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 0
  %197 = load ptr, ptr %195, align 8
  store ptr %197, ptr %196, align 8
  %198 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %199 = getelementptr { ptr, i160 }, ptr %10, i32 0, i32 1
  %200 = load i160, ptr %198, align 4
  store i160 %200, ptr %199, align 4
  call void @set_offset(ptr %10, ptr @Entry)
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %202 = load ptr, ptr %201, align 8
  %203 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %202, 0
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = insertvalue { ptr, ptr, ptr, i32 } %203, ptr %205, 1
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %208 = load ptr, ptr %207, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } %206, ptr %208, 2
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %211 = load i32, ptr %210, align 4
  %212 = insertvalue { ptr, ptr, ptr, i32 } %209, i32 %211, 3
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %214 = load ptr, ptr %213, align 8
  %215 = load ptr, ptr %19, align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 128, ptr %215)
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %218 = load i32, ptr %217, align 4
  %219 = getelementptr ptr, ptr %215, i32 %218
  %220 = load ptr, ptr %219, align 8
  %221 = call ptr @typegetter_wrapper(ptr %220, ptr %214)
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %223 = load ptr, ptr %222, align 8
  %224 = load ptr, ptr %19, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 128, ptr %224)
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %227 = load i32, ptr %226, align 4
  %228 = getelementptr ptr, ptr %224, i32 %227
  %229 = getelementptr ptr, ptr %228, i32 1
  %230 = load ptr, ptr %229, align 8
  %231 = call ptr @typegetter_wrapper(ptr %230, ptr %223)
  %232 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %233 = call ptr @llvm.invariant.start.p0(i64 120, ptr %202)
  %234 = getelementptr ptr, ptr %202, i32 %211
  %235 = getelementptr ptr, ptr %234, i32 9
  %236 = load ptr, ptr %235, align 8
  %237 = call ptr @behavior_wrapper(ptr %236, { ptr, ptr, ptr, i32 } %212, ptr %12)
  %238 = call { ptr, ptr, ptr, i32 } %237({ ptr, ptr, ptr, i32 } %212, { ptr, ptr, ptr, i32 } %212, ptr %11)
  store { ptr, ptr, ptr, i32 } %238, ptr %13, align 8
  %239 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %242 = load ptr, ptr %240, align 8
  store ptr %242, ptr %241, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %245 = load ptr, ptr %243, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %248 = load ptr, ptr %246, align 8
  store ptr %248, ptr %247, align 8
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %251 = load i32, ptr %249, align 4
  store i32 %251, ptr %250, align 4
  call void @set_offset(ptr %14, ptr @Pair)
  %252 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %253 = load ptr, ptr %252, align 8
  %254 = insertvalue { ptr, i160 } undef, ptr %253, 0
  %255 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 1
  %256 = load i160, ptr %255, align 4
  %257 = insertvalue { ptr, i160 } %254, i160 %256, 1
  store { ptr, i160 } %257, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem32, align 8
  br label %263

258:                                              ; preds = %191
  store [0 x i8] undef, ptr %15, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %16, align 4
  %259 = load ptr, ptr %16, align 8
  %260 = insertvalue { ptr, i160 } undef, ptr %259, 0
  %261 = load i160, ptr %15, align 4
  %262 = insertvalue { ptr, i160 } %260, i160 %261, 1
  store { ptr, i160 } %262, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem32, align 8
  br label %263

263:                                              ; preds = %258, %194
  %.reload33 = load { ptr, i160 }, ptr %.reg2mem32, align 8
  ret { ptr, i160 } %.reload33
}

define { ptr, i160 } @HashMapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca [1 x ptr], align 8
  %13 = alloca { ptr }, align 8
  %14 = alloca { ptr, i160 }, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca { ptr, i160 }, align 8
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %.reg2mem17 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = load i32, ptr %27, align 4
  store i32 %29, ptr %28, align 4
  call void @set_offset(ptr %17, ptr @HashMapIterator)
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %17, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 128, ptr %32)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = getelementptr ptr, ptr %32, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 6
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call i1 %40(ptr %31) #16
  %42 = icmp eq i1 %41, false
  br i1 %42, label %43, label %182

43:                                               ; preds = %3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = load ptr, ptr %17, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 128, ptr %46)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %49 = load i32, ptr %48, align 4
  %50 = getelementptr ptr, ptr %46, i32 %49
  %51 = getelementptr ptr, ptr %50, i32 3
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = call { ptr, ptr, ptr, i32 } %54(ptr %45) #16
  store { ptr, ptr, ptr, i32 } %55, ptr %4, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  call void @assume_offset(ptr %4, ptr @Array)
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %68 = load i32, ptr %66, align 4
  store i32 %68, ptr %67, align 4
  call void @set_offset(ptr %5, ptr @Array)
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %73, 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %76, 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %79 = load i32, ptr %78, align 4
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, i32 %79, 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %82, 0
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 1
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %88, 2
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %91 = load i32, ptr %90, align 4
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %91, 3
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %17, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 128, ptr %95)
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %98 = load i32, ptr %97, align 4
  %99 = getelementptr ptr, ptr %95, i32 %98
  %100 = load ptr, ptr %99, align 8
  %101 = call ptr @typegetter_wrapper(ptr %100, ptr %94)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = load ptr, ptr %17, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 128, ptr %104)
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = getelementptr ptr, ptr %104, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = call ptr @typegetter_wrapper(ptr %110, ptr %103)
  %112 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %113 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %114 = getelementptr [4 x ptr], ptr %113, i32 0, i32 2
  store ptr @_parameterization_Nil, ptr %114, align 8
  %115 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %116 = getelementptr [4 x ptr], ptr %115, i32 0, i32 2
  store ptr %111, ptr %116, align 8
  %117 = getelementptr [4 x ptr], ptr %115, i32 0, i32 1
  store ptr %101, ptr %117, align 8
  %118 = getelementptr [4 x ptr], ptr %115, i32 0, i32 3
  store ptr null, ptr %118, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 24, ptr %115)
  store ptr @Entry, ptr %115, align 8
  %120 = getelementptr [4 x ptr], ptr %113, i32 0, i32 1
  store ptr %115, ptr %120, align 8
  %121 = getelementptr [4 x ptr], ptr %113, i32 0, i32 3
  store ptr null, ptr %121, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 24, ptr %113)
  store ptr @union_typ, ptr %113, align 8
  %123 = getelementptr [3 x ptr], ptr %112, i32 0, i32 1
  store ptr %113, ptr %123, align 8
  %124 = getelementptr [3 x ptr], ptr %112, i32 0, i32 2
  store ptr null, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 16, ptr %112)
  store ptr @Array, ptr %112, align 8
  %126 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr %112, ptr %126, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %128 = call ptr @llvm.invariant.start.p0(i64 128, ptr %82)
  %129 = getelementptr ptr, ptr %82, i32 %91
  %130 = getelementptr ptr, ptr %129, i32 8
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr %70, ptr %132, align 8
  %133 = call ptr @behavior_wrapper(ptr %131, { ptr, ptr, ptr, i32 } %92, ptr %7)
  %134 = call { ptr, i160 } %133({ ptr, ptr, ptr, i32 } %92, { ptr, ptr, ptr, i32 } %92, ptr %6, { ptr, ptr, ptr, i32 } %80)
  store { ptr, i160 } %134, ptr %8, align 8
  %135 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %136 = load ptr, ptr %135, align 8
  %137 = ptrtoint ptr %136 to i64
  %138 = icmp eq i64 %137, ptrtoint (ptr @nil_typ to i64)
  %139 = icmp eq i64 %137, 0
  %140 = or i1 %138, %139
  %141 = icmp eq i1 %140, false
  %142 = icmp ne i1 %140, false
  %143 = zext i1 %142 to i32
  store i32 %143, ptr %.reg2mem9, align 4
  br i1 %141, label %144, label %157

144:                                              ; preds = %43
  %145 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %146 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %149 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %150 = load i160, ptr %148, align 4
  store i160 %150, ptr %149, align 4
  call void @set_offset(ptr %9, ptr @Pair)
  %151 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, i160 } undef, ptr %152, 0
  %154 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %155 = load i160, ptr %154, align 4
  %156 = insertvalue { ptr, i160 } %153, i160 %155, 1
  store { ptr, i160 } %156, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem17, align 8
  br label %180

157:                                              ; preds = %43
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %159 = load ptr, ptr %158, align 8
  %160 = load ptr, ptr %17, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 128, ptr %160)
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %163 = load i32, ptr %162, align 4
  %164 = getelementptr ptr, ptr %160, i32 %163
  %165 = getelementptr ptr, ptr %164, i32 5
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr { ptr, ptr }, ptr %166, i32 0, i32 1
  %168 = load ptr, ptr %167, align 8
  call void %168(ptr %159, i32 0) #15
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = load ptr, ptr %17, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 128, ptr %171)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %174 = load i32, ptr %173, align 4
  %175 = getelementptr ptr, ptr %171, i32 %174
  %176 = getelementptr ptr, ptr %175, i32 6
  %177 = load ptr, ptr %176, align 8
  %178 = getelementptr { ptr, ptr }, ptr %177, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  call void %179(ptr %170, i1 true) #15
  store { ptr, i160 } poison, ptr %.reg2mem17, align 8
  br label %180

180:                                              ; preds = %157, %144
  %.reload18 = load { ptr, i160 }, ptr %.reg2mem17, align 8
  store { ptr, i160 } %.reload18, ptr %.reg2mem5, align 8
  br label %181

181:                                              ; preds = %180
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem15, align 8
  br label %183

182:                                              ; preds = %3
  store i32 1, ptr %.reg2mem13, align 4
  store { ptr, i160 } poison, ptr %.reg2mem15, align 8
  br label %183

183:                                              ; preds = %182, %181
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload16, ptr %.reg2mem3, align 8
  store i32 %.reload14, ptr %.reg2mem1, align 4
  br label %184

184:                                              ; preds = %183
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %185 = zext i32 %.reload2 to i64
  %186 = trunc i64 %185 to i32
  switch i32 %186, label %188 [
    i32 0, label %187
  ]

187:                                              ; preds = %184
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem11, align 8
  br label %286

188:                                              ; preds = %184
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %190 = load ptr, ptr %189, align 8
  %191 = load ptr, ptr %17, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 128, ptr %191)
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %194 = load i32, ptr %193, align 4
  %195 = getelementptr ptr, ptr %191, i32 %194
  %196 = getelementptr ptr, ptr %195, i32 4
  %197 = load ptr, ptr %196, align 8
  %198 = getelementptr { ptr, ptr }, ptr %197, i32 0, i32 0
  %199 = load ptr, ptr %198, align 8
  %200 = call { ptr, ptr, ptr, i32 } %199(ptr %190) #16
  store { ptr, ptr, ptr, i32 } %200, ptr %10, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  call void @assume_offset(ptr %10, ptr @Array)
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %210 = load ptr, ptr %208, align 8
  store ptr %210, ptr %209, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %213 = load i32, ptr %211, align 4
  store i32 %213, ptr %212, align 4
  call void @set_offset(ptr %11, ptr @Array)
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %215, 0
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %218, 1
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %221 = load ptr, ptr %220, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, ptr %221, 2
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %224 = load i32, ptr %223, align 4
  %225 = insertvalue { ptr, ptr, ptr, i32 } %222, i32 %224, 3
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %227 = load ptr, ptr %226, align 8
  %228 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %227, 0
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %230 = load ptr, ptr %229, align 8
  %231 = insertvalue { ptr, ptr, ptr, i32 } %228, ptr %230, 1
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } %231, ptr %233, 2
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %236 = load i32, ptr %235, align 4
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, i32 %236, 3
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %239 = load ptr, ptr %238, align 8
  %240 = load ptr, ptr %17, align 8
  %241 = call ptr @llvm.invariant.start.p0(i64 128, ptr %240)
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %243 = load i32, ptr %242, align 4
  %244 = getelementptr ptr, ptr %240, i32 %243
  %245 = load ptr, ptr %244, align 8
  %246 = call ptr @typegetter_wrapper(ptr %245, ptr %239)
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %248 = load ptr, ptr %247, align 8
  %249 = load ptr, ptr %17, align 8
  %250 = call ptr @llvm.invariant.start.p0(i64 128, ptr %249)
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %252 = load i32, ptr %251, align 4
  %253 = getelementptr ptr, ptr %249, i32 %252
  %254 = getelementptr ptr, ptr %253, i32 1
  %255 = load ptr, ptr %254, align 8
  %256 = call ptr @typegetter_wrapper(ptr %255, ptr %248)
  %257 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %258 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %259 = getelementptr [4 x ptr], ptr %258, i32 0, i32 2
  store ptr @_parameterization_Nil, ptr %259, align 8
  %260 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %261 = getelementptr [4 x ptr], ptr %260, i32 0, i32 2
  store ptr %256, ptr %261, align 8
  %262 = getelementptr [4 x ptr], ptr %260, i32 0, i32 1
  store ptr %246, ptr %262, align 8
  %263 = getelementptr [4 x ptr], ptr %260, i32 0, i32 3
  store ptr null, ptr %263, align 8
  %264 = call ptr @llvm.invariant.start.p0(i64 24, ptr %260)
  store ptr @Entry, ptr %260, align 8
  %265 = getelementptr [4 x ptr], ptr %258, i32 0, i32 1
  store ptr %260, ptr %265, align 8
  %266 = getelementptr [4 x ptr], ptr %258, i32 0, i32 3
  store ptr null, ptr %266, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 24, ptr %258)
  store ptr @union_typ, ptr %258, align 8
  %268 = getelementptr [3 x ptr], ptr %257, i32 0, i32 1
  store ptr %258, ptr %268, align 8
  %269 = getelementptr [3 x ptr], ptr %257, i32 0, i32 2
  store ptr null, ptr %269, align 8
  %270 = call ptr @llvm.invariant.start.p0(i64 16, ptr %257)
  store ptr @Array, ptr %257, align 8
  %271 = getelementptr [1 x ptr], ptr %12, i32 0, i32 0
  store ptr %257, ptr %271, align 8
  %272 = call ptr @llvm.invariant.start.p0(i64 1, ptr %12)
  %273 = call ptr @llvm.invariant.start.p0(i64 128, ptr %227)
  %274 = getelementptr ptr, ptr %227, i32 %236
  %275 = getelementptr ptr, ptr %274, i32 8
  %276 = load ptr, ptr %275, align 8
  %277 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  store ptr %215, ptr %277, align 8
  %278 = call ptr @behavior_wrapper(ptr %276, { ptr, ptr, ptr, i32 } %237, ptr %13)
  %279 = call { ptr, i160 } %278({ ptr, ptr, ptr, i32 } %237, { ptr, ptr, ptr, i32 } %237, ptr %12, { ptr, ptr, ptr, i32 } %225)
  store { ptr, i160 } %279, ptr %14, align 8
  %280 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %281 = load ptr, ptr %280, align 8
  %282 = insertvalue { ptr, i160 } undef, ptr %281, 0
  %283 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 1
  %284 = load i160, ptr %283, align 4
  %285 = insertvalue { ptr, i160 } %282, i160 %284, 1
  store { ptr, i160 } %285, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem11, align 8
  br label %286

286:                                              ; preds = %188, %187
  %.reload12 = load { ptr, i160 }, ptr %.reg2mem11, align 8
  ret { ptr, i160 } %.reload12
}

define i1 @HashMapIterator_getter_on_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = getelementptr i8, ptr %0, i64 %36
  %38 = load i1, ptr %37, align 1
  ret i1 %38
}

define void @HashMapIterator_setter_on_second(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 %32, %36
  %38 = getelementptr i8, ptr %0, i64 %37
  store i1 %1, ptr %38, align 1
  ret void
}

define i32 @HashMapIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %25, %29
  %31 = getelementptr i8, ptr %0, i64 %30
  %32 = load i32, ptr %31, align 4
  ret i32 %32
}

define void @HashMapIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %26, %30
  %32 = getelementptr i8, ptr %0, i64 %31
  store i32 %1, ptr %32, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @HashMapIterator_getter_map_table2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @HashMapIterator_setter_map_table2(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @HashMapIterator_getter_map_table1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @HashMapIterator_setter_map_table1(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  ret void
}

define i32 @i32_hasher(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = add i32 %0, 2127912214
  %3 = shl i32 %0, 12
  %4 = add i32 %2, %3
  %5 = xor i32 %4, -949894596
  %6 = ashr i32 %4, 19
  %7 = xor i32 %5, %6
  %8 = add i32 %7, 374761393
  %9 = shl i32 %7, 5
  %10 = add i32 %8, %9
  %11 = add i32 %10, -744332180
  %12 = shl i32 %10, 9
  %13 = xor i32 %11, %12
  %14 = add i32 %13, -42973499
  %15 = shl i32 %13, 3
  %16 = add i32 %14, %15
  %17 = xor i32 %16, -1252372727
  %18 = ashr i32 %16, 16
  %19 = xor i32 %17, %18
  ret i32 %19
}

define i32 @HashMap_getter_max_displacements(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %35
  %37 = add i64 %31, %36
  %38 = urem i64 %37, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %41
  %43 = add i64 %37, %42
  %44 = urem i64 %43, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %45 = icmp eq i64 %44, 0
  %46 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %44
  %47 = select i1 %45, i64 0, i64 %46
  %48 = add i64 %43, %47
  %49 = getelementptr i8, ptr %0, i64 %48
  %50 = load i32, ptr %49, align 4
  ret i32 %50
}

define void @HashMap_setter_max_displacements(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %36
  %38 = add i64 %32, %37
  %39 = urem i64 %38, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %40 = icmp eq i64 %39, 0
  %41 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %39
  %42 = select i1 %40, i64 0, i64 %41
  %43 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %42
  %44 = add i64 %38, %43
  %45 = urem i64 %44, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %46 = icmp eq i64 %45, 0
  %47 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %45
  %48 = select i1 %46, i64 0, i64 %47
  %49 = add i64 %44, %48
  %50 = getelementptr i8, ptr %0, i64 %49
  store i32 %1, ptr %50, align 4
  ret void
}

define { ptr } @HashMap_getter_eq(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %35
  %37 = add i64 %31, %36
  %38 = urem i64 %37, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 %37, %41
  %43 = getelementptr i8, ptr %0, i64 %42
  %44 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr } undef, ptr %45, 0
  ret { ptr } %46
}

define void @HashMap_setter_eq(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %36
  %38 = add i64 %32, %37
  %39 = urem i64 %38, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %40 = icmp eq i64 %39, 0
  %41 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %39
  %42 = select i1 %40, i64 0, i64 %41
  %43 = add i64 %38, %42
  %44 = getelementptr i8, ptr %0, i64 %43
  %45 = alloca ptr, align 8
  store { ptr } %1, ptr %45, align 8
  %46 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  ret void
}

define { ptr } @HashMap_getter_hasher(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = getelementptr i8, ptr %0, i64 %36
  %38 = getelementptr { ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr } undef, ptr %39, 0
  ret { ptr } %40
}

define void @HashMap_setter_hasher(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 %32, %36
  %38 = getelementptr i8, ptr %0, i64 %37
  %39 = alloca ptr, align 8
  store { ptr } %1, ptr %39, align 8
  %40 = getelementptr { ptr }, ptr %38, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  ret void
}

define i32 @HashMap_getter_size(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %25, %29
  %31 = getelementptr i8, ptr %0, i64 %30
  %32 = load i32, ptr %31, align 4
  ret i32 %32
}

define void @HashMap_setter_size(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %26, %30
  %32 = getelementptr i8, ptr %0, i64 %31
  store i32 %1, ptr %32, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @HashMap_getter_table2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @HashMap_setter_table2(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @HashMap_getter_table1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @HashMap_setter_table1(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  ret void
}

define i1 @i32_eq(i32 %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = icmp eq i32 %0, %1
  ret i1 %3
}

define i32 @string_hasher({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca {}, align 8
  %4 = alloca { ptr, i160 }, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem24 = alloca i32, align 4
  %.reg2mem26 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %23 = load i32, ptr %21, align 4
  store i32 %23, ptr %22, align 4
  call void @set_offset(ptr %11, ptr @String)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %25, 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %31, 2
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %34, 3
  %36 = alloca [0 x ptr], align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr %36)
  %38 = call ptr @llvm.invariant.start.p0(i64 280, ptr %25)
  %39 = getelementptr ptr, ptr %25, i32 %34
  %40 = getelementptr ptr, ptr %39, i32 15
  %41 = load ptr, ptr %40, align 8
  %42 = alloca {}, align 8
  %43 = call ptr @behavior_wrapper(ptr %41, { ptr, ptr, ptr, i32 } %35, ptr %42)
  %44 = call { ptr, ptr, ptr, i32 } %43({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr %36)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %44, ptr %45, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 16, ptr %45)
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %50 = load ptr, ptr %48, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %59 = load i32, ptr %57, align 4
  store i32 %59, ptr %58, align 4
  call void @set_offset(ptr %47, ptr @StringIterator)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @StringIterator)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  %86 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  store ptr %87, ptr %.reg2mem20, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  store ptr %88, ptr %.reg2mem18, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  store ptr %89, ptr %.reg2mem16, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  store ptr %90, ptr %.reg2mem14, align 8
  %91 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  store ptr %91, ptr %.reg2mem12, align 8
  store i32 0, ptr %.reg2mem26, align 4
  br label %92

92:                                               ; preds = %171, %1
  %.reload27 = load i32, ptr %.reg2mem26, align 4
  store i32 %.reload27, ptr %.reg2mem8, align 4
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %93 = load ptr, ptr %.reload21, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %95 = load ptr, ptr %.reload19, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 1
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %97 = load ptr, ptr %.reload17, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 2
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %99 = load i32, ptr %.reload15, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %99, 3
  %101 = call ptr @llvm.invariant.start.p0(i64 0, ptr %2)
  %102 = call ptr @llvm.invariant.start.p0(i64 48, ptr %93)
  %103 = getelementptr ptr, ptr %93, i32 %99
  %104 = getelementptr ptr, ptr %103, i32 3
  %105 = load ptr, ptr %104, align 8
  %106 = call ptr @behavior_wrapper(ptr %105, { ptr, ptr, ptr, i32 } %100, ptr %3)
  %107 = call { ptr, i160 } %106({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr %2)
  store { ptr, i160 } %107, ptr %4, align 8
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %108 = load ptr, ptr %.reload13, align 8
  %109 = ptrtoint ptr %108 to i64
  %110 = icmp eq i64 %109, ptrtoint (ptr @nil_typ to i64)
  %111 = icmp eq i64 %109, 0
  %112 = or i1 %110, %111
  %113 = icmp eq i1 %112, false
  store i1 %113, ptr %.reg2mem5, align 1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload7, label %114, label %168

114:                                              ; preds = %92
  %115 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %116 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %117 = load ptr, ptr %115, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %119 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %120 = load i160, ptr %118, align 4
  store i160 %120, ptr %119, align 4
  call void @set_offset(ptr %5, ptr @Character)
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %122, 0
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %125 = load ptr, ptr %124, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %125, 1
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %128, 2
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %131 = load i32, ptr %130, align 4
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, i32 %131, 3
  %133 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %134 = call ptr @llvm.invariant.start.p0(i64 40, ptr %122)
  %135 = getelementptr ptr, ptr %122, i32 %131
  %136 = getelementptr ptr, ptr %135, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = call ptr @behavior_wrapper(ptr %137, { ptr, ptr, ptr, i32 } %132, ptr %7)
  %139 = call i8 %138({ ptr, ptr, ptr, i32 } %132, { ptr, ptr, ptr, i32 } %132, ptr %6)
  %140 = sext i8 %139 to i32
  %.reload11 = load i32, ptr %.reg2mem8, align 4
  %141 = mul i32 %.reload11, 31
  %142 = add i32 %141, %140
  %143 = and i32 %142, 2147483647
  store i32 %143, ptr %.reg2mem3, align 4
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %146 = load ptr, ptr %144, align 8
  store ptr %146, ptr %145, align 8
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %149 = load ptr, ptr %147, align 8
  store ptr %149, ptr %148, align 8
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %152 = load ptr, ptr %150, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %155 = load i32, ptr %153, align 4
  store i32 %155, ptr %154, align 4
  call void @set_offset(ptr %8, ptr @Character)
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %158 = load ptr, ptr %156, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %161 = load ptr, ptr %159, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %164 = load ptr, ptr %162, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %167 = load i32, ptr %165, align 4
  store i32 %167, ptr %166, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem24, align 4
  br label %169

168:                                              ; preds = %92
  store i32 poison, ptr %.reg2mem24, align 4
  br label %169

169:                                              ; preds = %168, %114
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  store i32 %.reload25, ptr %.reg2mem1, align 4
  br label %170

170:                                              ; preds = %169
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  %.reload10 = load i32, ptr %.reg2mem8, align 4
  store i32 %.reload2, ptr %.reg2mem22, align 4
  br i1 %.reload6, label %171, label %172

171:                                              ; preds = %170
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  store i32 %.reload23, ptr %.reg2mem, align 4
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem26, align 4
  br label %92

172:                                              ; preds = %170
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  ret i32 %.reload9
}

define i1 @string_eq({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 16, ptr %3)
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = load i32, ptr %43, align 4
  store i32 %45, ptr %44, align 4
  call void @set_offset(ptr %33, ptr @String)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %53, 2
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %56, 3
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  %70 = alloca [1 x ptr], align 8
  %71 = getelementptr [1 x ptr], ptr %70, i32 0, i32 0
  store ptr @_parameterization_String, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 1, ptr %70)
  %73 = call ptr @llvm.invariant.start.p0(i64 280, ptr %59)
  %74 = getelementptr ptr, ptr %59, i32 %68
  %75 = getelementptr ptr, ptr %74, i32 11
  %76 = load ptr, ptr %75, align 8
  %77 = alloca { ptr }, align 8
  %78 = getelementptr { ptr }, ptr %77, i32 0, i32 0
  store ptr %47, ptr %78, align 8
  %79 = call ptr @behavior_wrapper(ptr %76, { ptr, ptr, ptr, i32 } %69, ptr %77)
  %80 = call i1 %79({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr %70, { ptr, ptr, ptr, i32 } %57)
  ret i1 %80
}

define { i64, i64 } @_size_Pair(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = getelementptr ptr, ptr %0, i32 1
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr [7 x ptr], ptr %14, i32 0, i32 6
  %16 = load ptr, ptr %15, align 8
  %17 = call { i64, i64 } @size_wrapper(ptr %16, ptr %13)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = extractvalue { i64, i64 } %17, 1
  %20 = icmp ugt i64 %19, %5
  %21 = select i1 %20, i64 %19, i64 %5
  %22 = urem i64 %11, %19
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %19, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 %18, %25
  %27 = add i64 %11, %26
  %28 = getelementptr ptr, ptr %0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr [7 x ptr], ptr %30, i32 0, i32 6
  %32 = load ptr, ptr %31, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr %32, ptr %29)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = extractvalue { i64, i64 } %33, 1
  %36 = icmp ugt i64 %35, %21
  %37 = select i1 %36, i64 %35, i64 %21
  %38 = urem i64 %27, %35
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 %35, %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 %34, %41
  %43 = add i64 %27, %42
  %44 = urem i64 %43, %37
  %45 = icmp eq i64 %44, 0
  %46 = sub i64 %37, %44
  %47 = select i1 %45, i64 0, i64 %46
  %48 = add i64 %43, %47
  %49 = insertvalue { i64, i64 } undef, i64 %48, 0
  %50 = insertvalue { i64, i64 } %49, i64 %37, 1
  ret { i64, i64 } %50
}

define ptr @Pair_field_Pair_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Pair_field_Pair_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [10 x ptr], ptr %26, i32 0, i32 7
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 8
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Pair)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = alloca i160, align 8
  %23 = alloca ptr, align 8
  %24 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  store ptr %25, ptr %23, align 8
  %26 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %27 = load i160, ptr %26, align 4
  store i160 %27, ptr %22, align 4
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load ptr, ptr %23, align 8
  store ptr %30, ptr %29, align 8
  %31 = load i160, ptr %22, align 4
  store i160 %31, ptr %28, align 4
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %8, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 80, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %29, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = load i160, ptr %28, align 4
  %46 = insertvalue { ptr, i160 } %44, i160 %45, 1
  call void %42(ptr %33, { ptr, i160 } %46) #15
  %47 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %47, align 8
  %48 = alloca i160, align 8
  %49 = alloca ptr, align 8
  %50 = getelementptr { ptr, i160 }, ptr %47, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  store ptr %51, ptr %49, align 8
  %52 = getelementptr { ptr, i160 }, ptr %47, i32 0, i32 1
  %53 = load i160, ptr %52, align 4
  store i160 %53, ptr %48, align 4
  %54 = alloca i160, align 8
  %55 = alloca ptr, align 8
  %56 = load ptr, ptr %49, align 8
  store ptr %56, ptr %55, align 8
  %57 = load i160, ptr %48, align 4
  store i160 %57, ptr %54, align 4
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %8, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 80, ptr %60)
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = getelementptr ptr, ptr %60, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 3
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %55, align 8
  %70 = insertvalue { ptr, i160 } undef, ptr %69, 0
  %71 = load i160, ptr %54, align 4
  %72 = insertvalue { ptr, i160 } %70, i160 %71, 1
  call void %68(ptr %59, { ptr, i160 } %72) #15
  ret void
}

define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Pair)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } %29(ptr %20) #16
  %31 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %30, ptr %31, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  store ptr %35, ptr %33, align 8
  %36 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %37 = load i160, ptr %36, align 4
  store i160 %37, ptr %32, align 4
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = load ptr, ptr %33, align 8
  store ptr %40, ptr %39, align 8
  %41 = load i160, ptr %32, align 4
  store i160 %41, ptr %38, align 4
  %42 = load ptr, ptr %39, align 8
  %43 = insertvalue { ptr, i160 } undef, ptr %42, 0
  %44 = load i160, ptr %38, align 4
  %45 = insertvalue { ptr, i160 } %43, i160 %44, 1
  ret { ptr, i160 } %45
}

define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Pair)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } %29(ptr %20) #16
  %31 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %30, ptr %31, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  store ptr %35, ptr %33, align 8
  %36 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %37 = load i160, ptr %36, align 4
  store i160 %37, ptr %32, align 4
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = load ptr, ptr %33, align 8
  store ptr %40, ptr %39, align 8
  %41 = load i160, ptr %32, align 4
  store i160 %41, ptr %38, align 4
  %42 = load ptr, ptr %39, align 8
  %43 = insertvalue { ptr, i160 } undef, ptr %42, 0
  %44 = load i160, ptr %38, align 4
  %45 = insertvalue { ptr, i160 } %43, i160 %44, 1
  ret { ptr, i160 } %45
}

define { ptr, i160 } @Pair_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = load ptr, ptr %0, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %9, i32 6
  %11 = load ptr, ptr %10, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr %8)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = extractvalue { i64, i64 } %12, 1
  %15 = urem i64 %7, %14
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 %14, %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %13, %18
  %20 = add i64 %7, %19
  %21 = getelementptr ptr, ptr %0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr ptr, ptr %23, i32 6
  %25 = load ptr, ptr %24, align 8
  %26 = call { i64, i64 } @size_wrapper(ptr %25, ptr %22)
  %27 = extractvalue { i64, i64 } %26, 1
  %28 = urem i64 %20, %27
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %27, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %20, %31
  %33 = getelementptr i8, ptr %0, i64 %32
  %34 = getelementptr ptr, ptr %0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr ptr, ptr %36, i32 7
  %38 = load ptr, ptr %37, align 8
  %39 = call { ptr, i160 } @box_wrapper(ptr %38, ptr %33, ptr %35)
  ret { ptr, i160 } %39
}

define void @Pair_setter_second(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = load ptr, ptr %0, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %10, i32 6
  %12 = load ptr, ptr %11, align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr %9)
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = extractvalue { i64, i64 } %13, 1
  %16 = urem i64 %8, %15
  %17 = icmp eq i64 %16, 0
  %18 = sub i64 %15, %16
  %19 = select i1 %17, i64 0, i64 %18
  %20 = add i64 %14, %19
  %21 = add i64 %8, %20
  %22 = getelementptr ptr, ptr %0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr ptr, ptr %24, i32 6
  %26 = load ptr, ptr %25, align 8
  %27 = call { i64, i64 } @size_wrapper(ptr %26, ptr %23)
  %28 = extractvalue { i64, i64 } %27, 1
  %29 = urem i64 %21, %28
  %30 = icmp eq i64 %29, 0
  %31 = sub i64 %28, %29
  %32 = select i1 %30, i64 0, i64 %31
  %33 = add i64 %21, %32
  %34 = getelementptr i8, ptr %0, i64 %33
  %35 = getelementptr ptr, ptr %0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 8
  %39 = load ptr, ptr %38, align 8
  call void @unbox_wrapper(ptr %39, { ptr, i160 } %1, ptr %36, ptr %34)
  ret void
}

define { ptr, i160 } @Pair_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = load ptr, ptr %0, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %9, i32 6
  %11 = load ptr, ptr %10, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr %8)
  %13 = extractvalue { i64, i64 } %12, 1
  %14 = urem i64 %7, %13
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 %13, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %7, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load ptr, ptr %0, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr ptr, ptr %21, i32 7
  %23 = load ptr, ptr %22, align 8
  %24 = call { ptr, i160 } @box_wrapper(ptr %23, ptr %19, ptr %20)
  ret { ptr, i160 } %24
}

define void @Pair_setter_first(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = load ptr, ptr %0, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %10, i32 6
  %12 = load ptr, ptr %11, align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr %9)
  %14 = extractvalue { i64, i64 } %13, 1
  %15 = urem i64 %8, %14
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 %14, %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %8, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = load ptr, ptr %0, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 8
  %24 = load ptr, ptr %23, align 8
  call void @unbox_wrapper(ptr %24, { ptr, i160 } %1, ptr %21, ptr %20)
  ret void
}

define { i64, i64 } @_size_Container(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_size_Iterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_size_Iterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_size_Array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @Array_field_Array_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Array_B__Self_from_iterable_iterableIterable2T(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([75 x ptr], ptr @Array, i32 0, i32 28), i32 9), align 8
  ret ptr %14
}

define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [75 x ptr], ptr %4, i32 0, i32 29
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 30
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_init_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [75 x ptr], ptr %26, i32 0, i32 31
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [75 x ptr], ptr %4, i32 0, i32 32
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [75 x ptr], ptr %4, i32 0, i32 33
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 34
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_reserve_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 35
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 36
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B__set_index_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [75 x ptr], ptr %26, i32 0, i32 37
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Array_B_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 38
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_unchecked_index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 39
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_unchecked_insert_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [75 x ptr], ptr %26, i32 0, i32 40
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [75 x ptr], ptr %4, i32 0, i32 41
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 42
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [75 x ptr], ptr %26, i32 0, i32 43
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Array_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 44
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 45
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 46
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 47
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 48
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 49
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 50
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [75 x ptr], ptr %15, i32 0, i32 51
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterable2T(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca { ptr, i160 }, align 8
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 16, ptr %17)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @Iterable2)
  %32 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %33 = getelementptr [2 x ptr], ptr %32, i32 0, i32 1
  store ptr null, ptr %33, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 8, ptr %32)
  store ptr @any_typ, ptr %32, align 8
  %35 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %35, align 8
  %36 = getelementptr ptr, ptr %35, i32 1
  store ptr %32, ptr %36, align 8
  %37 = load ptr, ptr %35, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %35)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  store ptr %32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 8, ptr %42)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  store ptr @Array, ptr %44, align 8
  store ptr %42, ptr %45, align 8
  store i32 9, ptr %46, align 4
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %55, 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %58, 3
  %60 = alloca [0 x ptr], align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 0, ptr %60)
  %62 = call ptr @llvm.invariant.start.p0(i64 600, ptr %49)
  %63 = getelementptr ptr, ptr %49, i32 %58
  %64 = getelementptr ptr, ptr %63, i32 5
  %65 = load ptr, ptr %64, align 8
  %66 = alloca {}, align 8
  %67 = call ptr @behavior_wrapper(ptr %65, { ptr, ptr, ptr, i32 } %59, ptr %66)
  call void %67({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr %60)
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %80 = load i32, ptr %78, align 4
  store i32 %80, ptr %79, align 4
  call void @set_offset(ptr %68, ptr @Array)
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %93 = load i32, ptr %91, align 4
  store i32 %93, ptr %92, align 4
  %94 = call ptr @llvm.invariant.start.p0(i64 16, ptr %81)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %105, 3
  %107 = alloca [0 x ptr], align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 0, ptr %107)
  %109 = call ptr @llvm.invariant.start.p0(i64 184, ptr %96)
  %110 = getelementptr ptr, ptr %96, i32 %105
  %111 = getelementptr ptr, ptr %110, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = alloca {}, align 8
  %114 = call ptr @behavior_wrapper(ptr %112, { ptr, ptr, ptr, i32 } %106, ptr %113)
  %115 = call { ptr, ptr, ptr, i32 } %114({ ptr, ptr, ptr, i32 } %106, { ptr, ptr, ptr, i32 } %106, ptr %107)
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %115, ptr %116, align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 16, ptr %116)
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %130 = load i32, ptr %128, align 4
  store i32 %130, ptr %129, align 4
  call void @set_offset(ptr %118, ptr @Iterator2)
  %131 = alloca { ptr, ptr, ptr, i32 }, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 0
  %134 = load ptr, ptr %132, align 8
  store ptr %134, ptr %133, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 1
  %137 = load ptr, ptr %135, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 2
  %140 = load ptr, ptr %138, align 8
  store ptr %140, ptr %139, align 8
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 3
  %143 = load i32, ptr %141, align 4
  store i32 %143, ptr %142, align 4
  call void @set_offset(ptr %131, ptr @Iterator2)
  %144 = alloca { ptr, ptr, ptr, i32 }, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 0
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 1
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 2
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 3
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  %156 = load i32, ptr %154, align 4
  store i32 %156, ptr %155, align 4
  %157 = call ptr @llvm.invariant.start.p0(i64 16, ptr %144)
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  store ptr %158, ptr %.reg2mem11, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  store ptr %159, ptr %.reg2mem9, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  store ptr %160, ptr %.reg2mem7, align 8
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  store ptr %161, ptr %.reg2mem5, align 8
  %162 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  store ptr %162, ptr %.reg2mem3, align 8
  br label %163

163:                                              ; preds = %._crit_edge1, %2
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %164 = load ptr, ptr %.reload12, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %164, 0
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %166 = load ptr, ptr %.reload10, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 1
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %168 = load ptr, ptr %.reload8, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %168, 2
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %170 = load i32, ptr %.reload6, align 4
  %171 = insertvalue { ptr, ptr, ptr, i32 } %169, i32 %170, 3
  %172 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %173 = call ptr @llvm.invariant.start.p0(i64 24, ptr %164)
  %174 = getelementptr ptr, ptr %164, i32 %170
  %175 = getelementptr ptr, ptr %174, i32 1
  %176 = load ptr, ptr %175, align 8
  %177 = call ptr @behavior_wrapper(ptr %176, { ptr, ptr, ptr, i32 } %171, ptr %4)
  %178 = call { ptr, i160 } %177({ ptr, ptr, ptr, i32 } %171, { ptr, ptr, ptr, i32 } %171, ptr %3)
  store { ptr, i160 } %178, ptr %5, align 8
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %179 = load ptr, ptr %.reload4, align 8
  %180 = ptrtoint ptr %179 to i64
  %181 = icmp eq i64 %180, ptrtoint (ptr @nil_typ to i64)
  %182 = icmp eq i64 %180, 0
  %183 = or i1 %181, %182
  %184 = icmp eq i1 %183, false
  store i1 %184, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %185, label %._crit_edge

._crit_edge:                                      ; preds = %163
  br label %239

185:                                              ; preds = %163
  %186 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %187 = load ptr, ptr %186, align 8
  store ptr %187, ptr %7, align 8
  %188 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %189 = load i160, ptr %188, align 4
  store i160 %189, ptr %6, align 4
  %190 = load ptr, ptr %7, align 8
  store ptr %190, ptr %9, align 8
  %191 = load i160, ptr %6, align 4
  store i160 %191, ptr %8, align 4
  %192 = load ptr, ptr %9, align 8
  %193 = insertvalue { ptr, i160 } undef, ptr %192, 0
  %194 = load i160, ptr %8, align 4
  %195 = insertvalue { ptr, i160 } %193, i160 %194, 1
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %197 = load ptr, ptr %196, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %197, 0
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %200 = load ptr, ptr %199, align 8
  %201 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %200, 1
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %203 = load ptr, ptr %202, align 8
  %204 = insertvalue { ptr, ptr, ptr, i32 } %201, ptr %203, 2
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %206 = load i32, ptr %205, align 4
  %207 = insertvalue { ptr, ptr, ptr, i32 } %204, i32 %206, 3
  %208 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %209 = getelementptr [2 x ptr], ptr %208, i32 0, i32 1
  store ptr null, ptr %209, align 8
  %210 = call ptr @llvm.invariant.start.p0(i64 8, ptr %208)
  store ptr @any_typ, ptr %208, align 8
  %211 = getelementptr [1 x ptr], ptr %10, i32 0, i32 0
  store ptr %208, ptr %211, align 8
  %212 = call ptr @llvm.invariant.start.p0(i64 1, ptr %10)
  %213 = call ptr @llvm.invariant.start.p0(i64 600, ptr %197)
  %214 = getelementptr ptr, ptr %197, i32 %206
  %215 = getelementptr ptr, ptr %214, i32 10
  %216 = load ptr, ptr %215, align 8
  %217 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  store ptr %192, ptr %217, align 8
  %218 = call ptr @behavior_wrapper(ptr %216, { ptr, ptr, ptr, i32 } %207, ptr %11)
  %219 = call { ptr, ptr, ptr, i32 } %218({ ptr, ptr, ptr, i32 } %207, { ptr, ptr, ptr, i32 } %207, ptr %10, { ptr, i160 } %195)
  store { ptr, ptr, ptr, i32 } %219, ptr %12, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %223 = load ptr, ptr %221, align 8
  store ptr %223, ptr %222, align 8
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %226 = load ptr, ptr %224, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %229 = load ptr, ptr %227, align 8
  store ptr %229, ptr %228, align 8
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %232 = load i32, ptr %230, align 4
  store i32 %232, ptr %231, align 4
  call void @set_offset(ptr %13, ptr @Array)
  %233 = load ptr, ptr %7, align 8
  store ptr %233, ptr %15, align 8
  %234 = load i160, ptr %6, align 4
  store i160 %234, ptr %14, align 4
  %235 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %236 = load ptr, ptr %15, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %238 = load i160, ptr %14, align 4
  store i160 %238, ptr %237, align 4
  br label %239

239:                                              ; preds = %._crit_edge, %185
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %240

._crit_edge1:                                     ; preds = %239
  br label %163

240:                                              ; preds = %239
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %243 = load ptr, ptr %241, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %246 = load ptr, ptr %244, align 8
  store ptr %246, ptr %245, align 8
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %249 = load ptr, ptr %247, align 8
  store ptr %249, ptr %248, align 8
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %252 = load i32, ptr %250, align 4
  store i32 %252, ptr %251, align 4
  call void @set_offset(ptr %16, ptr @Array)
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %254 = load ptr, ptr %253, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %254, 0
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %257 = load ptr, ptr %256, align 8
  %258 = insertvalue { ptr, ptr, ptr, i32 } %255, ptr %257, 1
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %260 = load ptr, ptr %259, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } %258, ptr %260, 2
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %263 = load i32, ptr %262, align 4
  %264 = insertvalue { ptr, ptr, ptr, i32 } %261, i32 %263, 3
  ret { ptr, ptr, ptr, i32 } %264
}

define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64))
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 600, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %31(ptr %22, { ptr } %34) #15
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %6, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 600, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 2
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  call void %45(ptr %36, i32 0) #15
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %6, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 600, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 3
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  call void %56(ptr %47, i32 1) #15
  ret void
}

define void @Array_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 600, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 3
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %21, i32 %3) #15
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %7, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 600, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 3
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = call i32 %41(ptr %32) #16
  %43 = sext i32 %42 to i64
  %44 = alloca ptr, align 8
  %45 = mul i64 %43, ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64)
  %46 = call ptr @bump_malloc(i64 %45)
  store ptr %46, ptr %44, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %7, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 600, ptr %49)
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = getelementptr ptr, ptr %49, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr } undef, ptr %59, 0
  call void %57(ptr %48, { ptr } %60) #15
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = load ptr, ptr %7, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 600, ptr %63)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = getelementptr ptr, ptr %63, i32 %66
  %68 = getelementptr ptr, ptr %67, i32 2
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr }, ptr %69, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  call void %71(ptr %62, i32 0) #15
  ret void
}

define void @Array_init_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Array)
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 600, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = getelementptr ptr, ptr %27, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr %22, i32 %3) #15
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %8, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 600, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 3
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %33, i32 %4) #15
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %8, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 600, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 3
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %44) #16
  %55 = sext i32 %54 to i64
  %56 = alloca ptr, align 8
  %57 = mul i64 %55, ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64)
  %58 = call ptr @bump_malloc(i64 %57)
  store ptr %58, ptr %56, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %8, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 600, ptr %61)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = getelementptr ptr, ptr %61, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr }, ptr %56, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr } undef, ptr %71, 0
  call void %69(ptr %60, { ptr } %72) #15
  ret void
}

define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 600, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 600, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 16, ptr %11)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = load i32, ptr %23, align 4
  store i32 %25, ptr %24, align 4
  call void @set_offset(ptr %13, ptr @Array)
  %26 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %26, align 8
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  %29 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  store ptr %30, ptr %28, align 8
  %31 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 1
  %32 = load i160, ptr %31, align 4
  store i160 %32, ptr %27, align 4
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %13, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 600, ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr ptr, ptr %35, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 2
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %34) #16
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %13, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 600, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 3
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = call i32 %55(ptr %46) #16
  %57 = icmp sge i32 %44, %56
  br i1 %57, label %58, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %101

58:                                               ; preds = %4
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %13, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 600, ptr %61)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = getelementptr ptr, ptr %61, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 3
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = call i32 %69(ptr %60) #16
  %71 = mul i32 %70, 2
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %73 = load ptr, ptr %72, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %76, 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %82 = load i32, ptr %81, align 4
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %82, 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = load ptr, ptr %13, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 600, ptr %86)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %89 = load i32, ptr %88, align 4
  %90 = getelementptr ptr, ptr %86, i32 %89
  %91 = load ptr, ptr %90, align 8
  %92 = call ptr @typegetter_wrapper(ptr %91, ptr %85)
  %93 = getelementptr [1 x ptr], ptr %5, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %93, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 1, ptr %5)
  %95 = call ptr @llvm.invariant.start.p0(i64 600, ptr %73)
  %96 = getelementptr ptr, ptr %73, i32 %82
  %97 = getelementptr ptr, ptr %96, i32 11
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  store ptr @i32_typ, ptr %99, align 8
  %100 = call ptr @behavior_wrapper(ptr %98, { ptr, ptr, ptr, i32 } %83, ptr %6)
  call void %100({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr %5, i32 %71)
  br label %101

101:                                              ; preds = %._crit_edge, %58
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = load ptr, ptr %13, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 600, ptr %104)
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = getelementptr ptr, ptr %104, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = call { ptr } %112(ptr %103) #16
  store { ptr } %113, ptr %7, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = load ptr, ptr %13, align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 600, ptr %116)
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = getelementptr ptr, ptr %116, i32 %119
  %121 = getelementptr ptr, ptr %120, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = getelementptr { ptr, ptr }, ptr %122, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = call i32 %124(ptr %115) #16
  %126 = load ptr, ptr %7, align 8
  %127 = sext i32 %125 to i64
  %128 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %127
  %129 = getelementptr i8, ptr %126, i64 %128
  %130 = load ptr, ptr %28, align 8
  store ptr %130, ptr %9, align 8
  %131 = load i160, ptr %27, align 4
  store i160 %131, ptr %8, align 4
  %132 = getelementptr { ptr, i160 }, ptr %129, i32 0, i32 0
  %133 = load ptr, ptr %9, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, i160 }, ptr %129, i32 0, i32 1
  %135 = load i160, ptr %8, align 4
  store i160 %135, ptr %134, align 4
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = load ptr, ptr %13, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 600, ptr %138)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %141 = load i32, ptr %140, align 4
  %142 = getelementptr ptr, ptr %138, i32 %141
  %143 = getelementptr ptr, ptr %142, i32 2
  %144 = load ptr, ptr %143, align 8
  %145 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = call i32 %146(ptr %137) #16
  %148 = add i32 %147, 1
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = load ptr, ptr %13, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 600, ptr %151)
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %154 = load i32, ptr %153, align 4
  %155 = getelementptr ptr, ptr %151, i32 %154
  %156 = getelementptr ptr, ptr %155, i32 2
  %157 = load ptr, ptr %156, align 8
  %158 = getelementptr { ptr, ptr }, ptr %157, i32 0, i32 1
  %159 = load ptr, ptr %158, align 8
  call void %159(ptr %150, i32 %148) #15
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %162 = load ptr, ptr %160, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %165 = load ptr, ptr %163, align 8
  store ptr %165, ptr %164, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %171 = load i32, ptr %169, align 4
  store i32 %171, ptr %170, align 4
  call void @set_offset(ptr %10, ptr @Array)
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %173, 0
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %176, 1
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %179 = load ptr, ptr %178, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %177, ptr %179, 2
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %182 = load i32, ptr %181, align 4
  %183 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 %182, 3
  ret { ptr, ptr, ptr, i32 } %183
}

define void @Array_reserve_new_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca ptr, align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 16, ptr %11)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = load i32, ptr %23, align 4
  store i32 %25, ptr %24, align 4
  call void @set_offset(ptr %13, ptr @Array)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr %13, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 600, ptr %28)
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %31 = load i32, ptr %30, align 4
  %32 = getelementptr ptr, ptr %28, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 3
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %27) #16
  %38 = icmp sle i32 %3, %37
  br i1 %38, label %39, label %40

39:                                               ; preds = %4
  br label %144

40:                                               ; preds = %4
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %13, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 600, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 3
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  call void %51(ptr %42, i32 %3) #15
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %13, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 600, ptr %54)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = getelementptr ptr, ptr %54, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call { ptr } %62(ptr %53) #16
  store { ptr } %63, ptr %5, align 8
  %64 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %65 = load ptr, ptr %5, align 8
  store ptr %65, ptr %64, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %13, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 600, ptr %69)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %72 = load i32, ptr %71, align 4
  %73 = getelementptr ptr, ptr %69, i32 %72
  %74 = getelementptr ptr, ptr %73, i32 3
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr { ptr, ptr }, ptr %75, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = call i32 %77(ptr %68) #16
  %79 = sext i32 %78 to i64
  %80 = mul i64 %79, ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64)
  %81 = call ptr @bump_malloc(i64 %80)
  store ptr %81, ptr %7, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %13, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 600, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr } undef, ptr %94, 0
  call void %92(ptr %83, { ptr } %95) #15
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  store ptr %96, ptr %.reg2mem13, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  store ptr %97, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  br label %98

98:                                               ; preds = %._crit_edge, %40
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %99 = load ptr, ptr %.reload14, align 8
  %100 = load ptr, ptr %13, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 600, ptr %100)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %102 = load i32, ptr %.reload12, align 4
  %103 = getelementptr ptr, ptr %100, i32 %102
  %104 = getelementptr ptr, ptr %103, i32 2
  %105 = load ptr, ptr %104, align 8
  %106 = getelementptr { ptr, ptr }, ptr %105, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = call i32 %107(ptr %99) #16
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %109 = icmp slt i32 %.reload10, %108
  store i1 %109, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %110, label %140

110:                                              ; preds = %98
  %111 = load ptr, ptr %6, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %112 = sext i32 %.reload9 to i64
  %113 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %112
  %114 = getelementptr i8, ptr %111, i64 %113
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = load ptr, ptr %13, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 600, ptr %117)
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = getelementptr ptr, ptr %117, i32 %120
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = getelementptr { ptr, ptr }, ptr %123, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  %126 = call { ptr } %125(ptr %116) #16
  store { ptr } %126, ptr %8, align 8
  %127 = load ptr, ptr %8, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %128 = sext i32 %.reload8 to i64
  %129 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %128
  %130 = getelementptr i8, ptr %127, i64 %129
  %131 = getelementptr { ptr, i160 }, ptr %114, i32 0, i32 0
  %132 = load ptr, ptr %131, align 8
  store ptr %132, ptr %10, align 8
  %133 = getelementptr { ptr, i160 }, ptr %114, i32 0, i32 1
  %134 = load i160, ptr %133, align 4
  store i160 %134, ptr %9, align 4
  %135 = getelementptr { ptr, i160 }, ptr %130, i32 0, i32 0
  %136 = load ptr, ptr %10, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, i160 }, ptr %130, i32 0, i32 1
  %138 = load i160, ptr %9, align 4
  store i160 %138, ptr %137, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %139 = add i32 %.reload7, 1
  store i32 %139, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %141

140:                                              ; preds = %98
  store i32 poison, ptr %.reg2mem15, align 4
  br label %141

141:                                              ; preds = %140, %110
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %142

142:                                              ; preds = %141
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %143

._crit_edge:                                      ; preds = %142
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %98

143:                                              ; preds = %142
  br label %144

144:                                              ; preds = %143, %39
  ret void
}

define { ptr, i160 } @Array__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 16, ptr %14)
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  call void @set_offset(ptr %16, ptr @Array)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %16, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 600, ptr %31)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = getelementptr ptr, ptr %31, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call i32 %39(ptr %30) #16
  %41 = sub i32 %40, 1
  %42 = icmp sgt i32 %3, %41
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %16, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 600, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %44) #16
  %55 = add i32 %54, %3
  %56 = icmp slt i32 %55, 0
  %57 = or i1 %42, %56
  br i1 %57, label %58, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %88

58:                                               ; preds = %4
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %16, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 600, ptr %73)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %76 = load i32, ptr %75, align 4
  %77 = getelementptr ptr, ptr %73, i32 %76
  %78 = load ptr, ptr %77, align 8
  %79 = call ptr @typegetter_wrapper(ptr %78, ptr %72)
  %80 = getelementptr [1 x ptr], ptr %5, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 1, ptr %5)
  %82 = call ptr @llvm.invariant.start.p0(i64 600, ptr %60)
  %83 = getelementptr ptr, ptr %60, i32 %69
  %84 = getelementptr ptr, ptr %83, i32 14
  %85 = load ptr, ptr %84, align 8
  %86 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  store ptr @i32_typ, ptr %86, align 8
  %87 = call ptr @behavior_wrapper(ptr %85, { ptr, ptr, ptr, i32 } %70, ptr %6)
  call void %87({ ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %70, ptr %5, i32 %3)
  br label %88

88:                                               ; preds = %._crit_edge, %58
  %89 = icmp slt i32 %3, 0
  br i1 %89, label %90, label %104

90:                                               ; preds = %88
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %16, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 600, ptr %93)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = getelementptr ptr, ptr %93, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = call i32 %101(ptr %92) #16
  %103 = add i32 %102, %3
  store i32 %103, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem3, align 4
  br label %105

104:                                              ; preds = %88
  store i32 %3, ptr %.reg2mem3, align 4
  br label %105

105:                                              ; preds = %104, %90
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem, align 4
  br label %106

106:                                              ; preds = %105
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 2
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %117, 3
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = load ptr, ptr %16, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 600, ptr %121)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %124 = load i32, ptr %123, align 4
  %125 = getelementptr ptr, ptr %121, i32 %124
  %126 = load ptr, ptr %125, align 8
  %127 = call ptr @typegetter_wrapper(ptr %126, ptr %120)
  %128 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %128, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %130 = call ptr @llvm.invariant.start.p0(i64 600, ptr %108)
  %131 = getelementptr ptr, ptr %108, i32 %117
  %132 = getelementptr ptr, ptr %131, i32 15
  %133 = load ptr, ptr %132, align 8
  %134 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr @i32_typ, ptr %134, align 8
  %135 = call ptr @behavior_wrapper(ptr %133, { ptr, ptr, ptr, i32 } %118, ptr %8)
  %.reload = load i32, ptr %.reg2mem, align 4
  %136 = call { ptr, i160 } %135({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr %7, i32 %.reload)
  store { ptr, i160 } %136, ptr %9, align 8
  %137 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  store ptr %138, ptr %11, align 8
  %139 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %140 = load i160, ptr %139, align 4
  store i160 %140, ptr %10, align 4
  %141 = load ptr, ptr %11, align 8
  store ptr %141, ptr %13, align 8
  %142 = load i160, ptr %10, align 4
  store i160 %142, ptr %12, align 4
  %143 = load ptr, ptr %13, align 8
  %144 = insertvalue { ptr, i160 } undef, ptr %143, 0
  %145 = load i160, ptr %12, align 4
  %146 = insertvalue { ptr, i160 } %144, i160 %145, 1
  ret { ptr, i160 } %146
}

define void @Array__set_index_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, i160 } %4) {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @Array)
  %27 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %27, align 8
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  store ptr %31, ptr %29, align 8
  %32 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 1
  %33 = load i160, ptr %32, align 4
  store i160 %33, ptr %28, align 4
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %14, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 600, ptr %36)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = getelementptr ptr, ptr %36, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = call i32 %44(ptr %35) #16
  %46 = sub i32 %45, 1
  %47 = icmp sgt i32 %3, %46
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %14, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 600, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 2
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call i32 %58(ptr %49) #16
  %60 = add i32 %59, %3
  %61 = icmp slt i32 %60, 0
  %62 = or i1 %47, %61
  br i1 %62, label %63, label %._crit_edge

._crit_edge:                                      ; preds = %5
  br label %93

63:                                               ; preds = %5
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %71, 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %74 = load i32, ptr %73, align 4
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %74, 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %14, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 600, ptr %78)
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %81 = load i32, ptr %80, align 4
  %82 = getelementptr ptr, ptr %78, i32 %81
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @typegetter_wrapper(ptr %83, ptr %77)
  %85 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %85, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %87 = call ptr @llvm.invariant.start.p0(i64 600, ptr %65)
  %88 = getelementptr ptr, ptr %65, i32 %74
  %89 = getelementptr ptr, ptr %88, i32 14
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %91, align 8
  %92 = call ptr @behavior_wrapper(ptr %90, { ptr, ptr, ptr, i32 } %75, ptr %7)
  call void %92({ ptr, ptr, ptr, i32 } %75, { ptr, ptr, ptr, i32 } %75, ptr %6, i32 %3)
  br label %93

93:                                               ; preds = %._crit_edge, %63
  %94 = icmp slt i32 %3, 0
  br i1 %94, label %95, label %109

95:                                               ; preds = %93
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %97 = load ptr, ptr %96, align 8
  %98 = load ptr, ptr %14, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 600, ptr %98)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %101 = load i32, ptr %100, align 4
  %102 = getelementptr ptr, ptr %98, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 2
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = call i32 %106(ptr %97) #16
  %108 = add i32 %107, %3
  store i32 %108, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem3, align 4
  br label %110

109:                                              ; preds = %93
  store i32 %3, ptr %.reg2mem3, align 4
  br label %110

110:                                              ; preds = %109, %95
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem, align 4
  br label %111

111:                                              ; preds = %110
  %112 = load ptr, ptr %29, align 8
  store ptr %112, ptr %9, align 8
  %113 = load i160, ptr %28, align 4
  store i160 %113, ptr %8, align 4
  %114 = load ptr, ptr %9, align 8
  %115 = insertvalue { ptr, i160 } undef, ptr %114, 0
  %116 = load i160, ptr %8, align 4
  %117 = insertvalue { ptr, i160 } %115, i160 %116, 1
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %122, 1
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %125 = load ptr, ptr %124, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %125, 2
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, i32 %128, 3
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = load ptr, ptr %14, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 600, ptr %132)
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %135 = load i32, ptr %134, align 4
  %136 = getelementptr ptr, ptr %132, i32 %135
  %137 = load ptr, ptr %136, align 8
  %138 = call ptr @typegetter_wrapper(ptr %137, ptr %131)
  %139 = getelementptr [2 x ptr], ptr %10, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %139, align 8
  %140 = getelementptr [2 x ptr], ptr %10, i32 0, i32 1
  store ptr %138, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 4, ptr %10)
  %142 = call ptr @llvm.invariant.start.p0(i64 600, ptr %119)
  %143 = getelementptr ptr, ptr %119, i32 %128
  %144 = getelementptr ptr, ptr %143, i32 16
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr }, ptr %11, i32 0, i32 0
  store ptr @i32_typ, ptr %146, align 8
  %147 = getelementptr { ptr, ptr }, ptr %11, i32 0, i32 1
  store ptr %114, ptr %147, align 8
  %148 = call ptr @behavior_wrapper(ptr %145, { ptr, ptr, ptr, i32 } %129, ptr %11)
  %.reload = load i32, ptr %.reg2mem, align 4
  call void %148({ ptr, ptr, ptr, i32 } %129, { ptr, ptr, ptr, i32 } %129, ptr %10, i32 %.reload, { ptr, i160 } %117)
  ret void
}

define void @Array_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = alloca [1 x ptr], align 8
  store ptr @Exception, ptr %20, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr ptr, ptr %21, i32 6
  %23 = load ptr, ptr %22, align 8
  %24 = call { i64, i64 } @size_wrapper(ptr %23, ptr %20)
  %25 = extractvalue { i64, i64 } %24, 0
  %26 = call ptr @bump_malloc(i64 %25)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  store ptr @Exception, ptr %27, align 8
  store ptr %26, ptr %28, align 8
  store i32 9, ptr %29, align 4
  %30 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %38, 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %41 = load i32, ptr %40, align 4
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %41, 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %7, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 600, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = load ptr, ptr %49, align 8
  %51 = call ptr @typegetter_wrapper(ptr %50, ptr %44)
  %52 = alloca [0 x ptr], align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 0, ptr %52)
  %54 = call ptr @llvm.invariant.start.p0(i64 104, ptr %32)
  %55 = getelementptr ptr, ptr %32, i32 %41
  %56 = getelementptr ptr, ptr %55, i32 4
  %57 = load ptr, ptr %56, align 8
  %58 = alloca {}, align 8
  %59 = call ptr @behavior_wrapper(ptr %57, { ptr, ptr, ptr, i32 } %42, ptr %58)
  call void %59({ ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %42, ptr %52)
  %60 = alloca ptr, align 8
  %61 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 17))
  store ptr %61, ptr %60, align 8
  %62 = alloca { ptr }, align 8
  %63 = getelementptr { ptr }, ptr %60, i32 0, i32 0
  %64 = getelementptr { ptr }, ptr %62, i32 0, i32 0
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 16, ptr %62)
  %67 = load ptr, ptr %62, align 8
  %68 = load <16 x i8>, ptr @jskps_collectionsmini, align 16
  store <16 x i8> %68, ptr %67, align 16
  %69 = alloca [1 x ptr], align 8
  store ptr @String, ptr %69, align 8
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr ptr, ptr %70, i32 6
  %72 = load ptr, ptr %71, align 8
  %73 = call { i64, i64 } @size_wrapper(ptr %72, ptr %69)
  %74 = extractvalue { i64, i64 } %73, 0
  %75 = call ptr @bump_malloc(i64 %74)
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  store ptr @String, ptr %76, align 8
  store ptr %75, ptr %77, align 8
  store i32 9, ptr %78, align 4
  %79 = call ptr @llvm.invariant.start.p0(i64 16, ptr %76)
  %80 = getelementptr { ptr }, ptr %62, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr } undef, ptr %81, 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %93, 3
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = load ptr, ptr %7, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 600, ptr %97)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = getelementptr ptr, ptr %97, i32 %100
  %102 = load ptr, ptr %101, align 8
  %103 = call ptr @typegetter_wrapper(ptr %102, ptr %96)
  %104 = alloca [3 x ptr], align 8
  %105 = getelementptr [3 x ptr], ptr %104, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %105, align 8
  %106 = getelementptr [3 x ptr], ptr %104, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %106, align 8
  %107 = getelementptr [3 x ptr], ptr %104, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 9, ptr %104)
  %109 = call ptr @llvm.invariant.start.p0(i64 280, ptr %84)
  %110 = getelementptr ptr, ptr %84, i32 %93
  %111 = getelementptr ptr, ptr %110, i32 4
  %112 = load ptr, ptr %111, align 8
  %113 = alloca { ptr, ptr, ptr }, align 8
  %114 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 0
  store ptr @buffer_typ, ptr %114, align 8
  %115 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 1
  store ptr @i32_typ, ptr %115, align 8
  %116 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 2
  store ptr @i32_typ, ptr %116, align 8
  %117 = call ptr @behavior_wrapper(ptr %112, { ptr, ptr, ptr, i32 } %94, ptr %113)
  call void %117({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %104, { ptr } %82, i32 16, i32 17)
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %130 = load i32, ptr %128, align 4
  store i32 %130, ptr %129, align 4
  call void @set_offset(ptr %118, ptr @String)
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %132, 0
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %135, 1
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } %136, ptr %138, 2
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %141 = load i32, ptr %140, align 4
  %142 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 %141, 3
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %144, 0
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %147, 1
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %150 = load ptr, ptr %149, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %150, 2
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %153 = load i32, ptr %152, align 4
  %154 = insertvalue { ptr, ptr, ptr, i32 } %151, i32 %153, 3
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = load ptr, ptr %7, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 600, ptr %157)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %160 = load i32, ptr %159, align 4
  %161 = getelementptr ptr, ptr %157, i32 %160
  %162 = load ptr, ptr %161, align 8
  %163 = call ptr @typegetter_wrapper(ptr %162, ptr %156)
  %164 = alloca [2 x ptr], align 8
  %165 = getelementptr [2 x ptr], ptr %164, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %165, align 8
  %166 = getelementptr [2 x ptr], ptr %164, i32 0, i32 1
  store ptr @_parameterization_String, ptr %166, align 8
  %167 = call ptr @llvm.invariant.start.p0(i64 4, ptr %164)
  %168 = call ptr @llvm.invariant.start.p0(i64 104, ptr %144)
  %169 = getelementptr ptr, ptr %144, i32 %153
  %170 = getelementptr ptr, ptr %169, i32 5
  %171 = load ptr, ptr %170, align 8
  %172 = alloca { ptr, ptr }, align 8
  %173 = getelementptr { ptr, ptr }, ptr %172, i32 0, i32 0
  store ptr @i32_typ, ptr %173, align 8
  %174 = getelementptr { ptr, ptr }, ptr %172, i32 0, i32 1
  store ptr %132, ptr %174, align 8
  %175 = call ptr @behavior_wrapper(ptr %171, { ptr, ptr, ptr, i32 } %154, ptr %172)
  call void %175({ ptr, ptr, ptr, i32 } %154, { ptr, ptr, ptr, i32 } %154, ptr %164, i32 152, { ptr, ptr, ptr, i32 } %142)
  %176 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 0
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, i160 } undef, ptr %177, 0
  %179 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 1
  %180 = load i160, ptr %179, align 4
  %181 = insertvalue { ptr, i160 } %178, i160 %180, 1
  %182 = call ptr @get_current_coroutine()
  %183 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %182, i32 0, i32 4
  store { ptr, i160 } %181, ptr %183, align 8
  call void @coroutine_yield(ptr %182)
  ret void
}

define { ptr, i160 } @Array_unchecked_index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 600, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr } %30(ptr %21) #16
  %32 = alloca ptr, align 8
  store { ptr } %31, ptr %32, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = sext i32 %3 to i64
  %35 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %34
  %36 = getelementptr i8, ptr %33, i64 %35
  %37 = alloca i160, align 8
  %38 = alloca ptr, align 8
  %39 = getelementptr { ptr, i160 }, ptr %36, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  store ptr %40, ptr %38, align 8
  %41 = getelementptr { ptr, i160 }, ptr %36, i32 0, i32 1
  %42 = load i160, ptr %41, align 4
  store i160 %42, ptr %37, align 4
  %43 = load ptr, ptr %38, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = load i160, ptr %37, align 4
  %46 = insertvalue { ptr, i160 } %44, i160 %45, 1
  ret { ptr, i160 } %46
}

define void @Array_unchecked_insert_xPtri32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Array)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %21, align 8
  %22 = alloca i160, align 8
  %23 = alloca ptr, align 8
  %24 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  store ptr %25, ptr %23, align 8
  %26 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %27 = load i160, ptr %26, align 4
  store i160 %27, ptr %22, align 4
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %8, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 600, ptr %30)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %33 = load i32, ptr %32, align 4
  %34 = getelementptr ptr, ptr %30, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr { ptr, ptr }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = call { ptr } %38(ptr %29) #16
  %40 = alloca ptr, align 8
  store { ptr } %39, ptr %40, align 8
  %41 = load ptr, ptr %40, align 8
  %42 = sext i32 %3 to i64
  %43 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %42
  %44 = getelementptr i8, ptr %41, i64 %43
  %45 = alloca i160, align 8
  %46 = alloca ptr, align 8
  %47 = load ptr, ptr %23, align 8
  store ptr %47, ptr %46, align 8
  %48 = load i160, ptr %22, align 4
  store i160 %48, ptr %45, align 4
  %49 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 0
  %50 = load ptr, ptr %46, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, i160 }, ptr %44, i32 0, i32 1
  %52 = load i160, ptr %45, align 4
  store i160 %52, ptr %51, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 600, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = call ptr @typegetter_wrapper(ptr %26, ptr %20)
  %28 = alloca [2 x ptr], align 8
  store ptr @ArrayIterator, ptr %28, align 8
  %29 = getelementptr ptr, ptr %28, i32 1
  store ptr %27, ptr %29, align 8
  %30 = load ptr, ptr %28, align 8
  %31 = getelementptr ptr, ptr %30, i32 6
  %32 = load ptr, ptr %31, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr %32, ptr %28)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = call ptr @bump_malloc(i64 %34)
  store ptr %27, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 8, ptr %35)
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  store ptr @ArrayIterator, ptr %37, align 8
  store ptr %35, ptr %38, align 8
  store i32 9, ptr %39, align 4
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %37)
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 0
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 1
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 2
  %50 = load ptr, ptr %48, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 3
  %53 = load i32, ptr %51, align 4
  store i32 %53, ptr %52, align 4
  call void @set_offset(ptr %41, ptr @Array)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %70, 1
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %73 = load ptr, ptr %72, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %73, 2
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %76 = load i32, ptr %75, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, i32 %76, 3
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %6, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 600, ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr ptr, ptr %80, i32 %83
  %85 = load ptr, ptr %84, align 8
  %86 = call ptr @typegetter_wrapper(ptr %85, ptr %79)
  %87 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %88 = getelementptr [3 x ptr], ptr %87, i32 0, i32 1
  store ptr %86, ptr %88, align 8
  %89 = getelementptr [3 x ptr], ptr %87, i32 0, i32 2
  store ptr null, ptr %89, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 16, ptr %87)
  store ptr @Array, ptr %87, align 8
  %91 = alloca [1 x ptr], align 8
  %92 = getelementptr [1 x ptr], ptr %91, i32 0, i32 0
  store ptr %87, ptr %92, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 1, ptr %91)
  %94 = call ptr @llvm.invariant.start.p0(i64 80, ptr %67)
  %95 = getelementptr ptr, ptr %67, i32 %76
  %96 = getelementptr ptr, ptr %95, i32 3
  %97 = load ptr, ptr %96, align 8
  %98 = alloca { ptr }, align 8
  %99 = getelementptr { ptr }, ptr %98, i32 0, i32 0
  store ptr %55, ptr %99, align 8
  %100 = call ptr @behavior_wrapper(ptr %97, { ptr, ptr, ptr, i32 } %77, ptr %98)
  call void %100({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr %91, { ptr, ptr, ptr, i32 } %65)
  %101 = alloca { ptr, ptr, ptr, i32 }, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 0
  %104 = load ptr, ptr %102, align 8
  store ptr %104, ptr %103, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 1
  %107 = load ptr, ptr %105, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 2
  %110 = load ptr, ptr %108, align 8
  store ptr %110, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 3
  %113 = load i32, ptr %111, align 4
  store i32 %113, ptr %112, align 4
  call void @set_offset(ptr %101, ptr @Iterator2)
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %115, 0
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 1
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 1
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 2
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %121, 2
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 3
  %124 = load i32, ptr %123, align 4
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %124, 3
  ret { ptr, ptr, ptr, i32 } %125
}

define void @Iterable2_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 16, ptr %14)
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  call void @set_offset(ptr %16, ptr @Iterable2)
  %29 = alloca ptr, align 8
  store { ptr } %3, ptr %29, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %40, 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %16, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 184, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = load ptr, ptr %48, align 8
  %50 = call ptr @typegetter_wrapper(ptr %49, ptr %43)
  %51 = alloca [0 x ptr], align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 0, ptr %51)
  %53 = call ptr @llvm.invariant.start.p0(i64 184, ptr %31)
  %54 = getelementptr ptr, ptr %31, i32 %40
  %55 = getelementptr ptr, ptr %54, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = alloca {}, align 8
  %58 = call ptr @behavior_wrapper(ptr %56, { ptr, ptr, ptr, i32 } %41, ptr %57)
  %59 = call { ptr, ptr, ptr, i32 } %58({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr %51)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %59, ptr %60, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 16, ptr %60)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %74 = load i32, ptr %72, align 4
  store i32 %74, ptr %73, align 4
  call void @set_offset(ptr %62, ptr @Iterator2)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = load i32, ptr %85, align 4
  store i32 %87, ptr %86, align 4
  call void @set_offset(ptr %75, ptr @Iterator2)
  %88 = alloca { ptr, ptr, ptr, i32 }, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  %94 = load ptr, ptr %92, align 8
  store ptr %94, ptr %93, align 8
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  %97 = load ptr, ptr %95, align 8
  store ptr %97, ptr %96, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  %100 = load i32, ptr %98, align 4
  store i32 %100, ptr %99, align 4
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %88)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  store ptr %102, ptr %.reg2mem15, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  store ptr %103, ptr %.reg2mem13, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  store ptr %104, ptr %.reg2mem11, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  store ptr %105, ptr %.reg2mem9, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  store ptr %106, ptr %.reg2mem7, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr %107, ptr %.reg2mem5, align 8
  %108 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  store ptr %108, ptr %.reg2mem3, align 8
  br label %109

109:                                              ; preds = %._crit_edge1, %4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %110 = load ptr, ptr %.reload16, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %112 = load ptr, ptr %.reload14, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 1
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %114 = load ptr, ptr %.reload12, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 2
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %116 = load i32, ptr %.reload10, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %116, 3
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %118 = load ptr, ptr %.reload8, align 8
  %119 = load ptr, ptr %16, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %119)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %121 = load i32, ptr %.reload6, align 4
  %122 = getelementptr ptr, ptr %119, i32 %121
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @typegetter_wrapper(ptr %123, ptr %118)
  %125 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %126 = call ptr @llvm.invariant.start.p0(i64 24, ptr %110)
  %127 = getelementptr ptr, ptr %110, i32 %116
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr @behavior_wrapper(ptr %129, { ptr, ptr, ptr, i32 } %117, ptr %6)
  %131 = call { ptr, i160 } %130({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %5)
  store { ptr, i160 } %131, ptr %7, align 8
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %132 = load ptr, ptr %.reload4, align 8
  %133 = ptrtoint ptr %132 to i64
  %134 = icmp eq i64 %133, ptrtoint (ptr @nil_typ to i64)
  %135 = icmp eq i64 %133, 0
  %136 = or i1 %134, %135
  %137 = icmp eq i1 %136, false
  store i1 %137, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %138, label %._crit_edge

._crit_edge:                                      ; preds = %109
  br label %156

138:                                              ; preds = %109
  %139 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %140 = load ptr, ptr %139, align 8
  store ptr %140, ptr %9, align 8
  %141 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %142 = load i160, ptr %141, align 4
  store i160 %142, ptr %8, align 4
  %143 = load ptr, ptr %9, align 8
  store ptr %143, ptr %11, align 8
  %144 = load i160, ptr %8, align 4
  store i160 %144, ptr %10, align 4
  %145 = load ptr, ptr %11, align 8
  %146 = insertvalue { ptr, i160 } undef, ptr %145, 0
  %147 = load i160, ptr %10, align 4
  %148 = insertvalue { ptr, i160 } %146, i160 %147, 1
  %149 = load ptr, ptr %29, align 8
  call void %149({ ptr, i160 } %148)
  %150 = load ptr, ptr %9, align 8
  store ptr %150, ptr %13, align 8
  %151 = load i160, ptr %8, align 4
  store i160 %151, ptr %12, align 4
  %152 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %153 = load ptr, ptr %13, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %155 = load i160, ptr %12, align 4
  store i160 %155, ptr %154, align 4
  br label %156

156:                                              ; preds = %._crit_edge, %138
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %157

._crit_edge1:                                     ; preds = %156
  br label %109

157:                                              ; preds = %156
  ret void
}

define { ptr, i160 } @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr } %4) {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr, i160 }, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca i160, align 8
  %21 = alloca ptr, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterable2)
  %37 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %37, align 8
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %39, align 8
  %42 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %43 = load i160, ptr %42, align 4
  store i160 %43, ptr %38, align 4
  %44 = alloca ptr, align 8
  store { ptr } %4, ptr %44, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %55 = load i32, ptr %54, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %55, 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %24, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 184, ptr %59)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = getelementptr ptr, ptr %59, i32 %62
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @typegetter_wrapper(ptr %64, ptr %58)
  %66 = alloca [0 x ptr], align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 0, ptr %66)
  %68 = call ptr @llvm.invariant.start.p0(i64 184, ptr %46)
  %69 = getelementptr ptr, ptr %46, i32 %55
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = alloca {}, align 8
  %73 = call ptr @behavior_wrapper(ptr %71, { ptr, ptr, ptr, i32 } %56, ptr %72)
  %74 = call { ptr, ptr, ptr, i32 } %73({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr %66)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %74, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterator2)
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %100, align 4
  store i32 %102, ptr %101, align 4
  call void @set_offset(ptr %90, ptr @Iterator2)
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %109 = load ptr, ptr %107, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %112 = load ptr, ptr %110, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %115 = load i32, ptr %113, align 4
  store i32 %115, ptr %114, align 4
  %116 = call ptr @llvm.invariant.start.p0(i64 16, ptr %103)
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  store ptr %117, ptr %.reg2mem15, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  store ptr %118, ptr %.reg2mem13, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  store ptr %119, ptr %.reg2mem11, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  store ptr %120, ptr %.reg2mem9, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  store ptr %121, ptr %.reg2mem7, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  store ptr %122, ptr %.reg2mem5, align 8
  %123 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  store ptr %123, ptr %.reg2mem3, align 8
  br label %124

124:                                              ; preds = %._crit_edge1, %5
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %125 = load ptr, ptr %.reload16, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %125, 0
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %127 = load ptr, ptr %.reload14, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %127, 1
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %129 = load ptr, ptr %.reload12, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 2
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %131 = load i32, ptr %.reload10, align 4
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, i32 %131, 3
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %133 = load ptr, ptr %.reload8, align 8
  %134 = load ptr, ptr %24, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 184, ptr %134)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %136 = load i32, ptr %.reload6, align 4
  %137 = getelementptr ptr, ptr %134, i32 %136
  %138 = load ptr, ptr %137, align 8
  %139 = call ptr @typegetter_wrapper(ptr %138, ptr %133)
  %140 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %141 = call ptr @llvm.invariant.start.p0(i64 24, ptr %125)
  %142 = getelementptr ptr, ptr %125, i32 %131
  %143 = getelementptr ptr, ptr %142, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = call ptr @behavior_wrapper(ptr %144, { ptr, ptr, ptr, i32 } %132, ptr %7)
  %146 = call { ptr, i160 } %145({ ptr, ptr, ptr, i32 } %132, { ptr, ptr, ptr, i32 } %132, ptr %6)
  store { ptr, i160 } %146, ptr %8, align 8
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %147 = load ptr, ptr %.reload4, align 8
  %148 = ptrtoint ptr %147 to i64
  %149 = icmp eq i64 %148, ptrtoint (ptr @nil_typ to i64)
  %150 = icmp eq i64 %148, 0
  %151 = or i1 %149, %150
  %152 = icmp eq i1 %151, false
  store i1 %152, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %153, label %._crit_edge

._crit_edge:                                      ; preds = %124
  br label %184

153:                                              ; preds = %124
  %154 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  store ptr %155, ptr %10, align 8
  %156 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %157 = load i160, ptr %156, align 4
  store i160 %157, ptr %9, align 4
  %158 = load ptr, ptr %39, align 8
  store ptr %158, ptr %12, align 8
  %159 = load i160, ptr %38, align 4
  store i160 %159, ptr %11, align 4
  %160 = load ptr, ptr %12, align 8
  %161 = insertvalue { ptr, i160 } undef, ptr %160, 0
  %162 = load i160, ptr %11, align 4
  %163 = insertvalue { ptr, i160 } %161, i160 %162, 1
  %164 = load ptr, ptr %10, align 8
  store ptr %164, ptr %14, align 8
  %165 = load i160, ptr %9, align 4
  store i160 %165, ptr %13, align 4
  %166 = load ptr, ptr %14, align 8
  %167 = insertvalue { ptr, i160 } undef, ptr %166, 0
  %168 = load i160, ptr %13, align 4
  %169 = insertvalue { ptr, i160 } %167, i160 %168, 1
  %170 = load ptr, ptr %44, align 8
  %171 = call { ptr, i160 } %170({ ptr, i160 } %163, { ptr, i160 } %169)
  store { ptr, i160 } %171, ptr %15, align 8
  %172 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  store ptr %173, ptr %17, align 8
  %174 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 1
  %175 = load i160, ptr %174, align 4
  store i160 %175, ptr %16, align 4
  %176 = load ptr, ptr %17, align 8
  store ptr %176, ptr %39, align 8
  %177 = load i160, ptr %16, align 4
  store i160 %177, ptr %38, align 4
  %178 = load ptr, ptr %10, align 8
  store ptr %178, ptr %19, align 8
  %179 = load i160, ptr %9, align 4
  store i160 %179, ptr %18, align 4
  %180 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %181 = load ptr, ptr %19, align 8
  store ptr %181, ptr %180, align 8
  %182 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %183 = load i160, ptr %18, align 4
  store i160 %183, ptr %182, align 4
  br label %184

184:                                              ; preds = %._crit_edge, %153
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %185

._crit_edge1:                                     ; preds = %184
  br label %124

185:                                              ; preds = %184
  %186 = load ptr, ptr %39, align 8
  store ptr %186, ptr %21, align 8
  %187 = load i160, ptr %38, align 4
  store i160 %187, ptr %20, align 4
  %188 = load ptr, ptr %21, align 8
  %189 = insertvalue { ptr, i160 } undef, ptr %188, 0
  %190 = load i160, ptr %20, align 4
  %191 = insertvalue { ptr, i160 } %189, i160 %190, 1
  ret { ptr, i160 } %191
}

define i1 @Iterable2_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i1, align 1
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i1, align 1
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem24 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = call ptr @llvm.invariant.start.p0(i64 16, ptr %16)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = load i32, ptr %28, align 4
  store i32 %30, ptr %29, align 4
  call void @set_offset(ptr %18, ptr @Iterable2)
  %31 = alloca ptr, align 8
  store { ptr } %3, ptr %31, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = load ptr, ptr %18, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 184, ptr %46)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %49 = load i32, ptr %48, align 4
  %50 = getelementptr ptr, ptr %46, i32 %49
  %51 = load ptr, ptr %50, align 8
  %52 = call ptr @typegetter_wrapper(ptr %51, ptr %45)
  %53 = alloca [0 x ptr], align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 0, ptr %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 184, ptr %33)
  %56 = getelementptr ptr, ptr %33, i32 %42
  %57 = getelementptr ptr, ptr %56, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = alloca {}, align 8
  %60 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %43, ptr %59)
  %61 = call { ptr, ptr, ptr, i32 } %60({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %53)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %61, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 16, ptr %62)
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %76 = load i32, ptr %74, align 4
  store i32 %76, ptr %75, align 4
  call void @set_offset(ptr %64, ptr @Iterator2)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterator2)
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %100, align 4
  store i32 %102, ptr %101, align 4
  %103 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  store ptr %104, ptr %.reg2mem22, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  store ptr %105, ptr %.reg2mem20, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  store ptr %106, ptr %.reg2mem18, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  store ptr %107, ptr %.reg2mem16, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  store ptr %108, ptr %.reg2mem14, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  store ptr %109, ptr %.reg2mem12, align 8
  %110 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  store ptr %110, ptr %.reg2mem10, align 8
  br label %111

111:                                              ; preds = %171, %4
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %112 = load ptr, ptr %.reload23, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %114 = load ptr, ptr %.reload21, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 1
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %116 = load ptr, ptr %.reload19, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %116, 2
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %118 = load i32, ptr %.reload17, align 4
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %118, 3
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %120 = load ptr, ptr %.reload15, align 8
  %121 = load ptr, ptr %18, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 184, ptr %121)
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %123 = load i32, ptr %.reload13, align 4
  %124 = getelementptr ptr, ptr %121, i32 %123
  %125 = load ptr, ptr %124, align 8
  %126 = call ptr @typegetter_wrapper(ptr %125, ptr %120)
  %127 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %128 = call ptr @llvm.invariant.start.p0(i64 24, ptr %112)
  %129 = getelementptr ptr, ptr %112, i32 %118
  %130 = getelementptr ptr, ptr %129, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @behavior_wrapper(ptr %131, { ptr, ptr, ptr, i32 } %119, ptr %6)
  %133 = call { ptr, i160 } %132({ ptr, ptr, ptr, i32 } %119, { ptr, ptr, ptr, i32 } %119, ptr %5)
  store { ptr, i160 } %133, ptr %7, align 8
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %134 = load ptr, ptr %.reload11, align 8
  %135 = ptrtoint ptr %134 to i64
  %136 = icmp eq i64 %135, ptrtoint (ptr @nil_typ to i64)
  %137 = icmp eq i64 %135, 0
  %138 = or i1 %136, %137
  %139 = icmp eq i1 %138, false
  %140 = icmp ne i1 %138, false
  store i1 %140, ptr %.reg2mem7, align 1
  %141 = select i1 %139, ptr %12, ptr %15
  store ptr %141, ptr %.reg2mem3, align 8
  br i1 %139, label %142, label %167

142:                                              ; preds = %111
  %143 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  store ptr %144, ptr %9, align 8
  %145 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %146 = load i160, ptr %145, align 4
  store i160 %146, ptr %8, align 4
  %147 = load ptr, ptr %9, align 8
  store ptr %147, ptr %11, align 8
  %148 = load i160, ptr %8, align 4
  store i160 %148, ptr %10, align 4
  %149 = load ptr, ptr %11, align 8
  %150 = insertvalue { ptr, i160 } undef, ptr %149, 0
  %151 = load i160, ptr %10, align 4
  %152 = insertvalue { ptr, i160 } %150, i160 %151, 1
  %153 = load ptr, ptr %31, align 8
  %154 = call i1 %153({ ptr, i160 } %152)
  %155 = icmp eq i1 %154, false
  %156 = icmp ne i1 %154, false
  %157 = zext i1 %156 to i32
  store i32 %157, ptr %.reg2mem1, align 4
  br i1 %155, label %158, label %159

158:                                              ; preds = %142
  br label %166

159:                                              ; preds = %142
  %160 = load ptr, ptr %9, align 8
  store ptr %160, ptr %14, align 8
  %161 = load i160, ptr %8, align 4
  store i160 %161, ptr %13, align 4
  %162 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %163 = load ptr, ptr %14, align 8
  store ptr %163, ptr %162, align 8
  %164 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %165 = load i160, ptr %13, align 4
  store i160 %165, ptr %164, align 4
  br label %166

166:                                              ; preds = %159, %158
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem24, align 4
  br label %168

167:                                              ; preds = %111
  store i32 0, ptr %.reg2mem24, align 4
  br label %168

168:                                              ; preds = %167, %166
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  store i32 %.reload25, ptr %.reg2mem, align 4
  br label %169

169:                                              ; preds = %168
  %.reload = load i32, ptr %.reg2mem, align 4
  %170 = trunc i32 %.reload to i1
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %.reload9 = load i1, ptr %.reg2mem7, align 1
  br i1 %170, label %171, label %172

171:                                              ; preds = %169
  br label %111

172:                                              ; preds = %169
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  store i1 %.reload8, ptr %.reload5, align 1
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %173 = load i1, ptr %.reload4, align 1
  ret i1 %173
}

define i1 @Iterable2_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i1, align 1
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i1, align 1
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem26 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = call ptr @llvm.invariant.start.p0(i64 16, ptr %16)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = load i32, ptr %28, align 4
  store i32 %30, ptr %29, align 4
  call void @set_offset(ptr %18, ptr @Iterable2)
  %31 = alloca ptr, align 8
  store { ptr } %3, ptr %31, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = load ptr, ptr %18, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 184, ptr %46)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %49 = load i32, ptr %48, align 4
  %50 = getelementptr ptr, ptr %46, i32 %49
  %51 = load ptr, ptr %50, align 8
  %52 = call ptr @typegetter_wrapper(ptr %51, ptr %45)
  %53 = alloca [0 x ptr], align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 0, ptr %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 184, ptr %33)
  %56 = getelementptr ptr, ptr %33, i32 %42
  %57 = getelementptr ptr, ptr %56, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = alloca {}, align 8
  %60 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %43, ptr %59)
  %61 = call { ptr, ptr, ptr, i32 } %60({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %53)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %61, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 16, ptr %62)
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %76 = load i32, ptr %74, align 4
  store i32 %76, ptr %75, align 4
  call void @set_offset(ptr %64, ptr @Iterator2)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterator2)
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %100, align 4
  store i32 %102, ptr %101, align 4
  %103 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  store ptr %104, ptr %.reg2mem24, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  store ptr %105, ptr %.reg2mem22, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  store ptr %106, ptr %.reg2mem20, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  store ptr %107, ptr %.reg2mem18, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  store ptr %108, ptr %.reg2mem16, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  store ptr %109, ptr %.reg2mem14, align 8
  %110 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  store ptr %110, ptr %.reg2mem12, align 8
  br label %111

111:                                              ; preds = %169, %4
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %112 = load ptr, ptr %.reload25, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %114 = load ptr, ptr %.reload23, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 1
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %116 = load ptr, ptr %.reload21, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %116, 2
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %118 = load i32, ptr %.reload19, align 4
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %118, 3
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %120 = load ptr, ptr %.reload17, align 8
  %121 = load ptr, ptr %18, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 184, ptr %121)
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %123 = load i32, ptr %.reload15, align 4
  %124 = getelementptr ptr, ptr %121, i32 %123
  %125 = load ptr, ptr %124, align 8
  %126 = call ptr @typegetter_wrapper(ptr %125, ptr %120)
  %127 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %128 = call ptr @llvm.invariant.start.p0(i64 24, ptr %112)
  %129 = getelementptr ptr, ptr %112, i32 %118
  %130 = getelementptr ptr, ptr %129, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @behavior_wrapper(ptr %131, { ptr, ptr, ptr, i32 } %119, ptr %6)
  %133 = call { ptr, i160 } %132({ ptr, ptr, ptr, i32 } %119, { ptr, ptr, ptr, i32 } %119, ptr %5)
  store { ptr, i160 } %133, ptr %7, align 8
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %134 = load ptr, ptr %.reload13, align 8
  %135 = ptrtoint ptr %134 to i64
  %136 = icmp eq i64 %135, ptrtoint (ptr @nil_typ to i64)
  %137 = icmp eq i64 %135, 0
  %138 = or i1 %136, %137
  %139 = icmp eq i1 %138, false
  store i1 %139, ptr %.reg2mem7, align 1
  %.reload11 = load i1, ptr %.reg2mem7, align 1
  %140 = select i1 %.reload11, ptr %12, ptr %15
  store ptr %140, ptr %.reg2mem3, align 8
  %.reload10 = load i1, ptr %.reg2mem7, align 1
  br i1 %.reload10, label %141, label %165

141:                                              ; preds = %111
  %142 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  store ptr %143, ptr %9, align 8
  %144 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %145 = load i160, ptr %144, align 4
  store i160 %145, ptr %8, align 4
  %146 = load ptr, ptr %9, align 8
  store ptr %146, ptr %11, align 8
  %147 = load i160, ptr %8, align 4
  store i160 %147, ptr %10, align 4
  %148 = load ptr, ptr %11, align 8
  %149 = insertvalue { ptr, i160 } undef, ptr %148, 0
  %150 = load i160, ptr %10, align 4
  %151 = insertvalue { ptr, i160 } %149, i160 %150, 1
  %152 = load ptr, ptr %31, align 8
  %153 = call i1 %152({ ptr, i160 } %151)
  %154 = xor i1 %153, true
  %155 = zext i1 %154 to i32
  store i32 %155, ptr %.reg2mem1, align 4
  br i1 %153, label %156, label %157

156:                                              ; preds = %141
  br label %164

157:                                              ; preds = %141
  %158 = load ptr, ptr %9, align 8
  store ptr %158, ptr %14, align 8
  %159 = load i160, ptr %8, align 4
  store i160 %159, ptr %13, align 4
  %160 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %161 = load ptr, ptr %14, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %163 = load i160, ptr %13, align 4
  store i160 %163, ptr %162, align 4
  br label %164

164:                                              ; preds = %157, %156
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem26, align 4
  br label %166

165:                                              ; preds = %111
  store i32 0, ptr %.reg2mem26, align 4
  br label %166

166:                                              ; preds = %165, %164
  %.reload27 = load i32, ptr %.reg2mem26, align 4
  store i32 %.reload27, ptr %.reg2mem, align 4
  br label %167

167:                                              ; preds = %166
  %.reload = load i32, ptr %.reg2mem, align 4
  %168 = trunc i32 %.reload to i1
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %.reload9 = load i1, ptr %.reg2mem7, align 1
  br i1 %168, label %169, label %170

169:                                              ; preds = %167
  br label %111

170:                                              ; preds = %167
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  store i1 %.reload8, ptr %.reload5, align 1
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %171 = load i1, ptr %.reload4, align 1
  ret i1 %171
}

define { ptr, ptr, ptr, i32 } @Iterable2_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %7, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 184, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr @typegetter_wrapper(ptr %28, ptr %22)
  %30 = load ptr, ptr %2, align 8
  %31 = getelementptr [1 x ptr], ptr %30, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = alloca [3 x ptr], align 8
  store ptr @MapIterable2, ptr %33, align 8
  %34 = getelementptr ptr, ptr %33, i32 1
  store ptr %29, ptr %34, align 8
  %35 = getelementptr ptr, ptr %33, i32 2
  store ptr %32, ptr %35, align 8
  %36 = load ptr, ptr %33, align 8
  %37 = getelementptr ptr, ptr %36, i32 6
  %38 = load ptr, ptr %37, align 8
  %39 = call { i64, i64 } @size_wrapper(ptr %38, ptr %33)
  %40 = extractvalue { i64, i64 } %39, 0
  %41 = call ptr @bump_malloc(i64 %40)
  store ptr %29, ptr %41, align 8
  %42 = getelementptr ptr, ptr %41, i32 1
  store ptr %32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %41)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  store ptr @MapIterable2, ptr %44, align 8
  store ptr %41, ptr %45, align 8
  store i32 9, ptr %46, align 4
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %60 = load i32, ptr %58, align 4
  store i32 %60, ptr %59, align 4
  call void @set_offset(ptr %48, ptr @Iterable2)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %71, 3
  %73 = load ptr, ptr %20, align 8
  %74 = insertvalue { ptr } undef, ptr %73, 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %7, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 184, ptr %89)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = getelementptr ptr, ptr %89, i32 %92
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @typegetter_wrapper(ptr %94, ptr %88)
  %96 = load ptr, ptr %2, align 8
  %97 = getelementptr [1 x ptr], ptr %96, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %100 = getelementptr [3 x ptr], ptr %99, i32 0, i32 1
  store ptr %95, ptr %100, align 8
  %101 = getelementptr [3 x ptr], ptr %99, i32 0, i32 2
  store ptr null, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 16, ptr %99)
  store ptr @Iterable2, ptr %99, align 8
  %103 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %104 = getelementptr [4 x ptr], ptr %103, i32 0, i32 2
  store ptr %95, ptr %104, align 8
  %105 = getelementptr [4 x ptr], ptr %103, i32 0, i32 1
  store ptr %98, ptr %105, align 8
  %106 = getelementptr [4 x ptr], ptr %103, i32 0, i32 3
  store ptr null, ptr %106, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 24, ptr %103)
  store ptr @function_typ, ptr %103, align 8
  %108 = alloca [2 x ptr], align 8
  %109 = getelementptr [2 x ptr], ptr %108, i32 0, i32 0
  store ptr %99, ptr %109, align 8
  %110 = getelementptr [2 x ptr], ptr %108, i32 0, i32 1
  store ptr %103, ptr %110, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 4, ptr %108)
  %112 = call ptr @llvm.invariant.start.p0(i64 408, ptr %76)
  %113 = getelementptr ptr, ptr %76, i32 %85
  %114 = getelementptr ptr, ptr %113, i32 4
  %115 = load ptr, ptr %114, align 8
  %116 = alloca { ptr, ptr }, align 8
  %117 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 0
  store ptr %62, ptr %117, align 8
  %118 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 1
  store ptr @function_typ, ptr %118, align 8
  %119 = call ptr @behavior_wrapper(ptr %115, { ptr, ptr, ptr, i32 } %86, ptr %116)
  call void %119({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %108, { ptr, ptr, ptr, i32 } %72, { ptr } %74)
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = load i32, ptr %130, align 4
  store i32 %132, ptr %131, align 4
  call void @set_offset(ptr %120, ptr @MapIterable2)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  ret { ptr, ptr, ptr, i32 } %144
}

define { ptr, ptr, ptr, i32 } @Iterable2_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %7, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 184, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr @typegetter_wrapper(ptr %28, ptr %22)
  %30 = alloca [2 x ptr], align 8
  store ptr @FilterIterable2, ptr %30, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  store ptr %29, ptr %31, align 8
  %32 = load ptr, ptr %30, align 8
  %33 = getelementptr ptr, ptr %32, i32 6
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr %30)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = call ptr @bump_malloc(i64 %36)
  store ptr %29, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 8, ptr %37)
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  store ptr @FilterIterable2, ptr %39, align 8
  store ptr %37, ptr %40, align 8
  store i32 9, ptr %41, align 4
  %42 = call ptr @llvm.invariant.start.p0(i64 16, ptr %39)
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %55 = load i32, ptr %53, align 4
  store i32 %55, ptr %54, align 4
  call void @set_offset(ptr %43, ptr @Iterable2)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %66, 3
  %68 = load ptr, ptr %20, align 8
  %69 = insertvalue { ptr } undef, ptr %68, 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %80, 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 184, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = load ptr, ptr %88, align 8
  %90 = call ptr @typegetter_wrapper(ptr %89, ptr %83)
  %91 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %92 = getelementptr [3 x ptr], ptr %91, i32 0, i32 1
  store ptr %90, ptr %92, align 8
  %93 = getelementptr [3 x ptr], ptr %91, i32 0, i32 2
  store ptr null, ptr %93, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 16, ptr %91)
  store ptr @Iterable2, ptr %91, align 8
  %95 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %96 = getelementptr [4 x ptr], ptr %95, i32 0, i32 2
  store ptr %90, ptr %96, align 8
  %97 = getelementptr [4 x ptr], ptr %95, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %97, align 8
  %98 = getelementptr [4 x ptr], ptr %95, i32 0, i32 3
  store ptr null, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 24, ptr %95)
  store ptr @function_typ, ptr %95, align 8
  %100 = alloca [2 x ptr], align 8
  %101 = getelementptr [2 x ptr], ptr %100, i32 0, i32 0
  store ptr %91, ptr %101, align 8
  %102 = getelementptr [2 x ptr], ptr %100, i32 0, i32 1
  store ptr %95, ptr %102, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 4, ptr %100)
  %104 = call ptr @llvm.invariant.start.p0(i64 400, ptr %71)
  %105 = getelementptr ptr, ptr %71, i32 %80
  %106 = getelementptr ptr, ptr %105, i32 3
  %107 = load ptr, ptr %106, align 8
  %108 = alloca { ptr, ptr }, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  store ptr %57, ptr %109, align 8
  %110 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  store ptr @function_typ, ptr %110, align 8
  %111 = call ptr @behavior_wrapper(ptr %107, { ptr, ptr, ptr, i32 } %81, ptr %108)
  call void %111({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr %100, { ptr, ptr, ptr, i32 } %67, { ptr } %69)
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %115 = load ptr, ptr %113, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %118 = load ptr, ptr %116, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %124 = load i32, ptr %122, align 4
  store i32 %124, ptr %123, align 4
  call void @set_offset(ptr %112, ptr @FilterIterable2)
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %126, 0
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 2
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %135 = load i32, ptr %134, align 4
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %135, 3
  ret { ptr, ptr, ptr, i32 } %136
}

define { ptr, ptr, ptr, i32 } @Iterable2_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @Iterable2)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 184, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = alloca [2 x ptr], align 8
  store ptr @ChainIterable2, ptr %44, align 8
  %45 = getelementptr ptr, ptr %44, i32 1
  store ptr %43, ptr %45, align 8
  %46 = load ptr, ptr %44, align 8
  %47 = getelementptr ptr, ptr %46, i32 6
  %48 = load ptr, ptr %47, align 8
  %49 = call { i64, i64 } @size_wrapper(ptr %48, ptr %44)
  %50 = extractvalue { i64, i64 } %49, 0
  %51 = call ptr @bump_malloc(i64 %50)
  store ptr %43, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 8, ptr %51)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  store ptr @ChainIterable2, ptr %53, align 8
  store ptr %51, ptr %54, align 8
  store i32 9, ptr %55, align 4
  %56 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %69 = load i32, ptr %67, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %57, ptr @Iterable2)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %80, 3
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %94 = load i32, ptr %92, align 4
  store i32 %94, ptr %93, align 4
  call void @set_offset(ptr %82, ptr @Iterable2)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %105, 3
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 2
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %117, 3
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = load ptr, ptr %7, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 184, ptr %121)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %124 = load i32, ptr %123, align 4
  %125 = getelementptr ptr, ptr %121, i32 %124
  %126 = load ptr, ptr %125, align 8
  %127 = call ptr @typegetter_wrapper(ptr %126, ptr %120)
  %128 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %129 = getelementptr [3 x ptr], ptr %128, i32 0, i32 1
  store ptr %127, ptr %129, align 8
  %130 = getelementptr [3 x ptr], ptr %128, i32 0, i32 2
  store ptr null, ptr %130, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 16, ptr %128)
  store ptr @Iterable2, ptr %128, align 8
  %132 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %133 = getelementptr [3 x ptr], ptr %132, i32 0, i32 1
  store ptr %127, ptr %133, align 8
  %134 = getelementptr [3 x ptr], ptr %132, i32 0, i32 2
  store ptr null, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 16, ptr %132)
  store ptr @Iterable2, ptr %132, align 8
  %136 = alloca [2 x ptr], align 8
  %137 = getelementptr [2 x ptr], ptr %136, i32 0, i32 0
  store ptr %128, ptr %137, align 8
  %138 = getelementptr [2 x ptr], ptr %136, i32 0, i32 1
  store ptr %132, ptr %138, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 4, ptr %136)
  %140 = call ptr @llvm.invariant.start.p0(i64 400, ptr %108)
  %141 = getelementptr ptr, ptr %108, i32 %117
  %142 = getelementptr ptr, ptr %141, i32 3
  %143 = load ptr, ptr %142, align 8
  %144 = alloca { ptr, ptr }, align 8
  %145 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 0
  store ptr %71, ptr %145, align 8
  %146 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 1
  store ptr %96, ptr %146, align 8
  %147 = call ptr @behavior_wrapper(ptr %143, { ptr, ptr, ptr, i32 } %118, ptr %144)
  call void %147({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr %136, { ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %106)
  %148 = alloca { ptr, ptr, ptr, i32 }, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 0
  %151 = load ptr, ptr %149, align 8
  store ptr %151, ptr %150, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %154 = load ptr, ptr %152, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 2
  %157 = load ptr, ptr %155, align 8
  store ptr %157, ptr %156, align 8
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %160 = load i32, ptr %158, align 4
  store i32 %160, ptr %159, align 4
  call void @set_offset(ptr %148, ptr @ChainIterable2)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 0
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %165, 1
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 2
  %168 = load ptr, ptr %167, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %168, 2
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %171 = load i32, ptr %170, align 4
  %172 = insertvalue { ptr, ptr, ptr, i32 } %169, i32 %171, 3
  ret { ptr, ptr, ptr, i32 } %172
}

define { ptr, ptr, ptr, i32 } @Iterable2_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @Iterable2)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 184, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterable2, ptr %44, align 8
  %45 = getelementptr ptr, ptr %44, i32 1
  store ptr %43, ptr %45, align 8
  %46 = load ptr, ptr %44, align 8
  %47 = getelementptr ptr, ptr %46, i32 6
  %48 = load ptr, ptr %47, align 8
  %49 = call { i64, i64 } @size_wrapper(ptr %48, ptr %44)
  %50 = extractvalue { i64, i64 } %49, 0
  %51 = call ptr @bump_malloc(i64 %50)
  store ptr %43, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 8, ptr %51)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  store ptr @InterleaveIterable2, ptr %53, align 8
  store ptr %51, ptr %54, align 8
  store i32 9, ptr %55, align 4
  %56 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %69 = load i32, ptr %67, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %57, ptr @Iterable2)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %80, 3
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %94 = load i32, ptr %92, align 4
  store i32 %94, ptr %93, align 4
  call void @set_offset(ptr %82, ptr @Iterable2)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %105, 3
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 2
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %117, 3
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = load ptr, ptr %7, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 184, ptr %121)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %124 = load i32, ptr %123, align 4
  %125 = getelementptr ptr, ptr %121, i32 %124
  %126 = load ptr, ptr %125, align 8
  %127 = call ptr @typegetter_wrapper(ptr %126, ptr %120)
  %128 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %129 = getelementptr [3 x ptr], ptr %128, i32 0, i32 1
  store ptr %127, ptr %129, align 8
  %130 = getelementptr [3 x ptr], ptr %128, i32 0, i32 2
  store ptr null, ptr %130, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 16, ptr %128)
  store ptr @Iterable2, ptr %128, align 8
  %132 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %133 = getelementptr [3 x ptr], ptr %132, i32 0, i32 1
  store ptr %127, ptr %133, align 8
  %134 = getelementptr [3 x ptr], ptr %132, i32 0, i32 2
  store ptr null, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 16, ptr %132)
  store ptr @Iterable2, ptr %132, align 8
  %136 = alloca [2 x ptr], align 8
  %137 = getelementptr [2 x ptr], ptr %136, i32 0, i32 0
  store ptr %128, ptr %137, align 8
  %138 = getelementptr [2 x ptr], ptr %136, i32 0, i32 1
  store ptr %132, ptr %138, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 4, ptr %136)
  %140 = call ptr @llvm.invariant.start.p0(i64 400, ptr %108)
  %141 = getelementptr ptr, ptr %108, i32 %117
  %142 = getelementptr ptr, ptr %141, i32 3
  %143 = load ptr, ptr %142, align 8
  %144 = alloca { ptr, ptr }, align 8
  %145 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 0
  store ptr %71, ptr %145, align 8
  %146 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 1
  store ptr %96, ptr %146, align 8
  %147 = call ptr @behavior_wrapper(ptr %143, { ptr, ptr, ptr, i32 } %118, ptr %144)
  call void %147({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr %136, { ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %106)
  %148 = alloca { ptr, ptr, ptr, i32 }, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 0
  %151 = load ptr, ptr %149, align 8
  store ptr %151, ptr %150, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %154 = load ptr, ptr %152, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 2
  %157 = load ptr, ptr %155, align 8
  store ptr %157, ptr %156, align 8
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %160 = load i32, ptr %158, align 4
  store i32 %160, ptr %159, align 4
  call void @set_offset(ptr %148, ptr @InterleaveIterable2)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 0
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %165, 1
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 2
  %168 = load ptr, ptr %167, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %168, 2
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %171 = load i32, ptr %170, align 4
  %172 = insertvalue { ptr, ptr, ptr, i32 } %169, i32 %171, 3
  ret { ptr, ptr, ptr, i32 } %172
}

define { ptr, ptr, ptr, i32 } @Iterable2_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @Iterable2)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 184, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %44, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 184, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = load ptr, ptr %52, align 8
  %54 = call ptr @typegetter_wrapper(ptr %53, ptr %47)
  %55 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %56 = getelementptr [4 x ptr], ptr %55, i32 0, i32 2
  store ptr %54, ptr %56, align 8
  %57 = getelementptr [4 x ptr], ptr %55, i32 0, i32 1
  store ptr %43, ptr %57, align 8
  %58 = getelementptr [4 x ptr], ptr %55, i32 0, i32 3
  store ptr null, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  store ptr @Pair, ptr %55, align 8
  %60 = alloca [4 x ptr], align 8
  store ptr @ZipIterable2, ptr %60, align 8
  %61 = getelementptr ptr, ptr %60, i32 1
  store ptr %43, ptr %61, align 8
  %62 = getelementptr ptr, ptr %60, i32 2
  store ptr %54, ptr %62, align 8
  %63 = getelementptr ptr, ptr %60, i32 3
  store ptr %55, ptr %63, align 8
  %64 = load ptr, ptr %60, align 8
  %65 = getelementptr ptr, ptr %64, i32 6
  %66 = load ptr, ptr %65, align 8
  %67 = call { i64, i64 } @size_wrapper(ptr %66, ptr %60)
  %68 = extractvalue { i64, i64 } %67, 0
  %69 = call ptr @bump_malloc(i64 %68)
  store ptr %43, ptr %69, align 8
  %70 = getelementptr ptr, ptr %69, i32 1
  store ptr %54, ptr %70, align 8
  %71 = getelementptr ptr, ptr %69, i32 2
  store ptr %55, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 24, ptr %69)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  store ptr @ZipIterable2, ptr %73, align 8
  store ptr %69, ptr %74, align 8
  store i32 9, ptr %75, align 4
  %76 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterable2)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %114 = load i32, ptr %112, align 4
  store i32 %114, ptr %113, align 4
  call void @set_offset(ptr %102, ptr @Iterable2)
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %119, 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %122, 2
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %125 = load i32, ptr %124, align 4
  %126 = insertvalue { ptr, ptr, ptr, i32 } %123, i32 %125, 3
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %137, 3
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = load ptr, ptr %7, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 184, ptr %141)
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %144 = load i32, ptr %143, align 4
  %145 = getelementptr ptr, ptr %141, i32 %144
  %146 = load ptr, ptr %145, align 8
  %147 = call ptr @typegetter_wrapper(ptr %146, ptr %140)
  %148 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %148, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 16, ptr %148)
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = load ptr, ptr %148, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 184, ptr %152)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %155 = load i32, ptr %154, align 4
  %156 = getelementptr ptr, ptr %152, i32 %155
  %157 = load ptr, ptr %156, align 8
  %158 = call ptr @typegetter_wrapper(ptr %157, ptr %151)
  %159 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %160 = getelementptr [3 x ptr], ptr %159, i32 0, i32 1
  store ptr %147, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %159, i32 0, i32 2
  store ptr null, ptr %161, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 16, ptr %159)
  store ptr @Iterable2, ptr %159, align 8
  %163 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %164 = getelementptr [3 x ptr], ptr %163, i32 0, i32 1
  store ptr %158, ptr %164, align 8
  %165 = getelementptr [3 x ptr], ptr %163, i32 0, i32 2
  store ptr null, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 16, ptr %163)
  store ptr @Iterable2, ptr %163, align 8
  %167 = alloca [2 x ptr], align 8
  %168 = getelementptr [2 x ptr], ptr %167, i32 0, i32 0
  store ptr %159, ptr %168, align 8
  %169 = getelementptr [2 x ptr], ptr %167, i32 0, i32 1
  store ptr %163, ptr %169, align 8
  %170 = call ptr @llvm.invariant.start.p0(i64 4, ptr %167)
  %171 = call ptr @llvm.invariant.start.p0(i64 416, ptr %128)
  %172 = getelementptr ptr, ptr %128, i32 %137
  %173 = getelementptr ptr, ptr %172, i32 5
  %174 = load ptr, ptr %173, align 8
  %175 = alloca { ptr, ptr }, align 8
  %176 = getelementptr { ptr, ptr }, ptr %175, i32 0, i32 0
  store ptr %91, ptr %176, align 8
  %177 = getelementptr { ptr, ptr }, ptr %175, i32 0, i32 1
  store ptr %116, ptr %177, align 8
  %178 = call ptr @behavior_wrapper(ptr %174, { ptr, ptr, ptr, i32 } %138, ptr %175)
  call void %178({ ptr, ptr, ptr, i32 } %138, { ptr, ptr, ptr, i32 } %138, ptr %167, { ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %126)
  %179 = alloca { ptr, ptr, ptr, i32 }, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %191 = load i32, ptr %189, align 4
  store i32 %191, ptr %190, align 4
  call void @set_offset(ptr %179, ptr @ZipIterable2)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %196, 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %199, 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %202 = load i32, ptr %201, align 4
  %203 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %202, 3
  ret { ptr, ptr, ptr, i32 } %203
}

define { ptr, ptr, ptr, i32 } @Iterable2_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @Iterable2)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 184, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %44, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 184, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = load ptr, ptr %52, align 8
  %54 = call ptr @typegetter_wrapper(ptr %53, ptr %47)
  %55 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %56 = getelementptr [4 x ptr], ptr %55, i32 0, i32 2
  store ptr %54, ptr %56, align 8
  %57 = getelementptr [4 x ptr], ptr %55, i32 0, i32 1
  store ptr %43, ptr %57, align 8
  %58 = getelementptr [4 x ptr], ptr %55, i32 0, i32 3
  store ptr null, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  store ptr @Pair, ptr %55, align 8
  %60 = alloca [4 x ptr], align 8
  store ptr @ProductIterable2, ptr %60, align 8
  %61 = getelementptr ptr, ptr %60, i32 1
  store ptr %43, ptr %61, align 8
  %62 = getelementptr ptr, ptr %60, i32 2
  store ptr %54, ptr %62, align 8
  %63 = getelementptr ptr, ptr %60, i32 3
  store ptr %55, ptr %63, align 8
  %64 = load ptr, ptr %60, align 8
  %65 = getelementptr ptr, ptr %64, i32 6
  %66 = load ptr, ptr %65, align 8
  %67 = call { i64, i64 } @size_wrapper(ptr %66, ptr %60)
  %68 = extractvalue { i64, i64 } %67, 0
  %69 = call ptr @bump_malloc(i64 %68)
  store ptr %43, ptr %69, align 8
  %70 = getelementptr ptr, ptr %69, i32 1
  store ptr %54, ptr %70, align 8
  %71 = getelementptr ptr, ptr %69, i32 2
  store ptr %55, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 24, ptr %69)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  store ptr @ProductIterable2, ptr %73, align 8
  store ptr %69, ptr %74, align 8
  store i32 9, ptr %75, align 4
  %76 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterable2)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %114 = load i32, ptr %112, align 4
  store i32 %114, ptr %113, align 4
  call void @set_offset(ptr %102, ptr @Iterable2)
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %119, 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %122, 2
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %125 = load i32, ptr %124, align 4
  %126 = insertvalue { ptr, ptr, ptr, i32 } %123, i32 %125, 3
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %137, 3
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = load ptr, ptr %7, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 184, ptr %141)
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %144 = load i32, ptr %143, align 4
  %145 = getelementptr ptr, ptr %141, i32 %144
  %146 = load ptr, ptr %145, align 8
  %147 = call ptr @typegetter_wrapper(ptr %146, ptr %140)
  %148 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %148, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 16, ptr %148)
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = load ptr, ptr %148, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 184, ptr %152)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %155 = load i32, ptr %154, align 4
  %156 = getelementptr ptr, ptr %152, i32 %155
  %157 = load ptr, ptr %156, align 8
  %158 = call ptr @typegetter_wrapper(ptr %157, ptr %151)
  %159 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %160 = getelementptr [3 x ptr], ptr %159, i32 0, i32 1
  store ptr %147, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %159, i32 0, i32 2
  store ptr null, ptr %161, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 16, ptr %159)
  store ptr @Iterable2, ptr %159, align 8
  %163 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %164 = getelementptr [3 x ptr], ptr %163, i32 0, i32 1
  store ptr %158, ptr %164, align 8
  %165 = getelementptr [3 x ptr], ptr %163, i32 0, i32 2
  store ptr null, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 16, ptr %163)
  store ptr @Iterable2, ptr %163, align 8
  %167 = alloca [2 x ptr], align 8
  %168 = getelementptr [2 x ptr], ptr %167, i32 0, i32 0
  store ptr %159, ptr %168, align 8
  %169 = getelementptr [2 x ptr], ptr %167, i32 0, i32 1
  store ptr %163, ptr %169, align 8
  %170 = call ptr @llvm.invariant.start.p0(i64 4, ptr %167)
  %171 = call ptr @llvm.invariant.start.p0(i64 416, ptr %128)
  %172 = getelementptr ptr, ptr %128, i32 %137
  %173 = getelementptr ptr, ptr %172, i32 5
  %174 = load ptr, ptr %173, align 8
  %175 = alloca { ptr, ptr }, align 8
  %176 = getelementptr { ptr, ptr }, ptr %175, i32 0, i32 0
  store ptr %91, ptr %176, align 8
  %177 = getelementptr { ptr, ptr }, ptr %175, i32 0, i32 1
  store ptr %116, ptr %177, align 8
  %178 = call ptr @behavior_wrapper(ptr %174, { ptr, ptr, ptr, i32 } %138, ptr %175)
  call void %178({ ptr, ptr, ptr, i32 } %138, { ptr, ptr, ptr, i32 } %138, ptr %167, { ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %126)
  %179 = alloca { ptr, ptr, ptr, i32 }, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %191 = load i32, ptr %189, align 4
  store i32 %191, ptr %190, align 4
  call void @set_offset(ptr %179, ptr @ProductIterable2)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %196, 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %199, 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %202 = load i32, ptr %201, align 4
  %203 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %202, 3
  ret { ptr, ptr, ptr, i32 } %203
}

define { i64, i64 } @_size_ProductIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ProductIterable2_field_ProductIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ProductIterable2_field_ProductIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterable2_field_ProductIterable2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 17
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ProductIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 18
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ProductIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 9197944775169318296, i64 ptrtoint (ptr @Pair to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 20
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 27
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 28
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @ProductIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 3
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterable2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 416, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 4
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ProductIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 416, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %46)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 416, ptr %56)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %59 = load i32, ptr %58, align 4
  %60 = getelementptr ptr, ptr %56, i32 %59
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = call ptr @typegetter_wrapper(ptr %62, ptr %55)
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 0, ptr %64)
  %66 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %67 = getelementptr ptr, ptr %34, i32 %43
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = alloca {}, align 8
  %71 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %44, ptr %70)
  %72 = call { ptr, ptr, ptr, i32 } %71({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %64)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %72, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = load i32, ptr %85, align 4
  store i32 %87, ptr %86, align 4
  call void @set_offset(ptr %75, ptr @Iterator2)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %6, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 416, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 4
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr, ptr, ptr, i32 } %98(ptr %89) #16
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %99, ptr %100, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  call void @assume_offset(ptr %100, ptr @Iterable2)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = load ptr, ptr %6, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 416, ptr %104)
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = getelementptr ptr, ptr %104, i32 %107
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @typegetter_wrapper(ptr %109, ptr %103)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = load ptr, ptr %6, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 416, ptr %113)
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = getelementptr ptr, ptr %113, i32 %116
  %118 = getelementptr ptr, ptr %117, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = call ptr @typegetter_wrapper(ptr %119, ptr %112)
  %121 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %122 = getelementptr [4 x ptr], ptr %121, i32 0, i32 2
  store ptr %120, ptr %122, align 8
  %123 = getelementptr [4 x ptr], ptr %121, i32 0, i32 1
  store ptr %110, ptr %123, align 8
  %124 = getelementptr [4 x ptr], ptr %121, i32 0, i32 3
  store ptr null, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 24, ptr %121)
  store ptr @Pair, ptr %121, align 8
  %126 = alloca [4 x ptr], align 8
  store ptr @ProductIterator2, ptr %126, align 8
  %127 = getelementptr ptr, ptr %126, i32 1
  store ptr %110, ptr %127, align 8
  %128 = getelementptr ptr, ptr %126, i32 2
  store ptr %120, ptr %128, align 8
  %129 = getelementptr ptr, ptr %126, i32 3
  store ptr %121, ptr %129, align 8
  %130 = load ptr, ptr %126, align 8
  %131 = getelementptr ptr, ptr %130, i32 6
  %132 = load ptr, ptr %131, align 8
  %133 = call { i64, i64 } @size_wrapper(ptr %132, ptr %126)
  %134 = extractvalue { i64, i64 } %133, 0
  %135 = call ptr @bump_malloc(i64 %134)
  store ptr %110, ptr %135, align 8
  %136 = getelementptr ptr, ptr %135, i32 1
  store ptr %120, ptr %136, align 8
  %137 = getelementptr ptr, ptr %135, i32 2
  store ptr %121, ptr %137, align 8
  %138 = call ptr @llvm.invariant.start.p0(i64 24, ptr %135)
  %139 = alloca { ptr, ptr, ptr, i32 }, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 1
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 3
  store ptr @ProductIterator2, ptr %139, align 8
  store ptr %135, ptr %140, align 8
  store i32 9, ptr %141, align 4
  %142 = call ptr @llvm.invariant.start.p0(i64 16, ptr %139)
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = load ptr, ptr %6, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 416, ptr %145)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %148 = load i32, ptr %147, align 4
  %149 = getelementptr ptr, ptr %145, i32 %148
  %150 = getelementptr ptr, ptr %149, i32 3
  %151 = load ptr, ptr %150, align 8
  %152 = getelementptr { ptr, ptr }, ptr %151, i32 0, i32 0
  %153 = load ptr, ptr %152, align 8
  %154 = call { ptr, ptr, ptr, i32 } %153(ptr %144) #16
  %155 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %154, ptr %155, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 16, ptr %155)
  call void @assume_offset(ptr %155, ptr @Iterable2)
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %158, 0
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %161, 1
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %164 = load ptr, ptr %163, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, ptr %164, 2
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %167 = load i32, ptr %166, align 4
  %168 = insertvalue { ptr, ptr, ptr, i32 } %165, i32 %167, 3
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = load ptr, ptr %6, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 416, ptr %171)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %174 = load i32, ptr %173, align 4
  %175 = getelementptr ptr, ptr %171, i32 %174
  %176 = load ptr, ptr %175, align 8
  %177 = call ptr @typegetter_wrapper(ptr %176, ptr %170)
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %6, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 416, ptr %180)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = getelementptr ptr, ptr %180, i32 %183
  %185 = getelementptr ptr, ptr %184, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = call ptr @typegetter_wrapper(ptr %186, ptr %179)
  %188 = alloca [0 x ptr], align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 0, ptr %188)
  %190 = call ptr @llvm.invariant.start.p0(i64 184, ptr %158)
  %191 = getelementptr ptr, ptr %158, i32 %167
  %192 = getelementptr ptr, ptr %191, i32 1
  %193 = load ptr, ptr %192, align 8
  %194 = alloca {}, align 8
  %195 = call ptr @behavior_wrapper(ptr %193, { ptr, ptr, ptr, i32 } %168, ptr %194)
  %196 = call { ptr, ptr, ptr, i32 } %195({ ptr, ptr, ptr, i32 } %168, { ptr, ptr, ptr, i32 } %168, ptr %188)
  %197 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %196, ptr %197, align 8
  %198 = call ptr @llvm.invariant.start.p0(i64 16, ptr %197)
  %199 = alloca { ptr, ptr, ptr, i32 }, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 0
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 0
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 1
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 1
  %205 = load ptr, ptr %203, align 8
  store ptr %205, ptr %204, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 2
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 2
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %197, i32 0, i32 3
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 3
  %211 = load i32, ptr %209, align 4
  store i32 %211, ptr %210, align 4
  call void @set_offset(ptr %199, ptr @Iterator2)
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = load ptr, ptr %6, align 8
  %215 = call ptr @llvm.invariant.start.p0(i64 416, ptr %214)
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %217 = load i32, ptr %216, align 4
  %218 = getelementptr ptr, ptr %214, i32 %217
  %219 = getelementptr ptr, ptr %218, i32 4
  %220 = load ptr, ptr %219, align 8
  %221 = getelementptr { ptr, ptr }, ptr %220, i32 0, i32 0
  %222 = load ptr, ptr %221, align 8
  %223 = call { ptr, ptr, ptr, i32 } %222(ptr %213) #16
  %224 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %223, ptr %224, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 16, ptr %224)
  call void @assume_offset(ptr %224, ptr @Iterable2)
  %226 = alloca { ptr, ptr, ptr, i32 }, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 0
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 0
  %229 = load ptr, ptr %227, align 8
  store ptr %229, ptr %228, align 8
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 1
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 1
  %232 = load ptr, ptr %230, align 8
  store ptr %232, ptr %231, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 2
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 2
  %235 = load ptr, ptr %233, align 8
  store ptr %235, ptr %234, align 8
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 3
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 3
  %238 = load i32, ptr %236, align 4
  store i32 %238, ptr %237, align 4
  call void @set_offset(ptr %226, ptr @Iterator2)
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 0
  %240 = load ptr, ptr %239, align 8
  %241 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %240, 0
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 1
  %243 = load ptr, ptr %242, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } %241, ptr %243, 1
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 2
  %246 = load ptr, ptr %245, align 8
  %247 = insertvalue { ptr, ptr, ptr, i32 } %244, ptr %246, 2
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 3
  %249 = load i32, ptr %248, align 4
  %250 = insertvalue { ptr, ptr, ptr, i32 } %247, i32 %249, 3
  %251 = alloca { ptr, ptr, ptr, i32 }, align 8
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 0
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 0
  %254 = load ptr, ptr %252, align 8
  store ptr %254, ptr %253, align 8
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 1
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 1
  %257 = load ptr, ptr %255, align 8
  store ptr %257, ptr %256, align 8
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 2
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 2
  %260 = load ptr, ptr %258, align 8
  store ptr %260, ptr %259, align 8
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 3
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 3
  %263 = load i32, ptr %261, align 4
  store i32 %263, ptr %262, align 4
  call void @set_offset(ptr %251, ptr @Iterable2)
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 0
  %265 = load ptr, ptr %264, align 8
  %266 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %265, 0
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 1
  %268 = load ptr, ptr %267, align 8
  %269 = insertvalue { ptr, ptr, ptr, i32 } %266, ptr %268, 1
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 2
  %271 = load ptr, ptr %270, align 8
  %272 = insertvalue { ptr, ptr, ptr, i32 } %269, ptr %271, 2
  %273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 3
  %274 = load i32, ptr %273, align 4
  %275 = insertvalue { ptr, ptr, ptr, i32 } %272, i32 %274, 3
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 0
  %277 = load ptr, ptr %276, align 8
  %278 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %277, 0
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 1
  %280 = load ptr, ptr %279, align 8
  %281 = insertvalue { ptr, ptr, ptr, i32 } %278, ptr %280, 1
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 2
  %283 = load ptr, ptr %282, align 8
  %284 = insertvalue { ptr, ptr, ptr, i32 } %281, ptr %283, 2
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 3
  %286 = load i32, ptr %285, align 4
  %287 = insertvalue { ptr, ptr, ptr, i32 } %284, i32 %286, 3
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %289 = load ptr, ptr %288, align 8
  %290 = load ptr, ptr %6, align 8
  %291 = call ptr @llvm.invariant.start.p0(i64 416, ptr %290)
  %292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %293 = load i32, ptr %292, align 4
  %294 = getelementptr ptr, ptr %290, i32 %293
  %295 = load ptr, ptr %294, align 8
  %296 = call ptr @typegetter_wrapper(ptr %295, ptr %289)
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %298 = load ptr, ptr %297, align 8
  %299 = load ptr, ptr %6, align 8
  %300 = call ptr @llvm.invariant.start.p0(i64 416, ptr %299)
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %302 = load i32, ptr %301, align 4
  %303 = getelementptr ptr, ptr %299, i32 %302
  %304 = getelementptr ptr, ptr %303, i32 1
  %305 = load ptr, ptr %304, align 8
  %306 = call ptr @typegetter_wrapper(ptr %305, ptr %298)
  %307 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %308 = getelementptr [3 x ptr], ptr %307, i32 0, i32 1
  store ptr %296, ptr %308, align 8
  %309 = getelementptr [3 x ptr], ptr %307, i32 0, i32 2
  store ptr null, ptr %309, align 8
  %310 = call ptr @llvm.invariant.start.p0(i64 16, ptr %307)
  store ptr @Iterator2, ptr %307, align 8
  %311 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %312 = getelementptr [3 x ptr], ptr %311, i32 0, i32 1
  store ptr %306, ptr %312, align 8
  %313 = getelementptr [3 x ptr], ptr %311, i32 0, i32 2
  store ptr null, ptr %313, align 8
  %314 = call ptr @llvm.invariant.start.p0(i64 16, ptr %311)
  store ptr @Iterable2, ptr %311, align 8
  %315 = alloca [2 x ptr], align 8
  %316 = getelementptr [2 x ptr], ptr %315, i32 0, i32 0
  store ptr %307, ptr %316, align 8
  %317 = getelementptr [2 x ptr], ptr %315, i32 0, i32 1
  store ptr %311, ptr %317, align 8
  %318 = call ptr @llvm.invariant.start.p0(i64 4, ptr %315)
  %319 = call ptr @llvm.invariant.start.p0(i64 112, ptr %277)
  %320 = getelementptr ptr, ptr %277, i32 %286
  %321 = getelementptr ptr, ptr %320, i32 7
  %322 = load ptr, ptr %321, align 8
  %323 = alloca { ptr, ptr }, align 8
  %324 = getelementptr { ptr, ptr }, ptr %323, i32 0, i32 0
  store ptr %240, ptr %324, align 8
  %325 = getelementptr { ptr, ptr }, ptr %323, i32 0, i32 1
  store ptr %265, ptr %325, align 8
  %326 = call ptr @behavior_wrapper(ptr %322, { ptr, ptr, ptr, i32 } %287, ptr %323)
  call void %326({ ptr, ptr, ptr, i32 } %287, { ptr, ptr, ptr, i32 } %287, ptr %315, { ptr, ptr, ptr, i32 } %250, { ptr, ptr, ptr, i32 } %275)
  %327 = alloca { ptr, ptr, ptr, i32 }, align 8
  %328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 0
  %329 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 0
  %330 = load ptr, ptr %328, align 8
  store ptr %330, ptr %329, align 8
  %331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 1
  %332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 1
  %333 = load ptr, ptr %331, align 8
  store ptr %333, ptr %332, align 8
  %334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 2
  %335 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 2
  %336 = load ptr, ptr %334, align 8
  store ptr %336, ptr %335, align 8
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 3
  %338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 3
  %339 = load i32, ptr %337, align 4
  store i32 %339, ptr %338, align 4
  call void @set_offset(ptr %327, ptr @Iterator2)
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 0
  %341 = load ptr, ptr %340, align 8
  %342 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %341, 0
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 1
  %344 = load ptr, ptr %343, align 8
  %345 = insertvalue { ptr, ptr, ptr, i32 } %342, ptr %344, 1
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 2
  %347 = load ptr, ptr %346, align 8
  %348 = insertvalue { ptr, ptr, ptr, i32 } %345, ptr %347, 2
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %327, i32 0, i32 3
  %350 = load i32, ptr %349, align 4
  %351 = insertvalue { ptr, ptr, ptr, i32 } %348, i32 %350, 3
  ret { ptr, ptr, ptr, i32 } %351
}

define { i64, i64 } @_size_ProductIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %29
  %37 = select i1 %36, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %29
  %38 = urem i64 %35, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %41
  %43 = add i64 %35, %42
  %44 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %37
  %45 = select i1 %44, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 %37
  %46 = urem i64 %43, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %47 = icmp eq i64 %46, 0
  %48 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %46
  %49 = select i1 %47, i64 0, i64 %48
  %50 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %49
  %51 = add i64 %43, %50
  %52 = urem i64 %51, %45
  %53 = icmp eq i64 %52, 0
  %54 = sub i64 %45, %52
  %55 = select i1 %53, i64 0, i64 %54
  %56 = add i64 %51, %55
  %57 = insertvalue { i64, i64 } undef, i64 %56, 0
  %58 = insertvalue { i64, i64 } %57, i64 %45, 1
  ret { i64, i64 } %58
}

define ptr @ProductIterator2_field_ProductIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ProductIterator2_field_ProductIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterator2_field_ProductIterator2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterator2_B_init_first_iteratorIterator2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [14 x ptr], ptr %26, i32 0, i32 9
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ProductIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [14 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ProductIterator2_init_first_iteratorIterator2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterator2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterator2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 112, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 3
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterable2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 112, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 5
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %8, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 112, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 5
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr, ptr }, ptr %131, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %134 = call { ptr, ptr, ptr, i32 } %133(ptr %124) #16
  %135 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %134, ptr %135, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 16, ptr %135)
  call void @assume_offset(ptr %135, ptr @Iterable2)
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %141, 1
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 2
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 2
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 3
  %147 = load i32, ptr %146, align 4
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 %147, 3
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = load ptr, ptr %8, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 112, ptr %151)
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %154 = load i32, ptr %153, align 4
  %155 = getelementptr ptr, ptr %151, i32 %154
  %156 = load ptr, ptr %155, align 8
  %157 = call ptr @typegetter_wrapper(ptr %156, ptr %150)
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %159 = load ptr, ptr %158, align 8
  %160 = load ptr, ptr %8, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 112, ptr %160)
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %163 = load i32, ptr %162, align 4
  %164 = getelementptr ptr, ptr %160, i32 %163
  %165 = getelementptr ptr, ptr %164, i32 1
  %166 = load ptr, ptr %165, align 8
  %167 = call ptr @typegetter_wrapper(ptr %166, ptr %159)
  %168 = alloca [0 x ptr], align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 0, ptr %168)
  %170 = call ptr @llvm.invariant.start.p0(i64 184, ptr %138)
  %171 = getelementptr ptr, ptr %138, i32 %147
  %172 = getelementptr ptr, ptr %171, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = alloca {}, align 8
  %175 = call ptr @behavior_wrapper(ptr %173, { ptr, ptr, ptr, i32 } %148, ptr %174)
  %176 = call { ptr, ptr, ptr, i32 } %175({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr %168)
  %177 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %176, ptr %177, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 16, ptr %177)
  %179 = alloca { ptr, ptr, ptr, i32 }, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 0
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 1
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 2
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 3
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %191 = load i32, ptr %189, align 4
  store i32 %191, ptr %190, align 4
  call void @set_offset(ptr %179, ptr @Iterator2)
  %192 = alloca { ptr, ptr, ptr, i32 }, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 0
  %195 = load ptr, ptr %193, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 1
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 2
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 3
  %204 = load i32, ptr %202, align 4
  store i32 %204, ptr %203, align 4
  call void @set_offset(ptr %192, ptr @Iterator2)
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %206 = load ptr, ptr %205, align 8
  %207 = load ptr, ptr %8, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 112, ptr %207)
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %210 = load i32, ptr %209, align 4
  %211 = getelementptr ptr, ptr %207, i32 %210
  %212 = getelementptr ptr, ptr %211, i32 4
  %213 = load ptr, ptr %212, align 8
  %214 = getelementptr { ptr, ptr }, ptr %213, i32 0, i32 1
  %215 = load ptr, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 0
  %217 = load ptr, ptr %216, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %217, 0
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 1
  %220 = load ptr, ptr %219, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %220, 1
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 2
  %223 = load ptr, ptr %222, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } %221, ptr %223, 2
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 3
  %226 = load i32, ptr %225, align 4
  %227 = insertvalue { ptr, ptr, ptr, i32 } %224, i32 %226, 3
  call void %215(ptr %206, { ptr, ptr, ptr, i32 } %227) #15
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %229 = load ptr, ptr %228, align 8
  %230 = load ptr, ptr %8, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 112, ptr %230)
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %233 = load i32, ptr %232, align 4
  %234 = getelementptr ptr, ptr %230, i32 %233
  %235 = getelementptr ptr, ptr %234, i32 3
  %236 = load ptr, ptr %235, align 8
  %237 = getelementptr { ptr, ptr }, ptr %236, i32 0, i32 0
  %238 = load ptr, ptr %237, align 8
  %239 = call { ptr, ptr, ptr, i32 } %238(ptr %229) #16
  %240 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %239, ptr %240, align 8
  %241 = call ptr @llvm.invariant.start.p0(i64 16, ptr %240)
  call void @assume_offset(ptr %240, ptr @Iterator2)
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 0
  %243 = load ptr, ptr %242, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %243, 0
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 1
  %246 = load ptr, ptr %245, align 8
  %247 = insertvalue { ptr, ptr, ptr, i32 } %244, ptr %246, 1
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 2
  %249 = load ptr, ptr %248, align 8
  %250 = insertvalue { ptr, ptr, ptr, i32 } %247, ptr %249, 2
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 3
  %252 = load i32, ptr %251, align 4
  %253 = insertvalue { ptr, ptr, ptr, i32 } %250, i32 %252, 3
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %255 = load ptr, ptr %254, align 8
  %256 = load ptr, ptr %8, align 8
  %257 = call ptr @llvm.invariant.start.p0(i64 112, ptr %256)
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %259 = load i32, ptr %258, align 4
  %260 = getelementptr ptr, ptr %256, i32 %259
  %261 = load ptr, ptr %260, align 8
  %262 = call ptr @typegetter_wrapper(ptr %261, ptr %255)
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %264 = load ptr, ptr %263, align 8
  %265 = load ptr, ptr %8, align 8
  %266 = call ptr @llvm.invariant.start.p0(i64 112, ptr %265)
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %268 = load i32, ptr %267, align 4
  %269 = getelementptr ptr, ptr %265, i32 %268
  %270 = getelementptr ptr, ptr %269, i32 1
  %271 = load ptr, ptr %270, align 8
  %272 = call ptr @typegetter_wrapper(ptr %271, ptr %264)
  %273 = alloca [0 x ptr], align 8
  %274 = call ptr @llvm.invariant.start.p0(i64 0, ptr %273)
  %275 = call ptr @llvm.invariant.start.p0(i64 24, ptr %243)
  %276 = getelementptr ptr, ptr %243, i32 %252
  %277 = getelementptr ptr, ptr %276, i32 1
  %278 = load ptr, ptr %277, align 8
  %279 = alloca {}, align 8
  %280 = call ptr @behavior_wrapper(ptr %278, { ptr, ptr, ptr, i32 } %253, ptr %279)
  %281 = call { ptr, i160 } %280({ ptr, ptr, ptr, i32 } %253, { ptr, ptr, ptr, i32 } %253, ptr %273)
  %282 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %281, ptr %282, align 8
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %284 = load ptr, ptr %283, align 8
  %285 = load ptr, ptr %8, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 112, ptr %285)
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %288 = load i32, ptr %287, align 4
  %289 = getelementptr ptr, ptr %285, i32 %288
  %290 = getelementptr ptr, ptr %289, i32 6
  %291 = load ptr, ptr %290, align 8
  %292 = getelementptr { ptr, ptr }, ptr %291, i32 0, i32 1
  %293 = load ptr, ptr %292, align 8
  %294 = getelementptr { ptr, i160 }, ptr %282, i32 0, i32 0
  %295 = load ptr, ptr %294, align 8
  %296 = insertvalue { ptr, i160 } undef, ptr %295, 0
  %297 = getelementptr { ptr, i160 }, ptr %282, i32 0, i32 1
  %298 = load i160, ptr %297, align 4
  %299 = insertvalue { ptr, i160 } %296, i160 %298, 1
  call void %293(ptr %284, { ptr, i160 } %299) #15
  ret void
}

define { ptr, i160 } @ProductIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [0 x ptr], align 8
  %8 = alloca {}, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca [2 x ptr], align 8
  %19 = alloca { ptr, ptr }, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = alloca [0 x ptr], align 8
  %22 = alloca {}, align 8
  %23 = alloca { ptr, i160 }, align 8
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = alloca [0 x ptr], align 8
  %26 = alloca {}, align 8
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca { ptr, i160 }, align 8
  %31 = alloca i160, align 8
  %32 = alloca ptr, align 8
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca { ptr, i160 }, align 8
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %33, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 16, ptr %33)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @ProductIterator2)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %35, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 112, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 6
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call { ptr, i160 } %58(ptr %49) #16
  %60 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %59, ptr %60, align 8
  %61 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 0
  store ptr %61, ptr %.reg2mem12, align 8
  br label %62

62:                                               ; preds = %327, %3
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %63 = load ptr, ptr %.reload13, align 8
  %64 = ptrtoint ptr %63 to i64
  %65 = icmp eq i64 %64, ptrtoint (ptr @nil_typ to i64)
  %66 = icmp eq i64 %64, 0
  %67 = or i1 %65, %66
  %68 = icmp eq i1 %67, false
  br i1 %68, label %69, label %323

69:                                               ; preds = %62
  %70 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  store ptr %71, ptr %5, align 8
  %72 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 1
  %73 = load i160, ptr %72, align 4
  store i160 %73, ptr %4, align 4
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = load ptr, ptr %35, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 112, ptr %76)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %79 = load i32, ptr %78, align 4
  %80 = getelementptr ptr, ptr %76, i32 %79
  %81 = getelementptr ptr, ptr %80, i32 4
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr, ptr, ptr, i32 } %84(ptr %75) #16
  store { ptr, ptr, ptr, i32 } %85, ptr %6, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  call void @assume_offset(ptr %6, ptr @Iterator2)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %97, 3
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %35, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 112, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr @typegetter_wrapper(ptr %106, ptr %100)
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load ptr, ptr %35, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 112, ptr %110)
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %113 = load i32, ptr %112, align 4
  %114 = getelementptr ptr, ptr %110, i32 %113
  %115 = getelementptr ptr, ptr %114, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = call ptr @typegetter_wrapper(ptr %116, ptr %109)
  %118 = call ptr @llvm.invariant.start.p0(i64 0, ptr %7)
  %119 = call ptr @llvm.invariant.start.p0(i64 24, ptr %88)
  %120 = getelementptr ptr, ptr %88, i32 %97
  %121 = getelementptr ptr, ptr %120, i32 1
  %122 = load ptr, ptr %121, align 8
  %123 = call ptr @behavior_wrapper(ptr %122, { ptr, ptr, ptr, i32 } %98, ptr %8)
  %124 = call { ptr, i160 } %123({ ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %98, ptr %7)
  store { ptr, i160 } %124, ptr %9, align 8
  %125 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = ptrtoint ptr %126 to i64
  %128 = icmp eq i64 %127, ptrtoint (ptr @nil_typ to i64)
  %129 = icmp eq i64 %127, 0
  %130 = or i1 %128, %129
  %131 = icmp eq i1 %130, false
  %132 = zext i1 %131 to i32
  store i32 %132, ptr %.reg2mem10, align 4
  %133 = icmp ne i1 %130, false
  %134 = zext i1 %133 to i32
  store i32 %134, ptr %.reg2mem8, align 4
  br i1 %131, label %135, label %136

135:                                              ; preds = %69
  br label %322

136:                                              ; preds = %69
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %35, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 112, ptr %139)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = getelementptr ptr, ptr %139, i32 %142
  %144 = getelementptr ptr, ptr %143, i32 3
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr }, ptr %145, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = call { ptr, ptr, ptr, i32 } %147(ptr %138) #16
  store { ptr, ptr, ptr, i32 } %148, ptr %20, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  call void @assume_offset(ptr %20, ptr @Iterator2)
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %151 = load ptr, ptr %150, align 8
  %152 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %151, 0
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %154 = load ptr, ptr %153, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %152, ptr %154, 1
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %157, 2
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %160 = load i32, ptr %159, align 4
  %161 = insertvalue { ptr, ptr, ptr, i32 } %158, i32 %160, 3
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = load ptr, ptr %35, align 8
  %165 = call ptr @llvm.invariant.start.p0(i64 112, ptr %164)
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %167 = load i32, ptr %166, align 4
  %168 = getelementptr ptr, ptr %164, i32 %167
  %169 = load ptr, ptr %168, align 8
  %170 = call ptr @typegetter_wrapper(ptr %169, ptr %163)
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %172 = load ptr, ptr %171, align 8
  %173 = load ptr, ptr %35, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 112, ptr %173)
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = getelementptr ptr, ptr %173, i32 %176
  %178 = getelementptr ptr, ptr %177, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = call ptr @typegetter_wrapper(ptr %179, ptr %172)
  %181 = call ptr @llvm.invariant.start.p0(i64 0, ptr %21)
  %182 = call ptr @llvm.invariant.start.p0(i64 24, ptr %151)
  %183 = getelementptr ptr, ptr %151, i32 %160
  %184 = getelementptr ptr, ptr %183, i32 1
  %185 = load ptr, ptr %184, align 8
  %186 = call ptr @behavior_wrapper(ptr %185, { ptr, ptr, ptr, i32 } %161, ptr %22)
  %187 = call { ptr, i160 } %186({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr %21)
  store { ptr, i160 } %187, ptr %23, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %189 = load ptr, ptr %188, align 8
  %190 = load ptr, ptr %35, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 112, ptr %190)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %193 = load i32, ptr %192, align 4
  %194 = getelementptr ptr, ptr %190, i32 %193
  %195 = getelementptr ptr, ptr %194, i32 6
  %196 = load ptr, ptr %195, align 8
  %197 = getelementptr { ptr, ptr }, ptr %196, i32 0, i32 1
  %198 = load ptr, ptr %197, align 8
  %199 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %200 = load ptr, ptr %199, align 8
  %201 = insertvalue { ptr, i160 } undef, ptr %200, 0
  %202 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %203 = load i160, ptr %202, align 4
  %204 = insertvalue { ptr, i160 } %201, i160 %203, 1
  call void %198(ptr %189, { ptr, i160 } %204) #15
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %206 = load ptr, ptr %205, align 8
  %207 = load ptr, ptr %35, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 112, ptr %207)
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %210 = load i32, ptr %209, align 4
  %211 = getelementptr ptr, ptr %207, i32 %210
  %212 = getelementptr ptr, ptr %211, i32 5
  %213 = load ptr, ptr %212, align 8
  %214 = getelementptr { ptr, ptr }, ptr %213, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  %216 = call { ptr, ptr, ptr, i32 } %215(ptr %206) #16
  store { ptr, ptr, ptr, i32 } %216, ptr %24, align 8
  %217 = call ptr @llvm.invariant.start.p0(i64 16, ptr %24)
  call void @assume_offset(ptr %24, ptr @Iterable2)
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %219 = load ptr, ptr %218, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %219, 0
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %222 = load ptr, ptr %221, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %222, 1
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %225 = load ptr, ptr %224, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %225, 2
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %228 = load i32, ptr %227, align 4
  %229 = insertvalue { ptr, ptr, ptr, i32 } %226, i32 %228, 3
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %231 = load ptr, ptr %230, align 8
  %232 = load ptr, ptr %35, align 8
  %233 = call ptr @llvm.invariant.start.p0(i64 112, ptr %232)
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %235 = load i32, ptr %234, align 4
  %236 = getelementptr ptr, ptr %232, i32 %235
  %237 = load ptr, ptr %236, align 8
  %238 = call ptr @typegetter_wrapper(ptr %237, ptr %231)
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %240 = load ptr, ptr %239, align 8
  %241 = load ptr, ptr %35, align 8
  %242 = call ptr @llvm.invariant.start.p0(i64 112, ptr %241)
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %244 = load i32, ptr %243, align 4
  %245 = getelementptr ptr, ptr %241, i32 %244
  %246 = getelementptr ptr, ptr %245, i32 1
  %247 = load ptr, ptr %246, align 8
  %248 = call ptr @typegetter_wrapper(ptr %247, ptr %240)
  %249 = call ptr @llvm.invariant.start.p0(i64 0, ptr %25)
  %250 = call ptr @llvm.invariant.start.p0(i64 184, ptr %219)
  %251 = getelementptr ptr, ptr %219, i32 %228
  %252 = getelementptr ptr, ptr %251, i32 1
  %253 = load ptr, ptr %252, align 8
  %254 = call ptr @behavior_wrapper(ptr %253, { ptr, ptr, ptr, i32 } %229, ptr %26)
  %255 = call { ptr, ptr, ptr, i32 } %254({ ptr, ptr, ptr, i32 } %229, { ptr, ptr, ptr, i32 } %229, ptr %25)
  store { ptr, ptr, ptr, i32 } %255, ptr %27, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %259 = load ptr, ptr %257, align 8
  store ptr %259, ptr %258, align 8
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %262 = load ptr, ptr %260, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %265 = load ptr, ptr %263, align 8
  store ptr %265, ptr %264, align 8
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %268 = load i32, ptr %266, align 4
  store i32 %268, ptr %267, align 4
  call void @set_offset(ptr %28, ptr @Iterator2)
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %271 = load ptr, ptr %269, align 8
  store ptr %271, ptr %270, align 8
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %274 = load ptr, ptr %272, align 8
  store ptr %274, ptr %273, align 8
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %277 = load ptr, ptr %275, align 8
  store ptr %277, ptr %276, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %280 = load i32, ptr %278, align 4
  store i32 %280, ptr %279, align 4
  call void @set_offset(ptr %29, ptr @Iterator2)
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %282 = load ptr, ptr %281, align 8
  %283 = load ptr, ptr %35, align 8
  %284 = call ptr @llvm.invariant.start.p0(i64 112, ptr %283)
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %286 = load i32, ptr %285, align 4
  %287 = getelementptr ptr, ptr %283, i32 %286
  %288 = getelementptr ptr, ptr %287, i32 4
  %289 = load ptr, ptr %288, align 8
  %290 = getelementptr { ptr, ptr }, ptr %289, i32 0, i32 1
  %291 = load ptr, ptr %290, align 8
  %292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %293 = load ptr, ptr %292, align 8
  %294 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %293, 0
  %295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %296 = load ptr, ptr %295, align 8
  %297 = insertvalue { ptr, ptr, ptr, i32 } %294, ptr %296, 1
  %298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %299 = load ptr, ptr %298, align 8
  %300 = insertvalue { ptr, ptr, ptr, i32 } %297, ptr %299, 2
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %302 = load i32, ptr %301, align 4
  %303 = insertvalue { ptr, ptr, ptr, i32 } %300, i32 %302, 3
  call void %291(ptr %282, { ptr, ptr, ptr, i32 } %303) #15
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %305 = load ptr, ptr %304, align 8
  %306 = load ptr, ptr %35, align 8
  %307 = call ptr @llvm.invariant.start.p0(i64 112, ptr %306)
  %308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %309 = load i32, ptr %308, align 4
  %310 = getelementptr ptr, ptr %306, i32 %309
  %311 = getelementptr ptr, ptr %310, i32 6
  %312 = load ptr, ptr %311, align 8
  %313 = getelementptr { ptr, ptr }, ptr %312, i32 0, i32 0
  %314 = load ptr, ptr %313, align 8
  %315 = call { ptr, i160 } %314(ptr %305) #16
  store { ptr, i160 } %315, ptr %30, align 8
  %316 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 0
  %317 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 0
  %318 = load ptr, ptr %316, align 8
  store ptr %318, ptr %317, align 8
  %319 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 1
  %320 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 1
  %321 = load i160, ptr %319, align 4
  store i160 %321, ptr %320, align 4
  br label %322

322:                                              ; preds = %136, %135
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem16, align 4
  store i32 %.reload11, ptr %.reg2mem18, align 4
  br label %324

323:                                              ; preds = %62
  store i32 0, ptr %.reg2mem16, align 4
  store i32 2, ptr %.reg2mem18, align 4
  br label %324

324:                                              ; preds = %323, %322
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  store i32 %.reload19, ptr %.reg2mem5, align 4
  store i32 %.reload17, ptr %.reg2mem3, align 4
  br label %325

325:                                              ; preds = %324
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %326 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %326, label %327, label %328

327:                                              ; preds = %325
  br label %62

328:                                              ; preds = %325
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %329 = zext i32 %.reload6 to i64
  %330 = trunc i64 %329 to i32
  switch i32 %330, label %427 [
    i32 1, label %331
  ]

331:                                              ; preds = %328
  %332 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %333 = load ptr, ptr %332, align 8
  store ptr %333, ptr %11, align 8
  %334 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %335 = load i160, ptr %334, align 4
  store i160 %335, ptr %10, align 4
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %337 = load ptr, ptr %336, align 8
  %338 = load ptr, ptr %35, align 8
  %339 = call ptr @llvm.invariant.start.p0(i64 112, ptr %338)
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %341 = load i32, ptr %340, align 4
  %342 = getelementptr ptr, ptr %338, i32 %341
  %343 = load ptr, ptr %342, align 8
  %344 = call ptr @typegetter_wrapper(ptr %343, ptr %337)
  %345 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %346 = load ptr, ptr %345, align 8
  %347 = load ptr, ptr %35, align 8
  %348 = call ptr @llvm.invariant.start.p0(i64 112, ptr %347)
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %350 = load i32, ptr %349, align 4
  %351 = getelementptr ptr, ptr %347, i32 %350
  %352 = getelementptr ptr, ptr %351, i32 1
  %353 = load ptr, ptr %352, align 8
  %354 = call ptr @typegetter_wrapper(ptr %353, ptr %346)
  store ptr @Pair, ptr %12, align 8
  %355 = getelementptr ptr, ptr %12, i32 1
  store ptr %344, ptr %355, align 8
  %356 = getelementptr ptr, ptr %12, i32 2
  store ptr %354, ptr %356, align 8
  %357 = load ptr, ptr %12, align 8
  %358 = getelementptr ptr, ptr %357, i32 6
  %359 = load ptr, ptr %358, align 8
  %360 = call { i64, i64 } @size_wrapper(ptr %359, ptr %12)
  %361 = extractvalue { i64, i64 } %360, 0
  %362 = call ptr @bump_malloc(i64 %361)
  store ptr %344, ptr %362, align 8
  %363 = getelementptr ptr, ptr %362, i32 1
  store ptr %354, ptr %363, align 8
  %364 = call ptr @llvm.invariant.start.p0(i64 16, ptr %362)
  %365 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  store ptr @Pair, ptr %13, align 8
  store ptr %362, ptr %365, align 8
  store i32 9, ptr %366, align 4
  %367 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %368 = load ptr, ptr %5, align 8
  store ptr %368, ptr %15, align 8
  %369 = load i160, ptr %4, align 4
  store i160 %369, ptr %14, align 4
  %370 = load ptr, ptr %15, align 8
  %371 = insertvalue { ptr, i160 } undef, ptr %370, 0
  %372 = load i160, ptr %14, align 4
  %373 = insertvalue { ptr, i160 } %371, i160 %372, 1
  %374 = load ptr, ptr %11, align 8
  store ptr %374, ptr %17, align 8
  %375 = load i160, ptr %10, align 4
  store i160 %375, ptr %16, align 4
  %376 = load ptr, ptr %17, align 8
  %377 = insertvalue { ptr, i160 } undef, ptr %376, 0
  %378 = load i160, ptr %16, align 4
  %379 = insertvalue { ptr, i160 } %377, i160 %378, 1
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %381 = load ptr, ptr %380, align 8
  %382 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %381, 0
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %384 = load ptr, ptr %383, align 8
  %385 = insertvalue { ptr, ptr, ptr, i32 } %382, ptr %384, 1
  %386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %387 = load ptr, ptr %386, align 8
  %388 = insertvalue { ptr, ptr, ptr, i32 } %385, ptr %387, 2
  %389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %390 = load i32, ptr %389, align 4
  %391 = insertvalue { ptr, ptr, ptr, i32 } %388, i32 %390, 3
  %392 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %393 = load ptr, ptr %392, align 8
  %394 = load ptr, ptr %35, align 8
  %395 = call ptr @llvm.invariant.start.p0(i64 112, ptr %394)
  %396 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %397 = load i32, ptr %396, align 4
  %398 = getelementptr ptr, ptr %394, i32 %397
  %399 = load ptr, ptr %398, align 8
  %400 = call ptr @typegetter_wrapper(ptr %399, ptr %393)
  %401 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %402 = load ptr, ptr %401, align 8
  %403 = load ptr, ptr %35, align 8
  %404 = call ptr @llvm.invariant.start.p0(i64 112, ptr %403)
  %405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %406 = load i32, ptr %405, align 4
  %407 = getelementptr ptr, ptr %403, i32 %406
  %408 = getelementptr ptr, ptr %407, i32 1
  %409 = load ptr, ptr %408, align 8
  %410 = call ptr @typegetter_wrapper(ptr %409, ptr %402)
  %411 = getelementptr [2 x ptr], ptr %18, i32 0, i32 0
  store ptr %400, ptr %411, align 8
  %412 = getelementptr [2 x ptr], ptr %18, i32 0, i32 1
  store ptr %410, ptr %412, align 8
  %413 = call ptr @llvm.invariant.start.p0(i64 4, ptr %18)
  %414 = call ptr @llvm.invariant.start.p0(i64 80, ptr %381)
  %415 = getelementptr ptr, ptr %381, i32 %390
  %416 = getelementptr ptr, ptr %415, i32 4
  %417 = load ptr, ptr %416, align 8
  %418 = getelementptr { ptr, ptr }, ptr %19, i32 0, i32 0
  store ptr %370, ptr %418, align 8
  %419 = getelementptr { ptr, ptr }, ptr %19, i32 0, i32 1
  store ptr %376, ptr %419, align 8
  %420 = call ptr @behavior_wrapper(ptr %417, { ptr, ptr, ptr, i32 } %391, ptr %19)
  call void %420({ ptr, ptr, ptr, i32 } %391, { ptr, ptr, ptr, i32 } %391, ptr %18, { ptr, i160 } %373, { ptr, i160 } %379)
  %421 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 0
  %422 = load ptr, ptr %421, align 8
  %423 = insertvalue { ptr, i160 } undef, ptr %422, 0
  %424 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 1
  %425 = load i160, ptr %424, align 4
  %426 = insertvalue { ptr, i160 } %423, i160 %425, 1
  store { ptr, i160 } %426, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem14, align 8
  br label %432

427:                                              ; preds = %328
  store [0 x i8] undef, ptr %31, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %32, align 4
  %428 = load ptr, ptr %32, align 8
  %429 = insertvalue { ptr, i160 } undef, ptr %428, 0
  %430 = load i160, ptr %31, align 4
  %431 = insertvalue { ptr, i160 } %429, i160 %430, 1
  store { ptr, i160 } %431, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem14, align 8
  br label %432

432:                                              ; preds = %427, %331
  %.reload15 = load { ptr, i160 }, ptr %.reg2mem14, align 8
  ret { ptr, i160 } %.reload15
}

define { ptr, i160 } @ProductIterator2_getter_current_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = getelementptr i8, ptr %0, i64 %36
  %38 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %42 = load i160, ptr %41, align 4
  %43 = insertvalue { ptr, i160 } %40, i160 %42, 1
  ret { ptr, i160 } %43
}

define void @ProductIterator2_setter_current_first(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 %32, %36
  %38 = getelementptr i8, ptr %0, i64 %37
  %39 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %39, align 8
  %40 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 0
  %41 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 0
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %44 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 1
  %45 = load i160, ptr %43, align 4
  store i160 %45, ptr %44, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %25, %29
  %31 = getelementptr i8, ptr %0, i64 %30
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  ret { ptr, ptr, ptr, i32 } %43
}

define void @ProductIterator2_setter_second_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %26, %30
  %32 = getelementptr i8, ptr %0, i64 %31
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %33, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 16, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %46 = load i32, ptr %44, align 4
  store i32 %46, ptr %45, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ProductIterator2_setter_second_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_first_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ProductIterator2_setter_first_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ProductIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ProductIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  ret void
}

define { i64, i64 } @_size_ZipIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ZipIterable2_field_ZipIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ZipIterable2_field_ZipIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterable2_field_ZipIterable2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 17
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ZipIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 18
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ZipIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 9197944775169318296, i64 ptrtoint (ptr @Pair to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 20
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 27
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 28
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @ZipIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 3
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterable2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 416, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 4
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ZipIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 416, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %46)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 416, ptr %56)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %59 = load i32, ptr %58, align 4
  %60 = getelementptr ptr, ptr %56, i32 %59
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = call ptr @typegetter_wrapper(ptr %62, ptr %55)
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 0, ptr %64)
  %66 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %67 = getelementptr ptr, ptr %34, i32 %43
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = alloca {}, align 8
  %71 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %44, ptr %70)
  %72 = call { ptr, ptr, ptr, i32 } %71({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %64)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %72, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = load i32, ptr %85, align 4
  store i32 %87, ptr %86, align 4
  call void @set_offset(ptr %75, ptr @Iterator2)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %6, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 416, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 4
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr, ptr, ptr, i32 } %98(ptr %89) #16
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %99, ptr %100, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  call void @assume_offset(ptr %100, ptr @Iterable2)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %112, 3
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = load ptr, ptr %6, align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 416, ptr %116)
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = getelementptr ptr, ptr %116, i32 %119
  %121 = load ptr, ptr %120, align 8
  %122 = call ptr @typegetter_wrapper(ptr %121, ptr %115)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %6, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 416, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @typegetter_wrapper(ptr %131, ptr %124)
  %133 = alloca [0 x ptr], align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 0, ptr %133)
  %135 = call ptr @llvm.invariant.start.p0(i64 184, ptr %103)
  %136 = getelementptr ptr, ptr %103, i32 %112
  %137 = getelementptr ptr, ptr %136, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = alloca {}, align 8
  %140 = call ptr @behavior_wrapper(ptr %138, { ptr, ptr, ptr, i32 } %113, ptr %139)
  %141 = call { ptr, ptr, ptr, i32 } %140({ ptr, ptr, ptr, i32 } %113, { ptr, ptr, ptr, i32 } %113, ptr %133)
  %142 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %141, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 16, ptr %142)
  %144 = alloca { ptr, ptr, ptr, i32 }, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 0
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 1
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 2
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 3
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  %156 = load i32, ptr %154, align 4
  store i32 %156, ptr %155, align 4
  call void @set_offset(ptr %144, ptr @Iterator2)
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %6, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 416, ptr %159)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = getelementptr ptr, ptr %159, i32 %162
  %164 = load ptr, ptr %163, align 8
  %165 = call ptr @typegetter_wrapper(ptr %164, ptr %158)
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = load ptr, ptr %6, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 416, ptr %168)
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %171 = load i32, ptr %170, align 4
  %172 = getelementptr ptr, ptr %168, i32 %171
  %173 = getelementptr ptr, ptr %172, i32 1
  %174 = load ptr, ptr %173, align 8
  %175 = call ptr @typegetter_wrapper(ptr %174, ptr %167)
  %176 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %177 = getelementptr [4 x ptr], ptr %176, i32 0, i32 2
  store ptr %175, ptr %177, align 8
  %178 = getelementptr [4 x ptr], ptr %176, i32 0, i32 1
  store ptr %165, ptr %178, align 8
  %179 = getelementptr [4 x ptr], ptr %176, i32 0, i32 3
  store ptr null, ptr %179, align 8
  %180 = call ptr @llvm.invariant.start.p0(i64 24, ptr %176)
  store ptr @Pair, ptr %176, align 8
  %181 = alloca [4 x ptr], align 8
  store ptr @ZipIterator2, ptr %181, align 8
  %182 = getelementptr ptr, ptr %181, i32 1
  store ptr %165, ptr %182, align 8
  %183 = getelementptr ptr, ptr %181, i32 2
  store ptr %175, ptr %183, align 8
  %184 = getelementptr ptr, ptr %181, i32 3
  store ptr %176, ptr %184, align 8
  %185 = load ptr, ptr %181, align 8
  %186 = getelementptr ptr, ptr %185, i32 6
  %187 = load ptr, ptr %186, align 8
  %188 = call { i64, i64 } @size_wrapper(ptr %187, ptr %181)
  %189 = extractvalue { i64, i64 } %188, 0
  %190 = call ptr @bump_malloc(i64 %189)
  store ptr %165, ptr %190, align 8
  %191 = getelementptr ptr, ptr %190, i32 1
  store ptr %175, ptr %191, align 8
  %192 = getelementptr ptr, ptr %190, i32 2
  store ptr %176, ptr %192, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 24, ptr %190)
  %194 = alloca { ptr, ptr, ptr, i32 }, align 8
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 1
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 3
  store ptr @ZipIterator2, ptr %194, align 8
  store ptr %190, ptr %195, align 8
  store i32 9, ptr %196, align 4
  %197 = call ptr @llvm.invariant.start.p0(i64 16, ptr %194)
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %199 = load ptr, ptr %198, align 8
  %200 = load ptr, ptr %6, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 416, ptr %200)
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %203 = load i32, ptr %202, align 4
  %204 = getelementptr ptr, ptr %200, i32 %203
  %205 = getelementptr ptr, ptr %204, i32 3
  %206 = load ptr, ptr %205, align 8
  %207 = getelementptr { ptr, ptr }, ptr %206, i32 0, i32 0
  %208 = load ptr, ptr %207, align 8
  %209 = call { ptr, ptr, ptr, i32 } %208(ptr %199) #16
  %210 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %209, ptr %210, align 8
  %211 = call ptr @llvm.invariant.start.p0(i64 16, ptr %210)
  call void @assume_offset(ptr %210, ptr @Iterable2)
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 0
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %213, 0
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 1
  %216 = load ptr, ptr %215, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %216, 1
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 2
  %219 = load ptr, ptr %218, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %217, ptr %219, 2
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 3
  %222 = load i32, ptr %221, align 4
  %223 = insertvalue { ptr, ptr, ptr, i32 } %220, i32 %222, 3
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %225 = load ptr, ptr %224, align 8
  %226 = load ptr, ptr %6, align 8
  %227 = call ptr @llvm.invariant.start.p0(i64 416, ptr %226)
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %229 = load i32, ptr %228, align 4
  %230 = getelementptr ptr, ptr %226, i32 %229
  %231 = load ptr, ptr %230, align 8
  %232 = call ptr @typegetter_wrapper(ptr %231, ptr %225)
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %234 = load ptr, ptr %233, align 8
  %235 = load ptr, ptr %6, align 8
  %236 = call ptr @llvm.invariant.start.p0(i64 416, ptr %235)
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %238 = load i32, ptr %237, align 4
  %239 = getelementptr ptr, ptr %235, i32 %238
  %240 = getelementptr ptr, ptr %239, i32 1
  %241 = load ptr, ptr %240, align 8
  %242 = call ptr @typegetter_wrapper(ptr %241, ptr %234)
  %243 = alloca [0 x ptr], align 8
  %244 = call ptr @llvm.invariant.start.p0(i64 0, ptr %243)
  %245 = call ptr @llvm.invariant.start.p0(i64 184, ptr %213)
  %246 = getelementptr ptr, ptr %213, i32 %222
  %247 = getelementptr ptr, ptr %246, i32 1
  %248 = load ptr, ptr %247, align 8
  %249 = alloca {}, align 8
  %250 = call ptr @behavior_wrapper(ptr %248, { ptr, ptr, ptr, i32 } %223, ptr %249)
  %251 = call { ptr, ptr, ptr, i32 } %250({ ptr, ptr, ptr, i32 } %223, { ptr, ptr, ptr, i32 } %223, ptr %243)
  %252 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %251, ptr %252, align 8
  %253 = call ptr @llvm.invariant.start.p0(i64 16, ptr %252)
  %254 = alloca { ptr, ptr, ptr, i32 }, align 8
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 0
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 0
  %257 = load ptr, ptr %255, align 8
  store ptr %257, ptr %256, align 8
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 1
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 1
  %260 = load ptr, ptr %258, align 8
  store ptr %260, ptr %259, align 8
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 2
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 2
  %263 = load ptr, ptr %261, align 8
  store ptr %263, ptr %262, align 8
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 3
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 3
  %266 = load i32, ptr %264, align 4
  store i32 %266, ptr %265, align 4
  call void @set_offset(ptr %254, ptr @Iterator2)
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %268 = load ptr, ptr %267, align 8
  %269 = load ptr, ptr %6, align 8
  %270 = call ptr @llvm.invariant.start.p0(i64 416, ptr %269)
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %272 = load i32, ptr %271, align 4
  %273 = getelementptr ptr, ptr %269, i32 %272
  %274 = getelementptr ptr, ptr %273, i32 4
  %275 = load ptr, ptr %274, align 8
  %276 = getelementptr { ptr, ptr }, ptr %275, i32 0, i32 0
  %277 = load ptr, ptr %276, align 8
  %278 = call { ptr, ptr, ptr, i32 } %277(ptr %268) #16
  %279 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %278, ptr %279, align 8
  %280 = call ptr @llvm.invariant.start.p0(i64 16, ptr %279)
  call void @assume_offset(ptr %279, ptr @Iterable2)
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 0
  %282 = load ptr, ptr %281, align 8
  %283 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %282, 0
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 1
  %285 = load ptr, ptr %284, align 8
  %286 = insertvalue { ptr, ptr, ptr, i32 } %283, ptr %285, 1
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 2
  %288 = load ptr, ptr %287, align 8
  %289 = insertvalue { ptr, ptr, ptr, i32 } %286, ptr %288, 2
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 3
  %291 = load i32, ptr %290, align 4
  %292 = insertvalue { ptr, ptr, ptr, i32 } %289, i32 %291, 3
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %294 = load ptr, ptr %293, align 8
  %295 = load ptr, ptr %6, align 8
  %296 = call ptr @llvm.invariant.start.p0(i64 416, ptr %295)
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %298 = load i32, ptr %297, align 4
  %299 = getelementptr ptr, ptr %295, i32 %298
  %300 = load ptr, ptr %299, align 8
  %301 = call ptr @typegetter_wrapper(ptr %300, ptr %294)
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %303 = load ptr, ptr %302, align 8
  %304 = load ptr, ptr %6, align 8
  %305 = call ptr @llvm.invariant.start.p0(i64 416, ptr %304)
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %307 = load i32, ptr %306, align 4
  %308 = getelementptr ptr, ptr %304, i32 %307
  %309 = getelementptr ptr, ptr %308, i32 1
  %310 = load ptr, ptr %309, align 8
  %311 = call ptr @typegetter_wrapper(ptr %310, ptr %303)
  %312 = alloca [0 x ptr], align 8
  %313 = call ptr @llvm.invariant.start.p0(i64 0, ptr %312)
  %314 = call ptr @llvm.invariant.start.p0(i64 184, ptr %282)
  %315 = getelementptr ptr, ptr %282, i32 %291
  %316 = getelementptr ptr, ptr %315, i32 1
  %317 = load ptr, ptr %316, align 8
  %318 = alloca {}, align 8
  %319 = call ptr @behavior_wrapper(ptr %317, { ptr, ptr, ptr, i32 } %292, ptr %318)
  %320 = call { ptr, ptr, ptr, i32 } %319({ ptr, ptr, ptr, i32 } %292, { ptr, ptr, ptr, i32 } %292, ptr %312)
  %321 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %320, ptr %321, align 8
  %322 = call ptr @llvm.invariant.start.p0(i64 16, ptr %321)
  %323 = alloca { ptr, ptr, ptr, i32 }, align 8
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 0
  %325 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 0
  %326 = load ptr, ptr %324, align 8
  store ptr %326, ptr %325, align 8
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 1
  %328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 1
  %329 = load ptr, ptr %327, align 8
  store ptr %329, ptr %328, align 8
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 2
  %331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 2
  %332 = load ptr, ptr %330, align 8
  store ptr %332, ptr %331, align 8
  %333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 3
  %334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 3
  %335 = load i32, ptr %333, align 4
  store i32 %335, ptr %334, align 4
  call void @set_offset(ptr %323, ptr @Iterator2)
  %336 = alloca { ptr, ptr, ptr, i32 }, align 8
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 0
  %338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 0
  %339 = load ptr, ptr %337, align 8
  store ptr %339, ptr %338, align 8
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 1
  %341 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 1
  %342 = load ptr, ptr %340, align 8
  store ptr %342, ptr %341, align 8
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 2
  %344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 2
  %345 = load ptr, ptr %343, align 8
  store ptr %345, ptr %344, align 8
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 3
  %347 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 3
  %348 = load i32, ptr %346, align 4
  store i32 %348, ptr %347, align 4
  call void @set_offset(ptr %336, ptr @Iterator2)
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 0
  %350 = load ptr, ptr %349, align 8
  %351 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %350, 0
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 1
  %353 = load ptr, ptr %352, align 8
  %354 = insertvalue { ptr, ptr, ptr, i32 } %351, ptr %353, 1
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 2
  %356 = load ptr, ptr %355, align 8
  %357 = insertvalue { ptr, ptr, ptr, i32 } %354, ptr %356, 2
  %358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 3
  %359 = load i32, ptr %358, align 4
  %360 = insertvalue { ptr, ptr, ptr, i32 } %357, i32 %359, 3
  %361 = alloca { ptr, ptr, ptr, i32 }, align 8
  %362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 0
  %363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 0
  %364 = load ptr, ptr %362, align 8
  store ptr %364, ptr %363, align 8
  %365 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 1
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 1
  %367 = load ptr, ptr %365, align 8
  store ptr %367, ptr %366, align 8
  %368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 2
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 2
  %370 = load ptr, ptr %368, align 8
  store ptr %370, ptr %369, align 8
  %371 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 3
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 3
  %373 = load i32, ptr %371, align 4
  store i32 %373, ptr %372, align 4
  call void @set_offset(ptr %361, ptr @Iterator2)
  %374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 0
  %375 = load ptr, ptr %374, align 8
  %376 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %375, 0
  %377 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 1
  %378 = load ptr, ptr %377, align 8
  %379 = insertvalue { ptr, ptr, ptr, i32 } %376, ptr %378, 1
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 2
  %381 = load ptr, ptr %380, align 8
  %382 = insertvalue { ptr, ptr, ptr, i32 } %379, ptr %381, 2
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 3
  %384 = load i32, ptr %383, align 4
  %385 = insertvalue { ptr, ptr, ptr, i32 } %382, i32 %384, 3
  %386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 0
  %387 = load ptr, ptr %386, align 8
  %388 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %387, 0
  %389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 1
  %390 = load ptr, ptr %389, align 8
  %391 = insertvalue { ptr, ptr, ptr, i32 } %388, ptr %390, 1
  %392 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 2
  %393 = load ptr, ptr %392, align 8
  %394 = insertvalue { ptr, ptr, ptr, i32 } %391, ptr %393, 2
  %395 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 3
  %396 = load i32, ptr %395, align 4
  %397 = insertvalue { ptr, ptr, ptr, i32 } %394, i32 %396, 3
  %398 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %399 = load ptr, ptr %398, align 8
  %400 = load ptr, ptr %6, align 8
  %401 = call ptr @llvm.invariant.start.p0(i64 416, ptr %400)
  %402 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %403 = load i32, ptr %402, align 4
  %404 = getelementptr ptr, ptr %400, i32 %403
  %405 = load ptr, ptr %404, align 8
  %406 = call ptr @typegetter_wrapper(ptr %405, ptr %399)
  %407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %408 = load ptr, ptr %407, align 8
  %409 = load ptr, ptr %6, align 8
  %410 = call ptr @llvm.invariant.start.p0(i64 416, ptr %409)
  %411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %412 = load i32, ptr %411, align 4
  %413 = getelementptr ptr, ptr %409, i32 %412
  %414 = getelementptr ptr, ptr %413, i32 1
  %415 = load ptr, ptr %414, align 8
  %416 = call ptr @typegetter_wrapper(ptr %415, ptr %408)
  %417 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %418 = getelementptr [3 x ptr], ptr %417, i32 0, i32 1
  store ptr %406, ptr %418, align 8
  %419 = getelementptr [3 x ptr], ptr %417, i32 0, i32 2
  store ptr null, ptr %419, align 8
  %420 = call ptr @llvm.invariant.start.p0(i64 16, ptr %417)
  store ptr @Iterator2, ptr %417, align 8
  %421 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %422 = getelementptr [3 x ptr], ptr %421, i32 0, i32 1
  store ptr %416, ptr %422, align 8
  %423 = getelementptr [3 x ptr], ptr %421, i32 0, i32 2
  store ptr null, ptr %423, align 8
  %424 = call ptr @llvm.invariant.start.p0(i64 16, ptr %421)
  store ptr @Iterator2, ptr %421, align 8
  %425 = alloca [2 x ptr], align 8
  %426 = getelementptr [2 x ptr], ptr %425, i32 0, i32 0
  store ptr %417, ptr %426, align 8
  %427 = getelementptr [2 x ptr], ptr %425, i32 0, i32 1
  store ptr %421, ptr %427, align 8
  %428 = call ptr @llvm.invariant.start.p0(i64 4, ptr %425)
  %429 = call ptr @llvm.invariant.start.p0(i64 96, ptr %387)
  %430 = getelementptr ptr, ptr %387, i32 %396
  %431 = getelementptr ptr, ptr %430, i32 5
  %432 = load ptr, ptr %431, align 8
  %433 = alloca { ptr, ptr }, align 8
  %434 = getelementptr { ptr, ptr }, ptr %433, i32 0, i32 0
  store ptr %350, ptr %434, align 8
  %435 = getelementptr { ptr, ptr }, ptr %433, i32 0, i32 1
  store ptr %375, ptr %435, align 8
  %436 = call ptr @behavior_wrapper(ptr %432, { ptr, ptr, ptr, i32 } %397, ptr %433)
  call void %436({ ptr, ptr, ptr, i32 } %397, { ptr, ptr, ptr, i32 } %397, ptr %425, { ptr, ptr, ptr, i32 } %360, { ptr, ptr, ptr, i32 } %385)
  %437 = alloca { ptr, ptr, ptr, i32 }, align 8
  %438 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 0
  %439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 0
  %440 = load ptr, ptr %438, align 8
  store ptr %440, ptr %439, align 8
  %441 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 1
  %442 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 1
  %443 = load ptr, ptr %441, align 8
  store ptr %443, ptr %442, align 8
  %444 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 2
  %445 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 2
  %446 = load ptr, ptr %444, align 8
  store ptr %446, ptr %445, align 8
  %447 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 3
  %448 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 3
  %449 = load i32, ptr %447, align 4
  store i32 %449, ptr %448, align 4
  call void @set_offset(ptr %437, ptr @Iterator2)
  %450 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 0
  %451 = load ptr, ptr %450, align 8
  %452 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %451, 0
  %453 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 1
  %454 = load ptr, ptr %453, align 8
  %455 = insertvalue { ptr, ptr, ptr, i32 } %452, ptr %454, 1
  %456 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 2
  %457 = load ptr, ptr %456, align 8
  %458 = insertvalue { ptr, ptr, ptr, i32 } %455, ptr %457, 2
  %459 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 3
  %460 = load i32, ptr %459, align 4
  %461 = insertvalue { ptr, ptr, ptr, i32 } %458, i32 %460, 3
  ret { ptr, ptr, ptr, i32 } %461
}

define { i64, i64 } @_size_ZipIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ZipIterator2_field_ZipIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ZipIterator2_field_ZipIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterator2_field_ZipIterator2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [12 x ptr], ptr %26, i32 0, i32 7
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ZipIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 8
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ZipIterator2_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterator2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterator2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 96, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 3
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterator2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 96, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 4
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  ret void
}

define { ptr, i160 } @ZipIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [2 x ptr], align 8
  %15 = alloca { ptr, ptr }, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca { ptr, i160 }, align 8
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %.reg2mem17 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @ZipIterator2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %20, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 96, ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr ptr, ptr %35, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 3
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call { ptr, ptr, ptr, i32 } %43(ptr %34) #16
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %44, ptr %45, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 16, ptr %45)
  call void @assume_offset(ptr %45, ptr @Iterator2)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %20, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 96, ptr %61)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = getelementptr ptr, ptr %61, i32 %64
  %66 = load ptr, ptr %65, align 8
  %67 = call ptr @typegetter_wrapper(ptr %66, ptr %60)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %20, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 96, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = call ptr @typegetter_wrapper(ptr %76, ptr %69)
  %78 = alloca [0 x ptr], align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 0, ptr %78)
  %80 = call ptr @llvm.invariant.start.p0(i64 24, ptr %48)
  %81 = getelementptr ptr, ptr %48, i32 %57
  %82 = getelementptr ptr, ptr %81, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = alloca {}, align 8
  %85 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %58, ptr %84)
  %86 = call { ptr, i160 } %85({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %78)
  %87 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %86, ptr %87, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %20, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 96, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 4
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr, ptr, ptr, i32 } %98(ptr %89) #16
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %99, ptr %100, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  call void @assume_offset(ptr %100, ptr @Iterator2)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %112, 3
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = load ptr, ptr %20, align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 96, ptr %116)
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = getelementptr ptr, ptr %116, i32 %119
  %121 = load ptr, ptr %120, align 8
  %122 = call ptr @typegetter_wrapper(ptr %121, ptr %115)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %20, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 96, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @typegetter_wrapper(ptr %131, ptr %124)
  %133 = alloca [0 x ptr], align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 0, ptr %133)
  %135 = call ptr @llvm.invariant.start.p0(i64 24, ptr %103)
  %136 = getelementptr ptr, ptr %103, i32 %112
  %137 = getelementptr ptr, ptr %136, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = alloca {}, align 8
  %140 = call ptr @behavior_wrapper(ptr %138, { ptr, ptr, ptr, i32 } %113, ptr %139)
  %141 = call { ptr, i160 } %140({ ptr, ptr, ptr, i32 } %113, { ptr, ptr, ptr, i32 } %113, ptr %133)
  %142 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %141, ptr %142, align 8
  %143 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = ptrtoint ptr %144 to i64
  %146 = icmp eq i64 %145, ptrtoint (ptr @nil_typ to i64)
  %147 = icmp eq i64 %145, 0
  %148 = or i1 %146, %147
  %149 = icmp eq i1 %148, false
  br i1 %149, label %150, label %267

150:                                              ; preds = %3
  %151 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  store ptr %152, ptr %5, align 8
  %153 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 1
  %154 = load i160, ptr %153, align 4
  store i160 %154, ptr %4, align 4
  %155 = getelementptr { ptr, i160 }, ptr %142, i32 0, i32 0
  %156 = load ptr, ptr %155, align 8
  %157 = ptrtoint ptr %156 to i64
  %158 = icmp eq i64 %157, ptrtoint (ptr @nil_typ to i64)
  %159 = icmp eq i64 %157, 0
  %160 = or i1 %158, %159
  %161 = icmp eq i1 %160, false
  %162 = icmp ne i1 %160, false
  %163 = zext i1 %162 to i32
  store i32 %163, ptr %.reg2mem9, align 4
  br i1 %161, label %164, label %260

164:                                              ; preds = %150
  %165 = getelementptr { ptr, i160 }, ptr %142, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  store ptr %166, ptr %7, align 8
  %167 = getelementptr { ptr, i160 }, ptr %142, i32 0, i32 1
  %168 = load i160, ptr %167, align 4
  store i160 %168, ptr %6, align 4
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = load ptr, ptr %20, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 96, ptr %171)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %174 = load i32, ptr %173, align 4
  %175 = getelementptr ptr, ptr %171, i32 %174
  %176 = load ptr, ptr %175, align 8
  %177 = call ptr @typegetter_wrapper(ptr %176, ptr %170)
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %20, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 96, ptr %180)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = getelementptr ptr, ptr %180, i32 %183
  %185 = getelementptr ptr, ptr %184, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = call ptr @typegetter_wrapper(ptr %186, ptr %179)
  store ptr @Pair, ptr %8, align 8
  %188 = getelementptr ptr, ptr %8, i32 1
  store ptr %177, ptr %188, align 8
  %189 = getelementptr ptr, ptr %8, i32 2
  store ptr %187, ptr %189, align 8
  %190 = load ptr, ptr %8, align 8
  %191 = getelementptr ptr, ptr %190, i32 6
  %192 = load ptr, ptr %191, align 8
  %193 = call { i64, i64 } @size_wrapper(ptr %192, ptr %8)
  %194 = extractvalue { i64, i64 } %193, 0
  %195 = call ptr @bump_malloc(i64 %194)
  store ptr %177, ptr %195, align 8
  %196 = getelementptr ptr, ptr %195, i32 1
  store ptr %187, ptr %196, align 8
  %197 = call ptr @llvm.invariant.start.p0(i64 16, ptr %195)
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  store ptr @Pair, ptr %9, align 8
  store ptr %195, ptr %198, align 8
  store i32 9, ptr %199, align 4
  %200 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %201 = load ptr, ptr %5, align 8
  store ptr %201, ptr %11, align 8
  %202 = load i160, ptr %4, align 4
  store i160 %202, ptr %10, align 4
  %203 = load ptr, ptr %11, align 8
  %204 = insertvalue { ptr, i160 } undef, ptr %203, 0
  %205 = load i160, ptr %10, align 4
  %206 = insertvalue { ptr, i160 } %204, i160 %205, 1
  %207 = load ptr, ptr %7, align 8
  store ptr %207, ptr %13, align 8
  %208 = load i160, ptr %6, align 4
  store i160 %208, ptr %12, align 4
  %209 = load ptr, ptr %13, align 8
  %210 = insertvalue { ptr, i160 } undef, ptr %209, 0
  %211 = load i160, ptr %12, align 4
  %212 = insertvalue { ptr, i160 } %210, i160 %211, 1
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %214 = load ptr, ptr %213, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %214, 0
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %217 = load ptr, ptr %216, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %215, ptr %217, 1
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %220 = load ptr, ptr %219, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %220, 2
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %223 = load i32, ptr %222, align 4
  %224 = insertvalue { ptr, ptr, ptr, i32 } %221, i32 %223, 3
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %226 = load ptr, ptr %225, align 8
  %227 = load ptr, ptr %20, align 8
  %228 = call ptr @llvm.invariant.start.p0(i64 96, ptr %227)
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %230 = load i32, ptr %229, align 4
  %231 = getelementptr ptr, ptr %227, i32 %230
  %232 = load ptr, ptr %231, align 8
  %233 = call ptr @typegetter_wrapper(ptr %232, ptr %226)
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %235 = load ptr, ptr %234, align 8
  %236 = load ptr, ptr %20, align 8
  %237 = call ptr @llvm.invariant.start.p0(i64 96, ptr %236)
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %239 = load i32, ptr %238, align 4
  %240 = getelementptr ptr, ptr %236, i32 %239
  %241 = getelementptr ptr, ptr %240, i32 1
  %242 = load ptr, ptr %241, align 8
  %243 = call ptr @typegetter_wrapper(ptr %242, ptr %235)
  %244 = getelementptr [2 x ptr], ptr %14, i32 0, i32 0
  store ptr %233, ptr %244, align 8
  %245 = getelementptr [2 x ptr], ptr %14, i32 0, i32 1
  store ptr %243, ptr %245, align 8
  %246 = call ptr @llvm.invariant.start.p0(i64 4, ptr %14)
  %247 = call ptr @llvm.invariant.start.p0(i64 80, ptr %214)
  %248 = getelementptr ptr, ptr %214, i32 %223
  %249 = getelementptr ptr, ptr %248, i32 4
  %250 = load ptr, ptr %249, align 8
  %251 = getelementptr { ptr, ptr }, ptr %15, i32 0, i32 0
  store ptr %203, ptr %251, align 8
  %252 = getelementptr { ptr, ptr }, ptr %15, i32 0, i32 1
  store ptr %209, ptr %252, align 8
  %253 = call ptr @behavior_wrapper(ptr %250, { ptr, ptr, ptr, i32 } %224, ptr %15)
  call void %253({ ptr, ptr, ptr, i32 } %224, { ptr, ptr, ptr, i32 } %224, ptr %14, { ptr, i160 } %206, { ptr, i160 } %212)
  %254 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %255 = load ptr, ptr %254, align 8
  %256 = insertvalue { ptr, i160 } undef, ptr %255, 0
  %257 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %258 = load i160, ptr %257, align 4
  %259 = insertvalue { ptr, i160 } %256, i160 %258, 1
  store { ptr, i160 } %259, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem17, align 8
  br label %265

260:                                              ; preds = %150
  %261 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 0
  %262 = load ptr, ptr %5, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 1
  %264 = load i160, ptr %4, align 4
  store i160 %264, ptr %263, align 4
  store { ptr, i160 } poison, ptr %.reg2mem17, align 8
  br label %265

265:                                              ; preds = %260, %164
  %.reload18 = load { ptr, i160 }, ptr %.reg2mem17, align 8
  store { ptr, i160 } %.reload18, ptr %.reg2mem5, align 8
  br label %266

266:                                              ; preds = %265
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem15, align 8
  br label %268

267:                                              ; preds = %3
  store i32 1, ptr %.reg2mem13, align 4
  store { ptr, i160 } poison, ptr %.reg2mem15, align 8
  br label %268

268:                                              ; preds = %267, %266
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload16, ptr %.reg2mem3, align 8
  store i32 %.reload14, ptr %.reg2mem1, align 4
  br label %269

269:                                              ; preds = %268
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %270 = zext i32 %.reload2 to i64
  %271 = trunc i64 %270 to i32
  switch i32 %271, label %273 [
    i32 0, label %272
  ]

272:                                              ; preds = %269
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem11, align 8
  br label %278

273:                                              ; preds = %269
  store [0 x i8] undef, ptr %16, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %17, align 4
  %274 = load ptr, ptr %17, align 8
  %275 = insertvalue { ptr, i160 } undef, ptr %274, 0
  %276 = load i160, ptr %16, align 4
  %277 = insertvalue { ptr, i160 } %275, i160 %276, 1
  store { ptr, i160 } %277, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem11, align 8
  br label %278

278:                                              ; preds = %273, %272
  %.reload12 = load { ptr, i160 }, ptr %.reg2mem11, align 8
  ret { ptr, i160 } %.reload12
}

define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ZipIterator2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ZipIterator2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ZipIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ZipIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  ret void
}

define { i64, i64 } @_size_InterleaveIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @InterleaveIterable2_field_InterleaveIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 15
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [50 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 18
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @InterleaveIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 400, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterable2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 400, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @InterleaveIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 400, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 400, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %46)
  %54 = alloca [0 x ptr], align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 0, ptr %54)
  %56 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %57 = getelementptr ptr, ptr %34, i32 %43
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = alloca {}, align 8
  %61 = call ptr @behavior_wrapper(ptr %59, { ptr, ptr, ptr, i32 } %44, ptr %60)
  %62 = call { ptr, ptr, ptr, i32 } %61({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %54)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %62, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  call void @set_offset(ptr %65, ptr @Iterator2)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %6, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 400, ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr ptr, ptr %80, i32 %83
  %85 = getelementptr ptr, ptr %84, i32 2
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr { ptr, ptr }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr, ptr, ptr, i32 } %88(ptr %79) #16
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %89, ptr %90, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  call void @assume_offset(ptr %90, ptr @Iterable2)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 1
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 2
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %101, align 4
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %102, 3
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = load ptr, ptr %6, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 400, ptr %106)
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %109 = load i32, ptr %108, align 4
  %110 = getelementptr ptr, ptr %106, i32 %109
  %111 = load ptr, ptr %110, align 8
  %112 = call ptr @typegetter_wrapper(ptr %111, ptr %105)
  %113 = alloca [0 x ptr], align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 0, ptr %113)
  %115 = call ptr @llvm.invariant.start.p0(i64 184, ptr %93)
  %116 = getelementptr ptr, ptr %93, i32 %102
  %117 = getelementptr ptr, ptr %116, i32 1
  %118 = load ptr, ptr %117, align 8
  %119 = alloca {}, align 8
  %120 = call ptr @behavior_wrapper(ptr %118, { ptr, ptr, ptr, i32 } %103, ptr %119)
  %121 = call { ptr, ptr, ptr, i32 } %120({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr %113)
  %122 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %121, ptr %122, align 8
  %123 = call ptr @llvm.invariant.start.p0(i64 16, ptr %122)
  %124 = alloca { ptr, ptr, ptr, i32 }, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 0
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 0
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 1
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 1
  %130 = load ptr, ptr %128, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 2
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 2
  %133 = load ptr, ptr %131, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 3
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 3
  %136 = load i32, ptr %134, align 4
  store i32 %136, ptr %135, align 4
  call void @set_offset(ptr %124, ptr @Iterator2)
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %6, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 400, ptr %139)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = getelementptr ptr, ptr %139, i32 %142
  %144 = load ptr, ptr %143, align 8
  %145 = call ptr @typegetter_wrapper(ptr %144, ptr %138)
  %146 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterator2, ptr %146, align 8
  %147 = getelementptr ptr, ptr %146, i32 1
  store ptr %145, ptr %147, align 8
  %148 = load ptr, ptr %146, align 8
  %149 = getelementptr ptr, ptr %148, i32 6
  %150 = load ptr, ptr %149, align 8
  %151 = call { i64, i64 } @size_wrapper(ptr %150, ptr %146)
  %152 = extractvalue { i64, i64 } %151, 0
  %153 = call ptr @bump_malloc(i64 %152)
  store ptr %145, ptr %153, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 8, ptr %153)
  %155 = alloca { ptr, ptr, ptr, i32 }, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  store ptr @InterleaveIterator2, ptr %155, align 8
  store ptr %153, ptr %156, align 8
  store i32 9, ptr %157, align 4
  %158 = call ptr @llvm.invariant.start.p0(i64 16, ptr %155)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = load ptr, ptr %6, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 400, ptr %161)
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = getelementptr ptr, ptr %161, i32 %164
  %166 = getelementptr ptr, ptr %165, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = getelementptr { ptr, ptr }, ptr %167, i32 0, i32 0
  %169 = load ptr, ptr %168, align 8
  %170 = call { ptr, ptr, ptr, i32 } %169(ptr %160) #16
  %171 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %170, ptr %171, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 16, ptr %171)
  call void @assume_offset(ptr %171, ptr @Iterable2)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 0
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %174, 0
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %177, 1
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 2
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 2
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %183, 3
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = load ptr, ptr %6, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 400, ptr %187)
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %190 = load i32, ptr %189, align 4
  %191 = getelementptr ptr, ptr %187, i32 %190
  %192 = load ptr, ptr %191, align 8
  %193 = call ptr @typegetter_wrapper(ptr %192, ptr %186)
  %194 = alloca [0 x ptr], align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 0, ptr %194)
  %196 = call ptr @llvm.invariant.start.p0(i64 184, ptr %174)
  %197 = getelementptr ptr, ptr %174, i32 %183
  %198 = getelementptr ptr, ptr %197, i32 1
  %199 = load ptr, ptr %198, align 8
  %200 = alloca {}, align 8
  %201 = call ptr @behavior_wrapper(ptr %199, { ptr, ptr, ptr, i32 } %184, ptr %200)
  %202 = call { ptr, ptr, ptr, i32 } %201({ ptr, ptr, ptr, i32 } %184, { ptr, ptr, ptr, i32 } %184, ptr %194)
  %203 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %202, ptr %203, align 8
  %204 = call ptr @llvm.invariant.start.p0(i64 16, ptr %203)
  %205 = alloca { ptr, ptr, ptr, i32 }, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 0
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 1
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %211 = load ptr, ptr %209, align 8
  store ptr %211, ptr %210, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 2
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %214 = load ptr, ptr %212, align 8
  store ptr %214, ptr %213, align 8
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 3
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %217 = load i32, ptr %215, align 4
  store i32 %217, ptr %216, align 4
  call void @set_offset(ptr %205, ptr @Iterator2)
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %219 = load ptr, ptr %218, align 8
  %220 = load ptr, ptr %6, align 8
  %221 = call ptr @llvm.invariant.start.p0(i64 400, ptr %220)
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %223 = load i32, ptr %222, align 4
  %224 = getelementptr ptr, ptr %220, i32 %223
  %225 = getelementptr ptr, ptr %224, i32 2
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr { ptr, ptr }, ptr %226, i32 0, i32 0
  %228 = load ptr, ptr %227, align 8
  %229 = call { ptr, ptr, ptr, i32 } %228(ptr %219) #16
  %230 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %229, ptr %230, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 16, ptr %230)
  call void @assume_offset(ptr %230, ptr @Iterable2)
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 0
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %233, 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %236, 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 2
  %239 = load ptr, ptr %238, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, ptr %239, 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 3
  %242 = load i32, ptr %241, align 4
  %243 = insertvalue { ptr, ptr, ptr, i32 } %240, i32 %242, 3
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %245 = load ptr, ptr %244, align 8
  %246 = load ptr, ptr %6, align 8
  %247 = call ptr @llvm.invariant.start.p0(i64 400, ptr %246)
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %249 = load i32, ptr %248, align 4
  %250 = getelementptr ptr, ptr %246, i32 %249
  %251 = load ptr, ptr %250, align 8
  %252 = call ptr @typegetter_wrapper(ptr %251, ptr %245)
  %253 = alloca [0 x ptr], align 8
  %254 = call ptr @llvm.invariant.start.p0(i64 0, ptr %253)
  %255 = call ptr @llvm.invariant.start.p0(i64 184, ptr %233)
  %256 = getelementptr ptr, ptr %233, i32 %242
  %257 = getelementptr ptr, ptr %256, i32 1
  %258 = load ptr, ptr %257, align 8
  %259 = alloca {}, align 8
  %260 = call ptr @behavior_wrapper(ptr %258, { ptr, ptr, ptr, i32 } %243, ptr %259)
  %261 = call { ptr, ptr, ptr, i32 } %260({ ptr, ptr, ptr, i32 } %243, { ptr, ptr, ptr, i32 } %243, ptr %253)
  %262 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %261, ptr %262, align 8
  %263 = call ptr @llvm.invariant.start.p0(i64 16, ptr %262)
  %264 = alloca { ptr, ptr, ptr, i32 }, align 8
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 0
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 0
  %267 = load ptr, ptr %265, align 8
  store ptr %267, ptr %266, align 8
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 1
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 1
  %270 = load ptr, ptr %268, align 8
  store ptr %270, ptr %269, align 8
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 2
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 2
  %273 = load ptr, ptr %271, align 8
  store ptr %273, ptr %272, align 8
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 3
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 3
  %276 = load i32, ptr %274, align 4
  store i32 %276, ptr %275, align 4
  call void @set_offset(ptr %264, ptr @Iterator2)
  %277 = alloca { ptr, ptr, ptr, i32 }, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 0
  %280 = load ptr, ptr %278, align 8
  store ptr %280, ptr %279, align 8
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 1
  %283 = load ptr, ptr %281, align 8
  store ptr %283, ptr %282, align 8
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 2
  %286 = load ptr, ptr %284, align 8
  store ptr %286, ptr %285, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 3
  %289 = load i32, ptr %287, align 4
  store i32 %289, ptr %288, align 4
  call void @set_offset(ptr %277, ptr @Iterator2)
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 0
  %291 = load ptr, ptr %290, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %291, 0
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 1
  %294 = load ptr, ptr %293, align 8
  %295 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %294, 1
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 2
  %297 = load ptr, ptr %296, align 8
  %298 = insertvalue { ptr, ptr, ptr, i32 } %295, ptr %297, 2
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 3
  %300 = load i32, ptr %299, align 4
  %301 = insertvalue { ptr, ptr, ptr, i32 } %298, i32 %300, 3
  %302 = alloca { ptr, ptr, ptr, i32 }, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 0
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %305 = load ptr, ptr %303, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 1
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %308 = load ptr, ptr %306, align 8
  store ptr %308, ptr %307, align 8
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 2
  %310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %311 = load ptr, ptr %309, align 8
  store ptr %311, ptr %310, align 8
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 3
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %314 = load i32, ptr %312, align 4
  store i32 %314, ptr %313, align 4
  call void @set_offset(ptr %302, ptr @Iterator2)
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %316, 0
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %319 = load ptr, ptr %318, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr %319, 1
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %322 = load ptr, ptr %321, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } %320, ptr %322, 2
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %325 = load i32, ptr %324, align 4
  %326 = insertvalue { ptr, ptr, ptr, i32 } %323, i32 %325, 3
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %328 = load ptr, ptr %327, align 8
  %329 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %328, 0
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %331 = load ptr, ptr %330, align 8
  %332 = insertvalue { ptr, ptr, ptr, i32 } %329, ptr %331, 1
  %333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %334 = load ptr, ptr %333, align 8
  %335 = insertvalue { ptr, ptr, ptr, i32 } %332, ptr %334, 2
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %337 = load i32, ptr %336, align 4
  %338 = insertvalue { ptr, ptr, ptr, i32 } %335, i32 %337, 3
  %339 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %340 = load ptr, ptr %339, align 8
  %341 = load ptr, ptr %6, align 8
  %342 = call ptr @llvm.invariant.start.p0(i64 400, ptr %341)
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %344 = load i32, ptr %343, align 4
  %345 = getelementptr ptr, ptr %341, i32 %344
  %346 = load ptr, ptr %345, align 8
  %347 = call ptr @typegetter_wrapper(ptr %346, ptr %340)
  %348 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %349 = getelementptr [3 x ptr], ptr %348, i32 0, i32 1
  store ptr %347, ptr %349, align 8
  %350 = getelementptr [3 x ptr], ptr %348, i32 0, i32 2
  store ptr null, ptr %350, align 8
  %351 = call ptr @llvm.invariant.start.p0(i64 16, ptr %348)
  store ptr @Iterator2, ptr %348, align 8
  %352 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %353 = getelementptr [3 x ptr], ptr %352, i32 0, i32 1
  store ptr %347, ptr %353, align 8
  %354 = getelementptr [3 x ptr], ptr %352, i32 0, i32 2
  store ptr null, ptr %354, align 8
  %355 = call ptr @llvm.invariant.start.p0(i64 16, ptr %352)
  store ptr @Iterator2, ptr %352, align 8
  %356 = alloca [2 x ptr], align 8
  %357 = getelementptr [2 x ptr], ptr %356, i32 0, i32 0
  store ptr %348, ptr %357, align 8
  %358 = getelementptr [2 x ptr], ptr %356, i32 0, i32 1
  store ptr %352, ptr %358, align 8
  %359 = call ptr @llvm.invariant.start.p0(i64 4, ptr %356)
  %360 = call ptr @llvm.invariant.start.p0(i64 88, ptr %328)
  %361 = getelementptr ptr, ptr %328, i32 %337
  %362 = getelementptr ptr, ptr %361, i32 4
  %363 = load ptr, ptr %362, align 8
  %364 = alloca { ptr, ptr }, align 8
  %365 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 0
  store ptr %291, ptr %365, align 8
  %366 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 1
  store ptr %316, ptr %366, align 8
  %367 = call ptr @behavior_wrapper(ptr %363, { ptr, ptr, ptr, i32 } %338, ptr %364)
  call void %367({ ptr, ptr, ptr, i32 } %338, { ptr, ptr, ptr, i32 } %338, ptr %356, { ptr, ptr, ptr, i32 } %301, { ptr, ptr, ptr, i32 } %326)
  %368 = alloca { ptr, ptr, ptr, i32 }, align 8
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %371 = load ptr, ptr %369, align 8
  store ptr %371, ptr %370, align 8
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %374 = load ptr, ptr %372, align 8
  store ptr %374, ptr %373, align 8
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %376 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %377 = load ptr, ptr %375, align 8
  store ptr %377, ptr %376, align 8
  %378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %380 = load i32, ptr %378, align 4
  store i32 %380, ptr %379, align 4
  call void @set_offset(ptr %368, ptr @Iterator2)
  %381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %382 = load ptr, ptr %381, align 8
  %383 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %382, 0
  %384 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %385 = load ptr, ptr %384, align 8
  %386 = insertvalue { ptr, ptr, ptr, i32 } %383, ptr %385, 1
  %387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %388 = load ptr, ptr %387, align 8
  %389 = insertvalue { ptr, ptr, ptr, i32 } %386, ptr %388, 2
  %390 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %391 = load i32, ptr %390, align 4
  %392 = insertvalue { ptr, ptr, ptr, i32 } %389, i32 %391, 3
  ret { ptr, ptr, ptr, i32 } %392
}

define { i64, i64 } @_size_InterleaveIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @InterleaveIterator2_field_InterleaveIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [11 x ptr], ptr %26, i32 0, i32 6
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [11 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @InterleaveIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterator2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterator2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 88, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterator2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %8, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 88, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 3
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr, ptr }, ptr %131, i32 0, i32 1
  %133 = load ptr, ptr %132, align 8
  call void %133(ptr %124, i1 true) #15
  ret void
}

define { ptr, i160 } @InterleaveIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca { ptr, i160 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @InterleaveIterator2)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 88, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 3
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i1 %37(ptr %28) #16
  br i1 %38, label %39, label %98

39:                                               ; preds = %3
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %14, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 88, ptr %42)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %45 = load i32, ptr %44, align 4
  %46 = getelementptr ptr, ptr %42, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 3
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  call void %50(ptr %41, i1 false) #15
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %14, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 88, ptr %53)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = getelementptr ptr, ptr %53, i32 %56
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr }, ptr %59, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = call { ptr, ptr, ptr, i32 } %61(ptr %52) #16
  store { ptr, ptr, ptr, i32 } %62, ptr %4, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  call void @assume_offset(ptr %4, ptr @Iterator2)
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %71, 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %74 = load i32, ptr %73, align 4
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %74, 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %14, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 88, ptr %78)
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %81 = load i32, ptr %80, align 4
  %82 = getelementptr ptr, ptr %78, i32 %81
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @typegetter_wrapper(ptr %83, ptr %77)
  %85 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %86 = call ptr @llvm.invariant.start.p0(i64 24, ptr %65)
  %87 = getelementptr ptr, ptr %65, i32 %74
  %88 = getelementptr ptr, ptr %87, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = call ptr @behavior_wrapper(ptr %89, { ptr, ptr, ptr, i32 } %75, ptr %6)
  %91 = call { ptr, i160 } %90({ ptr, ptr, ptr, i32 } %75, { ptr, ptr, ptr, i32 } %75, ptr %5)
  store { ptr, i160 } %91, ptr %7, align 8
  %92 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, i160 } undef, ptr %93, 0
  %95 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %96 = load i160, ptr %95, align 4
  %97 = insertvalue { ptr, i160 } %94, i160 %96, 1
  store { ptr, i160 } %97, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %157

98:                                               ; preds = %3
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %14, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 88, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 3
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  call void %109(ptr %100, i1 true) #15
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = load ptr, ptr %14, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 88, ptr %112)
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %115 = load i32, ptr %114, align 4
  %116 = getelementptr ptr, ptr %112, i32 %115
  %117 = getelementptr ptr, ptr %116, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = call { ptr, ptr, ptr, i32 } %120(ptr %111) #16
  store { ptr, ptr, ptr, i32 } %121, ptr %8, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  call void @assume_offset(ptr %8, ptr @Iterator2)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %124, 0
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %127, 1
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %130, 2
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %133 = load i32, ptr %132, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, i32 %133, 3
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = load ptr, ptr %14, align 8
  %138 = call ptr @llvm.invariant.start.p0(i64 88, ptr %137)
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %140 = load i32, ptr %139, align 4
  %141 = getelementptr ptr, ptr %137, i32 %140
  %142 = load ptr, ptr %141, align 8
  %143 = call ptr @typegetter_wrapper(ptr %142, ptr %136)
  %144 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %145 = call ptr @llvm.invariant.start.p0(i64 24, ptr %124)
  %146 = getelementptr ptr, ptr %124, i32 %133
  %147 = getelementptr ptr, ptr %146, i32 1
  %148 = load ptr, ptr %147, align 8
  %149 = call ptr @behavior_wrapper(ptr %148, { ptr, ptr, ptr, i32 } %134, ptr %10)
  %150 = call { ptr, i160 } %149({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr %9)
  store { ptr, i160 } %150, ptr %11, align 8
  %151 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, i160 } undef, ptr %152, 0
  %154 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 1
  %155 = load i160, ptr %154, align 4
  %156 = insertvalue { ptr, i160 } %153, i160 %155, 1
  store { ptr, i160 } %156, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %157

157:                                              ; preds = %98, %39
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %158

158:                                              ; preds = %157
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i1 @InterleaveIterator2_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @InterleaveIterator2_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  store i1 %1, ptr %20, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @InterleaveIterator2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterator2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @InterleaveIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { i64, i64 } @_size_ChainIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ChainIterable2_field_ChainIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 15
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [50 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ChainIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 18
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @ChainIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 400, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterable2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 400, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ChainIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 400, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 400, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %46)
  %54 = alloca [0 x ptr], align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 0, ptr %54)
  %56 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %57 = getelementptr ptr, ptr %34, i32 %43
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = alloca {}, align 8
  %61 = call ptr @behavior_wrapper(ptr %59, { ptr, ptr, ptr, i32 } %44, ptr %60)
  %62 = call { ptr, ptr, ptr, i32 } %61({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %54)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %62, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  call void @set_offset(ptr %65, ptr @Iterator2)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %6, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 400, ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr ptr, ptr %80, i32 %83
  %85 = getelementptr ptr, ptr %84, i32 2
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr { ptr, ptr }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr, ptr, ptr, i32 } %88(ptr %79) #16
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %89, ptr %90, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  call void @assume_offset(ptr %90, ptr @Iterable2)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 1
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 2
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %101, align 4
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %102, 3
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = load ptr, ptr %6, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 400, ptr %106)
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %109 = load i32, ptr %108, align 4
  %110 = getelementptr ptr, ptr %106, i32 %109
  %111 = load ptr, ptr %110, align 8
  %112 = call ptr @typegetter_wrapper(ptr %111, ptr %105)
  %113 = alloca [0 x ptr], align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 0, ptr %113)
  %115 = call ptr @llvm.invariant.start.p0(i64 184, ptr %93)
  %116 = getelementptr ptr, ptr %93, i32 %102
  %117 = getelementptr ptr, ptr %116, i32 1
  %118 = load ptr, ptr %117, align 8
  %119 = alloca {}, align 8
  %120 = call ptr @behavior_wrapper(ptr %118, { ptr, ptr, ptr, i32 } %103, ptr %119)
  %121 = call { ptr, ptr, ptr, i32 } %120({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr %113)
  %122 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %121, ptr %122, align 8
  %123 = call ptr @llvm.invariant.start.p0(i64 16, ptr %122)
  %124 = alloca { ptr, ptr, ptr, i32 }, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 0
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 0
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 1
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 1
  %130 = load ptr, ptr %128, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 2
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 2
  %133 = load ptr, ptr %131, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 3
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 3
  %136 = load i32, ptr %134, align 4
  store i32 %136, ptr %135, align 4
  call void @set_offset(ptr %124, ptr @Iterator2)
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %6, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 400, ptr %139)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = getelementptr ptr, ptr %139, i32 %142
  %144 = load ptr, ptr %143, align 8
  %145 = call ptr @typegetter_wrapper(ptr %144, ptr %138)
  %146 = alloca [2 x ptr], align 8
  store ptr @ChainIterator2, ptr %146, align 8
  %147 = getelementptr ptr, ptr %146, i32 1
  store ptr %145, ptr %147, align 8
  %148 = load ptr, ptr %146, align 8
  %149 = getelementptr ptr, ptr %148, i32 6
  %150 = load ptr, ptr %149, align 8
  %151 = call { i64, i64 } @size_wrapper(ptr %150, ptr %146)
  %152 = extractvalue { i64, i64 } %151, 0
  %153 = call ptr @bump_malloc(i64 %152)
  store ptr %145, ptr %153, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 8, ptr %153)
  %155 = alloca { ptr, ptr, ptr, i32 }, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  store ptr @ChainIterator2, ptr %155, align 8
  store ptr %153, ptr %156, align 8
  store i32 9, ptr %157, align 4
  %158 = call ptr @llvm.invariant.start.p0(i64 16, ptr %155)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = load ptr, ptr %6, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 400, ptr %161)
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = getelementptr ptr, ptr %161, i32 %164
  %166 = getelementptr ptr, ptr %165, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = getelementptr { ptr, ptr }, ptr %167, i32 0, i32 0
  %169 = load ptr, ptr %168, align 8
  %170 = call { ptr, ptr, ptr, i32 } %169(ptr %160) #16
  %171 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %170, ptr %171, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 16, ptr %171)
  call void @assume_offset(ptr %171, ptr @Iterable2)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 0
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %174, 0
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %177, 1
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 2
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 2
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %183, 3
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = load ptr, ptr %6, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 400, ptr %187)
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %190 = load i32, ptr %189, align 4
  %191 = getelementptr ptr, ptr %187, i32 %190
  %192 = load ptr, ptr %191, align 8
  %193 = call ptr @typegetter_wrapper(ptr %192, ptr %186)
  %194 = alloca [0 x ptr], align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 0, ptr %194)
  %196 = call ptr @llvm.invariant.start.p0(i64 184, ptr %174)
  %197 = getelementptr ptr, ptr %174, i32 %183
  %198 = getelementptr ptr, ptr %197, i32 1
  %199 = load ptr, ptr %198, align 8
  %200 = alloca {}, align 8
  %201 = call ptr @behavior_wrapper(ptr %199, { ptr, ptr, ptr, i32 } %184, ptr %200)
  %202 = call { ptr, ptr, ptr, i32 } %201({ ptr, ptr, ptr, i32 } %184, { ptr, ptr, ptr, i32 } %184, ptr %194)
  %203 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %202, ptr %203, align 8
  %204 = call ptr @llvm.invariant.start.p0(i64 16, ptr %203)
  %205 = alloca { ptr, ptr, ptr, i32 }, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 0
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 1
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %211 = load ptr, ptr %209, align 8
  store ptr %211, ptr %210, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 2
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %214 = load ptr, ptr %212, align 8
  store ptr %214, ptr %213, align 8
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 3
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %217 = load i32, ptr %215, align 4
  store i32 %217, ptr %216, align 4
  call void @set_offset(ptr %205, ptr @Iterator2)
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %219 = load ptr, ptr %218, align 8
  %220 = load ptr, ptr %6, align 8
  %221 = call ptr @llvm.invariant.start.p0(i64 400, ptr %220)
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %223 = load i32, ptr %222, align 4
  %224 = getelementptr ptr, ptr %220, i32 %223
  %225 = getelementptr ptr, ptr %224, i32 2
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr { ptr, ptr }, ptr %226, i32 0, i32 0
  %228 = load ptr, ptr %227, align 8
  %229 = call { ptr, ptr, ptr, i32 } %228(ptr %219) #16
  %230 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %229, ptr %230, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 16, ptr %230)
  call void @assume_offset(ptr %230, ptr @Iterable2)
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 0
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %233, 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %236, 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 2
  %239 = load ptr, ptr %238, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, ptr %239, 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 3
  %242 = load i32, ptr %241, align 4
  %243 = insertvalue { ptr, ptr, ptr, i32 } %240, i32 %242, 3
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %245 = load ptr, ptr %244, align 8
  %246 = load ptr, ptr %6, align 8
  %247 = call ptr @llvm.invariant.start.p0(i64 400, ptr %246)
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %249 = load i32, ptr %248, align 4
  %250 = getelementptr ptr, ptr %246, i32 %249
  %251 = load ptr, ptr %250, align 8
  %252 = call ptr @typegetter_wrapper(ptr %251, ptr %245)
  %253 = alloca [0 x ptr], align 8
  %254 = call ptr @llvm.invariant.start.p0(i64 0, ptr %253)
  %255 = call ptr @llvm.invariant.start.p0(i64 184, ptr %233)
  %256 = getelementptr ptr, ptr %233, i32 %242
  %257 = getelementptr ptr, ptr %256, i32 1
  %258 = load ptr, ptr %257, align 8
  %259 = alloca {}, align 8
  %260 = call ptr @behavior_wrapper(ptr %258, { ptr, ptr, ptr, i32 } %243, ptr %259)
  %261 = call { ptr, ptr, ptr, i32 } %260({ ptr, ptr, ptr, i32 } %243, { ptr, ptr, ptr, i32 } %243, ptr %253)
  %262 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %261, ptr %262, align 8
  %263 = call ptr @llvm.invariant.start.p0(i64 16, ptr %262)
  %264 = alloca { ptr, ptr, ptr, i32 }, align 8
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 0
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 0
  %267 = load ptr, ptr %265, align 8
  store ptr %267, ptr %266, align 8
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 1
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 1
  %270 = load ptr, ptr %268, align 8
  store ptr %270, ptr %269, align 8
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 2
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 2
  %273 = load ptr, ptr %271, align 8
  store ptr %273, ptr %272, align 8
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 3
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 3
  %276 = load i32, ptr %274, align 4
  store i32 %276, ptr %275, align 4
  call void @set_offset(ptr %264, ptr @Iterator2)
  %277 = alloca { ptr, ptr, ptr, i32 }, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 0
  %280 = load ptr, ptr %278, align 8
  store ptr %280, ptr %279, align 8
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 1
  %283 = load ptr, ptr %281, align 8
  store ptr %283, ptr %282, align 8
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 2
  %286 = load ptr, ptr %284, align 8
  store ptr %286, ptr %285, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 3
  %289 = load i32, ptr %287, align 4
  store i32 %289, ptr %288, align 4
  call void @set_offset(ptr %277, ptr @Iterator2)
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 0
  %291 = load ptr, ptr %290, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %291, 0
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 1
  %294 = load ptr, ptr %293, align 8
  %295 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %294, 1
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 2
  %297 = load ptr, ptr %296, align 8
  %298 = insertvalue { ptr, ptr, ptr, i32 } %295, ptr %297, 2
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 3
  %300 = load i32, ptr %299, align 4
  %301 = insertvalue { ptr, ptr, ptr, i32 } %298, i32 %300, 3
  %302 = alloca { ptr, ptr, ptr, i32 }, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 0
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %305 = load ptr, ptr %303, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 1
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %308 = load ptr, ptr %306, align 8
  store ptr %308, ptr %307, align 8
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 2
  %310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %311 = load ptr, ptr %309, align 8
  store ptr %311, ptr %310, align 8
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 3
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %314 = load i32, ptr %312, align 4
  store i32 %314, ptr %313, align 4
  call void @set_offset(ptr %302, ptr @Iterator2)
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %316, 0
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %319 = load ptr, ptr %318, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr %319, 1
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %322 = load ptr, ptr %321, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } %320, ptr %322, 2
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %325 = load i32, ptr %324, align 4
  %326 = insertvalue { ptr, ptr, ptr, i32 } %323, i32 %325, 3
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %328 = load ptr, ptr %327, align 8
  %329 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %328, 0
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %331 = load ptr, ptr %330, align 8
  %332 = insertvalue { ptr, ptr, ptr, i32 } %329, ptr %331, 1
  %333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %334 = load ptr, ptr %333, align 8
  %335 = insertvalue { ptr, ptr, ptr, i32 } %332, ptr %334, 2
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %337 = load i32, ptr %336, align 4
  %338 = insertvalue { ptr, ptr, ptr, i32 } %335, i32 %337, 3
  %339 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %340 = load ptr, ptr %339, align 8
  %341 = load ptr, ptr %6, align 8
  %342 = call ptr @llvm.invariant.start.p0(i64 400, ptr %341)
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %344 = load i32, ptr %343, align 4
  %345 = getelementptr ptr, ptr %341, i32 %344
  %346 = load ptr, ptr %345, align 8
  %347 = call ptr @typegetter_wrapper(ptr %346, ptr %340)
  %348 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %349 = getelementptr [3 x ptr], ptr %348, i32 0, i32 1
  store ptr %347, ptr %349, align 8
  %350 = getelementptr [3 x ptr], ptr %348, i32 0, i32 2
  store ptr null, ptr %350, align 8
  %351 = call ptr @llvm.invariant.start.p0(i64 16, ptr %348)
  store ptr @Iterator2, ptr %348, align 8
  %352 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %353 = getelementptr [3 x ptr], ptr %352, i32 0, i32 1
  store ptr %347, ptr %353, align 8
  %354 = getelementptr [3 x ptr], ptr %352, i32 0, i32 2
  store ptr null, ptr %354, align 8
  %355 = call ptr @llvm.invariant.start.p0(i64 16, ptr %352)
  store ptr @Iterator2, ptr %352, align 8
  %356 = alloca [2 x ptr], align 8
  %357 = getelementptr [2 x ptr], ptr %356, i32 0, i32 0
  store ptr %348, ptr %357, align 8
  %358 = getelementptr [2 x ptr], ptr %356, i32 0, i32 1
  store ptr %352, ptr %358, align 8
  %359 = call ptr @llvm.invariant.start.p0(i64 4, ptr %356)
  %360 = call ptr @llvm.invariant.start.p0(i64 88, ptr %328)
  %361 = getelementptr ptr, ptr %328, i32 %337
  %362 = getelementptr ptr, ptr %361, i32 4
  %363 = load ptr, ptr %362, align 8
  %364 = alloca { ptr, ptr }, align 8
  %365 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 0
  store ptr %291, ptr %365, align 8
  %366 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 1
  store ptr %316, ptr %366, align 8
  %367 = call ptr @behavior_wrapper(ptr %363, { ptr, ptr, ptr, i32 } %338, ptr %364)
  call void %367({ ptr, ptr, ptr, i32 } %338, { ptr, ptr, ptr, i32 } %338, ptr %356, { ptr, ptr, ptr, i32 } %301, { ptr, ptr, ptr, i32 } %326)
  %368 = alloca { ptr, ptr, ptr, i32 }, align 8
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %371 = load ptr, ptr %369, align 8
  store ptr %371, ptr %370, align 8
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %374 = load ptr, ptr %372, align 8
  store ptr %374, ptr %373, align 8
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %376 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %377 = load ptr, ptr %375, align 8
  store ptr %377, ptr %376, align 8
  %378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %380 = load i32, ptr %378, align 4
  store i32 %380, ptr %379, align 4
  call void @set_offset(ptr %368, ptr @Iterator2)
  %381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %382 = load ptr, ptr %381, align 8
  %383 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %382, 0
  %384 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %385 = load ptr, ptr %384, align 8
  %386 = insertvalue { ptr, ptr, ptr, i32 } %383, ptr %385, 1
  %387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %388 = load ptr, ptr %387, align 8
  %389 = insertvalue { ptr, ptr, ptr, i32 } %386, ptr %388, 2
  %390 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %391 = load i32, ptr %390, align 4
  %392 = insertvalue { ptr, ptr, ptr, i32 } %389, i32 %391, 3
  ret { ptr, ptr, ptr, i32 } %392
}

define { i64, i64 } @_size_ChainIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @ChainIterator2_field_ChainIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [11 x ptr], ptr %26, i32 0, i32 6
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [11 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ChainIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterator2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterator2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 88, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterator2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %8, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 88, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 3
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr, ptr }, ptr %131, i32 0, i32 1
  %133 = load ptr, ptr %132, align 8
  call void %133(ptr %124, i1 true) #15
  ret void
}

define { ptr, i160 } @ChainIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca { ptr, i160 }, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca { ptr, i160 }, align 8
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca { ptr, i160 }, align 8
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca { ptr, i160 }, align 8
  %.reg2mem21 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 16, ptr %14)
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  call void @set_offset(ptr %16, ptr @ChainIterator2)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %16, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 88, ptr %31)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = getelementptr ptr, ptr %31, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 3
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call i1 %39(ptr %30) #16
  %41 = icmp eq i1 %40, false
  br i1 %41, label %42, label %90

42:                                               ; preds = %3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %16, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 88, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call { ptr, ptr, ptr, i32 } %53(ptr %44) #16
  store { ptr, ptr, ptr, i32 } %54, ptr %4, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  call void @assume_offset(ptr %4, ptr @Iterator2)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %66, 3
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %16, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 88, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = load ptr, ptr %74, align 8
  %76 = call ptr @typegetter_wrapper(ptr %75, ptr %69)
  %77 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %78 = call ptr @llvm.invariant.start.p0(i64 24, ptr %57)
  %79 = getelementptr ptr, ptr %57, i32 %66
  %80 = getelementptr ptr, ptr %79, i32 1
  %81 = load ptr, ptr %80, align 8
  %82 = call ptr @behavior_wrapper(ptr %81, { ptr, ptr, ptr, i32 } %67, ptr %6)
  %83 = call { ptr, i160 } %82({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %5)
  store { ptr, i160 } %83, ptr %7, align 8
  %84 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, i160 } undef, ptr %85, 0
  %87 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %88 = load i160, ptr %87, align 4
  %89 = insertvalue { ptr, i160 } %86, i160 %88, 1
  store { ptr, i160 } %89, ptr %.reg2mem13, align 8
  %.reload14 = load { ptr, i160 }, ptr %.reg2mem13, align 8
  store i32 0, ptr %.reg2mem17, align 4
  store { ptr, i160 } %.reload14, ptr %.reg2mem19, align 8
  br label %166

90:                                               ; preds = %3
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %16, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 88, ptr %93)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = getelementptr ptr, ptr %93, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = call { ptr, ptr, ptr, i32 } %101(ptr %92) #16
  store { ptr, ptr, ptr, i32 } %102, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  call void @assume_offset(ptr %8, ptr @Iterator2)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %117 = load ptr, ptr %116, align 8
  %118 = load ptr, ptr %16, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 88, ptr %118)
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = getelementptr ptr, ptr %118, i32 %121
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @typegetter_wrapper(ptr %123, ptr %117)
  %125 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %126 = call ptr @llvm.invariant.start.p0(i64 24, ptr %105)
  %127 = getelementptr ptr, ptr %105, i32 %114
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr @behavior_wrapper(ptr %129, { ptr, ptr, ptr, i32 } %115, ptr %10)
  %131 = call { ptr, i160 } %130({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %9)
  store { ptr, i160 } %131, ptr %11, align 8
  %132 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %134 = ptrtoint ptr %133 to i64
  %135 = icmp eq i64 %134, ptrtoint (ptr @nil_typ to i64)
  %136 = icmp eq i64 %134, 0
  %137 = or i1 %135, %136
  %138 = icmp eq i1 %137, false
  %139 = icmp ne i1 %137, false
  %140 = zext i1 %139 to i32
  store i32 %140, ptr %.reg2mem11, align 4
  br i1 %138, label %141, label %150

141:                                              ; preds = %90
  %142 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  store ptr %143, ptr %13, align 8
  %144 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 1
  %145 = load i160, ptr %144, align 4
  store i160 %145, ptr %12, align 4
  %146 = load ptr, ptr %13, align 8
  %147 = insertvalue { ptr, i160 } undef, ptr %146, 0
  %148 = load i160, ptr %12, align 4
  %149 = insertvalue { ptr, i160 } %147, i160 %148, 1
  store { ptr, i160 } %149, ptr %.reg2mem9, align 8
  %.reload10 = load { ptr, i160 }, ptr %.reg2mem9, align 8
  store { ptr, i160 } %.reload10, ptr %.reg2mem21, align 8
  br label %164

150:                                              ; preds = %90
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  store ptr %151, ptr %.reg2mem7, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr %152, ptr %.reg2mem5, align 8
  br label %153

153:                                              ; preds = %._crit_edge, %150
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %154 = load ptr, ptr %.reload8, align 8
  %155 = load ptr, ptr %16, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 88, ptr %155)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %157 = load i32, ptr %.reload6, align 4
  %158 = getelementptr ptr, ptr %155, i32 %157
  %159 = getelementptr ptr, ptr %158, i32 3
  %160 = load ptr, ptr %159, align 8
  %161 = getelementptr { ptr, ptr }, ptr %160, i32 0, i32 1
  %162 = load ptr, ptr %161, align 8
  call void %162(ptr %154, i1 false) #15
  br i1 true, label %._crit_edge, label %163

._crit_edge:                                      ; preds = %153
  br label %153

163:                                              ; preds = %153
  store { ptr, i160 } poison, ptr %.reg2mem21, align 8
  br label %164

164:                                              ; preds = %163, %141
  %.reload22 = load { ptr, i160 }, ptr %.reg2mem21, align 8
  store { ptr, i160 } %.reload22, ptr %.reg2mem3, align 8
  br label %165

165:                                              ; preds = %164
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem17, align 4
  store { ptr, i160 } %.reload4, ptr %.reg2mem19, align 8
  br label %166

166:                                              ; preds = %165, %42
  %.reload20 = load { ptr, i160 }, ptr %.reg2mem19, align 8
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store { ptr, i160 } %.reload20, ptr %.reg2mem1, align 8
  store i32 %.reload18, ptr %.reg2mem, align 4
  br label %167

167:                                              ; preds = %166
  %.reload = load i32, ptr %.reg2mem, align 4
  %168 = zext i32 %.reload to i64
  %169 = trunc i64 %168 to i32
  switch i32 %169, label %171 [
    i32 0, label %170
  ]

170:                                              ; preds = %167
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem15, align 8
  br label %172

171:                                              ; preds = %167
  store { ptr, i160 } poison, ptr %.reg2mem15, align 8
  br label %172

172:                                              ; preds = %171, %170
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  ret { ptr, i160 } %.reload16
}

define i1 @ChainIterator2_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @ChainIterator2_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  store i1 %1, ptr %20, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ChainIterator2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterator2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ChainIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { i64, i64 } @_size_FilterIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FilterIterable2_field_FilterIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 15
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [50 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @FilterIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 18
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 400, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %8, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 400, ptr %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = getelementptr ptr, ptr %75, i32 %78
  %80 = getelementptr ptr, ptr %79, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %72, align 8
  %85 = insertvalue { ptr } undef, ptr %84, 0
  call void %83(ptr %74, { ptr } %85) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FilterIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 400, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 400, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %46)
  %54 = alloca [0 x ptr], align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 0, ptr %54)
  %56 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %57 = getelementptr ptr, ptr %34, i32 %43
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = alloca {}, align 8
  %61 = call ptr @behavior_wrapper(ptr %59, { ptr, ptr, ptr, i32 } %44, ptr %60)
  %62 = call { ptr, ptr, ptr, i32 } %61({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %54)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %62, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  call void @set_offset(ptr %65, ptr @Iterator2)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %6, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 400, ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr ptr, ptr %80, i32 %83
  %85 = getelementptr ptr, ptr %84, i32 2
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr { ptr, ptr }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr } %88(ptr %79) #16
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %6, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 400, ptr %92)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %95 = load i32, ptr %94, align 4
  %96 = getelementptr ptr, ptr %92, i32 %95
  %97 = load ptr, ptr %96, align 8
  %98 = call ptr @typegetter_wrapper(ptr %97, ptr %91)
  %99 = alloca [2 x ptr], align 8
  store ptr @FilterIterator2, ptr %99, align 8
  %100 = getelementptr ptr, ptr %99, i32 1
  store ptr %98, ptr %100, align 8
  %101 = load ptr, ptr %99, align 8
  %102 = getelementptr ptr, ptr %101, i32 6
  %103 = load ptr, ptr %102, align 8
  %104 = call { i64, i64 } @size_wrapper(ptr %103, ptr %99)
  %105 = extractvalue { i64, i64 } %104, 0
  %106 = call ptr @bump_malloc(i64 %105)
  store ptr %98, ptr %106, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 8, ptr %106)
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  store ptr @FilterIterator2, ptr %108, align 8
  store ptr %106, ptr %109, align 8
  store i32 9, ptr %110, align 4
  %111 = call ptr @llvm.invariant.start.p0(i64 16, ptr %108)
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = load ptr, ptr %6, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 400, ptr %114)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = getelementptr ptr, ptr %114, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call { ptr, ptr, ptr, i32 } %122(ptr %113) #16
  %124 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %123, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 16, ptr %124)
  call void @assume_offset(ptr %124, ptr @Iterable2)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %130, 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 2
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %133, 2
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 3
  %136 = load i32, ptr %135, align 4
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, i32 %136, 3
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %139 = load ptr, ptr %138, align 8
  %140 = load ptr, ptr %6, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 400, ptr %140)
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = getelementptr ptr, ptr %140, i32 %143
  %145 = load ptr, ptr %144, align 8
  %146 = call ptr @typegetter_wrapper(ptr %145, ptr %139)
  %147 = alloca [0 x ptr], align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 0, ptr %147)
  %149 = call ptr @llvm.invariant.start.p0(i64 184, ptr %127)
  %150 = getelementptr ptr, ptr %127, i32 %136
  %151 = getelementptr ptr, ptr %150, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = alloca {}, align 8
  %154 = call ptr @behavior_wrapper(ptr %152, { ptr, ptr, ptr, i32 } %137, ptr %153)
  %155 = call { ptr, ptr, ptr, i32 } %154({ ptr, ptr, ptr, i32 } %137, { ptr, ptr, ptr, i32 } %137, ptr %147)
  %156 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %155, ptr %156, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 16, ptr %156)
  %158 = alloca { ptr, ptr, ptr, i32 }, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 0
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 0
  %161 = load ptr, ptr %159, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 1
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 1
  %164 = load ptr, ptr %162, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 2
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 2
  %167 = load ptr, ptr %165, align 8
  store ptr %167, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 3
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 3
  %170 = load i32, ptr %168, align 4
  store i32 %170, ptr %169, align 4
  call void @set_offset(ptr %158, ptr @Iterator2)
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %172 = load ptr, ptr %171, align 8
  %173 = load ptr, ptr %6, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 400, ptr %173)
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = getelementptr ptr, ptr %173, i32 %176
  %178 = getelementptr ptr, ptr %177, i32 2
  %179 = load ptr, ptr %178, align 8
  %180 = getelementptr { ptr, ptr }, ptr %179, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %182 = call { ptr } %181(ptr %172) #16
  %183 = alloca ptr, align 8
  store { ptr } %182, ptr %183, align 8
  %184 = alloca { ptr, ptr, ptr, i32 }, align 8
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 0
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 0
  %187 = load ptr, ptr %185, align 8
  store ptr %187, ptr %186, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 1
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 1
  %190 = load ptr, ptr %188, align 8
  store ptr %190, ptr %189, align 8
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 2
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 2
  %193 = load ptr, ptr %191, align 8
  store ptr %193, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 3
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 3
  %196 = load i32, ptr %194, align 4
  store i32 %196, ptr %195, align 4
  call void @set_offset(ptr %184, ptr @Iterator2)
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 0
  %198 = load ptr, ptr %197, align 8
  %199 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %198, 0
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 1
  %201 = load ptr, ptr %200, align 8
  %202 = insertvalue { ptr, ptr, ptr, i32 } %199, ptr %201, 1
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 2
  %204 = load ptr, ptr %203, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } %202, ptr %204, 2
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 3
  %207 = load i32, ptr %206, align 4
  %208 = insertvalue { ptr, ptr, ptr, i32 } %205, i32 %207, 3
  %209 = load ptr, ptr %183, align 8
  %210 = insertvalue { ptr } undef, ptr %209, 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %212 = load ptr, ptr %211, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %212, 0
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %213, ptr %215, 1
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %218, 2
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %221 = load i32, ptr %220, align 4
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, i32 %221, 3
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %224 = load ptr, ptr %223, align 8
  %225 = load ptr, ptr %6, align 8
  %226 = call ptr @llvm.invariant.start.p0(i64 400, ptr %225)
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %228 = load i32, ptr %227, align 4
  %229 = getelementptr ptr, ptr %225, i32 %228
  %230 = load ptr, ptr %229, align 8
  %231 = call ptr @typegetter_wrapper(ptr %230, ptr %224)
  %232 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %233 = getelementptr [3 x ptr], ptr %232, i32 0, i32 1
  store ptr %231, ptr %233, align 8
  %234 = getelementptr [3 x ptr], ptr %232, i32 0, i32 2
  store ptr null, ptr %234, align 8
  %235 = call ptr @llvm.invariant.start.p0(i64 16, ptr %232)
  store ptr @Iterator2, ptr %232, align 8
  %236 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %237 = getelementptr [4 x ptr], ptr %236, i32 0, i32 2
  store ptr %231, ptr %237, align 8
  %238 = getelementptr [4 x ptr], ptr %236, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %238, align 8
  %239 = getelementptr [4 x ptr], ptr %236, i32 0, i32 3
  store ptr null, ptr %239, align 8
  %240 = call ptr @llvm.invariant.start.p0(i64 24, ptr %236)
  store ptr @function_typ, ptr %236, align 8
  %241 = alloca [2 x ptr], align 8
  %242 = getelementptr [2 x ptr], ptr %241, i32 0, i32 0
  store ptr %232, ptr %242, align 8
  %243 = getelementptr [2 x ptr], ptr %241, i32 0, i32 1
  store ptr %236, ptr %243, align 8
  %244 = call ptr @llvm.invariant.start.p0(i64 4, ptr %241)
  %245 = call ptr @llvm.invariant.start.p0(i64 80, ptr %212)
  %246 = getelementptr ptr, ptr %212, i32 %221
  %247 = getelementptr ptr, ptr %246, i32 3
  %248 = load ptr, ptr %247, align 8
  %249 = alloca { ptr, ptr }, align 8
  %250 = getelementptr { ptr, ptr }, ptr %249, i32 0, i32 0
  store ptr %198, ptr %250, align 8
  %251 = getelementptr { ptr, ptr }, ptr %249, i32 0, i32 1
  store ptr @function_typ, ptr %251, align 8
  %252 = call ptr @behavior_wrapper(ptr %248, { ptr, ptr, ptr, i32 } %222, ptr %249)
  call void %252({ ptr, ptr, ptr, i32 } %222, { ptr, ptr, ptr, i32 } %222, ptr %241, { ptr, ptr, ptr, i32 } %208, { ptr } %210)
  %253 = alloca { ptr, ptr, ptr, i32 }, align 8
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %256 = load ptr, ptr %254, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %259 = load ptr, ptr %257, align 8
  store ptr %259, ptr %258, align 8
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %262 = load ptr, ptr %260, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %265 = load i32, ptr %263, align 4
  store i32 %265, ptr %264, align 4
  call void @set_offset(ptr %253, ptr @Iterator2)
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %267 = load ptr, ptr %266, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %267, 0
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %270 = load ptr, ptr %269, align 8
  %271 = insertvalue { ptr, ptr, ptr, i32 } %268, ptr %270, 1
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %273 = load ptr, ptr %272, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } %271, ptr %273, 2
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %276 = load i32, ptr %275, align 4
  %277 = insertvalue { ptr, ptr, ptr, i32 } %274, i32 %276, 3
  ret { ptr, ptr, ptr, i32 } %277
}

define { i64, i64 } @_size_FilterIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FilterIterator2_field_FilterIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [10 x ptr], ptr %26, i32 0, i32 5
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterator2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterator2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 80, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %8, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 80, ptr %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = getelementptr ptr, ptr %75, i32 %78
  %80 = getelementptr ptr, ptr %79, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %72, align 8
  %85 = insertvalue { ptr } undef, ptr %84, 0
  call void %83(ptr %74, { ptr } %85) #15
  ret void
}

define { ptr, i160 } @FilterIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [0 x ptr], align 8
  %11 = alloca {}, align 8
  %12 = alloca { ptr, i160 }, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca { ptr, i160 }, align 8
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = load i32, ptr %27, align 4
  store i32 %29, ptr %28, align 4
  call void @set_offset(ptr %17, ptr @FilterIterator2)
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %17, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 80, ptr %32)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = getelementptr ptr, ptr %32, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr, ptr, ptr, i32 } %40(ptr %31) #16
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  call void @assume_offset(ptr %42, ptr @Iterator2)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = load ptr, ptr %17, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 80, ptr %58)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %61 = load i32, ptr %60, align 4
  %62 = getelementptr ptr, ptr %58, i32 %61
  %63 = load ptr, ptr %62, align 8
  %64 = call ptr @typegetter_wrapper(ptr %63, ptr %57)
  %65 = alloca [0 x ptr], align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr %65)
  %67 = call ptr @llvm.invariant.start.p0(i64 24, ptr %45)
  %68 = getelementptr ptr, ptr %45, i32 %54
  %69 = getelementptr ptr, ptr %68, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = alloca {}, align 8
  %72 = call ptr @behavior_wrapper(ptr %70, { ptr, ptr, ptr, i32 } %55, ptr %71)
  %73 = call { ptr, i160 } %72({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %65)
  %74 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %73, ptr %74, align 8
  %75 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 0
  store ptr %75, ptr %.reg2mem12, align 8
  br label %76

76:                                               ; preds = %165, %3
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %77 = load ptr, ptr %.reload13, align 8
  %78 = ptrtoint ptr %77 to i64
  %79 = icmp eq i64 %78, ptrtoint (ptr @nil_typ to i64)
  %80 = icmp eq i64 %78, 0
  %81 = or i1 %79, %80
  %82 = icmp eq i1 %81, false
  br i1 %82, label %83, label %161

83:                                               ; preds = %76
  %84 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  store ptr %85, ptr %5, align 8
  %86 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 1
  %87 = load i160, ptr %86, align 4
  store i160 %87, ptr %4, align 4
  %88 = load ptr, ptr %5, align 8
  store ptr %88, ptr %7, align 8
  %89 = load i160, ptr %4, align 4
  store i160 %89, ptr %6, align 4
  %90 = load ptr, ptr %7, align 8
  %91 = insertvalue { ptr, i160 } undef, ptr %90, 0
  %92 = load i160, ptr %6, align 4
  %93 = insertvalue { ptr, i160 } %91, i160 %92, 1
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = load ptr, ptr %17, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 80, ptr %96)
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = getelementptr ptr, ptr %96, i32 %99
  %101 = getelementptr ptr, ptr %100, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = call { ptr } %104(ptr %95) #16
  store { ptr } %105, ptr %8, align 8
  %106 = load ptr, ptr %8, align 8
  %107 = call i1 %106({ ptr, i160 } %93)
  %108 = zext i1 %107 to i32
  store i32 %108, ptr %.reg2mem10, align 4
  %109 = xor i1 %107, true
  %110 = zext i1 %109 to i32
  store i32 %110, ptr %.reg2mem8, align 4
  br i1 %107, label %111, label %112

111:                                              ; preds = %83
  br label %160

112:                                              ; preds = %83
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = load ptr, ptr %17, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 80, ptr %115)
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %118 = load i32, ptr %117, align 4
  %119 = getelementptr ptr, ptr %115, i32 %118
  %120 = getelementptr ptr, ptr %119, i32 1
  %121 = load ptr, ptr %120, align 8
  %122 = getelementptr { ptr, ptr }, ptr %121, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = call { ptr, ptr, ptr, i32 } %123(ptr %114) #16
  store { ptr, ptr, ptr, i32 } %124, ptr %9, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  call void @assume_offset(ptr %9, ptr @Iterator2)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %130, 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %133, 2
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %136 = load i32, ptr %135, align 4
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, i32 %136, 3
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %139 = load ptr, ptr %138, align 8
  %140 = load ptr, ptr %17, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 80, ptr %140)
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = getelementptr ptr, ptr %140, i32 %143
  %145 = load ptr, ptr %144, align 8
  %146 = call ptr @typegetter_wrapper(ptr %145, ptr %139)
  %147 = call ptr @llvm.invariant.start.p0(i64 0, ptr %10)
  %148 = call ptr @llvm.invariant.start.p0(i64 24, ptr %127)
  %149 = getelementptr ptr, ptr %127, i32 %136
  %150 = getelementptr ptr, ptr %149, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = call ptr @behavior_wrapper(ptr %151, { ptr, ptr, ptr, i32 } %137, ptr %11)
  %153 = call { ptr, i160 } %152({ ptr, ptr, ptr, i32 } %137, { ptr, ptr, ptr, i32 } %137, ptr %10)
  store { ptr, i160 } %153, ptr %12, align 8
  %154 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 0
  %155 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 0
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 1
  %158 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 1
  %159 = load i160, ptr %157, align 4
  store i160 %159, ptr %158, align 4
  br label %160

160:                                              ; preds = %112, %111
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem16, align 4
  store i32 %.reload11, ptr %.reg2mem18, align 4
  br label %162

161:                                              ; preds = %76
  store i32 0, ptr %.reg2mem16, align 4
  store i32 2, ptr %.reg2mem18, align 4
  br label %162

162:                                              ; preds = %161, %160
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  store i32 %.reload19, ptr %.reg2mem5, align 4
  store i32 %.reload17, ptr %.reg2mem3, align 4
  br label %163

163:                                              ; preds = %162
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %164 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %164, label %165, label %166

165:                                              ; preds = %163
  br label %76

166:                                              ; preds = %163
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %167 = zext i32 %.reload6 to i64
  %168 = trunc i64 %167 to i32
  switch i32 %168, label %174 [
    i32 1, label %169
  ]

169:                                              ; preds = %166
  %170 = load ptr, ptr %5, align 8
  %171 = insertvalue { ptr, i160 } undef, ptr %170, 0
  %172 = load i160, ptr %4, align 4
  %173 = insertvalue { ptr, i160 } %171, i160 %172, 1
  store { ptr, i160 } %173, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem14, align 8
  br label %179

174:                                              ; preds = %166
  store [0 x i8] undef, ptr %13, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %14, align 4
  %175 = load ptr, ptr %14, align 8
  %176 = insertvalue { ptr, i160 } undef, ptr %175, 0
  %177 = load i160, ptr %13, align 4
  %178 = insertvalue { ptr, i160 } %176, i160 %177, 1
  store { ptr, i160 } %178, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem14, align 8
  br label %179

179:                                              ; preds = %174, %169
  %.reload15 = load { ptr, i160 }, ptr %.reg2mem14, align 8
  ret { ptr, i160 } %.reload15
}

define { ptr } @FilterIterator2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @FilterIterator2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterator2_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FilterIterator2_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr } @FilterIterable2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @FilterIterable2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable2_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FilterIterable2_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { i64, i64 } @_size_MapIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @MapIterable2_field_MapIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @MapIterable2_field_MapIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [51 x ptr], ptr %26, i32 0, i32 16
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [51 x ptr], ptr %4, i32 0, i32 17
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @MapIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [51 x ptr], ptr %26, i32 0, i32 19
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 27
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @MapIterable2_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 408, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 2
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %8, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 408, ptr %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = getelementptr ptr, ptr %75, i32 %78
  %80 = getelementptr ptr, ptr %79, i32 3
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %72, align 8
  %85 = insertvalue { ptr } undef, ptr %84, 0
  call void %83(ptr %74, { ptr } %85) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @MapIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 408, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 408, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %46)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 408, ptr %56)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %59 = load i32, ptr %58, align 4
  %60 = getelementptr ptr, ptr %56, i32 %59
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = call ptr @typegetter_wrapper(ptr %62, ptr %55)
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 0, ptr %64)
  %66 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %67 = getelementptr ptr, ptr %34, i32 %43
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = alloca {}, align 8
  %71 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %44, ptr %70)
  %72 = call { ptr, ptr, ptr, i32 } %71({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %64)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %72, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = load i32, ptr %85, align 4
  store i32 %87, ptr %86, align 4
  call void @set_offset(ptr %75, ptr @Iterator2)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %6, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 408, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 3
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr } %98(ptr %89) #16
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %6, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 408, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = load ptr, ptr %106, align 8
  %108 = call ptr @typegetter_wrapper(ptr %107, ptr %101)
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = load ptr, ptr %6, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 408, ptr %111)
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = getelementptr ptr, ptr %111, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 1
  %117 = load ptr, ptr %116, align 8
  %118 = call ptr @typegetter_wrapper(ptr %117, ptr %110)
  %119 = alloca [3 x ptr], align 8
  store ptr @MapIterator2, ptr %119, align 8
  %120 = getelementptr ptr, ptr %119, i32 1
  store ptr %108, ptr %120, align 8
  %121 = getelementptr ptr, ptr %119, i32 2
  store ptr %118, ptr %121, align 8
  %122 = load ptr, ptr %119, align 8
  %123 = getelementptr ptr, ptr %122, i32 6
  %124 = load ptr, ptr %123, align 8
  %125 = call { i64, i64 } @size_wrapper(ptr %124, ptr %119)
  %126 = extractvalue { i64, i64 } %125, 0
  %127 = call ptr @bump_malloc(i64 %126)
  store ptr %108, ptr %127, align 8
  %128 = getelementptr ptr, ptr %127, i32 1
  store ptr %118, ptr %128, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 16, ptr %127)
  %130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  store ptr @MapIterator2, ptr %130, align 8
  store ptr %127, ptr %131, align 8
  store i32 9, ptr %132, align 4
  %133 = call ptr @llvm.invariant.start.p0(i64 16, ptr %130)
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = load ptr, ptr %6, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 408, ptr %136)
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %139 = load i32, ptr %138, align 4
  %140 = getelementptr ptr, ptr %136, i32 %139
  %141 = getelementptr ptr, ptr %140, i32 2
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, ptr }, ptr %142, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = call { ptr, ptr, ptr, i32 } %144(ptr %135) #16
  %146 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %145, ptr %146, align 8
  %147 = call ptr @llvm.invariant.start.p0(i64 16, ptr %146)
  call void @assume_offset(ptr %146, ptr @Iterable2)
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %149, 0
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %152, 1
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 2
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %155, 2
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  %158 = load i32, ptr %157, align 4
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, i32 %158, 3
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %161 = load ptr, ptr %160, align 8
  %162 = load ptr, ptr %6, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 408, ptr %162)
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %165 = load i32, ptr %164, align 4
  %166 = getelementptr ptr, ptr %162, i32 %165
  %167 = load ptr, ptr %166, align 8
  %168 = call ptr @typegetter_wrapper(ptr %167, ptr %161)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = load ptr, ptr %6, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 408, ptr %171)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %174 = load i32, ptr %173, align 4
  %175 = getelementptr ptr, ptr %171, i32 %174
  %176 = getelementptr ptr, ptr %175, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = call ptr @typegetter_wrapper(ptr %177, ptr %170)
  %179 = alloca [0 x ptr], align 8
  %180 = call ptr @llvm.invariant.start.p0(i64 0, ptr %179)
  %181 = call ptr @llvm.invariant.start.p0(i64 184, ptr %149)
  %182 = getelementptr ptr, ptr %149, i32 %158
  %183 = getelementptr ptr, ptr %182, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = alloca {}, align 8
  %186 = call ptr @behavior_wrapper(ptr %184, { ptr, ptr, ptr, i32 } %159, ptr %185)
  %187 = call { ptr, ptr, ptr, i32 } %186({ ptr, ptr, ptr, i32 } %159, { ptr, ptr, ptr, i32 } %159, ptr %179)
  %188 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %187, ptr %188, align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 16, ptr %188)
  %190 = alloca { ptr, ptr, ptr, i32 }, align 8
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 0
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %193 = load ptr, ptr %191, align 8
  store ptr %193, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 1
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %196 = load ptr, ptr %194, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 2
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %199 = load ptr, ptr %197, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 3
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %202 = load i32, ptr %200, align 4
  store i32 %202, ptr %201, align 4
  call void @set_offset(ptr %190, ptr @Iterator2)
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = load ptr, ptr %6, align 8
  %206 = call ptr @llvm.invariant.start.p0(i64 408, ptr %205)
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %208 = load i32, ptr %207, align 4
  %209 = getelementptr ptr, ptr %205, i32 %208
  %210 = getelementptr ptr, ptr %209, i32 3
  %211 = load ptr, ptr %210, align 8
  %212 = getelementptr { ptr, ptr }, ptr %211, i32 0, i32 0
  %213 = load ptr, ptr %212, align 8
  %214 = call { ptr } %213(ptr %204) #16
  %215 = alloca ptr, align 8
  store { ptr } %214, ptr %215, align 8
  %216 = alloca { ptr, ptr, ptr, i32 }, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 0
  %219 = load ptr, ptr %217, align 8
  store ptr %219, ptr %218, align 8
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 1
  %222 = load ptr, ptr %220, align 8
  store ptr %222, ptr %221, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 2
  %225 = load ptr, ptr %223, align 8
  store ptr %225, ptr %224, align 8
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 3
  %228 = load i32, ptr %226, align 4
  store i32 %228, ptr %227, align 4
  call void @set_offset(ptr %216, ptr @Iterator2)
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 0
  %230 = load ptr, ptr %229, align 8
  %231 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %230, 0
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 1
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } %231, ptr %233, 1
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 2
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %236, 2
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 3
  %239 = load i32, ptr %238, align 4
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, i32 %239, 3
  %241 = load ptr, ptr %215, align 8
  %242 = insertvalue { ptr } undef, ptr %241, 0
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %244 = load ptr, ptr %243, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %244, 0
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %247 = load ptr, ptr %246, align 8
  %248 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %247, 1
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %250 = load ptr, ptr %249, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %248, ptr %250, 2
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %253 = load i32, ptr %252, align 4
  %254 = insertvalue { ptr, ptr, ptr, i32 } %251, i32 %253, 3
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %256 = load ptr, ptr %255, align 8
  %257 = load ptr, ptr %6, align 8
  %258 = call ptr @llvm.invariant.start.p0(i64 408, ptr %257)
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %260 = load i32, ptr %259, align 4
  %261 = getelementptr ptr, ptr %257, i32 %260
  %262 = load ptr, ptr %261, align 8
  %263 = call ptr @typegetter_wrapper(ptr %262, ptr %256)
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %265 = load ptr, ptr %264, align 8
  %266 = load ptr, ptr %6, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 408, ptr %266)
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %269 = load i32, ptr %268, align 4
  %270 = getelementptr ptr, ptr %266, i32 %269
  %271 = getelementptr ptr, ptr %270, i32 1
  %272 = load ptr, ptr %271, align 8
  %273 = call ptr @typegetter_wrapper(ptr %272, ptr %265)
  %274 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %275 = getelementptr [3 x ptr], ptr %274, i32 0, i32 1
  store ptr %263, ptr %275, align 8
  %276 = getelementptr [3 x ptr], ptr %274, i32 0, i32 2
  store ptr null, ptr %276, align 8
  %277 = call ptr @llvm.invariant.start.p0(i64 16, ptr %274)
  store ptr @Iterator2, ptr %274, align 8
  %278 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %279 = getelementptr [4 x ptr], ptr %278, i32 0, i32 2
  store ptr %263, ptr %279, align 8
  %280 = getelementptr [4 x ptr], ptr %278, i32 0, i32 1
  store ptr %273, ptr %280, align 8
  %281 = getelementptr [4 x ptr], ptr %278, i32 0, i32 3
  store ptr null, ptr %281, align 8
  %282 = call ptr @llvm.invariant.start.p0(i64 24, ptr %278)
  store ptr @function_typ, ptr %278, align 8
  %283 = alloca [2 x ptr], align 8
  %284 = getelementptr [2 x ptr], ptr %283, i32 0, i32 0
  store ptr %274, ptr %284, align 8
  %285 = getelementptr [2 x ptr], ptr %283, i32 0, i32 1
  store ptr %278, ptr %285, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 4, ptr %283)
  %287 = call ptr @llvm.invariant.start.p0(i64 88, ptr %244)
  %288 = getelementptr ptr, ptr %244, i32 %253
  %289 = getelementptr ptr, ptr %288, i32 4
  %290 = load ptr, ptr %289, align 8
  %291 = alloca { ptr, ptr }, align 8
  %292 = getelementptr { ptr, ptr }, ptr %291, i32 0, i32 0
  store ptr %230, ptr %292, align 8
  %293 = getelementptr { ptr, ptr }, ptr %291, i32 0, i32 1
  store ptr @function_typ, ptr %293, align 8
  %294 = call ptr @behavior_wrapper(ptr %290, { ptr, ptr, ptr, i32 } %254, ptr %291)
  call void %294({ ptr, ptr, ptr, i32 } %254, { ptr, ptr, ptr, i32 } %254, ptr %283, { ptr, ptr, ptr, i32 } %240, { ptr } %242)
  %295 = alloca { ptr, ptr, ptr, i32 }, align 8
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %298 = load ptr, ptr %296, align 8
  store ptr %298, ptr %297, align 8
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %301 = load ptr, ptr %299, align 8
  store ptr %301, ptr %300, align 8
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %304 = load ptr, ptr %302, align 8
  store ptr %304, ptr %303, align 8
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %307 = load i32, ptr %305, align 4
  store i32 %307, ptr %306, align 4
  call void @set_offset(ptr %295, ptr @Iterator2)
  %308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %309 = load ptr, ptr %308, align 8
  %310 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %309, 0
  %311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %312 = load ptr, ptr %311, align 8
  %313 = insertvalue { ptr, ptr, ptr, i32 } %310, ptr %312, 1
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %315 = load ptr, ptr %314, align 8
  %316 = insertvalue { ptr, ptr, ptr, i32 } %313, ptr %315, 2
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %318 = load i32, ptr %317, align 4
  %319 = insertvalue { ptr, ptr, ptr, i32 } %316, i32 %318, 3
  ret { ptr, ptr, ptr, i32 } %319
}

define { i64, i64 } @_size_MapIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @MapIterator2_field_MapIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @MapIterator2_field_MapIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [11 x ptr], ptr %26, i32 0, i32 6
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [11 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterator2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterator2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 88, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 2
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %8, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 88, ptr %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = getelementptr ptr, ptr %75, i32 %78
  %80 = getelementptr ptr, ptr %79, i32 3
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %72, align 8
  %85 = insertvalue { ptr } undef, ptr %84, 0
  call void %83(ptr %74, { ptr } %85) #15
  ret void
}

define { ptr, i160 } @MapIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @MapIterator2)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 88, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr, ptr, ptr, i32 } %37(ptr %28) #16
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %38, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %39)
  call void @assume_offset(ptr %39, ptr @Iterator2)
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %42, 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %45, 1
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 2
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %51, 3
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %14, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 88, ptr %55)
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = getelementptr ptr, ptr %55, i32 %58
  %60 = load ptr, ptr %59, align 8
  %61 = call ptr @typegetter_wrapper(ptr %60, ptr %54)
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = load ptr, ptr %14, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 88, ptr %64)
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %67 = load i32, ptr %66, align 4
  %68 = getelementptr ptr, ptr %64, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = call ptr @typegetter_wrapper(ptr %70, ptr %63)
  %72 = alloca [0 x ptr], align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr %72)
  %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %42)
  %75 = getelementptr ptr, ptr %42, i32 %51
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = alloca {}, align 8
  %79 = call ptr @behavior_wrapper(ptr %77, { ptr, ptr, ptr, i32 } %52, ptr %78)
  %80 = call { ptr, i160 } %79({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr %72)
  %81 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %80, ptr %81, align 8
  %82 = getelementptr { ptr, i160 }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = ptrtoint ptr %83 to i64
  %85 = icmp eq i64 %84, ptrtoint (ptr @nil_typ to i64)
  %86 = icmp eq i64 %84, 0
  %87 = or i1 %85, %86
  %88 = icmp eq i1 %87, false
  br i1 %88, label %89, label %120

89:                                               ; preds = %3
  %90 = getelementptr { ptr, i160 }, ptr %81, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  store ptr %91, ptr %5, align 8
  %92 = getelementptr { ptr, i160 }, ptr %81, i32 0, i32 1
  %93 = load i160, ptr %92, align 4
  store i160 %93, ptr %4, align 4
  %94 = load ptr, ptr %5, align 8
  store ptr %94, ptr %7, align 8
  %95 = load i160, ptr %4, align 4
  store i160 %95, ptr %6, align 4
  %96 = load ptr, ptr %7, align 8
  %97 = insertvalue { ptr, i160 } undef, ptr %96, 0
  %98 = load i160, ptr %6, align 4
  %99 = insertvalue { ptr, i160 } %97, i160 %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %14, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 3
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = call { ptr } %110(ptr %101) #16
  store { ptr } %111, ptr %8, align 8
  %112 = load ptr, ptr %8, align 8
  %113 = call { ptr, i160 } %112({ ptr, i160 } %99)
  store { ptr, i160 } %113, ptr %9, align 8
  %114 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, i160 } undef, ptr %115, 0
  %117 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %118 = load i160, ptr %117, align 4
  %119 = insertvalue { ptr, i160 } %116, i160 %118, 1
  store { ptr, i160 } %119, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %125

120:                                              ; preds = %3
  store [0 x i8] undef, ptr %10, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %11, align 4
  %121 = load ptr, ptr %11, align 8
  %122 = insertvalue { ptr, i160 } undef, ptr %121, 0
  %123 = load i160, ptr %10, align 4
  %124 = insertvalue { ptr, i160 } %122, i160 %123, 1
  store { ptr, i160 } %124, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %125

125:                                              ; preds = %120, %89
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %126

126:                                              ; preds = %125
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr } @MapIterator2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @MapIterator2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterator2_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @MapIterator2_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr } @MapIterable2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @MapIterable2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable2_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @MapIterable2_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { i64, i64 } @_size_ArrayIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ArrayIterator_field_ArrayIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [10 x ptr], ptr %15, i32 0, i32 5
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ArrayIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @Array)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @Array)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 80, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %49, { ptr, ptr, ptr, i32 } %70) #15
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %7, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 80, ptr %73)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %76 = load i32, ptr %75, align 4
  %77 = getelementptr ptr, ptr %73, i32 %76
  %78 = getelementptr ptr, ptr %77, i32 2
  %79 = load ptr, ptr %78, align 8
  %80 = getelementptr { ptr, ptr }, ptr %79, i32 0, i32 1
  %81 = load ptr, ptr %80, align 8
  call void %81(ptr %72, i32 0) #15
  ret void
}

define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @ArrayIterator)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 80, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %28) #16
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = load ptr, ptr %14, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 80, ptr %41)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %44 = load i32, ptr %43, align 4
  %45 = getelementptr ptr, ptr %41, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = call { ptr, ptr, ptr, i32 } %49(ptr %40) #16
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %50, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 16, ptr %51)
  call void @assume_offset(ptr %51, ptr @Array)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %14, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 80, ptr %67)
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = getelementptr ptr, ptr %67, i32 %70
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr @typegetter_wrapper(ptr %72, ptr %66)
  %74 = alloca [0 x ptr], align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 0, ptr %74)
  %76 = call ptr @llvm.invariant.start.p0(i64 600, ptr %54)
  %77 = getelementptr ptr, ptr %54, i32 %63
  %78 = getelementptr ptr, ptr %77, i32 8
  %79 = load ptr, ptr %78, align 8
  %80 = alloca {}, align 8
  %81 = call ptr @behavior_wrapper(ptr %79, { ptr, ptr, ptr, i32 } %64, ptr %80)
  %82 = call i32 %81({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %74)
  %83 = icmp sge i32 %38, %82
  br i1 %83, label %84, label %89

84:                                               ; preds = %3
  store [0 x i8] undef, ptr %4, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %5, align 4
  %85 = load ptr, ptr %5, align 8
  %86 = insertvalue { ptr, i160 } undef, ptr %85, 0
  %87 = load i160, ptr %4, align 4
  %88 = insertvalue { ptr, i160 } %86, i160 %87, 1
  store { ptr, i160 } %88, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %178

89:                                               ; preds = %3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %14, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 80, ptr %92)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %95 = load i32, ptr %94, align 4
  %96 = getelementptr ptr, ptr %92, i32 %95
  %97 = getelementptr ptr, ptr %96, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = call i32 %100(ptr %91) #16
  %102 = add i32 %101, 1
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = load ptr, ptr %14, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 80, ptr %105)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %108 = load i32, ptr %107, align 4
  %109 = getelementptr ptr, ptr %105, i32 %108
  %110 = getelementptr ptr, ptr %109, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  call void %113(ptr %104, i32 %102) #15
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = load ptr, ptr %14, align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 80, ptr %116)
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = getelementptr ptr, ptr %116, i32 %119
  %121 = getelementptr ptr, ptr %120, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = getelementptr { ptr, ptr }, ptr %122, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = call i32 %124(ptr %115) #16
  %126 = sub i32 %125, 1
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = load ptr, ptr %14, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 80, ptr %129)
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %132 = load i32, ptr %131, align 4
  %133 = getelementptr ptr, ptr %129, i32 %132
  %134 = getelementptr ptr, ptr %133, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr, ptr }, ptr %135, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = call { ptr, ptr, ptr, i32 } %137(ptr %128) #16
  store { ptr, ptr, ptr, i32 } %138, ptr %6, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  call void @assume_offset(ptr %6, ptr @Array)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %147, 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, i32 %150, 3
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = load ptr, ptr %14, align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 80, ptr %154)
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %157 = load i32, ptr %156, align 4
  %158 = getelementptr ptr, ptr %154, i32 %157
  %159 = load ptr, ptr %158, align 8
  %160 = call ptr @typegetter_wrapper(ptr %159, ptr %153)
  %161 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %161, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %163 = call ptr @llvm.invariant.start.p0(i64 600, ptr %141)
  %164 = getelementptr ptr, ptr %141, i32 %150
  %165 = getelementptr ptr, ptr %164, i32 15
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr @i32_typ, ptr %167, align 8
  %168 = call ptr @behavior_wrapper(ptr %166, { ptr, ptr, ptr, i32 } %151, ptr %8)
  %169 = call { ptr, i160 } %168({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %7, i32 %126)
  store { ptr, i160 } %169, ptr %9, align 8
  %170 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %171 = load ptr, ptr %170, align 8
  store ptr %171, ptr %11, align 8
  %172 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %173 = load i160, ptr %172, align 4
  store i160 %173, ptr %10, align 4
  %174 = load ptr, ptr %11, align 8
  %175 = insertvalue { ptr, i160 } undef, ptr %174, 0
  %176 = load i160, ptr %10, align 4
  %177 = insertvalue { ptr, i160 } %175, i160 %176, 1
  store { ptr, i160 } %177, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %178

178:                                              ; preds = %89, %84
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %179

179:                                              ; preds = %178
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i32 @ArrayIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @ArrayIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i32 %1, ptr %14, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ArrayIterator_setter_array(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define i32 @Array_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i32, ptr %19, align 4
  ret i32 %20
}

define void @Array_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  store i32 %1, ptr %20, align 4
  ret void
}

define i32 @Array_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Array_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i32 %1, ptr %14, align 4
  ret void
}

define { ptr } @Array_getter_buffer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @Array_setter_buffer(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define ptr @Iterator2_field_Iterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Iterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [3 x ptr], ptr %4, i32 0, i32 2
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Iterable2_field_Iterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Iterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [23 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Iterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 13
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [23 x ptr], ptr %26, i32 0, i32 14
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Iterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 16
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define { i64, i64 } @_size_Iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_size_Iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_size_Representable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Representable)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 7))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = load [6 x i8], ptr @dwbqu_Object, align 1
  store [6 x i8] %27, ptr %26, align 1
  %28 = alloca [1 x ptr], align 8
  store ptr @String, ptr %28, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 6
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %28)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr @String, ptr %35, align 8
  store ptr %34, ptr %36, align 8
  store i32 9, ptr %37, align 4
  %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %39 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %52, 3
  %54 = alloca [3 x ptr], align 8
  %55 = getelementptr [3 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %55, align 8
  %56 = getelementptr [3 x ptr], ptr %54, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %57 = getelementptr [3 x ptr], ptr %54, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 9, ptr %54)
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %60 = getelementptr ptr, ptr %43, i32 %52
  %61 = getelementptr ptr, ptr %60, i32 4
  %62 = load ptr, ptr %61, align 8
  %63 = alloca { ptr, ptr, ptr }, align 8
  %64 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 0
  store ptr @buffer_typ, ptr %64, align 8
  %65 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 1
  store ptr @i32_typ, ptr %65, align 8
  %66 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 2
  store ptr @i32_typ, ptr %66, align 8
  %67 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %53, ptr %63)
  call void %67({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr } %41, i32 6, i32 7)
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %80 = load i32, ptr %78, align 4
  store i32 %80, ptr %79, align 4
  call void @set_offset(ptr %68, ptr @String)
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %82, 0
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 1
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %88, 2
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %91 = load i32, ptr %90, align 4
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %91, 3
  ret { ptr, ptr, ptr, i32 } %92
}

define { i64, i64 } @_size_String(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 17
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -318192747195410237, i64 ptrtoint (ptr @buffer_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %38 = getelementptr [35 x ptr], ptr %37, i32 0, i32 18
  %39 = getelementptr ptr, ptr %38, i32 9
  %40 = load ptr, ptr %39, align 8
  ret ptr %40
}

define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 19
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 20
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 21
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_append_xPtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 26
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 27
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 28
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 29
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 30
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 280, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr } undef, ptr %32, 0
  call void %30(ptr %22, { ptr } %33) #15
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %6, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 280, ptr %36)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = getelementptr ptr, ptr %36, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  call void %44(ptr %35, i32 1) #15
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 280, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  call void %55(ptr %46, i32 0) #15
  ret void
}

define void @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @String)
  %22 = alloca ptr, align 8
  store { ptr } %3, ptr %22, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %9, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 280, ptr %25)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = getelementptr ptr, ptr %25, i32 %28
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr, ptr }, ptr %30, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %22, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %32(ptr %24, { ptr } %34) #15
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %9, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 280, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  call void %45(ptr %36, i32 %4) #15
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %9, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  call void %56(ptr %47, i32 %5) #15
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr } %28(ptr %20) #16
  %30 = alloca ptr, align 8
  store { ptr } %29, ptr %30, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr } undef, ptr %31, 0
  ret { ptr } %32
}

define { ptr, ptr, ptr, i32 } @String_append_xPtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr }, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem28 = alloca ptr, align 8
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem34 = alloca ptr, align 8
  %.reg2mem37 = alloca ptr, align 8
  %.reg2mem40 = alloca i32, align 4
  %.reg2mem42 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @String)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %23, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 280, ptr %38)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %41 = load i32, ptr %40, align 4
  %42 = getelementptr ptr, ptr %38, i32 %41
  %43 = getelementptr ptr, ptr %42, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr { ptr, ptr }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = call i32 %46(ptr %37) #16
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %23, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 280, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 2
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call i32 %58(ptr %49) #16
  %60 = icmp slt i32 %47, %59
  %61 = select i1 %60, ptr %5, ptr %15
  store ptr %61, ptr %.reg2mem37, align 8
  %62 = select i1 %60, ptr %6, ptr %16
  store ptr %62, ptr %.reg2mem34, align 8
  %63 = select i1 %60, ptr %7, ptr %17
  store ptr %63, ptr %.reg2mem31, align 8
  %64 = select i1 %60, ptr %8, ptr %18
  store ptr %64, ptr %.reg2mem28, align 8
  %65 = select i1 %60, ptr %9, ptr %19
  store ptr %65, ptr %.reg2mem25, align 8
  %66 = select i1 %60, ptr %10, ptr %20
  store ptr %66, ptr %.reg2mem15, align 8
  br i1 %60, label %67, label %68

67:                                               ; preds = %4
  br label %175

68:                                               ; preds = %4
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = load ptr, ptr %23, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 280, ptr %71)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %74 = load i32, ptr %73, align 4
  %75 = getelementptr ptr, ptr %71, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = call i32 %79(ptr %70) #16
  %81 = mul i32 %80, 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %23, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 280, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  call void %92(ptr %83, i32 %81) #15
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %23, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 280, ptr %95)
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %98 = load i32, ptr %97, align 4
  %99 = getelementptr ptr, ptr %95, i32 %98
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = call { ptr } %102(ptr %94) #16
  store { ptr } %103, ptr %11, align 8
  %104 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  %105 = load ptr, ptr %11, align 8
  store ptr %105, ptr %104, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %23, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 280, ptr %109)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = getelementptr ptr, ptr %109, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call i32 %117(ptr %108) #16
  %119 = sext i32 %118 to i64
  %120 = mul i64 %119, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %121 = call ptr @bump_malloc(i64 %120)
  store ptr %121, ptr %13, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %23, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 280, ptr %124)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = getelementptr ptr, ptr %124, i32 %127
  %129 = load ptr, ptr %128, align 8
  %130 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr } undef, ptr %133, 0
  call void %131(ptr %123, { ptr } %134) #15
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  store ptr %135, ptr %.reg2mem13, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr %136, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem42, align 4
  br label %137

137:                                              ; preds = %._crit_edge, %68
  %.reload43 = load i32, ptr %.reg2mem42, align 4
  store i32 %.reload43, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %138 = load ptr, ptr %.reload14, align 8
  %139 = load ptr, ptr %23, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 280, ptr %139)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %141 = load i32, ptr %.reload12, align 4
  %142 = getelementptr ptr, ptr %139, i32 %141
  %143 = getelementptr ptr, ptr %142, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = call i32 %146(ptr %138) #16
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %148 = icmp slt i32 %.reload10, %147
  store i1 %148, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %149, label %171

149:                                              ; preds = %137
  %150 = load ptr, ptr %12, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %151 = sext i32 %.reload9 to i64
  %152 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %151
  %153 = getelementptr i8, ptr %150, i64 %152
  %154 = load i8, ptr %153, align 1
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = load ptr, ptr %23, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 280, ptr %157)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %160 = load i32, ptr %159, align 4
  %161 = getelementptr ptr, ptr %157, i32 %160
  %162 = load ptr, ptr %161, align 8
  %163 = getelementptr { ptr, ptr }, ptr %162, i32 0, i32 0
  %164 = load ptr, ptr %163, align 8
  %165 = call { ptr } %164(ptr %156) #16
  store { ptr } %165, ptr %14, align 8
  %166 = load ptr, ptr %14, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %167 = sext i32 %.reload8 to i64
  %168 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %167
  %169 = getelementptr i8, ptr %166, i64 %168
  store i8 %154, ptr %169, align 1
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %170 = add i32 %.reload7, 1
  store i32 %170, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem40, align 4
  br label %172

171:                                              ; preds = %137
  store i32 poison, ptr %.reg2mem40, align 4
  br label %172

172:                                              ; preds = %171, %149
  %.reload41 = load i32, ptr %.reg2mem40, align 4
  store i32 %.reload41, ptr %.reg2mem, align 4
  br label %173

173:                                              ; preds = %172
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %174

._crit_edge:                                      ; preds = %173
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem42, align 4
  br label %137

174:                                              ; preds = %173
  br label %175

175:                                              ; preds = %174, %67
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = load ptr, ptr %23, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 280, ptr %178)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %181 = load i32, ptr %180, align 4
  %182 = getelementptr ptr, ptr %178, i32 %181
  %183 = load ptr, ptr %182, align 8
  %184 = getelementptr { ptr, ptr }, ptr %183, i32 0, i32 0
  %185 = load ptr, ptr %184, align 8
  %186 = call { ptr } %185(ptr %177) #16
  %.reload39 = load ptr, ptr %.reg2mem37, align 8
  store { ptr } %186, ptr %.reload39, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %188 = load ptr, ptr %187, align 8
  %189 = load ptr, ptr %23, align 8
  %190 = call ptr @llvm.invariant.start.p0(i64 280, ptr %189)
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %192 = load i32, ptr %191, align 4
  %193 = getelementptr ptr, ptr %189, i32 %192
  %194 = getelementptr ptr, ptr %193, i32 1
  %195 = load ptr, ptr %194, align 8
  %196 = getelementptr { ptr, ptr }, ptr %195, i32 0, i32 0
  %197 = load ptr, ptr %196, align 8
  %198 = call i32 %197(ptr %188) #16
  %.reload36 = load ptr, ptr %.reg2mem34, align 8
  store i32 %198, ptr %.reload36, align 4
  %.reload38 = load ptr, ptr %.reg2mem37, align 8
  %199 = load ptr, ptr %.reload38, align 8
  %.reload35 = load ptr, ptr %.reg2mem34, align 8
  %200 = load i32, ptr %.reload35, align 4
  %201 = sext i32 %200 to i64
  %202 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %201
  %203 = getelementptr i8, ptr %199, i64 %202
  store i8 %3, ptr %203, align 1
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = load ptr, ptr %23, align 8
  %207 = call ptr @llvm.invariant.start.p0(i64 280, ptr %206)
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %209 = load i32, ptr %208, align 4
  %210 = getelementptr ptr, ptr %206, i32 %209
  %211 = getelementptr ptr, ptr %210, i32 1
  %212 = load ptr, ptr %211, align 8
  %213 = getelementptr { ptr, ptr }, ptr %212, i32 0, i32 0
  %214 = load ptr, ptr %213, align 8
  %215 = call i32 %214(ptr %205) #16
  %.reload33 = load ptr, ptr %.reg2mem31, align 8
  store i32 %215, ptr %.reload33, align 4
  %.reload30 = load ptr, ptr %.reg2mem28, align 8
  store i32 1, ptr %.reload30, align 4
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %216 = load i32, ptr %.reload32, align 4
  %.reload29 = load ptr, ptr %.reg2mem28, align 8
  %217 = load i32, ptr %.reload29, align 4
  %218 = add i32 %216, %217
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  store i32 %218, ptr %.reload27, align 4
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %220 = load ptr, ptr %219, align 8
  %221 = load ptr, ptr %23, align 8
  %222 = call ptr @llvm.invariant.start.p0(i64 280, ptr %221)
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %224 = load i32, ptr %223, align 4
  %225 = getelementptr ptr, ptr %221, i32 %224
  %226 = getelementptr ptr, ptr %225, i32 1
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr { ptr, ptr }, ptr %227, i32 0, i32 1
  %229 = load ptr, ptr %228, align 8
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %230 = load i32, ptr %.reload26, align 4
  call void %229(ptr %220, i32 %230) #15
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %.reload24 = load ptr, ptr %.reg2mem15, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload24, i32 0, i32 0
  %233 = load ptr, ptr %231, align 8
  store ptr %233, ptr %232, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload23, i32 0, i32 1
  %236 = load ptr, ptr %234, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload22, i32 0, i32 2
  %239 = load ptr, ptr %237, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload21, i32 0, i32 3
  %242 = load i32, ptr %240, align 4
  store i32 %242, ptr %241, align 4
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  call void @set_offset(ptr %.reload20, ptr @String)
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload19, i32 0, i32 0
  %244 = load ptr, ptr %243, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %244, 0
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload18, i32 0, i32 1
  %247 = load ptr, ptr %246, align 8
  %248 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %247, 1
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload17, i32 0, i32 2
  %250 = load ptr, ptr %249, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %248, ptr %250, 2
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload16, i32 0, i32 3
  %253 = load i32, ptr %252, align 4
  %254 = insertvalue { ptr, ptr, ptr, i32 } %251, i32 %253, 3
  ret { ptr, ptr, ptr, i32 } %254
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca ptr, align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca i32, align 4
  %.reg2mem14 = alloca i1, align 1
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem29 = alloca ptr, align 8
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem37 = alloca i32, align 4
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca i1, align 1
  %.reg2mem44 = alloca i32, align 4
  %.reg2mem47 = alloca i32, align 4
  %.reg2mem51 = alloca ptr, align 8
  %.reg2mem53 = alloca ptr, align 8
  %.reg2mem55 = alloca i32, align 4
  %.reg2mem57 = alloca ptr, align 8
  %.reg2mem67 = alloca ptr, align 8
  %.reg2mem70 = alloca ptr, align 8
  %.reg2mem73 = alloca i32, align 4
  %.reg2mem79 = alloca i32, align 4
  %.reg2mem81 = alloca i32, align 4
  %.reg2mem83 = alloca i32, align 4
  %.reg2mem85 = alloca i32, align 4
  %.reg2mem87 = alloca i32, align 4
  %.reg2mem89 = alloca i32, align 4
  %.reg2mem91 = alloca i32, align 4
  %.reg2mem93 = alloca i32, align 4
  %.reg2mem95 = alloca i32, align 4
  %.reg2mem97 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 16, ptr %17)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @String)
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %32, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = load i32, ptr %44, align 4
  store i32 %46, ptr %45, align 4
  call void @set_offset(ptr %34, ptr @String)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = alloca [0 x ptr], align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 0, ptr %59)
  %61 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %62 = getelementptr ptr, ptr %48, i32 %57
  %63 = getelementptr ptr, ptr %62, i32 7
  %64 = load ptr, ptr %63, align 8
  %65 = alloca {}, align 8
  %66 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr %65)
  %67 = call { ptr } %66({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %59)
  %68 = alloca ptr, align 8
  store { ptr } %67, ptr %68, align 8
  %69 = alloca { ptr }, align 8
  %70 = getelementptr { ptr }, ptr %69, i32 0, i32 0
  %71 = load ptr, ptr %68, align 8
  store ptr %71, ptr %70, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %69)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %83, 3
  %85 = alloca [0 x ptr], align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr %85)
  %87 = call ptr @llvm.invariant.start.p0(i64 280, ptr %74)
  %88 = getelementptr ptr, ptr %74, i32 %83
  %89 = getelementptr ptr, ptr %88, i32 5
  %90 = load ptr, ptr %89, align 8
  %91 = alloca {}, align 8
  %92 = call ptr @behavior_wrapper(ptr %90, { ptr, ptr, ptr, i32 } %84, ptr %91)
  %93 = call i32 %92({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr %85)
  store i32 %93, ptr %.reg2mem73, align 4
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = load ptr, ptr %19, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 280, ptr %96)
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = getelementptr ptr, ptr %96, i32 %99
  %101 = getelementptr ptr, ptr %100, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = call i32 %104(ptr %95) #16
  %.reload78 = load i32, ptr %.reg2mem73, align 4
  %106 = add i32 %105, %.reload78
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %19, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 280, ptr %109)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = getelementptr ptr, ptr %109, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call i32 %117(ptr %108) #16
  %119 = icmp slt i32 %106, %118
  %120 = select i1 %119, ptr %6, ptr %14
  store ptr %120, ptr %.reg2mem70, align 8
  %121 = select i1 %119, ptr %7, ptr %15
  store ptr %121, ptr %.reg2mem67, align 8
  %122 = select i1 %119, ptr %8, ptr %16
  store ptr %122, ptr %.reg2mem57, align 8
  br i1 %119, label %123, label %178

123:                                              ; preds = %4
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %125 = load ptr, ptr %124, align 8
  %126 = load ptr, ptr %19, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 280, ptr %126)
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %129 = load i32, ptr %128, align 4
  %130 = getelementptr ptr, ptr %126, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr, ptr }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = call i32 %134(ptr %125) #16
  store i32 %135, ptr %.reg2mem55, align 4
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %136, ptr %.reg2mem53, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %137, ptr %.reg2mem51, align 8
  %.reload56 = load i32, ptr %.reg2mem55, align 4
  store i32 0, ptr %.reg2mem95, align 4
  store i32 %.reload56, ptr %.reg2mem97, align 4
  br label %138

138:                                              ; preds = %._crit_edge, %123
  %.reload98 = load i32, ptr %.reg2mem97, align 4
  %.reload96 = load i32, ptr %.reg2mem95, align 4
  store i32 %.reload98, ptr %.reg2mem47, align 4
  store i32 %.reload96, ptr %.reg2mem44, align 4
  %.reload54 = load ptr, ptr %.reg2mem53, align 8
  %139 = load ptr, ptr %.reload54, align 8
  %140 = load ptr, ptr %19, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 280, ptr %140)
  %.reload52 = load ptr, ptr %.reg2mem51, align 8
  %142 = load i32, ptr %.reload52, align 4
  %143 = getelementptr ptr, ptr %140, i32 %142
  %144 = getelementptr ptr, ptr %143, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr }, ptr %145, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = call i32 %147(ptr %139) #16
  %.reload77 = load i32, ptr %.reg2mem73, align 4
  %149 = add i32 %148, %.reload77
  %.reload50 = load i32, ptr %.reg2mem47, align 4
  %150 = icmp slt i32 %.reload50, %149
  store i1 %150, ptr %.reg2mem41, align 1
  %.reload43 = load i1, ptr %.reg2mem41, align 1
  br i1 %.reload43, label %151, label %174

151:                                              ; preds = %138
  %152 = load ptr, ptr %69, align 8
  %.reload46 = load i32, ptr %.reg2mem44, align 4
  %153 = sext i32 %.reload46 to i64
  %154 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %153
  %155 = getelementptr i8, ptr %152, i64 %154
  %156 = load i8, ptr %155, align 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %19, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 280, ptr %159)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = getelementptr ptr, ptr %159, i32 %162
  %164 = load ptr, ptr %163, align 8
  %165 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  %167 = call { ptr } %166(ptr %158) #16
  store { ptr } %167, ptr %5, align 8
  %168 = load ptr, ptr %5, align 8
  %.reload49 = load i32, ptr %.reg2mem47, align 4
  %169 = sext i32 %.reload49 to i64
  %170 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %169
  %171 = getelementptr i8, ptr %168, i64 %170
  store i8 %156, ptr %171, align 1
  %.reload48 = load i32, ptr %.reg2mem47, align 4
  %172 = add i32 %.reload48, 1
  store i32 %172, ptr %.reg2mem39, align 4
  %.reload45 = load i32, ptr %.reg2mem44, align 4
  %173 = add i32 %.reload45, 1
  store i32 %173, ptr %.reg2mem37, align 4
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store i32 %.reload38, ptr %.reg2mem91, align 4
  store i32 %.reload40, ptr %.reg2mem93, align 4
  br label %175

174:                                              ; preds = %138
  store i32 poison, ptr %.reg2mem91, align 4
  store i32 poison, ptr %.reg2mem93, align 4
  br label %175

175:                                              ; preds = %174, %151
  %.reload94 = load i32, ptr %.reg2mem93, align 4
  %.reload92 = load i32, ptr %.reg2mem91, align 4
  store i32 %.reload94, ptr %.reg2mem35, align 4
  store i32 %.reload92, ptr %.reg2mem33, align 4
  br label %176

176:                                              ; preds = %175
  %.reload42 = load i1, ptr %.reg2mem41, align 1
  br i1 %.reload42, label %._crit_edge, label %177

._crit_edge:                                      ; preds = %176
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload34, ptr %.reg2mem95, align 4
  store i32 %.reload36, ptr %.reg2mem97, align 4
  br label %138

177:                                              ; preds = %176
  br label %325

178:                                              ; preds = %4
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %180 = load ptr, ptr %179, align 8
  %181 = load ptr, ptr %19, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 280, ptr %181)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %184 = load i32, ptr %183, align 4
  %185 = getelementptr ptr, ptr %181, i32 %184
  %186 = getelementptr ptr, ptr %185, i32 1
  %187 = load ptr, ptr %186, align 8
  %188 = getelementptr { ptr, ptr }, ptr %187, i32 0, i32 0
  %189 = load ptr, ptr %188, align 8
  %190 = call i32 %189(ptr %180) #16
  %.reload76 = load i32, ptr %.reg2mem73, align 4
  %191 = add i32 %190, %.reload76
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %193 = load ptr, ptr %192, align 8
  %194 = load ptr, ptr %19, align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 280, ptr %194)
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = getelementptr ptr, ptr %194, i32 %197
  %199 = getelementptr ptr, ptr %198, i32 2
  %200 = load ptr, ptr %199, align 8
  %201 = getelementptr { ptr, ptr }, ptr %200, i32 0, i32 1
  %202 = load ptr, ptr %201, align 8
  call void %202(ptr %193, i32 %191) #15
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = load ptr, ptr %19, align 8
  %206 = call ptr @llvm.invariant.start.p0(i64 280, ptr %205)
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %208 = load i32, ptr %207, align 4
  %209 = getelementptr ptr, ptr %205, i32 %208
  %210 = load ptr, ptr %209, align 8
  %211 = getelementptr { ptr, ptr }, ptr %210, i32 0, i32 0
  %212 = load ptr, ptr %211, align 8
  %213 = call { ptr } %212(ptr %204) #16
  store { ptr } %213, ptr %9, align 8
  %214 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %215 = load ptr, ptr %9, align 8
  store ptr %215, ptr %214, align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %218 = load ptr, ptr %217, align 8
  %219 = load ptr, ptr %19, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 280, ptr %219)
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %222 = load i32, ptr %221, align 4
  %223 = getelementptr ptr, ptr %219, i32 %222
  %224 = getelementptr ptr, ptr %223, i32 2
  %225 = load ptr, ptr %224, align 8
  %226 = getelementptr { ptr, ptr }, ptr %225, i32 0, i32 0
  %227 = load ptr, ptr %226, align 8
  %228 = call i32 %227(ptr %218) #16
  %229 = sext i32 %228 to i64
  %230 = mul i64 %229, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %231 = call ptr @bump_malloc(i64 %230)
  store ptr %231, ptr %11, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %233 = load ptr, ptr %232, align 8
  %234 = load ptr, ptr %19, align 8
  %235 = call ptr @llvm.invariant.start.p0(i64 280, ptr %234)
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %237 = load i32, ptr %236, align 4
  %238 = getelementptr ptr, ptr %234, i32 %237
  %239 = load ptr, ptr %238, align 8
  %240 = getelementptr { ptr, ptr }, ptr %239, i32 0, i32 1
  %241 = load ptr, ptr %240, align 8
  %242 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  %243 = load ptr, ptr %242, align 8
  %244 = insertvalue { ptr } undef, ptr %243, 0
  call void %241(ptr %233, { ptr } %244) #15
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %245, ptr %.reg2mem31, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %246, ptr %.reg2mem29, align 8
  store i32 0, ptr %.reg2mem87, align 4
  store i32 0, ptr %.reg2mem89, align 4
  br label %247

247:                                              ; preds = %._crit_edge1, %178
  %.reload90 = load i32, ptr %.reg2mem89, align 4
  %.reload88 = load i32, ptr %.reg2mem87, align 4
  store i32 %.reload90, ptr %.reg2mem21, align 4
  store i32 %.reload88, ptr %.reg2mem17, align 4
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %248 = load ptr, ptr %.reload32, align 8
  %249 = load ptr, ptr %19, align 8
  %250 = call ptr @llvm.invariant.start.p0(i64 280, ptr %249)
  %.reload30 = load ptr, ptr %.reg2mem29, align 8
  %251 = load i32, ptr %.reload30, align 4
  %252 = getelementptr ptr, ptr %249, i32 %251
  %253 = getelementptr ptr, ptr %252, i32 1
  %254 = load ptr, ptr %253, align 8
  %255 = getelementptr { ptr, ptr }, ptr %254, i32 0, i32 0
  %256 = load ptr, ptr %255, align 8
  %257 = call i32 %256(ptr %248) #16
  %.reload75 = load i32, ptr %.reg2mem73, align 4
  %258 = add i32 %257, %.reload75
  %.reload28 = load i32, ptr %.reg2mem21, align 4
  %259 = icmp slt i32 %.reload28, %258
  store i1 %259, ptr %.reg2mem14, align 1
  %.reload16 = load i1, ptr %.reg2mem14, align 1
  br i1 %.reload16, label %260, label %321

260:                                              ; preds = %247
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %262 = load ptr, ptr %261, align 8
  %263 = load ptr, ptr %19, align 8
  %264 = call ptr @llvm.invariant.start.p0(i64 280, ptr %263)
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %266 = load i32, ptr %265, align 4
  %267 = getelementptr ptr, ptr %263, i32 %266
  %268 = getelementptr ptr, ptr %267, i32 1
  %269 = load ptr, ptr %268, align 8
  %270 = getelementptr { ptr, ptr }, ptr %269, i32 0, i32 0
  %271 = load ptr, ptr %270, align 8
  %272 = call i32 %271(ptr %262) #16
  %.reload27 = load i32, ptr %.reg2mem21, align 4
  %273 = icmp slt i32 %.reload27, %272
  br i1 %273, label %274, label %296

274:                                              ; preds = %260
  %275 = load ptr, ptr %10, align 8
  %.reload26 = load i32, ptr %.reg2mem21, align 4
  %276 = sext i32 %.reload26 to i64
  %277 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %276
  %278 = getelementptr i8, ptr %275, i64 %277
  %279 = load i8, ptr %278, align 1
  %280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %281 = load ptr, ptr %280, align 8
  %282 = load ptr, ptr %19, align 8
  %283 = call ptr @llvm.invariant.start.p0(i64 280, ptr %282)
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %285 = load i32, ptr %284, align 4
  %286 = getelementptr ptr, ptr %282, i32 %285
  %287 = load ptr, ptr %286, align 8
  %288 = getelementptr { ptr, ptr }, ptr %287, i32 0, i32 0
  %289 = load ptr, ptr %288, align 8
  %290 = call { ptr } %289(ptr %281) #16
  store { ptr } %290, ptr %12, align 8
  %291 = load ptr, ptr %12, align 8
  %.reload25 = load i32, ptr %.reg2mem21, align 4
  %292 = sext i32 %.reload25 to i64
  %293 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %292
  %294 = getelementptr i8, ptr %291, i64 %293
  store i8 %279, ptr %294, align 1
  %.reload24 = load i32, ptr %.reg2mem21, align 4
  %295 = add i32 %.reload24, 1
  store i32 %295, ptr %.reg2mem12, align 4
  %.reload13 = load i32, ptr %.reg2mem12, align 4
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem83, align 4
  store i32 %.reload13, ptr %.reg2mem85, align 4
  br label %319

296:                                              ; preds = %260
  %297 = load ptr, ptr %69, align 8
  %.reload20 = load i32, ptr %.reg2mem17, align 4
  %298 = sext i32 %.reload20 to i64
  %299 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %298
  %300 = getelementptr i8, ptr %297, i64 %299
  %301 = load i8, ptr %300, align 1
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %303 = load ptr, ptr %302, align 8
  %304 = load ptr, ptr %19, align 8
  %305 = call ptr @llvm.invariant.start.p0(i64 280, ptr %304)
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %307 = load i32, ptr %306, align 4
  %308 = getelementptr ptr, ptr %304, i32 %307
  %309 = load ptr, ptr %308, align 8
  %310 = getelementptr { ptr, ptr }, ptr %309, i32 0, i32 0
  %311 = load ptr, ptr %310, align 8
  %312 = call { ptr } %311(ptr %303) #16
  store { ptr } %312, ptr %13, align 8
  %313 = load ptr, ptr %13, align 8
  %.reload23 = load i32, ptr %.reg2mem21, align 4
  %314 = sext i32 %.reload23 to i64
  %315 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %314
  %316 = getelementptr i8, ptr %313, i64 %315
  store i8 %301, ptr %316, align 1
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  %317 = add i32 %.reload22, 1
  store i32 %317, ptr %.reg2mem10, align 4
  %.reload19 = load i32, ptr %.reg2mem17, align 4
  %318 = add i32 %.reload19, 1
  store i32 %318, ptr %.reg2mem8, align 4
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem83, align 4
  store i32 %.reload11, ptr %.reg2mem85, align 4
  br label %319

319:                                              ; preds = %296, %274
  %.reload86 = load i32, ptr %.reg2mem85, align 4
  %.reload84 = load i32, ptr %.reg2mem83, align 4
  store i32 %.reload86, ptr %.reg2mem6, align 4
  store i32 %.reload84, ptr %.reg2mem4, align 4
  br label %320

320:                                              ; preds = %319
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload5, ptr %.reg2mem79, align 4
  store i32 %.reload7, ptr %.reg2mem81, align 4
  br label %322

321:                                              ; preds = %247
  store i32 poison, ptr %.reg2mem79, align 4
  store i32 poison, ptr %.reg2mem81, align 4
  br label %322

322:                                              ; preds = %321, %320
  %.reload82 = load i32, ptr %.reg2mem81, align 4
  %.reload80 = load i32, ptr %.reg2mem79, align 4
  store i32 %.reload82, ptr %.reg2mem2, align 4
  store i32 %.reload80, ptr %.reg2mem, align 4
  br label %323

323:                                              ; preds = %322
  %.reload15 = load i1, ptr %.reg2mem14, align 1
  br i1 %.reload15, label %._crit_edge1, label %324

._crit_edge1:                                     ; preds = %323
  %.reload = load i32, ptr %.reg2mem, align 4
  %.reload3 = load i32, ptr %.reg2mem2, align 4
  store i32 %.reload, ptr %.reg2mem87, align 4
  store i32 %.reload3, ptr %.reg2mem89, align 4
  br label %247

324:                                              ; preds = %323
  br label %325

325:                                              ; preds = %324, %177
  %326 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %327 = load ptr, ptr %326, align 8
  %328 = load ptr, ptr %19, align 8
  %329 = call ptr @llvm.invariant.start.p0(i64 280, ptr %328)
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %331 = load i32, ptr %330, align 4
  %332 = getelementptr ptr, ptr %328, i32 %331
  %333 = getelementptr ptr, ptr %332, i32 1
  %334 = load ptr, ptr %333, align 8
  %335 = getelementptr { ptr, ptr }, ptr %334, i32 0, i32 0
  %336 = load ptr, ptr %335, align 8
  %337 = call i32 %336(ptr %327) #16
  %.reload72 = load ptr, ptr %.reg2mem70, align 8
  store i32 %337, ptr %.reload72, align 4
  %.reload71 = load ptr, ptr %.reg2mem70, align 8
  %338 = load i32, ptr %.reload71, align 4
  %.reload74 = load i32, ptr %.reg2mem73, align 4
  %339 = add i32 %338, %.reload74
  %.reload69 = load ptr, ptr %.reg2mem67, align 8
  store i32 %339, ptr %.reload69, align 4
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %341 = load ptr, ptr %340, align 8
  %342 = load ptr, ptr %19, align 8
  %343 = call ptr @llvm.invariant.start.p0(i64 280, ptr %342)
  %344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %345 = load i32, ptr %344, align 4
  %346 = getelementptr ptr, ptr %342, i32 %345
  %347 = getelementptr ptr, ptr %346, i32 1
  %348 = load ptr, ptr %347, align 8
  %349 = getelementptr { ptr, ptr }, ptr %348, i32 0, i32 1
  %350 = load ptr, ptr %349, align 8
  %.reload68 = load ptr, ptr %.reg2mem67, align 8
  %351 = load i32, ptr %.reload68, align 4
  call void %350(ptr %341, i32 %351) #15
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %.reload66 = load ptr, ptr %.reg2mem57, align 8
  %353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload66, i32 0, i32 0
  %354 = load ptr, ptr %352, align 8
  store ptr %354, ptr %353, align 8
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %.reload65 = load ptr, ptr %.reg2mem57, align 8
  %356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload65, i32 0, i32 1
  %357 = load ptr, ptr %355, align 8
  store ptr %357, ptr %356, align 8
  %358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %.reload64 = load ptr, ptr %.reg2mem57, align 8
  %359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload64, i32 0, i32 2
  %360 = load ptr, ptr %358, align 8
  store ptr %360, ptr %359, align 8
  %361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %.reload63 = load ptr, ptr %.reg2mem57, align 8
  %362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload63, i32 0, i32 3
  %363 = load i32, ptr %361, align 4
  store i32 %363, ptr %362, align 4
  %.reload62 = load ptr, ptr %.reg2mem57, align 8
  call void @set_offset(ptr %.reload62, ptr @String)
  %.reload61 = load ptr, ptr %.reg2mem57, align 8
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload61, i32 0, i32 0
  %365 = load ptr, ptr %364, align 8
  %366 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %365, 0
  %.reload60 = load ptr, ptr %.reg2mem57, align 8
  %367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload60, i32 0, i32 1
  %368 = load ptr, ptr %367, align 8
  %369 = insertvalue { ptr, ptr, ptr, i32 } %366, ptr %368, 1
  %.reload59 = load ptr, ptr %.reg2mem57, align 8
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload59, i32 0, i32 2
  %371 = load ptr, ptr %370, align 8
  %372 = insertvalue { ptr, ptr, ptr, i32 } %369, ptr %371, 2
  %.reload58 = load ptr, ptr %.reg2mem57, align 8
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload58, i32 0, i32 3
  %374 = load i32, ptr %373, align 4
  %375 = insertvalue { ptr, ptr, ptr, i32 } %372, i32 %374, 3
  ret { ptr, ptr, ptr, i32 } %375
}

define i8 @String__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i8, align 1
  %.reg2mem2 = alloca i8, align 1
  %.reg2mem4 = alloca i8, align 1
  %.reg2mem6 = alloca i8, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @String)
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %9, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 280, ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %27 = load i32, ptr %26, align 4
  %28 = getelementptr ptr, ptr %24, i32 %27
  %29 = getelementptr ptr, ptr %28, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr, ptr }, ptr %30, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = call i32 %32(ptr %23) #16
  %34 = sub i32 %33, 1
  %35 = icmp sgt i32 %3, %34
  br i1 %35, label %36, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %38

36:                                               ; preds = %4
  %37 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %37)
  br label %38

38:                                               ; preds = %._crit_edge, %36
  %39 = icmp sge i32 %3, 0
  br i1 %39, label %40, label %57

40:                                               ; preds = %38
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %9, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = call { ptr } %50(ptr %42) #16
  store { ptr } %51, ptr %5, align 8
  %52 = load ptr, ptr %5, align 8
  %53 = sext i32 %3 to i64
  %54 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %53
  %55 = getelementptr i8, ptr %52, i64 %54
  %56 = load i8, ptr %55, align 1
  store i8 %56, ptr %.reg2mem4, align 1
  %.reload5 = load i8, ptr %.reg2mem4, align 1
  store i8 %.reload5, ptr %.reg2mem6, align 1
  br label %104

57:                                               ; preds = %38
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %9, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 280, ptr %60)
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = getelementptr ptr, ptr %60, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 %68(ptr %59) #16
  %70 = add i32 %69, %3
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %._crit_edge1

._crit_edge1:                                     ; preds = %57
  br label %74

72:                                               ; preds = %57
  %73 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %73)
  br label %74

74:                                               ; preds = %._crit_edge1, %72
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %9, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 280, ptr %77)
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = getelementptr ptr, ptr %77, i32 %80
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr } %84(ptr %76) #16
  store { ptr } %85, ptr %6, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = load ptr, ptr %9, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 280, ptr %88)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %91 = load i32, ptr %90, align 4
  %92 = getelementptr ptr, ptr %88, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = call i32 %96(ptr %87) #16
  %98 = add i32 %97, %3
  %99 = load ptr, ptr %6, align 8
  %100 = sext i32 %98 to i64
  %101 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %100
  %102 = getelementptr i8, ptr %99, i64 %101
  %103 = load i8, ptr %102, align 1
  store i8 %103, ptr %.reg2mem2, align 1
  %.reload3 = load i8, ptr %.reg2mem2, align 1
  store i8 %.reload3, ptr %.reg2mem6, align 1
  br label %104

104:                                              ; preds = %74, %40
  %.reload7 = load i8, ptr %.reg2mem6, align 1
  store i8 %.reload7, ptr %.reg2mem, align 1
  br label %105

105:                                              ; preds = %104
  %.reload = load i8, ptr %.reg2mem, align 1
  ret i8 %.reload
}

define i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i1, align 1
  %6 = alloca ptr, align 8
  %7 = alloca [0 x ptr], align 8
  %8 = alloca {}, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i1, align 1
  %11 = alloca i1, align 1
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca i32, align 4
  %.reg2mem14 = alloca i32, align 4
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem19 = alloca i1, align 1
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem28 = alloca ptr, align 8
  %.reg2mem30 = alloca ptr, align 8
  %.reg2mem32 = alloca ptr, align 8
  %.reg2mem34 = alloca i1, align 1
  %.reg2mem36 = alloca i32, align 4
  %.reg2mem38 = alloca i32, align 4
  %.reg2mem40 = alloca i32, align 4
  %.reg2mem42 = alloca i32, align 4
  %.reg2mem44 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @String)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %41 = load i32, ptr %39, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %29, ptr @String)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %14, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 280, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %43) #16
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = alloca [0 x ptr], align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 0, ptr %66)
  %68 = call ptr @llvm.invariant.start.p0(i64 280, ptr %55)
  %69 = getelementptr ptr, ptr %55, i32 %64
  %70 = getelementptr ptr, ptr %69, i32 5
  %71 = load ptr, ptr %70, align 8
  %72 = alloca {}, align 8
  %73 = call ptr @behavior_wrapper(ptr %71, { ptr, ptr, ptr, i32 } %65, ptr %72)
  %74 = call i32 %73({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %66)
  %75 = icmp ne i32 %53, %74
  br i1 %75, label %76, label %77

76:                                               ; preds = %4
  store ptr %5, ptr %.reg2mem32, align 8
  store i1 false, ptr %.reg2mem34, align 1
  br label %149

77:                                               ; preds = %4
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  store ptr %78, ptr %.reg2mem30, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  store ptr %79, ptr %.reg2mem28, align 8
  store i32 0, ptr %.reg2mem44, align 4
  br label %80

80:                                               ; preds = %147, %77
  %.reload45 = load i32, ptr %.reg2mem44, align 4
  store i32 %.reload45, ptr %.reg2mem22, align 4
  %.reload31 = load ptr, ptr %.reg2mem30, align 8
  %81 = load ptr, ptr %.reload31, align 8
  %82 = load ptr, ptr %14, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 280, ptr %82)
  %.reload29 = load ptr, ptr %.reg2mem28, align 8
  %84 = load i32, ptr %.reload29, align 4
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr { ptr, ptr }, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = call i32 %89(ptr %81) #16
  %.reload27 = load i32, ptr %.reg2mem22, align 4
  %91 = icmp slt i32 %.reload27, %90
  %.reload26 = load i32, ptr %.reg2mem22, align 4
  %92 = icmp sge i32 %.reload26, %90
  store i1 %92, ptr %.reg2mem19, align 1
  %93 = select i1 %91, ptr %10, ptr %11
  store ptr %93, ptr %.reg2mem16, align 8
  br i1 %91, label %94, label %143

94:                                               ; preds = %80
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = load ptr, ptr %14, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 280, ptr %97)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = getelementptr ptr, ptr %97, i32 %100
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = call { ptr } %104(ptr %96) #16
  store { ptr } %105, ptr %6, align 8
  %106 = load ptr, ptr %6, align 8
  %.reload25 = load i32, ptr %.reg2mem22, align 4
  %107 = sext i32 %.reload25 to i64
  %108 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %107
  %109 = getelementptr i8, ptr %106, i64 %108
  %110 = load i8, ptr %109, align 1
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  %123 = call ptr @llvm.invariant.start.p0(i64 0, ptr %7)
  %124 = call ptr @llvm.invariant.start.p0(i64 280, ptr %112)
  %125 = getelementptr ptr, ptr %112, i32 %121
  %126 = getelementptr ptr, ptr %125, i32 7
  %127 = load ptr, ptr %126, align 8
  %128 = call ptr @behavior_wrapper(ptr %127, { ptr, ptr, ptr, i32 } %122, ptr %8)
  %129 = call { ptr } %128({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr %7)
  store { ptr } %129, ptr %9, align 8
  %130 = load ptr, ptr %9, align 8
  %.reload24 = load i32, ptr %.reg2mem22, align 4
  %131 = sext i32 %.reload24 to i64
  %132 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %131
  %133 = getelementptr i8, ptr %130, i64 %132
  %134 = load i8, ptr %133, align 1
  %135 = icmp ne i8 %110, %134
  %136 = icmp eq i8 %110, %134
  %137 = zext i1 %136 to i32
  store i32 %137, ptr %.reg2mem14, align 4
  br i1 %135, label %138, label %139

138:                                              ; preds = %94
  store i32 poison, ptr %.reg2mem42, align 4
  br label %141

139:                                              ; preds = %94
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  %140 = add i32 %.reload23, 1
  store i32 %140, ptr %.reg2mem12, align 4
  %.reload13 = load i32, ptr %.reg2mem12, align 4
  store i32 %.reload13, ptr %.reg2mem42, align 4
  br label %141

141:                                              ; preds = %139, %138
  %.reload43 = load i32, ptr %.reg2mem42, align 4
  store i32 %.reload43, ptr %.reg2mem10, align 4
  br label %142

142:                                              ; preds = %141
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  %.reload15 = load i32, ptr %.reg2mem14, align 4
  store i32 %.reload15, ptr %.reg2mem38, align 4
  store i32 %.reload11, ptr %.reg2mem40, align 4
  br label %144

143:                                              ; preds = %80
  store i32 0, ptr %.reg2mem38, align 4
  store i32 poison, ptr %.reg2mem40, align 4
  br label %144

144:                                              ; preds = %143, %142
  %.reload41 = load i32, ptr %.reg2mem40, align 4
  %.reload39 = load i32, ptr %.reg2mem38, align 4
  store i32 %.reload41, ptr %.reg2mem8, align 4
  store i32 %.reload39, ptr %.reg2mem6, align 4
  br label %145

145:                                              ; preds = %144
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %146 = trunc i32 %.reload7 to i1
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload18 = load ptr, ptr %.reg2mem16, align 8
  %.reload21 = load i1, ptr %.reg2mem19, align 1
  store i32 %.reload9, ptr %.reg2mem36, align 4
  br i1 %146, label %147, label %148

147:                                              ; preds = %145
  %.reload37 = load i32, ptr %.reg2mem36, align 4
  store i32 %.reload37, ptr %.reg2mem4, align 4
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  store i32 %.reload5, ptr %.reg2mem44, align 4
  br label %80

148:                                              ; preds = %145
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %.reload20 = load i1, ptr %.reg2mem19, align 1
  store ptr %.reload17, ptr %.reg2mem32, align 8
  store i1 %.reload20, ptr %.reg2mem34, align 1
  br label %149

149:                                              ; preds = %148, %76
  %.reload35 = load i1, ptr %.reg2mem34, align 1
  %.reload33 = load ptr, ptr %.reg2mem32, align 8
  store i1 %.reload35, ptr %.reg2mem2, align 1
  store ptr %.reload33, ptr %.reg2mem, align 8
  br label %150

150:                                              ; preds = %149
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %.reload3 = load i1, ptr %.reg2mem2, align 1
  store i1 %.reload3, ptr %.reload1, align 1
  %.reload = load ptr, ptr %.reg2mem, align 8
  %151 = load i1, ptr %.reload, align 1
  ret i1 %151
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i8, align 1
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i8, align 1
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i8 }, align 8
  %.reg2mem1 = alloca { ptr, i8 }, align 8
  %.reg2mem3 = alloca { ptr, i8 }, align 8
  %.reg2mem5 = alloca { ptr, i8 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %23 = load i32, ptr %21, align 4
  store i32 %23, ptr %22, align 4
  call void @set_offset(ptr %11, ptr @String)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %11, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 280, ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %29 = load i32, ptr %28, align 4
  %30 = getelementptr ptr, ptr %26, i32 %29
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr { ptr, ptr }, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call i32 %34(ptr %25) #16
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %3
  store [0 x i8] undef, ptr %4, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %5, align 4
  %38 = load ptr, ptr %5, align 8
  %39 = insertvalue { ptr, i8 } undef, ptr %38, 0
  %40 = load i8, ptr %4, align 1
  %41 = insertvalue { ptr, i8 } %39, i8 %40, 1
  store { ptr, i8 } %41, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i8 }, ptr %.reg2mem3, align 8
  store { ptr, i8 } %.reload4, ptr %.reg2mem5, align 8
  br label %99

42:                                               ; preds = %3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %11, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 280, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %44) #16
  %55 = sub i32 %54, 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = load ptr, ptr %11, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %58)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %61 = load i32, ptr %60, align 4
  %62 = getelementptr ptr, ptr %58, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  call void %66(ptr %57, i32 %55) #15
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %11, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 280, ptr %69)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %72 = load i32, ptr %71, align 4
  %73 = getelementptr ptr, ptr %69, i32 %72
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = call { ptr } %76(ptr %68) #16
  store { ptr } %77, ptr %6, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %11, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 280, ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr ptr, ptr %80, i32 %83
  %85 = getelementptr ptr, ptr %84, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr { ptr, ptr }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = call i32 %88(ptr %79) #16
  %90 = load ptr, ptr %6, align 8
  %91 = sext i32 %89 to i64
  %92 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %91
  %93 = getelementptr i8, ptr %90, i64 %92
  %94 = load i8, ptr %93, align 1
  store i8 %94, ptr %7, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %8, align 4
  %95 = load ptr, ptr %8, align 8
  %96 = insertvalue { ptr, i8 } undef, ptr %95, 0
  %97 = load i8, ptr %7, align 1
  %98 = insertvalue { ptr, i8 } %96, i8 %97, 1
  store { ptr, i8 } %98, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i8 }, ptr %.reg2mem1, align 8
  store { ptr, i8 } %.reload2, ptr %.reg2mem5, align 8
  br label %99

99:                                               ; preds = %42, %37
  %.reload6 = load { ptr, i8 }, ptr %.reg2mem5, align 8
  store { ptr, i8 } %.reload6, ptr %.reg2mem, align 8
  br label %100

100:                                              ; preds = %99
  %.reload = load { ptr, i8 }, ptr %.reg2mem, align 8
  ret { ptr, i8 } %.reload
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca ptr, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @String)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 280, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %28) #16
  %39 = sext i32 %38 to i64
  %40 = alloca ptr, align 8
  %41 = mul i64 %39, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %42 = call ptr @bump_malloc(i64 %41)
  store ptr %42, ptr %40, align 8
  %43 = alloca { ptr }, align 8
  %44 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  %45 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  store ptr %48, ptr %.reg2mem13, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  store ptr %49, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  br label %50

50:                                               ; preds = %._crit_edge, %3
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %51 = load ptr, ptr %.reload14, align 8
  %52 = load ptr, ptr %14, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 280, ptr %52)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %54 = load i32, ptr %.reload12, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = call i32 %59(ptr %51) #16
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %61 = icmp slt i32 %.reload10, %60
  store i1 %61, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %62, label %84

62:                                               ; preds = %50
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = load ptr, ptr %14, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 280, ptr %65)
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = getelementptr ptr, ptr %65, i32 %68
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %64) #16
  store { ptr } %73, ptr %4, align 8
  %74 = load ptr, ptr %4, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %75 = sext i32 %.reload9 to i64
  %76 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %75
  %77 = getelementptr i8, ptr %74, i64 %76
  %78 = load i8, ptr %77, align 1
  %79 = load ptr, ptr %43, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %80 = sext i32 %.reload8 to i64
  %81 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %80
  %82 = getelementptr i8, ptr %79, i64 %81
  store i8 %78, ptr %82, align 1
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %83 = add i32 %.reload7, 1
  store i32 %83, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %85

84:                                               ; preds = %50
  store i32 poison, ptr %.reg2mem15, align 4
  br label %85

85:                                               ; preds = %84, %62
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %86

86:                                               ; preds = %85
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %87

._crit_edge:                                      ; preds = %86
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %50

87:                                               ; preds = %86
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %14, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 280, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call i32 %98(ptr %89) #16
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %14, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 280, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = call i32 %110(ptr %101) #16
  store ptr @String, ptr %5, align 8
  %112 = load ptr, ptr %5, align 8
  %113 = getelementptr ptr, ptr %112, i32 6
  %114 = load ptr, ptr %113, align 8
  %115 = call { i64, i64 } @size_wrapper(ptr %114, ptr %5)
  %116 = extractvalue { i64, i64 } %115, 0
  %117 = call ptr @bump_malloc(i64 %116)
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr @String, ptr %6, align 8
  store ptr %117, ptr %118, align 8
  store i32 9, ptr %119, align 4
  %120 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %122 = load ptr, ptr %121, align 8
  %123 = load ptr, ptr %14, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 280, ptr %123)
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = getelementptr ptr, ptr %123, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = call i32 %131(ptr %122) #16
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = load ptr, ptr %14, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 280, ptr %135)
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %138 = load i32, ptr %137, align 4
  %139 = getelementptr ptr, ptr %135, i32 %138
  %140 = getelementptr ptr, ptr %139, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = getelementptr { ptr, ptr }, ptr %141, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = call i32 %143(ptr %134) #16
  %145 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr } undef, ptr %146, 0
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %149, 0
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %152, 1
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %155, 2
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %158 = load i32, ptr %157, align 4
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, i32 %158, 3
  %160 = getelementptr [3 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %7, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %161, align 8
  %162 = getelementptr [3 x ptr], ptr %7, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %162, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 9, ptr %7)
  %164 = call ptr @llvm.invariant.start.p0(i64 280, ptr %149)
  %165 = getelementptr ptr, ptr %149, i32 %158
  %166 = getelementptr ptr, ptr %165, i32 4
  %167 = load ptr, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 0
  store ptr @buffer_typ, ptr %168, align 8
  %169 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 1
  store ptr @i32_typ, ptr %169, align 8
  %170 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 2
  store ptr @i32_typ, ptr %170, align 8
  %171 = call ptr @behavior_wrapper(ptr %167, { ptr, ptr, ptr, i32 } %159, ptr %8)
  call void %171({ ptr, ptr, ptr, i32 } %159, { ptr, ptr, ptr, i32 } %159, ptr %7, { ptr } %147, i32 %132, i32 %144)
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %174 = load ptr, ptr %172, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %177 = load ptr, ptr %175, align 8
  store ptr %177, ptr %176, align 8
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %180 = load ptr, ptr %178, align 8
  store ptr %180, ptr %179, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %183 = load i32, ptr %181, align 4
  store i32 %183, ptr %182, align 4
  call void @set_offset(ptr %9, ptr @String)
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %186 = load ptr, ptr %184, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %189 = load ptr, ptr %187, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %192 = load ptr, ptr %190, align 8
  store ptr %192, ptr %191, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %195 = load i32, ptr %193, align 4
  store i32 %195, ptr %194, align 4
  %196 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %199 = load ptr, ptr %197, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %205 = load ptr, ptr %203, align 8
  store ptr %205, ptr %204, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %208 = load i32, ptr %206, align 4
  store i32 %208, ptr %207, align 4
  call void @set_offset(ptr %11, ptr @String)
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %210, 0
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %211, ptr %213, 1
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %216 = load ptr, ptr %215, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %216, 2
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %219 = load i32, ptr %218, align 4
  %220 = insertvalue { ptr, ptr, ptr, i32 } %217, i32 %219, 3
  ret { ptr, ptr, ptr, i32 } %220
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca ptr, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @String)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 280, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = call i32 %30(ptr %21) #16
  %32 = add i32 %31, 1
  %33 = sext i32 %32 to i64
  %34 = alloca ptr, align 8
  %35 = mul i64 %33, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %36 = call ptr @bump_malloc(i64 %35)
  store ptr %36, ptr %34, align 8
  %37 = alloca { ptr }, align 8
  %38 = getelementptr { ptr }, ptr %34, i32 0, i32 0
  %39 = getelementptr { ptr }, ptr %37, i32 0, i32 0
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %37)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  store ptr %42, ptr %.reg2mem13, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr %43, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  br label %44

44:                                               ; preds = %._crit_edge, %3
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %45 = load ptr, ptr %.reload14, align 8
  %46 = load ptr, ptr %7, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 280, ptr %46)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %48 = load i32, ptr %.reload12, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %45) #16
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %55 = icmp slt i32 %.reload10, %54
  store i1 %55, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %56, label %78

56:                                               ; preds = %44
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %7, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 280, ptr %59)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = getelementptr ptr, ptr %59, i32 %62
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = call { ptr } %66(ptr %58) #16
  store { ptr } %67, ptr %4, align 8
  %68 = load ptr, ptr %4, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %69 = sext i32 %.reload9 to i64
  %70 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %69
  %71 = getelementptr i8, ptr %68, i64 %70
  %72 = load i8, ptr %71, align 1
  %73 = load ptr, ptr %37, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %74 = sext i32 %.reload8 to i64
  %75 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %74
  %76 = getelementptr i8, ptr %73, i64 %75
  store i8 %72, ptr %76, align 1
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %77 = add i32 %.reload7, 1
  store i32 %77, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %79

78:                                               ; preds = %44
  store i32 poison, ptr %.reg2mem15, align 4
  br label %79

79:                                               ; preds = %78, %56
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %80

80:                                               ; preds = %79
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %81

._crit_edge:                                      ; preds = %80
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %44

81:                                               ; preds = %80
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 280, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call i32 %92(ptr %83) #16
  %94 = load ptr, ptr %37, align 8
  %95 = sext i32 %93 to i64
  %96 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %95
  %97 = getelementptr i8, ptr %94, i64 %96
  store i8 0, ptr %97, align 1
  %98 = getelementptr { ptr }, ptr %37, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr } undef, ptr %99, 0
  ret { ptr } %100
}

define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = alloca [1 x ptr], align 8
  store ptr @StringIterator, ptr %19, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr ptr, ptr %20, i32 6
  %22 = load ptr, ptr %21, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr %22, ptr %19)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @StringIterator, ptr %26, align 8
  store ptr %25, ptr %27, align 8
  store i32 9, ptr %28, align 4
  %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %40, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %30, ptr @String)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %47, 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %53, 3
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = alloca [1 x ptr], align 8
  %68 = getelementptr [1 x ptr], ptr %67, i32 0, i32 0
  store ptr @_parameterization_String, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 1, ptr %67)
  %70 = call ptr @llvm.invariant.start.p0(i64 48, ptr %56)
  %71 = getelementptr ptr, ptr %56, i32 %65
  %72 = getelementptr ptr, ptr %71, i32 2
  %73 = load ptr, ptr %72, align 8
  %74 = alloca { ptr }, align 8
  %75 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  store ptr %44, ptr %75, align 8
  %76 = call ptr @behavior_wrapper(ptr %73, { ptr, ptr, ptr, i32 } %66, ptr %74)
  call void %76({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67, { ptr, ptr, ptr, i32 } %54)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterator)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  ret { ptr, ptr, ptr, i32 } %101
}

define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @String)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  ret { ptr, ptr, ptr, i32 } %43
}

define { i64, i64 } @_size_StringIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [6 x ptr], ptr %15, i32 0, i32 4
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @StringIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @String)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @String)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 48, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  call void %57(ptr %49, { ptr, ptr, ptr, i32 } %69) #15
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %7, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 48, ptr %72)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = getelementptr ptr, ptr %72, i32 %75
  %77 = getelementptr ptr, ptr %76, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  call void %80(ptr %71, i32 0) #15
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca ptr, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @StringIterator)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %20, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 48, ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr ptr, ptr %35, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %34) #16
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %20, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 48, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = call { ptr, ptr, ptr, i32 } %54(ptr %46) #16
  %56 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %55, ptr %56, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 16, ptr %56)
  call void @assume_offset(ptr %56, ptr @String)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  %70 = alloca [0 x ptr], align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 0, ptr %70)
  %72 = call ptr @llvm.invariant.start.p0(i64 280, ptr %59)
  %73 = getelementptr ptr, ptr %59, i32 %68
  %74 = getelementptr ptr, ptr %73, i32 5
  %75 = load ptr, ptr %74, align 8
  %76 = alloca {}, align 8
  %77 = call ptr @behavior_wrapper(ptr %75, { ptr, ptr, ptr, i32 } %69, ptr %76)
  %78 = call i32 %77({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr %70)
  %79 = icmp slt i32 %44, %78
  br i1 %79, label %80, label %232

80:                                               ; preds = %3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %20, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 48, ptr %83)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = getelementptr ptr, ptr %83, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = call i32 %91(ptr %82) #16
  %93 = add i32 %92, 1
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = load ptr, ptr %20, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 48, ptr %96)
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = getelementptr ptr, ptr %96, i32 %99
  %101 = getelementptr ptr, ptr %100, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  call void %104(ptr %95, i32 %93) #15
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = load ptr, ptr %20, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 48, ptr %107)
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %110 = load i32, ptr %109, align 4
  %111 = getelementptr ptr, ptr %107, i32 %110
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 0
  %114 = load ptr, ptr %113, align 8
  %115 = call { ptr, ptr, ptr, i32 } %114(ptr %106) #16
  store { ptr, ptr, ptr, i32 } %115, ptr %4, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  call void @assume_offset(ptr %4, ptr @String)
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %118, 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %121, 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %127, 3
  %129 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %130 = call ptr @llvm.invariant.start.p0(i64 280, ptr %118)
  %131 = getelementptr ptr, ptr %118, i32 %127
  %132 = getelementptr ptr, ptr %131, i32 7
  %133 = load ptr, ptr %132, align 8
  %134 = call ptr @behavior_wrapper(ptr %133, { ptr, ptr, ptr, i32 } %128, ptr %6)
  %135 = call { ptr } %134({ ptr, ptr, ptr, i32 } %128, { ptr, ptr, ptr, i32 } %128, ptr %5)
  store { ptr } %135, ptr %7, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = load ptr, ptr %20, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 48, ptr %138)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %141 = load i32, ptr %140, align 4
  %142 = getelementptr ptr, ptr %138, i32 %141
  %143 = getelementptr ptr, ptr %142, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = call i32 %146(ptr %137) #16
  store ptr @Character, ptr %8, align 8
  %148 = load ptr, ptr %8, align 8
  %149 = getelementptr ptr, ptr %148, i32 6
  %150 = load ptr, ptr %149, align 8
  %151 = call { i64, i64 } @size_wrapper(ptr %150, ptr %8)
  %152 = extractvalue { i64, i64 } %151, 0
  %153 = call ptr @bump_malloc(i64 %152)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  store ptr @Character, ptr %9, align 8
  store ptr %153, ptr %154, align 8
  store i32 9, ptr %155, align 4
  %156 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %20, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 48, ptr %159)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = getelementptr ptr, ptr %159, i32 %162
  %164 = load ptr, ptr %163, align 8
  %165 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  %167 = call { ptr, ptr, ptr, i32 } %166(ptr %158) #16
  store { ptr, ptr, ptr, i32 } %167, ptr %10, align 8
  %168 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  call void @assume_offset(ptr %10, ptr @String)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %170, 0
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 1
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %176, 2
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %179 = load i32, ptr %178, align 4
  %180 = insertvalue { ptr, ptr, ptr, i32 } %177, i32 %179, 3
  %181 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %182 = call ptr @llvm.invariant.start.p0(i64 280, ptr %170)
  %183 = getelementptr ptr, ptr %170, i32 %179
  %184 = getelementptr ptr, ptr %183, i32 7
  %185 = load ptr, ptr %184, align 8
  %186 = call ptr @behavior_wrapper(ptr %185, { ptr, ptr, ptr, i32 } %180, ptr %12)
  %187 = call { ptr } %186({ ptr, ptr, ptr, i32 } %180, { ptr, ptr, ptr, i32 } %180, ptr %11)
  store { ptr } %187, ptr %13, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %189 = load ptr, ptr %188, align 8
  %190 = load ptr, ptr %20, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 48, ptr %190)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %193 = load i32, ptr %192, align 4
  %194 = getelementptr ptr, ptr %190, i32 %193
  %195 = getelementptr ptr, ptr %194, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = getelementptr { ptr, ptr }, ptr %196, i32 0, i32 0
  %198 = load ptr, ptr %197, align 8
  %199 = call i32 %198(ptr %189) #16
  %200 = sub i32 %199, 1
  %201 = load ptr, ptr %13, align 8
  %202 = sext i32 %200 to i64
  %203 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %202
  %204 = getelementptr i8, ptr %201, i64 %203
  %205 = load i8, ptr %204, align 1
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %207 = load ptr, ptr %206, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %207, 0
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %210, 1
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %211, ptr %213, 2
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %216 = load i32, ptr %215, align 4
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, i32 %216, 3
  %218 = getelementptr [1 x ptr], ptr %14, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %218, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 1, ptr %14)
  %220 = call ptr @llvm.invariant.start.p0(i64 40, ptr %207)
  %221 = getelementptr ptr, ptr %207, i32 %216
  %222 = getelementptr ptr, ptr %221, i32 2
  %223 = load ptr, ptr %222, align 8
  %224 = getelementptr { ptr }, ptr %15, i32 0, i32 0
  store ptr @i8_typ, ptr %224, align 8
  %225 = call ptr @behavior_wrapper(ptr %223, { ptr, ptr, ptr, i32 } %217, ptr %15)
  call void %225({ ptr, ptr, ptr, i32 } %217, { ptr, ptr, ptr, i32 } %217, ptr %14, i8 %205)
  %226 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %227 = load ptr, ptr %226, align 8
  %228 = insertvalue { ptr, i160 } undef, ptr %227, 0
  %229 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %230 = load i160, ptr %229, align 4
  %231 = insertvalue { ptr, i160 } %228, i160 %230, 1
  store { ptr, i160 } %231, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %237

232:                                              ; preds = %3
  store [0 x i8] undef, ptr %16, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %17, align 4
  %233 = load ptr, ptr %17, align 8
  %234 = insertvalue { ptr, i160 } undef, ptr %233, 0
  %235 = load i160, ptr %16, align 4
  %236 = insertvalue { ptr, i160 } %234, i160 %235, 1
  store { ptr, i160 } %236, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %237

237:                                              ; preds = %232, %80
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %238

238:                                              ; preds = %237
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { i64, i64 } @_size_Character(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [5 x ptr], ptr %4, i32 0, i32 3
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Character_B_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [5 x ptr], ptr %15, i32 0, i32 4
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Character)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 40, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i8 %28(ptr %20) #16
  ret i8 %29
}

define void @Character_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Character)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 40, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %21, i8 %3) #15
  ret void
}

define i8 @Character_getter_byte(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i8, ptr %2, align 1
  ret i8 %3
}

define void @Character_setter_byte(ptr %0, i8 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i8 %1, ptr %3, align 1
  ret void
}

define i32 @StringIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @StringIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store i32 %1, ptr %8, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @StringIterator_setter_str(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define i32 @String_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @String_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i32 %1, ptr %14, align 4
  ret void
}

define i32 @String_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @String_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store i32 %1, ptr %8, align 4
  ret void
}

define { ptr } @String_getter_bytes(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @String_setter_bytes(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define { i64, i64 } @_size_Exception(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 8
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Exception_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [13 x ptr], ptr %26, i32 0, i32 10
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 11
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Exception)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @String)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @String)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 104, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 2
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %49, { ptr, ptr, ptr, i32 } %70) #15
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %7, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 104, ptr %73)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %76 = load i32, ptr %75, align 4
  %77 = getelementptr ptr, ptr %73, i32 %76
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  call void %80(ptr %72, i32 0) #15
  %81 = alloca ptr, align 8
  %82 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %82, ptr %81, align 8
  %83 = alloca { ptr }, align 8
  %84 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %85 = getelementptr { ptr }, ptr %83, i32 0, i32 0
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 16, ptr %83)
  %88 = load ptr, ptr %83, align 8
  %89 = load [0 x i8], ptr @ioxwb_, align 1
  store [0 x i8] %89, ptr %88, align 1
  %90 = alloca [1 x ptr], align 8
  store ptr @String, ptr %90, align 8
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr ptr, ptr %91, i32 6
  %93 = load ptr, ptr %92, align 8
  %94 = call { i64, i64 } @size_wrapper(ptr %93, ptr %90)
  %95 = extractvalue { i64, i64 } %94, 0
  %96 = call ptr @bump_malloc(i64 %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  store ptr @String, ptr %97, align 8
  store ptr %96, ptr %98, align 8
  store i32 9, ptr %99, align 4
  %100 = call ptr @llvm.invariant.start.p0(i64 16, ptr %97)
  %101 = getelementptr { ptr }, ptr %83, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr } undef, ptr %102, 0
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = alloca [3 x ptr], align 8
  %117 = getelementptr [3 x ptr], ptr %116, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %117, align 8
  %118 = getelementptr [3 x ptr], ptr %116, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %118, align 8
  %119 = getelementptr [3 x ptr], ptr %116, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %119, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 9, ptr %116)
  %121 = call ptr @llvm.invariant.start.p0(i64 280, ptr %105)
  %122 = getelementptr ptr, ptr %105, i32 %114
  %123 = getelementptr ptr, ptr %122, i32 4
  %124 = load ptr, ptr %123, align 8
  %125 = alloca { ptr, ptr, ptr }, align 8
  %126 = getelementptr { ptr, ptr, ptr }, ptr %125, i32 0, i32 0
  store ptr @buffer_typ, ptr %126, align 8
  %127 = getelementptr { ptr, ptr, ptr }, ptr %125, i32 0, i32 1
  store ptr @i32_typ, ptr %127, align 8
  %128 = getelementptr { ptr, ptr, ptr }, ptr %125, i32 0, i32 2
  store ptr @i32_typ, ptr %128, align 8
  %129 = call ptr @behavior_wrapper(ptr %124, { ptr, ptr, ptr, i32 } %115, ptr %125)
  call void %129({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %116, { ptr } %103, i32 0, i32 1)
  %130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %133 = load ptr, ptr %131, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %139 = load ptr, ptr %137, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %142 = load i32, ptr %140, align 4
  store i32 %142, ptr %141, align 4
  call void @set_offset(ptr %130, ptr @String)
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = load ptr, ptr %7, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 104, ptr %145)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %148 = load i32, ptr %147, align 4
  %149 = getelementptr ptr, ptr %145, i32 %148
  %150 = getelementptr ptr, ptr %149, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = getelementptr { ptr, ptr }, ptr %151, i32 0, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %158, 1
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %161, 2
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, i32 %164, 3
  call void %153(ptr %144, { ptr, ptr, ptr, i32 } %165) #15
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  call void %28(ptr %20, i32 0) #15
  %29 = alloca ptr, align 8
  %30 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 7))
  store ptr %30, ptr %29, align 8
  %31 = alloca { ptr }, align 8
  %32 = getelementptr { ptr }, ptr %29, i32 0, i32 0
  %33 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  %36 = load ptr, ptr %31, align 8
  %37 = load [6 x i8], ptr @tuoot_None, align 1
  store [6 x i8] %37, ptr %36, align 1
  %38 = alloca [1 x ptr], align 8
  store ptr @String, ptr %38, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr ptr, ptr %39, i32 6
  %41 = load ptr, ptr %40, align 8
  %42 = call { i64, i64 } @size_wrapper(ptr %41, ptr %38)
  %43 = extractvalue { i64, i64 } %42, 0
  %44 = call ptr @bump_malloc(i64 %43)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  store ptr @String, ptr %45, align 8
  store ptr %44, ptr %46, align 8
  store i32 9, ptr %47, align 4
  %48 = call ptr @llvm.invariant.start.p0(i64 16, ptr %45)
  %49 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr } undef, ptr %50, 0
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %56, 1
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 2
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %62, 3
  %64 = alloca [3 x ptr], align 8
  %65 = getelementptr [3 x ptr], ptr %64, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %65, align 8
  %66 = getelementptr [3 x ptr], ptr %64, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %66, align 8
  %67 = getelementptr [3 x ptr], ptr %64, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 9, ptr %64)
  %69 = call ptr @llvm.invariant.start.p0(i64 280, ptr %53)
  %70 = getelementptr ptr, ptr %53, i32 %62
  %71 = getelementptr ptr, ptr %70, i32 4
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr, ptr, ptr }, align 8
  %74 = getelementptr { ptr, ptr, ptr }, ptr %73, i32 0, i32 0
  store ptr @buffer_typ, ptr %74, align 8
  %75 = getelementptr { ptr, ptr, ptr }, ptr %73, i32 0, i32 1
  store ptr @i32_typ, ptr %75, align 8
  %76 = getelementptr { ptr, ptr, ptr }, ptr %73, i32 0, i32 2
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %63, ptr %73)
  call void %77({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr %64, { ptr } %51, i32 6, i32 7)
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %90 = load i32, ptr %88, align 4
  store i32 %90, ptr %89, align 4
  call void @set_offset(ptr %78, ptr @String)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %6, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 104, ptr %93)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = getelementptr ptr, ptr %93, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %112, 3
  call void %101(ptr %92, { ptr, ptr, ptr, i32 } %113) #15
  %114 = alloca ptr, align 8
  %115 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %115, ptr %114, align 8
  %116 = alloca { ptr }, align 8
  %117 = getelementptr { ptr }, ptr %114, i32 0, i32 0
  %118 = getelementptr { ptr }, ptr %116, i32 0, i32 0
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 16, ptr %116)
  %121 = load ptr, ptr %116, align 8
  %122 = load [0 x i8], ptr @scxxp_, align 1
  store [0 x i8] %122, ptr %121, align 1
  %123 = alloca [1 x ptr], align 8
  store ptr @String, ptr %123, align 8
  %124 = load ptr, ptr %123, align 8
  %125 = getelementptr ptr, ptr %124, i32 6
  %126 = load ptr, ptr %125, align 8
  %127 = call { i64, i64 } @size_wrapper(ptr %126, ptr %123)
  %128 = extractvalue { i64, i64 } %127, 0
  %129 = call ptr @bump_malloc(i64 %128)
  %130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  store ptr @String, ptr %130, align 8
  store ptr %129, ptr %131, align 8
  store i32 9, ptr %132, align 4
  %133 = call ptr @llvm.invariant.start.p0(i64 16, ptr %130)
  %134 = getelementptr { ptr }, ptr %116, i32 0, i32 0
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr } undef, ptr %135, 0
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %141, 1
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 2
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %147 = load i32, ptr %146, align 4
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 %147, 3
  %149 = alloca [3 x ptr], align 8
  %150 = getelementptr [3 x ptr], ptr %149, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %150, align 8
  %151 = getelementptr [3 x ptr], ptr %149, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %152 = getelementptr [3 x ptr], ptr %149, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %152, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 9, ptr %149)
  %154 = call ptr @llvm.invariant.start.p0(i64 280, ptr %138)
  %155 = getelementptr ptr, ptr %138, i32 %147
  %156 = getelementptr ptr, ptr %155, i32 4
  %157 = load ptr, ptr %156, align 8
  %158 = alloca { ptr, ptr, ptr }, align 8
  %159 = getelementptr { ptr, ptr, ptr }, ptr %158, i32 0, i32 0
  store ptr @buffer_typ, ptr %159, align 8
  %160 = getelementptr { ptr, ptr, ptr }, ptr %158, i32 0, i32 1
  store ptr @i32_typ, ptr %160, align 8
  %161 = getelementptr { ptr, ptr, ptr }, ptr %158, i32 0, i32 2
  store ptr @i32_typ, ptr %161, align 8
  %162 = call ptr @behavior_wrapper(ptr %157, { ptr, ptr, ptr, i32 } %148, ptr %158)
  call void %162({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr %149, { ptr } %136, i32 0, i32 1)
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %163, ptr @String)
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = load ptr, ptr %6, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 104, ptr %178)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %181 = load i32, ptr %180, align 4
  %182 = getelementptr ptr, ptr %178, i32 %181
  %183 = getelementptr ptr, ptr %182, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = getelementptr { ptr, ptr }, ptr %184, i32 0, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %194, 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %197, 3
  call void %186(ptr %177, { ptr, ptr, ptr, i32 } %198) #15
  ret void
}

define void @Exception_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Exception)
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %22, i32 %3) #15
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = load i32, ptr %43, align 4
  store i32 %45, ptr %44, align 4
  call void @set_offset(ptr %33, ptr @String)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @String)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %8, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 104, ptr %61)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = getelementptr ptr, ptr %61, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %80, 3
  call void %69(ptr %60, { ptr, ptr, ptr, i32 } %81) #15
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 10))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = load [9 x i8], ptr @wrhgg_, align 1
  store [9 x i8] %27, ptr %26, align 1
  %28 = alloca [1 x ptr], align 8
  store ptr @String, ptr %28, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 6
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %28)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr @String, ptr %35, align 8
  store ptr %34, ptr %36, align 8
  store i32 9, ptr %37, align 4
  %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %39 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %52, 3
  %54 = alloca [3 x ptr], align 8
  %55 = getelementptr [3 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %55, align 8
  %56 = getelementptr [3 x ptr], ptr %54, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %57 = getelementptr [3 x ptr], ptr %54, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 9, ptr %54)
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %60 = getelementptr ptr, ptr %43, i32 %52
  %61 = getelementptr ptr, ptr %60, i32 4
  %62 = load ptr, ptr %61, align 8
  %63 = alloca { ptr, ptr, ptr }, align 8
  %64 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 0
  store ptr @buffer_typ, ptr %64, align 8
  %65 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 1
  store ptr @i32_typ, ptr %65, align 8
  %66 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 2
  store ptr @i32_typ, ptr %66, align 8
  %67 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %53, ptr %63)
  call void %67({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr } %41, i32 9, i32 10)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %69, 0
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 1
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %75, 2
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %78, 3
  %80 = alloca [0 x ptr], align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 0, ptr %80)
  %82 = call ptr @llvm.invariant.start.p0(i64 280, ptr %69)
  %83 = getelementptr ptr, ptr %69, i32 %78
  %84 = getelementptr ptr, ptr %83, i32 14
  %85 = load ptr, ptr %84, align 8
  %86 = alloca {}, align 8
  %87 = call ptr @behavior_wrapper(ptr %85, { ptr, ptr, ptr, i32 } %79, ptr %86)
  %88 = call { ptr } %87({ ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %79, ptr %80)
  %89 = alloca ptr, align 8
  store { ptr } %88, ptr %89, align 8
  %90 = load ptr, ptr %89, align 8
  %91 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %90)
  %92 = alloca ptr, align 8
  %93 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 27))
  store ptr %93, ptr %92, align 8
  %94 = alloca { ptr }, align 8
  %95 = getelementptr { ptr }, ptr %92, i32 0, i32 0
  %96 = getelementptr { ptr }, ptr %94, i32 0, i32 0
  %97 = load ptr, ptr %95, align 8
  store ptr %97, ptr %96, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 16, ptr %94)
  %99 = load ptr, ptr %94, align 8
  %100 = load [26 x i8], ptr @thyzv_Exception_thrown_from_file, align 1
  store [26 x i8] %100, ptr %99, align 1
  %101 = alloca [1 x ptr], align 8
  store ptr @String, ptr %101, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr ptr, ptr %102, i32 6
  %104 = load ptr, ptr %103, align 8
  %105 = call { i64, i64 } @size_wrapper(ptr %104, ptr %101)
  %106 = extractvalue { i64, i64 } %105, 0
  %107 = call ptr @bump_malloc(i64 %106)
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  store ptr @String, ptr %108, align 8
  store ptr %107, ptr %109, align 8
  store i32 9, ptr %110, align 4
  %111 = call ptr @llvm.invariant.start.p0(i64 16, ptr %108)
  %112 = getelementptr { ptr }, ptr %94, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr } undef, ptr %113, 0
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %119, 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %122, 2
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %125 = load i32, ptr %124, align 4
  %126 = insertvalue { ptr, ptr, ptr, i32 } %123, i32 %125, 3
  %127 = alloca [3 x ptr], align 8
  %128 = getelementptr [3 x ptr], ptr %127, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %128, align 8
  %129 = getelementptr [3 x ptr], ptr %127, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %129, align 8
  %130 = getelementptr [3 x ptr], ptr %127, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %130, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 9, ptr %127)
  %132 = call ptr @llvm.invariant.start.p0(i64 280, ptr %116)
  %133 = getelementptr ptr, ptr %116, i32 %125
  %134 = getelementptr ptr, ptr %133, i32 4
  %135 = load ptr, ptr %134, align 8
  %136 = alloca { ptr, ptr, ptr }, align 8
  %137 = getelementptr { ptr, ptr, ptr }, ptr %136, i32 0, i32 0
  store ptr @buffer_typ, ptr %137, align 8
  %138 = getelementptr { ptr, ptr, ptr }, ptr %136, i32 0, i32 1
  store ptr @i32_typ, ptr %138, align 8
  %139 = getelementptr { ptr, ptr, ptr }, ptr %136, i32 0, i32 2
  store ptr @i32_typ, ptr %139, align 8
  %140 = call ptr @behavior_wrapper(ptr %135, { ptr, ptr, ptr, i32 } %126, ptr %136)
  call void %140({ ptr, ptr, ptr, i32 } %126, { ptr, ptr, ptr, i32 } %126, ptr %127, { ptr } %114, i32 26, i32 27)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %145, 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %148, 2
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %151 = load i32, ptr %150, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %151, 3
  %153 = alloca [0 x ptr], align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 0, ptr %153)
  %155 = call ptr @llvm.invariant.start.p0(i64 280, ptr %142)
  %156 = getelementptr ptr, ptr %142, i32 %151
  %157 = getelementptr ptr, ptr %156, i32 14
  %158 = load ptr, ptr %157, align 8
  %159 = alloca {}, align 8
  %160 = call ptr @behavior_wrapper(ptr %158, { ptr, ptr, ptr, i32 } %152, ptr %159)
  %161 = call { ptr } %160({ ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %152, ptr %153)
  %162 = alloca ptr, align 8
  store { ptr } %161, ptr %162, align 8
  %163 = load ptr, ptr %162, align 8
  %164 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %163)
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %166 = load ptr, ptr %165, align 8
  %167 = load ptr, ptr %6, align 8
  %168 = call ptr @llvm.invariant.start.p0(i64 104, ptr %167)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %170 = load i32, ptr %169, align 4
  %171 = getelementptr ptr, ptr %167, i32 %170
  %172 = getelementptr ptr, ptr %171, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = getelementptr { ptr, ptr }, ptr %173, i32 0, i32 0
  %175 = load ptr, ptr %174, align 8
  %176 = call { ptr, ptr, ptr, i32 } %175(ptr %166) #16
  %177 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %176, ptr %177, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 16, ptr %177)
  call void @assume_offset(ptr %177, ptr @String)
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %180, 0
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 1
  %183 = load ptr, ptr %182, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %183, 1
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 2
  %186 = load ptr, ptr %185, align 8
  %187 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %186, 2
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 3
  %189 = load i32, ptr %188, align 4
  %190 = insertvalue { ptr, ptr, ptr, i32 } %187, i32 %189, 3
  %191 = alloca [0 x ptr], align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 0, ptr %191)
  %193 = call ptr @llvm.invariant.start.p0(i64 280, ptr %180)
  %194 = getelementptr ptr, ptr %180, i32 %189
  %195 = getelementptr ptr, ptr %194, i32 14
  %196 = load ptr, ptr %195, align 8
  %197 = alloca {}, align 8
  %198 = call ptr @behavior_wrapper(ptr %196, { ptr, ptr, ptr, i32 } %190, ptr %197)
  %199 = call { ptr } %198({ ptr, ptr, ptr, i32 } %190, { ptr, ptr, ptr, i32 } %190, ptr %191)
  %200 = alloca ptr, align 8
  store { ptr } %199, ptr %200, align 8
  %201 = load ptr, ptr %200, align 8
  %202 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %201)
  %203 = alloca ptr, align 8
  %204 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 8))
  store ptr %204, ptr %203, align 8
  %205 = alloca { ptr }, align 8
  %206 = getelementptr { ptr }, ptr %203, i32 0, i32 0
  %207 = getelementptr { ptr }, ptr %205, i32 0, i32 0
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = call ptr @llvm.invariant.start.p0(i64 16, ptr %205)
  %210 = load ptr, ptr %205, align 8
  %211 = load [7 x i8], ptr @viajg_At_line, align 1
  store [7 x i8] %211, ptr %210, align 1
  %212 = alloca [1 x ptr], align 8
  store ptr @String, ptr %212, align 8
  %213 = load ptr, ptr %212, align 8
  %214 = getelementptr ptr, ptr %213, i32 6
  %215 = load ptr, ptr %214, align 8
  %216 = call { i64, i64 } @size_wrapper(ptr %215, ptr %212)
  %217 = extractvalue { i64, i64 } %216, 0
  %218 = call ptr @bump_malloc(i64 %217)
  %219 = alloca { ptr, ptr, ptr, i32 }, align 8
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  store ptr @String, ptr %219, align 8
  store ptr %218, ptr %220, align 8
  store i32 9, ptr %221, align 4
  %222 = call ptr @llvm.invariant.start.p0(i64 16, ptr %219)
  %223 = getelementptr { ptr }, ptr %205, i32 0, i32 0
  %224 = load ptr, ptr %223, align 8
  %225 = insertvalue { ptr } undef, ptr %224, 0
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 0
  %227 = load ptr, ptr %226, align 8
  %228 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %227, 0
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %230 = load ptr, ptr %229, align 8
  %231 = insertvalue { ptr, ptr, ptr, i32 } %228, ptr %230, 1
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 2
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } %231, ptr %233, 2
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  %236 = load i32, ptr %235, align 4
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, i32 %236, 3
  %238 = alloca [3 x ptr], align 8
  %239 = getelementptr [3 x ptr], ptr %238, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %239, align 8
  %240 = getelementptr [3 x ptr], ptr %238, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %240, align 8
  %241 = getelementptr [3 x ptr], ptr %238, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %241, align 8
  %242 = call ptr @llvm.invariant.start.p0(i64 9, ptr %238)
  %243 = call ptr @llvm.invariant.start.p0(i64 280, ptr %227)
  %244 = getelementptr ptr, ptr %227, i32 %236
  %245 = getelementptr ptr, ptr %244, i32 4
  %246 = load ptr, ptr %245, align 8
  %247 = alloca { ptr, ptr, ptr }, align 8
  %248 = getelementptr { ptr, ptr, ptr }, ptr %247, i32 0, i32 0
  store ptr @buffer_typ, ptr %248, align 8
  %249 = getelementptr { ptr, ptr, ptr }, ptr %247, i32 0, i32 1
  store ptr @i32_typ, ptr %249, align 8
  %250 = getelementptr { ptr, ptr, ptr }, ptr %247, i32 0, i32 2
  store ptr @i32_typ, ptr %250, align 8
  %251 = call ptr @behavior_wrapper(ptr %246, { ptr, ptr, ptr, i32 } %237, ptr %247)
  call void %251({ ptr, ptr, ptr, i32 } %237, { ptr, ptr, ptr, i32 } %237, ptr %238, { ptr } %225, i32 7, i32 8)
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 0
  %253 = load ptr, ptr %252, align 8
  %254 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %253, 0
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %256 = load ptr, ptr %255, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } %254, ptr %256, 1
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 2
  %259 = load ptr, ptr %258, align 8
  %260 = insertvalue { ptr, ptr, ptr, i32 } %257, ptr %259, 2
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  %262 = load i32, ptr %261, align 4
  %263 = insertvalue { ptr, ptr, ptr, i32 } %260, i32 %262, 3
  %264 = alloca [0 x ptr], align 8
  %265 = call ptr @llvm.invariant.start.p0(i64 0, ptr %264)
  %266 = call ptr @llvm.invariant.start.p0(i64 280, ptr %253)
  %267 = getelementptr ptr, ptr %253, i32 %262
  %268 = getelementptr ptr, ptr %267, i32 14
  %269 = load ptr, ptr %268, align 8
  %270 = alloca {}, align 8
  %271 = call ptr @behavior_wrapper(ptr %269, { ptr, ptr, ptr, i32 } %263, ptr %270)
  %272 = call { ptr } %271({ ptr, ptr, ptr, i32 } %263, { ptr, ptr, ptr, i32 } %263, ptr %264)
  %273 = alloca ptr, align 8
  store { ptr } %272, ptr %273, align 8
  %274 = load ptr, ptr %273, align 8
  %275 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %274)
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %277 = load ptr, ptr %276, align 8
  %278 = load ptr, ptr %6, align 8
  %279 = call ptr @llvm.invariant.start.p0(i64 104, ptr %278)
  %280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %281 = load i32, ptr %280, align 4
  %282 = getelementptr ptr, ptr %278, i32 %281
  %283 = load ptr, ptr %282, align 8
  %284 = getelementptr { ptr, ptr }, ptr %283, i32 0, i32 0
  %285 = load ptr, ptr %284, align 8
  %286 = call i32 %285(ptr %277) #16
  %287 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %286)
  %288 = alloca ptr, align 8
  %289 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 13))
  store ptr %289, ptr %288, align 8
  %290 = alloca { ptr }, align 8
  %291 = getelementptr { ptr }, ptr %288, i32 0, i32 0
  %292 = getelementptr { ptr }, ptr %290, i32 0, i32 0
  %293 = load ptr, ptr %291, align 8
  store ptr %293, ptr %292, align 8
  %294 = call ptr @llvm.invariant.start.p0(i64 16, ptr %290)
  %295 = load ptr, ptr %290, align 8
  %296 = load [12 x i8], ptr @ulsun_With_message, align 1
  store [12 x i8] %296, ptr %295, align 1
  %297 = alloca [1 x ptr], align 8
  store ptr @String, ptr %297, align 8
  %298 = load ptr, ptr %297, align 8
  %299 = getelementptr ptr, ptr %298, i32 6
  %300 = load ptr, ptr %299, align 8
  %301 = call { i64, i64 } @size_wrapper(ptr %300, ptr %297)
  %302 = extractvalue { i64, i64 } %301, 0
  %303 = call ptr @bump_malloc(i64 %302)
  %304 = alloca { ptr, ptr, ptr, i32 }, align 8
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 1
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 3
  store ptr @String, ptr %304, align 8
  store ptr %303, ptr %305, align 8
  store i32 9, ptr %306, align 4
  %307 = call ptr @llvm.invariant.start.p0(i64 16, ptr %304)
  %308 = getelementptr { ptr }, ptr %290, i32 0, i32 0
  %309 = load ptr, ptr %308, align 8
  %310 = insertvalue { ptr } undef, ptr %309, 0
  %311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 0
  %312 = load ptr, ptr %311, align 8
  %313 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %312, 0
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 1
  %315 = load ptr, ptr %314, align 8
  %316 = insertvalue { ptr, ptr, ptr, i32 } %313, ptr %315, 1
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 2
  %318 = load ptr, ptr %317, align 8
  %319 = insertvalue { ptr, ptr, ptr, i32 } %316, ptr %318, 2
  %320 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 3
  %321 = load i32, ptr %320, align 4
  %322 = insertvalue { ptr, ptr, ptr, i32 } %319, i32 %321, 3
  %323 = alloca [3 x ptr], align 8
  %324 = getelementptr [3 x ptr], ptr %323, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %324, align 8
  %325 = getelementptr [3 x ptr], ptr %323, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %325, align 8
  %326 = getelementptr [3 x ptr], ptr %323, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %326, align 8
  %327 = call ptr @llvm.invariant.start.p0(i64 9, ptr %323)
  %328 = call ptr @llvm.invariant.start.p0(i64 280, ptr %312)
  %329 = getelementptr ptr, ptr %312, i32 %321
  %330 = getelementptr ptr, ptr %329, i32 4
  %331 = load ptr, ptr %330, align 8
  %332 = alloca { ptr, ptr, ptr }, align 8
  %333 = getelementptr { ptr, ptr, ptr }, ptr %332, i32 0, i32 0
  store ptr @buffer_typ, ptr %333, align 8
  %334 = getelementptr { ptr, ptr, ptr }, ptr %332, i32 0, i32 1
  store ptr @i32_typ, ptr %334, align 8
  %335 = getelementptr { ptr, ptr, ptr }, ptr %332, i32 0, i32 2
  store ptr @i32_typ, ptr %335, align 8
  %336 = call ptr @behavior_wrapper(ptr %331, { ptr, ptr, ptr, i32 } %322, ptr %332)
  call void %336({ ptr, ptr, ptr, i32 } %322, { ptr, ptr, ptr, i32 } %322, ptr %323, { ptr } %310, i32 12, i32 13)
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 0
  %338 = load ptr, ptr %337, align 8
  %339 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %338, 0
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 1
  %341 = load ptr, ptr %340, align 8
  %342 = insertvalue { ptr, ptr, ptr, i32 } %339, ptr %341, 1
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 2
  %344 = load ptr, ptr %343, align 8
  %345 = insertvalue { ptr, ptr, ptr, i32 } %342, ptr %344, 2
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 3
  %347 = load i32, ptr %346, align 4
  %348 = insertvalue { ptr, ptr, ptr, i32 } %345, i32 %347, 3
  %349 = alloca [0 x ptr], align 8
  %350 = call ptr @llvm.invariant.start.p0(i64 0, ptr %349)
  %351 = call ptr @llvm.invariant.start.p0(i64 280, ptr %338)
  %352 = getelementptr ptr, ptr %338, i32 %347
  %353 = getelementptr ptr, ptr %352, i32 14
  %354 = load ptr, ptr %353, align 8
  %355 = alloca {}, align 8
  %356 = call ptr @behavior_wrapper(ptr %354, { ptr, ptr, ptr, i32 } %348, ptr %355)
  %357 = call { ptr } %356({ ptr, ptr, ptr, i32 } %348, { ptr, ptr, ptr, i32 } %348, ptr %349)
  %358 = alloca ptr, align 8
  store { ptr } %357, ptr %358, align 8
  %359 = load ptr, ptr %358, align 8
  %360 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %359)
  %361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %362 = load ptr, ptr %361, align 8
  %363 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %362, 0
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %365 = load ptr, ptr %364, align 8
  %366 = insertvalue { ptr, ptr, ptr, i32 } %363, ptr %365, 1
  %367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %368 = load ptr, ptr %367, align 8
  %369 = insertvalue { ptr, ptr, ptr, i32 } %366, ptr %368, 2
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %371 = load i32, ptr %370, align 4
  %372 = insertvalue { ptr, ptr, ptr, i32 } %369, i32 %371, 3
  %373 = alloca [0 x ptr], align 8
  %374 = call ptr @llvm.invariant.start.p0(i64 0, ptr %373)
  %375 = call ptr @llvm.invariant.start.p0(i64 104, ptr %362)
  %376 = getelementptr ptr, ptr %362, i32 %371
  %377 = getelementptr ptr, ptr %376, i32 7
  %378 = load ptr, ptr %377, align 8
  %379 = alloca {}, align 8
  %380 = call ptr @behavior_wrapper(ptr %378, { ptr, ptr, ptr, i32 } %372, ptr %379)
  call void %380({ ptr, ptr, ptr, i32 } %372, { ptr, ptr, ptr, i32 } %372, ptr %373)
  %381 = alloca ptr, align 8
  %382 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 10))
  store ptr %382, ptr %381, align 8
  %383 = alloca { ptr }, align 8
  %384 = getelementptr { ptr }, ptr %381, i32 0, i32 0
  %385 = getelementptr { ptr }, ptr %383, i32 0, i32 0
  %386 = load ptr, ptr %384, align 8
  store ptr %386, ptr %385, align 8
  %387 = call ptr @llvm.invariant.start.p0(i64 16, ptr %383)
  %388 = load ptr, ptr %383, align 8
  %389 = load [9 x i8], ptr @bvaeg_, align 1
  store [9 x i8] %389, ptr %388, align 1
  %390 = alloca [1 x ptr], align 8
  store ptr @String, ptr %390, align 8
  %391 = load ptr, ptr %390, align 8
  %392 = getelementptr ptr, ptr %391, i32 6
  %393 = load ptr, ptr %392, align 8
  %394 = call { i64, i64 } @size_wrapper(ptr %393, ptr %390)
  %395 = extractvalue { i64, i64 } %394, 0
  %396 = call ptr @bump_malloc(i64 %395)
  %397 = alloca { ptr, ptr, ptr, i32 }, align 8
  %398 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 1
  %399 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 3
  store ptr @String, ptr %397, align 8
  store ptr %396, ptr %398, align 8
  store i32 9, ptr %399, align 4
  %400 = call ptr @llvm.invariant.start.p0(i64 16, ptr %397)
  %401 = getelementptr { ptr }, ptr %383, i32 0, i32 0
  %402 = load ptr, ptr %401, align 8
  %403 = insertvalue { ptr } undef, ptr %402, 0
  %404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 0
  %405 = load ptr, ptr %404, align 8
  %406 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %405, 0
  %407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 1
  %408 = load ptr, ptr %407, align 8
  %409 = insertvalue { ptr, ptr, ptr, i32 } %406, ptr %408, 1
  %410 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 2
  %411 = load ptr, ptr %410, align 8
  %412 = insertvalue { ptr, ptr, ptr, i32 } %409, ptr %411, 2
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 3
  %414 = load i32, ptr %413, align 4
  %415 = insertvalue { ptr, ptr, ptr, i32 } %412, i32 %414, 3
  %416 = alloca [3 x ptr], align 8
  %417 = getelementptr [3 x ptr], ptr %416, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %417, align 8
  %418 = getelementptr [3 x ptr], ptr %416, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %418, align 8
  %419 = getelementptr [3 x ptr], ptr %416, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %419, align 8
  %420 = call ptr @llvm.invariant.start.p0(i64 9, ptr %416)
  %421 = call ptr @llvm.invariant.start.p0(i64 280, ptr %405)
  %422 = getelementptr ptr, ptr %405, i32 %414
  %423 = getelementptr ptr, ptr %422, i32 4
  %424 = load ptr, ptr %423, align 8
  %425 = alloca { ptr, ptr, ptr }, align 8
  %426 = getelementptr { ptr, ptr, ptr }, ptr %425, i32 0, i32 0
  store ptr @buffer_typ, ptr %426, align 8
  %427 = getelementptr { ptr, ptr, ptr }, ptr %425, i32 0, i32 1
  store ptr @i32_typ, ptr %427, align 8
  %428 = getelementptr { ptr, ptr, ptr }, ptr %425, i32 0, i32 2
  store ptr @i32_typ, ptr %428, align 8
  %429 = call ptr @behavior_wrapper(ptr %424, { ptr, ptr, ptr, i32 } %415, ptr %425)
  call void %429({ ptr, ptr, ptr, i32 } %415, { ptr, ptr, ptr, i32 } %415, ptr %416, { ptr } %403, i32 9, i32 10)
  %430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 0
  %431 = load ptr, ptr %430, align 8
  %432 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %431, 0
  %433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 1
  %434 = load ptr, ptr %433, align 8
  %435 = insertvalue { ptr, ptr, ptr, i32 } %432, ptr %434, 1
  %436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 2
  %437 = load ptr, ptr %436, align 8
  %438 = insertvalue { ptr, ptr, ptr, i32 } %435, ptr %437, 2
  %439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 3
  %440 = load i32, ptr %439, align 4
  %441 = insertvalue { ptr, ptr, ptr, i32 } %438, i32 %440, 3
  %442 = alloca [0 x ptr], align 8
  %443 = call ptr @llvm.invariant.start.p0(i64 0, ptr %442)
  %444 = call ptr @llvm.invariant.start.p0(i64 280, ptr %431)
  %445 = getelementptr ptr, ptr %431, i32 %440
  %446 = getelementptr ptr, ptr %445, i32 14
  %447 = load ptr, ptr %446, align 8
  %448 = alloca {}, align 8
  %449 = call ptr @behavior_wrapper(ptr %447, { ptr, ptr, ptr, i32 } %441, ptr %448)
  %450 = call { ptr } %449({ ptr, ptr, ptr, i32 } %441, { ptr, ptr, ptr, i32 } %441, ptr %442)
  %451 = alloca ptr, align 8
  store { ptr } %450, ptr %451, align 8
  %452 = load ptr, ptr %451, align 8
  %453 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %452)
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @String)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = alloca [0 x ptr], align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr %45)
  %47 = call ptr @llvm.invariant.start.p0(i64 280, ptr %34)
  %48 = getelementptr ptr, ptr %34, i32 %43
  %49 = getelementptr ptr, ptr %48, i32 14
  %50 = load ptr, ptr %49, align 8
  %51 = alloca {}, align 8
  %52 = call ptr @behavior_wrapper(ptr %50, { ptr, ptr, ptr, i32 } %44, ptr %51)
  %53 = call { ptr } %52({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %45)
  %54 = alloca ptr, align 8
  store { ptr } %53, ptr %54, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %55)
  ret void
}

declare i32 @printf(ptr, ...)

define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @Exception_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @Exception_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define i32 @Exception_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Exception_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i32 %1, ptr %3, align 4
  ret void
}

define ptr @Iterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @report_exception({ ptr } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr } %0, ptr %5, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %6, i32 0, i32 4
  %8 = load { ptr, i160 }, ptr %7, align 8
  %9 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %8, ptr %9, align 8
  %10 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @nil_typ to i64)
  %14 = icmp eq i64 %12, 0
  %15 = or i1 %13, %14
  %16 = icmp eq i1 %15, false
  br i1 %16, label %17, label %._crit_edge

._crit_edge:                                      ; preds = %1
  br label %48

17:                                               ; preds = %1
  %18 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %19 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %22 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %23 = load i160, ptr %21, align 4
  store i160 %23, ptr %22, align 4
  call void @set_offset(ptr %2, ptr @Exception)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %25, 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %31, 2
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %34, 3
  %36 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %37 = call ptr @llvm.invariant.start.p0(i64 104, ptr %25)
  %38 = getelementptr ptr, ptr %25, i32 %34
  %39 = getelementptr ptr, ptr %38, i32 6
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @behavior_wrapper(ptr %40, { ptr, ptr, ptr, i32 } %35, ptr %4)
  call void %41({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr %3)
  %42 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %43 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %46 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %47 = load i160, ptr %45, align 4
  store i160 %47, ptr %46, align 4
  br label %48

48:                                               ; preds = %._crit_edge, %17
  ret void
}

define { i64, i64 } @_size_IO(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @IO_B__Self_print_xString__Self_print_xPtrf64__Self_print_xPtri32__Self_print_xPtri8__Self_print_xNil__Self_print_xRepresentable__Self_print_xPtri64__Self_print_xPtri1__Self_print_xCharacter(ptr %0) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca i32, align 4
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i32, align 4
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem37 = alloca i32, align 4
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -7260840641129990118, i64 ptrtoint (ptr @Representable to i64), ptr %12)
  br i1 %13, label %14, label %43

14:                                               ; preds = %1
  %15 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %24)
  br i1 %25, label %26, label %27

26:                                               ; preds = %14
  store i32 0, ptr %.reg2mem41, align 4
  br label %41

27:                                               ; preds = %14
  %28 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 1
  %31 = getelementptr ptr, ptr %29, i32 2
  %32 = getelementptr ptr, ptr %29, i32 3
  %33 = getelementptr ptr, ptr %29, i32 4
  %34 = load i64, ptr %30, align 4
  %35 = load i64, ptr %31, align 4
  %36 = load ptr, ptr %32, align 8
  %37 = load ptr, ptr %33, align 8
  %38 = call i1 @subtype_test_wrapper(ptr %36, i64 %35, i64 %34, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %37)
  %39 = xor i1 %38, true
  %40 = zext i1 %39 to i32
  store i32 %40, ptr %.reg2mem21, align 4
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  store i32 %.reload22, ptr %.reg2mem41, align 4
  br label %41

41:                                               ; preds = %27, %26
  %.reload42 = load i32, ptr %.reg2mem41, align 4
  store i32 %.reload42, ptr %.reg2mem19, align 4
  br label %42

42:                                               ; preds = %41
  %.reload20 = load i32, ptr %.reg2mem19, align 4
  store i32 %.reload20, ptr %.reg2mem39, align 4
  br label %44

43:                                               ; preds = %1
  store i32 0, ptr %.reg2mem39, align 4
  br label %44

44:                                               ; preds = %43, %42
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store i32 %.reload40, ptr %.reg2mem17, align 4
  br label %45

45:                                               ; preds = %44
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  %46 = zext i32 %.reload18 to i64
  %47 = trunc i64 %46 to i32
  switch i32 %47, label %189 [
    i32 0, label %48
  ]

48:                                               ; preds = %45
  %49 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = ptrtoint ptr %50 to i64
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %48
  store i32 5, ptr %.reg2mem25, align 4
  br label %187

54:                                               ; preds = %48
  %55 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr ptr, ptr %56, i32 1
  %58 = getelementptr ptr, ptr %56, i32 2
  %59 = getelementptr ptr, ptr %56, i32 3
  %60 = getelementptr ptr, ptr %56, i32 4
  %61 = load i64, ptr %57, align 4
  %62 = load i64, ptr %58, align 4
  %63 = load ptr, ptr %59, align 8
  %64 = load ptr, ptr %60, align 8
  %65 = call i1 @subtype_test_wrapper(ptr %63, i64 %62, i64 %61, i64 5801531371504802705, i64 ptrtoint (ptr @bool_typ to i64), ptr %64)
  br i1 %65, label %66, label %67

66:                                               ; preds = %54
  store i32 8, ptr %.reg2mem27, align 4
  br label %185

67:                                               ; preds = %54
  %68 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = getelementptr ptr, ptr %69, i32 2
  %72 = getelementptr ptr, ptr %69, i32 3
  %73 = getelementptr ptr, ptr %69, i32 4
  %74 = load i64, ptr %70, align 4
  %75 = load i64, ptr %71, align 4
  %76 = load ptr, ptr %72, align 8
  %77 = load ptr, ptr %73, align 8
  %78 = call i1 @subtype_test_wrapper(ptr %76, i64 %75, i64 %74, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %77)
  br i1 %78, label %79, label %80

79:                                               ; preds = %67
  store i32 2, ptr %.reg2mem29, align 4
  br label %183

80:                                               ; preds = %67
  %81 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr ptr, ptr %82, i32 1
  %84 = getelementptr ptr, ptr %82, i32 2
  %85 = getelementptr ptr, ptr %82, i32 3
  %86 = getelementptr ptr, ptr %82, i32 4
  %87 = load i64, ptr %83, align 4
  %88 = load i64, ptr %84, align 4
  %89 = load ptr, ptr %85, align 8
  %90 = load ptr, ptr %86, align 8
  %91 = call i1 @subtype_test_wrapper(ptr %89, i64 %88, i64 %87, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %90)
  br i1 %91, label %92, label %93

92:                                               ; preds = %80
  store i32 3, ptr %.reg2mem31, align 4
  br label %181

93:                                               ; preds = %80
  %94 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = getelementptr ptr, ptr %95, i32 1
  %97 = getelementptr ptr, ptr %95, i32 2
  %98 = getelementptr ptr, ptr %95, i32 3
  %99 = getelementptr ptr, ptr %95, i32 4
  %100 = load i64, ptr %96, align 4
  %101 = load i64, ptr %97, align 4
  %102 = load ptr, ptr %98, align 8
  %103 = load ptr, ptr %99, align 8
  %104 = call i1 @subtype_test_wrapper(ptr %102, i64 %101, i64 %100, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %103)
  br i1 %104, label %105, label %119

105:                                              ; preds = %93
  %106 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr ptr, ptr %107, i32 1
  %109 = getelementptr ptr, ptr %107, i32 2
  %110 = getelementptr ptr, ptr %107, i32 3
  %111 = getelementptr ptr, ptr %107, i32 4
  %112 = load i64, ptr %108, align 4
  %113 = load i64, ptr %109, align 4
  %114 = load ptr, ptr %110, align 8
  %115 = load ptr, ptr %111, align 8
  %116 = call i1 @subtype_test_wrapper(ptr %114, i64 %113, i64 %112, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %115)
  %117 = xor i1 %116, true
  %118 = zext i1 %117 to i32
  store i32 %118, ptr %.reg2mem15, align 4
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem37, align 4
  br label %120

119:                                              ; preds = %93
  store i32 0, ptr %.reg2mem37, align 4
  br label %120

120:                                              ; preds = %119, %105
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  store i32 %.reload38, ptr %.reg2mem13, align 4
  br label %121

121:                                              ; preds = %120
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  %122 = zext i32 %.reload14 to i64
  %123 = trunc i64 %122 to i32
  switch i32 %123, label %179 [
    i32 0, label %124
  ]

124:                                              ; preds = %121
  %125 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = getelementptr ptr, ptr %126, i32 1
  %128 = getelementptr ptr, ptr %126, i32 2
  %129 = getelementptr ptr, ptr %126, i32 3
  %130 = getelementptr ptr, ptr %126, i32 4
  %131 = load i64, ptr %127, align 4
  %132 = load i64, ptr %128, align 4
  %133 = load ptr, ptr %129, align 8
  %134 = load ptr, ptr %130, align 8
  %135 = call i1 @subtype_test_wrapper(ptr %133, i64 %132, i64 %131, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %134)
  br i1 %135, label %136, label %137

136:                                              ; preds = %124
  store i32 4, ptr %.reg2mem35, align 4
  br label %177

137:                                              ; preds = %124
  %138 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %139 = load ptr, ptr %138, align 8
  %140 = getelementptr ptr, ptr %139, i32 1
  %141 = getelementptr ptr, ptr %139, i32 2
  %142 = getelementptr ptr, ptr %139, i32 3
  %143 = getelementptr ptr, ptr %139, i32 4
  %144 = load i64, ptr %140, align 4
  %145 = load i64, ptr %141, align 4
  %146 = load ptr, ptr %142, align 8
  %147 = load ptr, ptr %143, align 8
  %148 = call i1 @subtype_test_wrapper(ptr %146, i64 %145, i64 %144, i64 -7469797244461771922, i64 ptrtoint (ptr @i64_typ to i64), ptr %147)
  %149 = select i1 %148, i32 7, i32 1
  store i32 %149, ptr %.reg2mem11, align 4
  br i1 %148, label %150, label %151

150:                                              ; preds = %137
  br label %176

151:                                              ; preds = %137
  %152 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %153 = load ptr, ptr %152, align 8
  %154 = getelementptr ptr, ptr %153, i32 1
  %155 = getelementptr ptr, ptr %153, i32 2
  %156 = getelementptr ptr, ptr %153, i32 3
  %157 = getelementptr ptr, ptr %153, i32 4
  %158 = load i64, ptr %154, align 4
  %159 = load i64, ptr %155, align 4
  %160 = load ptr, ptr %156, align 8
  %161 = load ptr, ptr %157, align 8
  %162 = call i1 @subtype_test_wrapper(ptr %160, i64 %159, i64 %158, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %161)
  br i1 %162, label %163, label %._crit_edge

._crit_edge:                                      ; preds = %151
  br label %175

163:                                              ; preds = %151
  %164 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = getelementptr ptr, ptr %165, i32 1
  %167 = getelementptr ptr, ptr %165, i32 2
  %168 = getelementptr ptr, ptr %165, i32 3
  %169 = getelementptr ptr, ptr %165, i32 4
  %170 = load i64, ptr %166, align 4
  %171 = load i64, ptr %167, align 4
  %172 = load ptr, ptr %168, align 8
  %173 = load ptr, ptr %169, align 8
  %174 = call i1 @subtype_test_wrapper(ptr %172, i64 %171, i64 %170, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %173)
  br label %175

175:                                              ; preds = %._crit_edge, %163
  br label %176

176:                                              ; preds = %175, %150
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem35, align 4
  br label %177

177:                                              ; preds = %176, %136
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload36, ptr %.reg2mem9, align 4
  br label %178

178:                                              ; preds = %177
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem33, align 4
  br label %180

179:                                              ; preds = %121
  store i32 9, ptr %.reg2mem33, align 4
  br label %180

180:                                              ; preds = %179, %178
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  store i32 %.reload34, ptr %.reg2mem7, align 4
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem31, align 4
  br label %181

181:                                              ; preds = %180, %92
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  store i32 %.reload32, ptr %.reg2mem5, align 4
  br label %182

182:                                              ; preds = %181
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem29, align 4
  br label %183

183:                                              ; preds = %182, %79
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  store i32 %.reload30, ptr %.reg2mem3, align 4
  br label %184

184:                                              ; preds = %183
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem27, align 4
  br label %185

185:                                              ; preds = %184, %66
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store i32 %.reload28, ptr %.reg2mem1, align 4
  br label %186

186:                                              ; preds = %185
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem25, align 4
  br label %187

187:                                              ; preds = %186, %53
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  store i32 %.reload26, ptr %.reg2mem, align 4
  br label %188

188:                                              ; preds = %187
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem23, align 4
  br label %190

189:                                              ; preds = %45
  store i32 6, ptr %.reg2mem23, align 4
  br label %190

190:                                              ; preds = %189, %188
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  %191 = zext i32 %.reload24 to i64
  %192 = or i64 0, %191
  %193 = inttoptr i64 %192 to ptr
  %194 = ptrtoint ptr %193 to i64
  %195 = trunc i64 %194 to i32
  %196 = getelementptr [10 x ptr], ptr @IO, i32 0, i32 %195
  %197 = getelementptr ptr, ptr %196, i32 9
  %198 = load ptr, ptr %197, align 8
  ret ptr %198
}

define void @IO__Self_print_xString(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @String)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 280, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = getelementptr ptr, ptr %26, i32 14
  %28 = load ptr, ptr %27, align 8
  %29 = alloca {}, align 8
  %30 = call ptr @behavior_wrapper(ptr %28, { ptr, ptr, ptr, i32 } %22, ptr %29)
  %31 = call { ptr } %30({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23)
  %32 = alloca ptr, align 8
  store { ptr } %31, ptr %32, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %33)
  ret void
}

define void @IO__Self_print_xPtrf64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load double, ptr %4, align 8
  %6 = call i32 (ptr, ...) @printf(ptr @float_string, double %5)
  ret void
}

define void @IO__Self_print_xPtri32(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %5)
  ret void
}

define void @IO__Self_print_xPtri8(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i8, ptr %4, align 1
  %6 = sext i8 %5 to i32
  %7 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %6)
  ret void
}

define void @IO__Self_print_xNil(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca ptr, align 8
  %5 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 4))
  store ptr %5, ptr %4, align 8
  %6 = alloca { ptr }, align 8
  %7 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %11 = load ptr, ptr %6, align 8
  %12 = load [3 x i8], ptr @lubhs_nil, align 1
  store [3 x i8] %12, ptr %11, align 1
  %13 = alloca [1 x ptr], align 8
  store ptr @String, ptr %13, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr ptr, ptr %14, i32 6
  %16 = load ptr, ptr %15, align 8
  %17 = call { i64, i64 } @size_wrapper(ptr %16, ptr %13)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = call ptr @bump_malloc(i64 %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr @String, ptr %20, align 8
  store ptr %19, ptr %21, align 8
  store i32 9, ptr %22, align 4
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %24 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr } undef, ptr %25, 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %31, 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %37, 3
  %39 = alloca [3 x ptr], align 8
  %40 = getelementptr [3 x ptr], ptr %39, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %40, align 8
  %41 = getelementptr [3 x ptr], ptr %39, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %41, align 8
  %42 = getelementptr [3 x ptr], ptr %39, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 9, ptr %39)
  %44 = call ptr @llvm.invariant.start.p0(i64 280, ptr %28)
  %45 = getelementptr ptr, ptr %28, i32 %37
  %46 = getelementptr ptr, ptr %45, i32 4
  %47 = load ptr, ptr %46, align 8
  %48 = alloca { ptr, ptr, ptr }, align 8
  %49 = getelementptr { ptr, ptr, ptr }, ptr %48, i32 0, i32 0
  store ptr @buffer_typ, ptr %49, align 8
  %50 = getelementptr { ptr, ptr, ptr }, ptr %48, i32 0, i32 1
  store ptr @i32_typ, ptr %50, align 8
  %51 = getelementptr { ptr, ptr, ptr }, ptr %48, i32 0, i32 2
  store ptr @i32_typ, ptr %51, align 8
  %52 = call ptr @behavior_wrapper(ptr %47, { ptr, ptr, ptr, i32 } %38, ptr %48)
  call void %52({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr %39, { ptr } %26, i32 3, i32 4)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = alloca [0 x ptr], align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr %65)
  %67 = call ptr @llvm.invariant.start.p0(i64 280, ptr %54)
  %68 = getelementptr ptr, ptr %54, i32 %63
  %69 = getelementptr ptr, ptr %68, i32 14
  %70 = load ptr, ptr %69, align 8
  %71 = alloca {}, align 8
  %72 = call ptr @behavior_wrapper(ptr %70, { ptr, ptr, ptr, i32 } %64, ptr %71)
  %73 = call { ptr } %72({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %65)
  %74 = alloca ptr, align 8
  store { ptr } %73, ptr %74, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %75)
  ret void
}

define void @IO__Self_print_xRepresentable(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Representable)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = load ptr, ptr %26, align 8
  %28 = alloca {}, align 8
  %29 = call ptr @behavior_wrapper(ptr %27, { ptr, ptr, ptr, i32 } %22, ptr %28)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = load i32, ptr %43, align 4
  store i32 %45, ptr %44, align 4
  call void @set_offset(ptr %33, ptr @String)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %53, 2
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %56, 3
  %58 = alloca [0 x ptr], align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 280, ptr %47)
  %61 = getelementptr ptr, ptr %47, i32 %56
  %62 = getelementptr ptr, ptr %61, i32 14
  %63 = load ptr, ptr %62, align 8
  %64 = alloca {}, align 8
  %65 = call ptr @behavior_wrapper(ptr %63, { ptr, ptr, ptr, i32 } %57, ptr %64)
  %66 = call { ptr } %65({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr %58)
  %67 = alloca ptr, align 8
  store { ptr } %66, ptr %67, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %68)
  ret void
}

define void @IO__Self_print_xPtri64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i64, ptr %4, align 4
  %6 = call i32 (ptr, ...) @printf(ptr @i64_string, i64 %5)
  ret void
}

define void @IO__Self_print_xPtri1(ptr %0, { ptr, i160 } %1) {
  %3 = alloca ptr, align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca { ptr }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca [3 x ptr], align 8
  %17 = alloca { ptr, ptr, ptr }, align 8
  %18 = alloca [0 x ptr], align 8
  %19 = alloca {}, align 8
  %20 = alloca ptr, align 8
  %21 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %23 = load i1, ptr %22, align 1
  br i1 %23, label %24, label %89

24:                                               ; preds = %2
  %25 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %25, ptr %3, align 8
  %26 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %27 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %30 = load ptr, ptr %4, align 8
  %31 = load [4 x i8], ptr @rztzt_true, align 1
  store [4 x i8] %31, ptr %30, align 1
  store ptr @String, ptr %5, align 8
  %32 = load ptr, ptr %5, align 8
  %33 = getelementptr ptr, ptr %32, i32 6
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr %5)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = call ptr @bump_malloc(i64 %36)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr @String, ptr %6, align 8
  store ptr %37, ptr %38, align 8
  store i32 9, ptr %39, align 4
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %41 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr } undef, ptr %42, 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = getelementptr [3 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %56, align 8
  %57 = getelementptr [3 x ptr], ptr %7, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = getelementptr [3 x ptr], ptr %7, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 9, ptr %7)
  %60 = call ptr @llvm.invariant.start.p0(i64 280, ptr %45)
  %61 = getelementptr ptr, ptr %45, i32 %54
  %62 = getelementptr ptr, ptr %61, i32 4
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 0
  store ptr @buffer_typ, ptr %64, align 8
  %65 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 1
  store ptr @i32_typ, ptr %65, align 8
  %66 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 2
  store ptr @i32_typ, ptr %66, align 8
  %67 = call ptr @behavior_wrapper(ptr %63, { ptr, ptr, ptr, i32 } %55, ptr %8)
  call void %67({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %7, { ptr } %43, i32 4, i32 5)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %69, 0
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 1
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %75, 2
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %78, 3
  %80 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %81 = call ptr @llvm.invariant.start.p0(i64 280, ptr %69)
  %82 = getelementptr ptr, ptr %69, i32 %78
  %83 = getelementptr ptr, ptr %82, i32 14
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr @behavior_wrapper(ptr %84, { ptr, ptr, ptr, i32 } %79, ptr %10)
  %86 = call { ptr } %85({ ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %79, ptr %9)
  store { ptr } %86, ptr %11, align 8
  %87 = load ptr, ptr %11, align 8
  %88 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %87)
  br label %154

89:                                               ; preds = %2
  %90 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 6))
  store ptr %90, ptr %12, align 8
  %91 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  %92 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %95 = load ptr, ptr %13, align 8
  %96 = load [5 x i8], ptr @lqphx_false, align 1
  store [5 x i8] %96, ptr %95, align 1
  store ptr @String, ptr %14, align 8
  %97 = load ptr, ptr %14, align 8
  %98 = getelementptr ptr, ptr %97, i32 6
  %99 = load ptr, ptr %98, align 8
  %100 = call { i64, i64 } @size_wrapper(ptr %99, ptr %14)
  %101 = extractvalue { i64, i64 } %100, 0
  %102 = call ptr @bump_malloc(i64 %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr @String, ptr %15, align 8
  store ptr %102, ptr %103, align 8
  store i32 9, ptr %104, align 4
  %105 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %106 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr } undef, ptr %107, 0
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %116, 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %119, 3
  %121 = getelementptr [3 x ptr], ptr %16, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %121, align 8
  %122 = getelementptr [3 x ptr], ptr %16, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %122, align 8
  %123 = getelementptr [3 x ptr], ptr %16, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 9, ptr %16)
  %125 = call ptr @llvm.invariant.start.p0(i64 280, ptr %110)
  %126 = getelementptr ptr, ptr %110, i32 %119
  %127 = getelementptr ptr, ptr %126, i32 4
  %128 = load ptr, ptr %127, align 8
  %129 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 0
  store ptr @buffer_typ, ptr %129, align 8
  %130 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 1
  store ptr @i32_typ, ptr %130, align 8
  %131 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 2
  store ptr @i32_typ, ptr %131, align 8
  %132 = call ptr @behavior_wrapper(ptr %128, { ptr, ptr, ptr, i32 } %120, ptr %17)
  call void %132({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr %16, { ptr } %108, i32 5, i32 6)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  %145 = call ptr @llvm.invariant.start.p0(i64 0, ptr %18)
  %146 = call ptr @llvm.invariant.start.p0(i64 280, ptr %134)
  %147 = getelementptr ptr, ptr %134, i32 %143
  %148 = getelementptr ptr, ptr %147, i32 14
  %149 = load ptr, ptr %148, align 8
  %150 = call ptr @behavior_wrapper(ptr %149, { ptr, ptr, ptr, i32 } %144, ptr %19)
  %151 = call { ptr } %150({ ptr, ptr, ptr, i32 } %144, { ptr, ptr, ptr, i32 } %144, ptr %18)
  store { ptr } %151, ptr %20, align 8
  %152 = load ptr, ptr %20, align 8
  %153 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %152)
  br label %154

154:                                              ; preds = %89, %24
  ret void
}

define void @IO__Self_print_xCharacter(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Character)
  %11 = alloca ptr, align 8
  %12 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 2))
  store ptr %12, ptr %11, align 8
  %13 = alloca { ptr }, align 8
  %14 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  %15 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %19, 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %22, 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %28, 3
  %30 = alloca [0 x ptr], align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 0, ptr %30)
  %32 = call ptr @llvm.invariant.start.p0(i64 40, ptr %19)
  %33 = getelementptr ptr, ptr %19, i32 %28
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = alloca {}, align 8
  %37 = call ptr @behavior_wrapper(ptr %35, { ptr, ptr, ptr, i32 } %29, ptr %36)
  %38 = call i8 %37({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr %30)
  %39 = load ptr, ptr %13, align 8
  store i8 %38, ptr %39, align 1
  %40 = load ptr, ptr %13, align 8
  %41 = getelementptr i8, ptr %40, i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  store i8 0, ptr %41, align 1
  %42 = load ptr, ptr %13, align 8
  %43 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %42)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define ptr @typegetter_wrapper(ptr %f, ptr nocapture nofree noundef nonnull readonly %0) #2 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f(ptr nocapture nofree noundef nonnull readonly %0) #17
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { i64, i64 } @size_wrapper(ptr %f, ptr nocapture nofree readonly %0) #2 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call { i64, i64 } %f(ptr nocapture nofree readonly %0) #17
  ret { i64, i64 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { ptr, i160 } @box_wrapper(ptr %f, ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #2 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call { ptr, i160 } %f(ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #17
  ret { ptr, i160 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: readwrite)
define void @unbox_wrapper(ptr %f, { ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void %f({ ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #18
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @behavior_wrapper(ptr %f, { ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #4 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #19
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @class_behavior_wrapper(ptr %f, ptr nocapture nofree noundef nonnull %0) #4 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f(ptr nocapture nofree noundef nonnull %0) #19
  ret ptr %result
}

define ptr @adjust_trampoline(ptr %tramp) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %ret = call ptr @llvm.adjust.trampoline(ptr %tramp) #20
  ret ptr %ret
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #5

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc(i64 noundef %size) #6 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr @current_ptr) #6
  ret ptr %result
}

; Function Attrs: mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr %current_ptr) #7 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %size_plus_15 = add i64 %size, 15
  %aligned_size = and i64 %size_plus_15, -16
  %current = load ptr, ptr %current_ptr, align 8
  %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
  store ptr %new_ptr, ptr %current_ptr, align 8
  ret ptr %current
}

define { i64, i64 } @_size_tuple_typ(ptr %0) {
  %.reg2mem = alloca i64, align 8
  %.reg2mem2 = alloca i64, align 8
  %.reg2mem5 = alloca i64, align 8
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem11 = alloca i64, align 8
  %.reg2mem22.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.010.reg2mem = alloca i64, align 8
  %.reg2mem22.011.reg2mem = alloca i64, align 8
  %.reg2mem14 = alloca i64, align 8
  %.in.reg2mem = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  store i64 %3, ptr %.reg2mem11, align 4
  %.reload13 = load i64, ptr %.reg2mem11, align 4
  %4 = icmp eq i64 %.reload13, 0
  br i1 %4, label %.._crit_edge_crit_edge, label %..lr.ph_crit_edge

..lr.ph_crit_edge:                                ; preds = %1
  %.reload12 = load i64, ptr %.reg2mem11, align 4
  store i64 1, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 0, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 1, ptr %.reg2mem14, align 4
  store i64 %.reload12, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.._crit_edge_crit_edge:                           ; preds = %1
  store i64 0, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 1, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph..lr.ph_crit_edge, %..lr.ph_crit_edge
  %.in.reload = load i64, ptr %.in.reg2mem, align 4
  %.reload15 = load i64, ptr %.reg2mem14, align 4
  %.reg2mem22.011.reload = load i64, ptr %.reg2mem22.011.reg2mem, align 4
  %.reg2mem20.010.reload = load i64, ptr %.reg2mem20.010.reg2mem, align 4
  %5 = inttoptr i64 %.in.reload to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 48
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reload)
  store i64 %12, ptr %.reg2mem8, align 4
  %13 = urem i64 %.reg2mem22.011.reload, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reload
  %18 = add i64 %17, %16
  store i64 %18, ptr %.reg2mem5, align 4
  %19 = add i64 %.reload15, 1
  store i64 %19, ptr %.reg2mem2, align 4
  %.reload3 = load i64, ptr %.reg2mem2, align 4
  %20 = getelementptr ptr, ptr %0, i64 %.reload3
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %.reg2mem, align 4
  %.reload = load i64, ptr %.reg2mem, align 4
  %22 = icmp eq i64 %.reload, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph..lr.ph_crit_edge

.lr.ph..lr.ph_crit_edge:                          ; preds = %.lr.ph
  %.reload1 = load i64, ptr %.reg2mem, align 4
  %.reload4 = load i64, ptr %.reg2mem2, align 4
  %.reload7 = load i64, ptr %.reg2mem5, align 4
  %.reload10 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload10, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 %.reload7, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 %.reload4, ptr %.reg2mem14, align 4
  store i64 %.reload1, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %.reload6 = load i64, ptr %.reg2mem5, align 4
  %.reload9 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload6, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 %.reload9, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.._crit_edge_crit_edge, %.._crit_edge_crit_edge
  %.reg2mem20.0.lcssa.reload = load i64, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  %.reg2mem22.0.lcssa.reload = load i64, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  %23 = urem i64 %.reg2mem22.0.lcssa.reload, %.reg2mem20.0.lcssa.reload
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reload, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %.reg2mem22.0.lcssa.reload
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reload, 1
  ret { i64, i64 } %29
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #8

define { i64, i64 } @_size_union_typ(ptr %0) {
  %.reg2mem = alloca i64, align 8
  %.reg2mem2 = alloca i64, align 8
  %.reg2mem5 = alloca i64, align 8
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem11 = alloca i64, align 8
  %.reg2mem22.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.010.reg2mem = alloca i64, align 8
  %.reg2mem22.011.reg2mem = alloca i64, align 8
  %.reg2mem14 = alloca i64, align 8
  %.in.reg2mem = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  store i64 %3, ptr %.reg2mem11, align 4
  %.reload13 = load i64, ptr %.reg2mem11, align 4
  %4 = icmp eq i64 %.reload13, 0
  br i1 %4, label %.._crit_edge_crit_edge, label %..lr.ph_crit_edge

..lr.ph_crit_edge:                                ; preds = %1
  %.reload12 = load i64, ptr %.reg2mem11, align 4
  store i64 1, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 0, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 1, ptr %.reg2mem14, align 4
  store i64 %.reload12, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.._crit_edge_crit_edge:                           ; preds = %1
  store i64 0, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 1, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph..lr.ph_crit_edge, %..lr.ph_crit_edge
  %.in.reload = load i64, ptr %.in.reg2mem, align 4
  %.reload15 = load i64, ptr %.reg2mem14, align 4
  %.reg2mem22.011.reload = load i64, ptr %.reg2mem22.011.reg2mem, align 4
  %.reg2mem20.010.reload = load i64, ptr %.reg2mem20.010.reg2mem, align 4
  %5 = inttoptr i64 %.in.reload to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 48
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reload)
  store i64 %12, ptr %.reg2mem8, align 4
  %13 = urem i64 %.reg2mem22.011.reload, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reload
  %18 = tail call i64 @llvm.umax.i64(i64 %17, i64 %16)
  store i64 %18, ptr %.reg2mem5, align 4
  %19 = add i64 %.reload15, 1
  store i64 %19, ptr %.reg2mem2, align 4
  %.reload3 = load i64, ptr %.reg2mem2, align 4
  %20 = getelementptr ptr, ptr %0, i64 %.reload3
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %.reg2mem, align 4
  %.reload = load i64, ptr %.reg2mem, align 4
  %22 = icmp eq i64 %.reload, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph..lr.ph_crit_edge

.lr.ph..lr.ph_crit_edge:                          ; preds = %.lr.ph
  %.reload1 = load i64, ptr %.reg2mem, align 4
  %.reload4 = load i64, ptr %.reg2mem2, align 4
  %.reload7 = load i64, ptr %.reg2mem5, align 4
  %.reload10 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload10, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 %.reload7, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 %.reload4, ptr %.reg2mem14, align 4
  store i64 %.reload1, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %.reload6 = load i64, ptr %.reg2mem5, align 4
  %.reload9 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload6, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 %.reload9, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.._crit_edge_crit_edge, %.._crit_edge_crit_edge
  %.reg2mem20.0.lcssa.reload = load i64, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  %.reg2mem22.0.lcssa.reload = load i64, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  %final_size = add i64 %.reg2mem22.0.lcssa.reload, 8
  %23 = urem i64 %final_size, %.reg2mem20.0.lcssa.reload
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reload, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %final_size
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reload, 1
  ret { i64, i64 } %29
}

define void @_unbox_union_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @_size_union_typ(ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = icmp eq i64 %8, 32
  %11 = select i1 %9, ptr %5, ptr %6
  %12 = select i1 %10, ptr %4, ptr %11
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %12, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_Default(ptr %fat_ptr, ptr %parameterization) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %1 = insertvalue { ptr, i160 } undef, ptr %vptr, 0
  %2 = getelementptr i8, ptr %fat_ptr, i64 8
  %3 = load i160, ptr %2, align 4
  %4 = insertvalue { ptr, i160 } %1, i160 %3, 1
  ret { ptr, i160 } %4
}

define void @_unbox_Default({ ptr, i160 } %fat_ptr, ptr %parameterization, ptr %destination) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = extractvalue { ptr, i160 } %fat_ptr, 0
  %data = extractvalue { ptr, i160 } %fat_ptr, 1
  %dest_data = getelementptr i8, ptr %destination, i64 8
  store ptr %vptr, ptr %destination, align 8
  store i160 %data, ptr %dest_data, align 4
  ret void
}

define void @anoint_trampoline(ptr %tramp) {
  %oldProtect = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr %oldProtect) #9
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) #9

define ptr @coroutine_create(ptr %func, ptr %arg_passer) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %stack = call noalias ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #21
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 0
  store ptr %func, ptr %func_ptr, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 1
  %arg_passer_slot = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 2
  %into_callee_first_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 0
  %into_callee_second_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 1
  %into_callee_third_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 2
  store i64 %stack_top_aligned, ptr %into_callee_first_word, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 3
  store i1 false, ptr %is_finished, align 1
  call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1)
declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) #10

declare void @coroutine_trampoline(ptr)

define void @setup_landing_pad() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %region = call noalias ptr @VirtualAlloc(ptr null, i64 21474836480, i32 12288, i32 4) #21
  store ptr %region, ptr @current_ptr, align 8
  %buf_first_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 0
  %buf_second_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 1
  %buf_third_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 2
  %sp = call ptr @llvm.stacksave.p0() #22
  store ptr %sp, ptr %buf_first_word, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr %buf_second_word, align 8
  store ptr %sp, ptr %buf_third_word, align 8
  %current_coroutine = call ptr @coroutine_create(ptr @setup_landing_pad, ptr @arg_passer)
  store ptr %current_coroutine, ptr @current_coroutine, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = call i32 @printf(ptr @string_string.93, ptr @exception_message)
  %cc = load { ptr }, ptr @current_coroutine, align 8
  call void @report_exception({ ptr } %cc)
  call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #11

define void @arg_passer(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 0
  %func = load ptr, ptr %func_ptr, align 8
  call void %func()
  ret void
}

define i1 @returns_one() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

declare void @exit()

define i32 @get_offset(ptr %vptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %id = load i64, ptr %id_ptr, align 4
  %id_of_casted = load i64, ptr %vptr, align 4
  %hash_coef_ptr = getelementptr i64, ptr %vptr, i32 1
  %tbl_size_ptr = getelementptr i64, ptr %vptr, i32 2
  %offset_tbl_ptr = getelementptr ptr, ptr %vptr, i32 5
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %index = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %id)
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %index
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %product, %shifted
  %hash = and i64 %xored, %tbl_size
  %bug = icmp sgt i64 %hash, %tbl_size
  ret i64 %hash
}

define void @assume_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  %dest_value = load i32, ptr %destination, align 4
  %slot = alloca i32, align 4
  store i32 %dest_value, ptr %slot, align 4
  %slotval = load i32, ptr %slot, align 4
  %eq = icmp eq i32 %slotval, %offset
  call void @llvm.assume(i1 %eq) #23
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #12

define void @set_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  store i32 %offset, ptr %destination, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #2 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %hash = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id)
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #2 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #17
  ret i1 %result
}

define void @arg_buffer_filler(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define ptr @get_current_coroutine() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

; Function Attrs: noinline nounwind memory(readwrite)
define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #13 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %from_buf_first_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 0
  %from_buf_second_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 1
  %from_buf_third_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 2
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = call ptr @llvm.stacksave.p0() #22
  store ptr %sp, ptr %from_buf_first_word, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %is_first_time = call i1 @returns_one()
  br i1 %is_first_time, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #14
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #14

define void @coroutine_yield(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr @into_caller_buf) #24
  ret void
}

define void @coroutine_call(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %old_into_caller = load [3 x ptr], ptr @into_caller_buf, align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly @into_caller_buf, ptr %into_callee_buf) #24
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store [3 x ptr] %old_into_caller, ptr @into_caller_buf, align 8
  ret void
}

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #3 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: readwrite) }
attributes #4 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none) }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #6 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #7 = { mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #8 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #9 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #10 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1) "alloc-family"="malloc" }
attributes #11 = { nocallback nofree nosync nounwind willreturn }
attributes #12 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #13 = { noinline nounwind memory(readwrite) }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind willreturn memory(argmem: readwrite) }
attributes #16 = { nounwind willreturn memory(argmem: read, inaccessiblemem: readwrite) }
attributes #17 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #18 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) }
attributes #19 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
attributes #20 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
attributes #21 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1) "alloc-family"="malloc" }
attributes #22 = { mustprogress nofree nosync nounwind willreturn }
attributes #23 = { mustprogress nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #24 = { nounwind memory(readwrite) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
